# Generated from sql/snowflake/SnowflakeParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,946,13225,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
        2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
        7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,
        2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
        7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,
        2,373,7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,
        7,378,2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,
        2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,
        7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,
        2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,
        7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
        2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,
        7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
        2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
        7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,
        2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
        7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,
        2,439,7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,
        7,444,2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,
        2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,
        7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,
        2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,
        7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
        2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,
        7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
        2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
        7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,
        2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
        7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,
        2,505,7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,
        7,510,2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,
        2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,
        7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,
        2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,
        7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
        2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,
        7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
        2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
        7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,
        2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
        7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,
        2,571,7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,
        7,576,2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,
        2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,
        7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,
        2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,
        7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
        2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,
        7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
        2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,
        7,620,2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,
        2,626,7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,
        7,631,2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,
        2,637,7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,1,0,
        3,0,1286,8,0,1,0,1,0,1,1,1,1,1,1,5,1,1293,8,1,10,1,12,1,1296,9,1,
        1,1,3,1,1299,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1307,8,2,1,3,1,3,1,
        3,1,3,3,3,1313,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,1321,8,4,1,5,1,5,
        3,5,1325,8,5,1,5,1,5,1,5,3,5,1330,8,5,1,5,1,5,3,5,1334,8,5,1,6,1,
        6,3,6,1338,8,6,1,6,1,6,1,6,1,6,3,6,1344,8,6,1,6,1,6,1,6,1,6,1,6,
        4,6,1351,8,6,11,6,12,6,1352,4,6,1355,8,6,11,6,12,6,1356,1,6,1,6,
        3,6,1361,8,6,1,6,1,6,3,6,1365,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1373,
        8,7,1,7,3,7,1376,8,7,1,8,1,8,1,8,1,8,1,8,5,8,1383,8,8,10,8,12,8,
        1386,9,8,1,8,1,8,1,9,1,9,1,9,3,9,1393,8,9,1,10,1,10,1,10,1,10,3,
        10,1399,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,4,11,1408,8,11,11,
        11,12,11,1409,1,12,1,12,1,12,1,12,3,12,1416,8,12,1,12,1,12,4,12,
        1420,8,12,11,12,12,12,1421,1,12,1,12,1,12,1,12,1,12,3,12,1429,8,
        12,1,12,1,12,3,12,1433,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,5,13,1445,8,13,10,13,12,13,1448,9,13,1,13,3,13,1451,
        8,13,1,14,1,14,1,14,1,14,1,14,3,14,1458,8,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,3,15,1468,8,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,5,15,1479,8,15,10,15,12,15,1482,9,15,1,15,1,15,3,
        15,1486,8,15,1,15,1,15,3,15,1490,8,15,1,16,1,16,3,16,1494,8,16,1,
        16,1,16,1,16,1,16,3,16,1500,8,16,3,16,1502,8,16,1,17,1,17,1,17,1,
        17,3,17,1508,8,17,1,17,1,17,1,17,1,17,3,17,1514,8,17,3,17,1516,8,
        17,1,17,1,17,3,17,1520,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,3,18,1531,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,3,19,1558,8,19,1,20,1,20,3,20,1562,8,20,1,20,1,
        20,3,20,1566,8,20,1,20,1,20,1,20,1,20,3,20,1572,8,20,3,20,1574,8,
        20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1584,8,21,1,21,3,
        21,1587,8,21,1,21,3,21,1590,8,21,1,21,3,21,1593,8,21,1,21,5,21,1596,
        8,21,10,21,12,21,1599,9,21,1,21,1,21,1,21,3,21,1604,8,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,3,21,1613,8,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,3,21,1623,8,21,1,21,1,21,3,21,1627,8,21,1,21,3,
        21,1630,8,21,1,21,3,21,1633,8,21,1,21,5,21,1636,8,21,10,21,12,21,
        1639,9,21,3,21,1641,8,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
        5,23,1651,8,23,10,23,12,23,1654,9,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,3,24,1663,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,
        26,1,26,5,26,1675,8,26,10,26,12,26,1678,9,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,4,27,1690,8,27,11,27,12,27,1691,1,
        27,1,27,3,27,1696,8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1704,8,
        28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,1712,8,28,1,28,3,28,1715,8,
        28,1,28,3,28,1718,8,28,1,28,3,28,1721,8,28,1,28,1,28,1,28,3,28,1726,
        8,28,1,28,3,28,1729,8,28,1,29,1,29,3,29,1733,8,29,1,29,1,29,1,29,
        1,29,3,29,1739,8,29,1,29,1,29,1,29,1,29,1,29,3,29,1746,8,29,1,29,
        1,29,1,29,1,29,1,29,1,29,3,29,1754,8,29,1,30,1,30,3,30,1758,8,30,
        1,30,1,30,1,31,1,31,3,31,1764,8,31,1,32,1,32,1,32,1,32,1,32,3,32,
        1771,8,32,1,32,1,32,1,32,1,32,1,32,5,32,1778,8,32,10,32,12,32,1781,
        9,32,1,32,1,32,3,32,1785,8,32,1,32,1,32,1,32,3,32,1790,8,32,1,33,
        1,33,1,33,1,33,1,34,1,34,1,34,3,34,1799,8,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,36,1,36,1,36,1,36,3,36,1811,8,36,1,36,1,36,3,36,1815,
        8,36,1,36,3,36,1818,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,3,37,1833,8,37,3,37,1835,8,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,3,37,1845,8,37,3,37,1847,8,37,1,37,
        1,37,1,37,1,37,1,37,1,37,3,37,1855,8,37,1,38,1,38,1,38,1,38,3,38,
        1861,8,38,3,38,1863,8,38,1,38,1,38,1,38,1,38,1,38,3,38,1870,8,38,
        3,38,1872,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1881,8,38,
        1,38,1,38,1,38,1,38,3,38,1887,8,38,3,38,1889,8,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,1899,8,38,1,38,1,38,1,38,3,38,1904,
        8,38,3,38,1906,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        3,38,1917,8,38,3,38,1919,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,3,38,1932,8,38,3,38,1934,8,38,1,38,1,38,1,38,
        3,38,1939,8,38,3,38,1941,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,3,38,1951,8,38,3,38,1953,8,38,1,38,1,38,3,38,1957,8,38,1,38,
        1,38,1,38,1,38,3,38,1963,8,38,1,39,1,39,1,39,5,39,1968,8,39,10,39,
        12,39,1971,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,3,40,1986,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,2002,8,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,2015,8,40,3,40,2017,
        8,40,1,41,1,41,1,41,5,41,2022,8,41,10,41,12,41,2025,9,41,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,2036,8,42,1,43,1,43,1,
        43,5,43,2041,8,43,10,43,12,43,2044,9,43,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,2073,8,44,1,44,
        1,44,1,44,3,44,2078,8,44,1,45,1,45,1,45,5,45,2083,8,45,10,45,12,
        45,2086,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,
        46,2098,8,46,1,46,1,46,1,46,3,46,2103,8,46,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,2121,
        8,47,1,47,1,47,3,47,2125,8,47,1,47,1,47,1,47,1,47,1,48,1,48,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,2141,8,49,1,50,1,50,3,50,
        2145,8,50,1,51,1,51,1,52,1,52,1,52,1,52,3,52,2153,8,52,1,52,3,52,
        2156,8,52,1,53,1,53,1,53,3,53,2161,8,53,1,54,1,54,3,54,2165,8,54,
        1,54,1,54,1,54,3,54,2170,8,54,1,55,1,55,1,55,3,55,2175,8,55,1,56,
        1,56,1,56,1,56,5,56,2181,8,56,10,56,12,56,2184,9,56,1,56,3,56,2187,
        8,56,3,56,2189,8,56,1,57,1,57,1,57,1,57,1,57,3,57,2196,8,57,1,57,
        1,57,1,57,3,57,2201,8,57,1,57,1,57,1,57,3,57,2206,8,57,1,57,1,57,
        1,57,3,57,2211,8,57,1,57,1,57,1,57,3,57,2216,8,57,1,58,1,58,1,58,
        1,58,3,58,2222,8,58,1,58,3,58,2225,8,58,1,59,1,59,1,59,1,59,3,59,
        2231,8,59,1,59,1,59,1,59,3,59,2236,8,59,3,59,2238,8,59,1,59,1,59,
        1,59,1,59,1,59,3,59,2245,8,59,3,59,2247,8,59,1,59,1,59,1,59,1,59,
        1,59,1,59,3,59,2255,8,59,1,59,1,59,1,59,1,59,3,59,2261,8,59,3,59,
        2263,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2273,8,59,
        1,59,1,59,1,59,3,59,2278,8,59,3,59,2280,8,59,1,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,3,59,2290,8,59,3,59,2292,8,59,1,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2304,8,59,1,59,1,59,1,59,
        3,59,2309,8,59,3,59,2311,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,2321,8,59,3,59,2323,8,59,1,59,1,59,3,59,2327,8,59,1,59,
        1,59,3,59,2331,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,3,60,2347,8,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,3,60,2356,8,60,3,60,2358,8,60,1,60,1,60,1,60,1,60,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2372,8,61,1,62,1,62,3,62,
        2376,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,
        2388,8,63,10,63,12,63,2391,9,63,1,63,1,63,1,63,1,63,1,63,1,63,5,
        63,2399,8,63,10,63,12,63,2402,9,63,1,63,1,63,3,63,2406,8,63,1,64,
        1,64,1,64,1,64,1,64,1,65,1,65,3,65,2415,8,65,1,65,3,65,2418,8,65,
        1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,2429,8,66,10,66,
        12,66,2432,9,66,1,66,1,66,3,66,2436,8,66,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,
        2481,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,3,68,2525,8,68,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2552,8,69,1,70,1,70,1,70,
        1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,3,71,2610,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,3,72,2705,8,72,1,73,1,73,1,73,1,73,
        1,74,1,74,1,74,1,74,1,75,1,75,1,75,3,75,2718,8,75,1,75,1,75,1,75,
        1,75,4,75,2724,8,75,11,75,12,75,2725,1,75,1,75,4,75,2730,8,75,11,
        75,12,75,2731,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        3,75,2744,8,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        2755,8,77,1,78,1,78,1,79,1,79,3,79,2761,8,79,1,79,1,79,3,79,2765,
        8,79,1,79,1,79,1,79,1,79,1,79,3,79,2772,8,79,1,79,1,79,1,79,3,79,
        2777,8,79,1,79,1,79,1,79,3,79,2782,8,79,1,79,3,79,2785,8,79,1,79,
        1,79,1,79,1,79,1,79,1,79,3,79,2793,8,79,1,79,1,79,1,79,1,79,1,79,
        1,79,3,79,2801,8,79,1,79,3,79,2804,8,79,1,79,1,79,3,79,2808,8,79,
        1,79,1,79,1,79,1,79,1,79,1,79,3,79,2816,8,79,1,79,1,79,1,79,1,79,
        1,79,1,79,3,79,2824,8,79,1,79,1,79,3,79,2828,8,79,1,79,1,79,1,79,
        1,79,1,79,5,79,2835,8,79,10,79,12,79,2838,9,79,3,79,2840,8,79,1,
        80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,3,82,2851,8,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,2861,8,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,3,82,2871,8,82,1,82,1,82,1,82,1,82,1,82,3,
        82,2878,8,82,1,82,1,82,1,82,3,82,2883,8,82,1,82,3,82,2886,8,82,1,
        82,3,82,2889,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,3,82,2904,8,82,1,82,1,82,1,82,1,82,1,82,5,82,2911,
        8,82,10,82,12,82,2914,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,3,82,2927,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,3,82,2937,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,3,82,2961,8,82,1,82,1,82,1,82,1,82,1,82,3,82,2968,8,82,1,83,1,
        83,1,84,1,84,1,84,5,84,2975,8,84,10,84,12,84,2978,9,84,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2991,8,85,1,85,
        3,85,2994,8,85,1,85,1,85,1,85,3,85,2999,8,85,1,85,1,85,1,85,3,85,
        3004,8,85,1,85,1,85,1,85,1,85,1,85,3,85,3011,8,85,1,86,1,86,1,86,
        1,86,3,86,3017,8,86,1,86,1,86,1,86,1,86,1,86,4,86,3024,8,86,11,86,
        12,86,3025,3,86,3028,8,86,1,86,1,86,1,86,1,86,3,86,3034,8,86,1,86,
        1,86,1,86,1,86,1,86,3,86,3041,8,86,1,86,1,86,1,86,1,86,1,86,1,86,
        3,86,3049,8,86,1,86,1,86,1,86,3,86,3054,8,86,1,86,1,86,1,86,1,86,
        3,86,3060,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,3069,8,86,
        1,86,1,86,1,86,1,86,1,86,5,86,3076,8,86,10,86,12,86,3079,9,86,1,
        86,1,86,1,86,1,86,3,86,3085,8,86,1,86,1,86,1,86,3,86,3090,8,86,1,
        87,1,87,1,87,5,87,3095,8,87,10,87,12,87,3098,9,87,1,88,1,88,1,88,
        1,88,3,88,3104,8,88,1,88,1,88,1,88,3,88,3109,8,88,1,88,1,88,1,88,
        1,88,3,88,3115,8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,3,88,3128,8,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,3,88,3141,8,88,1,88,1,88,1,88,1,88,1,88,3,88,3148,
        8,88,1,88,3,88,3151,8,88,1,88,1,88,1,88,1,88,3,88,3157,8,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,3167,8,88,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,5,88,3180,8,88,10,88,12,
        88,3183,9,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,3194,
        8,88,1,88,1,88,1,88,1,88,1,88,3,88,3201,8,88,1,89,1,89,1,89,1,89,
        1,90,1,90,1,90,1,90,1,91,1,91,1,91,5,91,3214,8,91,10,91,12,91,3217,
        9,91,1,92,1,92,1,92,5,92,3222,8,92,10,92,12,92,3225,9,92,1,93,1,
        93,1,93,5,93,3230,8,93,10,93,12,93,3233,9,93,1,94,1,94,1,94,1,94,
        3,94,3239,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
        3250,8,94,1,94,1,94,1,94,1,94,1,94,3,94,3257,8,94,1,94,3,94,3260,
        8,94,1,94,1,94,1,94,1,94,3,94,3266,8,94,1,94,1,94,1,94,1,94,1,94,
        1,94,3,94,3274,8,94,1,94,1,94,1,94,1,94,3,94,3280,8,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,3292,8,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,3307,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,3319,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,3331,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,3,94,3346,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,3,94,3358,8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,3366,8,94,
        1,94,1,94,1,94,1,94,3,94,3372,8,94,1,94,1,94,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,3,94,3384,8,94,1,94,1,94,1,94,3,94,3389,8,94,
        1,95,1,95,1,95,1,95,3,95,3395,8,95,1,95,1,95,1,95,1,95,1,95,1,95,
        1,95,1,95,1,95,3,95,3406,8,95,1,95,1,95,1,95,5,95,3411,8,95,10,95,
        12,95,3414,9,95,1,95,3,95,3417,8,95,3,95,3419,8,95,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        5,96,3450,8,96,10,96,12,96,3453,9,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,5,96,3463,8,96,10,96,12,96,3466,9,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,3492,8,96,1,97,1,97,
        1,97,3,97,3497,8,97,1,97,1,97,1,97,3,97,3502,8,97,1,97,1,97,1,98,
        1,98,1,98,5,98,3509,8,98,10,98,12,98,3512,9,98,1,99,1,99,1,99,1,
        99,1,99,1,99,4,99,3520,8,99,11,99,12,99,3521,1,99,1,99,4,99,3526,
        8,99,11,99,12,99,3527,3,99,3530,8,99,1,99,1,99,1,99,1,99,1,99,1,
        99,3,99,3538,8,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
        3,100,3548,8,100,1,101,1,101,1,101,3,101,3553,8,101,1,102,1,102,
        1,102,1,102,3,102,3559,8,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,3,102,3571,8,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,3,102,3582,8,102,1,102,1,102,1,102,
        1,102,3,102,3588,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        3,103,3608,8,103,1,103,1,103,3,103,3612,8,103,1,103,3,103,3615,8,
        103,1,103,1,103,3,103,3619,8,103,1,104,1,104,1,104,1,104,1,104,1,
        105,1,105,3,105,3628,8,105,1,105,1,105,3,105,3632,8,105,1,105,1,
        105,1,105,3,105,3637,8,105,1,105,1,105,3,105,3641,8,105,1,105,1,
        105,3,105,3645,8,105,1,105,1,105,3,105,3649,8,105,1,105,1,105,1,
        105,3,105,3654,8,105,1,105,1,105,3,105,3658,8,105,1,105,1,105,3,
        105,3662,8,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,3670,8,
        105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,3678,8,105,1,105,1,
        105,1,105,1,105,1,105,1,105,3,105,3686,8,105,1,106,1,106,1,106,3,
        106,3691,8,106,1,106,1,106,1,106,3,106,3696,8,106,1,106,3,106,3699,
        8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,3,106,3714,8,106,1,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,1,106,3,106,3725,8,106,1,106,1,106,1,106,1,106,
        1,106,1,106,1,106,3,106,3734,8,106,1,106,1,106,1,106,1,106,1,106,
        3,106,3741,8,106,1,106,1,106,1,106,3,106,3746,8,106,3,106,3748,8,
        106,1,107,1,107,1,107,3,107,3753,8,107,1,107,1,107,1,107,3,107,3758,
        8,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,3768,
        8,107,1,107,1,107,1,107,3,107,3773,8,107,1,107,1,107,1,107,1,107,
        1,107,1,107,1,107,3,107,3782,8,107,1,107,1,107,1,107,3,107,3787,
        8,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,3796,8,107,
        1,107,1,107,1,107,3,107,3801,8,107,1,107,1,107,1,107,1,107,1,107,
        3,107,3808,8,107,1,108,1,108,1,108,1,108,3,108,3814,8,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3825,8,108,
        1,108,1,108,1,108,1,108,1,108,3,108,3832,8,108,1,108,1,108,1,108,
        3,108,3837,8,108,1,108,1,108,1,108,1,108,3,108,3843,8,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,5,108,3855,
        8,108,10,108,12,108,3858,9,108,1,108,1,108,1,108,3,108,3863,8,108,
        1,108,1,108,1,108,1,108,3,108,3869,8,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,3,108,3881,8,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        3,108,3896,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,3,108,3908,8,108,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,3,108,3920,8,108,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3935,
        8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,
        3,108,3947,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3955,
        8,108,1,108,1,108,1,108,1,108,3,108,3961,8,108,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3973,8,108,1,108,
        1,108,1,108,1,108,1,108,1,108,1,108,3,108,3982,8,108,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,3,108,3991,8,108,1,108,1,108,1,108,
        3,108,3996,8,108,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,
        1,111,1,111,1,111,1,111,1,111,1,111,5,111,4012,8,111,10,111,12,111,
        4015,9,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,1,113,
        1,113,1,113,1,113,3,113,4029,8,113,1,113,1,113,1,113,3,113,4034,
        8,113,1,113,3,113,4037,8,113,1,113,1,113,1,113,1,113,1,113,1,113,
        3,113,4045,8,113,1,113,1,113,1,113,3,113,4050,8,113,3,113,4052,8,
        113,1,113,1,113,1,113,1,113,1,113,5,113,4059,8,113,10,113,12,113,
        4062,9,113,3,113,4064,8,113,3,113,4066,8,113,1,114,1,114,1,114,3,
        114,4071,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,
        114,4081,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,4090,
        8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,4099,8,114,
        1,114,1,114,1,114,1,114,1,114,1,114,3,114,4107,8,114,1,114,1,114,
        1,114,3,114,4112,8,114,1,115,1,115,1,115,1,115,1,115,3,115,4119,
        8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,3,115,4132,8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,3,115,4144,8,115,1,115,1,115,1,115,1,115,3,115,
        4150,8,115,1,116,1,116,1,116,3,116,4155,8,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,3,116,4165,8,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,3,116,4175,8,116,1,116,1,116,1,116,
        1,116,1,116,3,116,4182,8,116,1,116,1,116,1,116,3,116,4187,8,116,
        1,116,3,116,4190,8,116,1,116,3,116,4193,8,116,1,116,1,116,1,116,
        3,116,4198,8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,4206,
        8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,4214,8,116,1,116,
        1,116,1,116,1,116,1,116,5,116,4221,8,116,10,116,12,116,4224,9,116,
        1,116,1,116,1,116,3,116,4229,8,116,1,116,1,116,1,116,1,116,1,116,
        3,116,4236,8,116,1,117,1,117,1,118,1,118,1,118,3,118,4243,8,118,
        1,118,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,4253,8,118,
        1,118,1,118,3,118,4257,8,118,1,118,1,118,3,118,4261,8,118,1,118,
        3,118,4264,8,118,1,118,3,118,4267,8,118,1,118,1,118,1,118,3,118,
        4272,8,118,1,118,1,118,1,118,3,118,4277,8,118,1,118,1,118,3,118,
        4281,8,118,1,118,1,118,1,118,3,118,4286,8,118,1,118,1,118,1,118,
        1,118,3,118,4292,8,118,1,119,1,119,1,119,3,119,4297,8,119,1,119,
        1,119,1,119,1,120,1,120,1,120,1,120,3,120,4306,8,120,1,121,4,121,
        4309,8,121,11,121,12,121,4310,1,121,4,121,4314,8,121,11,121,12,121,
        4315,1,121,4,121,4319,8,121,11,121,12,121,4320,1,121,4,121,4324,
        8,121,11,121,12,121,4325,1,121,4,121,4329,8,121,11,121,12,121,4330,
        3,121,4333,8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,
        4342,8,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,4351,
        8,123,1,124,1,124,1,124,1,124,3,124,4357,8,124,1,125,1,125,1,125,
        1,125,1,125,1,125,1,125,3,125,4366,8,125,1,126,1,126,1,126,1,126,
        3,126,4372,8,126,1,127,1,127,3,127,4376,8,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,3,127,4385,8,127,1,127,1,127,1,127,3,127,
        4390,8,127,1,127,1,127,1,127,3,127,4395,8,127,1,127,1,127,1,127,
        3,127,4400,8,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,
        4409,8,127,3,127,4411,8,127,1,127,1,127,1,127,3,127,4416,8,127,1,
        127,1,127,1,127,3,127,4421,8,127,1,127,1,127,1,127,1,127,1,127,1,
        127,1,127,3,127,4430,8,127,3,127,4432,8,127,1,127,1,127,1,127,3,
        127,4437,8,127,1,127,1,127,1,127,3,127,4442,8,127,1,127,1,127,1,
        127,1,127,1,127,1,127,3,127,4450,8,127,1,127,1,127,1,127,1,127,1,
        127,1,127,3,127,4458,8,127,1,127,1,127,1,127,1,127,1,127,1,127,3,
        127,4466,8,127,1,127,1,127,1,127,3,127,4471,8,127,1,127,1,127,1,
        127,3,127,4476,8,127,1,127,1,127,3,127,4480,8,127,1,127,1,127,3,
        127,4484,8,127,1,127,1,127,1,127,1,127,1,127,5,127,4491,8,127,10,
        127,12,127,4494,9,127,1,127,1,127,3,127,4498,8,127,1,127,1,127,1,
        127,1,127,1,127,1,127,3,127,4506,8,127,1,127,1,127,1,127,1,127,3,
        127,4512,8,127,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,
        128,4522,8,128,1,129,1,129,3,129,4526,8,129,1,129,1,129,3,129,4530,
        8,129,1,129,1,129,1,129,1,129,1,129,3,129,4537,8,129,1,129,3,129,
        4540,8,129,1,129,1,129,1,129,3,129,4545,8,129,1,129,1,129,1,129,
        3,129,4550,8,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,
        4559,8,129,3,129,4561,8,129,1,129,1,129,1,129,3,129,4566,8,129,1,
        129,1,129,1,129,3,129,4571,8,129,1,129,1,129,1,129,1,129,1,129,1,
        129,1,129,3,129,4580,8,129,3,129,4582,8,129,1,129,1,129,1,129,3,
        129,4587,8,129,1,129,1,129,1,129,3,129,4592,8,129,1,129,1,129,1,
        129,1,129,1,129,1,129,3,129,4600,8,129,1,129,1,129,1,129,1,129,1,
        129,1,129,3,129,4608,8,129,1,129,1,129,1,129,1,129,1,129,1,129,3,
        129,4616,8,129,1,129,1,129,1,129,1,129,1,129,3,129,4623,8,129,1,
        129,1,129,1,129,1,129,1,129,1,129,3,129,4631,8,129,1,129,1,129,3,
        129,4635,8,129,1,129,1,129,1,129,1,129,1,129,5,129,4642,8,129,10,
        129,12,129,4645,9,129,1,129,1,129,3,129,4649,8,129,1,129,1,129,1,
        129,1,129,1,129,1,129,3,129,4657,8,129,1,129,1,129,1,129,1,129,3,
        129,4663,8,129,1,130,1,130,1,131,1,131,3,131,4669,8,131,1,131,1,
        131,3,131,4673,8,131,1,131,1,131,1,131,1,131,1,131,3,131,4680,8,
        131,1,131,3,131,4683,8,131,1,131,1,131,1,131,3,131,4688,8,131,1,
        131,1,131,1,131,3,131,4693,8,131,1,131,1,131,1,131,3,131,4698,8,
        131,1,131,1,131,1,131,3,131,4703,8,131,1,131,1,131,1,131,3,131,4708,
        8,131,1,131,1,131,1,131,3,131,4713,8,131,1,131,1,131,1,131,3,131,
        4718,8,131,1,131,1,131,1,131,3,131,4723,8,131,1,131,1,131,1,131,
        3,131,4728,8,131,1,131,1,131,1,131,3,131,4733,8,131,1,131,1,131,
        1,131,3,131,4738,8,131,1,131,1,131,1,131,3,131,4743,8,131,1,131,
        1,131,1,131,3,131,4748,8,131,1,131,1,131,3,131,4752,8,131,1,131,
        1,131,3,131,4756,8,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,
        4764,8,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,4772,8,131,
        1,131,1,131,1,131,1,131,3,131,4778,8,131,1,132,1,132,3,132,4782,
        8,132,1,132,1,132,3,132,4786,8,132,1,132,1,132,1,132,1,132,1,132,
        3,132,4793,8,132,1,132,1,132,1,132,3,132,4798,8,132,1,132,3,132,
        4801,8,132,1,132,1,132,3,132,4805,8,132,1,132,1,132,3,132,4809,8,
        132,1,132,1,132,1,132,1,132,1,132,5,132,4816,8,132,10,132,12,132,
        4819,9,132,1,132,1,132,3,132,4823,8,132,1,132,1,132,1,132,1,132,
        1,132,1,132,3,132,4831,8,132,1,132,1,132,1,132,1,132,3,132,4837,
        8,132,1,133,1,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,5,134,4851,8,134,10,134,12,134,4854,9,134,3,134,4856,
        8,134,1,135,1,135,1,135,1,135,3,135,4862,8,135,1,135,1,135,1,135,
        5,135,4867,8,135,10,135,12,135,4870,9,135,1,135,1,135,1,135,1,135,
        3,135,4876,8,135,1,135,1,135,1,135,1,135,3,135,4882,8,135,1,135,
        1,135,1,135,1,135,3,135,4888,8,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,1,135,3,135,4899,8,135,1,135,1,135,1,135,3,135,
        4904,8,135,3,135,4906,8,135,1,136,1,136,1,136,1,136,3,136,4912,8,
        136,1,136,1,136,1,136,5,136,4917,8,136,10,136,12,136,4920,9,136,
        1,136,1,136,1,136,1,136,3,136,4926,8,136,1,136,1,136,1,136,1,136,
        3,136,4932,8,136,1,136,1,136,1,136,1,136,3,136,4938,8,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,4949,8,136,
        1,136,1,136,1,136,3,136,4954,8,136,3,136,4956,8,136,1,137,1,137,
        1,137,3,137,4961,8,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,
        5,137,4970,8,137,10,137,12,137,4973,9,137,1,137,1,137,1,137,3,137,
        4978,8,137,1,137,1,137,1,137,3,137,4983,8,137,1,137,1,137,1,137,
        1,137,1,137,1,137,1,137,5,137,4992,8,137,10,137,12,137,4995,9,137,
        1,137,1,137,1,137,3,137,5000,8,137,1,137,1,137,1,137,3,137,5005,
        8,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,5,137,5014,8,137,
        10,137,12,137,5017,9,137,3,137,5019,8,137,1,137,3,137,5022,8,137,
        1,137,1,137,1,137,3,137,5027,8,137,1,137,1,137,1,137,1,137,1,137,
        1,137,1,137,1,137,1,137,1,137,1,137,3,137,5040,8,137,1,137,1,137,
        1,137,1,137,3,137,5046,8,137,1,138,1,138,3,138,5050,8,138,1,138,
        1,138,3,138,5054,8,138,1,138,1,138,1,138,3,138,5059,8,138,1,138,
        3,138,5062,8,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,5070,
        8,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,5078,8,138,1,138,
        3,138,5081,8,138,1,138,1,138,3,138,5085,8,138,1,138,1,138,3,138,
        5089,8,138,1,138,1,138,1,138,1,138,1,138,3,138,5096,8,138,1,138,
        1,138,1,138,1,138,1,138,1,138,3,138,5104,8,138,1,138,1,138,3,138,
        5108,8,138,1,138,1,138,1,138,1,138,3,138,5114,8,138,1,139,1,139,
        1,139,3,139,5119,8,139,1,139,1,139,1,139,3,139,5124,8,139,1,139,
        3,139,5127,8,139,1,139,1,139,1,139,3,139,5132,8,139,1,139,1,139,
        1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,5145,
        8,139,1,139,1,139,1,139,1,139,3,139,5151,8,139,1,140,1,140,1,140,
        3,140,5156,8,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        3,140,5166,8,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        3,140,5176,8,140,1,140,1,140,1,140,1,140,3,140,5182,8,140,1,140,
        1,140,1,140,3,140,5187,8,140,1,140,1,140,1,140,1,140,1,140,1,140,
        3,140,5195,8,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,5203,
        8,140,1,140,1,140,1,140,3,140,5208,8,140,1,140,1,140,1,140,1,140,
        1,140,1,140,3,140,5216,8,140,1,140,1,140,1,140,3,140,5221,8,140,
        1,140,1,140,1,140,3,140,5226,8,140,1,140,1,140,1,140,3,140,5231,
        8,140,1,140,3,140,5234,8,140,1,140,3,140,5237,8,140,1,140,1,140,
        1,140,3,140,5242,8,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,
        5250,8,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,5258,8,140,
        1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,5268,8,140,
        1,140,1,140,1,140,3,140,5273,8,140,1,140,1,140,1,140,3,140,5278,
        8,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,3,141,5302,8,141,1,141,1,141,1,141,1,141,1,141,3,141,5309,
        8,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
        3,142,5321,8,142,1,142,1,142,3,142,5325,8,142,1,142,1,142,1,142,
        1,142,1,142,1,142,3,142,5333,8,142,1,143,1,143,3,143,5337,8,143,
        1,143,3,143,5340,8,143,1,143,1,143,1,143,5,143,5345,8,143,10,143,
        12,143,5348,9,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,1,143,5,143,5361,8,143,10,143,12,143,5364,9,143,1,143,
        1,143,1,143,1,143,1,143,5,143,5371,8,143,10,143,12,143,5374,9,143,
        3,143,5376,8,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,3,143,5392,8,143,1,143,3,143,
        5395,8,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,5,143,5408,8,143,10,143,12,143,5411,9,143,1,143,1,143,
        1,143,1,143,5,143,5417,8,143,10,143,12,143,5420,9,143,1,143,1,143,
        3,143,5424,8,143,1,143,3,143,5427,8,143,1,143,3,143,5430,8,143,1,
        144,3,144,5433,8,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,
        144,1,144,1,144,3,144,5445,8,144,1,144,1,144,1,144,1,144,1,144,3,
        144,5452,8,144,1,144,1,144,3,144,5456,8,144,1,144,3,144,5459,8,144,
        1,144,1,144,1,144,1,144,1,144,3,144,5466,8,144,1,145,1,145,3,145,
        5470,8,145,1,145,1,145,3,145,5474,8,145,1,145,5,145,5477,8,145,10,
        145,12,145,5480,9,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,
        3,145,5489,8,145,1,145,1,145,3,145,5493,8,145,1,146,3,146,5496,8,
        146,1,146,1,146,1,147,3,147,5501,8,147,1,147,1,147,1,148,1,148,1,
        148,1,149,1,149,3,149,5510,8,149,1,149,1,149,1,149,1,149,3,149,5516,
        8,149,1,149,1,149,3,149,5520,8,149,1,150,1,150,1,150,1,150,1,151,
        1,151,1,151,1,151,1,152,1,152,1,152,1,153,1,153,1,153,1,153,1,153,
        1,153,3,153,5539,8,153,1,154,5,154,5542,8,154,10,154,12,154,5545,
        9,154,1,154,1,154,3,154,5549,8,154,1,154,1,154,3,154,5553,8,154,
        1,154,1,154,3,154,5557,8,154,3,154,5559,8,154,3,154,5561,8,154,1,
        155,1,155,3,155,5565,8,155,1,155,1,155,1,155,1,155,1,155,1,155,1,
        155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,3,155,5582,8,
        155,1,155,3,155,5585,8,155,1,156,1,156,1,156,1,156,1,156,1,156,1,
        156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,5601,8,156,1,
        156,1,156,3,156,5605,8,156,1,156,1,156,1,156,1,156,1,156,1,156,1,
        156,1,156,1,156,3,156,5616,8,156,1,156,3,156,5619,8,156,1,156,3,
        156,5622,8,156,1,156,1,156,1,156,3,156,5627,8,156,1,157,1,157,1,
        157,1,157,1,157,1,157,1,157,5,157,5636,8,157,10,157,12,157,5639,
        9,157,3,157,5641,8,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        5,157,5650,8,157,10,157,12,157,5653,9,157,3,157,5655,8,157,3,157,
        5657,8,157,1,158,1,158,1,158,1,158,3,158,5663,8,158,1,158,1,158,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,5676,
        8,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,5695,8,159,1,159,
        3,159,5698,8,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,5,159,5717,
        8,159,10,159,12,159,5720,9,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,5,159,5729,8,159,10,159,12,159,5732,9,159,3,159,5734,8,159,
        1,160,1,160,1,160,5,160,5739,8,160,10,160,12,160,5742,9,160,1,161,
        3,161,5745,8,161,1,161,1,161,1,161,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,3,162,5759,8,162,1,162,1,162,1,162,1,162,
        1,162,3,162,5766,8,162,1,162,1,162,3,162,5770,8,162,1,162,3,162,
        5773,8,162,1,162,1,162,1,162,1,162,3,162,5779,8,162,1,163,3,163,
        5782,8,163,1,163,1,163,1,163,1,164,1,164,1,164,1,164,1,165,1,165,
        1,165,3,165,5794,8,165,1,165,1,165,1,165,1,166,1,166,1,166,3,166,
        5802,8,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,5810,8,166,
        1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,5820,8,166,
        1,166,1,166,1,166,1,166,1,166,3,166,5827,8,166,1,166,3,166,5830,
        8,166,1,166,3,166,5833,8,166,1,166,3,166,5836,8,166,1,166,3,166,
        5839,8,166,1,166,3,166,5842,8,166,1,166,3,166,5845,8,166,1,166,1,
        166,1,166,3,166,5850,8,166,1,166,1,166,1,166,3,166,5855,8,166,1,
        166,3,166,5858,8,166,1,166,3,166,5861,8,166,1,166,3,166,5864,8,166,
        1,166,3,166,5867,8,166,1,166,3,166,5870,8,166,1,166,3,166,5873,8,
        166,1,166,1,166,1,166,3,166,5878,8,166,1,166,1,166,1,166,1,166,1,
        166,1,166,3,166,5886,8,166,1,166,1,166,1,166,1,166,1,166,1,166,3,
        166,5894,8,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,
        166,5904,8,166,1,166,1,166,1,166,1,166,1,166,3,166,5911,8,166,1,
        167,1,167,1,167,3,167,5916,8,167,1,167,1,167,1,167,1,168,1,168,1,
        168,3,168,5924,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,
        168,3,168,5934,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,
        168,5943,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,
        168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        3,168,5964,8,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,5972,
        8,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,5980,8,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        3,168,5994,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,3,168,6006,8,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,3,168,6026,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,3,168,6040,8,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,6054,
        8,168,1,168,3,168,6057,8,168,1,168,1,168,1,168,1,168,1,168,3,168,
        6064,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,3,168,6076,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,3,168,6089,8,168,1,169,1,169,1,170,1,170,
        1,170,3,170,6096,8,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,5,171,6113,8,171,
        10,171,12,171,6116,9,171,1,171,3,171,6119,8,171,1,171,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,
        6134,8,171,1,171,1,171,1,171,1,171,3,171,6140,8,171,1,171,1,171,
        1,171,1,171,1,171,3,171,6147,8,171,1,171,1,171,1,171,1,171,3,171,
        6153,8,171,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,3,172,6181,8,172,1,172,1,172,
        1,172,1,172,1,172,1,172,3,172,6189,8,172,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        5,173,6206,8,173,10,173,12,173,6209,9,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,5,173,6219,8,173,10,173,12,173,6222,9,173,
        1,173,1,173,1,173,1,173,3,173,6228,8,173,1,174,3,174,6231,8,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,6241,8,174,
        1,174,1,174,1,174,1,174,1,174,1,174,3,174,6249,8,174,1,174,3,174,
        6252,8,174,1,174,3,174,6255,8,174,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,1,174,3,174,6266,8,174,1,175,3,175,6269,8,175,
        1,175,1,175,1,175,3,175,6274,8,175,3,175,6276,8,175,1,175,3,175,
        6279,8,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,5,175,
        6300,8,175,10,175,12,175,6303,9,175,1,175,1,175,1,175,1,175,1,175,
        5,175,6310,8,175,10,175,12,175,6313,9,175,3,175,6315,8,175,1,176,
        1,176,3,176,6319,8,176,1,176,3,176,6322,8,176,1,176,3,176,6325,8,
        176,1,176,1,176,1,176,1,176,3,176,6331,8,176,1,176,1,176,1,176,1,
        176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        6346,8,176,1,176,1,176,1,176,1,176,1,176,3,176,6353,8,176,1,177,
        1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        5,178,6367,8,178,10,178,12,178,6370,9,178,1,179,1,179,1,179,1,180,
        1,180,1,180,1,180,5,180,6379,8,180,10,180,12,180,6382,9,180,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,1,181,3,181,6431,8,181,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,3,182,6445,8,182,1,182,1,182,
        1,182,3,182,6450,8,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,
        6458,8,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,6466,8,182,
        1,182,1,182,1,182,3,182,6471,8,182,1,182,3,182,6474,8,182,1,183,
        1,183,3,183,6478,8,183,1,183,1,183,3,183,6482,8,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,184,1,184,1,184,3,184,6504,8,184,1,185,
        1,185,1,186,1,186,3,186,6510,8,186,1,186,1,186,1,186,3,186,6515,
        8,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        3,186,6527,8,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,3,186,6540,8,186,1,186,1,186,1,186,1,186,3,186,
        6546,8,186,1,186,1,186,3,186,6550,8,186,1,186,1,186,1,186,3,186,
        6555,8,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,3,186,6570,8,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,6583,8,186,1,186,
        1,186,1,186,1,186,3,186,6589,8,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,6614,8,186,1,186,
        1,186,1,186,1,186,3,186,6620,8,186,3,186,6622,8,186,1,187,1,187,
        3,187,6626,8,187,1,187,1,187,3,187,6630,8,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        3,187,6646,8,187,1,187,1,187,3,187,6650,8,187,1,187,1,187,3,187,
        6654,8,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,6662,8,187,
        1,187,3,187,6665,8,187,1,187,1,187,1,187,1,187,3,187,6671,8,187,
        1,188,1,188,1,188,3,188,6676,8,188,1,188,1,188,3,188,6680,8,188,
        1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,6691,
        8,188,3,188,6693,8,188,1,189,1,189,3,189,6697,8,189,1,189,3,189,
        6700,8,189,1,189,1,189,3,189,6704,8,189,1,189,1,189,3,189,6708,8,
        189,1,189,1,189,1,189,3,189,6713,8,189,1,189,1,189,1,189,3,189,6718,
        8,189,1,189,3,189,6721,8,189,1,189,3,189,6724,8,189,1,189,3,189,
        6727,8,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,1,190,3,190,6742,8,190,1,190,1,190,3,190,6746,
        8,190,1,191,1,191,1,192,1,192,1,192,1,192,1,193,1,193,1,194,1,194,
        1,194,1,194,1,195,1,195,3,195,6762,8,195,1,195,1,195,3,195,6766,
        8,195,1,195,1,195,1,196,1,196,3,196,6772,8,196,1,196,3,196,6775,
        8,196,1,196,1,196,1,196,3,196,6780,8,196,1,196,1,196,1,196,1,196,
        1,196,3,196,6787,8,196,1,196,4,196,6790,8,196,11,196,12,196,6791,
        1,196,1,196,1,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
        1,197,1,197,3,197,6807,8,197,1,198,1,198,1,198,1,198,3,198,6813,
        8,198,1,198,1,198,1,198,1,198,3,198,6819,8,198,1,198,1,198,1,198,
        1,198,1,198,1,198,1,198,1,198,3,198,6829,8,198,1,199,1,199,1,199,
        3,199,6834,8,199,1,200,1,200,1,201,1,201,1,201,1,201,1,202,1,202,
        3,202,6844,8,202,1,202,1,202,1,202,3,202,6849,8,202,1,202,1,202,
        3,202,6853,8,202,1,202,5,202,6856,8,202,10,202,12,202,6859,9,202,
        1,202,3,202,6862,8,202,1,202,1,202,1,202,3,202,6867,8,202,1,202,
        3,202,6870,8,202,1,202,3,202,6873,8,202,1,202,3,202,6876,8,202,1,
        202,3,202,6879,8,202,1,202,3,202,6882,8,202,1,203,1,203,3,203,6886,
        8,203,1,203,3,203,6889,8,203,1,203,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,5,203,6901,8,203,10,203,12,203,6904,9,203,
        3,203,6906,8,203,1,203,1,203,1,203,1,203,3,203,6912,8,203,1,203,
        1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,6924,
        8,203,3,203,6926,8,203,1,203,3,203,6929,8,203,1,203,3,203,6932,8,
        203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,5,203,
        6943,8,203,10,203,12,203,6946,9,203,1,203,1,203,3,203,6950,8,203,
        1,203,1,203,1,203,1,203,1,203,1,203,5,203,6958,8,203,10,203,12,203,
        6961,9,203,1,203,1,203,3,203,6965,8,203,1,203,1,203,1,203,3,203,
        6970,8,203,1,203,3,203,6973,8,203,1,203,1,203,1,203,3,203,6978,8,
        203,1,203,1,203,1,203,3,203,6983,8,203,1,203,1,203,1,203,1,204,1,
        204,3,204,6990,8,204,1,204,1,204,1,204,3,204,6995,8,204,1,204,1,
        204,1,204,1,204,1,204,3,204,7002,8,204,1,204,3,204,7005,8,204,1,
        204,3,204,7008,8,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,7016,
        8,204,1,204,1,204,1,204,3,204,7021,8,204,1,204,3,204,7024,8,204,
        1,204,1,204,1,204,1,204,3,204,7030,8,204,1,204,3,204,7033,8,204,
        1,204,3,204,7036,8,204,1,204,3,204,7039,8,204,1,204,3,204,7042,8,
        204,1,204,1,204,3,204,7046,8,204,1,204,1,204,1,204,3,204,7051,8,
        204,1,204,1,204,1,204,1,204,1,204,3,204,7058,8,204,1,204,3,204,7061,
        8,204,1,204,3,204,7064,8,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,1,204,3,204,7074,8,204,1,204,3,204,7077,8,204,1,204,3,204,
        7080,8,204,1,204,3,204,7083,8,204,1,204,1,204,3,204,7087,8,204,1,
        204,1,204,1,204,3,204,7092,8,204,1,204,1,204,1,204,1,204,1,204,3,
        204,7099,8,204,1,204,3,204,7102,8,204,1,204,3,204,7105,8,204,1,204,
        1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,7117,
        8,204,1,204,3,204,7120,8,204,1,204,3,204,7123,8,204,1,204,3,204,
        7126,8,204,1,204,3,204,7129,8,204,3,204,7131,8,204,1,205,1,205,1,
        205,1,205,1,205,3,205,7138,8,205,1,205,3,205,7141,8,205,1,206,1,
        206,1,206,5,206,7146,8,206,10,206,12,206,7149,9,206,1,207,1,207,
        1,207,1,207,1,208,1,208,1,208,1,208,3,208,7159,8,208,1,209,1,209,
        1,209,1,209,3,209,7165,8,209,1,209,1,209,1,209,1,209,1,209,1,209,
        5,209,7173,8,209,10,209,12,209,7176,9,209,1,209,1,209,1,209,1,209,
        1,209,5,209,7183,8,209,10,209,12,209,7186,9,209,3,209,7188,8,209,
        1,209,1,209,1,209,1,209,1,209,5,209,7195,8,209,10,209,12,209,7198,
        9,209,3,209,7200,8,209,1,209,1,209,1,209,1,209,1,209,5,209,7207,
        8,209,10,209,12,209,7210,9,209,3,209,7212,8,209,1,209,1,209,1,209,
        1,209,1,209,5,209,7219,8,209,10,209,12,209,7222,9,209,1,209,1,209,
        1,209,3,209,7227,8,209,1,209,1,209,1,209,3,209,7232,8,209,1,209,
        1,209,1,209,1,209,3,209,7238,8,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,1,209,3,209,7250,8,209,1,210,1,210,1,211,
        1,211,3,211,7256,8,211,1,211,1,211,1,211,3,211,7261,8,211,1,211,
        1,211,1,211,1,211,3,211,7267,8,211,1,211,5,211,7270,8,211,10,211,
        12,211,7273,9,211,1,211,3,211,7276,8,211,1,212,1,212,1,212,3,212,
        7281,8,212,1,213,1,213,1,213,1,214,1,214,1,214,3,214,7289,8,214,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,7298,8,215,1,216,
        1,216,3,216,7302,8,216,1,217,1,217,3,217,7306,8,217,1,217,3,217,
        7309,8,217,1,217,1,217,3,217,7313,8,217,1,217,1,217,1,217,1,217,
        1,217,5,217,7320,8,217,10,217,12,217,7323,9,217,3,217,7325,8,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,5,217,7335,8,217,
        10,217,12,217,7338,9,217,3,217,7340,8,217,1,217,3,217,7343,8,217,
        1,217,3,217,7346,8,217,1,217,1,217,3,217,7350,8,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,7362,8,217,
        1,217,3,217,7365,8,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,
        7373,8,217,1,217,1,217,1,217,1,217,3,217,7379,8,217,3,217,7381,8,
        217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,7389,8,217,1,217,1,
        217,1,217,1,217,1,217,1,217,3,217,7397,8,217,1,217,1,217,1,217,3,
        217,7402,8,217,1,217,3,217,7405,8,217,1,217,1,217,1,217,1,217,1,
        217,3,217,7412,8,217,1,217,3,217,7415,8,217,1,217,1,217,1,217,1,
        217,1,217,1,217,5,217,7423,8,217,10,217,12,217,7426,9,217,3,217,
        7428,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,5,217,
        7438,8,217,10,217,12,217,7441,9,217,3,217,7443,8,217,1,217,3,217,
        7446,8,217,1,217,3,217,7449,8,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,3,217,7461,8,217,1,217,3,217,7464,
        8,217,1,217,3,217,7467,8,217,1,217,3,217,7470,8,217,1,217,1,217,
        1,217,3,217,7475,8,217,1,218,1,218,3,218,7479,8,218,1,218,1,218,
        1,218,3,218,7484,8,218,1,218,1,218,4,218,7488,8,218,11,218,12,218,
        7489,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,3,219,7503,8,219,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,
        7522,8,220,1,221,1,221,3,221,7526,8,221,1,221,1,221,1,221,3,221,
        7531,8,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,
        3,221,7542,8,221,1,221,1,221,1,221,1,221,1,221,1,221,3,221,7550,
        8,221,1,222,1,222,1,222,1,222,1,223,1,223,1,223,1,223,1,224,1,224,
        3,224,7562,8,224,1,224,3,224,7565,8,224,1,224,1,224,1,224,3,224,
        7570,8,224,1,224,1,224,1,224,1,224,1,224,3,224,7577,8,224,1,224,
        5,224,7580,8,224,10,224,12,224,7583,9,224,1,224,3,224,7586,8,224,
        1,224,3,224,7589,8,224,1,224,3,224,7592,8,224,1,224,3,224,7595,8,
        224,1,224,3,224,7598,8,224,1,224,1,224,1,224,1,225,1,225,3,225,7605,
        8,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,3,225,7614,8,225,
        1,225,1,225,1,225,1,225,1,225,3,225,7621,8,225,1,225,3,225,7624,
        8,225,1,225,3,225,7627,8,225,1,226,1,226,1,226,1,226,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,3,226,
        7645,8,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,3,227,7673,8,227,1,228,1,228,
        3,228,7677,8,228,1,228,1,228,1,228,3,228,7682,8,228,1,228,1,228,
        1,228,1,228,1,228,1,228,1,228,1,228,1,228,3,228,7693,8,228,1,228,
        1,228,3,228,7697,8,228,1,228,1,228,1,228,3,228,7702,8,228,1,228,
        1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        3,228,7716,8,228,3,228,7718,8,228,1,229,1,229,3,229,7722,8,229,1,
        229,1,229,3,229,7726,8,229,1,229,1,229,1,229,1,229,3,229,7732,8,
        229,1,229,1,229,1,229,3,229,7737,8,229,1,229,1,229,1,229,3,229,7742,
        8,229,1,229,1,229,1,229,3,229,7747,8,229,1,229,3,229,7750,8,229,
        1,229,1,229,1,229,1,230,1,230,1,231,1,231,1,231,1,231,1,232,1,232,
        3,232,7763,8,232,1,233,1,233,1,233,1,234,1,234,3,234,7770,8,234,
        1,234,1,234,1,234,1,234,1,234,1,234,5,234,7778,8,234,10,234,12,234,
        7781,9,234,3,234,7783,8,234,1,234,1,234,1,234,1,234,1,234,1,234,
        1,234,1,234,5,234,7793,8,234,10,234,12,234,7796,9,234,3,234,7798,
        8,234,1,234,3,234,7801,8,234,1,234,3,234,7804,8,234,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,
        7818,8,234,1,234,3,234,7821,8,234,1,234,3,234,7824,8,234,1,234,3,
        234,7827,8,234,1,234,1,234,1,234,1,234,1,234,3,234,7834,8,234,1,
        234,3,234,7837,8,234,1,234,1,234,1,234,1,234,1,234,1,234,5,234,7845,
        8,234,10,234,12,234,7848,9,234,3,234,7850,8,234,1,234,1,234,1,234,
        1,234,3,234,7856,8,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,3,234,7870,8,234,1,234,3,234,7873,
        8,234,1,234,3,234,7876,8,234,1,234,3,234,7879,8,234,1,234,1,234,
        1,234,1,234,1,234,3,234,7886,8,234,1,234,3,234,7889,8,234,1,234,
        1,234,1,234,1,234,1,234,1,234,5,234,7897,8,234,10,234,12,234,7900,
        9,234,3,234,7902,8,234,1,234,1,234,1,234,1,234,3,234,7908,8,234,
        1,234,1,234,1,234,1,234,1,234,5,234,7915,8,234,10,234,12,234,7918,
        9,234,3,234,7920,8,234,1,234,3,234,7923,8,234,1,234,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,7936,8,234,
        1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,7947,
        8,234,1,234,3,234,7950,8,234,1,234,1,234,1,234,3,234,7955,8,234,
        1,235,1,235,1,235,1,235,3,235,7961,8,235,1,235,1,235,1,235,1,235,
        1,235,1,235,5,235,7969,8,235,10,235,12,235,7972,9,235,1,235,1,235,
        1,235,1,235,1,235,5,235,7979,8,235,10,235,12,235,7982,9,235,3,235,
        7984,8,235,1,235,1,235,1,235,1,235,1,235,5,235,7991,8,235,10,235,
        12,235,7994,9,235,3,235,7996,8,235,1,235,1,235,1,235,1,235,1,235,
        5,235,8003,8,235,10,235,12,235,8006,9,235,3,235,8008,8,235,1,235,
        1,235,1,235,1,235,1,235,5,235,8015,8,235,10,235,12,235,8018,9,235,
        1,235,1,235,1,235,3,235,8023,8,235,1,235,1,235,1,235,3,235,8028,
        8,235,1,235,1,235,1,235,1,235,3,235,8034,8,235,1,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,8046,8,235,1,236,
        1,236,3,236,8050,8,236,1,236,1,236,1,236,1,236,1,236,3,236,8057,
        8,236,1,236,3,236,8060,8,236,1,236,1,236,1,236,1,236,3,236,8066,
        8,236,3,236,8068,8,236,1,236,1,236,1,236,3,236,8073,8,236,1,236,
        3,236,8076,8,236,1,236,1,236,4,236,8080,8,236,11,236,12,236,8081,
        3,236,8084,8,236,1,237,1,237,3,237,8088,8,237,1,237,1,237,3,237,
        8092,8,237,1,237,1,237,3,237,8096,8,237,1,237,3,237,8099,8,237,1,
        238,1,238,3,238,8103,8,238,1,238,1,238,1,238,1,238,3,238,8109,8,
        238,1,238,1,238,1,238,1,238,1,238,1,238,5,238,8117,8,238,10,238,
        12,238,8120,9,238,1,238,1,238,1,238,1,238,1,238,1,238,3,238,8128,
        8,238,1,239,1,239,3,239,8132,8,239,1,239,3,239,8135,8,239,1,239,
        1,239,3,239,8139,8,239,1,239,1,239,3,239,8143,8,239,1,239,1,239,
        1,239,3,239,8148,8,239,1,239,1,239,1,239,3,239,8153,8,239,1,239,
        1,239,1,239,3,239,8158,8,239,1,239,3,239,8161,8,239,1,239,3,239,
        8164,8,239,1,239,3,239,8167,8,239,1,240,1,240,3,240,8171,8,240,1,
        240,1,240,3,240,8175,8,240,1,240,1,240,1,240,1,240,1,240,1,240,1,
        240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,3,240,8233,8,240,1,240,3,240,
        8236,8,240,1,241,1,241,3,241,8240,8,241,1,241,1,241,1,241,3,241,
        8245,8,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,
        1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,
        3,241,8267,8,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,8275,
        8,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,8284,8,241,
        3,241,8286,8,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,8294,
        8,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,8302,8,241,1,241,
        1,241,1,241,3,241,8307,8,241,1,241,1,241,1,241,3,241,8312,8,241,
        1,241,1,241,1,241,1,241,1,241,1,241,3,241,8320,8,241,1,241,1,241,
        1,241,3,241,8325,8,241,1,241,1,241,1,241,3,241,8330,8,241,1,242,
        1,242,1,243,1,243,3,243,8336,8,243,1,243,1,243,1,243,3,243,8341,
        8,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
        1,243,3,243,8354,8,243,1,243,1,243,1,243,3,243,8359,8,243,1,243,
        1,243,1,243,3,243,8364,8,243,1,243,1,243,1,243,3,243,8369,8,243,
        1,243,1,243,1,243,1,243,1,243,1,243,3,243,8377,8,243,1,243,3,243,
        8380,8,243,1,243,1,243,3,243,8384,8,243,1,243,1,243,1,243,3,243,
        8389,8,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,1,243,
        1,243,1,243,3,243,8402,8,243,1,243,1,243,1,243,3,243,8407,8,243,
        1,243,1,243,1,243,3,243,8412,8,243,1,243,1,243,1,243,3,243,8417,
        8,243,1,243,1,243,1,243,1,243,1,243,1,243,3,243,8425,8,243,1,243,
        1,243,1,243,1,243,1,243,1,243,3,243,8433,8,243,1,243,1,243,1,243,
        3,243,8438,8,243,1,243,1,243,1,243,3,243,8443,8,243,1,243,3,243,
        8446,8,243,1,243,1,243,1,243,3,243,8451,8,243,1,243,1,243,1,243,
        3,243,8456,8,243,1,243,3,243,8459,8,243,3,243,8461,8,243,1,244,1,
        244,3,244,8465,8,244,1,244,1,244,1,244,3,244,8470,8,244,1,244,1,
        244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,
        1,244,1,244,1,244,1,244,1,244,1,244,1,244,3,244,8491,8,244,1,244,
        1,244,1,244,3,244,8496,8,244,1,244,1,244,1,244,3,244,8501,8,244,
        1,244,1,244,1,244,3,244,8506,8,244,1,244,1,244,1,244,3,244,8511,
        8,244,1,244,1,244,1,244,3,244,8516,8,244,1,244,1,244,1,244,3,244,
        8521,8,244,1,244,1,244,1,244,3,244,8526,8,244,1,244,1,244,1,244,
        3,244,8531,8,244,1,245,1,245,3,245,8535,8,245,1,245,1,245,1,245,
        3,245,8540,8,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,3,245,8553,8,245,1,245,1,245,1,245,3,245,8558,
        8,245,1,245,3,245,8561,8,245,1,246,1,246,1,246,1,246,1,247,1,247,
        1,248,1,248,3,248,8571,8,248,1,248,3,248,8574,8,248,1,248,1,248,
        1,249,1,249,3,249,8580,8,249,1,249,3,249,8583,8,249,1,249,1,249,
        1,250,1,250,3,250,8589,8,250,1,250,1,250,3,250,8593,8,250,1,250,
        1,250,3,250,8597,8,250,1,250,3,250,8600,8,250,1,250,3,250,8603,8,
        250,1,250,3,250,8606,8,250,1,250,3,250,8609,8,250,1,251,1,251,3,
        251,8613,8,251,1,251,1,251,1,251,3,251,8618,8,251,1,251,1,251,5,
        251,8622,8,251,10,251,12,251,8625,9,251,1,252,1,252,1,252,1,252,
        1,252,3,252,8632,8,252,1,253,1,253,1,254,1,254,3,254,8638,8,254,
        1,254,1,254,1,254,3,254,8643,8,254,1,254,1,254,5,254,8647,8,254,
        10,254,12,254,8650,9,254,1,255,1,255,1,255,1,255,1,255,3,255,8657,
        8,255,1,256,1,256,1,257,1,257,3,257,8663,8,257,1,257,1,257,1,257,
        3,257,8668,8,257,1,258,1,258,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,3,259,8679,8,259,1,259,1,259,1,259,1,259,3,259,8685,8,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,3,259,8700,8,259,1,259,1,259,1,259,1,259,3,259,8706,
        8,259,1,259,1,259,1,259,1,259,3,259,8712,8,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,3,259,8722,8,259,1,259,1,259,1,259,
        1,259,1,259,3,259,8729,8,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,3,259,8740,8,259,1,259,1,259,1,259,1,259,5,259,
        8746,8,259,10,259,12,259,8749,9,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,3,259,8768,8,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,8819,
        8,259,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,8828,8,260,
        1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,
        1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,
        1,260,3,260,8853,8,260,1,261,1,261,1,261,1,261,1,261,1,261,1,261,
        1,261,1,262,1,262,1,262,1,262,1,263,1,263,1,263,1,263,1,264,1,264,
        1,264,1,264,1,265,1,265,1,265,1,265,3,265,8879,8,265,1,265,1,265,
        1,265,3,265,8884,8,265,3,265,8886,8,265,1,265,1,265,1,266,1,266,
        1,266,1,266,1,267,1,267,1,267,1,267,1,268,1,268,1,268,1,268,1,269,
        1,269,1,269,1,269,1,270,1,270,1,270,3,270,8909,8,270,1,270,1,270,
        1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,
        3,270,8924,8,270,1,271,1,271,1,271,1,271,1,271,1,271,1,272,1,272,
        1,272,1,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,
        3,273,8945,8,273,1,274,1,274,1,274,3,274,8950,8,274,1,274,1,274,
        1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,1,274,
        3,274,8965,8,274,1,275,1,275,1,275,1,275,1,275,1,275,1,276,1,276,
        1,276,1,276,1,276,1,276,1,276,3,276,8980,8,276,1,276,3,276,8983,
        8,276,1,276,1,276,3,276,8987,8,276,1,277,1,277,1,277,1,277,3,277,
        8993,8,277,1,277,1,277,3,277,8997,8,277,1,277,3,277,9000,8,277,1,
        277,1,277,1,277,1,277,3,277,9006,8,277,1,277,1,277,3,277,9010,8,
        277,1,277,3,277,9013,8,277,1,277,1,277,1,277,1,277,3,277,9019,8,
        277,1,277,1,277,3,277,9023,8,277,1,277,3,277,9026,8,277,3,277,9028,
        8,277,1,278,1,278,1,279,1,279,1,279,1,279,1,280,1,280,1,280,1,280,
        1,281,1,281,1,281,1,281,1,282,1,282,1,282,1,282,1,283,1,283,1,283,
        1,283,1,283,3,283,9053,8,283,1,283,1,283,1,283,1,283,1,283,1,283,
        3,283,9061,8,283,1,283,1,283,1,284,1,284,1,284,1,284,1,284,3,284,
        9070,8,284,1,284,3,284,9073,8,284,1,284,1,284,1,284,1,284,1,284,
        1,284,1,284,3,284,9082,8,284,1,284,3,284,9085,8,284,1,284,3,284,
        9088,8,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,3,284,9097,
        8,284,1,284,3,284,9100,8,284,1,284,3,284,9103,8,284,1,284,1,284,
        3,284,9107,8,284,1,285,1,285,3,285,9111,8,285,1,285,3,285,9114,8,
        285,1,285,1,285,3,285,9118,8,285,1,285,1,285,3,285,9122,8,285,1,
        285,3,285,9125,8,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,
        285,1,285,1,285,5,285,9137,8,285,10,285,12,285,9140,9,285,3,285,
        9142,8,285,1,285,1,285,3,285,9146,8,285,1,285,1,285,1,285,1,285,
        1,285,1,285,3,285,9154,8,285,1,285,3,285,9157,8,285,1,285,3,285,
        9160,8,285,1,285,1,285,3,285,9164,8,285,1,285,3,285,9167,8,285,1,
        285,1,285,3,285,9171,8,285,1,285,1,285,1,285,3,285,9176,8,285,1,
        285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,5,285,
        9188,8,285,10,285,12,285,9191,9,285,3,285,9193,8,285,1,285,1,285,
        3,285,9197,8,285,1,285,1,285,1,285,1,285,1,285,1,285,3,285,9205,
        8,285,1,285,3,285,9208,8,285,1,285,3,285,9211,8,285,3,285,9213,8,
        285,1,286,1,286,1,286,3,286,9218,8,286,1,286,1,286,1,286,1,286,1,
        286,1,286,1,286,1,286,3,286,9228,8,286,1,286,1,286,1,286,1,286,1,
        286,1,286,3,286,9236,8,286,1,286,1,286,1,286,1,286,1,286,1,286,3,
        286,9244,8,286,1,286,1,286,1,286,3,286,9249,8,286,1,286,3,286,9252,
        8,286,1,286,1,286,1,286,1,286,1,286,1,286,3,286,9260,8,286,1,286,
        3,286,9263,8,286,3,286,9265,8,286,1,287,1,287,1,287,3,287,9270,8,
        287,1,287,1,287,1,288,1,288,1,288,1,288,1,289,1,289,1,289,3,289,
        9281,8,289,1,289,3,289,9284,8,289,1,290,1,290,1,290,1,290,1,290,
        1,290,1,290,1,290,1,290,3,290,9295,8,290,1,290,1,290,1,290,1,290,
        1,290,1,290,1,290,1,290,1,290,3,290,9306,8,290,1,291,1,291,1,291,
        1,291,1,291,1,291,3,291,9314,8,291,1,291,1,291,1,291,3,291,9319,
        8,291,1,292,1,292,1,292,1,292,1,293,1,293,3,293,9327,8,293,1,293,
        1,293,1,293,3,293,9332,8,293,1,293,1,293,1,293,1,293,1,293,1,293,
        1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
        1,293,1,293,3,293,9353,8,293,1,293,3,293,9356,8,293,1,294,1,294,
        1,294,1,295,1,295,1,295,1,295,1,296,1,296,1,296,1,296,1,297,1,297,
        1,297,1,297,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,1,298,
        1,298,1,298,1,298,1,298,1,298,3,298,9387,8,298,1,298,1,298,1,299,
        1,299,3,299,9393,8,299,1,299,1,299,3,299,9397,8,299,1,299,1,299,
        3,299,9401,8,299,1,299,3,299,9404,8,299,1,299,1,299,1,299,1,299,
        3,299,9410,8,299,1,299,3,299,9413,8,299,1,299,3,299,9416,8,299,1,
        299,3,299,9419,8,299,1,299,1,299,3,299,9423,8,299,1,299,1,299,3,
        299,9427,8,299,1,299,1,299,3,299,9431,8,299,1,299,3,299,9434,8,299,
        1,299,1,299,1,299,1,299,1,299,3,299,9441,8,299,1,299,3,299,9444,
        8,299,1,299,3,299,9447,8,299,1,299,1,299,3,299,9451,8,299,1,299,
        1,299,3,299,9455,8,299,1,299,1,299,3,299,9459,8,299,1,299,3,299,
        9462,8,299,1,299,1,299,1,299,1,299,3,299,9468,8,299,3,299,9470,8,
        299,1,300,1,300,1,301,3,301,9475,8,301,1,301,1,301,1,301,3,301,9480,
        8,301,1,302,3,302,9483,8,302,1,302,1,302,1,302,1,302,1,302,5,302,
        9490,8,302,10,302,12,302,9493,9,302,1,302,1,302,1,303,3,303,9498,
        8,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,1,303,5,303,
        9509,8,303,10,303,12,303,9512,9,303,1,303,1,303,1,304,1,304,1,304,
        3,304,9519,8,304,1,304,1,304,1,305,1,305,1,305,1,305,1,306,3,306,
        9528,8,306,1,306,1,306,1,306,1,306,1,306,3,306,9535,8,306,1,307,
        1,307,1,307,1,308,1,308,1,309,1,309,1,309,1,309,1,309,1,309,1,309,
        1,309,1,309,1,309,1,309,1,309,1,309,1,309,3,309,9556,8,309,1,309,
        3,309,9559,8,309,3,309,9561,8,309,1,310,1,310,1,310,1,311,1,311,
        1,311,1,312,1,312,3,312,9571,8,312,1,312,1,312,3,312,9575,8,312,
        1,312,1,312,5,312,9579,8,312,10,312,12,312,9582,9,312,1,312,1,312,
        1,312,1,312,1,312,1,312,1,312,3,312,9591,8,312,1,312,3,312,9594,
        8,312,1,313,1,313,1,313,1,313,1,313,5,313,9601,8,313,10,313,12,313,
        9604,9,313,1,313,3,313,9607,8,313,1,313,3,313,9610,8,313,1,313,3,
        313,9613,8,313,1,314,1,314,3,314,9617,8,314,1,314,3,314,9620,8,314,
        1,314,3,314,9623,8,314,1,314,1,314,3,314,9627,8,314,1,315,1,315,
        1,315,5,315,9632,8,315,10,315,12,315,9635,9,315,1,316,1,316,3,316,
        9639,8,316,1,317,1,317,1,317,5,317,9644,8,317,10,317,12,317,9647,
        9,317,1,318,1,318,1,318,3,318,9652,8,318,1,318,3,318,9655,8,318,
        1,318,1,318,3,318,9659,8,318,1,318,1,318,1,318,3,318,9664,8,318,
        3,318,9666,8,318,1,318,3,318,9669,8,318,1,318,1,318,1,318,3,318,
        9674,8,318,3,318,9676,8,318,1,319,1,319,1,319,1,319,1,320,1,320,
        3,320,9684,8,320,1,320,3,320,9687,8,320,1,320,3,320,9690,8,320,1,
        320,3,320,9693,8,320,1,320,3,320,9696,8,320,1,320,1,320,1,320,1,
        320,1,320,1,320,3,320,9704,8,320,1,320,3,320,9707,8,320,1,320,3,
        320,9710,8,320,1,320,3,320,9713,8,320,1,320,3,320,9716,8,320,1,320,
        3,320,9719,8,320,1,320,3,320,9722,8,320,1,320,3,320,9725,8,320,1,
        321,1,321,3,321,9729,8,321,1,321,3,321,9732,8,321,1,321,1,321,3,
        321,9736,8,321,1,321,1,321,1,321,3,321,9741,8,321,3,321,9743,8,321,
        1,321,1,321,1,321,1,321,3,321,9749,8,321,1,321,3,321,9752,8,321,
        1,321,3,321,9755,8,321,1,321,3,321,9758,8,321,1,321,3,321,9761,8,
        321,1,321,3,321,9764,8,321,1,321,1,321,1,321,1,322,1,322,3,322,9771,
        8,322,1,322,3,322,9774,8,322,1,322,1,322,3,322,9778,8,322,1,322,
        1,322,1,322,1,322,3,322,9784,8,322,1,322,3,322,9787,8,322,1,323,
        1,323,3,323,9791,8,323,1,323,1,323,3,323,9795,8,323,1,323,1,323,
        3,323,9799,8,323,1,323,3,323,9802,8,323,1,324,1,324,1,324,1,325,
        1,325,1,326,1,326,1,326,5,326,9812,8,326,10,326,12,326,9815,9,326,
        1,327,1,327,1,327,5,327,9820,8,327,10,327,12,327,9823,9,327,1,328,
        1,328,3,328,9827,8,328,1,328,1,328,3,328,9831,8,328,1,328,1,328,
        5,328,9835,8,328,10,328,12,328,9838,9,328,1,328,3,328,9841,8,328,
        1,328,3,328,9844,8,328,1,328,1,328,1,328,1,328,5,328,9850,8,328,
        10,328,12,328,9853,9,328,3,328,9855,8,328,1,328,1,328,3,328,9859,
        8,328,1,328,1,328,1,328,1,329,1,329,1,329,1,329,1,329,1,329,1,329,
        3,329,9871,8,329,1,330,1,330,1,330,1,330,1,330,1,330,1,330,3,330,
        9880,8,330,3,330,9882,8,330,1,331,1,331,1,331,1,331,1,332,1,332,
        1,332,1,332,1,333,1,333,1,333,1,333,1,334,1,334,1,334,1,334,1,335,
        1,335,1,335,1,335,1,336,1,336,1,336,1,336,1,336,3,336,9909,8,336,
        1,337,1,337,1,337,1,337,3,337,9915,8,337,1,337,1,337,1,338,1,338,
        3,338,9921,8,338,1,338,1,338,3,338,9925,8,338,1,338,1,338,3,338,
        9929,8,338,1,338,3,338,9932,8,338,1,338,3,338,9935,8,338,1,339,1,
        339,1,339,1,339,1,340,1,340,3,340,9943,8,340,1,340,3,340,9946,8,
        340,1,340,3,340,9949,8,340,1,340,1,340,3,340,9953,8,340,1,340,1,
        340,1,340,1,340,1,340,3,340,9960,8,340,1,340,5,340,9963,8,340,10,
        340,12,340,9966,9,340,1,340,3,340,9969,8,340,1,340,3,340,9972,8,
        340,1,340,3,340,9975,8,340,1,340,3,340,9978,8,340,1,340,1,340,1,
        340,1,341,1,341,3,341,9985,8,341,1,341,1,341,3,341,9989,8,341,1,
        341,1,341,3,341,9993,8,341,1,341,4,341,9996,8,341,11,341,12,341,
        9997,3,341,10000,8,341,1,341,5,341,10003,8,341,10,341,12,341,10006,
        9,341,1,342,1,342,1,343,1,343,1,344,1,344,1,344,1,344,1,344,3,344,
        10017,8,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,10035,8,344,1,344,
        1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
        1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,10056,8,344,1,345,
        1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,10068,
        8,345,3,345,10070,8,345,1,346,1,346,1,346,1,346,1,346,1,346,1,347,
        1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,1,347,3,347,10105,8,347,1,348,1,348,1,349,1,349,
        1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
        1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
        1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
        3,349,10144,8,349,1,350,1,350,1,350,1,350,1,350,3,350,10151,8,350,
        1,351,1,351,1,351,1,351,1,352,1,352,1,352,3,352,10160,8,352,1,352,
        1,352,1,353,1,353,1,353,3,353,10167,8,353,1,353,1,353,3,353,10171,
        8,353,1,354,1,354,1,354,1,354,1,354,1,355,1,355,1,355,1,355,3,355,
        10182,8,355,1,355,1,355,3,355,10186,8,355,1,356,1,356,1,356,1,356,
        3,356,10192,8,356,1,356,1,356,1,357,1,357,1,357,1,357,3,357,10200,
        8,357,1,357,1,357,1,358,1,358,1,358,3,358,10207,8,358,1,358,1,358,
        1,358,1,359,1,359,1,359,1,359,3,359,10216,8,359,1,359,1,359,1,360,
        1,360,3,360,10222,8,360,1,360,1,360,3,360,10226,8,360,1,360,1,360,
        1,361,1,361,1,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,363,
        1,363,1,363,1,363,3,363,10244,8,363,1,363,1,363,1,364,1,364,1,364,
        1,364,3,364,10252,8,364,1,364,1,364,1,365,1,365,1,365,3,365,10259,
        8,365,1,365,1,365,1,366,1,366,1,366,3,366,10266,8,366,1,366,1,366,
        1,366,1,367,1,367,1,367,1,367,3,367,10275,8,367,1,367,1,367,1,368,
        1,368,1,368,1,368,1,368,1,369,1,369,1,369,3,369,10287,8,369,1,369,
        1,369,1,370,1,370,1,370,1,370,1,370,3,370,10296,8,370,1,370,1,370,
        1,371,1,371,1,371,3,371,10303,8,371,1,371,1,371,3,371,10307,8,371,
        1,372,1,372,1,372,3,372,10312,8,372,1,372,1,372,1,373,1,373,1,373,
        3,373,10319,8,373,1,373,1,373,3,373,10323,8,373,1,374,1,374,1,374,
        1,374,3,374,10329,8,374,1,374,1,374,1,375,1,375,1,375,1,375,3,375,
        10337,8,375,1,375,1,375,1,376,1,376,1,376,1,376,1,377,1,377,1,377,
        3,377,10348,8,377,1,377,1,377,1,378,1,378,1,378,3,378,10355,8,378,
        1,378,1,378,3,378,10359,8,378,1,379,1,379,1,379,3,379,10364,8,379,
        1,379,1,379,1,380,1,380,1,380,3,380,10371,8,380,1,380,1,380,1,381,
        1,381,1,381,3,381,10378,8,381,1,381,1,381,1,382,1,382,1,382,3,382,
        10385,8,382,1,382,1,382,1,383,1,383,1,383,3,383,10392,8,383,1,383,
        1,383,1,384,1,384,1,385,1,385,3,385,10400,8,385,1,385,1,385,1,386,
        1,386,1,386,1,386,3,386,10408,8,386,1,387,1,387,1,387,1,387,1,388,
        1,388,1,388,1,388,1,389,1,389,1,389,1,389,1,390,1,390,1,390,1,390,
        1,391,1,391,1,391,1,391,1,391,3,391,10431,8,391,1,392,1,392,1,392,
        1,392,1,393,1,393,1,393,1,393,1,394,1,394,3,394,10443,8,394,1,394,
        1,394,1,394,3,394,10448,8,394,1,394,1,394,1,395,1,395,1,395,1,395,
        1,395,1,396,1,396,1,396,1,396,1,397,1,397,1,397,1,397,1,398,1,398,
        1,398,1,399,1,399,1,399,1,400,1,400,1,400,1,401,1,401,1,401,1,401,
        1,402,1,402,1,402,1,403,1,403,1,403,1,404,1,404,1,405,1,405,1,405,
        1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,
        1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,1,405,
        1,405,1,405,1,405,1,405,1,405,3,405,10516,8,405,1,406,1,406,1,406,
        1,406,1,407,1,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,1,409,
        1,409,1,409,1,409,1,409,1,410,1,410,3,410,10538,8,410,1,410,1,410,
        1,410,1,410,1,410,3,410,10545,8,410,1,411,1,411,1,411,1,411,1,411,
        1,412,1,412,1,412,1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,414,
        1,414,3,414,10564,8,414,1,414,1,414,1,414,1,415,1,415,1,415,1,415,
        1,415,1,416,1,416,1,416,1,416,1,416,1,417,1,417,1,417,1,417,1,417,
        1,418,1,418,1,418,1,418,1,419,1,419,1,419,1,419,1,419,1,420,1,420,
        1,420,1,420,1,420,1,420,3,420,10599,8,420,1,421,1,421,1,421,1,421,
        1,421,1,421,1,422,1,422,1,422,1,422,1,423,1,423,1,423,1,423,1,423,
        1,423,1,424,1,424,1,424,1,424,1,425,1,425,1,425,1,425,1,425,1,426,
        1,426,1,426,1,426,1,426,1,427,1,427,1,427,1,427,1,428,1,428,1,428,
        1,428,1,429,1,429,1,429,1,429,1,429,1,429,3,429,10645,8,429,1,430,
        1,430,1,430,1,430,1,431,1,431,1,431,1,431,1,432,1,432,1,432,1,432,
        1,433,1,433,1,433,1,433,1,434,1,434,1,434,1,434,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,1,435,
        1,435,1,435,3,435,10727,8,435,1,436,1,436,3,436,10731,8,436,1,436,
        1,436,3,436,10735,8,436,1,436,1,436,1,436,1,436,3,436,10741,8,436,
        1,436,1,436,3,436,10745,8,436,3,436,10747,8,436,3,436,10749,8,436,
        1,436,3,436,10752,8,436,1,436,3,436,10755,8,436,1,437,1,437,1,437,
        3,437,10760,8,437,1,437,1,437,1,437,1,437,3,437,10766,8,437,1,437,
        1,437,3,437,10770,8,437,1,437,1,437,3,437,10774,8,437,1,437,3,437,
        10777,8,437,3,437,10779,8,437,1,438,1,438,1,438,3,438,10784,8,438,
        1,438,1,438,1,438,1,438,3,438,10790,8,438,1,438,1,438,3,438,10794,
        8,438,1,438,1,438,3,438,10798,8,438,1,438,1,438,1,438,3,438,10803,
        8,438,1,438,3,438,10806,8,438,3,438,10808,8,438,1,439,1,439,1,439,
        3,439,10813,8,439,1,440,1,440,1,440,1,440,1,441,1,441,1,441,1,441,
        3,441,10823,8,441,1,442,1,442,3,442,10827,8,442,1,442,1,442,3,442,
        10831,8,442,1,442,3,442,10834,8,442,1,442,3,442,10837,8,442,1,442,
        3,442,10840,8,442,1,443,1,443,1,443,1,443,1,443,1,443,1,443,1,444,
        1,444,1,444,1,444,1,444,1,444,1,444,1,445,1,445,1,445,3,445,10859,
        8,445,1,445,1,445,1,445,1,445,1,445,1,445,3,445,10867,8,445,3,445,
        10869,8,445,1,445,1,445,1,445,3,445,10874,8,445,1,445,1,445,1,445,
        1,445,3,445,10880,8,445,3,445,10882,8,445,1,446,1,446,1,446,1,446,
        1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,1,446,
        1,446,3,446,10900,8,446,1,447,1,447,1,447,1,447,3,447,10906,8,447,
        1,447,1,447,1,447,1,447,3,447,10912,8,447,1,447,3,447,10915,8,447,
        1,447,3,447,10918,8,447,3,447,10920,8,447,3,447,10922,8,447,1,447,
        3,447,10925,8,447,1,447,3,447,10928,8,447,1,448,1,448,3,448,10932,
        8,448,1,448,1,448,1,448,3,448,10937,8,448,1,448,1,448,1,448,1,448,
        3,448,10943,8,448,1,448,3,448,10946,8,448,1,448,3,448,10949,8,448,
        3,448,10951,8,448,3,448,10953,8,448,1,448,3,448,10956,8,448,1,448,
        3,448,10959,8,448,1,449,1,449,1,449,1,449,3,449,10965,8,449,1,450,
        1,450,3,450,10969,8,450,1,450,1,450,1,450,3,450,10974,8,450,1,450,
        1,450,1,450,1,450,3,450,10980,8,450,1,450,3,450,10983,8,450,1,450,
        3,450,10986,8,450,3,450,10988,8,450,3,450,10990,8,450,1,450,3,450,
        10993,8,450,1,450,3,450,10996,8,450,1,451,1,451,1,451,1,451,1,451,
        1,451,3,451,11004,8,451,1,452,1,452,1,452,1,452,3,452,11010,8,452,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,3,452,11021,
        8,452,3,452,11023,8,452,1,453,1,453,1,453,3,453,11028,8,453,1,453,
        1,453,1,453,1,453,1,453,1,453,1,453,1,453,1,453,3,453,11039,8,453,
        3,453,11041,8,453,1,454,1,454,1,454,1,454,3,454,11047,8,454,1,454,
        1,454,1,454,3,454,11052,8,454,1,454,1,454,1,455,1,455,1,455,1,455,
        3,455,11060,8,455,1,455,1,455,1,455,1,455,3,455,11066,8,455,1,455,
        1,455,3,455,11070,8,455,1,455,3,455,11073,8,455,3,455,11075,8,455,
        1,456,1,456,1,456,1,456,3,456,11081,8,456,1,456,1,456,1,456,3,456,
        11086,8,456,1,456,1,456,1,457,1,457,1,457,1,457,3,457,11094,8,457,
        1,458,1,458,1,458,3,458,11099,8,458,1,458,1,458,1,458,1,458,1,458,
        1,458,1,458,1,458,1,458,1,458,1,458,1,458,3,458,11113,8,458,1,459,
        1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,1,459,
        1,459,3,459,11128,8,459,1,459,1,459,1,459,1,459,1,459,1,459,3,459,
        11136,8,459,1,460,1,460,3,460,11140,8,460,1,460,1,460,3,460,11144,
        8,460,1,461,1,461,1,461,1,461,3,461,11150,8,461,1,462,1,462,1,462,
        1,462,3,462,11156,8,462,1,463,1,463,1,463,1,463,3,463,11162,8,463,
        1,463,3,463,11165,8,463,1,464,1,464,1,464,1,464,1,464,1,464,1,464,
        1,464,1,464,3,464,11176,8,464,1,465,1,465,1,465,1,465,3,465,11182,
        8,465,1,465,1,465,3,465,11186,8,465,1,465,1,465,1,465,3,465,11191,
        8,465,1,466,1,466,1,466,1,466,3,466,11197,8,466,1,466,3,466,11200,
        8,466,1,467,1,467,1,467,1,467,1,468,1,468,1,468,3,468,11209,8,468,
        1,468,3,468,11212,8,468,1,469,1,469,1,469,1,469,3,469,11218,8,469,
        1,470,1,470,1,471,1,471,1,471,3,471,11225,8,471,1,471,1,471,1,471,
        1,471,1,471,3,471,11232,8,471,1,471,1,471,3,471,11236,8,471,1,471,
        1,471,3,471,11240,8,471,3,471,11242,8,471,1,472,1,472,1,472,3,472,
        11247,8,472,1,472,3,472,11250,8,472,1,473,1,473,3,473,11254,8,473,
        1,473,1,473,1,473,3,473,11259,8,473,1,474,1,474,1,474,3,474,11264,
        8,474,1,474,3,474,11267,8,474,1,475,1,475,1,475,3,475,11272,8,475,
        1,476,1,476,1,476,1,476,3,476,11278,8,476,1,477,1,477,1,477,1,477,
        3,477,11284,8,477,1,477,1,477,1,477,1,477,1,477,1,477,3,477,11292,
        8,477,1,478,1,478,1,478,1,478,1,478,1,478,3,478,11300,8,478,1,479,
        1,479,1,479,1,479,3,479,11306,8,479,1,480,1,480,1,480,3,480,11311,
        8,480,1,481,1,481,1,481,1,481,1,481,3,481,11318,8,481,1,481,3,481,
        11321,8,481,1,482,1,482,3,482,11325,8,482,1,482,1,482,3,482,11329,
        8,482,1,482,3,482,11332,8,482,1,482,1,482,1,482,1,482,3,482,11338,
        8,482,3,482,11340,8,482,3,482,11342,8,482,1,482,3,482,11345,8,482,
        1,482,3,482,11348,8,482,1,483,1,483,1,483,3,483,11353,8,483,1,483,
        1,483,1,483,3,483,11358,8,483,1,483,1,483,3,483,11362,8,483,1,483,
        1,483,1,483,1,483,1,483,1,483,3,483,11370,8,483,3,483,11372,8,483,
        1,484,1,484,1,484,3,484,11377,8,484,1,484,3,484,11380,8,484,1,485,
        1,485,1,485,1,485,1,486,1,486,1,486,1,486,1,487,1,487,1,487,3,487,
        11393,8,487,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,489,1,489,
        1,489,1,489,1,489,1,489,1,489,1,490,1,490,1,490,3,490,11412,8,490,
        1,490,3,490,11415,8,490,1,491,1,491,1,491,3,491,11420,8,491,1,491,
        3,491,11423,8,491,1,492,1,492,1,492,3,492,11428,8,492,1,492,1,492,
        1,492,1,492,1,492,1,492,1,492,1,492,1,492,3,492,11439,8,492,1,493,
        1,493,3,493,11443,8,493,1,493,1,493,3,493,11447,8,493,1,493,1,493,
        1,493,1,493,3,493,11453,8,493,1,493,3,493,11456,8,493,1,493,3,493,
        11459,8,493,3,493,11461,8,493,3,493,11463,8,493,1,493,3,493,11466,
        8,493,1,493,3,493,11469,8,493,1,494,1,494,1,494,1,494,3,494,11475,
        8,494,1,495,1,495,1,495,1,495,3,495,11481,8,495,1,495,3,495,11484,
        8,495,1,496,1,496,3,496,11488,8,496,1,496,1,496,3,496,11492,8,496,
        1,496,1,496,1,496,3,496,11497,8,496,1,496,1,496,3,496,11501,8,496,
        1,496,1,496,3,496,11505,8,496,1,497,1,497,1,497,3,497,11510,8,497,
        1,498,1,498,1,498,3,498,11515,8,498,1,498,1,498,1,498,1,498,1,498,
        3,498,11522,8,498,1,499,1,499,3,499,11526,8,499,1,499,1,499,3,499,
        11530,8,499,1,499,1,499,1,499,1,499,3,499,11536,8,499,1,499,3,499,
        11539,8,499,1,499,3,499,11542,8,499,3,499,11544,8,499,3,499,11546,
        8,499,1,499,3,499,11549,8,499,1,499,3,499,11552,8,499,1,500,1,500,
        1,500,3,500,11557,8,500,1,501,1,501,1,501,1,502,1,502,1,503,1,503,
        1,503,1,503,1,503,3,503,11569,8,503,1,504,1,504,1,504,1,504,1,504,
        1,504,1,504,1,504,1,504,1,504,1,504,1,504,3,504,11583,8,504,1,505,
        1,505,1,505,5,505,11588,8,505,10,505,12,505,11591,9,505,1,506,1,
        506,1,507,1,507,1,508,1,508,1,509,1,509,1,510,1,510,1,511,1,511,
        1,512,1,512,1,513,1,513,1,513,5,513,11610,8,513,10,513,12,513,11613,
        9,513,1,514,1,514,1,514,1,514,1,514,1,514,3,514,11621,8,514,1,515,
        1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,
        1,515,3,515,11636,8,515,1,516,1,516,1,517,1,517,1,518,1,518,1,519,
        1,519,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        1,520,1,520,3,520,11658,8,520,1,521,1,521,1,521,1,521,1,521,3,521,
        11665,8,521,1,522,1,522,1,522,1,522,1,522,3,522,11672,8,522,1,523,
        1,523,1,524,1,524,1,524,1,524,1,525,1,525,1,525,3,525,11683,8,525,
        1,525,1,525,1,526,1,526,1,526,5,526,11690,8,526,10,526,12,526,11693,
        9,526,1,527,1,527,1,527,3,527,11698,8,527,1,527,1,527,1,527,1,527,
        3,527,11704,8,527,5,527,11706,8,527,10,527,12,527,11709,9,527,1,
        528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        3,528,11722,8,528,1,529,1,529,1,529,1,529,1,529,1,529,3,529,11730,
        8,529,1,530,1,530,1,531,1,531,1,531,5,531,11737,8,531,10,531,12,
        531,11740,9,531,1,532,1,532,3,532,11744,8,532,1,532,1,532,1,532,
        3,532,11749,8,532,5,532,11751,8,532,10,532,12,532,11754,9,532,1,
        533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,
        4,533,11767,8,533,11,533,12,533,11768,1,533,1,533,1,533,1,533,1,
        533,1,533,1,533,1,533,1,533,3,533,11780,8,533,1,533,1,533,1,533,
        1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,
        1,533,1,533,1,533,1,533,1,533,1,533,1,533,3,533,11803,8,533,1,533,
        1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,3,533,
        11816,8,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,1,533,
        1,533,1,533,1,533,1,533,3,533,11831,8,533,1,533,1,533,1,533,1,533,
        3,533,11837,8,533,1,533,1,533,1,533,1,533,3,533,11843,8,533,1,533,
        1,533,1,533,1,533,3,533,11849,8,533,1,533,1,533,3,533,11853,8,533,
        1,533,1,533,1,533,1,533,1,533,1,533,5,533,11861,8,533,10,533,12,
        533,11864,9,533,1,533,1,533,1,533,3,533,11869,8,533,5,533,11871,
        8,533,10,533,12,533,11874,9,533,1,534,1,534,1,534,1,534,1,534,1,
        534,1,534,1,534,1,534,1,535,1,535,1,535,1,535,1,535,5,535,11890,
        8,535,10,535,12,535,11893,9,535,1,535,1,535,1,536,1,536,1,536,1,
        536,1,536,1,536,1,536,1,537,1,537,1,537,1,537,1,537,1,537,1,537,
        1,537,1,537,3,537,11913,8,537,1,538,1,538,1,538,1,538,5,538,11919,
        8,538,10,538,12,538,11922,9,538,1,538,1,538,1,538,1,538,3,538,11928,
        8,538,1,539,1,539,1,539,1,539,1,540,1,540,1,541,1,541,1,541,1,541,
        5,541,11940,8,541,10,541,12,541,11943,9,541,1,541,1,541,1,541,1,
        541,3,541,11949,8,541,1,542,1,542,1,542,1,542,1,543,1,543,1,543,
        1,543,1,543,1,543,3,543,11961,8,543,1,543,1,543,3,543,11965,8,543,
        1,543,1,543,1,543,1,543,1,543,3,543,11972,8,543,1,543,1,543,3,543,
        11976,8,543,1,543,1,543,3,543,11980,8,543,1,543,1,543,3,543,11984,
        8,543,1,543,1,543,3,543,11988,8,543,1,543,1,543,3,543,11992,8,543,
        1,543,1,543,3,543,11996,8,543,1,543,1,543,3,543,12000,8,543,1,543,
        1,543,3,543,12004,8,543,1,543,1,543,1,543,1,543,1,543,3,543,12011,
        8,543,1,544,1,544,1,544,1,544,1,544,5,544,12018,8,544,10,544,12,
        544,12021,9,544,1,544,1,544,1,544,1,544,1,544,1,544,1,544,1,544,
        1,544,1,544,1,544,1,544,3,544,12035,8,544,1,545,1,545,1,545,1,545,
        1,546,1,546,1,547,1,547,1,547,1,547,3,547,12047,8,547,1,547,1,547,
        1,547,1,547,1,547,1,547,1,547,1,547,1,547,1,547,3,547,12059,8,547,
        1,548,1,548,1,548,1,548,1,548,1,548,5,548,12067,8,548,10,548,12,
        548,12070,9,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,
        1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,5,548,12088,8,548,
        10,548,12,548,12091,9,548,1,548,1,548,1,548,1,548,1,548,1,548,1,
        548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,3,548,
        12109,8,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,
        1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,1,548,
        1,548,1,548,1,548,1,548,1,548,1,548,1,548,3,548,12138,8,548,1,549,
        1,549,1,549,5,549,12143,8,549,10,549,12,549,12146,9,549,1,550,1,
        550,1,550,1,550,1,551,1,551,1,551,1,552,1,552,1,552,1,552,1,552,
        1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,
        1,552,1,552,3,552,12173,8,552,1,552,1,552,3,552,12177,8,552,1,552,
        1,552,1,552,1,552,1,552,1,552,1,552,3,552,12186,8,552,1,552,1,552,
        3,552,12190,8,552,1,553,1,553,1,553,3,553,12195,8,553,1,553,1,553,
        1,553,1,553,1,553,1,553,1,553,1,553,1,553,1,553,1,553,3,553,12208,
        8,553,1,553,1,553,1,553,3,553,12213,8,553,1,553,1,553,1,553,1,553,
        1,553,1,553,1,553,3,553,12222,8,553,3,553,12224,8,553,1,554,1,554,
        3,554,12228,8,554,1,554,1,554,3,554,12232,8,554,1,554,1,554,1,554,
        1,554,3,554,12238,8,554,1,555,1,555,1,556,3,556,12243,8,556,1,556,
        1,556,3,556,12247,8,556,1,556,1,556,3,556,12251,8,556,1,556,1,556,
        1,556,3,556,12256,8,556,1,556,1,556,3,556,12260,8,556,1,556,1,556,
        1,556,3,556,12265,8,556,1,556,1,556,1,556,3,556,12270,8,556,1,557,
        1,557,1,557,1,557,1,557,1,557,1,557,1,557,3,557,12280,8,557,1,558,
        1,558,1,558,4,558,12285,8,558,11,558,12,558,12286,1,558,1,558,3,
        558,12291,8,558,1,558,1,558,1,558,1,558,4,558,12297,8,558,11,558,
        12,558,12298,1,558,1,558,3,558,12303,8,558,1,558,1,558,3,558,12307,
        8,558,1,559,1,559,1,559,1,559,1,559,1,560,1,560,1,560,1,560,1,560,
        1,561,3,561,12320,8,561,1,561,1,561,5,561,12324,8,561,10,561,12,
        561,12327,9,561,1,562,1,562,3,562,12331,8,562,1,562,1,562,1,562,
        5,562,12336,8,562,10,562,12,562,12339,9,562,1,563,1,563,1,563,1,
        563,1,563,3,563,12346,8,563,1,563,1,563,1,563,1,564,1,564,1,564,
        3,564,12354,8,564,1,564,1,564,1,564,3,564,12359,8,564,1,565,1,565,
        3,565,12363,8,565,1,565,1,565,1,565,3,565,12368,8,565,1,565,1,565,
        3,565,12372,8,565,1,566,1,566,1,566,1,566,1,566,1,566,1,566,3,566,
        12381,8,566,1,566,1,566,5,566,12385,8,566,10,566,12,566,12388,9,
        566,1,567,3,567,12391,8,567,1,567,3,567,12394,8,567,1,567,3,567,
        12397,8,567,1,567,1,567,3,567,12401,8,567,1,567,3,567,12404,8,567,
        1,567,3,567,12407,8,567,1,567,3,567,12410,8,567,1,568,1,568,1,568,
        1,569,1,569,1,569,1,570,3,570,12419,8,570,1,570,1,570,1,571,3,571,
        12424,8,571,1,571,3,571,12427,8,571,1,571,1,571,1,572,1,572,1,572,
        5,572,12434,8,572,10,572,12,572,12437,9,572,1,572,3,572,12440,8,
        572,1,573,1,573,3,573,12444,8,573,1,573,1,573,3,573,12448,8,573,
        1,573,1,573,3,573,12452,8,573,3,573,12454,8,573,1,574,3,574,12457,
        8,574,1,574,1,574,1,575,3,575,12462,8,575,1,575,1,575,3,575,12466,
        8,575,1,575,1,575,3,575,12470,8,575,1,576,1,576,1,576,1,576,3,576,
        12476,8,576,1,577,1,577,1,577,3,577,12481,8,577,1,578,3,578,12484,
        8,578,1,578,1,578,1,579,1,579,3,579,12490,8,579,1,580,1,580,1,581,
        1,581,1,582,1,582,1,582,1,583,1,583,1,583,1,584,1,584,1,584,5,584,
        12505,8,584,10,584,12,584,12508,9,584,1,585,1,585,1,585,1,586,1,
        586,1,586,1,587,1,587,1,587,5,587,12519,8,587,10,587,12,587,12522,
        9,587,1,588,1,588,1,589,1,589,5,589,12528,8,589,10,589,12,589,12531,
        9,589,1,589,1,589,1,589,1,589,5,589,12537,8,589,10,589,12,589,12540,
        9,589,3,589,12542,8,589,1,590,1,590,3,590,12546,8,590,1,590,3,590,
        12549,8,590,1,590,3,590,12552,8,590,1,590,3,590,12555,8,590,1,590,
        3,590,12558,8,590,1,590,3,590,12561,8,590,1,590,3,590,12564,8,590,
        1,590,1,590,1,590,1,590,1,590,1,590,1,590,3,590,12573,8,590,1,590,
        1,590,1,590,1,590,1,590,3,590,12580,8,590,1,590,3,590,12583,8,590,
        1,590,3,590,12586,8,590,1,590,1,590,3,590,12590,8,590,1,590,3,590,
        12593,8,590,1,590,1,590,1,590,1,590,3,590,12599,8,590,1,590,3,590,
        12602,8,590,1,590,3,590,12605,8,590,1,590,1,590,1,590,3,590,12610,
        8,590,1,590,3,590,12613,8,590,3,590,12615,8,590,1,591,1,591,1,591,
        1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,1,591,3,591,12629,
        8,591,1,592,1,592,1,592,1,592,3,592,12635,8,592,1,592,1,592,1,592,
        5,592,12640,8,592,10,592,12,592,12643,9,592,1,592,1,592,1,593,1,
        593,1,593,1,593,1,593,1,593,1,593,1,594,1,594,1,594,5,594,12657,
        8,594,10,594,12,594,12660,9,594,1,595,3,595,12663,8,595,1,595,1,
        595,1,595,3,595,12668,8,595,1,595,1,595,1,596,1,596,3,596,12674,
        8,596,1,597,1,597,3,597,12678,8,597,1,598,3,598,12681,8,598,1,598,
        1,598,1,598,1,598,3,598,12687,8,598,1,598,1,598,1,598,1,598,1,598,
        3,598,12694,8,598,3,598,12696,8,598,1,598,1,598,3,598,12700,8,598,
        1,598,1,598,1,598,1,598,1,598,3,598,12707,8,598,1,599,1,599,1,599,
        1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,
        3,599,12723,8,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,1,599,
        1,599,3,599,12734,8,599,1,600,1,600,1,600,1,600,1,600,1,600,1,600,
        1,600,1,600,1,600,1,600,3,600,12747,8,600,1,600,1,600,1,601,1,601,
        1,601,1,601,1,601,1,601,1,601,1,601,3,601,12759,8,601,1,602,1,602,
        1,603,1,603,1,603,1,603,1,604,1,604,1,605,1,605,3,605,12771,8,605,
        1,605,1,605,1,605,1,605,3,605,12777,8,605,1,605,1,605,5,605,12781,
        8,605,10,605,12,605,12784,9,605,1,606,1,606,1,606,1,607,1,607,1,
        607,1,607,1,607,1,607,1,607,1,607,1,607,3,607,12798,8,607,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,12808,8,608,1,608,
        3,608,12811,8,608,1,609,1,609,1,610,1,610,1,611,1,611,1,611,1,611,
        1,611,1,611,1,611,1,611,1,611,1,611,1,611,3,611,12828,8,611,1,611,
        3,611,12831,8,611,1,612,1,612,1,612,1,612,1,612,1,612,1,612,1,612,
        5,612,12841,8,612,10,612,12,612,12844,9,612,1,613,1,613,1,613,1,
        614,1,614,1,614,3,614,12852,8,614,1,614,3,614,12855,8,614,1,614,
        3,614,12858,8,614,1,614,3,614,12861,8,614,1,614,3,614,12864,8,614,
        1,614,3,614,12867,8,614,1,614,3,614,12870,8,614,1,614,1,614,1,615,
        1,615,1,615,1,615,1,615,1,615,1,615,1,615,1,615,1,615,1,615,1,615,
        1,615,5,615,12887,8,615,10,615,12,615,12890,9,615,1,615,1,615,1,
        615,1,615,3,615,12896,8,615,3,615,12898,8,615,1,615,1,615,1,615,
        1,615,1,615,1,615,1,615,1,615,1,615,1,615,1,615,3,615,12911,8,615,
        1,616,1,616,1,616,1,616,5,616,12917,8,616,10,616,12,616,12920,9,
        616,1,616,1,616,1,617,1,617,1,617,1,617,1,618,1,618,1,618,1,618,
        1,618,3,618,12933,8,618,3,618,12935,8,618,1,618,1,618,1,618,3,618,
        12940,8,618,3,618,12942,8,618,3,618,12944,8,618,1,619,1,619,1,619,
        1,619,5,619,12950,8,619,10,619,12,619,12953,9,619,1,620,1,620,3,
        620,12957,8,620,1,621,1,621,1,621,1,621,1,621,1,622,1,622,1,622,
        3,622,12967,8,622,1,622,1,622,3,622,12971,8,622,1,623,1,623,3,623,
        12975,8,623,1,623,1,623,1,624,1,624,5,624,12981,8,624,10,624,12,
        624,12984,9,624,1,624,1,624,1,624,1,624,1,624,3,624,12991,8,624,
        1,624,1,624,1,624,1,624,1,624,1,624,5,624,12999,8,624,10,624,12,
        624,13002,9,624,1,625,1,625,1,626,3,626,13007,8,626,1,626,1,626,
        1,627,1,627,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,1,628,
        1,628,1,628,1,628,1,628,1,628,3,628,13027,8,628,1,628,1,628,1,628,
        1,628,1,628,1,628,1,628,3,628,13036,8,628,1,628,1,628,1,628,1,628,
        3,628,13042,8,628,1,628,1,628,1,628,1,628,3,628,13048,8,628,1,628,
        1,628,1,628,1,628,3,628,13054,8,628,1,628,1,628,3,628,13058,8,628,
        1,628,1,628,1,628,1,628,1,628,3,628,13065,8,628,1,628,1,628,1,628,
        1,628,1,628,1,628,5,628,13073,8,628,10,628,12,628,13076,9,628,1,
        628,1,628,1,628,3,628,13081,8,628,1,628,1,628,1,628,1,628,1,628,
        3,628,13088,8,628,1,629,1,629,1,629,1,630,1,630,1,630,3,630,13096,
        8,630,1,631,1,631,1,631,5,631,13101,8,631,10,631,12,631,13104,9,
        631,1,632,1,632,1,632,1,632,3,632,13110,8,632,1,632,1,632,1,632,
        1,632,1,632,1,632,3,632,13118,8,632,1,632,1,632,1,632,1,632,1,632,
        1,632,1,632,3,632,13127,8,632,1,633,1,633,1,633,1,634,1,634,1,634,
        1,635,1,635,1,635,3,635,13138,8,635,1,635,3,635,13141,8,635,1,635,
        1,635,3,635,13145,8,635,1,636,1,636,1,636,1,636,1,636,5,636,13152,
        8,636,10,636,12,636,13155,9,636,1,637,1,637,1,638,1,638,1,639,1,
        639,1,639,1,639,3,639,13165,8,639,1,639,1,639,3,639,13169,8,639,
        1,639,3,639,13172,8,639,1,639,1,639,3,639,13176,8,639,1,639,1,639,
        3,639,13180,8,639,1,639,3,639,13183,8,639,3,639,13185,8,639,1,640,
        1,640,1,641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,
        1,641,1,641,1,641,5,641,13202,8,641,10,641,12,641,13205,9,641,1,
        641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,1,641,5,641,13216,
        8,641,10,641,12,641,13219,9,641,1,641,1,641,3,641,13223,8,641,1,
        641,0,3,1066,1132,1248,642,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
        304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
        336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
        368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
        400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,
        432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,
        464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
        496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,
        528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,
        560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,
        592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,
        624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,
        656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,
        688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,
        720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,
        752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,
        784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,
        816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,
        848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,
        880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,910,
        912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,
        944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,
        976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,
        1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,
        1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,
        1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,
        1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,
        1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,
        1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,
        1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,
        1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,
        1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,
        1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,
        1268,1270,1272,1274,1276,1278,1280,1282,0,121,2,0,17,17,274,274,
        2,0,789,789,849,849,2,0,612,613,615,615,2,0,906,906,908,909,3,0,
        366,366,753,753,890,890,2,0,152,152,617,617,2,0,244,244,814,814,
        3,0,580,580,669,669,814,814,6,0,7,7,501,501,560,560,667,667,745,
        745,817,817,8,0,57,57,97,97,100,100,191,191,313,313,444,444,573,
        573,862,862,2,0,610,610,738,738,3,0,138,138,655,655,838,838,4,0,
        36,36,38,38,138,138,217,217,4,0,138,138,173,173,183,183,413,413,
        4,0,551,551,581,581,610,610,738,738,2,0,138,138,665,665,2,0,598,
        598,606,606,8,0,138,138,140,140,150,150,320,320,410,410,598,598,
        606,606,665,665,2,0,138,138,217,217,5,0,167,167,432,432,440,440,
        842,842,860,860,3,0,452,452,738,738,740,740,2,0,200,200,216,216,
        4,0,73,73,166,166,483,483,538,538,3,0,200,200,216,216,218,218,2,
        0,336,336,444,444,2,0,217,217,254,254,3,0,138,138,439,439,744,744,
        2,0,10,10,588,588,3,0,138,138,217,217,725,725,2,0,188,188,333,333,
        2,0,454,454,827,827,3,0,286,286,517,517,683,683,2,0,182,182,458,
        458,2,0,447,447,587,587,3,0,232,232,299,299,736,736,2,0,28,28,429,
        429,2,0,10,10,208,208,3,0,98,98,230,230,710,710,3,0,169,169,656,
        656,747,747,2,0,48,48,83,83,4,0,51,51,191,191,313,313,444,444,3,
        0,51,51,286,286,342,342,2,0,491,491,493,493,2,0,173,173,413,413,
        2,0,335,335,837,837,6,0,63,64,159,160,366,367,498,499,515,516,855,
        856,3,0,360,361,563,563,704,704,2,0,103,103,509,509,3,0,78,78,296,
        296,485,485,3,0,1,1,297,297,484,484,2,0,395,395,748,749,2,0,673,
        673,675,675,1,0,521,531,20,0,1,1,52,52,64,64,75,75,78,78,95,95,160,
        160,294,294,296,297,367,367,445,445,478,478,484,485,499,499,516,
        516,635,635,697,697,856,856,864,864,916,916,8,0,51,52,97,97,100,
        100,191,191,313,313,444,444,573,573,862,862,3,0,82,82,321,321,826,
        826,1,0,695,696,1,0,906,907,2,0,266,266,797,797,2,0,747,747,834,
        834,1,0,759,760,2,0,306,306,390,390,2,0,446,446,500,500,2,0,55,55,
        326,326,50,0,3,3,24,24,26,26,53,54,89,90,118,128,173,173,177,178,
        183,183,219,219,222,222,229,229,235,236,251,251,300,301,348,348,
        362,364,368,369,393,393,412,413,426,426,434,434,439,439,537,537,
        541,541,548,549,569,569,571,571,599,600,628,628,650,650,680,680,
        684,684,705,705,717,718,731,731,741,741,767,767,769,769,771,771,
        773,775,777,777,780,780,782,783,791,792,802,802,810,810,821,822,
        824,824,843,844,5,0,375,375,416,416,692,692,854,854,857,858,2,0,
        851,853,859,859,2,0,697,697,710,710,2,0,210,210,710,710,14,0,16,
        16,170,170,355,355,543,543,621,621,657,657,707,707,729,729,750,750,
        755,755,758,758,818,818,835,835,839,839,4,0,32,32,449,449,666,666,
        721,721,2,0,104,104,607,607,2,0,17,17,444,444,1,0,196,197,2,0,137,
        137,706,706,2,0,278,278,340,340,4,0,169,169,656,656,757,757,838,
        838,40,0,6,6,9,9,15,15,48,48,131,131,138,138,143,143,153,153,198,
        198,213,213,276,277,287,287,327,327,365,365,370,370,373,374,384,
        384,412,412,427,427,446,446,500,500,505,505,544,544,578,578,584,
        584,620,620,623,623,629,629,670,670,672,672,706,706,754,754,756,
        756,759,759,766,766,803,803,816,816,829,830,838,838,841,841,89,0,
        7,7,13,13,27,27,44,44,117,117,135,135,138,138,144,144,168,168,180,
        180,190,190,194,194,204,204,207,207,209,209,211,211,213,214,217,
        217,233,233,239,239,242,242,246,246,248,248,270,271,275,276,284,
        284,306,306,322,322,324,326,339,339,342,343,345,345,350,350,357,
        357,361,361,377,378,381,381,390,390,396,396,412,412,416,416,427,
        427,436,436,438,438,456,456,461,461,482,482,486,486,491,493,496,
        496,501,501,504,505,509,509,518,518,520,531,533,534,545,545,553,
        553,557,560,565,565,567,567,569,569,572,572,578,579,582,582,602,
        603,605,605,607,607,609,609,620,620,625,625,629,629,653,653,655,
        655,667,667,699,699,713,713,715,715,719,720,745,745,754,756,780,
        780,813,813,817,817,829,830,832,832,836,836,841,841,861,861,15,0,
        31,31,62,62,108,108,154,154,163,165,277,277,303,303,325,325,397,
        397,421,421,703,703,737,737,785,785,801,801,812,812,4,0,109,109,
        624,624,798,799,878,878,2,0,329,329,461,461,2,0,786,786,870,870,
        1,0,735,736,3,0,174,174,764,764,778,778,3,0,175,175,765,765,779,
        779,3,0,133,133,141,142,317,317,1,0,944,945,1,0,941,943,2,0,926,
        926,944,945,2,0,332,332,385,385,3,0,398,398,632,632,795,795,4,0,
        357,357,763,763,766,766,870,870,6,0,353,353,865,865,868,868,881,
        881,888,888,891,891,3,0,460,460,872,872,884,884,2,0,873,877,887,
        887,2,0,113,114,882,882,5,0,869,869,883,883,885,886,889,890,893,
        893,2,0,866,866,892,892,2,0,46,46,196,196,1,0,383,384,2,0,330,330,
        605,605,3,0,195,195,572,572,629,629,2,0,373,373,381,381,2,0,276,
        276,379,379,2,0,44,44,895,895,1,0,914,915,2,0,17,17,205,205,3,0,
        95,95,478,478,864,864,3,0,286,286,382,382,618,618,2,0,41,41,182,
        182,2,0,274,274,376,376,2,0,85,85,626,626,2,0,91,91,746,746,2,0,
        590,590,668,668,2,0,651,651,751,751,1,0,919,925,3,0,17,17,30,30,
        698,698,1,0,626,627,2,0,274,274,441,441,1,0,314,315,15229,0,1285,
        1,0,0,0,2,1289,1,0,0,0,4,1306,1,0,0,0,6,1312,1,0,0,0,8,1320,1,0,
        0,0,10,1322,1,0,0,0,12,1364,1,0,0,0,14,1366,1,0,0,0,16,1377,1,0,
        0,0,18,1392,1,0,0,0,20,1394,1,0,0,0,22,1407,1,0,0,0,24,1432,1,0,
        0,0,26,1450,1,0,0,0,28,1452,1,0,0,0,30,1464,1,0,0,0,32,1501,1,0,
        0,0,34,1503,1,0,0,0,36,1521,1,0,0,0,38,1557,1,0,0,0,40,1573,1,0,
        0,0,42,1640,1,0,0,0,44,1642,1,0,0,0,46,1644,1,0,0,0,48,1657,1,0,
        0,0,50,1666,1,0,0,0,52,1670,1,0,0,0,54,1695,1,0,0,0,56,1697,1,0,
        0,0,58,1753,1,0,0,0,60,1755,1,0,0,0,62,1761,1,0,0,0,64,1789,1,0,
        0,0,66,1791,1,0,0,0,68,1795,1,0,0,0,70,1802,1,0,0,0,72,1806,1,0,
        0,0,74,1819,1,0,0,0,76,1856,1,0,0,0,78,1964,1,0,0,0,80,2016,1,0,
        0,0,82,2018,1,0,0,0,84,2035,1,0,0,0,86,2037,1,0,0,0,88,2077,1,0,
        0,0,90,2079,1,0,0,0,92,2102,1,0,0,0,94,2104,1,0,0,0,96,2130,1,0,
        0,0,98,2132,1,0,0,0,100,2144,1,0,0,0,102,2146,1,0,0,0,104,2148,1,
        0,0,0,106,2157,1,0,0,0,108,2162,1,0,0,0,110,2171,1,0,0,0,112,2176,
        1,0,0,0,114,2190,1,0,0,0,116,2217,1,0,0,0,118,2226,1,0,0,0,120,2332,
        1,0,0,0,122,2363,1,0,0,0,124,2373,1,0,0,0,126,2405,1,0,0,0,128,2407,
        1,0,0,0,130,2412,1,0,0,0,132,2435,1,0,0,0,134,2480,1,0,0,0,136,2524,
        1,0,0,0,138,2551,1,0,0,0,140,2553,1,0,0,0,142,2609,1,0,0,0,144,2704,
        1,0,0,0,146,2706,1,0,0,0,148,2710,1,0,0,0,150,2714,1,0,0,0,152,2745,
        1,0,0,0,154,2754,1,0,0,0,156,2756,1,0,0,0,158,2839,1,0,0,0,160,2841,
        1,0,0,0,162,2843,1,0,0,0,164,2967,1,0,0,0,166,2969,1,0,0,0,168,2971,
        1,0,0,0,170,3010,1,0,0,0,172,3089,1,0,0,0,174,3091,1,0,0,0,176,3200,
        1,0,0,0,178,3202,1,0,0,0,180,3206,1,0,0,0,182,3210,1,0,0,0,184,3218,
        1,0,0,0,186,3226,1,0,0,0,188,3388,1,0,0,0,190,3418,1,0,0,0,192,3491,
        1,0,0,0,194,3493,1,0,0,0,196,3505,1,0,0,0,198,3537,1,0,0,0,200,3547,
        1,0,0,0,202,3552,1,0,0,0,204,3587,1,0,0,0,206,3589,1,0,0,0,208,3620,
        1,0,0,0,210,3685,1,0,0,0,212,3747,1,0,0,0,214,3807,1,0,0,0,216,3995,
        1,0,0,0,218,3997,1,0,0,0,220,4001,1,0,0,0,222,4005,1,0,0,0,224,4018,
        1,0,0,0,226,4024,1,0,0,0,228,4111,1,0,0,0,230,4149,1,0,0,0,232,4235,
        1,0,0,0,234,4237,1,0,0,0,236,4291,1,0,0,0,238,4293,1,0,0,0,240,4305,
        1,0,0,0,242,4332,1,0,0,0,244,4341,1,0,0,0,246,4350,1,0,0,0,248,4356,
        1,0,0,0,250,4365,1,0,0,0,252,4371,1,0,0,0,254,4511,1,0,0,0,256,4521,
        1,0,0,0,258,4662,1,0,0,0,260,4664,1,0,0,0,262,4777,1,0,0,0,264,4836,
        1,0,0,0,266,4838,1,0,0,0,268,4855,1,0,0,0,270,4905,1,0,0,0,272,4955,
        1,0,0,0,274,5045,1,0,0,0,276,5113,1,0,0,0,278,5150,1,0,0,0,280,5277,
        1,0,0,0,282,5308,1,0,0,0,284,5332,1,0,0,0,286,5429,1,0,0,0,288,5432,
        1,0,0,0,290,5469,1,0,0,0,292,5495,1,0,0,0,294,5500,1,0,0,0,296,5504,
        1,0,0,0,298,5519,1,0,0,0,300,5521,1,0,0,0,302,5525,1,0,0,0,304,5529,
        1,0,0,0,306,5538,1,0,0,0,308,5560,1,0,0,0,310,5584,1,0,0,0,312,5626,
        1,0,0,0,314,5656,1,0,0,0,316,5658,1,0,0,0,318,5733,1,0,0,0,320,5735,
        1,0,0,0,322,5744,1,0,0,0,324,5778,1,0,0,0,326,5781,1,0,0,0,328,5786,
        1,0,0,0,330,5790,1,0,0,0,332,5910,1,0,0,0,334,5912,1,0,0,0,336,6088,
        1,0,0,0,338,6090,1,0,0,0,340,6092,1,0,0,0,342,6152,1,0,0,0,344,6188,
        1,0,0,0,346,6227,1,0,0,0,348,6265,1,0,0,0,350,6314,1,0,0,0,352,6352,
        1,0,0,0,354,6354,1,0,0,0,356,6357,1,0,0,0,358,6371,1,0,0,0,360,6374,
        1,0,0,0,362,6430,1,0,0,0,364,6432,1,0,0,0,366,6475,1,0,0,0,368,6503,
        1,0,0,0,370,6505,1,0,0,0,372,6621,1,0,0,0,374,6670,1,0,0,0,376,6672,
        1,0,0,0,378,6694,1,0,0,0,380,6728,1,0,0,0,382,6747,1,0,0,0,384,6749,
        1,0,0,0,386,6753,1,0,0,0,388,6755,1,0,0,0,390,6759,1,0,0,0,392,6769,
        1,0,0,0,394,6806,1,0,0,0,396,6828,1,0,0,0,398,6833,1,0,0,0,400,6835,
        1,0,0,0,402,6837,1,0,0,0,404,6841,1,0,0,0,406,6883,1,0,0,0,408,7130,
        1,0,0,0,410,7132,1,0,0,0,412,7142,1,0,0,0,414,7150,1,0,0,0,416,7158,
        1,0,0,0,418,7249,1,0,0,0,420,7251,1,0,0,0,422,7253,1,0,0,0,424,7277,
        1,0,0,0,426,7282,1,0,0,0,428,7285,1,0,0,0,430,7297,1,0,0,0,432,7301,
        1,0,0,0,434,7474,1,0,0,0,436,7476,1,0,0,0,438,7502,1,0,0,0,440,7504,
        1,0,0,0,442,7523,1,0,0,0,444,7551,1,0,0,0,446,7555,1,0,0,0,448,7559,
        1,0,0,0,450,7602,1,0,0,0,452,7644,1,0,0,0,454,7672,1,0,0,0,456,7717,
        1,0,0,0,458,7719,1,0,0,0,460,7754,1,0,0,0,462,7756,1,0,0,0,464,7762,
        1,0,0,0,466,7764,1,0,0,0,468,7954,1,0,0,0,470,8045,1,0,0,0,472,8047,
        1,0,0,0,474,8085,1,0,0,0,476,8100,1,0,0,0,478,8129,1,0,0,0,480,8168,
        1,0,0,0,482,8237,1,0,0,0,484,8331,1,0,0,0,486,8460,1,0,0,0,488,8462,
        1,0,0,0,490,8532,1,0,0,0,492,8562,1,0,0,0,494,8566,1,0,0,0,496,8568,
        1,0,0,0,498,8577,1,0,0,0,500,8586,1,0,0,0,502,8610,1,0,0,0,504,8631,
        1,0,0,0,506,8633,1,0,0,0,508,8635,1,0,0,0,510,8656,1,0,0,0,512,8658,
        1,0,0,0,514,8660,1,0,0,0,516,8669,1,0,0,0,518,8818,1,0,0,0,520,8852,
        1,0,0,0,522,8854,1,0,0,0,524,8862,1,0,0,0,526,8866,1,0,0,0,528,8870,
        1,0,0,0,530,8874,1,0,0,0,532,8889,1,0,0,0,534,8893,1,0,0,0,536,8897,
        1,0,0,0,538,8901,1,0,0,0,540,8923,1,0,0,0,542,8925,1,0,0,0,544,8931,
        1,0,0,0,546,8944,1,0,0,0,548,8964,1,0,0,0,550,8966,1,0,0,0,552,8986,
        1,0,0,0,554,9027,1,0,0,0,556,9029,1,0,0,0,558,9031,1,0,0,0,560,9035,
        1,0,0,0,562,9039,1,0,0,0,564,9043,1,0,0,0,566,9047,1,0,0,0,568,9106,
        1,0,0,0,570,9212,1,0,0,0,572,9264,1,0,0,0,574,9266,1,0,0,0,576,9273,
        1,0,0,0,578,9277,1,0,0,0,580,9305,1,0,0,0,582,9318,1,0,0,0,584,9320,
        1,0,0,0,586,9324,1,0,0,0,588,9357,1,0,0,0,590,9360,1,0,0,0,592,9364,
        1,0,0,0,594,9368,1,0,0,0,596,9372,1,0,0,0,598,9469,1,0,0,0,600,9471,
        1,0,0,0,602,9479,1,0,0,0,604,9482,1,0,0,0,606,9497,1,0,0,0,608,9515,
        1,0,0,0,610,9522,1,0,0,0,612,9527,1,0,0,0,614,9536,1,0,0,0,616,9539,
        1,0,0,0,618,9560,1,0,0,0,620,9562,1,0,0,0,622,9565,1,0,0,0,624,9570,
        1,0,0,0,626,9595,1,0,0,0,628,9614,1,0,0,0,630,9628,1,0,0,0,632,9638,
        1,0,0,0,634,9640,1,0,0,0,636,9648,1,0,0,0,638,9677,1,0,0,0,640,9692,
        1,0,0,0,642,9726,1,0,0,0,644,9768,1,0,0,0,646,9788,1,0,0,0,648,9803,
        1,0,0,0,650,9806,1,0,0,0,652,9808,1,0,0,0,654,9816,1,0,0,0,656,9824,
        1,0,0,0,658,9870,1,0,0,0,660,9881,1,0,0,0,662,9883,1,0,0,0,664,9887,
        1,0,0,0,666,9891,1,0,0,0,668,9895,1,0,0,0,670,9899,1,0,0,0,672,9908,
        1,0,0,0,674,9910,1,0,0,0,676,9918,1,0,0,0,678,9936,1,0,0,0,680,9940,
        1,0,0,0,682,9982,1,0,0,0,684,10007,1,0,0,0,686,10009,1,0,0,0,688,
        10055,1,0,0,0,690,10069,1,0,0,0,692,10071,1,0,0,0,694,10104,1,0,
        0,0,696,10106,1,0,0,0,698,10143,1,0,0,0,700,10145,1,0,0,0,702,10152,
        1,0,0,0,704,10156,1,0,0,0,706,10163,1,0,0,0,708,10172,1,0,0,0,710,
        10177,1,0,0,0,712,10187,1,0,0,0,714,10195,1,0,0,0,716,10203,1,0,
        0,0,718,10211,1,0,0,0,720,10219,1,0,0,0,722,10229,1,0,0,0,724,10234,
        1,0,0,0,726,10239,1,0,0,0,728,10247,1,0,0,0,730,10255,1,0,0,0,732,
        10262,1,0,0,0,734,10270,1,0,0,0,736,10278,1,0,0,0,738,10283,1,0,
        0,0,740,10290,1,0,0,0,742,10299,1,0,0,0,744,10308,1,0,0,0,746,10315,
        1,0,0,0,748,10324,1,0,0,0,750,10332,1,0,0,0,752,10340,1,0,0,0,754,
        10344,1,0,0,0,756,10351,1,0,0,0,758,10360,1,0,0,0,760,10367,1,0,
        0,0,762,10374,1,0,0,0,764,10381,1,0,0,0,766,10388,1,0,0,0,768,10395,
        1,0,0,0,770,10397,1,0,0,0,772,10407,1,0,0,0,774,10409,1,0,0,0,776,
        10413,1,0,0,0,778,10417,1,0,0,0,780,10421,1,0,0,0,782,10430,1,0,
        0,0,784,10432,1,0,0,0,786,10436,1,0,0,0,788,10440,1,0,0,0,790,10451,
        1,0,0,0,792,10456,1,0,0,0,794,10460,1,0,0,0,796,10464,1,0,0,0,798,
        10467,1,0,0,0,800,10470,1,0,0,0,802,10473,1,0,0,0,804,10477,1,0,
        0,0,806,10480,1,0,0,0,808,10483,1,0,0,0,810,10515,1,0,0,0,812,10517,
        1,0,0,0,814,10521,1,0,0,0,816,10525,1,0,0,0,818,10530,1,0,0,0,820,
        10535,1,0,0,0,822,10546,1,0,0,0,824,10551,1,0,0,0,826,10556,1,0,
        0,0,828,10561,1,0,0,0,830,10568,1,0,0,0,832,10573,1,0,0,0,834,10578,
        1,0,0,0,836,10583,1,0,0,0,838,10587,1,0,0,0,840,10592,1,0,0,0,842,
        10600,1,0,0,0,844,10606,1,0,0,0,846,10610,1,0,0,0,848,10616,1,0,
        0,0,850,10620,1,0,0,0,852,10625,1,0,0,0,854,10630,1,0,0,0,856,10634,
        1,0,0,0,858,10638,1,0,0,0,860,10646,1,0,0,0,862,10650,1,0,0,0,864,
        10654,1,0,0,0,866,10658,1,0,0,0,868,10662,1,0,0,0,870,10726,1,0,
        0,0,872,10728,1,0,0,0,874,10756,1,0,0,0,876,10780,1,0,0,0,878,10809,
        1,0,0,0,880,10814,1,0,0,0,882,10818,1,0,0,0,884,10824,1,0,0,0,886,
        10841,1,0,0,0,888,10848,1,0,0,0,890,10855,1,0,0,0,892,10899,1,0,
        0,0,894,10901,1,0,0,0,896,10929,1,0,0,0,898,10960,1,0,0,0,900,10966,
        1,0,0,0,902,10997,1,0,0,0,904,11005,1,0,0,0,906,11024,1,0,0,0,908,
        11042,1,0,0,0,910,11055,1,0,0,0,912,11076,1,0,0,0,914,11089,1,0,
        0,0,916,11112,1,0,0,0,918,11135,1,0,0,0,920,11137,1,0,0,0,922,11145,
        1,0,0,0,924,11151,1,0,0,0,926,11157,1,0,0,0,928,11166,1,0,0,0,930,
        11177,1,0,0,0,932,11192,1,0,0,0,934,11201,1,0,0,0,936,11205,1,0,
        0,0,938,11213,1,0,0,0,940,11219,1,0,0,0,942,11221,1,0,0,0,944,11243,
        1,0,0,0,946,11251,1,0,0,0,948,11260,1,0,0,0,950,11268,1,0,0,0,952,
        11273,1,0,0,0,954,11279,1,0,0,0,956,11293,1,0,0,0,958,11301,1,0,
        0,0,960,11307,1,0,0,0,962,11312,1,0,0,0,964,11322,1,0,0,0,966,11349,
        1,0,0,0,968,11373,1,0,0,0,970,11381,1,0,0,0,972,11385,1,0,0,0,974,
        11389,1,0,0,0,976,11394,1,0,0,0,978,11401,1,0,0,0,980,11408,1,0,
        0,0,982,11416,1,0,0,0,984,11424,1,0,0,0,986,11440,1,0,0,0,988,11470,
        1,0,0,0,990,11476,1,0,0,0,992,11485,1,0,0,0,994,11506,1,0,0,0,996,
        11511,1,0,0,0,998,11523,1,0,0,0,1000,11553,1,0,0,0,1002,11558,1,
        0,0,0,1004,11561,1,0,0,0,1006,11568,1,0,0,0,1008,11582,1,0,0,0,1010,
        11584,1,0,0,0,1012,11592,1,0,0,0,1014,11594,1,0,0,0,1016,11596,1,
        0,0,0,1018,11598,1,0,0,0,1020,11600,1,0,0,0,1022,11602,1,0,0,0,1024,
        11604,1,0,0,0,1026,11606,1,0,0,0,1028,11620,1,0,0,0,1030,11635,1,
        0,0,0,1032,11637,1,0,0,0,1034,11639,1,0,0,0,1036,11641,1,0,0,0,1038,
        11643,1,0,0,0,1040,11657,1,0,0,0,1042,11664,1,0,0,0,1044,11671,1,
        0,0,0,1046,11673,1,0,0,0,1048,11675,1,0,0,0,1050,11682,1,0,0,0,1052,
        11686,1,0,0,0,1054,11694,1,0,0,0,1056,11721,1,0,0,0,1058,11729,1,
        0,0,0,1060,11731,1,0,0,0,1062,11733,1,0,0,0,1064,11741,1,0,0,0,1066,
        11779,1,0,0,0,1068,11875,1,0,0,0,1070,11884,1,0,0,0,1072,11896,1,
        0,0,0,1074,11912,1,0,0,0,1076,11927,1,0,0,0,1078,11929,1,0,0,0,1080,
        11933,1,0,0,0,1082,11948,1,0,0,0,1084,11950,1,0,0,0,1086,12010,1,
        0,0,0,1088,12034,1,0,0,0,1090,12036,1,0,0,0,1092,12040,1,0,0,0,1094,
        12058,1,0,0,0,1096,12137,1,0,0,0,1098,12139,1,0,0,0,1100,12147,1,
        0,0,0,1102,12151,1,0,0,0,1104,12189,1,0,0,0,1106,12223,1,0,0,0,1108,
        12237,1,0,0,0,1110,12239,1,0,0,0,1112,12269,1,0,0,0,1114,12279,1,
        0,0,0,1116,12306,1,0,0,0,1118,12308,1,0,0,0,1120,12313,1,0,0,0,1122,
        12319,1,0,0,0,1124,12328,1,0,0,0,1126,12340,1,0,0,0,1128,12358,1,
        0,0,0,1130,12371,1,0,0,0,1132,12380,1,0,0,0,1134,12390,1,0,0,0,1136,
        12411,1,0,0,0,1138,12414,1,0,0,0,1140,12418,1,0,0,0,1142,12423,1,
        0,0,0,1144,12430,1,0,0,0,1146,12453,1,0,0,0,1148,12456,1,0,0,0,1150,
        12469,1,0,0,0,1152,12475,1,0,0,0,1154,12477,1,0,0,0,1156,12483,1,
        0,0,0,1158,12489,1,0,0,0,1160,12491,1,0,0,0,1162,12493,1,0,0,0,1164,
        12495,1,0,0,0,1166,12498,1,0,0,0,1168,12501,1,0,0,0,1170,12509,1,
        0,0,0,1172,12512,1,0,0,0,1174,12515,1,0,0,0,1176,12523,1,0,0,0,1178,
        12541,1,0,0,0,1180,12614,1,0,0,0,1182,12628,1,0,0,0,1184,12630,1,
        0,0,0,1186,12646,1,0,0,0,1188,12653,1,0,0,0,1190,12662,1,0,0,0,1192,
        12671,1,0,0,0,1194,12677,1,0,0,0,1196,12706,1,0,0,0,1198,12733,1,
        0,0,0,1200,12735,1,0,0,0,1202,12750,1,0,0,0,1204,12760,1,0,0,0,1206,
        12762,1,0,0,0,1208,12766,1,0,0,0,1210,12768,1,0,0,0,1212,12785,1,
        0,0,0,1214,12797,1,0,0,0,1216,12807,1,0,0,0,1218,12812,1,0,0,0,1220,
        12814,1,0,0,0,1222,12816,1,0,0,0,1224,12832,1,0,0,0,1226,12845,1,
        0,0,0,1228,12848,1,0,0,0,1230,12910,1,0,0,0,1232,12912,1,0,0,0,1234,
        12923,1,0,0,0,1236,12943,1,0,0,0,1238,12945,1,0,0,0,1240,12956,1,
        0,0,0,1242,12958,1,0,0,0,1244,12963,1,0,0,0,1246,12972,1,0,0,0,1248,
        12978,1,0,0,0,1250,13003,1,0,0,0,1252,13006,1,0,0,0,1254,13010,1,
        0,0,0,1256,13087,1,0,0,0,1258,13089,1,0,0,0,1260,13095,1,0,0,0,1262,
        13097,1,0,0,0,1264,13126,1,0,0,0,1266,13128,1,0,0,0,1268,13131,1,
        0,0,0,1270,13137,1,0,0,0,1272,13146,1,0,0,0,1274,13156,1,0,0,0,1276,
        13158,1,0,0,0,1278,13184,1,0,0,0,1280,13186,1,0,0,0,1282,13222,1,
        0,0,0,1284,1286,3,2,1,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,
        1287,1,0,0,0,1287,1288,5,0,0,1,1288,1,1,0,0,0,1289,1294,3,4,2,0,
        1290,1291,5,938,0,0,1291,1293,3,4,2,0,1292,1290,1,0,0,0,1293,1296,
        1,0,0,0,1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,1298,1,0,0,0,1296,
        1294,1,0,0,0,1297,1299,5,938,0,0,1298,1297,1,0,0,0,1298,1299,1,0,
        0,0,1299,3,1,0,0,0,1300,1307,3,6,3,0,1301,1307,3,8,4,0,1302,1307,
        3,870,435,0,1303,1307,3,782,391,0,1304,1307,3,810,405,0,1305,1307,
        3,38,19,0,1306,1300,1,0,0,0,1306,1301,1,0,0,0,1306,1302,1,0,0,0,
        1306,1303,1,0,0,0,1306,1304,1,0,0,0,1306,1305,1,0,0,0,1307,5,1,0,
        0,0,1308,1313,3,134,67,0,1309,1313,3,362,181,0,1310,1313,3,698,349,
        0,1311,1313,3,772,386,0,1312,1308,1,0,0,0,1312,1309,1,0,0,0,1312,
        1310,1,0,0,0,1312,1311,1,0,0,0,1313,7,1,0,0,0,1314,1321,3,1122,561,
        0,1315,1321,3,10,5,0,1316,1321,3,12,6,0,1317,1321,3,30,15,0,1318,
        1321,3,34,17,0,1319,1321,3,20,10,0,1320,1314,1,0,0,0,1320,1315,1,
        0,0,0,1320,1316,1,0,0,0,1320,1317,1,0,0,0,1320,1318,1,0,0,0,1320,
        1319,1,0,0,0,1321,9,1,0,0,0,1322,1324,5,351,0,0,1323,1325,5,508,
        0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,0,0,0,1326,1327,
        5,358,0,0,1327,1329,3,1056,528,0,1328,1330,3,446,223,0,1329,1328,
        1,0,0,0,1329,1330,1,0,0,0,1330,1333,1,0,0,0,1331,1334,3,36,18,0,
        1332,1334,3,1122,561,0,1333,1331,1,0,0,0,1333,1332,1,0,0,0,1334,
        11,1,0,0,0,1335,1337,5,351,0,0,1336,1338,5,508,0,0,1337,1336,1,0,
        0,0,1337,1338,1,0,0,0,1338,1339,1,0,0,0,1339,1340,5,17,0,0,1340,
        1365,3,14,7,0,1341,1343,5,351,0,0,1342,1344,5,508,0,0,1343,1342,
        1,0,0,0,1343,1344,1,0,0,0,1344,1345,1,0,0,0,1345,1354,7,0,0,0,1346,
        1347,5,845,0,0,1347,1348,3,1256,628,0,1348,1350,5,762,0,0,1349,1351,
        3,14,7,0,1350,1349,1,0,0,0,1351,1352,1,0,0,0,1352,1350,1,0,0,0,1352,
        1353,1,0,0,0,1353,1355,1,0,0,0,1354,1346,1,0,0,0,1355,1356,1,0,0,
        0,1356,1354,1,0,0,0,1356,1357,1,0,0,0,1357,1360,1,0,0,0,1358,1359,
        5,212,0,0,1359,1361,3,14,7,0,1360,1358,1,0,0,0,1360,1361,1,0,0,0,
        1361,1362,1,0,0,0,1362,1363,3,1254,627,0,1363,1365,1,0,0,0,1364,
        1335,1,0,0,0,1364,1341,1,0,0,0,1365,13,1,0,0,0,1366,1367,5,358,0,
        0,1367,1372,3,1056,528,0,1368,1369,5,931,0,0,1369,1370,3,1052,526,
        0,1370,1371,5,932,0,0,1371,1373,1,0,0,0,1372,1368,1,0,0,0,1372,1373,
        1,0,0,0,1373,1375,1,0,0,0,1374,1376,3,16,8,0,1375,1374,1,0,0,0,1375,
        1376,1,0,0,0,1376,15,1,0,0,0,1377,1378,5,830,0,0,1378,1379,5,931,
        0,0,1379,1384,3,18,9,0,1380,1381,5,937,0,0,1381,1383,3,18,9,0,1382,
        1380,1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,
        0,1385,1387,1,0,0,0,1386,1384,1,0,0,0,1387,1388,5,932,0,0,1388,17,
        1,0,0,0,1389,1393,3,1050,525,0,1390,1393,5,182,0,0,1391,1393,5,458,
        0,0,1392,1389,1,0,0,0,1392,1390,1,0,0,0,1392,1391,1,0,0,0,1393,19,
        1,0,0,0,1394,1395,5,418,0,0,1395,1396,5,358,0,0,1396,1398,3,1056,
        528,0,1397,1399,3,1156,578,0,1398,1397,1,0,0,0,1398,1399,1,0,0,0,
        1399,1400,1,0,0,0,1400,1401,5,825,0,0,1401,1402,3,1176,588,0,1402,
        1403,5,488,0,0,1403,1404,3,1248,624,0,1404,1405,3,22,11,0,1405,21,
        1,0,0,0,1406,1408,3,24,12,0,1407,1406,1,0,0,0,1408,1409,1,0,0,0,
        1409,1407,1,0,0,0,1409,1410,1,0,0,0,1410,23,1,0,0,0,1411,1412,5,
        845,0,0,1412,1415,5,405,0,0,1413,1414,5,29,0,0,1414,1416,3,1248,
        624,0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1417,1,0,0,0,1417,
        1418,5,762,0,0,1418,1420,3,26,13,0,1419,1411,1,0,0,0,1420,1421,1,
        0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1433,1,0,0,0,1423,
        1424,5,845,0,0,1424,1425,5,448,0,0,1425,1428,5,405,0,0,1426,1427,
        5,29,0,0,1427,1429,3,1248,624,0,1428,1426,1,0,0,0,1428,1429,1,0,
        0,0,1429,1430,1,0,0,0,1430,1431,5,762,0,0,1431,1433,3,28,14,0,1432,
        1419,1,0,0,0,1432,1423,1,0,0,0,1433,25,1,0,0,0,1434,1435,5,811,0,
        0,1435,1436,5,676,0,0,1436,1437,3,1050,525,0,1437,1438,5,921,0,0,
        1438,1446,3,1066,533,0,1439,1440,5,937,0,0,1440,1441,3,1050,525,
        0,1441,1442,5,921,0,0,1442,1443,3,1066,533,0,1443,1445,1,0,0,0,1444,
        1439,1,0,0,0,1445,1448,1,0,0,0,1446,1444,1,0,0,0,1446,1447,1,0,0,
        0,1447,1451,1,0,0,0,1448,1446,1,0,0,0,1449,1451,5,193,0,0,1450,1434,
        1,0,0,0,1450,1449,1,0,0,0,1451,27,1,0,0,0,1452,1457,5,351,0,0,1453,
        1454,5,931,0,0,1454,1455,3,1052,526,0,1455,1456,5,932,0,0,1456,1458,
        1,0,0,0,1457,1453,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,
        1460,5,830,0,0,1460,1461,5,931,0,0,1461,1462,3,1062,531,0,1462,1463,
        5,932,0,0,1463,29,1,0,0,0,1464,1465,5,811,0,0,1465,1467,3,1056,528,
        0,1466,1468,3,1156,578,0,1467,1466,1,0,0,0,1467,1468,1,0,0,0,1468,
        1469,1,0,0,0,1469,1470,5,676,0,0,1470,1471,3,1050,525,0,1471,1472,
        5,921,0,0,1472,1480,3,1066,533,0,1473,1474,5,937,0,0,1474,1475,3,
        1050,525,0,1475,1476,5,921,0,0,1476,1477,3,1066,533,0,1477,1479,
        1,0,0,0,1478,1473,1,0,0,0,1479,1482,1,0,0,0,1480,1478,1,0,0,0,1480,
        1481,1,0,0,0,1481,1485,1,0,0,0,1482,1480,1,0,0,0,1483,1484,5,285,
        0,0,1484,1486,3,1174,587,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,
        1489,1,0,0,0,1487,1488,5,846,0,0,1488,1490,3,1248,624,0,1489,1487,
        1,0,0,0,1489,1490,1,0,0,0,1490,31,1,0,0,0,1491,1493,3,1056,528,0,
        1492,1494,3,1156,578,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,
        1502,1,0,0,0,1495,1496,5,931,0,0,1496,1497,3,1254,627,0,1497,1499,
        5,932,0,0,1498,1500,3,1156,578,0,1499,1498,1,0,0,0,1499,1500,1,0,
        0,0,1500,1502,1,0,0,0,1501,1491,1,0,0,0,1501,1495,1,0,0,0,1502,33,
        1,0,0,0,1503,1504,5,193,0,0,1504,1505,5,285,0,0,1505,1507,3,1056,
        528,0,1506,1508,3,1156,578,0,1507,1506,1,0,0,0,1507,1508,1,0,0,0,
        1508,1515,1,0,0,0,1509,1510,5,825,0,0,1510,1513,3,32,16,0,1511,1512,
        5,937,0,0,1512,1514,3,32,16,0,1513,1511,1,0,0,0,1513,1514,1,0,0,
        0,1514,1516,1,0,0,0,1515,1509,1,0,0,0,1515,1516,1,0,0,0,1516,1519,
        1,0,0,0,1517,1518,5,846,0,0,1518,1520,3,1248,624,0,1519,1517,1,0,
        0,0,1519,1520,1,0,0,0,1520,35,1,0,0,0,1521,1522,5,830,0,0,1522,1523,
        5,931,0,0,1523,1524,3,1062,531,0,1524,1530,5,932,0,0,1525,1526,5,
        937,0,0,1526,1527,5,931,0,0,1527,1528,3,1062,531,0,1528,1529,5,932,
        0,0,1529,1531,1,0,0,0,1530,1525,1,0,0,0,1530,1531,1,0,0,0,1531,37,
        1,0,0,0,1532,1558,3,42,21,0,1533,1558,3,56,28,0,1534,1558,3,58,29,
        0,1535,1558,3,62,31,0,1536,1558,3,64,32,0,1537,1558,3,66,33,0,1538,
        1558,3,68,34,0,1539,1558,3,72,36,0,1540,1558,3,74,37,0,1541,1558,
        3,76,38,0,1542,1558,3,94,47,0,1543,1558,3,98,49,0,1544,1558,3,104,
        52,0,1545,1558,3,114,57,0,1546,1558,3,116,58,0,1547,1558,3,118,59,
        0,1548,1558,3,120,60,0,1549,1558,3,122,61,0,1550,1558,3,124,62,0,
        1551,1558,3,126,63,0,1552,1558,3,128,64,0,1553,1558,3,130,65,0,1554,
        1558,3,132,66,0,1555,1558,3,674,337,0,1556,1558,3,40,20,0,1557,1532,
        1,0,0,0,1557,1533,1,0,0,0,1557,1534,1,0,0,0,1557,1535,1,0,0,0,1557,
        1536,1,0,0,0,1557,1537,1,0,0,0,1557,1538,1,0,0,0,1557,1539,1,0,0,
        0,1557,1540,1,0,0,0,1557,1541,1,0,0,0,1557,1542,1,0,0,0,1557,1543,
        1,0,0,0,1557,1544,1,0,0,0,1557,1545,1,0,0,0,1557,1546,1,0,0,0,1557,
        1547,1,0,0,0,1557,1548,1,0,0,0,1557,1549,1,0,0,0,1557,1550,1,0,0,
        0,1557,1551,1,0,0,0,1557,1552,1,0,0,0,1557,1553,1,0,0,0,1557,1554,
        1,0,0,0,1557,1555,1,0,0,0,1557,1556,1,0,0,0,1558,39,1,0,0,0,1559,
        1561,5,84,0,0,1560,1562,7,1,0,0,1561,1560,1,0,0,0,1561,1562,1,0,
        0,0,1562,1565,1,0,0,0,1563,1564,5,436,0,0,1564,1566,3,1030,515,0,
        1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,1574,1,0,0,0,1567,1568,
        5,711,0,0,1568,1571,5,789,0,0,1569,1570,5,436,0,0,1570,1572,3,1030,
        515,0,1571,1569,1,0,0,0,1571,1572,1,0,0,0,1572,1574,1,0,0,0,1573,
        1559,1,0,0,0,1573,1567,1,0,0,0,1574,41,1,0,0,0,1575,1576,5,152,0,
        0,1576,1577,5,358,0,0,1577,1578,3,1056,528,0,1578,1583,5,285,0,0,
        1579,1584,3,108,54,0,1580,1584,3,106,53,0,1581,1584,3,110,55,0,1582,
        1584,3,44,22,0,1583,1579,1,0,0,0,1583,1580,1,0,0,0,1583,1581,1,0,
        0,0,1583,1582,1,0,0,0,1584,1586,1,0,0,0,1585,1587,3,46,23,0,1586,
        1585,1,0,0,0,1586,1587,1,0,0,0,1587,1589,1,0,0,0,1588,1590,3,1048,
        524,0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,1590,1592,1,0,0,0,1591,
        1593,3,48,24,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,1597,1,0,
        0,0,1594,1596,3,520,260,0,1595,1594,1,0,0,0,1596,1599,1,0,0,0,1597,
        1595,1,0,0,0,1597,1598,1,0,0,0,1598,1603,1,0,0,0,1599,1597,1,0,0,
        0,1600,1601,5,828,0,0,1601,1602,5,921,0,0,1602,1604,7,2,0,0,1603,
        1600,1,0,0,0,1603,1604,1,0,0,0,1604,1641,1,0,0,0,1605,1606,5,152,
        0,0,1606,1607,5,358,0,0,1607,1612,3,1056,528,0,1608,1609,5,931,0,
        0,1609,1610,3,1052,526,0,1610,1611,5,932,0,0,1611,1613,1,0,0,0,1612,
        1608,1,0,0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1615,5,285,
        0,0,1615,1616,5,931,0,0,1616,1617,5,669,0,0,1617,1618,3,1144,572,
        0,1618,1622,5,285,0,0,1619,1623,3,108,54,0,1620,1623,3,106,53,0,
        1621,1623,3,110,55,0,1622,1619,1,0,0,0,1622,1620,1,0,0,0,1622,1621,
        1,0,0,0,1623,1624,1,0,0,0,1624,1626,5,932,0,0,1625,1627,3,46,23,
        0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1629,1,0,0,0,1628,1630,
        3,1048,524,0,1629,1628,1,0,0,0,1629,1630,1,0,0,0,1630,1632,1,0,0,
        0,1631,1633,3,48,24,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1637,
        1,0,0,0,1634,1636,3,520,260,0,1635,1634,1,0,0,0,1636,1639,1,0,0,
        0,1637,1635,1,0,0,0,1637,1638,1,0,0,0,1638,1641,1,0,0,0,1639,1637,
        1,0,0,0,1640,1575,1,0,0,0,1640,1605,1,0,0,0,1641,43,1,0,0,0,1642,
        1643,7,3,0,0,1643,45,1,0,0,0,1644,1645,5,271,0,0,1645,1646,5,921,
        0,0,1646,1647,5,931,0,0,1647,1652,3,1024,512,0,1648,1649,5,937,0,
        0,1649,1651,3,1024,512,0,1650,1648,1,0,0,0,1651,1654,1,0,0,0,1652,
        1650,1,0,0,0,1652,1653,1,0,0,0,1653,1655,1,0,0,0,1654,1652,1,0,0,
        0,1655,1656,5,932,0,0,1656,47,1,0,0,0,1657,1658,5,273,0,0,1658,1659,
        5,921,0,0,1659,1662,5,931,0,0,1660,1663,3,50,25,0,1661,1663,3,52,
        26,0,1662,1660,1,0,0,0,1662,1661,1,0,0,0,1663,1664,1,0,0,0,1664,
        1665,5,932,0,0,1665,49,1,0,0,0,1666,1667,5,283,0,0,1667,1668,5,921,
        0,0,1668,1669,3,1024,512,0,1669,51,1,0,0,0,1670,1671,5,803,0,0,1671,
        1672,5,921,0,0,1672,1676,3,420,210,0,1673,1675,3,518,259,0,1674,
        1673,1,0,0,0,1675,1678,1,0,0,0,1676,1674,1,0,0,0,1676,1677,1,0,0,
        0,1677,53,1,0,0,0,1678,1676,1,0,0,0,1679,1680,5,709,0,0,1680,1681,
        5,921,0,0,1681,1682,5,931,0,0,1682,1683,5,283,0,0,1683,1684,5,921,
        0,0,1684,1696,3,1024,512,0,1685,1686,5,803,0,0,1686,1687,5,921,0,
        0,1687,1689,3,420,210,0,1688,1690,3,518,259,0,1689,1688,1,0,0,0,
        1690,1691,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,1693,
        1,0,0,0,1693,1694,5,932,0,0,1694,1696,1,0,0,0,1695,1679,1,0,0,0,
        1695,1685,1,0,0,0,1696,55,1,0,0,0,1697,1698,5,152,0,0,1698,1703,
        5,358,0,0,1699,1704,3,108,54,0,1700,1704,3,106,53,0,1701,1704,3,
        110,55,0,1702,1704,3,44,22,0,1703,1699,1,0,0,0,1703,1700,1,0,0,0,
        1703,1701,1,0,0,0,1703,1702,1,0,0,0,1704,1705,1,0,0,0,1705,1711,
        5,285,0,0,1706,1712,3,1056,528,0,1707,1708,5,931,0,0,1708,1709,3,
        1122,561,0,1709,1710,5,932,0,0,1710,1712,1,0,0,0,1711,1706,1,0,0,
        0,1711,1707,1,0,0,0,1712,1714,1,0,0,0,1713,1715,3,1206,603,0,1714,
        1713,1,0,0,0,1714,1715,1,0,0,0,1715,1717,1,0,0,0,1716,1718,3,48,
        24,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,1720,1,0,0,0,1719,
        1721,3,520,260,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,1725,1,
        0,0,0,1722,1723,5,828,0,0,1723,1724,5,921,0,0,1724,1726,5,616,0,
        0,1725,1722,1,0,0,0,1725,1726,1,0,0,0,1726,1728,1,0,0,0,1727,1729,
        5,319,0,0,1728,1727,1,0,0,0,1728,1729,1,0,0,0,1729,57,1,0,0,0,1730,
        1732,5,138,0,0,1731,1733,3,800,400,0,1732,1731,1,0,0,0,1732,1733,
        1,0,0,0,1733,1734,1,0,0,0,1734,1735,5,488,0,0,1735,1736,3,694,347,
        0,1736,1738,3,1056,528,0,1737,1739,3,60,30,0,1738,1737,1,0,0,0,1738,
        1739,1,0,0,0,1739,1740,1,0,0,0,1740,1741,5,359,0,0,1741,1742,3,1024,
        512,0,1742,1754,1,0,0,0,1743,1745,5,138,0,0,1744,1746,3,800,400,
        0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,1747,1,0,0,0,1747,1748,
        5,488,0,0,1748,1749,5,136,0,0,1749,1750,3,1112,556,0,1750,1751,5,
        359,0,0,1751,1752,3,1024,512,0,1752,1754,1,0,0,0,1753,1730,1,0,0,
        0,1753,1743,1,0,0,0,1754,59,1,0,0,0,1755,1757,5,931,0,0,1756,1758,
        3,196,98,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,1759,1,0,0,0,
        1759,1760,5,932,0,0,1760,61,1,0,0,0,1761,1763,5,139,0,0,1762,1764,
        5,849,0,0,1763,1762,1,0,0,0,1763,1764,1,0,0,0,1764,63,1,0,0,0,1765,
        1766,5,243,0,0,1766,1770,5,333,0,0,1767,1771,3,1024,512,0,1768,1771,
        3,1030,515,0,1769,1771,5,905,0,0,1770,1767,1,0,0,0,1770,1768,1,0,
        0,0,1770,1769,1,0,0,0,1771,1784,1,0,0,0,1772,1773,5,825,0,0,1773,
        1774,5,931,0,0,1774,1779,3,1030,515,0,1775,1776,5,937,0,0,1776,1778,
        3,1030,515,0,1777,1775,1,0,0,0,1778,1781,1,0,0,0,1779,1777,1,0,0,
        0,1779,1780,1,0,0,0,1780,1782,1,0,0,0,1781,1779,1,0,0,0,1782,1783,
        5,932,0,0,1783,1785,1,0,0,0,1784,1772,1,0,0,0,1784,1785,1,0,0,0,
        1785,1790,1,0,0,0,1786,1787,5,243,0,0,1787,1788,5,333,0,0,1788,1790,
        5,911,0,0,1789,1765,1,0,0,0,1789,1786,1,0,0,0,1790,65,1,0,0,0,1791,
        1792,5,243,0,0,1792,1793,5,757,0,0,1793,1794,3,1056,528,0,1794,67,
        1,0,0,0,1795,1798,5,247,0,0,1796,1797,5,825,0,0,1797,1799,7,4,0,
        0,1798,1796,1,0,0,0,1798,1799,1,0,0,0,1799,1800,1,0,0,0,1800,1801,
        3,4,2,0,1801,69,1,0,0,0,1802,1803,5,513,0,0,1803,1804,5,921,0,0,
        1804,1805,3,1060,530,0,1805,71,1,0,0,0,1806,1810,5,302,0,0,1807,
        1811,3,110,55,0,1808,1811,3,106,53,0,1809,1811,3,108,54,0,1810,1807,
        1,0,0,0,1810,1808,1,0,0,0,1810,1809,1,0,0,0,1811,1812,1,0,0,0,1812,
        1814,5,910,0,0,1813,1815,3,70,35,0,1814,1813,1,0,0,0,1814,1815,1,
        0,0,0,1815,1817,1,0,0,0,1816,1818,3,1048,524,0,1817,1816,1,0,0,0,
        1817,1818,1,0,0,0,1818,73,1,0,0,0,1819,1820,5,308,0,0,1820,1846,
        5,510,0,0,1821,1834,5,488,0,0,1822,1823,3,694,347,0,1823,1824,3,
        1056,528,0,1824,1835,1,0,0,0,1825,1826,5,17,0,0,1826,1827,3,696,
        348,0,1827,1832,5,340,0,0,1828,1829,5,169,0,0,1829,1833,3,1030,515,
        0,1830,1831,5,656,0,0,1831,1833,3,1006,503,0,1832,1828,1,0,0,0,1832,
        1830,1,0,0,0,1833,1835,1,0,0,0,1834,1822,1,0,0,0,1834,1825,1,0,0,
        0,1835,1847,1,0,0,0,1836,1837,5,488,0,0,1837,1838,5,289,0,0,1838,
        1839,3,696,348,0,1839,1844,5,340,0,0,1840,1841,5,169,0,0,1841,1845,
        3,1030,515,0,1842,1843,5,656,0,0,1843,1845,3,1006,503,0,1844,1840,
        1,0,0,0,1844,1842,1,0,0,0,1845,1847,1,0,0,0,1846,1821,1,0,0,0,1846,
        1836,1,0,0,0,1847,1848,1,0,0,0,1848,1849,5,784,0,0,1849,1850,5,620,
        0,0,1850,1854,3,1030,515,0,1851,1852,7,5,0,0,1852,1853,5,162,0,0,
        1853,1855,5,309,0,0,1854,1851,1,0,0,0,1854,1855,1,0,0,0,1855,75,
        1,0,0,0,1856,1952,5,308,0,0,1857,1863,3,78,39,0,1858,1860,5,17,0,
        0,1859,1861,5,554,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1863,
        1,0,0,0,1862,1857,1,0,0,0,1862,1858,1,0,0,0,1863,1864,1,0,0,0,1864,
        1865,5,488,0,0,1865,1953,5,6,0,0,1866,1872,3,82,41,0,1867,1869,5,
        17,0,0,1868,1870,5,554,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,
        1872,1,0,0,0,1871,1866,1,0,0,0,1871,1867,1,0,0,0,1872,1873,1,0,0,
        0,1873,1880,5,488,0,0,1874,1881,5,816,0,0,1875,1876,5,602,0,0,1876,
        1881,5,430,0,0,1877,1881,5,838,0,0,1878,1881,5,169,0,0,1879,1881,
        5,354,0,0,1880,1874,1,0,0,0,1880,1875,1,0,0,0,1880,1877,1,0,0,0,
        1880,1878,1,0,0,0,1880,1879,1,0,0,0,1881,1882,1,0,0,0,1882,1953,
        3,1056,528,0,1883,1889,3,86,43,0,1884,1886,5,17,0,0,1885,1887,5,
        554,0,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,1889,1,0,0,0,1888,
        1883,1,0,0,0,1888,1884,1,0,0,0,1889,1890,1,0,0,0,1890,1898,5,488,
        0,0,1891,1892,5,656,0,0,1892,1899,3,1006,503,0,1893,1894,5,17,0,
        0,1894,1895,5,657,0,0,1895,1896,5,340,0,0,1896,1897,5,169,0,0,1897,
        1899,3,1030,515,0,1898,1891,1,0,0,0,1898,1893,1,0,0,0,1899,1953,
        1,0,0,0,1900,1906,3,86,43,0,1901,1903,5,17,0,0,1902,1904,5,554,0,
        0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1906,1,0,0,0,1905,1900,
        1,0,0,0,1905,1901,1,0,0,0,1906,1907,1,0,0,0,1907,1908,5,488,0,0,
        1908,1909,5,289,0,0,1909,1910,5,657,0,0,1910,1911,5,340,0,0,1911,
        1912,5,169,0,0,1912,1953,3,1030,515,0,1913,1919,3,90,45,0,1914,1916,
        5,17,0,0,1915,1917,5,554,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,
        1917,1919,1,0,0,0,1918,1913,1,0,0,0,1918,1914,1,0,0,0,1919,1920,
        1,0,0,0,1920,1933,5,488,0,0,1921,1922,3,1008,504,0,1922,1923,3,1056,
        528,0,1923,1934,1,0,0,0,1924,1925,5,17,0,0,1925,1926,3,696,348,0,
        1926,1931,5,340,0,0,1927,1928,5,169,0,0,1928,1932,3,1030,515,0,1929,
        1930,5,656,0,0,1930,1932,3,1006,503,0,1931,1927,1,0,0,0,1931,1929,
        1,0,0,0,1932,1934,1,0,0,0,1933,1921,1,0,0,0,1933,1924,1,0,0,0,1934,
        1953,1,0,0,0,1935,1941,3,90,45,0,1936,1938,5,17,0,0,1937,1939,5,
        554,0,0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,
        1935,1,0,0,0,1940,1936,1,0,0,0,1941,1942,1,0,0,0,1942,1943,5,488,
        0,0,1943,1944,5,289,0,0,1944,1945,3,696,348,0,1945,1950,5,340,0,
        0,1946,1947,5,169,0,0,1947,1951,3,1030,515,0,1948,1949,5,656,0,0,
        1949,1951,3,1006,503,0,1950,1946,1,0,0,0,1950,1948,1,0,0,0,1951,
        1953,1,0,0,0,1952,1862,1,0,0,0,1952,1871,1,0,0,0,1952,1888,1,0,0,
        0,1952,1905,1,0,0,0,1952,1918,1,0,0,0,1952,1940,1,0,0,0,1953,1954,
        1,0,0,0,1954,1956,5,784,0,0,1955,1957,5,620,0,0,1956,1955,1,0,0,
        0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1962,3,1030,515,0,1959,
        1960,5,847,0,0,1960,1961,5,308,0,0,1961,1963,5,496,0,0,1962,1959,
        1,0,0,0,1962,1963,1,0,0,0,1963,77,1,0,0,0,1964,1969,3,80,40,0,1965,
        1966,5,937,0,0,1966,1968,3,80,40,0,1967,1965,1,0,0,0,1968,1971,1,
        0,0,0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,79,1,0,0,0,1971,1969,
        1,0,0,0,1972,1985,5,155,0,0,1973,1986,5,6,0,0,1974,1975,5,168,0,
        0,1975,1976,5,242,0,0,1976,1986,5,389,0,0,1977,1986,5,169,0,0,1978,
        1986,5,354,0,0,1979,1980,5,438,0,0,1980,1986,5,544,0,0,1981,1986,
        5,620,0,0,1982,1986,5,678,0,0,1983,1986,5,816,0,0,1984,1986,5,838,
        0,0,1985,1973,1,0,0,0,1985,1974,1,0,0,0,1985,1977,1,0,0,0,1985,1978,
        1,0,0,0,1985,1979,1,0,0,0,1985,1981,1,0,0,0,1985,1982,1,0,0,0,1985,
        1983,1,0,0,0,1985,1984,1,0,0,0,1986,2017,1,0,0,0,1987,1988,5,43,
        0,0,1988,1989,5,402,0,0,1989,2002,5,544,0,0,1990,1991,5,43,0,0,1991,
        1992,5,626,0,0,1992,1993,5,5,0,0,1993,2002,5,544,0,0,1994,1995,5,
        43,0,0,1995,1996,5,672,0,0,1996,2002,5,544,0,0,1997,1998,5,43,0,
        0,1998,2002,5,754,0,0,1999,2000,5,47,0,0,2000,2002,5,544,0,0,2001,
        1987,1,0,0,0,2001,1990,1,0,0,0,2001,1994,1,0,0,0,2001,1997,1,0,0,
        0,2001,1999,1,0,0,0,2002,2017,1,0,0,0,2003,2004,5,243,0,0,2004,2015,
        5,757,0,0,2005,2006,5,337,0,0,2006,2015,5,678,0,0,2007,2008,5,400,
        0,0,2008,2015,5,309,0,0,2009,2010,5,430,0,0,2010,2015,7,6,0,0,2011,
        2012,5,507,0,0,2012,2013,5,678,0,0,2013,2015,5,608,0,0,2014,2003,
        1,0,0,0,2014,2005,1,0,0,0,2014,2007,1,0,0,0,2014,2009,1,0,0,0,2014,
        2011,1,0,0,0,2015,2017,1,0,0,0,2016,1972,1,0,0,0,2016,2001,1,0,0,
        0,2016,2014,1,0,0,0,2017,81,1,0,0,0,2018,2023,3,84,42,0,2019,2020,
        5,937,0,0,2020,2022,3,84,42,0,2021,2019,1,0,0,0,2022,2025,1,0,0,
        0,2023,2021,1,0,0,0,2023,2024,1,0,0,0,2024,83,1,0,0,0,2025,2023,
        1,0,0,0,2026,2036,5,430,0,0,2027,2036,5,429,0,0,2028,2036,5,814,
        0,0,2029,2036,5,494,0,0,2030,2031,5,155,0,0,2031,2036,5,656,0,0,
        2032,2033,5,339,0,0,2033,2036,5,554,0,0,2034,2036,5,823,0,0,2035,
        2026,1,0,0,0,2035,2027,1,0,0,0,2035,2028,1,0,0,0,2035,2029,1,0,0,
        0,2035,2030,1,0,0,0,2035,2032,1,0,0,0,2035,2034,1,0,0,0,2036,85,
        1,0,0,0,2037,2042,3,88,44,0,2038,2039,5,937,0,0,2039,2041,3,88,44,
        0,2040,2038,1,0,0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,
        1,0,0,0,2043,87,1,0,0,0,2044,2042,1,0,0,0,2045,2078,5,429,0,0,2046,
        2078,5,430,0,0,2047,2078,5,814,0,0,2048,2072,5,155,0,0,2049,2073,
        5,747,0,0,2050,2051,5,249,0,0,2051,2073,5,747,0,0,2052,2073,5,834,
        0,0,2053,2054,5,409,0,0,2054,2073,5,834,0,0,2055,2056,5,402,0,0,
        2056,2073,5,544,0,0,2057,2058,5,626,0,0,2058,2059,5,5,0,0,2059,2073,
        5,544,0,0,2060,2061,5,672,0,0,2061,2073,5,544,0,0,2062,2073,5,754,
        0,0,2063,2073,5,670,0,0,2064,2073,5,287,0,0,2065,2073,5,555,0,0,
        2066,2067,5,270,0,0,2067,2073,5,281,0,0,2068,2073,5,706,0,0,2069,
        2073,5,539,0,0,2070,2073,5,728,0,0,2071,2073,5,757,0,0,2072,2049,
        1,0,0,0,2072,2050,1,0,0,0,2072,2052,1,0,0,0,2072,2053,1,0,0,0,2072,
        2055,1,0,0,0,2072,2057,1,0,0,0,2072,2060,1,0,0,0,2072,2062,1,0,0,
        0,2072,2063,1,0,0,0,2072,2064,1,0,0,0,2072,2065,1,0,0,0,2072,2066,
        1,0,0,0,2072,2068,1,0,0,0,2072,2069,1,0,0,0,2072,2070,1,0,0,0,2072,
        2071,1,0,0,0,2073,2078,1,0,0,0,2074,2075,5,10,0,0,2075,2076,5,660,
        0,0,2076,2078,5,495,0,0,2077,2045,1,0,0,0,2077,2046,1,0,0,0,2077,
        2047,1,0,0,0,2077,2048,1,0,0,0,2077,2074,1,0,0,0,2078,89,1,0,0,0,
        2079,2084,3,92,46,0,2080,2081,5,937,0,0,2081,2083,3,92,46,0,2082,
        2080,1,0,0,0,2083,2086,1,0,0,0,2084,2082,1,0,0,0,2084,2085,1,0,0,
        0,2085,91,1,0,0,0,2086,2084,1,0,0,0,2087,2103,5,669,0,0,2088,2103,
        5,351,0,0,2089,2103,5,811,0,0,2090,2103,5,193,0,0,2091,2103,5,799,
        0,0,2092,2103,5,579,0,0,2093,2103,5,814,0,0,2094,2097,5,574,0,0,
        2095,2096,5,937,0,0,2096,2098,5,850,0,0,2097,2095,1,0,0,0,2097,2098,
        1,0,0,0,2098,2103,1,0,0,0,2099,2103,5,430,0,0,2100,2103,5,494,0,
        0,2101,2103,5,43,0,0,2102,2087,1,0,0,0,2102,2088,1,0,0,0,2102,2089,
        1,0,0,0,2102,2090,1,0,0,0,2102,2091,1,0,0,0,2102,2092,1,0,0,0,2102,
        2093,1,0,0,0,2102,2094,1,0,0,0,2102,2099,1,0,0,0,2102,2100,1,0,0,
        0,2102,2101,1,0,0,0,2103,93,1,0,0,0,2104,2105,5,308,0,0,2105,2106,
        3,96,48,0,2106,2124,5,488,0,0,2107,2108,5,169,0,0,2108,2125,3,1030,
        515,0,2109,2110,5,656,0,0,2110,2125,3,1030,515,0,2111,2112,5,287,
        0,0,2112,2125,3,1030,515,0,2113,2114,5,747,0,0,2114,2121,3,1056,
        528,0,2115,2116,5,17,0,0,2116,2117,5,750,0,0,2117,2118,5,340,0,0,
        2118,2119,5,656,0,0,2119,2121,3,1006,503,0,2120,2113,1,0,0,0,2120,
        2115,1,0,0,0,2121,2125,1,0,0,0,2122,2123,5,834,0,0,2123,2125,3,1030,
        515,0,2124,2107,1,0,0,0,2124,2109,1,0,0,0,2124,2111,1,0,0,0,2124,
        2120,1,0,0,0,2124,2122,1,0,0,0,2125,2126,1,0,0,0,2126,2127,5,784,
        0,0,2127,2128,5,678,0,0,2128,2129,3,1030,515,0,2129,95,1,0,0,0,2130,
        2131,7,7,0,0,2131,97,1,0,0,0,2132,2133,5,308,0,0,2133,2134,5,620,
        0,0,2134,2135,3,100,50,0,2135,2140,5,784,0,0,2136,2137,5,620,0,0,
        2137,2141,3,100,50,0,2138,2139,5,816,0,0,2139,2141,3,1030,515,0,
        2140,2136,1,0,0,0,2140,2138,1,0,0,0,2141,99,1,0,0,0,2142,2145,3,
        102,51,0,2143,2145,3,1030,515,0,2144,2142,1,0,0,0,2144,2143,1,0,
        0,0,2145,101,1,0,0,0,2146,2147,7,8,0,0,2147,103,1,0,0,0,2148,2152,
        5,388,0,0,2149,2153,3,106,53,0,2150,2153,3,108,54,0,2151,2153,3,
        110,55,0,2152,2149,1,0,0,0,2152,2150,1,0,0,0,2152,2151,1,0,0,0,2153,
        2155,1,0,0,0,2154,2156,3,1048,524,0,2155,2154,1,0,0,0,2155,2156,
        1,0,0,0,2156,105,1,0,0,0,2157,2158,5,928,0,0,2158,2160,5,946,0,0,
        2159,2161,3,112,56,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,107,
        1,0,0,0,2162,2164,5,928,0,0,2163,2165,3,1006,503,0,2164,2163,1,0,
        0,0,2164,2165,1,0,0,0,2165,2166,1,0,0,0,2166,2167,5,943,0,0,2167,
        2169,3,1030,515,0,2168,2170,3,112,56,0,2169,2168,1,0,0,0,2169,2170,
        1,0,0,0,2170,109,1,0,0,0,2171,2172,5,928,0,0,2172,2174,3,1056,528,
        0,2173,2175,3,112,56,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,
        111,1,0,0,0,2176,2188,5,942,0,0,2177,2182,5,904,0,0,2178,2179,5,
        942,0,0,2179,2181,5,904,0,0,2180,2178,1,0,0,0,2181,2184,1,0,0,0,
        2182,2180,1,0,0,0,2182,2183,1,0,0,0,2183,2186,1,0,0,0,2184,2182,
        1,0,0,0,2185,2187,5,942,0,0,2186,2185,1,0,0,0,2186,2187,1,0,0,0,
        2187,2189,1,0,0,0,2188,2177,1,0,0,0,2188,2189,1,0,0,0,2189,113,1,
        0,0,0,2190,2191,5,562,0,0,2191,2195,5,910,0,0,2192,2196,3,108,54,
        0,2193,2196,3,106,53,0,2194,2196,3,110,55,0,2195,2192,1,0,0,0,2195,
        2193,1,0,0,0,2195,2194,1,0,0,0,2196,2200,1,0,0,0,2197,2198,5,513,
        0,0,2198,2199,5,921,0,0,2199,2201,3,1060,530,0,2200,2197,1,0,0,0,
        2200,2201,1,0,0,0,2201,2205,1,0,0,0,2202,2203,5,56,0,0,2203,2204,
        5,921,0,0,2204,2206,3,556,278,0,2205,2202,1,0,0,0,2205,2206,1,0,
        0,0,2206,2210,1,0,0,0,2207,2208,5,700,0,0,2208,2209,5,921,0,0,2209,
        2211,7,9,0,0,2210,2207,1,0,0,0,2210,2211,1,0,0,0,2211,2215,1,0,0,
        0,2212,2213,5,508,0,0,2213,2214,5,921,0,0,2214,2216,3,556,278,0,
        2215,2212,1,0,0,0,2215,2216,1,0,0,0,2216,115,1,0,0,0,2217,2221,5,
        588,0,0,2218,2222,3,108,54,0,2219,2222,3,106,53,0,2220,2222,3,110,
        55,0,2221,2218,1,0,0,0,2221,2219,1,0,0,0,2221,2220,1,0,0,0,2222,
        2224,1,0,0,0,2223,2225,3,1048,524,0,2224,2223,1,0,0,0,2224,2225,
        1,0,0,0,2225,117,1,0,0,0,2226,2230,5,617,0,0,2227,2228,5,308,0,0,
        2228,2229,5,496,0,0,2229,2231,5,278,0,0,2230,2227,1,0,0,0,2230,2231,
        1,0,0,0,2231,2322,1,0,0,0,2232,2238,3,80,40,0,2233,2235,5,17,0,0,
        2234,2236,5,554,0,0,2235,2234,1,0,0,0,2235,2236,1,0,0,0,2236,2238,
        1,0,0,0,2237,2232,1,0,0,0,2237,2233,1,0,0,0,2238,2239,1,0,0,0,2239,
        2240,5,488,0,0,2240,2323,5,6,0,0,2241,2247,3,82,41,0,2242,2244,5,
        17,0,0,2243,2245,5,554,0,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,
        2247,1,0,0,0,2246,2241,1,0,0,0,2246,2242,1,0,0,0,2247,2248,1,0,0,
        0,2248,2254,5,488,0,0,2249,2250,5,602,0,0,2250,2255,5,430,0,0,2251,
        2255,5,838,0,0,2252,2255,5,169,0,0,2253,2255,5,354,0,0,2254,2249,
        1,0,0,0,2254,2251,1,0,0,0,2254,2252,1,0,0,0,2254,2253,1,0,0,0,2255,
        2256,1,0,0,0,2256,2323,3,1056,528,0,2257,2263,3,86,43,0,2258,2260,
        5,17,0,0,2259,2261,5,554,0,0,2260,2259,1,0,0,0,2260,2261,1,0,0,0,
        2261,2263,1,0,0,0,2262,2257,1,0,0,0,2262,2258,1,0,0,0,2263,2264,
        1,0,0,0,2264,2272,5,488,0,0,2265,2266,5,656,0,0,2266,2273,3,1006,
        503,0,2267,2268,5,17,0,0,2268,2269,5,657,0,0,2269,2270,5,340,0,0,
        2270,2271,5,169,0,0,2271,2273,3,1030,515,0,2272,2265,1,0,0,0,2272,
        2267,1,0,0,0,2273,2323,1,0,0,0,2274,2280,3,86,43,0,2275,2277,5,17,
        0,0,2276,2278,5,554,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,
        2280,1,0,0,0,2279,2274,1,0,0,0,2279,2275,1,0,0,0,2280,2281,1,0,0,
        0,2281,2282,5,488,0,0,2282,2283,5,289,0,0,2283,2284,5,657,0,0,2284,
        2285,5,340,0,0,2285,2323,5,169,0,0,2286,2292,3,90,45,0,2287,2289,
        5,17,0,0,2288,2290,5,554,0,0,2289,2288,1,0,0,0,2289,2290,1,0,0,0,
        2290,2292,1,0,0,0,2291,2286,1,0,0,0,2291,2287,1,0,0,0,2292,2293,
        1,0,0,0,2293,2303,5,488,0,0,2294,2295,3,1008,504,0,2295,2296,3,1056,
        528,0,2296,2304,1,0,0,0,2297,2298,5,17,0,0,2298,2299,3,696,348,0,
        2299,2300,5,340,0,0,2300,2301,5,656,0,0,2301,2302,3,1006,503,0,2302,
        2304,1,0,0,0,2303,2294,1,0,0,0,2303,2297,1,0,0,0,2304,2323,1,0,0,
        0,2305,2311,3,90,45,0,2306,2308,5,17,0,0,2307,2309,5,554,0,0,2308,
        2307,1,0,0,0,2308,2309,1,0,0,0,2309,2311,1,0,0,0,2310,2305,1,0,0,
        0,2310,2306,1,0,0,0,2311,2312,1,0,0,0,2312,2313,5,488,0,0,2313,2314,
        5,289,0,0,2314,2315,3,696,348,0,2315,2320,5,340,0,0,2316,2317,5,
        169,0,0,2317,2321,3,1030,515,0,2318,2319,5,656,0,0,2319,2321,3,1006,
        503,0,2320,2316,1,0,0,0,2320,2318,1,0,0,0,2321,2323,1,0,0,0,2322,
        2237,1,0,0,0,2322,2246,1,0,0,0,2322,2262,1,0,0,0,2322,2279,1,0,0,
        0,2322,2291,1,0,0,0,2322,2310,1,0,0,0,2323,2324,1,0,0,0,2324,2326,
        5,285,0,0,2325,2327,5,620,0,0,2326,2325,1,0,0,0,2326,2327,1,0,0,
        0,2327,2328,1,0,0,0,2328,2330,3,1030,515,0,2329,2331,3,768,384,0,
        2330,2329,1,0,0,0,2330,2331,1,0,0,0,2331,119,1,0,0,0,2332,2333,5,
        617,0,0,2333,2334,3,96,48,0,2334,2357,5,488,0,0,2335,2336,5,169,
        0,0,2336,2358,3,1030,515,0,2337,2338,5,656,0,0,2338,2358,3,1006,
        503,0,2339,2340,5,747,0,0,2340,2347,3,1056,528,0,2341,2342,5,17,
        0,0,2342,2343,5,750,0,0,2343,2344,5,340,0,0,2344,2345,5,656,0,0,
        2345,2347,3,1006,503,0,2346,2339,1,0,0,0,2346,2341,1,0,0,0,2347,
        2358,1,0,0,0,2348,2349,5,834,0,0,2349,2356,3,1056,528,0,2350,2351,
        5,17,0,0,2351,2352,5,835,0,0,2352,2353,5,340,0,0,2353,2354,5,656,
        0,0,2354,2356,3,1006,503,0,2355,2348,1,0,0,0,2355,2350,1,0,0,0,2356,
        2358,1,0,0,0,2357,2335,1,0,0,0,2357,2337,1,0,0,0,2357,2346,1,0,0,
        0,2357,2355,1,0,0,0,2358,2359,1,0,0,0,2359,2360,5,285,0,0,2360,2361,
        5,678,0,0,2361,2362,3,1030,515,0,2362,121,1,0,0,0,2363,2364,5,617,
        0,0,2364,2365,5,620,0,0,2365,2366,3,100,50,0,2366,2371,5,285,0,0,
        2367,2368,5,620,0,0,2368,2372,3,100,50,0,2369,2370,5,816,0,0,2370,
        2372,3,1030,515,0,2371,2367,1,0,0,0,2371,2369,1,0,0,0,2372,123,1,
        0,0,0,2373,2375,5,622,0,0,2374,2376,5,849,0,0,2375,2374,1,0,0,0,
        2375,2376,1,0,0,0,2376,125,1,0,0,0,2377,2378,5,676,0,0,2378,2379,
        3,1030,515,0,2379,2380,5,921,0,0,2380,2381,3,1066,533,0,2381,2406,
        1,0,0,0,2382,2383,5,676,0,0,2383,2384,5,931,0,0,2384,2389,3,1030,
        515,0,2385,2386,5,937,0,0,2386,2388,3,1030,515,0,2387,2385,1,0,0,
        0,2388,2391,1,0,0,0,2389,2387,1,0,0,0,2389,2390,1,0,0,0,2390,2392,
        1,0,0,0,2391,2389,1,0,0,0,2392,2393,5,932,0,0,2393,2394,5,921,0,
        0,2394,2395,5,931,0,0,2395,2400,3,1066,533,0,2396,2397,5,937,0,0,
        2397,2399,3,1066,533,0,2398,2396,1,0,0,0,2399,2402,1,0,0,0,2400,
        2398,1,0,0,0,2400,2401,1,0,0,0,2401,2403,1,0,0,0,2402,2400,1,0,0,
        0,2403,2404,5,932,0,0,2404,2406,1,0,0,0,2405,2377,1,0,0,0,2405,2382,
        1,0,0,0,2406,127,1,0,0,0,2407,2408,5,799,0,0,2408,2409,5,409,0,0,
        2409,2410,5,834,0,0,2410,2411,3,1056,528,0,2411,129,1,0,0,0,2412,
        2414,5,799,0,0,2413,2415,5,747,0,0,2414,2413,1,0,0,0,2414,2415,1,
        0,0,0,2415,2417,1,0,0,0,2416,2418,3,800,400,0,2417,2416,1,0,0,0,
        2417,2418,1,0,0,0,2418,2419,1,0,0,0,2419,2420,3,1056,528,0,2420,
        131,1,0,0,0,2421,2422,5,809,0,0,2422,2436,3,1030,515,0,2423,2424,
        5,809,0,0,2424,2425,5,931,0,0,2425,2430,3,1030,515,0,2426,2427,5,
        937,0,0,2427,2429,3,1030,515,0,2428,2426,1,0,0,0,2429,2432,1,0,0,
        0,2430,2428,1,0,0,0,2430,2431,1,0,0,0,2431,2433,1,0,0,0,2432,2430,
        1,0,0,0,2433,2434,5,932,0,0,2434,2436,1,0,0,0,2435,2421,1,0,0,0,
        2435,2423,1,0,0,0,2436,133,1,0,0,0,2437,2481,3,146,73,0,2438,2481,
        3,150,75,0,2439,2481,3,158,79,0,2440,2481,3,162,81,0,2441,2481,3,
        164,82,0,2442,2481,3,170,85,0,2443,2481,3,172,86,0,2444,2481,3,176,
        88,0,2445,2481,3,188,94,0,2446,2481,3,190,95,0,2447,2481,3,192,96,
        0,2448,2481,3,198,99,0,2449,2481,3,204,102,0,2450,2481,3,206,103,
        0,2451,2481,3,208,104,0,2452,2481,3,210,105,0,2453,2481,3,272,136,
        0,2454,2481,3,212,106,0,2455,2481,3,214,107,0,2456,2481,3,216,108,
        0,2457,2481,3,226,113,0,2458,2481,3,228,114,0,2459,2481,3,230,115,
        0,2460,2481,3,232,116,0,2461,2481,3,238,119,0,2462,2481,3,254,127,
        0,2463,2481,3,258,129,0,2464,2481,3,262,131,0,2465,2481,3,264,132,
        0,2466,2481,3,236,118,0,2467,2481,3,268,134,0,2468,2481,3,270,135,
        0,2469,2481,3,274,137,0,2470,2481,3,572,286,0,2471,2481,3,276,138,
        0,2472,2481,3,278,139,0,2473,2481,3,280,140,0,2474,2481,3,318,159,
        0,2475,2481,3,330,165,0,2476,2481,3,332,166,0,2477,2481,3,334,167,
        0,2478,2481,3,336,168,0,2479,2481,3,340,170,0,2480,2437,1,0,0,0,
        2480,2438,1,0,0,0,2480,2439,1,0,0,0,2480,2440,1,0,0,0,2480,2441,
        1,0,0,0,2480,2442,1,0,0,0,2480,2443,1,0,0,0,2480,2444,1,0,0,0,2480,
        2445,1,0,0,0,2480,2446,1,0,0,0,2480,2447,1,0,0,0,2480,2448,1,0,0,
        0,2480,2449,1,0,0,0,2480,2450,1,0,0,0,2480,2451,1,0,0,0,2480,2452,
        1,0,0,0,2480,2453,1,0,0,0,2480,2454,1,0,0,0,2480,2455,1,0,0,0,2480,
        2456,1,0,0,0,2480,2457,1,0,0,0,2480,2458,1,0,0,0,2480,2459,1,0,0,
        0,2480,2460,1,0,0,0,2480,2461,1,0,0,0,2480,2462,1,0,0,0,2480,2463,
        1,0,0,0,2480,2464,1,0,0,0,2480,2465,1,0,0,0,2480,2466,1,0,0,0,2480,
        2467,1,0,0,0,2480,2468,1,0,0,0,2480,2469,1,0,0,0,2480,2470,1,0,0,
        0,2480,2471,1,0,0,0,2480,2472,1,0,0,0,2480,2473,1,0,0,0,2480,2474,
        1,0,0,0,2480,2475,1,0,0,0,2480,2476,1,0,0,0,2480,2477,1,0,0,0,2480,
        2478,1,0,0,0,2480,2479,1,0,0,0,2481,135,1,0,0,0,2482,2483,5,26,0,
        0,2483,2484,5,921,0,0,2484,2525,3,556,278,0,2485,2486,5,119,0,0,
        2486,2487,5,921,0,0,2487,2525,3,1060,530,0,2488,2489,5,229,0,0,2489,
        2490,5,921,0,0,2490,2525,3,556,278,0,2491,2492,5,251,0,0,2492,2493,
        5,921,0,0,2493,2525,3,556,278,0,2494,2495,5,348,0,0,2495,2496,5,
        921,0,0,2496,2525,3,1060,530,0,2497,2498,5,439,0,0,2498,2499,5,921,
        0,0,2499,2525,3,1024,512,0,2500,2501,5,537,0,0,2501,2502,5,921,0,
        0,2502,2525,3,556,278,0,2503,2504,5,548,0,0,2504,2505,5,921,0,0,
        2505,2525,3,556,278,0,2506,2507,5,549,0,0,2507,2508,5,921,0,0,2508,
        2525,3,556,278,0,2509,2510,5,599,0,0,2510,2511,5,921,0,0,2511,2525,
        3,556,278,0,2512,2513,5,600,0,0,2513,2514,5,921,0,0,2514,2525,3,
        556,278,0,2515,2516,5,650,0,0,2516,2517,5,921,0,0,2517,2525,3,1076,
        538,0,2518,2519,5,674,0,0,2519,2520,5,921,0,0,2520,2525,3,1024,512,
        0,2521,2522,5,705,0,0,2522,2523,5,921,0,0,2523,2525,3,556,278,0,
        2524,2482,1,0,0,0,2524,2485,1,0,0,0,2524,2488,1,0,0,0,2524,2491,
        1,0,0,0,2524,2494,1,0,0,0,2524,2497,1,0,0,0,2524,2500,1,0,0,0,2524,
        2503,1,0,0,0,2524,2506,1,0,0,0,2524,2509,1,0,0,0,2524,2512,1,0,0,
        0,2524,2515,1,0,0,0,2524,2518,1,0,0,0,2524,2521,1,0,0,0,2525,137,
        1,0,0,0,2526,2527,5,173,0,0,2527,2528,5,921,0,0,2528,2552,3,1060,
        530,0,2529,2530,5,413,0,0,2530,2531,5,921,0,0,2531,2552,3,1060,530,
        0,2532,2552,3,140,70,0,2533,2534,5,412,0,0,2534,2535,5,921,0,0,2535,
        2552,3,1060,530,0,2536,2537,5,439,0,0,2537,2538,5,921,0,0,2538,2552,
        3,1024,512,0,2539,2540,5,541,0,0,2540,2541,5,921,0,0,2541,2552,3,
        556,278,0,2542,2543,5,674,0,0,2543,2544,5,921,0,0,2544,2552,3,1024,
        512,0,2545,2546,5,717,0,0,2546,2547,5,921,0,0,2547,2552,3,1060,530,
        0,2548,2549,5,718,0,0,2549,2550,5,921,0,0,2550,2552,3,1060,530,0,
        2551,2526,1,0,0,0,2551,2529,1,0,0,0,2551,2532,1,0,0,0,2551,2533,
        1,0,0,0,2551,2536,1,0,0,0,2551,2539,1,0,0,0,2551,2542,1,0,0,0,2551,
        2545,1,0,0,0,2551,2548,1,0,0,0,2552,139,1,0,0,0,2553,2554,5,183,
        0,0,2554,2555,5,921,0,0,2555,2556,3,1024,512,0,2556,141,1,0,0,0,
        2557,2558,5,520,0,0,2558,2559,5,921,0,0,2559,2610,3,1024,512,0,2560,
        2561,5,394,0,0,2561,2562,5,921,0,0,2562,2610,3,1024,512,0,2563,2564,
        5,204,0,0,2564,2565,5,921,0,0,2565,2610,3,1024,512,0,2566,2567,5,
        275,0,0,2567,2568,5,921,0,0,2568,2610,3,1024,512,0,2569,2570,5,420,
        0,0,2570,2571,5,921,0,0,2571,2610,3,1024,512,0,2572,2573,5,377,0,
        0,2573,2574,5,921,0,0,2574,2610,3,1024,512,0,2575,2576,5,213,0,0,
        2576,2577,5,921,0,0,2577,2610,3,1024,512,0,2578,2579,5,435,0,0,2579,
        2580,5,921,0,0,2580,2610,3,556,278,0,2581,2582,5,201,0,0,2582,2583,
        5,921,0,0,2583,2610,3,556,278,0,2584,2585,5,181,0,0,2585,2586,5,
        921,0,0,2586,2610,3,1060,530,0,2587,2588,5,423,0,0,2588,2589,5,921,
        0,0,2589,2610,3,1060,530,0,2590,2591,5,186,0,0,2591,2592,5,921,0,
        0,2592,2610,3,1024,512,0,2593,2594,5,184,0,0,2594,2595,5,921,0,0,
        2595,2610,3,1024,512,0,2596,2597,5,185,0,0,2597,2598,5,921,0,0,2598,
        2610,3,1024,512,0,2599,2600,5,422,0,0,2600,2601,5,921,0,0,2601,2610,
        3,1060,530,0,2602,2603,5,630,0,0,2603,2604,5,921,0,0,2604,2610,3,
        1024,512,0,2605,2606,5,631,0,0,2606,2607,5,921,0,0,2607,2610,3,1024,
        512,0,2608,2610,3,794,397,0,2609,2557,1,0,0,0,2609,2560,1,0,0,0,
        2609,2563,1,0,0,0,2609,2566,1,0,0,0,2609,2569,1,0,0,0,2609,2572,
        1,0,0,0,2609,2575,1,0,0,0,2609,2578,1,0,0,0,2609,2581,1,0,0,0,2609,
        2584,1,0,0,0,2609,2587,1,0,0,0,2609,2590,1,0,0,0,2609,2593,1,0,0,
        0,2609,2596,1,0,0,0,2609,2599,1,0,0,0,2609,2602,1,0,0,0,2609,2605,
        1,0,0,0,2609,2608,1,0,0,0,2610,143,1,0,0,0,2611,2612,5,3,0,0,2612,
        2613,5,921,0,0,2613,2705,3,556,278,0,2614,2615,5,53,0,0,2615,2616,
        5,921,0,0,2616,2705,3,556,278,0,2617,2618,5,89,0,0,2618,2619,5,921,
        0,0,2619,2705,3,1024,512,0,2620,2621,5,90,0,0,2621,2622,5,921,0,
        0,2622,2705,3,1024,512,0,2623,2624,5,177,0,0,2624,2625,5,921,0,0,
        2625,2705,3,1024,512,0,2626,2627,5,178,0,0,2627,2628,5,921,0,0,2628,
        2705,3,1024,512,0,2629,2630,5,235,0,0,2630,2631,5,921,0,0,2631,2705,
        3,556,278,0,2632,2633,5,236,0,0,2633,2634,5,921,0,0,2634,2705,3,
        556,278,0,2635,2636,5,368,0,0,2636,2637,5,921,0,0,2637,2705,3,1060,
        530,0,2638,2639,5,393,0,0,2639,2640,5,921,0,0,2640,2705,3,1060,530,
        0,2641,2642,5,569,0,0,2642,2643,5,921,0,0,2643,2705,3,1024,512,0,
        2644,2645,5,628,0,0,2645,2646,5,921,0,0,2646,2705,3,1060,530,0,2647,
        2648,5,684,0,0,2648,2649,5,921,0,0,2649,2705,3,1024,512,0,2650,2651,
        5,718,0,0,2651,2652,5,921,0,0,2652,2705,3,1060,530,0,2653,2654,5,
        731,0,0,2654,2655,5,921,0,0,2655,2705,3,556,278,0,2656,2657,5,767,
        0,0,2657,2658,5,921,0,0,2658,2705,3,556,278,0,2659,2660,5,769,0,
        0,2660,2661,5,921,0,0,2661,2705,3,1024,512,0,2662,2663,5,771,0,0,
        2663,2664,5,921,0,0,2664,2705,3,1024,512,0,2665,2666,5,773,0,0,2666,
        2667,5,921,0,0,2667,2705,3,1024,512,0,2668,2669,5,774,0,0,2669,2670,
        5,921,0,0,2670,2705,3,1024,512,0,2671,2672,5,775,0,0,2672,2673,5,
        921,0,0,2673,2705,3,1024,512,0,2674,2675,5,777,0,0,2675,2676,5,921,
        0,0,2676,2705,3,1024,512,0,2677,2678,5,780,0,0,2678,2679,5,921,0,
        0,2679,2705,3,1024,512,0,2680,2681,5,782,0,0,2681,2682,5,921,0,0,
        2682,2705,3,1024,512,0,2683,2684,5,783,0,0,2684,2685,5,921,0,0,2685,
        2705,3,1024,512,0,2686,2687,5,792,0,0,2687,2688,5,921,0,0,2688,2705,
        3,1024,512,0,2689,2690,5,802,0,0,2690,2691,5,921,0,0,2691,2705,3,
        1060,530,0,2692,2693,5,810,0,0,2693,2694,5,921,0,0,2694,2705,3,1024,
        512,0,2695,2696,5,824,0,0,2696,2697,5,921,0,0,2697,2705,3,556,278,
        0,2698,2699,5,843,0,0,2699,2700,5,921,0,0,2700,2705,3,1060,530,0,
        2701,2702,5,844,0,0,2702,2703,5,921,0,0,2703,2705,3,1060,530,0,2704,
        2611,1,0,0,0,2704,2614,1,0,0,0,2704,2617,1,0,0,0,2704,2620,1,0,0,
        0,2704,2623,1,0,0,0,2704,2626,1,0,0,0,2704,2629,1,0,0,0,2704,2632,
        1,0,0,0,2704,2635,1,0,0,0,2704,2638,1,0,0,0,2704,2641,1,0,0,0,2704,
        2644,1,0,0,0,2704,2647,1,0,0,0,2704,2650,1,0,0,0,2704,2653,1,0,0,
        0,2704,2656,1,0,0,0,2704,2659,1,0,0,0,2704,2662,1,0,0,0,2704,2665,
        1,0,0,0,2704,2668,1,0,0,0,2704,2671,1,0,0,0,2704,2674,1,0,0,0,2704,
        2677,1,0,0,0,2704,2680,1,0,0,0,2704,2683,1,0,0,0,2704,2686,1,0,0,
        0,2704,2689,1,0,0,0,2704,2692,1,0,0,0,2704,2695,1,0,0,0,2704,2698,
        1,0,0,0,2704,2701,1,0,0,0,2705,145,1,0,0,0,2706,2707,5,28,0,0,2707,
        2708,5,6,0,0,2708,2709,3,352,176,0,2709,147,1,0,0,0,2710,2711,5,
        217,0,0,2711,2712,5,921,0,0,2712,2713,3,556,278,0,2713,149,1,0,0,
        0,2714,2715,5,28,0,0,2715,2717,5,15,0,0,2716,2718,3,800,400,0,2717,
        2716,1,0,0,0,2717,2718,1,0,0,0,2718,2719,1,0,0,0,2719,2743,3,1030,
        515,0,2720,2744,3,152,76,0,2721,2723,5,676,0,0,2722,2724,3,154,77,
        0,2723,2722,1,0,0,0,2724,2725,1,0,0,0,2725,2723,1,0,0,0,2725,2726,
        1,0,0,0,2726,2744,1,0,0,0,2727,2729,5,809,0,0,2728,2730,3,156,78,
        0,2729,2728,1,0,0,0,2730,2731,1,0,0,0,2731,2729,1,0,0,0,2731,2732,
        1,0,0,0,2732,2744,1,0,0,0,2733,2734,5,429,0,0,2734,2735,5,143,0,
        0,2735,2736,5,245,0,0,2736,2737,5,931,0,0,2737,2738,3,368,184,0,
        2738,2739,5,932,0,0,2739,2744,1,0,0,0,2740,2741,5,429,0,0,2741,2742,
        5,9,0,0,2742,2744,3,370,185,0,2743,2720,1,0,0,0,2743,2721,1,0,0,
        0,2743,2727,1,0,0,0,2743,2733,1,0,0,0,2743,2740,1,0,0,0,2744,151,
        1,0,0,0,2745,2746,7,10,0,0,2746,153,1,0,0,0,2747,2748,5,838,0,0,
        2748,2749,5,921,0,0,2749,2755,3,1030,515,0,2750,2751,5,655,0,0,2751,
        2752,5,921,0,0,2752,2755,3,1024,512,0,2753,2755,3,794,397,0,2754,
        2747,1,0,0,0,2754,2750,1,0,0,0,2754,2753,1,0,0,0,2755,155,1,0,0,
        0,2756,2757,7,11,0,0,2757,157,1,0,0,0,2758,2760,5,28,0,0,2759,2761,
        5,32,0,0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,2761,2762,1,0,0,0,2762,
        2764,5,354,0,0,2763,2765,3,800,400,0,2764,2763,1,0,0,0,2764,2765,
        1,0,0,0,2765,2766,1,0,0,0,2766,2767,3,1030,515,0,2767,2771,5,676,
        0,0,2768,2769,5,35,0,0,2769,2770,5,921,0,0,2770,2772,3,1024,512,
        0,2771,2768,1,0,0,0,2771,2772,1,0,0,0,2772,2776,1,0,0,0,2773,2774,
        5,74,0,0,2774,2775,5,921,0,0,2775,2777,3,1024,512,0,2776,2773,1,
        0,0,0,2776,2777,1,0,0,0,2777,2781,1,0,0,0,2778,2779,5,38,0,0,2779,
        2780,5,921,0,0,2780,2782,3,1024,512,0,2781,2778,1,0,0,0,2781,2782,
        1,0,0,0,2782,2784,1,0,0,0,2783,2785,3,148,74,0,2784,2783,1,0,0,0,
        2784,2785,1,0,0,0,2785,2792,1,0,0,0,2786,2787,5,33,0,0,2787,2788,
        5,921,0,0,2788,2789,5,931,0,0,2789,2790,3,1024,512,0,2790,2791,5,
        932,0,0,2791,2793,1,0,0,0,2792,2786,1,0,0,0,2792,2793,1,0,0,0,2793,
        2800,1,0,0,0,2794,2795,5,36,0,0,2795,2796,5,921,0,0,2796,2797,5,
        931,0,0,2797,2798,3,1024,512,0,2798,2799,5,932,0,0,2799,2801,1,0,
        0,0,2800,2794,1,0,0,0,2800,2801,1,0,0,0,2801,2803,1,0,0,0,2802,2804,
        3,794,397,0,2803,2802,1,0,0,0,2803,2804,1,0,0,0,2804,2840,1,0,0,
        0,2805,2807,5,28,0,0,2806,2808,5,32,0,0,2807,2806,1,0,0,0,2807,2808,
        1,0,0,0,2808,2809,1,0,0,0,2809,2810,5,354,0,0,2810,2811,3,1030,515,
        0,2811,2812,3,354,177,0,2812,2840,1,0,0,0,2813,2815,5,28,0,0,2814,
        2816,5,32,0,0,2815,2814,1,0,0,0,2815,2816,1,0,0,0,2816,2817,1,0,
        0,0,2817,2818,5,354,0,0,2818,2819,3,1030,515,0,2819,2820,3,358,179,
        0,2820,2840,1,0,0,0,2821,2823,5,28,0,0,2822,2824,5,32,0,0,2823,2822,
        1,0,0,0,2823,2824,1,0,0,0,2824,2825,1,0,0,0,2825,2827,5,354,0,0,
        2826,2828,3,800,400,0,2827,2826,1,0,0,0,2827,2828,1,0,0,0,2828,2829,
        1,0,0,0,2829,2830,3,1030,515,0,2830,2831,5,809,0,0,2831,2836,3,160,
        80,0,2832,2833,5,937,0,0,2833,2835,3,160,80,0,2834,2832,1,0,0,0,
        2835,2838,1,0,0,0,2836,2834,1,0,0,0,2836,2837,1,0,0,0,2837,2840,
        1,0,0,0,2838,2836,1,0,0,0,2839,2758,1,0,0,0,2839,2805,1,0,0,0,2839,
        2813,1,0,0,0,2839,2821,1,0,0,0,2840,159,1,0,0,0,2841,2842,7,12,0,
        0,2842,161,1,0,0,0,2843,2844,5,28,0,0,2844,2845,5,146,0,0,2845,2846,
        3,342,171,0,2846,163,1,0,0,0,2847,2848,5,28,0,0,2848,2850,5,169,
        0,0,2849,2851,3,800,400,0,2850,2849,1,0,0,0,2850,2851,1,0,0,0,2851,
        2852,1,0,0,0,2852,2853,3,1030,515,0,2853,2854,5,589,0,0,2854,2855,
        5,784,0,0,2855,2856,3,1030,515,0,2856,2968,1,0,0,0,2857,2858,5,28,
        0,0,2858,2860,5,169,0,0,2859,2861,3,800,400,0,2860,2859,1,0,0,0,
        2860,2861,1,0,0,0,2861,2862,1,0,0,0,2862,2863,3,1030,515,0,2863,
        2864,5,742,0,0,2864,2865,5,847,0,0,2865,2866,3,1030,515,0,2866,2968,
        1,0,0,0,2867,2868,5,28,0,0,2868,2870,5,169,0,0,2869,2871,3,800,400,
        0,2870,2869,1,0,0,0,2870,2871,1,0,0,0,2871,2872,1,0,0,0,2872,2873,
        3,1030,515,0,2873,2877,5,676,0,0,2874,2875,5,173,0,0,2875,2876,5,
        921,0,0,2876,2878,3,1060,530,0,2877,2874,1,0,0,0,2877,2878,1,0,0,
        0,2878,2882,1,0,0,0,2879,2880,5,413,0,0,2880,2881,5,921,0,0,2881,
        2883,3,1060,530,0,2882,2879,1,0,0,0,2882,2883,1,0,0,0,2883,2885,
        1,0,0,0,2884,2886,3,140,70,0,2885,2884,1,0,0,0,2885,2886,1,0,0,0,
        2886,2888,1,0,0,0,2887,2889,3,794,397,0,2888,2887,1,0,0,0,2888,2889,
        1,0,0,0,2889,2968,1,0,0,0,2890,2891,5,28,0,0,2891,2892,5,169,0,0,
        2892,2893,3,1030,515,0,2893,2894,3,354,177,0,2894,2968,1,0,0,0,2895,
        2896,5,28,0,0,2896,2897,5,169,0,0,2897,2898,3,1030,515,0,2898,2899,
        3,358,179,0,2899,2968,1,0,0,0,2900,2901,5,28,0,0,2901,2903,5,169,
        0,0,2902,2904,3,800,400,0,2903,2902,1,0,0,0,2903,2904,1,0,0,0,2904,
        2905,1,0,0,0,2905,2906,3,1030,515,0,2906,2907,5,809,0,0,2907,2912,
        3,166,83,0,2908,2909,5,937,0,0,2909,2911,3,166,83,0,2910,2908,1,
        0,0,0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,2913,1,0,0,0,2913,
        2968,1,0,0,0,2914,2912,1,0,0,0,2915,2916,5,28,0,0,2916,2917,5,169,
        0,0,2917,2918,3,1030,515,0,2918,2919,5,216,0,0,2919,2920,5,594,0,
        0,2920,2921,5,784,0,0,2921,2922,5,8,0,0,2922,2926,3,168,84,0,2923,
        2924,5,330,0,0,2924,2925,5,211,0,0,2925,2927,5,116,0,0,2926,2923,
        1,0,0,0,2926,2927,1,0,0,0,2927,2968,1,0,0,0,2928,2929,5,28,0,0,2929,
        2930,5,169,0,0,2930,2931,3,1030,515,0,2931,2932,5,200,0,0,2932,2936,
        5,594,0,0,2933,2934,5,784,0,0,2934,2935,5,8,0,0,2935,2937,3,168,
        84,0,2936,2933,1,0,0,0,2936,2937,1,0,0,0,2937,2968,1,0,0,0,2938,
        2939,5,28,0,0,2939,2940,5,169,0,0,2940,2941,3,1030,515,0,2941,2942,
        5,581,0,0,2942,2968,1,0,0,0,2943,2944,5,28,0,0,2944,2945,5,169,0,
        0,2945,2946,3,1030,515,0,2946,2947,5,216,0,0,2947,2948,5,265,0,0,
        2948,2949,5,784,0,0,2949,2950,5,8,0,0,2950,2951,3,168,84,0,2951,
        2968,1,0,0,0,2952,2953,5,28,0,0,2953,2954,5,169,0,0,2954,2955,3,
        1030,515,0,2955,2956,5,200,0,0,2956,2960,5,265,0,0,2957,2958,5,784,
        0,0,2958,2959,5,8,0,0,2959,2961,3,168,84,0,2960,2957,1,0,0,0,2960,
        2961,1,0,0,0,2961,2968,1,0,0,0,2962,2963,5,28,0,0,2963,2964,5,169,
        0,0,2964,2965,3,1030,515,0,2965,2966,5,551,0,0,2966,2968,1,0,0,0,
        2967,2847,1,0,0,0,2967,2857,1,0,0,0,2967,2867,1,0,0,0,2967,2890,
        1,0,0,0,2967,2895,1,0,0,0,2967,2900,1,0,0,0,2967,2915,1,0,0,0,2967,
        2928,1,0,0,0,2967,2938,1,0,0,0,2967,2943,1,0,0,0,2967,2952,1,0,0,
        0,2967,2962,1,0,0,0,2968,165,1,0,0,0,2969,2970,7,13,0,0,2970,167,
        1,0,0,0,2971,2976,3,1004,502,0,2972,2973,5,937,0,0,2973,2975,3,1004,
        502,0,2974,2972,1,0,0,0,2975,2978,1,0,0,0,2976,2974,1,0,0,0,2976,
        2977,1,0,0,0,2977,169,1,0,0,0,2978,2976,1,0,0,0,2979,2980,5,28,0,
        0,2980,2981,5,171,0,0,2981,2982,3,1056,528,0,2982,2983,5,10,0,0,
        2983,2984,5,832,0,0,2984,2985,3,1024,512,0,2985,2986,5,285,0,0,2986,
        2990,3,1122,561,0,2987,2988,5,518,0,0,2988,2989,5,99,0,0,2989,2991,
        3,174,87,0,2990,2987,1,0,0,0,2990,2991,1,0,0,0,2991,2993,1,0,0,0,
        2992,2994,3,794,397,0,2993,2992,1,0,0,0,2993,2994,1,0,0,0,2994,2998,
        1,0,0,0,2995,2996,5,419,0,0,2996,2997,5,921,0,0,2997,2999,3,1024,
        512,0,2998,2995,1,0,0,0,2998,2999,1,0,0,0,2999,3011,1,0,0,0,3000,
        3001,5,28,0,0,3001,3003,5,171,0,0,3002,3004,3,800,400,0,3003,3002,
        1,0,0,0,3003,3004,1,0,0,0,3004,3005,1,0,0,0,3005,3006,3,1056,528,
        0,3006,3007,5,208,0,0,3007,3008,5,832,0,0,3008,3009,3,1024,512,0,
        3009,3011,1,0,0,0,3010,2979,1,0,0,0,3010,3000,1,0,0,0,3011,171,1,
        0,0,0,3012,3013,5,28,0,0,3013,3014,5,209,0,0,3014,3016,5,747,0,0,
        3015,3017,3,800,400,0,3016,3015,1,0,0,0,3016,3017,1,0,0,0,3017,3018,
        1,0,0,0,3018,3027,3,1056,528,0,3019,3028,3,152,76,0,3020,3028,5,
        581,0,0,3021,3023,5,676,0,0,3022,3024,3,396,198,0,3023,3022,1,0,
        0,0,3024,3025,1,0,0,0,3025,3023,1,0,0,0,3025,3026,1,0,0,0,3026,3028,
        1,0,0,0,3027,3019,1,0,0,0,3027,3020,1,0,0,0,3027,3021,1,0,0,0,3028,
        3090,1,0,0,0,3029,3030,5,28,0,0,3030,3031,5,209,0,0,3031,3033,5,
        747,0,0,3032,3034,3,800,400,0,3033,3032,1,0,0,0,3033,3034,1,0,0,
        0,3034,3035,1,0,0,0,3035,3040,3,1056,528,0,3036,3037,5,742,0,0,3037,
        3041,5,847,0,0,3038,3039,5,589,0,0,3039,3041,5,784,0,0,3040,3036,
        1,0,0,0,3040,3038,1,0,0,0,3041,3042,1,0,0,0,3042,3043,3,1056,528,
        0,3043,3090,1,0,0,0,3044,3045,5,28,0,0,3045,3046,5,209,0,0,3046,
        3048,5,747,0,0,3047,3049,3,800,400,0,3048,3047,1,0,0,0,3048,3049,
        1,0,0,0,3049,3050,1,0,0,0,3050,3053,3,1056,528,0,3051,3054,3,354,
        177,0,3052,3054,3,358,179,0,3053,3051,1,0,0,0,3053,3052,1,0,0,0,
        3054,3090,1,0,0,0,3055,3056,5,28,0,0,3056,3057,5,209,0,0,3057,3059,
        5,747,0,0,3058,3060,3,800,400,0,3059,3058,1,0,0,0,3059,3060,1,0,
        0,0,3060,3061,1,0,0,0,3061,3062,3,1056,528,0,3062,3063,3,314,157,
        0,3063,3090,1,0,0,0,3064,3065,5,28,0,0,3065,3066,5,209,0,0,3066,
        3068,5,747,0,0,3067,3069,3,800,400,0,3068,3067,1,0,0,0,3068,3069,
        1,0,0,0,3069,3070,1,0,0,0,3070,3071,3,1056,528,0,3071,3072,5,809,
        0,0,3072,3077,3,398,199,0,3073,3074,5,937,0,0,3074,3076,3,398,199,
        0,3075,3073,1,0,0,0,3076,3079,1,0,0,0,3077,3075,1,0,0,0,3077,3078,
        1,0,0,0,3078,3090,1,0,0,0,3079,3077,1,0,0,0,3080,3081,5,28,0,0,3081,
        3082,5,209,0,0,3082,3084,5,747,0,0,3083,3085,3,800,400,0,3084,3083,
        1,0,0,0,3084,3085,1,0,0,0,3085,3086,1,0,0,0,3086,3087,3,1056,528,
        0,3087,3088,3,282,141,0,3088,3090,1,0,0,0,3089,3012,1,0,0,0,3089,
        3029,1,0,0,0,3089,3044,1,0,0,0,3089,3055,1,0,0,0,3089,3064,1,0,0,
        0,3089,3080,1,0,0,0,3090,173,1,0,0,0,3091,3096,3,1030,515,0,3092,
        3093,5,937,0,0,3093,3095,3,1030,515,0,3094,3092,1,0,0,0,3095,3098,
        1,0,0,0,3096,3094,1,0,0,0,3096,3097,1,0,0,0,3097,175,1,0,0,0,3098,
        3096,1,0,0,0,3099,3100,5,28,0,0,3100,3101,5,249,0,0,3101,3103,5,
        747,0,0,3102,3104,3,800,400,0,3103,3102,1,0,0,0,3103,3104,1,0,0,
        0,3104,3105,1,0,0,0,3105,3106,3,1056,528,0,3106,3108,5,581,0,0,3107,
        3109,3,1024,512,0,3108,3107,1,0,0,0,3108,3109,1,0,0,0,3109,3201,
        1,0,0,0,3110,3111,5,28,0,0,3111,3112,5,249,0,0,3112,3114,5,747,0,
        0,3113,3115,3,800,400,0,3114,3113,1,0,0,0,3114,3115,1,0,0,0,3115,
        3116,1,0,0,0,3116,3117,3,1056,528,0,3117,3118,5,10,0,0,3118,3119,
        5,271,0,0,3119,3120,5,931,0,0,3120,3121,3,1026,513,0,3121,3122,5,
        932,0,0,3122,3201,1,0,0,0,3123,3124,5,28,0,0,3124,3125,5,249,0,0,
        3125,3127,5,747,0,0,3126,3128,3,800,400,0,3127,3126,1,0,0,0,3127,
        3128,1,0,0,0,3128,3129,1,0,0,0,3129,3130,3,1056,528,0,3130,3131,
        5,588,0,0,3131,3132,5,271,0,0,3132,3133,5,931,0,0,3133,3134,3,1026,
        513,0,3134,3135,5,932,0,0,3135,3201,1,0,0,0,3136,3137,5,28,0,0,3137,
        3138,5,249,0,0,3138,3140,5,747,0,0,3139,3141,3,800,400,0,3140,3139,
        1,0,0,0,3140,3141,1,0,0,0,3141,3142,1,0,0,0,3142,3143,3,1056,528,
        0,3143,3147,5,676,0,0,3144,3145,5,59,0,0,3145,3146,5,921,0,0,3146,
        3148,3,556,278,0,3147,3144,1,0,0,0,3147,3148,1,0,0,0,3148,3150,1,
        0,0,0,3149,3151,3,356,178,0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,
        3151,3201,1,0,0,0,3152,3153,5,28,0,0,3153,3154,5,249,0,0,3154,3156,
        5,747,0,0,3155,3157,3,800,400,0,3156,3155,1,0,0,0,3156,3157,1,0,
        0,0,3157,3158,1,0,0,0,3158,3159,3,1056,528,0,3159,3160,3,358,179,
        0,3160,3201,1,0,0,0,3161,3162,5,28,0,0,3162,3163,5,249,0,0,3163,
        3164,5,747,0,0,3164,3166,3,1056,528,0,3165,3167,3,800,400,0,3166,
        3165,1,0,0,0,3166,3167,1,0,0,0,3167,3168,1,0,0,0,3168,3169,5,10,
        0,0,3169,3170,5,518,0,0,3170,3171,5,931,0,0,3171,3172,3,1050,525,
        0,3172,3173,5,921,0,0,3173,3181,3,1024,512,0,3174,3175,5,937,0,0,
        3175,3176,3,1050,525,0,3176,3177,5,921,0,0,3177,3178,3,1024,512,
        0,3178,3180,1,0,0,0,3179,3174,1,0,0,0,3180,3183,1,0,0,0,3181,3179,
        1,0,0,0,3181,3182,1,0,0,0,3182,3184,1,0,0,0,3183,3181,1,0,0,0,3184,
        3185,5,932,0,0,3185,3186,5,391,0,0,3186,3187,3,1024,512,0,3187,3201,
        1,0,0,0,3188,3189,5,28,0,0,3189,3190,5,249,0,0,3190,3191,5,747,0,
        0,3191,3193,3,1056,528,0,3192,3194,3,800,400,0,3193,3192,1,0,0,0,
        3193,3194,1,0,0,0,3194,3195,1,0,0,0,3195,3196,5,208,0,0,3196,3197,
        5,518,0,0,3197,3198,5,391,0,0,3198,3199,3,1024,512,0,3199,3201,1,
        0,0,0,3200,3099,1,0,0,0,3200,3110,1,0,0,0,3200,3123,1,0,0,0,3200,
        3136,1,0,0,0,3200,3152,1,0,0,0,3200,3161,1,0,0,0,3200,3188,1,0,0,
        0,3201,177,1,0,0,0,3202,3203,5,330,0,0,3203,3204,5,211,0,0,3204,
        3205,5,116,0,0,3205,179,1,0,0,0,3206,3207,5,595,0,0,3207,3208,5,
        921,0,0,3208,3209,3,1024,512,0,3209,181,1,0,0,0,3210,3215,3,1030,
        515,0,3211,3212,5,937,0,0,3212,3214,3,1030,515,0,3213,3211,1,0,0,
        0,3214,3217,1,0,0,0,3215,3213,1,0,0,0,3215,3216,1,0,0,0,3216,183,
        1,0,0,0,3217,3215,1,0,0,0,3218,3223,3,1030,515,0,3219,3220,5,937,
        0,0,3220,3222,3,1030,515,0,3221,3219,1,0,0,0,3222,3225,1,0,0,0,3223,
        3221,1,0,0,0,3223,3224,1,0,0,0,3224,185,1,0,0,0,3225,3223,1,0,0,
        0,3226,3231,3,414,207,0,3227,3228,5,937,0,0,3228,3230,3,414,207,
        0,3229,3227,1,0,0,0,3230,3233,1,0,0,0,3231,3229,1,0,0,0,3231,3232,
        1,0,0,0,3232,187,1,0,0,0,3233,3231,1,0,0,0,3234,3235,5,28,0,0,3235,
        3236,5,265,0,0,3236,3238,5,310,0,0,3237,3239,3,800,400,0,3238,3237,
        1,0,0,0,3238,3239,1,0,0,0,3239,3240,1,0,0,0,3240,3241,3,1030,515,
        0,3241,3242,5,589,0,0,3242,3243,5,784,0,0,3243,3244,3,1030,515,0,
        3244,3389,1,0,0,0,3245,3246,5,28,0,0,3246,3247,5,265,0,0,3247,3249,
        5,310,0,0,3248,3250,3,800,400,0,3249,3248,1,0,0,0,3249,3250,1,0,
        0,0,3250,3251,1,0,0,0,3251,3252,3,1030,515,0,3252,3256,5,676,0,0,
        3253,3254,5,480,0,0,3254,3255,5,921,0,0,3255,3257,3,1010,505,0,3256,
        3253,1,0,0,0,3256,3257,1,0,0,0,3257,3259,1,0,0,0,3258,3260,3,180,
        90,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,3389,1,0,0,0,3261,
        3262,5,28,0,0,3262,3263,5,265,0,0,3263,3265,5,310,0,0,3264,3266,
        3,800,400,0,3265,3264,1,0,0,0,3265,3266,1,0,0,0,3266,3267,1,0,0,
        0,3267,3268,3,1030,515,0,3268,3269,5,676,0,0,3269,3270,5,480,0,0,
        3270,3271,5,921,0,0,3271,3273,3,1010,505,0,3272,3274,3,180,90,0,
        3273,3272,1,0,0,0,3273,3274,1,0,0,0,3274,3389,1,0,0,0,3275,3276,
        5,28,0,0,3276,3277,5,265,0,0,3277,3279,5,310,0,0,3278,3280,3,800,
        400,0,3279,3278,1,0,0,0,3279,3280,1,0,0,0,3280,3281,1,0,0,0,3281,
        3282,3,1030,515,0,3282,3283,5,10,0,0,3283,3284,3,182,91,0,3284,3285,
        5,784,0,0,3285,3286,5,19,0,0,3286,3389,1,0,0,0,3287,3288,5,28,0,
        0,3288,3289,5,265,0,0,3289,3291,5,310,0,0,3290,3292,3,800,400,0,
        3291,3290,1,0,0,0,3291,3292,1,0,0,0,3292,3293,1,0,0,0,3293,3294,
        3,1030,515,0,3294,3295,5,433,0,0,3295,3296,5,170,0,0,3296,3297,3,
        182,91,0,3297,3298,5,784,0,0,3298,3299,5,265,0,0,3299,3300,5,310,
        0,0,3300,3301,3,1030,515,0,3301,3389,1,0,0,0,3302,3303,5,28,0,0,
        3303,3304,5,265,0,0,3304,3306,5,310,0,0,3305,3307,3,800,400,0,3306,
        3305,1,0,0,0,3306,3307,1,0,0,0,3307,3308,1,0,0,0,3308,3309,3,1030,
        515,0,3309,3310,5,588,0,0,3310,3311,3,182,91,0,3311,3312,5,285,0,
        0,3312,3313,5,19,0,0,3313,3389,1,0,0,0,3314,3315,5,28,0,0,3315,3316,
        5,265,0,0,3316,3318,5,310,0,0,3317,3319,3,800,400,0,3318,3317,1,
        0,0,0,3318,3319,1,0,0,0,3319,3320,1,0,0,0,3320,3321,3,1030,515,0,
        3321,3322,5,10,0,0,3322,3323,3,184,92,0,3323,3324,5,784,0,0,3324,
        3325,5,22,0,0,3325,3389,1,0,0,0,3326,3327,5,28,0,0,3327,3328,5,265,
        0,0,3328,3330,5,310,0,0,3329,3331,3,800,400,0,3330,3329,1,0,0,0,
        3330,3331,1,0,0,0,3331,3332,1,0,0,0,3332,3333,3,1030,515,0,3333,
        3334,5,433,0,0,3334,3335,5,679,0,0,3335,3336,3,184,92,0,3336,3337,
        5,784,0,0,3337,3338,5,265,0,0,3338,3339,5,310,0,0,3339,3340,3,1030,
        515,0,3340,3389,1,0,0,0,3341,3342,5,28,0,0,3342,3343,5,265,0,0,3343,
        3345,5,310,0,0,3344,3346,3,800,400,0,3345,3344,1,0,0,0,3345,3346,
        1,0,0,0,3346,3347,1,0,0,0,3347,3348,3,1030,515,0,3348,3349,5,588,
        0,0,3349,3350,3,184,92,0,3350,3351,5,285,0,0,3351,3352,5,22,0,0,
        3352,3389,1,0,0,0,3353,3354,5,28,0,0,3354,3355,5,265,0,0,3355,3357,
        5,310,0,0,3356,3358,3,800,400,0,3357,3356,1,0,0,0,3357,3358,1,0,
        0,0,3358,3359,1,0,0,0,3359,3360,3,1030,515,0,3360,3361,5,10,0,0,
        3361,3362,3,186,93,0,3362,3363,5,784,0,0,3363,3365,5,18,0,0,3364,
        3366,3,178,89,0,3365,3364,1,0,0,0,3365,3366,1,0,0,0,3366,3389,1,
        0,0,0,3367,3368,5,28,0,0,3368,3369,5,265,0,0,3369,3371,5,310,0,0,
        3370,3372,3,800,400,0,3371,3370,1,0,0,0,3371,3372,1,0,0,0,3372,3373,
        1,0,0,0,3373,3374,3,1030,515,0,3374,3375,5,588,0,0,3375,3376,3,186,
        93,0,3376,3377,5,285,0,0,3377,3378,5,18,0,0,3378,3389,1,0,0,0,3379,
        3380,5,28,0,0,3380,3381,5,265,0,0,3381,3383,5,310,0,0,3382,3384,
        3,800,400,0,3383,3382,1,0,0,0,3383,3384,1,0,0,0,3384,3385,1,0,0,
        0,3385,3386,3,1030,515,0,3386,3387,7,14,0,0,3387,3389,1,0,0,0,3388,
        3234,1,0,0,0,3388,3245,1,0,0,0,3388,3261,1,0,0,0,3388,3275,1,0,0,
        0,3388,3287,1,0,0,0,3388,3302,1,0,0,0,3388,3314,1,0,0,0,3388,3326,
        1,0,0,0,3388,3341,1,0,0,0,3388,3353,1,0,0,0,3388,3367,1,0,0,0,3388,
        3379,1,0,0,0,3389,189,1,0,0,0,3390,3391,5,28,0,0,3391,3392,5,270,
        0,0,3392,3394,5,281,0,0,3393,3395,3,800,400,0,3394,3393,1,0,0,0,
        3394,3395,1,0,0,0,3395,3396,1,0,0,0,3396,3397,3,1030,515,0,3397,
        3398,5,589,0,0,3398,3399,5,784,0,0,3399,3400,3,1030,515,0,3400,3419,
        1,0,0,0,3401,3402,5,28,0,0,3402,3403,5,270,0,0,3403,3405,5,281,0,
        0,3404,3406,3,800,400,0,3405,3404,1,0,0,0,3405,3406,1,0,0,0,3406,
        3407,1,0,0,0,3407,3408,3,1030,515,0,3408,3412,5,676,0,0,3409,3411,
        3,518,259,0,3410,3409,1,0,0,0,3411,3414,1,0,0,0,3412,3410,1,0,0,
        0,3412,3413,1,0,0,0,3413,3416,1,0,0,0,3414,3412,1,0,0,0,3415,3417,
        3,794,397,0,3416,3415,1,0,0,0,3416,3417,1,0,0,0,3417,3419,1,0,0,
        0,3418,3390,1,0,0,0,3418,3401,1,0,0,0,3419,191,1,0,0,0,3420,3421,
        3,194,97,0,3421,3422,5,589,0,0,3422,3423,5,784,0,0,3423,3424,3,1030,
        515,0,3424,3492,1,0,0,0,3425,3426,3,194,97,0,3426,3427,5,676,0,0,
        3427,3428,3,794,397,0,3428,3492,1,0,0,0,3429,3430,3,194,97,0,3430,
        3431,5,676,0,0,3431,3432,5,665,0,0,3432,3492,1,0,0,0,3433,3434,3,
        194,97,0,3434,3435,5,809,0,0,3435,3436,7,15,0,0,3436,3492,1,0,0,
        0,3437,3438,3,194,97,0,3438,3439,5,676,0,0,3439,3440,5,37,0,0,3440,
        3441,5,921,0,0,3441,3442,3,1030,515,0,3442,3492,1,0,0,0,3443,3444,
        3,194,97,0,3444,3445,5,676,0,0,3445,3446,5,320,0,0,3446,3447,5,921,
        0,0,3447,3451,5,931,0,0,3448,3450,3,384,192,0,3449,3448,1,0,0,0,
        3450,3453,1,0,0,0,3451,3449,1,0,0,0,3451,3452,1,0,0,0,3452,3454,
        1,0,0,0,3453,3451,1,0,0,0,3454,3455,5,932,0,0,3455,3492,1,0,0,0,
        3456,3457,3,194,97,0,3457,3458,5,676,0,0,3458,3459,5,150,0,0,3459,
        3460,5,921,0,0,3460,3464,5,931,0,0,3461,3463,3,1030,515,0,3462,3461,
        1,0,0,0,3463,3466,1,0,0,0,3464,3462,1,0,0,0,3464,3465,1,0,0,0,3465,
        3467,1,0,0,0,3466,3464,1,0,0,0,3467,3468,5,932,0,0,3468,3492,1,0,
        0,0,3469,3470,3,194,97,0,3470,3471,5,676,0,0,3471,3472,5,410,0,0,
        3472,3473,5,921,0,0,3473,3474,3,1060,530,0,3474,3492,1,0,0,0,3475,
        3476,3,194,97,0,3476,3477,5,676,0,0,3477,3478,5,140,0,0,3478,3479,
        5,921,0,0,3479,3480,3,386,193,0,3480,3492,1,0,0,0,3481,3482,3,194,
        97,0,3482,3483,5,676,0,0,3483,3484,7,16,0,0,3484,3485,5,921,0,0,
        3485,3486,3,1030,515,0,3486,3492,1,0,0,0,3487,3488,3,194,97,0,3488,
        3489,5,809,0,0,3489,3490,7,17,0,0,3490,3492,1,0,0,0,3491,3420,1,
        0,0,0,3491,3425,1,0,0,0,3491,3429,1,0,0,0,3491,3433,1,0,0,0,3491,
        3437,1,0,0,0,3491,3443,1,0,0,0,3491,3456,1,0,0,0,3491,3469,1,0,0,
        0,3491,3475,1,0,0,0,3491,3481,1,0,0,0,3491,3487,1,0,0,0,3492,193,
        1,0,0,0,3493,3494,5,28,0,0,3494,3496,5,287,0,0,3495,3497,3,800,400,
        0,3496,3495,1,0,0,0,3496,3497,1,0,0,0,3497,3498,1,0,0,0,3498,3499,
        3,1030,515,0,3499,3501,5,931,0,0,3500,3502,3,196,98,0,3501,3500,
        1,0,0,0,3501,3502,1,0,0,0,3502,3503,1,0,0,0,3503,3504,5,932,0,0,
        3504,195,1,0,0,0,3505,3510,3,1086,543,0,3506,3507,5,937,0,0,3507,
        3509,3,1086,543,0,3508,3506,1,0,0,0,3509,3512,1,0,0,0,3510,3508,
        1,0,0,0,3510,3511,1,0,0,0,3511,197,1,0,0,0,3512,3510,1,0,0,0,3513,
        3514,5,28,0,0,3514,3515,5,304,0,0,3515,3516,5,596,0,0,3516,3529,
        3,1056,528,0,3517,3519,5,676,0,0,3518,3520,3,200,100,0,3519,3518,
        1,0,0,0,3520,3521,1,0,0,0,3521,3519,1,0,0,0,3521,3522,1,0,0,0,3522,
        3530,1,0,0,0,3523,3525,5,809,0,0,3524,3526,3,202,101,0,3525,3524,
        1,0,0,0,3526,3527,1,0,0,0,3527,3525,1,0,0,0,3527,3528,1,0,0,0,3528,
        3530,1,0,0,0,3529,3517,1,0,0,0,3529,3523,1,0,0,0,3530,3538,1,0,0,
        0,3531,3532,5,28,0,0,3532,3533,5,304,0,0,3533,3534,5,596,0,0,3534,
        3535,3,1056,528,0,3535,3536,5,267,0,0,3536,3538,1,0,0,0,3537,3513,
        1,0,0,0,3537,3531,1,0,0,0,3538,199,1,0,0,0,3539,3540,5,305,0,0,3540,
        3541,5,921,0,0,3541,3548,3,1056,528,0,3542,3543,5,37,0,0,3543,3544,
        5,921,0,0,3544,3548,3,1030,515,0,3545,3548,3,794,397,0,3546,3548,
        3,356,178,0,3547,3539,1,0,0,0,3547,3542,1,0,0,0,3547,3545,1,0,0,
        0,3547,3546,1,0,0,0,3548,201,1,0,0,0,3549,3553,5,305,0,0,3550,3553,
        5,138,0,0,3551,3553,3,360,180,0,3552,3549,1,0,0,0,3552,3550,1,0,
        0,0,3552,3551,1,0,0,0,3553,203,1,0,0,0,3554,3555,5,28,0,0,3555,3556,
        5,402,0,0,3556,3558,5,544,0,0,3557,3559,3,800,400,0,3558,3557,1,
        0,0,0,3558,3559,1,0,0,0,3559,3560,1,0,0,0,3560,3561,3,1030,515,0,
        3561,3562,5,676,0,0,3562,3563,5,94,0,0,3563,3564,5,917,0,0,3564,
        3565,3,1066,533,0,3565,3588,1,0,0,0,3566,3567,5,28,0,0,3567,3568,
        5,402,0,0,3568,3570,5,544,0,0,3569,3571,3,800,400,0,3570,3569,1,
        0,0,0,3570,3571,1,0,0,0,3571,3572,1,0,0,0,3572,3573,3,1030,515,0,
        3573,3574,5,589,0,0,3574,3575,5,784,0,0,3575,3576,3,1030,515,0,3576,
        3588,1,0,0,0,3577,3578,5,28,0,0,3578,3579,5,402,0,0,3579,3581,5,
        544,0,0,3580,3582,3,800,400,0,3581,3580,1,0,0,0,3581,3582,1,0,0,
        0,3582,3583,1,0,0,0,3583,3584,3,1030,515,0,3584,3585,5,676,0,0,3585,
        3586,3,794,397,0,3586,3588,1,0,0,0,3587,3554,1,0,0,0,3587,3566,1,
        0,0,0,3587,3577,1,0,0,0,3588,205,1,0,0,0,3589,3590,5,28,0,0,3590,
        3591,5,409,0,0,3591,3592,5,834,0,0,3592,3618,3,1030,515,0,3593,3594,
        5,589,0,0,3594,3595,5,784,0,0,3595,3619,3,1030,515,0,3596,3597,5,
        131,0,0,3597,3598,5,99,0,0,3598,3599,5,931,0,0,3599,3600,3,1062,
        531,0,3600,3601,5,932,0,0,3601,3619,1,0,0,0,3602,3603,5,208,0,0,
        3603,3604,5,132,0,0,3604,3619,5,370,0,0,3605,3607,3,152,76,0,3606,
        3608,5,576,0,0,3607,3606,1,0,0,0,3607,3608,1,0,0,0,3608,3619,1,0,
        0,0,3609,3611,5,676,0,0,3610,3612,5,665,0,0,3611,3610,1,0,0,0,3611,
        3612,1,0,0,0,3612,3614,1,0,0,0,3613,3615,3,794,397,0,3614,3613,1,
        0,0,0,3614,3615,1,0,0,0,3615,3619,1,0,0,0,3616,3617,5,809,0,0,3617,
        3619,7,15,0,0,3618,3593,1,0,0,0,3618,3596,1,0,0,0,3618,3602,1,0,
        0,0,3618,3605,1,0,0,0,3618,3609,1,0,0,0,3618,3616,1,0,0,0,3619,207,
        1,0,0,0,3620,3621,5,28,0,0,3621,3622,5,438,0,0,3622,3623,5,544,0,
        0,3623,3624,3,348,174,0,3624,209,1,0,0,0,3625,3627,5,28,0,0,3626,
        3628,5,449,0,0,3627,3626,1,0,0,0,3627,3628,1,0,0,0,3628,3629,1,0,
        0,0,3629,3631,5,354,0,0,3630,3632,3,800,400,0,3631,3630,1,0,0,0,
        3631,3632,1,0,0,0,3632,3633,1,0,0,0,3633,3634,3,1030,515,0,3634,
        3636,5,676,0,0,3635,3637,3,148,74,0,3636,3635,1,0,0,0,3636,3637,
        1,0,0,0,3637,3638,1,0,0,0,3638,3640,3,452,226,0,3639,3641,3,794,
        397,0,3640,3639,1,0,0,0,3640,3641,1,0,0,0,3641,3686,1,0,0,0,3642,
        3644,5,28,0,0,3643,3645,5,449,0,0,3644,3643,1,0,0,0,3644,3645,1,
        0,0,0,3645,3646,1,0,0,0,3646,3648,5,354,0,0,3647,3649,3,800,400,
        0,3648,3647,1,0,0,0,3648,3649,1,0,0,0,3649,3650,1,0,0,0,3650,3651,
        3,1030,515,0,3651,3653,5,676,0,0,3652,3654,3,148,74,0,3653,3652,
        1,0,0,0,3653,3654,1,0,0,0,3654,3655,1,0,0,0,3655,3657,3,454,227,
        0,3656,3658,3,794,397,0,3657,3656,1,0,0,0,3657,3658,1,0,0,0,3658,
        3686,1,0,0,0,3659,3661,5,28,0,0,3660,3662,5,449,0,0,3661,3660,1,
        0,0,0,3661,3662,1,0,0,0,3662,3663,1,0,0,0,3663,3664,5,354,0,0,3664,
        3665,3,1030,515,0,3665,3666,3,354,177,0,3666,3686,1,0,0,0,3667,3669,
        5,28,0,0,3668,3670,5,449,0,0,3669,3668,1,0,0,0,3669,3670,1,0,0,0,
        3670,3671,1,0,0,0,3671,3672,5,354,0,0,3672,3673,3,1030,515,0,3673,
        3674,3,358,179,0,3674,3686,1,0,0,0,3675,3677,5,28,0,0,3676,3678,
        5,449,0,0,3677,3676,1,0,0,0,3677,3678,1,0,0,0,3678,3679,1,0,0,0,
        3679,3680,5,354,0,0,3680,3681,3,800,400,0,3681,3682,3,1030,515,0,
        3682,3683,5,809,0,0,3683,3684,7,18,0,0,3684,3686,1,0,0,0,3685,3625,
        1,0,0,0,3685,3642,1,0,0,0,3685,3659,1,0,0,0,3685,3667,1,0,0,0,3685,
        3675,1,0,0,0,3686,211,1,0,0,0,3687,3688,5,28,0,0,3688,3690,5,539,
        0,0,3689,3691,3,800,400,0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,3691,
        3692,1,0,0,0,3692,3693,3,1030,515,0,3693,3695,5,676,0,0,3694,3696,
        3,142,71,0,3695,3694,1,0,0,0,3695,3696,1,0,0,0,3696,3698,1,0,0,0,
        3697,3699,3,794,397,0,3698,3697,1,0,0,0,3698,3699,1,0,0,0,3699,3748,
        1,0,0,0,3700,3701,5,28,0,0,3701,3702,5,539,0,0,3702,3703,3,1030,
        515,0,3703,3704,3,354,177,0,3704,3748,1,0,0,0,3705,3706,5,28,0,0,
        3706,3707,5,539,0,0,3707,3708,3,1030,515,0,3708,3709,3,358,179,0,
        3709,3748,1,0,0,0,3710,3711,5,28,0,0,3711,3713,5,539,0,0,3712,3714,
        3,800,400,0,3713,3712,1,0,0,0,3713,3714,1,0,0,0,3714,3715,1,0,0,
        0,3715,3716,3,1030,515,0,3716,3717,5,809,0,0,3717,3718,5,541,0,0,
        3718,3719,5,921,0,0,3719,3720,3,556,278,0,3720,3748,1,0,0,0,3721,
        3722,5,28,0,0,3722,3724,5,539,0,0,3723,3725,3,800,400,0,3724,3723,
        1,0,0,0,3724,3725,1,0,0,0,3725,3726,1,0,0,0,3726,3727,3,1030,515,
        0,3727,3728,5,809,0,0,3728,3729,5,138,0,0,3729,3748,1,0,0,0,3730,
        3731,5,28,0,0,3731,3733,5,539,0,0,3732,3734,3,800,400,0,3733,3732,
        1,0,0,0,3733,3734,1,0,0,0,3734,3735,1,0,0,0,3735,3736,3,1030,515,
        0,3736,3740,5,581,0,0,3737,3738,5,546,0,0,3738,3739,5,921,0,0,3739,
        3741,3,1024,512,0,3740,3737,1,0,0,0,3740,3741,1,0,0,0,3741,3745,
        1,0,0,0,3742,3743,5,428,0,0,3743,3744,5,921,0,0,3744,3746,3,1024,
        512,0,3745,3742,1,0,0,0,3745,3746,1,0,0,0,3746,3748,1,0,0,0,3747,
        3687,1,0,0,0,3747,3700,1,0,0,0,3747,3705,1,0,0,0,3747,3710,1,0,0,
        0,3747,3721,1,0,0,0,3747,3730,1,0,0,0,3748,213,1,0,0,0,3749,3750,
        5,28,0,0,3750,3752,5,555,0,0,3751,3753,3,800,400,0,3752,3751,1,0,
        0,0,3752,3753,1,0,0,0,3753,3754,1,0,0,0,3754,3755,3,1030,515,0,3755,
        3757,5,931,0,0,3756,3758,3,196,98,0,3757,3756,1,0,0,0,3757,3758,
        1,0,0,0,3758,3759,1,0,0,0,3759,3760,5,932,0,0,3760,3761,5,589,0,
        0,3761,3762,5,784,0,0,3762,3763,3,1030,515,0,3763,3808,1,0,0,0,3764,
        3765,5,28,0,0,3765,3767,5,555,0,0,3766,3768,3,800,400,0,3767,3766,
        1,0,0,0,3767,3768,1,0,0,0,3768,3769,1,0,0,0,3769,3770,3,1030,515,
        0,3770,3772,5,931,0,0,3771,3773,3,196,98,0,3772,3771,1,0,0,0,3772,
        3773,1,0,0,0,3773,3774,1,0,0,0,3774,3775,5,932,0,0,3775,3776,5,676,
        0,0,3776,3777,3,794,397,0,3777,3808,1,0,0,0,3778,3779,5,28,0,0,3779,
        3781,5,555,0,0,3780,3782,3,800,400,0,3781,3780,1,0,0,0,3781,3782,
        1,0,0,0,3782,3783,1,0,0,0,3783,3784,3,1030,515,0,3784,3786,5,931,
        0,0,3785,3787,3,196,98,0,3786,3785,1,0,0,0,3786,3787,1,0,0,0,3787,
        3788,1,0,0,0,3788,3789,5,932,0,0,3789,3790,5,809,0,0,3790,3791,5,
        138,0,0,3791,3808,1,0,0,0,3792,3793,5,28,0,0,3793,3795,5,555,0,0,
        3794,3796,3,800,400,0,3795,3794,1,0,0,0,3795,3796,1,0,0,0,3796,3797,
        1,0,0,0,3797,3798,3,1030,515,0,3798,3800,5,931,0,0,3799,3801,3,196,
        98,0,3800,3799,1,0,0,0,3800,3801,1,0,0,0,3801,3802,1,0,0,0,3802,
        3803,5,932,0,0,3803,3804,5,243,0,0,3804,3805,5,45,0,0,3805,3806,
        3,460,230,0,3806,3808,1,0,0,0,3807,3749,1,0,0,0,3807,3764,1,0,0,
        0,3807,3778,1,0,0,0,3807,3792,1,0,0,0,3808,215,1,0,0,0,3809,3810,
        5,28,0,0,3810,3811,5,594,0,0,3811,3813,5,310,0,0,3812,3814,3,800,
        400,0,3813,3812,1,0,0,0,3813,3814,1,0,0,0,3814,3815,1,0,0,0,3815,
        3816,3,1030,515,0,3816,3817,5,589,0,0,3817,3818,5,784,0,0,3818,3819,
        3,1030,515,0,3819,3996,1,0,0,0,3820,3821,5,28,0,0,3821,3822,5,594,
        0,0,3822,3824,5,310,0,0,3823,3825,3,800,400,0,3824,3823,1,0,0,0,
        3824,3825,1,0,0,0,3825,3826,1,0,0,0,3826,3827,3,1030,515,0,3827,
        3831,5,676,0,0,3828,3829,5,480,0,0,3829,3830,5,921,0,0,3830,3832,
        3,1010,505,0,3831,3828,1,0,0,0,3831,3832,1,0,0,0,3832,3836,1,0,0,
        0,3833,3834,5,595,0,0,3834,3835,5,921,0,0,3835,3837,3,1024,512,0,
        3836,3833,1,0,0,0,3836,3837,1,0,0,0,3837,3996,1,0,0,0,3838,3839,
        5,28,0,0,3839,3840,5,594,0,0,3840,3842,5,310,0,0,3841,3843,3,800,
        400,0,3842,3841,1,0,0,0,3842,3843,1,0,0,0,3843,3844,1,0,0,0,3844,
        3845,3,1030,515,0,3845,3846,5,676,0,0,3846,3847,5,480,0,0,3847,3848,
        5,921,0,0,3848,3849,3,1010,505,0,3849,3850,5,20,0,0,3850,3851,5,
        921,0,0,3851,3856,3,416,208,0,3852,3853,5,937,0,0,3853,3855,3,416,
        208,0,3854,3852,1,0,0,0,3855,3858,1,0,0,0,3856,3854,1,0,0,0,3856,
        3857,1,0,0,0,3857,3862,1,0,0,0,3858,3856,1,0,0,0,3859,3860,5,595,
        0,0,3860,3861,5,921,0,0,3861,3863,3,1024,512,0,3862,3859,1,0,0,0,
        3862,3863,1,0,0,0,3863,3996,1,0,0,0,3864,3865,5,28,0,0,3865,3866,
        5,594,0,0,3866,3868,5,310,0,0,3867,3869,3,800,400,0,3868,3867,1,
        0,0,0,3868,3869,1,0,0,0,3869,3870,1,0,0,0,3870,3871,3,1030,515,0,
        3871,3872,5,10,0,0,3872,3873,3,182,91,0,3873,3874,5,784,0,0,3874,
        3875,5,19,0,0,3875,3996,1,0,0,0,3876,3877,5,28,0,0,3877,3878,5,594,
        0,0,3878,3880,5,310,0,0,3879,3881,3,800,400,0,3880,3879,1,0,0,0,
        3880,3881,1,0,0,0,3881,3882,1,0,0,0,3882,3883,3,1030,515,0,3883,
        3884,5,433,0,0,3884,3885,5,170,0,0,3885,3886,3,182,91,0,3886,3887,
        5,784,0,0,3887,3888,5,594,0,0,3888,3889,5,310,0,0,3889,3890,3,1030,
        515,0,3890,3996,1,0,0,0,3891,3892,5,28,0,0,3892,3893,5,594,0,0,3893,
        3895,5,310,0,0,3894,3896,3,800,400,0,3895,3894,1,0,0,0,3895,3896,
        1,0,0,0,3896,3897,1,0,0,0,3897,3898,3,1030,515,0,3898,3899,5,588,
        0,0,3899,3900,3,182,91,0,3900,3901,5,285,0,0,3901,3902,5,19,0,0,
        3902,3996,1,0,0,0,3903,3904,5,28,0,0,3904,3905,5,594,0,0,3905,3907,
        5,310,0,0,3906,3908,3,800,400,0,3907,3906,1,0,0,0,3907,3908,1,0,
        0,0,3908,3909,1,0,0,0,3909,3910,3,1030,515,0,3910,3911,5,10,0,0,
        3911,3912,3,184,92,0,3912,3913,5,784,0,0,3913,3914,5,22,0,0,3914,
        3996,1,0,0,0,3915,3916,5,28,0,0,3916,3917,5,594,0,0,3917,3919,5,
        310,0,0,3918,3920,3,800,400,0,3919,3918,1,0,0,0,3919,3920,1,0,0,
        0,3920,3921,1,0,0,0,3921,3922,3,1030,515,0,3922,3923,5,433,0,0,3923,
        3924,5,679,0,0,3924,3925,3,184,92,0,3925,3926,5,784,0,0,3926,3927,
        5,594,0,0,3927,3928,5,310,0,0,3928,3929,3,1030,515,0,3929,3996,1,
        0,0,0,3930,3931,5,28,0,0,3931,3932,5,594,0,0,3932,3934,5,310,0,0,
        3933,3935,3,800,400,0,3934,3933,1,0,0,0,3934,3935,1,0,0,0,3935,3936,
        1,0,0,0,3936,3937,3,1030,515,0,3937,3938,5,588,0,0,3938,3939,3,184,
        92,0,3939,3940,5,285,0,0,3940,3941,5,22,0,0,3941,3996,1,0,0,0,3942,
        3943,5,28,0,0,3943,3944,5,594,0,0,3944,3946,5,310,0,0,3945,3947,
        3,800,400,0,3946,3945,1,0,0,0,3946,3947,1,0,0,0,3947,3948,1,0,0,
        0,3948,3949,3,1030,515,0,3949,3950,5,10,0,0,3950,3951,3,168,84,0,
        3951,3952,5,784,0,0,3952,3954,5,18,0,0,3953,3955,3,178,89,0,3954,
        3953,1,0,0,0,3954,3955,1,0,0,0,3955,3996,1,0,0,0,3956,3957,5,28,
        0,0,3957,3958,5,594,0,0,3958,3960,5,310,0,0,3959,3961,3,800,400,
        0,3960,3959,1,0,0,0,3960,3961,1,0,0,0,3961,3962,1,0,0,0,3962,3963,
        3,1030,515,0,3963,3964,5,588,0,0,3964,3965,3,168,84,0,3965,3966,
        5,285,0,0,3966,3967,5,18,0,0,3967,3996,1,0,0,0,3968,3969,5,28,0,
        0,3969,3970,5,594,0,0,3970,3972,5,310,0,0,3971,3973,3,800,400,0,
        3972,3971,1,0,0,0,3972,3973,1,0,0,0,3973,3974,1,0,0,0,3974,3975,
        3,1030,515,0,3975,3976,5,581,0,0,3976,3996,1,0,0,0,3977,3978,5,28,
        0,0,3978,3979,5,594,0,0,3979,3981,5,310,0,0,3980,3982,3,800,400,
        0,3981,3980,1,0,0,0,3981,3982,1,0,0,0,3982,3983,1,0,0,0,3983,3984,
        3,1030,515,0,3984,3985,5,738,0,0,3985,3996,1,0,0,0,3986,3987,5,28,
        0,0,3987,3988,5,594,0,0,3988,3990,5,310,0,0,3989,3991,3,800,400,
        0,3990,3989,1,0,0,0,3990,3991,1,0,0,0,3991,3992,1,0,0,0,3992,3993,
        3,1030,515,0,3993,3994,5,610,0,0,3994,3996,1,0,0,0,3995,3809,1,0,
        0,0,3995,3820,1,0,0,0,3995,3838,1,0,0,0,3995,3864,1,0,0,0,3995,3876,
        1,0,0,0,3995,3891,1,0,0,0,3995,3903,1,0,0,0,3995,3915,1,0,0,0,3995,
        3930,1,0,0,0,3995,3942,1,0,0,0,3995,3956,1,0,0,0,3995,3968,1,0,0,
        0,3995,3977,1,0,0,0,3995,3986,1,0,0,0,3996,217,1,0,0,0,3997,3998,
        5,157,0,0,3998,3999,5,921,0,0,3999,4000,3,1060,530,0,4000,219,1,
        0,0,0,4001,4002,5,284,0,0,4002,4003,5,921,0,0,4003,4004,7,19,0,0,
        4004,221,1,0,0,0,4005,4006,5,453,0,0,4006,4007,5,921,0,0,4007,4008,
        5,931,0,0,4008,4013,3,1030,515,0,4009,4010,5,937,0,0,4010,4012,3,
        1030,515,0,4011,4009,1,0,0,0,4012,4015,1,0,0,0,4013,4011,1,0,0,0,
        4013,4014,1,0,0,0,4014,4016,1,0,0,0,4015,4013,1,0,0,0,4016,4017,
        5,932,0,0,4017,223,1,0,0,0,4018,4019,5,488,0,0,4019,4020,3,1060,
        530,0,4020,4021,5,536,0,0,4021,4022,5,206,0,0,4022,4023,7,20,0,0,
        4023,225,1,0,0,0,4024,4025,5,28,0,0,4025,4026,5,602,0,0,4026,4028,
        5,430,0,0,4027,4029,3,800,400,0,4028,4027,1,0,0,0,4028,4029,1,0,
        0,0,4029,4030,1,0,0,0,4030,4051,3,1030,515,0,4031,4033,5,676,0,0,
        4032,4034,3,218,109,0,4033,4032,1,0,0,0,4033,4034,1,0,0,0,4034,4036,
        1,0,0,0,4035,4037,3,220,110,0,4036,4035,1,0,0,0,4036,4037,1,0,0,
        0,4037,4044,1,0,0,0,4038,4039,5,714,0,0,4039,4040,5,921,0,0,4040,
        4041,5,931,0,0,4041,4045,3,1024,512,0,4042,4043,5,334,0,0,4043,4045,
        5,932,0,0,4044,4038,1,0,0,0,4044,4042,1,0,0,0,4044,4045,1,0,0,0,
        4045,4049,1,0,0,0,4046,4047,5,226,0,0,4047,4048,5,921,0,0,4048,4050,
        3,1024,512,0,4049,4046,1,0,0,0,4049,4050,1,0,0,0,4050,4052,1,0,0,
        0,4051,4031,1,0,0,0,4051,4052,1,0,0,0,4052,4065,1,0,0,0,4053,4063,
        3,222,111,0,4054,4055,5,794,0,0,4055,4060,3,224,112,0,4056,4057,
        5,937,0,0,4057,4059,3,224,112,0,4058,4056,1,0,0,0,4059,4062,1,0,
        0,0,4060,4058,1,0,0,0,4060,4061,1,0,0,0,4061,4064,1,0,0,0,4062,4060,
        1,0,0,0,4063,4054,1,0,0,0,4063,4064,1,0,0,0,4064,4066,1,0,0,0,4065,
        4053,1,0,0,0,4065,4066,1,0,0,0,4066,227,1,0,0,0,4067,4068,5,28,0,
        0,4068,4070,5,620,0,0,4069,4071,3,800,400,0,4070,4069,1,0,0,0,4070,
        4071,1,0,0,0,4071,4072,1,0,0,0,4072,4073,3,1030,515,0,4073,4074,
        5,589,0,0,4074,4075,5,784,0,0,4075,4076,3,1030,515,0,4076,4112,1,
        0,0,0,4077,4078,5,28,0,0,4078,4080,5,620,0,0,4079,4081,3,800,400,
        0,4080,4079,1,0,0,0,4080,4081,1,0,0,0,4081,4082,1,0,0,0,4082,4083,
        3,1030,515,0,4083,4084,5,676,0,0,4084,4085,3,794,397,0,4085,4112,
        1,0,0,0,4086,4087,5,28,0,0,4087,4089,5,620,0,0,4088,4090,3,800,400,
        0,4089,4088,1,0,0,0,4089,4090,1,0,0,0,4090,4091,1,0,0,0,4091,4092,
        3,1030,515,0,4092,4093,5,809,0,0,4093,4094,5,138,0,0,4094,4112,1,
        0,0,0,4095,4096,5,28,0,0,4096,4098,5,620,0,0,4097,4099,3,800,400,
        0,4098,4097,1,0,0,0,4098,4099,1,0,0,0,4099,4100,1,0,0,0,4100,4101,
        3,1030,515,0,4101,4102,3,354,177,0,4102,4112,1,0,0,0,4103,4104,5,
        28,0,0,4104,4106,5,620,0,0,4105,4107,3,800,400,0,4106,4105,1,0,0,
        0,4106,4107,1,0,0,0,4107,4108,1,0,0,0,4108,4109,3,1030,515,0,4109,
        4110,3,358,179,0,4110,4112,1,0,0,0,4111,4067,1,0,0,0,4111,4077,1,
        0,0,0,4111,4086,1,0,0,0,4111,4095,1,0,0,0,4111,4103,1,0,0,0,4112,
        229,1,0,0,0,4113,4114,5,28,0,0,4114,4115,5,626,0,0,4115,4116,5,5,
        0,0,4116,4118,5,544,0,0,4117,4119,3,800,400,0,4118,4117,1,0,0,0,
        4118,4119,1,0,0,0,4119,4120,1,0,0,0,4120,4121,3,1030,515,0,4121,
        4122,5,676,0,0,4122,4123,5,94,0,0,4123,4124,5,917,0,0,4124,4125,
        3,1066,533,0,4125,4150,1,0,0,0,4126,4127,5,28,0,0,4127,4128,5,626,
        0,0,4128,4129,5,5,0,0,4129,4131,5,544,0,0,4130,4132,3,800,400,0,
        4131,4130,1,0,0,0,4131,4132,1,0,0,0,4132,4133,1,0,0,0,4133,4134,
        3,1030,515,0,4134,4135,5,589,0,0,4135,4136,5,784,0,0,4136,4137,3,
        1030,515,0,4137,4150,1,0,0,0,4138,4139,5,28,0,0,4139,4140,5,626,
        0,0,4140,4141,5,5,0,0,4141,4143,5,544,0,0,4142,4144,3,800,400,0,
        4143,4142,1,0,0,0,4143,4144,1,0,0,0,4144,4145,1,0,0,0,4145,4146,
        3,1030,515,0,4146,4147,5,676,0,0,4147,4148,3,794,397,0,4148,4150,
        1,0,0,0,4149,4113,1,0,0,0,4149,4126,1,0,0,0,4149,4138,1,0,0,0,4150,
        231,1,0,0,0,4151,4152,5,28,0,0,4152,4154,5,656,0,0,4153,4155,3,800,
        400,0,4154,4153,1,0,0,0,4154,4155,1,0,0,0,4155,4156,1,0,0,0,4156,
        4157,3,1006,503,0,4157,4158,5,589,0,0,4158,4159,5,784,0,0,4159,4160,
        3,1006,503,0,4160,4236,1,0,0,0,4161,4162,5,28,0,0,4162,4164,5,656,
        0,0,4163,4165,3,800,400,0,4164,4163,1,0,0,0,4164,4165,1,0,0,0,4165,
        4166,1,0,0,0,4166,4167,3,1006,503,0,4167,4168,5,742,0,0,4168,4169,
        5,847,0,0,4169,4170,3,1006,503,0,4170,4236,1,0,0,0,4171,4172,5,28,
        0,0,4172,4174,5,656,0,0,4173,4175,3,800,400,0,4174,4173,1,0,0,0,
        4174,4175,1,0,0,0,4175,4176,1,0,0,0,4176,4177,3,1006,503,0,4177,
        4181,5,676,0,0,4178,4179,5,173,0,0,4179,4180,5,921,0,0,4180,4182,
        3,1060,530,0,4181,4178,1,0,0,0,4181,4182,1,0,0,0,4182,4186,1,0,0,
        0,4183,4184,5,413,0,0,4184,4185,5,921,0,0,4185,4187,3,1060,530,0,
        4186,4183,1,0,0,0,4186,4187,1,0,0,0,4187,4189,1,0,0,0,4188,4190,
        3,140,70,0,4189,4188,1,0,0,0,4189,4190,1,0,0,0,4190,4192,1,0,0,0,
        4191,4193,3,794,397,0,4192,4191,1,0,0,0,4192,4193,1,0,0,0,4193,4236,
        1,0,0,0,4194,4195,5,28,0,0,4195,4197,5,656,0,0,4196,4198,3,800,400,
        0,4197,4196,1,0,0,0,4197,4198,1,0,0,0,4198,4199,1,0,0,0,4199,4200,
        3,1006,503,0,4200,4201,3,354,177,0,4201,4236,1,0,0,0,4202,4203,5,
        28,0,0,4203,4205,5,656,0,0,4204,4206,3,800,400,0,4205,4204,1,0,0,
        0,4205,4206,1,0,0,0,4206,4207,1,0,0,0,4207,4208,3,1006,503,0,4208,
        4209,3,358,179,0,4209,4236,1,0,0,0,4210,4211,5,28,0,0,4211,4213,
        5,656,0,0,4212,4214,3,800,400,0,4213,4212,1,0,0,0,4213,4214,1,0,
        0,0,4214,4215,1,0,0,0,4215,4216,3,1006,503,0,4216,4217,5,809,0,0,
        4217,4222,3,234,117,0,4218,4219,5,937,0,0,4219,4221,3,234,117,0,
        4220,4218,1,0,0,0,4221,4224,1,0,0,0,4222,4220,1,0,0,0,4222,4223,
        1,0,0,0,4223,4236,1,0,0,0,4224,4222,1,0,0,0,4225,4226,5,28,0,0,4226,
        4228,5,656,0,0,4227,4229,3,800,400,0,4228,4227,1,0,0,0,4228,4229,
        1,0,0,0,4229,4230,1,0,0,0,4230,4231,3,1006,503,0,4231,4232,7,21,
        0,0,4232,4233,5,401,0,0,4233,4234,5,5,0,0,4234,4236,1,0,0,0,4235,
        4151,1,0,0,0,4235,4161,1,0,0,0,4235,4171,1,0,0,0,4235,4194,1,0,0,
        0,4235,4202,1,0,0,0,4235,4210,1,0,0,0,4235,4225,1,0,0,0,4236,233,
        1,0,0,0,4237,4238,7,13,0,0,4238,235,1,0,0,0,4239,4240,5,28,0,0,4240,
        4242,5,670,0,0,4241,4243,3,800,400,0,4242,4241,1,0,0,0,4242,4243,
        1,0,0,0,4243,4244,1,0,0,0,4244,4245,3,1056,528,0,4245,4246,5,589,
        0,0,4246,4247,5,784,0,0,4247,4248,3,1056,528,0,4248,4292,1,0,0,0,
        4249,4250,5,28,0,0,4250,4252,5,670,0,0,4251,4253,3,800,400,0,4252,
        4251,1,0,0,0,4252,4253,1,0,0,0,4253,4254,1,0,0,0,4254,4256,3,1056,
        528,0,4255,4257,5,676,0,0,4256,4255,1,0,0,0,4256,4257,1,0,0,0,4257,
        4266,1,0,0,0,4258,4260,5,341,0,0,4259,4261,5,99,0,0,4260,4259,1,
        0,0,0,4260,4261,1,0,0,0,4261,4263,1,0,0,0,4262,4264,5,921,0,0,4263,
        4262,1,0,0,0,4263,4264,1,0,0,0,4264,4265,1,0,0,0,4265,4267,3,1060,
        530,0,4266,4258,1,0,0,0,4266,4267,1,0,0,0,4267,4292,1,0,0,0,4268,
        4269,5,28,0,0,4269,4271,5,670,0,0,4270,4272,3,800,400,0,4271,4270,
        1,0,0,0,4271,4272,1,0,0,0,4272,4273,1,0,0,0,4273,4274,3,1056,528,
        0,4274,4280,5,676,0,0,4275,4277,3,616,308,0,4276,4275,1,0,0,0,4276,
        4277,1,0,0,0,4277,4278,1,0,0,0,4278,4281,3,794,397,0,4279,4281,3,
        616,308,0,4280,4276,1,0,0,0,4280,4279,1,0,0,0,4281,4292,1,0,0,0,
        4282,4283,5,28,0,0,4283,4285,5,670,0,0,4284,4286,3,800,400,0,4285,
        4284,1,0,0,0,4285,4286,1,0,0,0,4286,4287,1,0,0,0,4287,4288,3,1056,
        528,0,4288,4289,5,809,0,0,4289,4290,5,138,0,0,4290,4292,1,0,0,0,
        4291,4239,1,0,0,0,4291,4249,1,0,0,0,4291,4268,1,0,0,0,4291,4282,
        1,0,0,0,4292,237,1,0,0,0,4293,4294,5,28,0,0,4294,4296,5,662,0,0,
        4295,4297,3,800,400,0,4296,4295,1,0,0,0,4296,4297,1,0,0,0,4297,4298,
        1,0,0,0,4298,4299,3,1056,528,0,4299,4300,3,240,120,0,4300,239,1,
        0,0,0,4301,4302,5,809,0,0,4302,4306,5,138,0,0,4303,4304,5,676,0,
        0,4304,4306,3,242,121,0,4305,4301,1,0,0,0,4305,4303,1,0,0,0,4306,
        241,1,0,0,0,4307,4309,3,244,122,0,4308,4307,1,0,0,0,4309,4310,1,
        0,0,0,4310,4308,1,0,0,0,4310,4311,1,0,0,0,4311,4333,1,0,0,0,4312,
        4314,3,246,123,0,4313,4312,1,0,0,0,4314,4315,1,0,0,0,4315,4313,1,
        0,0,0,4315,4316,1,0,0,0,4316,4333,1,0,0,0,4317,4319,3,250,125,0,
        4318,4317,1,0,0,0,4319,4320,1,0,0,0,4320,4318,1,0,0,0,4320,4321,
        1,0,0,0,4321,4333,1,0,0,0,4322,4324,3,252,126,0,4323,4322,1,0,0,
        0,4324,4325,1,0,0,0,4325,4323,1,0,0,0,4325,4326,1,0,0,0,4326,4333,
        1,0,0,0,4327,4329,3,248,124,0,4328,4327,1,0,0,0,4329,4330,1,0,0,
        0,4330,4328,1,0,0,0,4330,4331,1,0,0,0,4331,4333,1,0,0,0,4332,4308,
        1,0,0,0,4332,4313,1,0,0,0,4332,4318,1,0,0,0,4332,4323,1,0,0,0,4332,
        4328,1,0,0,0,4333,243,1,0,0,0,4334,4335,5,475,0,0,4335,4336,5,921,
        0,0,4336,4337,5,931,0,0,4337,4338,3,1026,513,0,4338,4339,5,932,0,
        0,4339,4342,1,0,0,0,4340,4342,3,794,397,0,4341,4334,1,0,0,0,4341,
        4340,1,0,0,0,4342,245,1,0,0,0,4343,4344,5,472,0,0,4344,4345,5,921,
        0,0,4345,4351,3,1024,512,0,4346,4347,5,473,0,0,4347,4348,5,921,0,
        0,4348,4351,3,1024,512,0,4349,4351,3,794,397,0,4350,4343,1,0,0,0,
        4350,4346,1,0,0,0,4350,4349,1,0,0,0,4351,247,1,0,0,0,4352,4353,5,
        34,0,0,4353,4354,5,921,0,0,4354,4357,3,1024,512,0,4355,4357,3,794,
        397,0,4356,4352,1,0,0,0,4356,4355,1,0,0,0,4357,249,1,0,0,0,4358,
        4359,5,819,0,0,4359,4360,5,921,0,0,4360,4366,3,1024,512,0,4361,4362,
        5,520,0,0,4362,4363,5,921,0,0,4363,4366,3,1024,512,0,4364,4366,3,
        794,397,0,4365,4358,1,0,0,0,4365,4361,1,0,0,0,4365,4364,1,0,0,0,
        4366,251,1,0,0,0,4367,4368,5,664,0,0,4368,4369,5,921,0,0,4369,4372,
        3,1024,512,0,4370,4372,3,794,397,0,4371,4367,1,0,0,0,4371,4370,1,
        0,0,0,4372,253,1,0,0,0,4373,4375,5,28,0,0,4374,4376,5,666,0,0,4375,
        4374,1,0,0,0,4375,4376,1,0,0,0,4376,4377,1,0,0,0,4377,4378,5,354,
        0,0,4378,4379,3,800,400,0,4379,4380,3,1030,515,0,4380,4384,5,676,
        0,0,4381,4382,5,803,0,0,4382,4383,5,921,0,0,4383,4385,5,250,0,0,
        4384,4381,1,0,0,0,4384,4385,1,0,0,0,4385,4389,1,0,0,0,4386,4387,
        5,217,0,0,4387,4388,5,921,0,0,4388,4390,3,556,278,0,4389,4386,1,
        0,0,0,4389,4390,1,0,0,0,4390,4394,1,0,0,0,4391,4392,5,263,0,0,4392,
        4393,5,921,0,0,4393,4395,7,22,0,0,4394,4391,1,0,0,0,4394,4395,1,
        0,0,0,4395,4399,1,0,0,0,4396,4397,5,256,0,0,4397,4398,5,921,0,0,
        4398,4400,3,1024,512,0,4399,4396,1,0,0,0,4399,4400,1,0,0,0,4400,
        4410,1,0,0,0,4401,4402,5,262,0,0,4402,4408,5,921,0,0,4403,4409,3,
        1024,512,0,4404,4405,5,931,0,0,4405,4406,3,1026,513,0,4406,4407,
        5,932,0,0,4407,4409,1,0,0,0,4408,4403,1,0,0,0,4408,4404,1,0,0,0,
        4409,4411,1,0,0,0,4410,4401,1,0,0,0,4410,4411,1,0,0,0,4411,4415,
        1,0,0,0,4412,4413,5,261,0,0,4413,4414,5,921,0,0,4414,4416,3,1024,
        512,0,4415,4412,1,0,0,0,4415,4416,1,0,0,0,4416,4420,1,0,0,0,4417,
        4418,5,257,0,0,4418,4419,5,921,0,0,4419,4421,3,1024,512,0,4420,4417,
        1,0,0,0,4420,4421,1,0,0,0,4421,4431,1,0,0,0,4422,4423,5,257,0,0,
        4423,4429,5,921,0,0,4424,4430,3,1024,512,0,4425,4426,5,931,0,0,4426,
        4427,3,1026,513,0,4427,4428,5,932,0,0,4428,4430,1,0,0,0,4429,4424,
        1,0,0,0,4429,4425,1,0,0,0,4430,4432,1,0,0,0,4431,4422,1,0,0,0,4431,
        4432,1,0,0,0,4432,4436,1,0,0,0,4433,4434,5,258,0,0,4434,4435,5,921,
        0,0,4435,4437,3,1024,512,0,4436,4433,1,0,0,0,4436,4437,1,0,0,0,4437,
        4441,1,0,0,0,4438,4439,5,259,0,0,4439,4440,5,921,0,0,4440,4442,3,
        1024,512,0,4441,4438,1,0,0,0,4441,4442,1,0,0,0,4442,4449,1,0,0,0,
        4443,4444,5,255,0,0,4444,4445,5,921,0,0,4445,4446,5,931,0,0,4446,
        4447,3,1026,513,0,4447,4448,5,932,0,0,4448,4450,1,0,0,0,4449,4443,
        1,0,0,0,4449,4450,1,0,0,0,4450,4457,1,0,0,0,4451,4452,5,252,0,0,
        4452,4453,5,921,0,0,4453,4454,5,931,0,0,4454,4455,3,1026,513,0,4455,
        4456,5,932,0,0,4456,4458,1,0,0,0,4457,4451,1,0,0,0,4457,4458,1,0,
        0,0,4458,4465,1,0,0,0,4459,4460,5,254,0,0,4460,4461,5,921,0,0,4461,
        4462,5,931,0,0,4462,4463,3,1024,512,0,4463,4464,5,932,0,0,4464,4466,
        1,0,0,0,4465,4459,1,0,0,0,4465,4466,1,0,0,0,4466,4470,1,0,0,0,4467,
        4468,5,253,0,0,4468,4469,5,921,0,0,4469,4471,7,23,0,0,4470,4467,
        1,0,0,0,4470,4471,1,0,0,0,4471,4475,1,0,0,0,4472,4473,5,253,0,0,
        4473,4474,5,921,0,0,4474,4476,3,1024,512,0,4475,4472,1,0,0,0,4475,
        4476,1,0,0,0,4476,4512,1,0,0,0,4477,4479,5,28,0,0,4478,4480,5,666,
        0,0,4479,4478,1,0,0,0,4479,4480,1,0,0,0,4480,4481,1,0,0,0,4481,4483,
        5,354,0,0,4482,4484,3,800,400,0,4483,4482,1,0,0,0,4483,4484,1,0,
        0,0,4484,4485,1,0,0,0,4485,4486,3,1030,515,0,4486,4487,5,809,0,0,
        4487,4492,3,256,128,0,4488,4489,5,937,0,0,4489,4491,3,256,128,0,
        4490,4488,1,0,0,0,4491,4494,1,0,0,0,4492,4490,1,0,0,0,4492,4493,
        1,0,0,0,4493,4512,1,0,0,0,4494,4492,1,0,0,0,4495,4497,5,28,0,0,4496,
        4498,5,666,0,0,4497,4496,1,0,0,0,4497,4498,1,0,0,0,4498,4499,1,0,
        0,0,4499,4500,5,354,0,0,4500,4501,3,1030,515,0,4501,4502,3,354,177,
        0,4502,4512,1,0,0,0,4503,4505,5,28,0,0,4504,4506,5,666,0,0,4505,
        4504,1,0,0,0,4505,4506,1,0,0,0,4506,4507,1,0,0,0,4507,4508,5,354,
        0,0,4508,4509,3,1030,515,0,4509,4510,3,358,179,0,4510,4512,1,0,0,
        0,4511,4373,1,0,0,0,4511,4477,1,0,0,0,4511,4495,1,0,0,0,4511,4503,
        1,0,0,0,4512,255,1,0,0,0,4513,4522,5,217,0,0,4514,4522,5,439,0,0,
        4515,4522,5,467,0,0,4516,4522,5,468,0,0,4517,4518,5,476,0,0,4518,
        4519,5,921,0,0,4519,4522,7,24,0,0,4520,4522,5,138,0,0,4521,4513,
        1,0,0,0,4521,4514,1,0,0,0,4521,4515,1,0,0,0,4521,4516,1,0,0,0,4521,
        4517,1,0,0,0,4521,4520,1,0,0,0,4522,257,1,0,0,0,4523,4525,5,28,0,
        0,4524,4526,5,666,0,0,4525,4524,1,0,0,0,4525,4526,1,0,0,0,4526,4527,
        1,0,0,0,4527,4529,5,354,0,0,4528,4530,3,800,400,0,4529,4528,1,0,
        0,0,4529,4530,1,0,0,0,4530,4531,1,0,0,0,4531,4532,3,1030,515,0,4532,
        4536,5,676,0,0,4533,4534,5,803,0,0,4534,4535,5,921,0,0,4535,4537,
        5,250,0,0,4536,4533,1,0,0,0,4536,4537,1,0,0,0,4537,4539,1,0,0,0,
        4538,4540,3,148,74,0,4539,4538,1,0,0,0,4539,4540,1,0,0,0,4540,4544,
        1,0,0,0,4541,4542,5,263,0,0,4542,4543,5,921,0,0,4543,4545,7,22,0,
        0,4544,4541,1,0,0,0,4544,4545,1,0,0,0,4545,4549,1,0,0,0,4546,4547,
        5,256,0,0,4547,4548,5,921,0,0,4548,4550,3,1024,512,0,4549,4546,1,
        0,0,0,4549,4550,1,0,0,0,4550,4560,1,0,0,0,4551,4552,5,262,0,0,4552,
        4558,5,921,0,0,4553,4559,3,1024,512,0,4554,4555,5,931,0,0,4555,4556,
        3,1026,513,0,4556,4557,5,932,0,0,4557,4559,1,0,0,0,4558,4553,1,0,
        0,0,4558,4554,1,0,0,0,4559,4561,1,0,0,0,4560,4551,1,0,0,0,4560,4561,
        1,0,0,0,4561,4565,1,0,0,0,4562,4563,5,261,0,0,4563,4564,5,921,0,
        0,4564,4566,3,1024,512,0,4565,4562,1,0,0,0,4565,4566,1,0,0,0,4566,
        4570,1,0,0,0,4567,4568,5,257,0,0,4568,4569,5,921,0,0,4569,4571,3,
        1024,512,0,4570,4567,1,0,0,0,4570,4571,1,0,0,0,4571,4581,1,0,0,0,
        4572,4573,5,257,0,0,4573,4579,5,921,0,0,4574,4580,3,1024,512,0,4575,
        4576,5,931,0,0,4576,4577,3,1026,513,0,4577,4578,5,932,0,0,4578,4580,
        1,0,0,0,4579,4574,1,0,0,0,4579,4575,1,0,0,0,4580,4582,1,0,0,0,4581,
        4572,1,0,0,0,4581,4582,1,0,0,0,4582,4586,1,0,0,0,4583,4584,5,258,
        0,0,4584,4585,5,921,0,0,4585,4587,3,1024,512,0,4586,4583,1,0,0,0,
        4586,4587,1,0,0,0,4587,4591,1,0,0,0,4588,4589,5,259,0,0,4589,4590,
        5,921,0,0,4590,4592,3,1024,512,0,4591,4588,1,0,0,0,4591,4592,1,0,
        0,0,4592,4599,1,0,0,0,4593,4594,5,255,0,0,4594,4595,5,921,0,0,4595,
        4596,5,931,0,0,4596,4597,3,1026,513,0,4597,4598,5,932,0,0,4598,4600,
        1,0,0,0,4599,4593,1,0,0,0,4599,4600,1,0,0,0,4600,4607,1,0,0,0,4601,
        4602,5,252,0,0,4602,4603,5,921,0,0,4603,4604,5,931,0,0,4604,4605,
        3,1026,513,0,4605,4606,5,932,0,0,4606,4608,1,0,0,0,4607,4601,1,0,
        0,0,4607,4608,1,0,0,0,4608,4615,1,0,0,0,4609,4610,5,254,0,0,4610,
        4611,5,921,0,0,4611,4612,5,931,0,0,4612,4613,3,1024,512,0,4613,4614,
        5,932,0,0,4614,4616,1,0,0,0,4615,4609,1,0,0,0,4615,4616,1,0,0,0,
        4616,4622,1,0,0,0,4617,4618,5,253,0,0,4618,4619,5,921,0,0,4619,4623,
        5,200,0,0,4620,4623,5,216,0,0,4621,4623,5,218,0,0,4622,4617,1,0,
        0,0,4622,4620,1,0,0,0,4622,4621,1,0,0,0,4622,4623,1,0,0,0,4623,4624,
        1,0,0,0,4624,4625,5,260,0,0,4625,4626,5,921,0,0,4626,4627,3,1024,
        512,0,4627,4663,1,0,0,0,4628,4630,5,28,0,0,4629,4631,5,666,0,0,4630,
        4629,1,0,0,0,4630,4631,1,0,0,0,4631,4632,1,0,0,0,4632,4634,5,354,
        0,0,4633,4635,3,800,400,0,4634,4633,1,0,0,0,4634,4635,1,0,0,0,4635,
        4636,1,0,0,0,4636,4637,3,1030,515,0,4637,4638,5,809,0,0,4638,4643,
        3,260,130,0,4639,4640,5,937,0,0,4640,4642,3,260,130,0,4641,4639,
        1,0,0,0,4642,4645,1,0,0,0,4643,4641,1,0,0,0,4643,4644,1,0,0,0,4644,
        4663,1,0,0,0,4645,4643,1,0,0,0,4646,4648,5,28,0,0,4647,4649,5,666,
        0,0,4648,4647,1,0,0,0,4648,4649,1,0,0,0,4649,4650,1,0,0,0,4650,4651,
        5,354,0,0,4651,4652,3,1030,515,0,4652,4653,3,354,177,0,4653,4663,
        1,0,0,0,4654,4656,5,28,0,0,4655,4657,5,666,0,0,4656,4655,1,0,0,0,
        4656,4657,1,0,0,0,4657,4658,1,0,0,0,4658,4659,5,354,0,0,4659,4660,
        3,1030,515,0,4660,4661,3,358,179,0,4661,4663,1,0,0,0,4662,4523,1,
        0,0,0,4662,4628,1,0,0,0,4662,4646,1,0,0,0,4662,4654,1,0,0,0,4663,
        259,1,0,0,0,4664,4665,7,25,0,0,4665,261,1,0,0,0,4666,4668,5,28,0,
        0,4667,4669,5,666,0,0,4668,4667,1,0,0,0,4668,4669,1,0,0,0,4669,4670,
        1,0,0,0,4670,4672,5,354,0,0,4671,4673,3,800,400,0,4672,4671,1,0,
        0,0,4672,4673,1,0,0,0,4673,4674,1,0,0,0,4674,4675,3,1030,515,0,4675,
        4679,5,676,0,0,4676,4677,5,803,0,0,4677,4678,5,921,0,0,4678,4680,
        5,636,0,0,4679,4676,1,0,0,0,4679,4680,1,0,0,0,4680,4682,1,0,0,0,
        4681,4683,3,148,74,0,4682,4681,1,0,0,0,4682,4683,1,0,0,0,4683,4687,
        1,0,0,0,4684,4685,5,639,0,0,4685,4686,5,921,0,0,4686,4688,3,1024,
        512,0,4687,4684,1,0,0,0,4687,4688,1,0,0,0,4688,4692,1,0,0,0,4689,
        4690,5,648,0,0,4690,4691,5,921,0,0,4691,4693,3,1024,512,0,4692,4689,
        1,0,0,0,4692,4693,1,0,0,0,4693,4697,1,0,0,0,4694,4695,5,641,0,0,
        4695,4696,5,921,0,0,4696,4698,3,1024,512,0,4697,4694,1,0,0,0,4697,
        4698,1,0,0,0,4698,4702,1,0,0,0,4699,4700,5,649,0,0,4700,4701,5,921,
        0,0,4701,4703,3,1024,512,0,4702,4699,1,0,0,0,4702,4703,1,0,0,0,4703,
        4707,1,0,0,0,4704,4705,5,647,0,0,4705,4706,5,921,0,0,4706,4708,3,
        1024,512,0,4707,4704,1,0,0,0,4707,4708,1,0,0,0,4708,4712,1,0,0,0,
        4709,4710,5,637,0,0,4710,4711,5,921,0,0,4711,4713,3,556,278,0,4712,
        4709,1,0,0,0,4712,4713,1,0,0,0,4713,4717,1,0,0,0,4714,4715,5,646,
        0,0,4715,4716,5,921,0,0,4716,4718,3,1024,512,0,4717,4714,1,0,0,0,
        4717,4718,1,0,0,0,4718,4722,1,0,0,0,4719,4720,5,643,0,0,4720,4721,
        5,921,0,0,4721,4723,3,556,278,0,4722,4719,1,0,0,0,4722,4723,1,0,
        0,0,4723,4727,1,0,0,0,4724,4725,5,642,0,0,4725,4726,5,921,0,0,4726,
        4728,3,1024,512,0,4727,4724,1,0,0,0,4727,4728,1,0,0,0,4728,4732,
        1,0,0,0,4729,4730,5,640,0,0,4730,4731,5,921,0,0,4731,4733,3,1024,
        512,0,4732,4729,1,0,0,0,4732,4733,1,0,0,0,4733,4737,1,0,0,0,4734,
        4735,5,638,0,0,4735,4736,5,921,0,0,4736,4738,3,556,278,0,4737,4734,
        1,0,0,0,4737,4738,1,0,0,0,4738,4742,1,0,0,0,4739,4740,5,645,0,0,
        4740,4741,5,921,0,0,4741,4743,3,1024,512,0,4742,4739,1,0,0,0,4742,
        4743,1,0,0,0,4743,4747,1,0,0,0,4744,4745,5,644,0,0,4745,4746,5,921,
        0,0,4746,4748,3,1024,512,0,4747,4744,1,0,0,0,4747,4748,1,0,0,0,4748,
        4778,1,0,0,0,4749,4751,5,28,0,0,4750,4752,5,666,0,0,4751,4750,1,
        0,0,0,4751,4752,1,0,0,0,4752,4753,1,0,0,0,4753,4755,5,354,0,0,4754,
        4756,3,800,400,0,4755,4754,1,0,0,0,4755,4756,1,0,0,0,4756,4757,1,
        0,0,0,4757,4758,3,1030,515,0,4758,4759,5,809,0,0,4759,4760,5,217,
        0,0,4760,4778,1,0,0,0,4761,4763,5,28,0,0,4762,4764,5,666,0,0,4763,
        4762,1,0,0,0,4763,4764,1,0,0,0,4764,4765,1,0,0,0,4765,4766,5,354,
        0,0,4766,4767,3,1030,515,0,4767,4768,3,354,177,0,4768,4778,1,0,0,
        0,4769,4771,5,28,0,0,4770,4772,5,666,0,0,4771,4770,1,0,0,0,4771,
        4772,1,0,0,0,4772,4773,1,0,0,0,4773,4774,5,354,0,0,4774,4775,3,1030,
        515,0,4775,4776,3,358,179,0,4776,4778,1,0,0,0,4777,4666,1,0,0,0,
        4777,4749,1,0,0,0,4777,4761,1,0,0,0,4777,4769,1,0,0,0,4778,263,1,
        0,0,0,4779,4781,5,28,0,0,4780,4782,5,666,0,0,4781,4780,1,0,0,0,4781,
        4782,1,0,0,0,4782,4783,1,0,0,0,4783,4785,5,354,0,0,4784,4786,3,800,
        400,0,4785,4784,1,0,0,0,4785,4786,1,0,0,0,4786,4787,1,0,0,0,4787,
        4788,3,1030,515,0,4788,4792,5,676,0,0,4789,4790,5,439,0,0,4790,4791,
        5,921,0,0,4791,4793,3,1024,512,0,4792,4789,1,0,0,0,4792,4793,1,0,
        0,0,4793,4797,1,0,0,0,4794,4795,5,744,0,0,4795,4796,5,921,0,0,4796,
        4798,3,556,278,0,4797,4794,1,0,0,0,4797,4798,1,0,0,0,4798,4800,1,
        0,0,0,4799,4801,3,794,397,0,4800,4799,1,0,0,0,4800,4801,1,0,0,0,
        4801,4837,1,0,0,0,4802,4804,5,28,0,0,4803,4805,5,666,0,0,4804,4803,
        1,0,0,0,4804,4805,1,0,0,0,4805,4806,1,0,0,0,4806,4808,5,354,0,0,
        4807,4809,3,800,400,0,4808,4807,1,0,0,0,4808,4809,1,0,0,0,4809,4810,
        1,0,0,0,4810,4811,3,1030,515,0,4811,4812,5,809,0,0,4812,4817,3,266,
        133,0,4813,4814,5,937,0,0,4814,4816,3,266,133,0,4815,4813,1,0,0,
        0,4816,4819,1,0,0,0,4817,4815,1,0,0,0,4817,4818,1,0,0,0,4818,4837,
        1,0,0,0,4819,4817,1,0,0,0,4820,4822,5,28,0,0,4821,4823,5,666,0,0,
        4822,4821,1,0,0,0,4822,4823,1,0,0,0,4823,4824,1,0,0,0,4824,4825,
        5,354,0,0,4825,4826,3,1030,515,0,4826,4827,3,354,177,0,4827,4837,
        1,0,0,0,4828,4830,5,28,0,0,4829,4831,5,666,0,0,4830,4829,1,0,0,0,
        4830,4831,1,0,0,0,4831,4832,1,0,0,0,4832,4833,5,354,0,0,4833,4834,
        3,1030,515,0,4834,4835,3,358,179,0,4835,4837,1,0,0,0,4836,4779,1,
        0,0,0,4836,4802,1,0,0,0,4836,4820,1,0,0,0,4836,4828,1,0,0,0,4837,
        265,1,0,0,0,4838,4839,7,26,0,0,4839,267,1,0,0,0,4840,4841,5,28,0,
        0,4841,4842,5,672,0,0,4842,4843,5,676,0,0,4843,4856,3,144,72,0,4844,
        4845,5,28,0,0,4845,4846,5,672,0,0,4846,4847,5,809,0,0,4847,4852,
        3,1018,509,0,4848,4849,5,937,0,0,4849,4851,3,1018,509,0,4850,4848,
        1,0,0,0,4851,4854,1,0,0,0,4852,4850,1,0,0,0,4852,4853,1,0,0,0,4853,
        4856,1,0,0,0,4854,4852,1,0,0,0,4855,4840,1,0,0,0,4855,4844,1,0,0,
        0,4856,269,1,0,0,0,4857,4858,5,28,0,0,4858,4859,5,672,0,0,4859,4861,
        5,544,0,0,4860,4862,3,800,400,0,4861,4860,1,0,0,0,4861,4862,1,0,
        0,0,4862,4863,1,0,0,0,4863,4864,3,1056,528,0,4864,4868,5,676,0,0,
        4865,4867,3,504,252,0,4866,4865,1,0,0,0,4867,4870,1,0,0,0,4868,4866,
        1,0,0,0,4868,4869,1,0,0,0,4869,4906,1,0,0,0,4870,4868,1,0,0,0,4871,
        4872,5,28,0,0,4872,4873,5,672,0,0,4873,4875,5,544,0,0,4874,4876,
        3,800,400,0,4875,4874,1,0,0,0,4875,4876,1,0,0,0,4876,4877,1,0,0,
        0,4877,4878,3,1056,528,0,4878,4881,5,809,0,0,4879,4882,3,506,253,
        0,4880,4882,5,138,0,0,4881,4879,1,0,0,0,4881,4880,1,0,0,0,4882,4906,
        1,0,0,0,4883,4884,5,28,0,0,4884,4885,5,672,0,0,4885,4887,5,544,0,
        0,4886,4888,3,800,400,0,4887,4886,1,0,0,0,4887,4888,1,0,0,0,4888,
        4889,1,0,0,0,4889,4890,3,1056,528,0,4890,4891,5,589,0,0,4891,4892,
        5,784,0,0,4892,4893,3,1056,528,0,4893,4906,1,0,0,0,4894,4895,5,28,
        0,0,4895,4896,5,672,0,0,4896,4898,5,544,0,0,4897,4899,3,800,400,
        0,4898,4897,1,0,0,0,4898,4899,1,0,0,0,4899,4900,1,0,0,0,4900,4903,
        3,1056,528,0,4901,4904,3,354,177,0,4902,4904,3,358,179,0,4903,4901,
        1,0,0,0,4903,4902,1,0,0,0,4904,4906,1,0,0,0,4905,4857,1,0,0,0,4905,
        4871,1,0,0,0,4905,4883,1,0,0,0,4905,4894,1,0,0,0,4906,271,1,0,0,
        0,4907,4908,5,28,0,0,4908,4909,5,520,0,0,4909,4911,5,544,0,0,4910,
        4912,3,800,400,0,4911,4910,1,0,0,0,4911,4912,1,0,0,0,4912,4913,1,
        0,0,0,4913,4914,3,1056,528,0,4914,4918,5,676,0,0,4915,4917,3,510,
        255,0,4916,4915,1,0,0,0,4917,4920,1,0,0,0,4918,4916,1,0,0,0,4918,
        4919,1,0,0,0,4919,4956,1,0,0,0,4920,4918,1,0,0,0,4921,4922,5,28,
        0,0,4922,4923,5,520,0,0,4923,4925,5,544,0,0,4924,4926,3,800,400,
        0,4925,4924,1,0,0,0,4925,4926,1,0,0,0,4926,4927,1,0,0,0,4927,4928,
        3,1056,528,0,4928,4931,5,809,0,0,4929,4932,3,512,256,0,4930,4932,
        5,138,0,0,4931,4929,1,0,0,0,4931,4930,1,0,0,0,4932,4956,1,0,0,0,
        4933,4934,5,28,0,0,4934,4935,5,520,0,0,4935,4937,5,544,0,0,4936,
        4938,3,800,400,0,4937,4936,1,0,0,0,4937,4938,1,0,0,0,4938,4939,1,
        0,0,0,4939,4940,3,1056,528,0,4940,4941,5,589,0,0,4941,4942,5,784,
        0,0,4942,4943,3,1056,528,0,4943,4956,1,0,0,0,4944,4945,5,28,0,0,
        4945,4946,5,520,0,0,4946,4948,5,544,0,0,4947,4949,3,800,400,0,4948,
        4947,1,0,0,0,4948,4949,1,0,0,0,4949,4950,1,0,0,0,4950,4953,3,1056,
        528,0,4951,4954,3,354,177,0,4952,4954,3,358,179,0,4953,4951,1,0,
        0,0,4953,4952,1,0,0,0,4954,4956,1,0,0,0,4955,4907,1,0,0,0,4955,4921,
        1,0,0,0,4955,4933,1,0,0,0,4955,4944,1,0,0,0,4956,273,1,0,0,0,4957,
        4958,5,28,0,0,4958,4960,5,678,0,0,4959,4961,3,800,400,0,4960,4959,
        1,0,0,0,4960,4961,1,0,0,0,4961,4962,1,0,0,0,4962,4963,3,1030,515,
        0,4963,4964,7,27,0,0,4964,4965,5,8,0,0,4965,4966,5,921,0,0,4966,
        4971,3,1030,515,0,4967,4968,5,937,0,0,4968,4970,3,1030,515,0,4969,
        4967,1,0,0,0,4970,4973,1,0,0,0,4971,4969,1,0,0,0,4971,4972,1,0,0,
        0,4972,4977,1,0,0,0,4973,4971,1,0,0,0,4974,4975,5,680,0,0,4975,4976,
        5,921,0,0,4976,4978,3,556,278,0,4977,4974,1,0,0,0,4977,4978,1,0,
        0,0,4978,5046,1,0,0,0,4979,4980,5,28,0,0,4980,4982,5,678,0,0,4981,
        4983,3,800,400,0,4982,4981,1,0,0,0,4982,4983,1,0,0,0,4983,4984,1,
        0,0,0,4984,4985,3,1030,515,0,4985,4986,5,10,0,0,4986,4987,5,8,0,
        0,4987,4988,5,921,0,0,4988,4993,3,1030,515,0,4989,4990,5,937,0,0,
        4990,4992,3,1030,515,0,4991,4989,1,0,0,0,4992,4995,1,0,0,0,4993,
        4991,1,0,0,0,4993,4994,1,0,0,0,4994,4999,1,0,0,0,4995,4993,1,0,0,
        0,4996,4997,5,680,0,0,4997,4998,5,921,0,0,4998,5000,3,556,278,0,
        4999,4996,1,0,0,0,4999,5000,1,0,0,0,5000,5046,1,0,0,0,5001,5002,
        5,28,0,0,5002,5004,5,678,0,0,5003,5005,3,800,400,0,5004,5003,1,0,
        0,0,5004,5005,1,0,0,0,5005,5006,1,0,0,0,5006,5007,3,1030,515,0,5007,
        5018,5,676,0,0,5008,5009,5,8,0,0,5009,5010,5,921,0,0,5010,5015,3,
        1030,515,0,5011,5012,5,937,0,0,5012,5014,3,1030,515,0,5013,5011,
        1,0,0,0,5014,5017,1,0,0,0,5015,5013,1,0,0,0,5015,5016,1,0,0,0,5016,
        5019,1,0,0,0,5017,5015,1,0,0,0,5018,5008,1,0,0,0,5018,5019,1,0,0,
        0,5019,5021,1,0,0,0,5020,5022,3,794,397,0,5021,5020,1,0,0,0,5021,
        5022,1,0,0,0,5022,5046,1,0,0,0,5023,5024,5,28,0,0,5024,5026,5,678,
        0,0,5025,5027,3,800,400,0,5026,5025,1,0,0,0,5026,5027,1,0,0,0,5027,
        5028,1,0,0,0,5028,5029,3,1030,515,0,5029,5030,3,354,177,0,5030,5046,
        1,0,0,0,5031,5032,5,28,0,0,5032,5033,5,678,0,0,5033,5034,3,1030,
        515,0,5034,5035,3,358,179,0,5035,5046,1,0,0,0,5036,5037,5,28,0,0,
        5037,5039,5,678,0,0,5038,5040,3,800,400,0,5039,5038,1,0,0,0,5039,
        5040,1,0,0,0,5040,5041,1,0,0,0,5041,5042,3,1030,515,0,5042,5043,
        5,809,0,0,5043,5044,5,138,0,0,5044,5046,1,0,0,0,5045,4957,1,0,0,
        0,5045,4979,1,0,0,0,5045,5001,1,0,0,0,5045,5023,1,0,0,0,5045,5031,
        1,0,0,0,5045,5036,1,0,0,0,5046,275,1,0,0,0,5047,5049,5,28,0,0,5048,
        5050,5,721,0,0,5049,5048,1,0,0,0,5049,5050,1,0,0,0,5050,5051,1,0,
        0,0,5051,5053,5,354,0,0,5052,5054,3,800,400,0,5053,5052,1,0,0,0,
        5053,5054,1,0,0,0,5054,5055,1,0,0,0,5055,5056,3,1030,515,0,5056,
        5058,5,676,0,0,5057,5059,3,582,291,0,5058,5057,1,0,0,0,5058,5059,
        1,0,0,0,5059,5061,1,0,0,0,5060,5062,3,148,74,0,5061,5060,1,0,0,0,
        5061,5062,1,0,0,0,5062,5069,1,0,0,0,5063,5064,5,722,0,0,5064,5065,
        5,921,0,0,5065,5066,5,931,0,0,5066,5067,3,1026,513,0,5067,5068,5,
        932,0,0,5068,5070,1,0,0,0,5069,5063,1,0,0,0,5069,5070,1,0,0,0,5070,
        5077,1,0,0,0,5071,5072,5,725,0,0,5072,5073,5,921,0,0,5073,5074,5,
        931,0,0,5074,5075,3,1026,513,0,5075,5076,5,932,0,0,5076,5078,1,0,
        0,0,5077,5071,1,0,0,0,5077,5078,1,0,0,0,5078,5080,1,0,0,0,5079,5081,
        3,794,397,0,5080,5079,1,0,0,0,5080,5081,1,0,0,0,5081,5114,1,0,0,
        0,5082,5084,5,28,0,0,5083,5085,5,721,0,0,5084,5083,1,0,0,0,5084,
        5085,1,0,0,0,5085,5086,1,0,0,0,5086,5088,5,354,0,0,5087,5089,3,800,
        400,0,5088,5087,1,0,0,0,5088,5089,1,0,0,0,5089,5090,1,0,0,0,5090,
        5091,3,1030,515,0,5091,5092,3,354,177,0,5092,5114,1,0,0,0,5093,5095,
        5,28,0,0,5094,5096,5,721,0,0,5095,5094,1,0,0,0,5095,5096,1,0,0,0,
        5096,5097,1,0,0,0,5097,5098,5,354,0,0,5098,5099,3,1030,515,0,5099,
        5100,3,358,179,0,5100,5114,1,0,0,0,5101,5103,5,28,0,0,5102,5104,
        5,721,0,0,5103,5102,1,0,0,0,5103,5104,1,0,0,0,5104,5105,1,0,0,0,
        5105,5107,5,354,0,0,5106,5108,3,800,400,0,5107,5106,1,0,0,0,5107,
        5108,1,0,0,0,5108,5109,1,0,0,0,5109,5110,3,1030,515,0,5110,5111,
        5,809,0,0,5111,5112,7,28,0,0,5112,5114,1,0,0,0,5113,5047,1,0,0,0,
        5113,5082,1,0,0,0,5113,5093,1,0,0,0,5113,5101,1,0,0,0,5114,277,1,
        0,0,0,5115,5116,5,28,0,0,5116,5118,5,728,0,0,5117,5119,3,800,400,
        0,5118,5117,1,0,0,0,5118,5119,1,0,0,0,5119,5120,1,0,0,0,5120,5121,
        3,1030,515,0,5121,5123,5,676,0,0,5122,5124,3,356,178,0,5123,5122,
        1,0,0,0,5123,5124,1,0,0,0,5124,5126,1,0,0,0,5125,5127,3,794,397,
        0,5126,5125,1,0,0,0,5126,5127,1,0,0,0,5127,5151,1,0,0,0,5128,5129,
        5,28,0,0,5129,5131,5,728,0,0,5130,5132,3,800,400,0,5131,5130,1,0,
        0,0,5131,5132,1,0,0,0,5132,5133,1,0,0,0,5133,5134,3,1030,515,0,5134,
        5135,3,354,177,0,5135,5151,1,0,0,0,5136,5137,5,28,0,0,5137,5138,
        5,728,0,0,5138,5139,3,1030,515,0,5139,5140,3,358,179,0,5140,5151,
        1,0,0,0,5141,5142,5,28,0,0,5142,5144,5,728,0,0,5143,5145,3,800,400,
        0,5144,5143,1,0,0,0,5144,5145,1,0,0,0,5145,5146,1,0,0,0,5146,5147,
        3,1030,515,0,5147,5148,5,809,0,0,5148,5149,5,138,0,0,5149,5151,1,
        0,0,0,5150,5115,1,0,0,0,5150,5128,1,0,0,0,5150,5136,1,0,0,0,5150,
        5141,1,0,0,0,5151,279,1,0,0,0,5152,5153,5,28,0,0,5153,5155,5,747,
        0,0,5154,5156,3,800,400,0,5155,5154,1,0,0,0,5155,5156,1,0,0,0,5156,
        5157,1,0,0,0,5157,5158,3,1056,528,0,5158,5159,5,589,0,0,5159,5160,
        5,784,0,0,5160,5161,3,1056,528,0,5161,5278,1,0,0,0,5162,5163,5,28,
        0,0,5163,5165,5,747,0,0,5164,5166,3,800,400,0,5165,5164,1,0,0,0,
        5165,5166,1,0,0,0,5166,5167,1,0,0,0,5167,5168,3,1056,528,0,5168,
        5169,5,742,0,0,5169,5170,5,847,0,0,5170,5171,3,1056,528,0,5171,5278,
        1,0,0,0,5172,5173,5,28,0,0,5173,5175,5,747,0,0,5174,5176,3,800,400,
        0,5175,5174,1,0,0,0,5175,5176,1,0,0,0,5176,5177,1,0,0,0,5177,5181,
        3,1056,528,0,5178,5182,3,284,142,0,5179,5182,3,286,143,0,5180,5182,
        3,312,156,0,5181,5178,1,0,0,0,5181,5179,1,0,0,0,5181,5180,1,0,0,
        0,5182,5278,1,0,0,0,5183,5184,5,28,0,0,5184,5186,5,747,0,0,5185,
        5187,3,800,400,0,5186,5185,1,0,0,0,5186,5187,1,0,0,0,5187,5188,1,
        0,0,0,5188,5189,3,1056,528,0,5189,5190,3,310,155,0,5190,5278,1,0,
        0,0,5191,5192,5,28,0,0,5192,5194,5,747,0,0,5193,5195,3,800,400,0,
        5194,5193,1,0,0,0,5194,5195,1,0,0,0,5195,5196,1,0,0,0,5196,5197,
        3,1056,528,0,5197,5198,3,314,157,0,5198,5278,1,0,0,0,5199,5200,5,
        28,0,0,5200,5202,5,747,0,0,5201,5203,3,800,400,0,5202,5201,1,0,0,
        0,5202,5203,1,0,0,0,5203,5204,1,0,0,0,5204,5205,3,1056,528,0,5205,
        5207,5,676,0,0,5206,5208,3,54,27,0,5207,5206,1,0,0,0,5207,5208,1,
        0,0,0,5208,5215,1,0,0,0,5209,5210,5,708,0,0,5210,5211,5,921,0,0,
        5211,5212,5,931,0,0,5212,5213,3,520,260,0,5213,5214,5,932,0,0,5214,
        5216,1,0,0,0,5215,5209,1,0,0,0,5215,5216,1,0,0,0,5216,5220,1,0,0,
        0,5217,5218,5,173,0,0,5218,5219,5,921,0,0,5219,5221,3,1060,530,0,
        5220,5217,1,0,0,0,5220,5221,1,0,0,0,5221,5225,1,0,0,0,5222,5223,
        5,413,0,0,5223,5224,5,921,0,0,5224,5226,3,1060,530,0,5225,5222,1,
        0,0,0,5225,5226,1,0,0,0,5226,5230,1,0,0,0,5227,5228,5,111,0,0,5228,
        5229,5,921,0,0,5229,5231,3,556,278,0,5230,5227,1,0,0,0,5230,5231,
        1,0,0,0,5231,5233,1,0,0,0,5232,5234,3,140,70,0,5233,5232,1,0,0,0,
        5233,5234,1,0,0,0,5234,5236,1,0,0,0,5235,5237,3,794,397,0,5236,5235,
        1,0,0,0,5236,5237,1,0,0,0,5237,5278,1,0,0,0,5238,5239,5,28,0,0,5239,
        5241,5,747,0,0,5240,5242,3,800,400,0,5241,5240,1,0,0,0,5241,5242,
        1,0,0,0,5242,5243,1,0,0,0,5243,5244,3,1056,528,0,5244,5245,3,354,
        177,0,5245,5278,1,0,0,0,5246,5247,5,28,0,0,5247,5249,5,747,0,0,5248,
        5250,3,800,400,0,5249,5248,1,0,0,0,5249,5250,1,0,0,0,5250,5251,1,
        0,0,0,5251,5252,3,1056,528,0,5252,5253,3,358,179,0,5253,5278,1,0,
        0,0,5254,5255,5,28,0,0,5255,5257,5,747,0,0,5256,5258,3,800,400,0,
        5257,5256,1,0,0,0,5257,5258,1,0,0,0,5258,5259,1,0,0,0,5259,5260,
        3,1056,528,0,5260,5267,5,809,0,0,5261,5268,5,173,0,0,5262,5268,5,
        413,0,0,5263,5268,5,111,0,0,5264,5268,5,183,0,0,5265,5268,5,138,
        0,0,5266,5268,1,0,0,0,5267,5261,1,0,0,0,5267,5262,1,0,0,0,5267,5263,
        1,0,0,0,5267,5264,1,0,0,0,5267,5265,1,0,0,0,5267,5266,1,0,0,0,5268,
        5278,1,0,0,0,5269,5270,5,28,0,0,5270,5272,5,747,0,0,5271,5273,3,
        800,400,0,5272,5271,1,0,0,0,5272,5273,1,0,0,0,5273,5274,1,0,0,0,
        5274,5275,3,1056,528,0,5275,5276,3,282,141,0,5276,5278,1,0,0,0,5277,
        5152,1,0,0,0,5277,5162,1,0,0,0,5277,5172,1,0,0,0,5277,5183,1,0,0,
        0,5277,5191,1,0,0,0,5277,5199,1,0,0,0,5277,5238,1,0,0,0,5277,5246,
        1,0,0,0,5277,5254,1,0,0,0,5277,5269,1,0,0,0,5278,281,1,0,0,0,5279,
        5280,5,10,0,0,5280,5281,5,626,0,0,5281,5282,5,5,0,0,5282,5283,5,
        544,0,0,5283,5284,3,1056,528,0,5284,5285,5,488,0,0,5285,5286,3,446,
        223,0,5286,5309,1,0,0,0,5287,5288,5,208,0,0,5288,5289,5,626,0,0,
        5289,5290,5,5,0,0,5290,5291,5,544,0,0,5291,5301,3,1056,528,0,5292,
        5293,5,937,0,0,5293,5294,5,10,0,0,5294,5295,5,626,0,0,5295,5296,
        5,5,0,0,5296,5297,5,544,0,0,5297,5298,3,1056,528,0,5298,5299,5,488,
        0,0,5299,5300,3,446,223,0,5300,5302,1,0,0,0,5301,5292,1,0,0,0,5301,
        5302,1,0,0,0,5302,5309,1,0,0,0,5303,5304,5,208,0,0,5304,5305,5,17,
        0,0,5305,5306,5,626,0,0,5306,5307,5,5,0,0,5307,5309,5,543,0,0,5308,
        5279,1,0,0,0,5308,5287,1,0,0,0,5308,5303,1,0,0,0,5309,283,1,0,0,
        0,5310,5311,5,131,0,0,5311,5312,5,99,0,0,5312,5313,5,931,0,0,5313,
        5314,3,1062,531,0,5314,5315,5,932,0,0,5315,5333,1,0,0,0,5316,5320,
        5,576,0,0,5317,5318,5,414,0,0,5318,5319,5,921,0,0,5319,5321,3,1060,
        530,0,5320,5317,1,0,0,0,5320,5321,1,0,0,0,5321,5324,1,0,0,0,5322,
        5323,5,846,0,0,5323,5325,3,1066,533,0,5324,5322,1,0,0,0,5324,5325,
        1,0,0,0,5325,5333,1,0,0,0,5326,5327,3,152,76,0,5327,5328,5,576,0,
        0,5328,5333,1,0,0,0,5329,5330,5,208,0,0,5330,5331,5,132,0,0,5331,
        5333,5,370,0,0,5332,5310,1,0,0,0,5332,5316,1,0,0,0,5332,5326,1,0,
        0,0,5332,5329,1,0,0,0,5333,285,1,0,0,0,5334,5336,5,10,0,0,5335,5337,
        5,136,0,0,5336,5335,1,0,0,0,5336,5337,1,0,0,0,5337,5339,1,0,0,0,
        5338,5340,3,802,401,0,5339,5338,1,0,0,0,5339,5340,1,0,0,0,5340,5341,
        1,0,0,0,5341,5346,3,626,313,0,5342,5343,5,937,0,0,5343,5345,3,626,
        313,0,5344,5342,1,0,0,0,5345,5348,1,0,0,0,5346,5344,1,0,0,0,5346,
        5347,1,0,0,0,5347,5430,1,0,0,0,5348,5346,1,0,0,0,5349,5350,5,589,
        0,0,5350,5351,5,136,0,0,5351,5352,3,1050,525,0,5352,5353,5,784,0,
        0,5353,5354,3,1050,525,0,5354,5430,1,0,0,0,5355,5375,3,338,169,0,
        5356,5357,5,931,0,0,5357,5362,3,288,144,0,5358,5359,5,937,0,0,5359,
        5361,3,288,144,0,5360,5358,1,0,0,0,5361,5364,1,0,0,0,5362,5360,1,
        0,0,0,5362,5363,1,0,0,0,5363,5365,1,0,0,0,5364,5362,1,0,0,0,5365,
        5366,5,932,0,0,5366,5376,1,0,0,0,5367,5372,3,288,144,0,5368,5369,
        5,937,0,0,5369,5371,3,288,144,0,5370,5368,1,0,0,0,5371,5374,1,0,
        0,0,5372,5370,1,0,0,0,5372,5373,1,0,0,0,5373,5376,1,0,0,0,5374,5372,
        1,0,0,0,5375,5356,1,0,0,0,5375,5367,1,0,0,0,5376,5430,1,0,0,0,5377,
        5378,3,338,169,0,5378,5379,5,136,0,0,5379,5380,3,1050,525,0,5380,
        5381,5,676,0,0,5381,5382,5,402,0,0,5382,5383,5,544,0,0,5383,5391,
        3,1030,515,0,5384,5385,5,825,0,0,5385,5386,5,931,0,0,5386,5387,3,
        1050,525,0,5387,5388,5,937,0,0,5388,5389,3,1052,526,0,5389,5390,
        5,932,0,0,5390,5392,1,0,0,0,5391,5384,1,0,0,0,5391,5392,1,0,0,0,
        5392,5394,1,0,0,0,5393,5395,5,279,0,0,5394,5393,1,0,0,0,5394,5395,
        1,0,0,0,5395,5430,1,0,0,0,5396,5397,3,338,169,0,5397,5398,5,136,
        0,0,5398,5399,3,1050,525,0,5399,5400,5,809,0,0,5400,5401,5,402,0,
        0,5401,5402,5,544,0,0,5402,5430,1,0,0,0,5403,5404,3,338,169,0,5404,
        5409,3,326,163,0,5405,5406,5,937,0,0,5406,5408,3,326,163,0,5407,
        5405,1,0,0,0,5408,5411,1,0,0,0,5409,5407,1,0,0,0,5409,5410,1,0,0,
        0,5410,5430,1,0,0,0,5411,5409,1,0,0,0,5412,5413,3,338,169,0,5413,
        5418,3,328,164,0,5414,5415,5,937,0,0,5415,5417,3,328,164,0,5416,
        5414,1,0,0,0,5417,5420,1,0,0,0,5418,5416,1,0,0,0,5418,5419,1,0,0,
        0,5419,5430,1,0,0,0,5420,5418,1,0,0,0,5421,5423,5,208,0,0,5422,5424,
        5,136,0,0,5423,5422,1,0,0,0,5423,5424,1,0,0,0,5424,5426,1,0,0,0,
        5425,5427,3,800,400,0,5426,5425,1,0,0,0,5426,5427,1,0,0,0,5427,5428,
        1,0,0,0,5428,5430,3,1052,526,0,5429,5334,1,0,0,0,5429,5349,1,0,0,
        0,5429,5355,1,0,0,0,5429,5377,1,0,0,0,5429,5396,1,0,0,0,5429,5403,
        1,0,0,0,5429,5412,1,0,0,0,5429,5421,1,0,0,0,5430,287,1,0,0,0,5431,
        5433,5,136,0,0,5432,5431,1,0,0,0,5432,5433,1,0,0,0,5433,5434,1,0,
        0,0,5434,5465,3,1050,525,0,5435,5436,5,208,0,0,5436,5466,5,182,0,
        0,5437,5438,5,676,0,0,5438,5439,5,182,0,0,5439,5440,3,1056,528,0,
        5440,5441,5,927,0,0,5441,5442,5,442,0,0,5442,5466,1,0,0,0,5443,5445,
        5,676,0,0,5444,5443,1,0,0,0,5444,5445,1,0,0,0,5445,5446,1,0,0,0,
        5446,5447,5,448,0,0,5447,5452,5,458,0,0,5448,5449,5,208,0,0,5449,
        5450,5,448,0,0,5450,5452,5,458,0,0,5451,5444,1,0,0,0,5451,5448,1,
        0,0,0,5452,5466,1,0,0,0,5453,5454,5,676,0,0,5454,5456,5,168,0,0,
        5455,5453,1,0,0,0,5455,5456,1,0,0,0,5456,5457,1,0,0,0,5457,5459,
        5,803,0,0,5458,5455,1,0,0,0,5458,5459,1,0,0,0,5459,5460,1,0,0,0,
        5460,5466,3,1086,543,0,5461,5462,5,138,0,0,5462,5466,3,1024,512,
        0,5463,5464,5,809,0,0,5464,5466,5,138,0,0,5465,5435,1,0,0,0,5465,
        5437,1,0,0,0,5465,5451,1,0,0,0,5465,5458,1,0,0,0,5465,5461,1,0,0,
        0,5465,5463,1,0,0,0,5466,289,1,0,0,0,5467,5468,5,148,0,0,5468,5470,
        3,1030,515,0,5469,5467,1,0,0,0,5469,5470,1,0,0,0,5470,5492,1,0,0,
        0,5471,5474,5,806,0,0,5472,5474,3,622,311,0,5473,5471,1,0,0,0,5473,
        5472,1,0,0,0,5474,5478,1,0,0,0,5475,5477,3,298,149,0,5476,5475,1,
        0,0,0,5477,5480,1,0,0,0,5478,5476,1,0,0,0,5478,5479,1,0,0,0,5479,
        5493,1,0,0,0,5480,5478,1,0,0,0,5481,5482,3,620,310,0,5482,5483,5,
        579,0,0,5483,5488,3,1056,528,0,5484,5485,5,931,0,0,5485,5486,3,1050,
        525,0,5486,5487,5,932,0,0,5487,5489,1,0,0,0,5488,5484,1,0,0,0,5488,
        5489,1,0,0,0,5489,5490,1,0,0,0,5490,5491,3,308,154,0,5491,5493,1,
        0,0,0,5492,5473,1,0,0,0,5492,5481,1,0,0,0,5493,291,1,0,0,0,5494,
        5496,5,448,0,0,5495,5494,1,0,0,0,5495,5496,1,0,0,0,5496,5497,1,0,
        0,0,5497,5498,5,227,0,0,5498,293,1,0,0,0,5499,5501,5,448,0,0,5500,
        5499,1,0,0,0,5500,5501,1,0,0,0,5501,5502,1,0,0,0,5502,5503,5,187,
        0,0,5503,295,1,0,0,0,5504,5505,5,346,0,0,5505,5506,7,29,0,0,5506,
        297,1,0,0,0,5507,5509,3,292,146,0,5508,5510,7,30,0,0,5509,5508,1,
        0,0,0,5509,5510,1,0,0,0,5510,5520,1,0,0,0,5511,5520,3,294,147,0,
        5512,5520,3,296,148,0,5513,5515,7,21,0,0,5514,5516,7,30,0,0,5515,
        5514,1,0,0,0,5515,5516,1,0,0,0,5516,5520,1,0,0,0,5517,5520,5,587,
        0,0,5518,5520,5,447,0,0,5519,5507,1,0,0,0,5519,5511,1,0,0,0,5519,
        5512,1,0,0,0,5519,5513,1,0,0,0,5519,5517,1,0,0,0,5519,5518,1,0,0,
        0,5520,299,1,0,0,0,5521,5522,5,488,0,0,5522,5523,5,811,0,0,5523,
        5524,3,306,153,0,5524,301,1,0,0,0,5525,5526,5,488,0,0,5526,5527,
        5,193,0,0,5527,5528,3,306,153,0,5528,303,1,0,0,0,5529,5530,5,404,
        0,0,5530,5531,7,31,0,0,5531,305,1,0,0,0,5532,5539,5,104,0,0,5533,
        5534,5,676,0,0,5534,5539,7,32,0,0,5535,5539,5,607,0,0,5536,5537,
        5,443,0,0,5537,5539,5,9,0,0,5538,5532,1,0,0,0,5538,5533,1,0,0,0,
        5538,5535,1,0,0,0,5538,5536,1,0,0,0,5539,307,1,0,0,0,5540,5542,3,
        298,149,0,5541,5540,1,0,0,0,5542,5545,1,0,0,0,5543,5541,1,0,0,0,
        5543,5544,1,0,0,0,5544,5561,1,0,0,0,5545,5543,1,0,0,0,5546,5561,
        3,304,152,0,5547,5549,3,304,152,0,5548,5547,1,0,0,0,5548,5549,1,
        0,0,0,5549,5558,1,0,0,0,5550,5552,3,300,150,0,5551,5553,3,302,151,
        0,5552,5551,1,0,0,0,5552,5553,1,0,0,0,5553,5559,1,0,0,0,5554,5556,
        3,302,151,0,5555,5557,3,300,150,0,5556,5555,1,0,0,0,5556,5557,1,
        0,0,0,5557,5559,1,0,0,0,5558,5550,1,0,0,0,5558,5554,1,0,0,0,5559,
        5561,1,0,0,0,5560,5543,1,0,0,0,5560,5546,1,0,0,0,5560,5548,1,0,0,
        0,5561,309,1,0,0,0,5562,5564,5,10,0,0,5563,5565,5,136,0,0,5564,5563,
        1,0,0,0,5564,5565,1,0,0,0,5565,5566,1,0,0,0,5566,5567,3,1050,525,
        0,5567,5568,3,1086,543,0,5568,5569,5,45,0,0,5569,5570,5,931,0,0,
        5570,5571,3,1066,533,0,5571,5572,5,932,0,0,5572,5585,1,0,0,0,5573,
        5574,5,589,0,0,5574,5575,5,136,0,0,5575,5576,3,1050,525,0,5576,5577,
        5,784,0,0,5577,5578,3,1050,525,0,5578,5585,1,0,0,0,5579,5581,5,208,
        0,0,5580,5582,5,136,0,0,5581,5580,1,0,0,0,5581,5582,1,0,0,0,5582,
        5583,1,0,0,0,5583,5585,3,1052,526,0,5584,5562,1,0,0,0,5584,5573,
        1,0,0,0,5584,5579,1,0,0,0,5585,311,1,0,0,0,5586,5587,5,10,0,0,5587,
        5627,3,624,312,0,5588,5589,5,589,0,0,5589,5590,5,148,0,0,5590,5591,
        3,1030,515,0,5591,5592,5,784,0,0,5592,5593,3,1030,515,0,5593,5627,
        1,0,0,0,5594,5600,3,338,169,0,5595,5596,5,148,0,0,5596,5601,3,1030,
        515,0,5597,5601,3,622,311,0,5598,5601,5,806,0,0,5599,5601,3,620,
        310,0,5600,5595,1,0,0,0,5600,5597,1,0,0,0,5600,5598,1,0,0,0,5600,
        5599,1,0,0,0,5601,5602,1,0,0,0,5602,5604,3,446,223,0,5603,5605,3,
        292,146,0,5604,5603,1,0,0,0,5604,5605,1,0,0,0,5605,5606,1,0,0,0,
        5606,5607,7,30,0,0,5607,5608,7,33,0,0,5608,5627,1,0,0,0,5609,5615,
        5,208,0,0,5610,5611,5,148,0,0,5611,5616,3,1030,515,0,5612,5616,3,
        622,311,0,5613,5616,5,806,0,0,5614,5616,3,620,310,0,5615,5610,1,
        0,0,0,5615,5612,1,0,0,0,5615,5613,1,0,0,0,5615,5614,1,0,0,0,5616,
        5618,1,0,0,0,5617,5619,3,446,223,0,5618,5617,1,0,0,0,5618,5619,1,
        0,0,0,5619,5621,1,0,0,0,5620,5622,3,768,384,0,5621,5620,1,0,0,0,
        5621,5622,1,0,0,0,5622,5627,1,0,0,0,5623,5624,5,208,0,0,5624,5625,
        5,551,0,0,5625,5627,5,370,0,0,5626,5586,1,0,0,0,5626,5588,1,0,0,
        0,5626,5594,1,0,0,0,5626,5609,1,0,0,0,5626,5623,1,0,0,0,5627,313,
        1,0,0,0,5628,5629,5,10,0,0,5629,5630,5,660,0,0,5630,5640,5,495,0,
        0,5631,5632,5,488,0,0,5632,5637,3,316,158,0,5633,5634,5,937,0,0,
        5634,5636,3,316,158,0,5635,5633,1,0,0,0,5636,5639,1,0,0,0,5637,5635,
        1,0,0,0,5637,5638,1,0,0,0,5638,5641,1,0,0,0,5639,5637,1,0,0,0,5640,
        5631,1,0,0,0,5640,5641,1,0,0,0,5641,5657,1,0,0,0,5642,5643,5,208,
        0,0,5643,5644,5,660,0,0,5644,5654,5,495,0,0,5645,5646,5,488,0,0,
        5646,5651,3,316,158,0,5647,5648,5,937,0,0,5648,5650,3,316,158,0,
        5649,5647,1,0,0,0,5650,5653,1,0,0,0,5651,5649,1,0,0,0,5651,5652,
        1,0,0,0,5652,5655,1,0,0,0,5653,5651,1,0,0,0,5654,5645,1,0,0,0,5654,
        5655,1,0,0,0,5655,5657,1,0,0,0,5656,5628,1,0,0,0,5656,5642,1,0,0,
        0,5657,315,1,0,0,0,5658,5659,7,34,0,0,5659,5662,5,931,0,0,5660,5663,
        5,941,0,0,5661,5663,3,1066,533,0,5662,5660,1,0,0,0,5662,5661,1,0,
        0,0,5663,5664,1,0,0,0,5664,5665,5,932,0,0,5665,317,1,0,0,0,5666,
        5667,5,28,0,0,5667,5668,5,747,0,0,5668,5669,3,1056,528,0,5669,5675,
        3,338,169,0,5670,5671,5,931,0,0,5671,5672,3,320,160,0,5672,5673,
        5,932,0,0,5673,5676,1,0,0,0,5674,5676,3,320,160,0,5675,5670,1,0,
        0,0,5675,5674,1,0,0,0,5676,5734,1,0,0,0,5677,5678,5,28,0,0,5678,
        5679,5,747,0,0,5679,5680,3,1056,528,0,5680,5681,3,338,169,0,5681,
        5682,5,136,0,0,5682,5683,3,1050,525,0,5683,5684,5,676,0,0,5684,5685,
        5,402,0,0,5685,5686,5,544,0,0,5686,5694,3,1030,515,0,5687,5688,5,
        825,0,0,5688,5689,5,931,0,0,5689,5690,3,1050,525,0,5690,5691,5,937,
        0,0,5691,5692,3,1052,526,0,5692,5693,5,932,0,0,5693,5695,1,0,0,0,
        5694,5687,1,0,0,0,5694,5695,1,0,0,0,5695,5697,1,0,0,0,5696,5698,
        5,279,0,0,5697,5696,1,0,0,0,5697,5698,1,0,0,0,5698,5734,1,0,0,0,
        5699,5700,5,28,0,0,5700,5701,5,747,0,0,5701,5702,3,1056,528,0,5702,
        5703,3,338,169,0,5703,5704,5,136,0,0,5704,5705,3,1050,525,0,5705,
        5706,5,809,0,0,5706,5707,5,402,0,0,5707,5708,5,544,0,0,5708,5734,
        1,0,0,0,5709,5710,5,28,0,0,5710,5711,5,747,0,0,5711,5712,3,1056,
        528,0,5712,5713,3,338,169,0,5713,5718,3,326,163,0,5714,5715,5,937,
        0,0,5715,5717,3,326,163,0,5716,5714,1,0,0,0,5717,5720,1,0,0,0,5718,
        5716,1,0,0,0,5718,5719,1,0,0,0,5719,5734,1,0,0,0,5720,5718,1,0,0,
        0,5721,5722,5,28,0,0,5722,5723,5,747,0,0,5723,5724,3,1056,528,0,
        5724,5725,3,338,169,0,5725,5730,3,328,164,0,5726,5727,5,937,0,0,
        5727,5729,3,328,164,0,5728,5726,1,0,0,0,5729,5732,1,0,0,0,5730,5728,
        1,0,0,0,5730,5731,1,0,0,0,5731,5734,1,0,0,0,5732,5730,1,0,0,0,5733,
        5666,1,0,0,0,5733,5677,1,0,0,0,5733,5699,1,0,0,0,5733,5709,1,0,0,
        0,5733,5721,1,0,0,0,5734,319,1,0,0,0,5735,5740,3,322,161,0,5736,
        5737,5,937,0,0,5737,5739,3,322,161,0,5738,5736,1,0,0,0,5739,5742,
        1,0,0,0,5740,5738,1,0,0,0,5740,5741,1,0,0,0,5741,321,1,0,0,0,5742,
        5740,1,0,0,0,5743,5745,5,136,0,0,5744,5743,1,0,0,0,5744,5745,1,0,
        0,0,5745,5746,1,0,0,0,5746,5747,3,1050,525,0,5747,5748,3,324,162,
        0,5748,323,1,0,0,0,5749,5750,5,208,0,0,5750,5779,5,182,0,0,5751,
        5752,5,676,0,0,5752,5753,5,182,0,0,5753,5754,3,1056,528,0,5754,5755,
        5,927,0,0,5755,5756,5,442,0,0,5756,5779,1,0,0,0,5757,5759,5,676,
        0,0,5758,5757,1,0,0,0,5758,5759,1,0,0,0,5759,5760,1,0,0,0,5760,5761,
        5,448,0,0,5761,5766,5,458,0,0,5762,5763,5,208,0,0,5763,5764,5,448,
        0,0,5764,5766,5,458,0,0,5765,5758,1,0,0,0,5765,5762,1,0,0,0,5766,
        5779,1,0,0,0,5767,5768,5,676,0,0,5768,5770,5,168,0,0,5769,5767,1,
        0,0,0,5769,5770,1,0,0,0,5770,5771,1,0,0,0,5771,5773,5,803,0,0,5772,
        5769,1,0,0,0,5772,5773,1,0,0,0,5773,5774,1,0,0,0,5774,5779,3,1086,
        543,0,5775,5779,3,794,397,0,5776,5777,5,809,0,0,5777,5779,5,138,
        0,0,5778,5749,1,0,0,0,5778,5751,1,0,0,0,5778,5765,1,0,0,0,5778,5772,
        1,0,0,0,5778,5775,1,0,0,0,5778,5776,1,0,0,0,5779,325,1,0,0,0,5780,
        5782,5,136,0,0,5781,5780,1,0,0,0,5781,5782,1,0,0,0,5782,5783,1,0,
        0,0,5783,5784,3,1050,525,0,5784,5785,3,354,177,0,5785,327,1,0,0,
        0,5786,5787,5,136,0,0,5787,5788,3,1050,525,0,5788,5789,3,358,179,
        0,5789,329,1,0,0,0,5790,5791,5,28,0,0,5791,5793,5,754,0,0,5792,5794,
        3,800,400,0,5793,5792,1,0,0,0,5793,5794,1,0,0,0,5794,5795,1,0,0,
        0,5795,5796,3,1056,528,0,5796,5797,3,346,173,0,5797,331,1,0,0,0,
        5798,5799,5,28,0,0,5799,5801,5,757,0,0,5800,5802,3,800,400,0,5801,
        5800,1,0,0,0,5801,5802,1,0,0,0,5802,5803,1,0,0,0,5803,5804,3,1056,
        528,0,5804,5805,3,152,76,0,5805,5911,1,0,0,0,5806,5807,5,28,0,0,
        5807,5809,5,757,0,0,5808,5810,3,800,400,0,5809,5808,1,0,0,0,5809,
        5810,1,0,0,0,5810,5811,1,0,0,0,5811,5812,3,1056,528,0,5812,5813,
        7,27,0,0,5813,5814,5,14,0,0,5814,5815,3,1026,513,0,5815,5911,1,0,
        0,0,5816,5817,5,28,0,0,5817,5819,5,757,0,0,5818,5820,3,800,400,0,
        5819,5818,1,0,0,0,5819,5820,1,0,0,0,5820,5821,1,0,0,0,5821,5822,
        3,1056,528,0,5822,5826,5,676,0,0,5823,5824,5,838,0,0,5824,5825,5,
        921,0,0,5825,5827,3,1030,515,0,5826,5823,1,0,0,0,5826,5827,1,0,0,
        0,5827,5829,1,0,0,0,5828,5830,3,662,331,0,5829,5828,1,0,0,0,5829,
        5830,1,0,0,0,5830,5832,1,0,0,0,5831,5833,3,670,335,0,5832,5831,1,
        0,0,0,5832,5833,1,0,0,0,5833,5835,1,0,0,0,5834,5836,3,664,332,0,
        5835,5834,1,0,0,0,5835,5836,1,0,0,0,5836,5838,1,0,0,0,5837,5839,
        3,666,333,0,5838,5837,1,0,0,0,5838,5839,1,0,0,0,5839,5841,1,0,0,
        0,5840,5842,3,794,397,0,5841,5840,1,0,0,0,5841,5842,1,0,0,0,5842,
        5844,1,0,0,0,5843,5845,3,654,327,0,5844,5843,1,0,0,0,5844,5845,1,
        0,0,0,5845,5911,1,0,0,0,5846,5847,5,28,0,0,5847,5849,5,757,0,0,5848,
        5850,3,800,400,0,5849,5848,1,0,0,0,5849,5850,1,0,0,0,5850,5851,1,
        0,0,0,5851,5852,3,1056,528,0,5852,5854,5,809,0,0,5853,5855,5,838,
        0,0,5854,5853,1,0,0,0,5854,5855,1,0,0,0,5855,5857,1,0,0,0,5856,5858,
        5,655,0,0,5857,5856,1,0,0,0,5857,5858,1,0,0,0,5858,5860,1,0,0,0,
        5859,5861,5,27,0,0,5860,5859,1,0,0,0,5860,5861,1,0,0,0,5861,5863,
        1,0,0,0,5862,5864,5,822,0,0,5863,5862,1,0,0,0,5863,5864,1,0,0,0,
        5864,5866,1,0,0,0,5865,5867,5,741,0,0,5866,5865,1,0,0,0,5866,5867,
        1,0,0,0,5867,5869,1,0,0,0,5868,5870,5,138,0,0,5869,5868,1,0,0,0,
        5869,5870,1,0,0,0,5870,5872,1,0,0,0,5871,5873,3,652,326,0,5872,5871,
        1,0,0,0,5872,5873,1,0,0,0,5873,5911,1,0,0,0,5874,5875,5,28,0,0,5875,
        5877,5,757,0,0,5876,5878,3,800,400,0,5877,5876,1,0,0,0,5877,5878,
        1,0,0,0,5878,5879,1,0,0,0,5879,5880,3,1056,528,0,5880,5881,3,354,
        177,0,5881,5911,1,0,0,0,5882,5883,5,28,0,0,5883,5885,5,757,0,0,5884,
        5886,3,800,400,0,5885,5884,1,0,0,0,5885,5886,1,0,0,0,5886,5887,1,
        0,0,0,5887,5888,3,1056,528,0,5888,5889,3,358,179,0,5889,5911,1,0,
        0,0,5890,5891,5,28,0,0,5891,5893,5,757,0,0,5892,5894,3,800,400,0,
        5893,5892,1,0,0,0,5893,5894,1,0,0,0,5894,5895,1,0,0,0,5895,5896,
        3,1056,528,0,5896,5897,5,429,0,0,5897,5898,5,45,0,0,5898,5899,3,
        672,336,0,5899,5911,1,0,0,0,5900,5901,5,28,0,0,5901,5903,5,757,0,
        0,5902,5904,3,800,400,0,5903,5902,1,0,0,0,5903,5904,1,0,0,0,5904,
        5905,1,0,0,0,5905,5906,3,1056,528,0,5906,5907,5,429,0,0,5907,5908,
        5,845,0,0,5908,5909,3,1066,533,0,5909,5911,1,0,0,0,5910,5798,1,0,
        0,0,5910,5806,1,0,0,0,5910,5816,1,0,0,0,5910,5846,1,0,0,0,5910,5874,
        1,0,0,0,5910,5882,1,0,0,0,5910,5890,1,0,0,0,5910,5900,1,0,0,0,5911,
        333,1,0,0,0,5912,5913,5,28,0,0,5913,5915,5,816,0,0,5914,5916,3,800,
        400,0,5915,5914,1,0,0,0,5915,5916,1,0,0,0,5916,5917,1,0,0,0,5917,
        5918,3,1030,515,0,5918,5919,3,344,172,0,5919,335,1,0,0,0,5920,5921,
        5,28,0,0,5921,5923,5,834,0,0,5922,5924,3,800,400,0,5923,5922,1,0,
        0,0,5923,5924,1,0,0,0,5924,5925,1,0,0,0,5925,5926,3,1056,528,0,5926,
        5927,5,589,0,0,5927,5928,5,784,0,0,5928,5929,3,1056,528,0,5929,6089,
        1,0,0,0,5930,5931,5,28,0,0,5931,5933,5,834,0,0,5932,5934,3,800,400,
        0,5933,5932,1,0,0,0,5933,5934,1,0,0,0,5934,5935,1,0,0,0,5935,5936,
        3,1056,528,0,5936,5937,5,676,0,0,5937,5938,3,794,397,0,5938,6089,
        1,0,0,0,5939,5940,5,28,0,0,5940,5942,5,834,0,0,5941,5943,3,800,400,
        0,5942,5941,1,0,0,0,5942,5943,1,0,0,0,5943,5944,1,0,0,0,5944,5945,
        3,1056,528,0,5945,5946,5,809,0,0,5946,5947,5,138,0,0,5947,6089,1,
        0,0,0,5948,5949,5,28,0,0,5949,5950,5,834,0,0,5950,5951,3,1056,528,
        0,5951,5952,5,676,0,0,5952,5953,5,665,0,0,5953,6089,1,0,0,0,5954,
        5955,5,28,0,0,5955,5956,5,834,0,0,5956,5957,3,1056,528,0,5957,5958,
        5,809,0,0,5958,5959,5,665,0,0,5959,6089,1,0,0,0,5960,5961,5,28,0,
        0,5961,5963,5,834,0,0,5962,5964,3,800,400,0,5963,5962,1,0,0,0,5963,
        5964,1,0,0,0,5964,5965,1,0,0,0,5965,5966,3,1056,528,0,5966,5967,
        3,354,177,0,5967,6089,1,0,0,0,5968,5969,5,28,0,0,5969,5971,5,834,
        0,0,5970,5972,3,800,400,0,5971,5970,1,0,0,0,5971,5972,1,0,0,0,5972,
        5973,1,0,0,0,5973,5974,3,1056,528,0,5974,5975,3,358,179,0,5975,6089,
        1,0,0,0,5976,5977,5,28,0,0,5977,5979,5,834,0,0,5978,5980,3,800,400,
        0,5979,5978,1,0,0,0,5979,5980,1,0,0,0,5980,5981,1,0,0,0,5981,5982,
        3,1056,528,0,5982,5983,5,10,0,0,5983,5984,5,626,0,0,5984,5985,5,
        5,0,0,5985,5986,5,544,0,0,5986,5987,3,1030,515,0,5987,5988,5,488,
        0,0,5988,5989,3,446,223,0,5989,6089,1,0,0,0,5990,5991,5,28,0,0,5991,
        5993,5,834,0,0,5992,5994,3,800,400,0,5993,5992,1,0,0,0,5993,5994,
        1,0,0,0,5994,5995,1,0,0,0,5995,5996,3,1056,528,0,5996,5997,5,208,
        0,0,5997,5998,5,626,0,0,5998,5999,5,5,0,0,5999,6000,5,544,0,0,6000,
        6001,3,1030,515,0,6001,6089,1,0,0,0,6002,6003,5,28,0,0,6003,6005,
        5,834,0,0,6004,6006,3,800,400,0,6005,6004,1,0,0,0,6005,6006,1,0,
        0,0,6006,6007,1,0,0,0,6007,6008,3,1056,528,0,6008,6009,5,10,0,0,
        6009,6010,5,626,0,0,6010,6011,5,5,0,0,6011,6012,5,544,0,0,6012,6013,
        3,1030,515,0,6013,6014,5,488,0,0,6014,6015,3,446,223,0,6015,6016,
        5,937,0,0,6016,6017,5,208,0,0,6017,6018,5,626,0,0,6018,6019,5,5,
        0,0,6019,6020,5,544,0,0,6020,6021,3,1030,515,0,6021,6089,1,0,0,0,
        6022,6023,5,28,0,0,6023,6025,5,834,0,0,6024,6026,3,800,400,0,6025,
        6024,1,0,0,0,6025,6026,1,0,0,0,6026,6027,1,0,0,0,6027,6028,3,1056,
        528,0,6028,6029,5,208,0,0,6029,6030,5,17,0,0,6030,6031,5,626,0,0,
        6031,6032,5,5,0,0,6032,6033,5,543,0,0,6033,6089,1,0,0,0,6034,6035,
        5,28,0,0,6035,6036,5,834,0,0,6036,6037,3,1056,528,0,6037,6039,3,
        338,169,0,6038,6040,5,136,0,0,6039,6038,1,0,0,0,6039,6040,1,0,0,
        0,6040,6041,1,0,0,0,6041,6042,3,1030,515,0,6042,6043,5,676,0,0,6043,
        6044,5,402,0,0,6044,6045,5,544,0,0,6045,6053,3,1030,515,0,6046,6047,
        5,825,0,0,6047,6048,5,931,0,0,6048,6049,3,1050,525,0,6049,6050,5,
        937,0,0,6050,6051,3,1052,526,0,6051,6052,5,932,0,0,6052,6054,1,0,
        0,0,6053,6046,1,0,0,0,6053,6054,1,0,0,0,6054,6056,1,0,0,0,6055,6057,
        5,279,0,0,6056,6055,1,0,0,0,6056,6057,1,0,0,0,6057,6089,1,0,0,0,
        6058,6059,5,28,0,0,6059,6060,5,834,0,0,6060,6061,3,1056,528,0,6061,
        6063,3,338,169,0,6062,6064,5,136,0,0,6063,6062,1,0,0,0,6063,6064,
        1,0,0,0,6064,6065,1,0,0,0,6065,6066,3,1030,515,0,6066,6067,5,809,
        0,0,6067,6068,5,402,0,0,6068,6069,5,544,0,0,6069,6089,1,0,0,0,6070,
        6071,5,28,0,0,6071,6072,5,834,0,0,6072,6073,3,1056,528,0,6073,6075,
        3,338,169,0,6074,6076,5,136,0,0,6075,6074,1,0,0,0,6075,6076,1,0,
        0,0,6076,6077,1,0,0,0,6077,6078,3,1030,515,0,6078,6079,3,354,177,
        0,6079,6089,1,0,0,0,6080,6081,5,28,0,0,6081,6082,5,834,0,0,6082,
        6083,3,1056,528,0,6083,6084,3,338,169,0,6084,6085,5,136,0,0,6085,
        6086,3,1030,515,0,6086,6087,3,358,179,0,6087,6089,1,0,0,0,6088,5920,
        1,0,0,0,6088,5930,1,0,0,0,6088,5939,1,0,0,0,6088,5948,1,0,0,0,6088,
        5954,1,0,0,0,6088,5960,1,0,0,0,6088,5968,1,0,0,0,6088,5976,1,0,0,
        0,6088,5990,1,0,0,0,6088,6002,1,0,0,0,6088,6022,1,0,0,0,6088,6034,
        1,0,0,0,6088,6058,1,0,0,0,6088,6070,1,0,0,0,6088,6080,1,0,0,0,6089,
        337,1,0,0,0,6090,6091,7,35,0,0,6091,339,1,0,0,0,6092,6093,5,28,0,
        0,6093,6095,5,838,0,0,6094,6096,3,800,400,0,6095,6094,1,0,0,0,6095,
        6096,1,0,0,0,6096,6097,1,0,0,0,6097,6098,3,350,175,0,6098,341,1,
        0,0,0,6099,6100,3,1030,515,0,6100,6101,5,216,0,0,6101,6102,5,265,
        0,0,6102,6103,5,784,0,0,6103,6104,5,8,0,0,6104,6105,3,1030,515,0,
        6105,6106,5,927,0,0,6106,6114,3,1030,515,0,6107,6108,5,937,0,0,6108,
        6109,3,1030,515,0,6109,6110,5,927,0,0,6110,6111,3,1030,515,0,6111,
        6113,1,0,0,0,6112,6107,1,0,0,0,6113,6116,1,0,0,0,6114,6112,1,0,0,
        0,6114,6115,1,0,0,0,6115,6118,1,0,0,0,6116,6114,1,0,0,0,6117,6119,
        3,178,89,0,6118,6117,1,0,0,0,6118,6119,1,0,0,0,6119,6153,1,0,0,0,
        6120,6121,3,1030,515,0,6121,6122,5,200,0,0,6122,6133,5,265,0,0,6123,
        6124,5,784,0,0,6124,6125,5,8,0,0,6125,6126,3,1030,515,0,6126,6127,
        5,927,0,0,6127,6128,3,1030,515,0,6128,6129,5,937,0,0,6129,6130,3,
        1030,515,0,6130,6131,5,927,0,0,6131,6132,3,1030,515,0,6132,6134,
        1,0,0,0,6133,6123,1,0,0,0,6133,6134,1,0,0,0,6134,6153,1,0,0,0,6135,
        6136,3,1030,515,0,6136,6137,5,551,0,0,6137,6153,1,0,0,0,6138,6140,
        3,800,400,0,6139,6138,1,0,0,0,6139,6140,1,0,0,0,6140,6141,1,0,0,
        0,6141,6142,3,1030,515,0,6142,6143,5,676,0,0,6143,6144,3,794,397,
        0,6144,6153,1,0,0,0,6145,6147,3,800,400,0,6146,6145,1,0,0,0,6146,
        6147,1,0,0,0,6147,6148,1,0,0,0,6148,6149,3,1030,515,0,6149,6150,
        5,809,0,0,6150,6151,5,138,0,0,6151,6153,1,0,0,0,6152,6099,1,0,0,
        0,6152,6120,1,0,0,0,6152,6135,1,0,0,0,6152,6139,1,0,0,0,6152,6146,
        1,0,0,0,6153,343,1,0,0,0,6154,6155,5,589,0,0,6155,6156,5,784,0,0,
        6156,6189,3,1030,515,0,6157,6158,5,601,0,0,6158,6189,5,520,0,0,6159,
        6160,5,2,0,0,6160,6161,5,17,0,0,6161,6189,5,566,0,0,6162,6163,5,
        10,0,0,6163,6164,5,192,0,0,6164,6165,5,49,0,0,6165,6166,5,481,0,
        0,6166,6167,5,620,0,0,6167,6168,3,1030,515,0,6168,6169,5,784,0,0,
        6169,6170,5,666,0,0,6170,6171,5,354,0,0,6171,6172,3,1030,515,0,6172,
        6189,1,0,0,0,6173,6174,5,588,0,0,6174,6180,5,192,0,0,6175,6176,5,
        49,0,0,6176,6177,5,481,0,0,6177,6178,5,620,0,0,6178,6181,3,1030,
        515,0,6179,6181,5,50,0,0,6180,6175,1,0,0,0,6180,6179,1,0,0,0,6181,
        6182,1,0,0,0,6182,6183,5,285,0,0,6183,6184,5,666,0,0,6184,6185,5,
        354,0,0,6185,6189,3,1030,515,0,6186,6189,3,354,177,0,6187,6189,3,
        358,179,0,6188,6154,1,0,0,0,6188,6157,1,0,0,0,6188,6159,1,0,0,0,
        6188,6162,1,0,0,0,6188,6173,1,0,0,0,6188,6186,1,0,0,0,6188,6187,
        1,0,0,0,6189,345,1,0,0,0,6190,6191,5,589,0,0,6191,6192,5,784,0,0,
        6192,6228,3,1056,528,0,6193,6194,7,36,0,0,6194,6228,3,648,324,0,
        6195,6196,5,809,0,0,6196,6228,5,23,0,0,6197,6198,5,676,0,0,6198,
        6199,5,402,0,0,6199,6200,5,544,0,0,6200,6207,3,1030,515,0,6201,6202,
        5,937,0,0,6202,6203,5,402,0,0,6203,6204,5,544,0,0,6204,6206,3,1030,
        515,0,6205,6201,1,0,0,0,6206,6209,1,0,0,0,6207,6205,1,0,0,0,6207,
        6208,1,0,0,0,6208,6228,1,0,0,0,6209,6207,1,0,0,0,6210,6211,5,809,
        0,0,6211,6212,5,402,0,0,6212,6213,5,544,0,0,6213,6220,3,1030,515,
        0,6214,6215,5,937,0,0,6215,6216,5,402,0,0,6216,6217,5,544,0,0,6217,
        6219,3,1030,515,0,6218,6214,1,0,0,0,6219,6222,1,0,0,0,6220,6218,
        1,0,0,0,6220,6221,1,0,0,0,6221,6228,1,0,0,0,6222,6220,1,0,0,0,6223,
        6224,5,676,0,0,6224,6228,3,794,397,0,6225,6226,5,809,0,0,6226,6228,
        5,138,0,0,6227,6190,1,0,0,0,6227,6193,1,0,0,0,6227,6195,1,0,0,0,
        6227,6197,1,0,0,0,6227,6210,1,0,0,0,6227,6223,1,0,0,0,6227,6225,
        1,0,0,0,6228,347,1,0,0,0,6229,6231,3,800,400,0,6230,6229,1,0,0,0,
        6230,6231,1,0,0,0,6231,6232,1,0,0,0,6232,6233,3,1030,515,0,6233,
        6240,5,676,0,0,6234,6235,5,21,0,0,6235,6236,5,921,0,0,6236,6237,
        5,931,0,0,6237,6238,3,1026,513,0,6238,6239,5,932,0,0,6239,6241,1,
        0,0,0,6240,6234,1,0,0,0,6240,6241,1,0,0,0,6241,6248,1,0,0,0,6242,
        6243,5,92,0,0,6243,6244,5,921,0,0,6244,6245,5,931,0,0,6245,6246,
        3,1026,513,0,6246,6247,5,932,0,0,6247,6249,1,0,0,0,6248,6242,1,0,
        0,0,6248,6249,1,0,0,0,6249,6251,1,0,0,0,6250,6252,3,794,397,0,6251,
        6250,1,0,0,0,6251,6252,1,0,0,0,6252,6266,1,0,0,0,6253,6255,3,800,
        400,0,6254,6253,1,0,0,0,6254,6255,1,0,0,0,6255,6256,1,0,0,0,6256,
        6257,3,1030,515,0,6257,6258,5,809,0,0,6258,6259,5,138,0,0,6259,6266,
        1,0,0,0,6260,6261,3,1030,515,0,6261,6262,5,589,0,0,6262,6263,5,784,
        0,0,6263,6264,3,1030,515,0,6264,6266,1,0,0,0,6265,6230,1,0,0,0,6265,
        6254,1,0,0,0,6265,6260,1,0,0,0,6266,349,1,0,0,0,6267,6269,3,1028,
        514,0,6268,6267,1,0,0,0,6268,6269,1,0,0,0,6269,6275,1,0,0,0,6270,
        6276,5,738,0,0,6271,6273,5,610,0,0,6272,6274,3,798,399,0,6273,6272,
        1,0,0,0,6273,6274,1,0,0,0,6274,6276,1,0,0,0,6275,6270,1,0,0,0,6275,
        6271,1,0,0,0,6276,6315,1,0,0,0,6277,6279,3,1028,514,0,6278,6277,
        1,0,0,0,6278,6279,1,0,0,0,6279,6280,1,0,0,0,6280,6281,5,2,0,0,6281,
        6282,5,17,0,0,6282,6315,5,566,0,0,6283,6284,3,1028,514,0,6284,6285,
        5,589,0,0,6285,6286,5,784,0,0,6286,6287,3,1030,515,0,6287,6315,1,
        0,0,0,6288,6289,3,1028,514,0,6289,6290,3,354,177,0,6290,6315,1,0,
        0,0,6291,6292,3,1028,514,0,6292,6293,3,358,179,0,6293,6315,1,0,0,
        0,6294,6295,3,1028,514,0,6295,6296,5,809,0,0,6296,6301,3,1030,515,
        0,6297,6298,5,937,0,0,6298,6300,3,1030,515,0,6299,6297,1,0,0,0,6300,
        6303,1,0,0,0,6301,6299,1,0,0,0,6301,6302,1,0,0,0,6302,6315,1,0,0,
        0,6303,6301,1,0,0,0,6304,6305,3,1030,515,0,6305,6306,5,676,0,0,6306,
        6311,3,688,344,0,6307,6308,5,937,0,0,6308,6310,3,688,344,0,6309,
        6307,1,0,0,0,6310,6313,1,0,0,0,6311,6309,1,0,0,0,6311,6312,1,0,0,
        0,6312,6315,1,0,0,0,6313,6311,1,0,0,0,6314,6268,1,0,0,0,6314,6278,
        1,0,0,0,6314,6283,1,0,0,0,6314,6288,1,0,0,0,6314,6291,1,0,0,0,6314,
        6294,1,0,0,0,6314,6304,1,0,0,0,6315,351,1,0,0,0,6316,6318,5,676,
        0,0,6317,6319,3,136,68,0,6318,6317,1,0,0,0,6318,6319,1,0,0,0,6319,
        6321,1,0,0,0,6320,6322,3,138,69,0,6321,6320,1,0,0,0,6321,6322,1,
        0,0,0,6322,6324,1,0,0,0,6323,6325,3,144,72,0,6324,6323,1,0,0,0,6324,
        6325,1,0,0,0,6325,6353,1,0,0,0,6326,6327,5,809,0,0,6327,6330,3,1018,
        509,0,6328,6329,5,937,0,0,6329,6331,3,1018,509,0,6330,6328,1,0,0,
        0,6330,6331,1,0,0,0,6331,6353,1,0,0,0,6332,6333,5,676,0,0,6333,6334,
        5,604,0,0,6334,6335,5,921,0,0,6335,6353,3,1030,515,0,6336,6353,3,
        354,177,0,6337,6353,3,358,179,0,6338,6339,3,1030,515,0,6339,6340,
        5,589,0,0,6340,6341,5,784,0,0,6341,6345,3,1030,515,0,6342,6343,5,
        652,0,0,6343,6344,5,921,0,0,6344,6346,3,556,278,0,6345,6342,1,0,
        0,0,6345,6346,1,0,0,0,6346,6353,1,0,0,0,6347,6348,3,1030,515,0,6348,
        6349,5,208,0,0,6349,6350,5,486,0,0,6350,6351,5,813,0,0,6351,6353,
        1,0,0,0,6352,6316,1,0,0,0,6352,6326,1,0,0,0,6352,6332,1,0,0,0,6352,
        6336,1,0,0,0,6352,6337,1,0,0,0,6352,6338,1,0,0,0,6352,6347,1,0,0,
        0,6353,353,1,0,0,0,6354,6355,5,676,0,0,6355,6356,3,356,178,0,6356,
        355,1,0,0,0,6357,6358,5,754,0,0,6358,6359,3,1056,528,0,6359,6360,
        5,921,0,0,6360,6368,3,1012,506,0,6361,6362,5,937,0,0,6362,6363,3,
        1056,528,0,6363,6364,5,921,0,0,6364,6365,3,1012,506,0,6365,6367,
        1,0,0,0,6366,6361,1,0,0,0,6367,6370,1,0,0,0,6368,6366,1,0,0,0,6368,
        6369,1,0,0,0,6369,357,1,0,0,0,6370,6368,1,0,0,0,6371,6372,5,809,
        0,0,6372,6373,3,360,180,0,6373,359,1,0,0,0,6374,6375,5,754,0,0,6375,
        6380,3,1056,528,0,6376,6377,5,937,0,0,6377,6379,3,1056,528,0,6378,
        6376,1,0,0,0,6379,6382,1,0,0,0,6380,6378,1,0,0,0,6380,6381,1,0,0,
        0,6381,361,1,0,0,0,6382,6380,1,0,0,0,6383,6431,3,364,182,0,6384,
        6431,3,366,183,0,6385,6431,3,372,186,0,6386,6431,3,374,187,0,6387,
        6431,3,376,188,0,6388,6431,3,378,189,0,6389,6431,3,390,195,0,6390,
        6431,3,392,196,0,6391,6431,3,404,202,0,6392,6431,3,406,203,0,6393,
        6431,3,408,204,0,6394,6431,3,418,209,0,6395,6431,3,422,211,0,6396,
        6431,3,434,217,0,6397,6431,3,436,218,0,6398,6431,3,440,220,0,6399,
        6431,3,442,221,0,6400,6431,3,448,224,0,6401,6431,3,450,225,0,6402,
        6431,3,456,228,0,6403,6431,3,508,254,0,6404,6431,3,458,229,0,6405,
        6431,3,468,234,0,6406,6431,3,470,235,0,6407,6431,3,472,236,0,6408,
        6431,3,474,237,0,6409,6431,3,476,238,0,6410,6431,3,478,239,0,6411,
        6431,3,480,240,0,6412,6431,3,482,241,0,6413,6431,3,486,243,0,6414,
        6431,3,488,244,0,6415,6431,3,490,245,0,6416,6431,3,500,250,0,6417,
        6431,3,502,251,0,6418,6431,3,514,257,0,6419,6431,3,570,285,0,6420,
        6431,3,586,293,0,6421,6431,3,598,299,0,6422,6431,3,636,318,0,6423,
        6431,3,642,321,0,6424,6431,3,644,322,0,6425,6431,3,646,323,0,6426,
        6431,3,656,328,0,6427,6431,3,676,338,0,6428,6431,3,680,340,0,6429,
        6431,3,682,341,0,6430,6383,1,0,0,0,6430,6384,1,0,0,0,6430,6385,1,
        0,0,0,6430,6386,1,0,0,0,6430,6387,1,0,0,0,6430,6388,1,0,0,0,6430,
        6389,1,0,0,0,6430,6390,1,0,0,0,6430,6391,1,0,0,0,6430,6392,1,0,0,
        0,6430,6393,1,0,0,0,6430,6394,1,0,0,0,6430,6395,1,0,0,0,6430,6396,
        1,0,0,0,6430,6397,1,0,0,0,6430,6398,1,0,0,0,6430,6399,1,0,0,0,6430,
        6400,1,0,0,0,6430,6401,1,0,0,0,6430,6402,1,0,0,0,6430,6403,1,0,0,
        0,6430,6404,1,0,0,0,6430,6405,1,0,0,0,6430,6406,1,0,0,0,6430,6407,
        1,0,0,0,6430,6408,1,0,0,0,6430,6409,1,0,0,0,6430,6410,1,0,0,0,6430,
        6411,1,0,0,0,6430,6412,1,0,0,0,6430,6413,1,0,0,0,6430,6414,1,0,0,
        0,6430,6415,1,0,0,0,6430,6416,1,0,0,0,6430,6417,1,0,0,0,6430,6418,
        1,0,0,0,6430,6419,1,0,0,0,6430,6420,1,0,0,0,6430,6421,1,0,0,0,6430,
        6422,1,0,0,0,6430,6423,1,0,0,0,6430,6424,1,0,0,0,6430,6425,1,0,0,
        0,6430,6426,1,0,0,0,6430,6427,1,0,0,0,6430,6428,1,0,0,0,6430,6429,
        1,0,0,0,6431,363,1,0,0,0,6432,6433,5,155,0,0,6433,6434,5,6,0,0,6434,
        6435,3,1030,515,0,6435,6436,5,11,0,0,6436,6437,5,921,0,0,6437,6438,
        3,1030,515,0,6438,6439,5,12,0,0,6439,6440,5,921,0,0,6440,6444,3,
        1024,512,0,6441,6442,5,275,0,0,6442,6443,5,921,0,0,6443,6445,3,1030,
        515,0,6444,6441,1,0,0,0,6444,6445,1,0,0,0,6445,6449,1,0,0,0,6446,
        6447,5,377,0,0,6447,6448,5,921,0,0,6448,6450,3,1030,515,0,6449,6446,
        1,0,0,0,6449,6450,1,0,0,0,6450,6451,1,0,0,0,6451,6452,5,213,0,0,
        6452,6453,5,921,0,0,6453,6457,3,1024,512,0,6454,6455,5,435,0,0,6455,
        6456,5,921,0,0,6456,6458,3,556,278,0,6457,6454,1,0,0,0,6457,6458,
        1,0,0,0,6458,6459,1,0,0,0,6459,6460,5,211,0,0,6460,6461,5,921,0,
        0,6461,6465,7,37,0,0,6462,6463,5,586,0,0,6463,6464,5,921,0,0,6464,
        6466,3,1020,510,0,6465,6462,1,0,0,0,6465,6466,1,0,0,0,6466,6470,
        1,0,0,0,6467,6468,5,584,0,0,6468,6469,5,921,0,0,6469,6471,3,1022,
        511,0,6470,6467,1,0,0,0,6470,6471,1,0,0,0,6471,6473,1,0,0,0,6472,
        6474,3,794,397,0,6473,6472,1,0,0,0,6473,6474,1,0,0,0,6474,365,1,
        0,0,0,6475,6477,5,155,0,0,6476,6478,3,804,402,0,6477,6476,1,0,0,
        0,6477,6478,1,0,0,0,6478,6479,1,0,0,0,6479,6481,5,15,0,0,6480,6482,
        3,802,401,0,6481,6480,1,0,0,0,6481,6482,1,0,0,0,6482,6483,1,0,0,
        0,6483,6484,3,1030,515,0,6484,6485,5,838,0,0,6485,6486,5,921,0,0,
        6486,6487,3,1030,515,0,6487,6488,5,655,0,0,6488,6489,5,921,0,0,6489,
        6490,3,1024,512,0,6490,6491,5,327,0,0,6491,6492,5,931,0,0,6492,6493,
        5,245,0,0,6493,6494,5,931,0,0,6494,6495,3,368,184,0,6495,6496,5,
        932,0,0,6496,6497,5,932,0,0,6497,6498,5,762,0,0,6498,6499,3,370,
        185,0,6499,367,1,0,0,0,6500,6504,3,1128,564,0,6501,6504,3,870,435,
        0,6502,6504,3,674,337,0,6503,6500,1,0,0,0,6503,6501,1,0,0,0,6503,
        6502,1,0,0,0,6504,369,1,0,0,0,6505,6506,3,4,2,0,6506,371,1,0,0,0,
        6507,6509,5,155,0,0,6508,6510,3,804,402,0,6509,6508,1,0,0,0,6509,
        6510,1,0,0,0,6510,6511,1,0,0,0,6511,6512,5,32,0,0,6512,6514,5,354,
        0,0,6513,6515,3,802,401,0,6514,6513,1,0,0,0,6514,6515,1,0,0,0,6515,
        6516,1,0,0,0,6516,6517,3,1030,515,0,6517,6518,5,39,0,0,6518,6519,
        5,921,0,0,6519,6520,3,1030,515,0,6520,6521,5,35,0,0,6521,6522,5,
        921,0,0,6522,6526,3,1024,512,0,6523,6524,5,38,0,0,6524,6525,5,921,
        0,0,6525,6527,3,1024,512,0,6526,6523,1,0,0,0,6526,6527,1,0,0,0,6527,
        6528,1,0,0,0,6528,6529,5,33,0,0,6529,6530,5,921,0,0,6530,6531,5,
        931,0,0,6531,6532,3,1024,512,0,6532,6539,5,932,0,0,6533,6534,5,36,
        0,0,6534,6535,5,921,0,0,6535,6536,5,931,0,0,6536,6537,3,1024,512,
        0,6537,6538,5,932,0,0,6538,6540,1,0,0,0,6539,6533,1,0,0,0,6539,6540,
        1,0,0,0,6540,6541,1,0,0,0,6541,6542,5,217,0,0,6542,6543,5,921,0,
        0,6543,6545,3,556,278,0,6544,6546,3,794,397,0,6545,6544,1,0,0,0,
        6545,6546,1,0,0,0,6546,6622,1,0,0,0,6547,6549,5,155,0,0,6548,6550,
        3,804,402,0,6549,6548,1,0,0,0,6549,6550,1,0,0,0,6550,6551,1,0,0,
        0,6551,6552,5,32,0,0,6552,6554,5,354,0,0,6553,6555,3,802,401,0,6554,
        6553,1,0,0,0,6554,6555,1,0,0,0,6555,6556,1,0,0,0,6556,6557,3,1030,
        515,0,6557,6558,5,39,0,0,6558,6559,5,921,0,0,6559,6560,3,1030,515,
        0,6560,6561,5,81,0,0,6561,6562,5,921,0,0,6562,6563,3,1024,512,0,
        6563,6564,5,74,0,0,6564,6565,5,921,0,0,6565,6569,3,1024,512,0,6566,
        6567,5,38,0,0,6567,6568,5,921,0,0,6568,6570,3,1024,512,0,6569,6566,
        1,0,0,0,6569,6570,1,0,0,0,6570,6571,1,0,0,0,6571,6572,5,33,0,0,6572,
        6573,5,921,0,0,6573,6574,5,931,0,0,6574,6575,3,1024,512,0,6575,6582,
        5,932,0,0,6576,6577,5,36,0,0,6577,6578,5,921,0,0,6578,6579,5,931,
        0,0,6579,6580,3,1024,512,0,6580,6581,5,932,0,0,6581,6583,1,0,0,0,
        6582,6576,1,0,0,0,6582,6583,1,0,0,0,6583,6584,1,0,0,0,6584,6585,
        5,217,0,0,6585,6586,5,921,0,0,6586,6588,3,556,278,0,6587,6589,3,
        794,397,0,6588,6587,1,0,0,0,6588,6589,1,0,0,0,6589,6622,1,0,0,0,
        6590,6591,5,155,0,0,6591,6592,3,804,402,0,6592,6593,5,32,0,0,6593,
        6594,5,354,0,0,6594,6595,3,802,401,0,6595,6596,3,1030,515,0,6596,
        6597,5,39,0,0,6597,6598,5,921,0,0,6598,6599,3,1030,515,0,6599,6600,
        5,307,0,0,6600,6601,5,921,0,0,6601,6602,3,1024,512,0,6602,6603,5,
        33,0,0,6603,6604,5,921,0,0,6604,6605,5,931,0,0,6605,6606,3,1024,
        512,0,6606,6613,5,932,0,0,6607,6608,5,36,0,0,6608,6609,5,921,0,0,
        6609,6610,5,931,0,0,6610,6611,3,1024,512,0,6611,6612,5,932,0,0,6612,
        6614,1,0,0,0,6613,6607,1,0,0,0,6613,6614,1,0,0,0,6614,6615,1,0,0,
        0,6615,6616,5,217,0,0,6616,6617,5,921,0,0,6617,6619,3,556,278,0,
        6618,6620,3,794,397,0,6619,6618,1,0,0,0,6619,6620,1,0,0,0,6620,6622,
        1,0,0,0,6621,6507,1,0,0,0,6621,6547,1,0,0,0,6621,6590,1,0,0,0,6622,
        373,1,0,0,0,6623,6625,5,155,0,0,6624,6626,3,804,402,0,6625,6624,
        1,0,0,0,6625,6626,1,0,0,0,6626,6627,1,0,0,0,6627,6629,7,38,0,0,6628,
        6630,3,802,401,0,6629,6628,1,0,0,0,6629,6630,1,0,0,0,6630,6631,1,
        0,0,0,6631,6632,3,1030,515,0,6632,6633,5,129,0,0,6633,6649,3,1056,
        528,0,6634,6635,3,382,191,0,6635,6645,5,931,0,0,6636,6637,5,766,
        0,0,6637,6638,5,918,0,0,6638,6646,3,1024,512,0,6639,6640,5,482,0,
        0,6640,6641,5,918,0,0,6641,6646,3,1024,512,0,6642,6643,5,716,0,0,
        6643,6644,5,918,0,0,6644,6646,3,1030,515,0,6645,6636,1,0,0,0,6645,
        6639,1,0,0,0,6645,6642,1,0,0,0,6646,6647,1,0,0,0,6647,6648,5,932,
        0,0,6648,6650,1,0,0,0,6649,6634,1,0,0,0,6649,6650,1,0,0,0,6650,6671,
        1,0,0,0,6651,6653,5,155,0,0,6652,6654,3,804,402,0,6653,6652,1,0,
        0,0,6653,6654,1,0,0,0,6654,6661,1,0,0,0,6655,6662,5,706,0,0,6656,
        6657,5,270,0,0,6657,6662,5,281,0,0,6658,6662,5,670,0,0,6659,6662,
        5,728,0,0,6660,6662,5,757,0,0,6661,6655,1,0,0,0,6661,6656,1,0,0,
        0,6661,6658,1,0,0,0,6661,6659,1,0,0,0,6661,6660,1,0,0,0,6662,6664,
        1,0,0,0,6663,6665,3,802,401,0,6664,6663,1,0,0,0,6664,6665,1,0,0,
        0,6665,6666,1,0,0,0,6666,6667,3,1056,528,0,6667,6668,5,129,0,0,6668,
        6669,3,1056,528,0,6669,6671,1,0,0,0,6670,6623,1,0,0,0,6670,6651,
        1,0,0,0,6671,375,1,0,0,0,6672,6673,5,155,0,0,6673,6675,5,146,0,0,
        6674,6676,3,802,401,0,6675,6674,1,0,0,0,6675,6676,1,0,0,0,6676,6677,
        1,0,0,0,6677,6692,3,1030,515,0,6678,6680,3,794,397,0,6679,6678,1,
        0,0,0,6679,6680,1,0,0,0,6680,6693,1,0,0,0,6681,6682,5,45,0,0,6682,
        6683,5,593,0,0,6683,6684,5,481,0,0,6684,6685,3,1030,515,0,6685,6686,
        5,927,0,0,6686,6687,3,1030,515,0,6687,6688,5,927,0,0,6688,6690,3,
        1030,515,0,6689,6691,3,794,397,0,6690,6689,1,0,0,0,6690,6691,1,0,
        0,0,6691,6693,1,0,0,0,6692,6679,1,0,0,0,6692,6681,1,0,0,0,6693,377,
        1,0,0,0,6694,6696,5,155,0,0,6695,6697,3,804,402,0,6696,6695,1,0,
        0,0,6696,6697,1,0,0,0,6697,6699,1,0,0,0,6698,6700,5,793,0,0,6699,
        6698,1,0,0,0,6699,6700,1,0,0,0,6700,6701,1,0,0,0,6701,6703,5,169,
        0,0,6702,6704,3,802,401,0,6703,6702,1,0,0,0,6703,6704,1,0,0,0,6704,
        6705,1,0,0,0,6705,6707,3,1030,515,0,6706,6708,3,380,190,0,6707,6706,
        1,0,0,0,6707,6708,1,0,0,0,6708,6712,1,0,0,0,6709,6710,5,173,0,0,
        6710,6711,5,921,0,0,6711,6713,3,1060,530,0,6712,6709,1,0,0,0,6712,
        6713,1,0,0,0,6713,6717,1,0,0,0,6714,6715,5,413,0,0,6715,6716,5,921,
        0,0,6716,6718,3,1060,530,0,6717,6714,1,0,0,0,6717,6718,1,0,0,0,6718,
        6720,1,0,0,0,6719,6721,3,140,70,0,6720,6719,1,0,0,0,6720,6721,1,
        0,0,0,6721,6723,1,0,0,0,6722,6724,3,604,302,0,6723,6722,1,0,0,0,
        6723,6724,1,0,0,0,6724,6726,1,0,0,0,6725,6727,3,794,397,0,6726,6725,
        1,0,0,0,6726,6727,1,0,0,0,6727,379,1,0,0,0,6728,6729,5,129,0,0,6729,
        6745,3,1030,515,0,6730,6731,3,382,191,0,6731,6741,5,931,0,0,6732,
        6733,5,766,0,0,6733,6734,5,918,0,0,6734,6742,3,1024,512,0,6735,6736,
        5,482,0,0,6736,6737,5,918,0,0,6737,6742,3,1024,512,0,6738,6739,5,
        716,0,0,6739,6740,5,918,0,0,6740,6742,3,1030,515,0,6741,6732,1,0,
        0,0,6741,6735,1,0,0,0,6741,6738,1,0,0,0,6742,6743,1,0,0,0,6743,6744,
        5,932,0,0,6744,6746,1,0,0,0,6745,6730,1,0,0,0,6745,6746,1,0,0,0,
        6746,381,1,0,0,0,6747,6748,7,39,0,0,6748,383,1,0,0,0,6749,6750,3,
        1024,512,0,6750,6751,5,921,0,0,6751,6752,3,1024,512,0,6752,385,1,
        0,0,0,6753,6754,7,40,0,0,6754,387,1,0,0,0,6755,6756,5,140,0,0,6756,
        6757,5,921,0,0,6757,6758,3,386,193,0,6758,389,1,0,0,0,6759,6761,
        5,155,0,0,6760,6762,3,804,402,0,6761,6760,1,0,0,0,6761,6762,1,0,
        0,0,6762,6763,1,0,0,0,6763,6765,5,171,0,0,6764,6766,3,802,401,0,
        6765,6764,1,0,0,0,6765,6766,1,0,0,0,6766,6767,1,0,0,0,6767,6768,
        3,1056,528,0,6768,391,1,0,0,0,6769,6771,5,155,0,0,6770,6772,3,804,
        402,0,6771,6770,1,0,0,0,6771,6772,1,0,0,0,6772,6774,1,0,0,0,6773,
        6775,5,793,0,0,6774,6773,1,0,0,0,6774,6775,1,0,0,0,6775,6776,1,0,
        0,0,6776,6777,5,209,0,0,6777,6779,5,747,0,0,6778,6780,3,802,401,
        0,6779,6778,1,0,0,0,6779,6780,1,0,0,0,6780,6781,1,0,0,0,6781,6786,
        3,1056,528,0,6782,6783,5,931,0,0,6783,6784,3,630,315,0,6784,6785,
        5,932,0,0,6785,6787,1,0,0,0,6786,6782,1,0,0,0,6786,6787,1,0,0,0,
        6787,6789,1,0,0,0,6788,6790,3,394,197,0,6789,6788,1,0,0,0,6790,6791,
        1,0,0,0,6791,6789,1,0,0,0,6791,6792,1,0,0,0,6792,6793,1,0,0,0,6793,
        6794,5,45,0,0,6794,6795,3,1122,561,0,6795,393,1,0,0,0,6796,6807,
        3,396,198,0,6797,6798,5,582,0,0,6798,6799,5,921,0,0,6799,6807,7,
        41,0,0,6800,6801,5,345,0,0,6801,6802,5,921,0,0,6802,6807,7,42,0,
        0,6803,6807,3,608,304,0,6804,6807,3,606,303,0,6805,6807,3,604,302,
        0,6806,6796,1,0,0,0,6806,6797,1,0,0,0,6806,6800,1,0,0,0,6806,6803,
        1,0,0,0,6806,6804,1,0,0,0,6806,6805,1,0,0,0,6807,395,1,0,0,0,6808,
        6809,5,756,0,0,6809,6812,5,921,0,0,6810,6813,3,1024,512,0,6811,6813,
        5,207,0,0,6812,6810,1,0,0,0,6812,6811,1,0,0,0,6813,6829,1,0,0,0,
        6814,6815,5,373,0,0,6815,6818,5,921,0,0,6816,6819,3,1024,512,0,6817,
        6819,5,207,0,0,6818,6816,1,0,0,0,6818,6817,1,0,0,0,6819,6829,1,0,
        0,0,6820,6821,5,838,0,0,6821,6822,5,921,0,0,6822,6829,3,1030,515,
        0,6823,6829,3,402,201,0,6824,6825,5,183,0,0,6825,6826,5,921,0,0,
        6826,6829,5,912,0,0,6827,6829,3,794,397,0,6828,6808,1,0,0,0,6828,
        6814,1,0,0,0,6828,6820,1,0,0,0,6828,6823,1,0,0,0,6828,6824,1,0,0,
        0,6828,6827,1,0,0,0,6829,397,1,0,0,0,6830,6834,3,400,200,0,6831,
        6834,5,183,0,0,6832,6834,5,138,0,0,6833,6830,1,0,0,0,6833,6831,1,
        0,0,0,6833,6832,1,0,0,0,6834,399,1,0,0,0,6835,6836,7,43,0,0,6836,
        401,1,0,0,0,6837,6838,3,400,200,0,6838,6839,5,921,0,0,6839,6840,
        3,1060,530,0,6840,403,1,0,0,0,6841,6843,5,155,0,0,6842,6844,3,804,
        402,0,6843,6842,1,0,0,0,6843,6844,1,0,0,0,6844,6845,1,0,0,0,6845,
        6846,5,239,0,0,6846,6848,5,747,0,0,6847,6849,3,802,401,0,6848,6847,
        1,0,0,0,6848,6849,1,0,0,0,6849,6850,1,0,0,0,6850,6852,3,1030,515,
        0,6851,6853,3,608,304,0,6852,6851,1,0,0,0,6852,6853,1,0,0,0,6853,
        6857,1,0,0,0,6854,6856,3,400,200,0,6855,6854,1,0,0,0,6856,6859,1,
        0,0,0,6857,6855,1,0,0,0,6857,6858,1,0,0,0,6858,6861,1,0,0,0,6859,
        6857,1,0,0,0,6860,6862,3,610,305,0,6861,6860,1,0,0,0,6861,6862,1,
        0,0,0,6862,6866,1,0,0,0,6863,6864,5,183,0,0,6864,6865,5,921,0,0,
        6865,6867,3,1024,512,0,6866,6863,1,0,0,0,6866,6867,1,0,0,0,6867,
        6869,1,0,0,0,6868,6870,3,588,294,0,6869,6868,1,0,0,0,6869,6870,1,
        0,0,0,6870,6872,1,0,0,0,6871,6873,3,606,303,0,6872,6871,1,0,0,0,
        6872,6873,1,0,0,0,6873,6875,1,0,0,0,6874,6876,3,604,302,0,6875,6874,
        1,0,0,0,6875,6876,1,0,0,0,6876,6881,1,0,0,0,6877,6879,5,847,0,0,
        6878,6877,1,0,0,0,6878,6879,1,0,0,0,6879,6880,1,0,0,0,6880,6882,
        3,794,397,0,6881,6878,1,0,0,0,6881,6882,1,0,0,0,6882,405,1,0,0,0,
        6883,6885,5,155,0,0,6884,6886,3,804,402,0,6885,6884,1,0,0,0,6885,
        6886,1,0,0,0,6886,6888,1,0,0,0,6887,6889,5,665,0,0,6888,6887,1,0,
        0,0,6888,6889,1,0,0,0,6889,6890,1,0,0,0,6890,6891,5,249,0,0,6891,
        6892,5,287,0,0,6892,6893,3,1056,528,0,6893,6905,5,931,0,0,6894,6895,
        3,1016,508,0,6895,6902,3,1014,507,0,6896,6897,5,937,0,0,6897,6898,
        3,1016,508,0,6898,6899,3,1014,507,0,6899,6901,1,0,0,0,6900,6896,
        1,0,0,0,6901,6904,1,0,0,0,6902,6900,1,0,0,0,6902,6903,1,0,0,0,6903,
        6906,1,0,0,0,6904,6902,1,0,0,0,6905,6894,1,0,0,0,6905,6906,1,0,0,
        0,6906,6907,1,0,0,0,6907,6908,5,932,0,0,6908,6909,5,611,0,0,6909,
        6911,3,1086,543,0,6910,6912,3,1252,626,0,6911,6910,1,0,0,0,6911,
        6912,1,0,0,0,6912,6925,1,0,0,0,6913,6914,5,102,0,0,6914,6915,5,488,
        0,0,6915,6916,5,458,0,0,6916,6926,5,350,0,0,6917,6918,5,611,0,0,
        6918,6919,5,458,0,0,6919,6920,5,488,0,0,6920,6921,5,458,0,0,6921,
        6924,5,350,0,0,6922,6924,5,730,0,0,6923,6917,1,0,0,0,6923,6922,1,
        0,0,0,6924,6926,1,0,0,0,6925,6913,1,0,0,0,6925,6923,1,0,0,0,6925,
        6926,1,0,0,0,6926,6928,1,0,0,0,6927,6929,7,44,0,0,6928,6927,1,0,
        0,0,6928,6929,1,0,0,0,6929,6931,1,0,0,0,6930,6932,3,794,397,0,6931,
        6930,1,0,0,0,6931,6932,1,0,0,0,6932,6933,1,0,0,0,6933,6934,5,37,
        0,0,6934,6935,5,921,0,0,6935,6949,3,1030,515,0,6936,6937,5,320,0,
        0,6937,6938,5,921,0,0,6938,6939,5,931,0,0,6939,6944,3,384,192,0,
        6940,6941,5,937,0,0,6941,6943,3,384,192,0,6942,6940,1,0,0,0,6943,
        6946,1,0,0,0,6944,6942,1,0,0,0,6944,6945,1,0,0,0,6945,6947,1,0,0,
        0,6946,6944,1,0,0,0,6947,6948,5,932,0,0,6948,6950,1,0,0,0,6949,6936,
        1,0,0,0,6949,6950,1,0,0,0,6950,6964,1,0,0,0,6951,6952,5,150,0,0,
        6952,6953,5,921,0,0,6953,6954,5,931,0,0,6954,6959,3,1030,515,0,6955,
        6956,5,937,0,0,6956,6958,3,1030,515,0,6957,6955,1,0,0,0,6958,6961,
        1,0,0,0,6959,6957,1,0,0,0,6959,6960,1,0,0,0,6960,6962,1,0,0,0,6961,
        6959,1,0,0,0,6962,6963,5,932,0,0,6963,6965,1,0,0,0,6964,6951,1,0,
        0,0,6964,6965,1,0,0,0,6965,6969,1,0,0,0,6966,6967,5,410,0,0,6967,
        6968,5,921,0,0,6968,6970,3,1060,530,0,6969,6966,1,0,0,0,6969,6970,
        1,0,0,0,6970,6972,1,0,0,0,6971,6973,3,388,194,0,6972,6971,1,0,0,
        0,6972,6973,1,0,0,0,6973,6977,1,0,0,0,6974,6975,5,598,0,0,6975,6976,
        5,921,0,0,6976,6978,3,1030,515,0,6977,6974,1,0,0,0,6977,6978,1,0,
        0,0,6978,6982,1,0,0,0,6979,6980,5,606,0,0,6980,6981,5,921,0,0,6981,
        6983,3,1030,515,0,6982,6979,1,0,0,0,6982,6983,1,0,0,0,6983,6984,
        1,0,0,0,6984,6985,5,45,0,0,6985,6986,3,1024,512,0,6986,407,1,0,0,
        0,6987,6989,5,155,0,0,6988,6990,3,804,402,0,6989,6988,1,0,0,0,6989,
        6990,1,0,0,0,6990,6991,1,0,0,0,6991,6992,5,249,0,0,6992,6994,5,747,
        0,0,6993,6995,3,802,401,0,6994,6993,1,0,0,0,6994,6995,1,0,0,0,6995,
        6996,1,0,0,0,6996,6997,3,1056,528,0,6997,6998,5,931,0,0,6998,6999,
        3,412,206,0,6999,7001,5,932,0,0,7000,7002,3,584,292,0,7001,7000,
        1,0,0,0,7001,7002,1,0,0,0,7002,7004,1,0,0,0,7003,7005,3,1206,603,
        0,7004,7003,1,0,0,0,7004,7005,1,0,0,0,7005,7007,1,0,0,0,7006,7008,
        5,847,0,0,7007,7006,1,0,0,0,7007,7008,1,0,0,0,7008,7009,1,0,0,0,
        7009,7010,5,391,0,0,7010,7011,5,921,0,0,7011,7015,3,110,55,0,7012,
        7013,5,583,0,0,7013,7014,5,921,0,0,7014,7016,3,556,278,0,7015,7012,
        1,0,0,0,7015,7016,1,0,0,0,7016,7020,1,0,0,0,7017,7018,5,59,0,0,7018,
        7019,5,921,0,0,7019,7021,3,556,278,0,7020,7017,1,0,0,0,7020,7021,
        1,0,0,0,7021,7023,1,0,0,0,7022,7024,3,1048,524,0,7023,7022,1,0,0,
        0,7023,7024,1,0,0,0,7024,7025,1,0,0,0,7025,7029,3,48,24,0,7026,7027,
        5,70,0,0,7027,7028,5,921,0,0,7028,7030,3,1024,512,0,7029,7026,1,
        0,0,0,7029,7030,1,0,0,0,7030,7032,1,0,0,0,7031,7033,3,588,294,0,
        7032,7031,1,0,0,0,7032,7033,1,0,0,0,7033,7035,1,0,0,0,7034,7036,
        3,606,303,0,7035,7034,1,0,0,0,7035,7036,1,0,0,0,7036,7038,1,0,0,
        0,7037,7039,3,604,302,0,7038,7037,1,0,0,0,7038,7039,1,0,0,0,7039,
        7041,1,0,0,0,7040,7042,3,794,397,0,7041,7040,1,0,0,0,7041,7042,1,
        0,0,0,7042,7131,1,0,0,0,7043,7045,5,155,0,0,7044,7046,3,804,402,
        0,7045,7044,1,0,0,0,7045,7046,1,0,0,0,7046,7047,1,0,0,0,7047,7048,
        5,249,0,0,7048,7050,5,747,0,0,7049,7051,3,802,401,0,7050,7049,1,
        0,0,0,7050,7051,1,0,0,0,7051,7052,1,0,0,0,7052,7053,3,1056,528,0,
        7053,7054,5,931,0,0,7054,7055,3,412,206,0,7055,7057,5,932,0,0,7056,
        7058,3,584,292,0,7057,7056,1,0,0,0,7057,7058,1,0,0,0,7058,7060,1,
        0,0,0,7059,7061,3,1206,603,0,7060,7059,1,0,0,0,7060,7061,1,0,0,0,
        7061,7063,1,0,0,0,7062,7064,5,847,0,0,7063,7062,1,0,0,0,7063,7064,
        1,0,0,0,7064,7065,1,0,0,0,7065,7066,5,391,0,0,7066,7067,5,921,0,
        0,7067,7068,3,110,55,0,7068,7069,5,519,0,0,7069,7070,5,921,0,0,7070,
        7071,5,820,0,0,7071,7073,3,48,24,0,7072,7074,3,588,294,0,7073,7072,
        1,0,0,0,7073,7074,1,0,0,0,7074,7076,1,0,0,0,7075,7077,3,606,303,
        0,7076,7075,1,0,0,0,7076,7077,1,0,0,0,7077,7079,1,0,0,0,7078,7080,
        3,604,302,0,7079,7078,1,0,0,0,7079,7080,1,0,0,0,7080,7082,1,0,0,
        0,7081,7083,3,794,397,0,7082,7081,1,0,0,0,7082,7083,1,0,0,0,7083,
        7131,1,0,0,0,7084,7086,5,155,0,0,7085,7087,3,804,402,0,7086,7085,
        1,0,0,0,7086,7087,1,0,0,0,7087,7088,1,0,0,0,7088,7089,5,249,0,0,
        7089,7091,5,747,0,0,7090,7092,3,802,401,0,7091,7090,1,0,0,0,7091,
        7092,1,0,0,0,7092,7093,1,0,0,0,7093,7094,3,1056,528,0,7094,7095,
        5,931,0,0,7095,7096,3,412,206,0,7096,7098,5,932,0,0,7097,7099,3,
        584,292,0,7098,7097,1,0,0,0,7098,7099,1,0,0,0,7099,7101,1,0,0,0,
        7100,7102,3,1206,603,0,7101,7100,1,0,0,0,7101,7102,1,0,0,0,7102,
        7104,1,0,0,0,7103,7105,5,847,0,0,7104,7103,1,0,0,0,7104,7105,1,0,
        0,0,7105,7106,1,0,0,0,7106,7107,5,391,0,0,7107,7108,5,921,0,0,7108,
        7109,3,110,55,0,7109,7110,5,519,0,0,7110,7111,5,921,0,0,7111,7112,
        5,820,0,0,7112,7116,3,48,24,0,7113,7114,5,752,0,0,7114,7115,5,921,
        0,0,7115,7117,5,194,0,0,7116,7113,1,0,0,0,7116,7117,1,0,0,0,7117,
        7119,1,0,0,0,7118,7120,3,588,294,0,7119,7118,1,0,0,0,7119,7120,1,
        0,0,0,7120,7122,1,0,0,0,7121,7123,3,606,303,0,7122,7121,1,0,0,0,
        7122,7123,1,0,0,0,7123,7125,1,0,0,0,7124,7126,3,604,302,0,7125,7124,
        1,0,0,0,7125,7126,1,0,0,0,7126,7128,1,0,0,0,7127,7129,3,794,397,
        0,7128,7127,1,0,0,0,7128,7129,1,0,0,0,7129,7131,1,0,0,0,7130,6987,
        1,0,0,0,7130,7043,1,0,0,0,7130,7084,1,0,0,0,7131,409,1,0,0,0,7132,
        7133,3,1050,525,0,7133,7134,3,1086,543,0,7134,7137,5,45,0,0,7135,
        7138,3,1066,533,0,7136,7138,3,1030,515,0,7137,7135,1,0,0,0,7137,
        7136,1,0,0,0,7138,7140,1,0,0,0,7139,7141,3,290,145,0,7140,7139,1,
        0,0,0,7140,7141,1,0,0,0,7141,411,1,0,0,0,7142,7147,3,410,205,0,7143,
        7144,5,937,0,0,7144,7146,3,410,205,0,7145,7143,1,0,0,0,7146,7149,
        1,0,0,0,7147,7145,1,0,0,0,7147,7148,1,0,0,0,7148,413,1,0,0,0,7149,
        7147,1,0,0,0,7150,7151,3,1030,515,0,7151,7152,5,927,0,0,7152,7153,
        3,1030,515,0,7153,415,1,0,0,0,7154,7155,5,666,0,0,7155,7159,5,355,
        0,0,7156,7157,5,32,0,0,7157,7159,5,355,0,0,7158,7154,1,0,0,0,7158,
        7156,1,0,0,0,7159,417,1,0,0,0,7160,7161,5,155,0,0,7161,7162,5,265,
        0,0,7162,7164,5,310,0,0,7163,7165,3,802,401,0,7164,7163,1,0,0,0,
        7164,7165,1,0,0,0,7165,7166,1,0,0,0,7166,7167,3,1030,515,0,7167,
        7168,5,480,0,0,7168,7169,5,921,0,0,7169,7174,3,1008,504,0,7170,7171,
        5,937,0,0,7171,7173,3,1008,504,0,7172,7170,1,0,0,0,7173,7176,1,0,
        0,0,7174,7172,1,0,0,0,7174,7175,1,0,0,0,7175,7187,1,0,0,0,7176,7174,
        1,0,0,0,7177,7178,5,19,0,0,7178,7179,5,921,0,0,7179,7184,3,1030,
        515,0,7180,7181,5,937,0,0,7181,7183,3,1030,515,0,7182,7180,1,0,0,
        0,7183,7186,1,0,0,0,7184,7182,1,0,0,0,7184,7185,1,0,0,0,7185,7188,
        1,0,0,0,7186,7184,1,0,0,0,7187,7177,1,0,0,0,7187,7188,1,0,0,0,7188,
        7199,1,0,0,0,7189,7190,5,22,0,0,7190,7191,5,921,0,0,7191,7196,3,
        1030,515,0,7192,7193,5,937,0,0,7193,7195,3,1030,515,0,7194,7192,
        1,0,0,0,7195,7198,1,0,0,0,7196,7194,1,0,0,0,7196,7197,1,0,0,0,7197,
        7200,1,0,0,0,7198,7196,1,0,0,0,7199,7189,1,0,0,0,7199,7200,1,0,0,
        0,7200,7211,1,0,0,0,7201,7202,5,20,0,0,7202,7203,5,921,0,0,7203,
        7208,3,416,208,0,7204,7205,5,937,0,0,7205,7207,3,416,208,0,7206,
        7204,1,0,0,0,7207,7210,1,0,0,0,7208,7206,1,0,0,0,7208,7209,1,0,0,
        0,7209,7212,1,0,0,0,7210,7208,1,0,0,0,7211,7201,1,0,0,0,7211,7212,
        1,0,0,0,7212,7213,1,0,0,0,7213,7214,5,18,0,0,7214,7215,5,921,0,0,
        7215,7220,3,414,207,0,7216,7217,5,937,0,0,7217,7219,3,414,207,0,
        7218,7216,1,0,0,0,7219,7222,1,0,0,0,7220,7218,1,0,0,0,7220,7221,
        1,0,0,0,7221,7226,1,0,0,0,7222,7220,1,0,0,0,7223,7224,5,330,0,0,
        7224,7225,5,211,0,0,7225,7227,5,116,0,0,7226,7223,1,0,0,0,7226,7227,
        1,0,0,0,7227,7231,1,0,0,0,7228,7229,5,595,0,0,7229,7230,5,921,0,
        0,7230,7232,3,1024,512,0,7231,7228,1,0,0,0,7231,7232,1,0,0,0,7232,
        7250,1,0,0,0,7233,7234,5,155,0,0,7234,7235,5,265,0,0,7235,7237,5,
        310,0,0,7236,7238,3,802,401,0,7237,7236,1,0,0,0,7237,7238,1,0,0,
        0,7238,7239,1,0,0,0,7239,7240,3,1030,515,0,7240,7241,5,45,0,0,7241,
        7242,5,593,0,0,7242,7243,5,481,0,0,7243,7244,3,1030,515,0,7244,7245,
        5,927,0,0,7245,7246,3,1030,515,0,7246,7247,5,927,0,0,7247,7248,3,
        1030,515,0,7248,7250,1,0,0,0,7249,7160,1,0,0,0,7249,7233,1,0,0,0,
        7250,419,1,0,0,0,7251,7252,7,45,0,0,7252,421,1,0,0,0,7253,7255,5,
        155,0,0,7254,7256,3,804,402,0,7255,7254,1,0,0,0,7255,7256,1,0,0,
        0,7256,7257,1,0,0,0,7257,7258,5,270,0,0,7258,7260,5,281,0,0,7259,
        7261,3,802,401,0,7260,7259,1,0,0,0,7260,7261,1,0,0,0,7261,7262,1,
        0,0,0,7262,7266,3,1056,528,0,7263,7264,5,803,0,0,7264,7265,5,921,
        0,0,7265,7267,3,420,210,0,7266,7263,1,0,0,0,7266,7267,1,0,0,0,7267,
        7271,1,0,0,0,7268,7270,3,518,259,0,7269,7268,1,0,0,0,7270,7273,1,
        0,0,0,7271,7269,1,0,0,0,7271,7272,1,0,0,0,7272,7275,1,0,0,0,7273,
        7271,1,0,0,0,7274,7276,3,794,397,0,7275,7274,1,0,0,0,7275,7276,1,
        0,0,0,7276,423,1,0,0,0,7277,7278,3,1016,508,0,7278,7280,3,1014,507,
        0,7279,7281,3,426,213,0,7280,7279,1,0,0,0,7280,7281,1,0,0,0,7281,
        425,1,0,0,0,7282,7283,5,182,0,0,7283,7284,3,1066,533,0,7284,427,
        1,0,0,0,7285,7286,3,1050,525,0,7286,7288,3,1086,543,0,7287,7289,
        3,430,215,0,7288,7287,1,0,0,0,7288,7289,1,0,0,0,7289,429,1,0,0,0,
        7290,7291,5,45,0,0,7291,7292,5,931,0,0,7292,7293,3,1096,548,0,7293,
        7294,5,932,0,0,7294,7298,1,0,0,0,7295,7296,5,45,0,0,7296,7298,3,
        1096,548,0,7297,7290,1,0,0,0,7297,7295,1,0,0,0,7298,431,1,0,0,0,
        7299,7302,3,1024,512,0,7300,7302,5,911,0,0,7301,7299,1,0,0,0,7301,
        7300,1,0,0,0,7302,433,1,0,0,0,7303,7305,5,155,0,0,7304,7306,3,804,
        402,0,7305,7304,1,0,0,0,7305,7306,1,0,0,0,7306,7308,1,0,0,0,7307,
        7309,5,665,0,0,7308,7307,1,0,0,0,7308,7309,1,0,0,0,7309,7310,1,0,
        0,0,7310,7312,5,287,0,0,7311,7313,3,802,401,0,7312,7311,1,0,0,0,
        7312,7313,1,0,0,0,7313,7314,1,0,0,0,7314,7315,3,1056,528,0,7315,
        7324,5,931,0,0,7316,7321,3,424,212,0,7317,7318,5,937,0,0,7318,7320,
        3,424,212,0,7319,7317,1,0,0,0,7320,7323,1,0,0,0,7321,7319,1,0,0,
        0,7321,7322,1,0,0,0,7322,7325,1,0,0,0,7323,7321,1,0,0,0,7324,7316,
        1,0,0,0,7324,7325,1,0,0,0,7325,7326,1,0,0,0,7326,7327,5,932,0,0,
        7327,7342,5,611,0,0,7328,7343,3,1086,543,0,7329,7330,5,747,0,0,7330,
        7339,5,931,0,0,7331,7336,3,428,214,0,7332,7333,5,937,0,0,7333,7335,
        3,428,214,0,7334,7332,1,0,0,0,7335,7338,1,0,0,0,7336,7334,1,0,0,
        0,7336,7337,1,0,0,0,7337,7340,1,0,0,0,7338,7336,1,0,0,0,7339,7331,
        1,0,0,0,7339,7340,1,0,0,0,7340,7341,1,0,0,0,7341,7343,5,932,0,0,
        7342,7328,1,0,0,0,7342,7329,1,0,0,0,7343,7345,1,0,0,0,7344,7346,
        3,1252,626,0,7345,7344,1,0,0,0,7345,7346,1,0,0,0,7346,7349,1,0,0,
        0,7347,7348,5,374,0,0,7348,7350,7,46,0,0,7349,7347,1,0,0,0,7349,
        7350,1,0,0,0,7350,7361,1,0,0,0,7351,7352,5,102,0,0,7352,7353,5,488,
        0,0,7353,7354,5,458,0,0,7354,7362,5,350,0,0,7355,7356,5,611,0,0,
        7356,7357,5,458,0,0,7357,7358,5,488,0,0,7358,7359,5,458,0,0,7359,
        7362,5,350,0,0,7360,7362,5,730,0,0,7361,7351,1,0,0,0,7361,7355,1,
        0,0,0,7361,7360,1,0,0,0,7361,7362,1,0,0,0,7362,7364,1,0,0,0,7363,
        7365,7,44,0,0,7364,7363,1,0,0,0,7364,7365,1,0,0,0,7365,7372,1,0,
        0,0,7366,7367,5,512,0,0,7367,7368,5,921,0,0,7368,7369,5,931,0,0,
        7369,7370,3,1026,513,0,7370,7371,5,932,0,0,7371,7373,1,0,0,0,7372,
        7366,1,0,0,0,7372,7373,1,0,0,0,7373,7380,1,0,0,0,7374,7375,5,634,
        0,0,7375,7378,5,921,0,0,7376,7379,3,1024,512,0,7377,7379,5,914,0,
        0,7378,7376,1,0,0,0,7378,7377,1,0,0,0,7379,7381,1,0,0,0,7380,7374,
        1,0,0,0,7380,7381,1,0,0,0,7381,7388,1,0,0,0,7382,7383,5,338,0,0,
        7383,7384,5,921,0,0,7384,7385,5,931,0,0,7385,7386,3,1026,513,0,7386,
        7387,5,932,0,0,7387,7389,1,0,0,0,7388,7382,1,0,0,0,7388,7389,1,0,
        0,0,7389,7396,1,0,0,0,7390,7391,5,512,0,0,7391,7392,5,921,0,0,7392,
        7393,5,931,0,0,7393,7394,3,1026,513,0,7394,7395,5,932,0,0,7395,7397,
        1,0,0,0,7396,7390,1,0,0,0,7396,7397,1,0,0,0,7397,7401,1,0,0,0,7398,
        7399,5,316,0,0,7399,7400,5,921,0,0,7400,7402,3,1024,512,0,7401,7398,
        1,0,0,0,7401,7402,1,0,0,0,7402,7404,1,0,0,0,7403,7405,3,794,397,
        0,7404,7403,1,0,0,0,7404,7405,1,0,0,0,7405,7406,1,0,0,0,7406,7407,
        5,45,0,0,7407,7408,3,432,216,0,7408,7475,1,0,0,0,7409,7411,5,155,
        0,0,7410,7412,3,804,402,0,7411,7410,1,0,0,0,7411,7412,1,0,0,0,7412,
        7414,1,0,0,0,7413,7415,5,665,0,0,7414,7413,1,0,0,0,7414,7415,1,0,
        0,0,7415,7416,1,0,0,0,7416,7417,5,287,0,0,7417,7418,3,1056,528,0,
        7418,7427,5,931,0,0,7419,7424,3,424,212,0,7420,7421,5,937,0,0,7421,
        7423,3,424,212,0,7422,7420,1,0,0,0,7423,7426,1,0,0,0,7424,7422,1,
        0,0,0,7424,7425,1,0,0,0,7425,7428,1,0,0,0,7426,7424,1,0,0,0,7427,
        7419,1,0,0,0,7427,7428,1,0,0,0,7428,7429,1,0,0,0,7429,7430,5,932,
        0,0,7430,7445,5,611,0,0,7431,7446,3,1086,543,0,7432,7433,5,747,0,
        0,7433,7442,5,931,0,0,7434,7439,3,428,214,0,7435,7436,5,937,0,0,
        7436,7438,3,428,214,0,7437,7435,1,0,0,0,7438,7441,1,0,0,0,7439,7437,
        1,0,0,0,7439,7440,1,0,0,0,7440,7443,1,0,0,0,7441,7439,1,0,0,0,7442,
        7434,1,0,0,0,7442,7443,1,0,0,0,7443,7444,1,0,0,0,7444,7446,5,932,
        0,0,7445,7431,1,0,0,0,7445,7432,1,0,0,0,7446,7448,1,0,0,0,7447,7449,
        3,1252,626,0,7448,7447,1,0,0,0,7448,7449,1,0,0,0,7449,7460,1,0,0,
        0,7450,7451,5,102,0,0,7451,7452,5,488,0,0,7452,7453,5,458,0,0,7453,
        7461,5,350,0,0,7454,7455,5,611,0,0,7455,7456,5,458,0,0,7456,7457,
        5,488,0,0,7457,7458,5,458,0,0,7458,7461,5,350,0,0,7459,7461,5,730,
        0,0,7460,7450,1,0,0,0,7460,7454,1,0,0,0,7460,7459,1,0,0,0,7460,7461,
        1,0,0,0,7461,7463,1,0,0,0,7462,7464,7,44,0,0,7463,7462,1,0,0,0,7463,
        7464,1,0,0,0,7464,7466,1,0,0,0,7465,7467,5,417,0,0,7466,7465,1,0,
        0,0,7466,7467,1,0,0,0,7467,7469,1,0,0,0,7468,7470,3,794,397,0,7469,
        7468,1,0,0,0,7469,7470,1,0,0,0,7470,7471,1,0,0,0,7471,7472,5,45,
        0,0,7472,7473,3,432,216,0,7473,7475,1,0,0,0,7474,7303,1,0,0,0,7474,
        7409,1,0,0,0,7475,435,1,0,0,0,7476,7478,5,155,0,0,7477,7479,3,804,
        402,0,7478,7477,1,0,0,0,7478,7479,1,0,0,0,7479,7480,1,0,0,0,7480,
        7481,5,304,0,0,7481,7483,5,596,0,0,7482,7484,3,802,401,0,7483,7482,
        1,0,0,0,7483,7484,1,0,0,0,7484,7485,1,0,0,0,7485,7487,3,1056,528,
        0,7486,7488,3,438,219,0,7487,7486,1,0,0,0,7488,7489,1,0,0,0,7489,
        7487,1,0,0,0,7489,7490,1,0,0,0,7490,437,1,0,0,0,7491,7492,5,503,
        0,0,7492,7493,5,921,0,0,7493,7503,3,1024,512,0,7494,7495,5,37,0,
        0,7495,7496,5,921,0,0,7496,7503,3,1030,515,0,7497,7498,5,305,0,0,
        7498,7499,5,921,0,0,7499,7503,3,1056,528,0,7500,7503,3,794,397,0,
        7501,7503,3,604,302,0,7502,7491,1,0,0,0,7502,7494,1,0,0,0,7502,7497,
        1,0,0,0,7502,7500,1,0,0,0,7502,7501,1,0,0,0,7503,439,1,0,0,0,7504,
        7505,5,155,0,0,7505,7506,5,401,0,0,7506,7507,5,6,0,0,7507,7508,3,
        1030,515,0,7508,7509,5,11,0,0,7509,7510,5,921,0,0,7510,7511,3,1030,
        515,0,7511,7512,5,937,0,0,7512,7513,5,12,0,0,7513,7514,5,921,0,0,
        7514,7515,3,1024,512,0,7515,7516,5,937,0,0,7516,7517,5,803,0,0,7517,
        7518,5,921,0,0,7518,7521,5,575,0,0,7519,7520,5,937,0,0,7520,7522,
        3,794,397,0,7521,7519,1,0,0,0,7521,7522,1,0,0,0,7522,441,1,0,0,0,
        7523,7525,5,155,0,0,7524,7526,3,804,402,0,7525,7524,1,0,0,0,7525,
        7526,1,0,0,0,7526,7527,1,0,0,0,7527,7528,5,402,0,0,7528,7530,5,544,
        0,0,7529,7531,3,802,401,0,7530,7529,1,0,0,0,7530,7531,1,0,0,0,7531,
        7532,1,0,0,0,7532,7533,3,1056,528,0,7533,7534,5,45,0,0,7534,7535,
        5,931,0,0,7535,7536,3,1016,508,0,7536,7541,3,1014,507,0,7537,7538,
        5,937,0,0,7538,7539,3,1016,508,0,7539,7540,3,1014,507,0,7540,7542,
        1,0,0,0,7541,7537,1,0,0,0,7541,7542,1,0,0,0,7542,7543,1,0,0,0,7543,
        7544,5,932,0,0,7544,7545,5,611,0,0,7545,7546,3,1014,507,0,7546,7547,
        5,917,0,0,7547,7549,3,1066,533,0,7548,7550,3,794,397,0,7549,7548,
        1,0,0,0,7549,7550,1,0,0,0,7550,443,1,0,0,0,7551,7552,3,1056,528,
        0,7552,7553,5,921,0,0,7553,7554,3,1024,512,0,7554,445,1,0,0,0,7555,
        7556,5,931,0,0,7556,7557,3,1052,526,0,7557,7558,5,932,0,0,7558,447,
        1,0,0,0,7559,7561,5,155,0,0,7560,7562,3,804,402,0,7561,7560,1,0,
        0,0,7561,7562,1,0,0,0,7562,7564,1,0,0,0,7563,7565,5,665,0,0,7564,
        7563,1,0,0,0,7564,7565,1,0,0,0,7565,7566,1,0,0,0,7566,7567,5,409,
        0,0,7567,7569,5,834,0,0,7568,7570,3,802,401,0,7569,7568,1,0,0,0,
        7569,7570,1,0,0,0,7570,7571,1,0,0,0,7571,7576,3,1056,528,0,7572,
        7573,5,931,0,0,7573,7574,3,1054,527,0,7574,7575,5,932,0,0,7575,7577,
        1,0,0,0,7576,7572,1,0,0,0,7576,7577,1,0,0,0,7577,7581,1,0,0,0,7578,
        7580,3,678,339,0,7579,7578,1,0,0,0,7580,7583,1,0,0,0,7581,7579,1,
        0,0,0,7581,7582,1,0,0,0,7582,7585,1,0,0,0,7583,7581,1,0,0,0,7584,
        7586,3,606,303,0,7585,7584,1,0,0,0,7585,7586,1,0,0,0,7586,7588,1,
        0,0,0,7587,7589,3,604,302,0,7588,7587,1,0,0,0,7588,7589,1,0,0,0,
        7589,7591,1,0,0,0,7590,7592,3,588,294,0,7591,7590,1,0,0,0,7591,7592,
        1,0,0,0,7592,7594,1,0,0,0,7593,7595,3,794,397,0,7594,7593,1,0,0,
        0,7594,7595,1,0,0,0,7595,7597,1,0,0,0,7596,7598,3,608,304,0,7597,
        7596,1,0,0,0,7597,7598,1,0,0,0,7598,7599,1,0,0,0,7599,7600,5,45,
        0,0,7600,7601,3,1128,564,0,7601,449,1,0,0,0,7602,7604,5,155,0,0,
        7603,7605,3,804,402,0,7604,7603,1,0,0,0,7604,7605,1,0,0,0,7605,7606,
        1,0,0,0,7606,7607,5,438,0,0,7607,7608,5,544,0,0,7608,7609,3,1030,
        515,0,7609,7610,5,21,0,0,7610,7611,5,921,0,0,7611,7613,5,931,0,0,
        7612,7614,3,1026,513,0,7613,7612,1,0,0,0,7613,7614,1,0,0,0,7614,
        7615,1,0,0,0,7615,7623,5,932,0,0,7616,7617,5,92,0,0,7617,7618,5,
        921,0,0,7618,7620,5,931,0,0,7619,7621,3,1026,513,0,7620,7619,1,0,
        0,0,7620,7621,1,0,0,0,7621,7622,1,0,0,0,7622,7624,5,932,0,0,7623,
        7616,1,0,0,0,7623,7624,1,0,0,0,7624,7626,1,0,0,0,7625,7627,3,794,
        397,0,7626,7625,1,0,0,0,7626,7627,1,0,0,0,7627,451,1,0,0,0,7628,
        7629,5,451,0,0,7629,7630,5,921,0,0,7630,7631,5,290,0,0,7631,7632,
        5,291,0,0,7632,7633,5,921,0,0,7633,7645,3,1024,512,0,7634,7635,5,
        451,0,0,7635,7636,5,921,0,0,7636,7637,5,76,0,0,7637,7638,5,80,0,
        0,7638,7639,5,921,0,0,7639,7640,3,1024,512,0,7640,7641,5,81,0,0,
        7641,7642,5,921,0,0,7642,7643,3,1024,512,0,7643,7645,1,0,0,0,7644,
        7628,1,0,0,0,7644,7634,1,0,0,0,7645,453,1,0,0,0,7646,7647,5,451,
        0,0,7647,7648,5,921,0,0,7648,7649,5,68,0,0,7649,7650,5,71,0,0,7650,
        7651,5,921,0,0,7651,7652,3,1024,512,0,7652,7653,5,69,0,0,7653,7654,
        5,921,0,0,7654,7655,3,1024,512,0,7655,7673,1,0,0,0,7656,7657,5,451,
        0,0,7657,7658,5,921,0,0,7658,7659,5,290,0,0,7659,7660,5,292,0,0,
        7660,7661,5,921,0,0,7661,7673,3,1024,512,0,7662,7663,5,451,0,0,7663,
        7664,5,921,0,0,7664,7665,5,76,0,0,7665,7666,5,77,0,0,7666,7667,5,
        921,0,0,7667,7668,3,1024,512,0,7668,7669,5,81,0,0,7669,7670,5,921,
        0,0,7670,7671,3,1024,512,0,7671,7673,1,0,0,0,7672,7646,1,0,0,0,7672,
        7656,1,0,0,0,7672,7662,1,0,0,0,7673,455,1,0,0,0,7674,7676,5,155,
        0,0,7675,7677,3,804,402,0,7676,7675,1,0,0,0,7676,7677,1,0,0,0,7677,
        7678,1,0,0,0,7678,7679,5,449,0,0,7679,7681,5,354,0,0,7680,7682,3,
        802,401,0,7681,7680,1,0,0,0,7681,7682,1,0,0,0,7682,7683,1,0,0,0,
        7683,7684,3,1030,515,0,7684,7685,5,217,0,0,7685,7686,5,921,0,0,7686,
        7687,3,556,278,0,7687,7688,5,803,0,0,7688,7689,5,921,0,0,7689,7690,
        5,570,0,0,7690,7692,3,452,226,0,7691,7693,3,794,397,0,7692,7691,
        1,0,0,0,7692,7693,1,0,0,0,7693,7718,1,0,0,0,7694,7696,5,155,0,0,
        7695,7697,3,804,402,0,7696,7695,1,0,0,0,7696,7697,1,0,0,0,7697,7698,
        1,0,0,0,7698,7699,5,449,0,0,7699,7701,5,354,0,0,7700,7702,3,802,
        401,0,7701,7700,1,0,0,0,7701,7702,1,0,0,0,7702,7703,1,0,0,0,7703,
        7704,3,1030,515,0,7704,7705,5,217,0,0,7705,7706,5,921,0,0,7706,7707,
        3,556,278,0,7707,7708,5,198,0,0,7708,7709,5,921,0,0,7709,7710,5,
        504,0,0,7710,7711,5,803,0,0,7711,7712,5,921,0,0,7712,7713,5,570,
        0,0,7713,7715,3,454,227,0,7714,7716,3,794,397,0,7715,7714,1,0,0,
        0,7715,7716,1,0,0,0,7716,7718,1,0,0,0,7717,7674,1,0,0,0,7717,7694,
        1,0,0,0,7718,457,1,0,0,0,7719,7721,5,155,0,0,7720,7722,3,804,402,
        0,7721,7720,1,0,0,0,7721,7722,1,0,0,0,7722,7723,1,0,0,0,7723,7725,
        5,539,0,0,7724,7726,3,802,401,0,7725,7724,1,0,0,0,7725,7726,1,0,
        0,0,7726,7727,1,0,0,0,7727,7731,3,1056,528,0,7728,7729,5,58,0,0,
        7729,7730,5,921,0,0,7730,7732,3,556,278,0,7731,7728,1,0,0,0,7731,
        7732,1,0,0,0,7732,7736,1,0,0,0,7733,7734,5,233,0,0,7734,7735,5,921,
        0,0,7735,7737,3,1030,515,0,7736,7733,1,0,0,0,7736,7737,1,0,0,0,7737,
        7741,1,0,0,0,7738,7739,5,70,0,0,7739,7740,5,921,0,0,7740,7742,3,
        1024,512,0,7741,7738,1,0,0,0,7741,7742,1,0,0,0,7742,7746,1,0,0,0,
        7743,7744,5,354,0,0,7744,7745,5,921,0,0,7745,7747,3,1024,512,0,7746,
        7743,1,0,0,0,7746,7747,1,0,0,0,7747,7749,1,0,0,0,7748,7750,3,794,
        397,0,7749,7748,1,0,0,0,7749,7750,1,0,0,0,7750,7751,1,0,0,0,7751,
        7752,5,45,0,0,7752,7753,3,42,21,0,7753,459,1,0,0,0,7754,7755,7,47,
        0,0,7755,461,1,0,0,0,7756,7757,5,243,0,0,7757,7758,5,45,0,0,7758,
        7759,3,460,230,0,7759,463,1,0,0,0,7760,7763,3,1024,512,0,7761,7763,
        5,911,0,0,7762,7760,1,0,0,0,7762,7761,1,0,0,0,7763,465,1,0,0,0,7764,
        7765,5,448,0,0,7765,7766,5,458,0,0,7766,467,1,0,0,0,7767,7769,5,
        155,0,0,7768,7770,3,804,402,0,7769,7768,1,0,0,0,7769,7770,1,0,0,
        0,7770,7771,1,0,0,0,7771,7772,5,555,0,0,7772,7773,3,1056,528,0,7773,
        7782,5,931,0,0,7774,7779,3,424,212,0,7775,7776,5,937,0,0,7776,7778,
        3,424,212,0,7777,7775,1,0,0,0,7778,7781,1,0,0,0,7779,7777,1,0,0,
        0,7779,7780,1,0,0,0,7780,7783,1,0,0,0,7781,7779,1,0,0,0,7782,7774,
        1,0,0,0,7782,7783,1,0,0,0,7783,7784,1,0,0,0,7784,7785,5,932,0,0,
        7785,7800,5,611,0,0,7786,7801,3,1086,543,0,7787,7788,5,747,0,0,7788,
        7797,5,931,0,0,7789,7794,3,428,214,0,7790,7791,5,937,0,0,7791,7793,
        3,428,214,0,7792,7790,1,0,0,0,7793,7796,1,0,0,0,7794,7792,1,0,0,
        0,7794,7795,1,0,0,0,7795,7798,1,0,0,0,7796,7794,1,0,0,0,7797,7789,
        1,0,0,0,7797,7798,1,0,0,0,7798,7799,1,0,0,0,7799,7801,5,932,0,0,
        7800,7786,1,0,0,0,7800,7787,1,0,0,0,7801,7803,1,0,0,0,7802,7804,
        3,466,233,0,7803,7802,1,0,0,0,7803,7804,1,0,0,0,7804,7805,1,0,0,
        0,7805,7806,5,374,0,0,7806,7817,5,704,0,0,7807,7808,5,102,0,0,7808,
        7809,5,488,0,0,7809,7810,5,458,0,0,7810,7818,5,350,0,0,7811,7812,
        5,611,0,0,7812,7813,5,458,0,0,7813,7814,5,488,0,0,7814,7815,5,458,
        0,0,7815,7818,5,350,0,0,7816,7818,5,730,0,0,7817,7807,1,0,0,0,7817,
        7811,1,0,0,0,7817,7816,1,0,0,0,7817,7818,1,0,0,0,7818,7820,1,0,0,
        0,7819,7821,7,44,0,0,7820,7819,1,0,0,0,7820,7821,1,0,0,0,7821,7823,
        1,0,0,0,7822,7824,3,794,397,0,7823,7822,1,0,0,0,7823,7824,1,0,0,
        0,7824,7826,1,0,0,0,7825,7827,3,462,231,0,7826,7825,1,0,0,0,7826,
        7827,1,0,0,0,7827,7828,1,0,0,0,7828,7829,5,45,0,0,7829,7830,3,464,
        232,0,7830,7955,1,0,0,0,7831,7833,5,155,0,0,7832,7834,3,804,402,
        0,7833,7832,1,0,0,0,7833,7834,1,0,0,0,7834,7836,1,0,0,0,7835,7837,
        5,665,0,0,7836,7835,1,0,0,0,7836,7837,1,0,0,0,7837,7838,1,0,0,0,
        7838,7839,5,555,0,0,7839,7840,3,1056,528,0,7840,7849,5,931,0,0,7841,
        7846,3,424,212,0,7842,7843,5,937,0,0,7843,7845,3,424,212,0,7844,
        7842,1,0,0,0,7845,7848,1,0,0,0,7846,7844,1,0,0,0,7846,7847,1,0,0,
        0,7847,7850,1,0,0,0,7848,7846,1,0,0,0,7849,7841,1,0,0,0,7849,7850,
        1,0,0,0,7850,7851,1,0,0,0,7851,7852,5,932,0,0,7852,7853,5,611,0,
        0,7853,7855,3,1086,543,0,7854,7856,3,466,233,0,7855,7854,1,0,0,0,
        7855,7856,1,0,0,0,7856,7857,1,0,0,0,7857,7858,5,374,0,0,7858,7869,
        5,361,0,0,7859,7860,5,102,0,0,7860,7861,5,488,0,0,7861,7862,5,458,
        0,0,7862,7870,5,350,0,0,7863,7864,5,611,0,0,7864,7865,5,458,0,0,
        7865,7866,5,488,0,0,7866,7867,5,458,0,0,7867,7870,5,350,0,0,7868,
        7870,5,730,0,0,7869,7859,1,0,0,0,7869,7863,1,0,0,0,7869,7868,1,0,
        0,0,7869,7870,1,0,0,0,7870,7872,1,0,0,0,7871,7873,7,44,0,0,7872,
        7871,1,0,0,0,7872,7873,1,0,0,0,7873,7875,1,0,0,0,7874,7876,3,794,
        397,0,7875,7874,1,0,0,0,7875,7876,1,0,0,0,7876,7878,1,0,0,0,7877,
        7879,3,462,231,0,7878,7877,1,0,0,0,7878,7879,1,0,0,0,7879,7880,1,
        0,0,0,7880,7881,5,45,0,0,7881,7882,3,464,232,0,7882,7955,1,0,0,0,
        7883,7885,5,155,0,0,7884,7886,3,804,402,0,7885,7884,1,0,0,0,7885,
        7886,1,0,0,0,7886,7888,1,0,0,0,7887,7889,5,665,0,0,7888,7887,1,0,
        0,0,7888,7889,1,0,0,0,7889,7890,1,0,0,0,7890,7891,5,555,0,0,7891,
        7892,3,1056,528,0,7892,7901,5,931,0,0,7893,7898,3,424,212,0,7894,
        7895,5,937,0,0,7895,7897,3,424,212,0,7896,7894,1,0,0,0,7897,7900,
        1,0,0,0,7898,7896,1,0,0,0,7898,7899,1,0,0,0,7899,7902,1,0,0,0,7900,
        7898,1,0,0,0,7901,7893,1,0,0,0,7901,7902,1,0,0,0,7902,7903,1,0,0,
        0,7903,7904,5,932,0,0,7904,7922,5,611,0,0,7905,7907,3,1086,543,0,
        7906,7908,3,466,233,0,7907,7906,1,0,0,0,7907,7908,1,0,0,0,7908,7923,
        1,0,0,0,7909,7910,5,747,0,0,7910,7919,5,931,0,0,7911,7916,3,428,
        214,0,7912,7913,5,937,0,0,7913,7915,3,428,214,0,7914,7912,1,0,0,
        0,7915,7918,1,0,0,0,7916,7914,1,0,0,0,7916,7917,1,0,0,0,7917,7920,
        1,0,0,0,7918,7916,1,0,0,0,7919,7911,1,0,0,0,7919,7920,1,0,0,0,7920,
        7921,1,0,0,0,7921,7923,5,932,0,0,7922,7905,1,0,0,0,7922,7909,1,0,
        0,0,7923,7924,1,0,0,0,7924,7925,5,374,0,0,7925,7926,5,563,0,0,7926,
        7927,5,634,0,0,7927,7928,5,921,0,0,7928,7935,3,1024,512,0,7929,7930,
        5,338,0,0,7930,7931,5,921,0,0,7931,7932,5,931,0,0,7932,7933,3,1026,
        513,0,7933,7934,5,932,0,0,7934,7936,1,0,0,0,7935,7929,1,0,0,0,7935,
        7936,1,0,0,0,7936,7937,1,0,0,0,7937,7938,5,512,0,0,7938,7939,5,921,
        0,0,7939,7940,5,931,0,0,7940,7941,3,1026,513,0,7941,7942,5,932,0,
        0,7942,7943,5,316,0,0,7943,7944,5,921,0,0,7944,7946,3,1024,512,0,
        7945,7947,3,794,397,0,7946,7945,1,0,0,0,7946,7947,1,0,0,0,7947,7949,
        1,0,0,0,7948,7950,3,462,231,0,7949,7948,1,0,0,0,7949,7950,1,0,0,
        0,7950,7951,1,0,0,0,7951,7952,5,45,0,0,7952,7953,3,464,232,0,7953,
        7955,1,0,0,0,7954,7767,1,0,0,0,7954,7831,1,0,0,0,7954,7883,1,0,0,
        0,7955,469,1,0,0,0,7956,7957,5,155,0,0,7957,7958,5,594,0,0,7958,
        7960,5,310,0,0,7959,7961,3,802,401,0,7960,7959,1,0,0,0,7960,7961,
        1,0,0,0,7961,7962,1,0,0,0,7962,7963,3,1030,515,0,7963,7964,5,480,
        0,0,7964,7965,5,921,0,0,7965,7970,3,1008,504,0,7966,7967,5,937,0,
        0,7967,7969,3,1008,504,0,7968,7966,1,0,0,0,7969,7972,1,0,0,0,7970,
        7968,1,0,0,0,7970,7971,1,0,0,0,7971,7983,1,0,0,0,7972,7970,1,0,0,
        0,7973,7974,5,19,0,0,7974,7975,5,921,0,0,7975,7980,3,1030,515,0,
        7976,7977,5,937,0,0,7977,7979,3,1030,515,0,7978,7976,1,0,0,0,7979,
        7982,1,0,0,0,7980,7978,1,0,0,0,7980,7981,1,0,0,0,7981,7984,1,0,0,
        0,7982,7980,1,0,0,0,7983,7973,1,0,0,0,7983,7984,1,0,0,0,7984,7995,
        1,0,0,0,7985,7986,5,22,0,0,7986,7987,5,921,0,0,7987,7992,3,1030,
        515,0,7988,7989,5,937,0,0,7989,7991,3,1030,515,0,7990,7988,1,0,0,
        0,7991,7994,1,0,0,0,7992,7990,1,0,0,0,7992,7993,1,0,0,0,7993,7996,
        1,0,0,0,7994,7992,1,0,0,0,7995,7985,1,0,0,0,7995,7996,1,0,0,0,7996,
        8007,1,0,0,0,7997,7998,5,20,0,0,7998,7999,5,921,0,0,7999,8004,3,
        416,208,0,8000,8001,5,937,0,0,8001,8003,3,416,208,0,8002,8000,1,
        0,0,0,8003,8006,1,0,0,0,8004,8002,1,0,0,0,8004,8005,1,0,0,0,8005,
        8008,1,0,0,0,8006,8004,1,0,0,0,8007,7997,1,0,0,0,8007,8008,1,0,0,
        0,8008,8009,1,0,0,0,8009,8010,5,18,0,0,8010,8011,5,921,0,0,8011,
        8016,3,414,207,0,8012,8013,5,937,0,0,8013,8015,3,414,207,0,8014,
        8012,1,0,0,0,8015,8018,1,0,0,0,8016,8014,1,0,0,0,8016,8017,1,0,0,
        0,8017,8022,1,0,0,0,8018,8016,1,0,0,0,8019,8020,5,330,0,0,8020,8021,
        5,211,0,0,8021,8023,5,116,0,0,8022,8019,1,0,0,0,8022,8023,1,0,0,
        0,8023,8027,1,0,0,0,8024,8025,5,595,0,0,8025,8026,5,921,0,0,8026,
        8028,3,1024,512,0,8027,8024,1,0,0,0,8027,8028,1,0,0,0,8028,8046,
        1,0,0,0,8029,8030,5,155,0,0,8030,8031,5,594,0,0,8031,8033,5,310,
        0,0,8032,8034,3,802,401,0,8033,8032,1,0,0,0,8033,8034,1,0,0,0,8034,
        8035,1,0,0,0,8035,8036,3,1030,515,0,8036,8037,5,45,0,0,8037,8038,
        5,593,0,0,8038,8039,5,481,0,0,8039,8040,3,1030,515,0,8040,8041,5,
        927,0,0,8041,8042,3,1030,515,0,8042,8043,5,927,0,0,8043,8044,3,1030,
        515,0,8044,8046,1,0,0,0,8045,7956,1,0,0,0,8045,8029,1,0,0,0,8046,
        471,1,0,0,0,8047,8049,5,155,0,0,8048,8050,3,804,402,0,8049,8048,
        1,0,0,0,8049,8050,1,0,0,0,8050,8051,1,0,0,0,8051,8052,5,602,0,0,
        8052,8053,5,430,0,0,8053,8054,3,1030,515,0,8054,8056,5,847,0,0,8055,
        8057,3,218,109,0,8056,8055,1,0,0,0,8056,8057,1,0,0,0,8057,8059,1,
        0,0,0,8058,8060,3,220,110,0,8059,8058,1,0,0,0,8059,8060,1,0,0,0,
        8060,8067,1,0,0,0,8061,8062,5,714,0,0,8062,8065,5,921,0,0,8063,8066,
        3,1024,512,0,8064,8066,5,334,0,0,8065,8063,1,0,0,0,8065,8064,1,0,
        0,0,8066,8068,1,0,0,0,8067,8061,1,0,0,0,8067,8068,1,0,0,0,8068,8072,
        1,0,0,0,8069,8070,5,226,0,0,8070,8071,5,921,0,0,8071,8073,3,1024,
        512,0,8072,8069,1,0,0,0,8072,8073,1,0,0,0,8073,8075,1,0,0,0,8074,
        8076,3,222,111,0,8075,8074,1,0,0,0,8075,8076,1,0,0,0,8076,8083,1,
        0,0,0,8077,8079,5,794,0,0,8078,8080,3,692,346,0,8079,8078,1,0,0,
        0,8080,8081,1,0,0,0,8081,8079,1,0,0,0,8081,8082,1,0,0,0,8082,8084,
        1,0,0,0,8083,8077,1,0,0,0,8083,8084,1,0,0,0,8084,473,1,0,0,0,8085,
        8087,5,155,0,0,8086,8088,3,804,402,0,8087,8086,1,0,0,0,8087,8088,
        1,0,0,0,8088,8089,1,0,0,0,8089,8091,5,620,0,0,8090,8092,3,802,401,
        0,8091,8090,1,0,0,0,8091,8092,1,0,0,0,8092,8093,1,0,0,0,8093,8095,
        3,1030,515,0,8094,8096,3,604,302,0,8095,8094,1,0,0,0,8095,8096,1,
        0,0,0,8096,8098,1,0,0,0,8097,8099,3,794,397,0,8098,8097,1,0,0,0,
        8098,8099,1,0,0,0,8099,475,1,0,0,0,8100,8102,5,155,0,0,8101,8103,
        3,804,402,0,8102,8101,1,0,0,0,8102,8103,1,0,0,0,8103,8104,1,0,0,
        0,8104,8105,5,626,0,0,8105,8106,5,5,0,0,8106,8108,5,544,0,0,8107,
        8109,3,802,401,0,8108,8107,1,0,0,0,8108,8109,1,0,0,0,8109,8110,1,
        0,0,0,8110,8111,3,1030,515,0,8111,8112,5,45,0,0,8112,8113,5,931,
        0,0,8113,8118,3,424,212,0,8114,8115,5,937,0,0,8115,8117,3,424,212,
        0,8116,8114,1,0,0,0,8117,8120,1,0,0,0,8118,8116,1,0,0,0,8118,8119,
        1,0,0,0,8119,8121,1,0,0,0,8120,8118,1,0,0,0,8121,8122,5,932,0,0,
        8122,8123,5,611,0,0,8123,8124,5,867,0,0,8124,8125,5,917,0,0,8125,
        8127,3,1066,533,0,8126,8128,3,794,397,0,8127,8126,1,0,0,0,8127,8128,
        1,0,0,0,8128,477,1,0,0,0,8129,8131,5,155,0,0,8130,8132,3,804,402,
        0,8131,8130,1,0,0,0,8131,8132,1,0,0,0,8132,8134,1,0,0,0,8133,8135,
        5,793,0,0,8134,8133,1,0,0,0,8134,8135,1,0,0,0,8135,8136,1,0,0,0,
        8136,8138,5,656,0,0,8137,8139,3,802,401,0,8138,8137,1,0,0,0,8138,
        8139,1,0,0,0,8139,8140,1,0,0,0,8140,8142,3,1006,503,0,8141,8143,
        3,380,190,0,8142,8141,1,0,0,0,8142,8143,1,0,0,0,8143,8147,1,0,0,
        0,8144,8145,5,847,0,0,8145,8146,5,401,0,0,8146,8148,5,5,0,0,8147,
        8144,1,0,0,0,8147,8148,1,0,0,0,8148,8152,1,0,0,0,8149,8150,5,173,
        0,0,8150,8151,5,921,0,0,8151,8153,3,1060,530,0,8152,8149,1,0,0,0,
        8152,8153,1,0,0,0,8153,8157,1,0,0,0,8154,8155,5,413,0,0,8155,8156,
        5,921,0,0,8156,8158,3,1060,530,0,8157,8154,1,0,0,0,8157,8158,1,0,
        0,0,8158,8160,1,0,0,0,8159,8161,3,140,70,0,8160,8159,1,0,0,0,8160,
        8161,1,0,0,0,8161,8163,1,0,0,0,8162,8164,3,604,302,0,8163,8162,1,
        0,0,0,8163,8164,1,0,0,0,8164,8166,1,0,0,0,8165,8167,3,794,397,0,
        8166,8165,1,0,0,0,8166,8167,1,0,0,0,8167,479,1,0,0,0,8168,8170,5,
        155,0,0,8169,8171,3,804,402,0,8170,8169,1,0,0,0,8170,8171,1,0,0,
        0,8171,8172,1,0,0,0,8172,8174,5,662,0,0,8173,8175,3,802,401,0,8174,
        8173,1,0,0,0,8174,8175,1,0,0,0,8175,8176,1,0,0,0,8176,8232,3,1056,
        528,0,8177,8178,5,803,0,0,8178,8179,5,921,0,0,8179,8180,5,464,0,
        0,8180,8181,5,34,0,0,8181,8182,5,921,0,0,8182,8183,3,1030,515,0,
        8183,8184,5,475,0,0,8184,8185,5,921,0,0,8185,8186,5,931,0,0,8186,
        8187,3,1026,513,0,8187,8188,5,932,0,0,8188,8233,1,0,0,0,8189,8190,
        5,803,0,0,8190,8191,5,921,0,0,8191,8192,5,464,0,0,8192,8193,5,472,
        0,0,8193,8194,5,921,0,0,8194,8195,3,1024,512,0,8195,8196,5,473,0,
        0,8196,8197,5,921,0,0,8197,8198,3,1024,512,0,8198,8199,5,34,0,0,
        8199,8200,5,921,0,0,8200,8201,3,1030,515,0,8201,8233,1,0,0,0,8202,
        8203,5,803,0,0,8203,8204,5,921,0,0,8204,8205,5,130,0,0,8205,8206,
        5,34,0,0,8206,8207,5,921,0,0,8207,8208,3,1024,512,0,8208,8209,5,
        217,0,0,8209,8210,5,921,0,0,8210,8211,3,556,278,0,8211,8233,1,0,
        0,0,8212,8213,5,803,0,0,8213,8214,5,921,0,0,8214,8215,5,520,0,0,
        8215,8216,5,819,0,0,8216,8217,5,921,0,0,8217,8218,3,1024,512,0,8218,
        8219,5,520,0,0,8219,8220,5,921,0,0,8220,8221,3,1024,512,0,8221,8233,
        1,0,0,0,8222,8223,5,803,0,0,8223,8224,5,921,0,0,8224,8225,5,298,
        0,0,8225,8226,5,664,0,0,8226,8227,5,921,0,0,8227,8233,3,1024,512,
        0,8228,8229,5,803,0,0,8229,8230,5,921,0,0,8230,8231,5,743,0,0,8231,
        8233,5,295,0,0,8232,8177,1,0,0,0,8232,8189,1,0,0,0,8232,8202,1,0,
        0,0,8232,8212,1,0,0,0,8232,8222,1,0,0,0,8232,8228,1,0,0,0,8233,8235,
        1,0,0,0,8234,8236,3,794,397,0,8235,8234,1,0,0,0,8235,8236,1,0,0,
        0,8236,481,1,0,0,0,8237,8239,5,155,0,0,8238,8240,3,804,402,0,8239,
        8238,1,0,0,0,8239,8240,1,0,0,0,8240,8241,1,0,0,0,8241,8242,5,666,
        0,0,8242,8244,5,354,0,0,8243,8245,3,802,401,0,8244,8243,1,0,0,0,
        8244,8245,1,0,0,0,8245,8246,1,0,0,0,8246,8247,3,1030,515,0,8247,
        8248,5,803,0,0,8248,8249,5,921,0,0,8249,8250,5,250,0,0,8250,8251,
        5,217,0,0,8251,8252,5,921,0,0,8252,8253,3,556,278,0,8253,8254,5,
        263,0,0,8254,8255,5,921,0,0,8255,8256,7,22,0,0,8256,8257,5,256,0,
        0,8257,8258,5,921,0,0,8258,8259,3,1024,512,0,8259,8260,5,262,0,0,
        8260,8266,5,921,0,0,8261,8267,3,1024,512,0,8262,8263,5,931,0,0,8263,
        8264,3,1026,513,0,8264,8265,5,932,0,0,8265,8267,1,0,0,0,8266,8261,
        1,0,0,0,8266,8262,1,0,0,0,8267,8268,1,0,0,0,8268,8269,5,261,0,0,
        8269,8270,5,921,0,0,8270,8274,3,1024,512,0,8271,8272,5,257,0,0,8272,
        8273,5,921,0,0,8273,8275,3,1024,512,0,8274,8271,1,0,0,0,8274,8275,
        1,0,0,0,8275,8285,1,0,0,0,8276,8277,5,257,0,0,8277,8283,5,921,0,
        0,8278,8284,3,1024,512,0,8279,8280,5,931,0,0,8280,8281,3,1026,513,
        0,8281,8282,5,932,0,0,8282,8284,1,0,0,0,8283,8278,1,0,0,0,8283,8279,
        1,0,0,0,8284,8286,1,0,0,0,8285,8276,1,0,0,0,8285,8286,1,0,0,0,8286,
        8293,1,0,0,0,8287,8288,5,255,0,0,8288,8289,5,921,0,0,8289,8290,5,
        931,0,0,8290,8291,3,1026,513,0,8291,8292,5,932,0,0,8292,8294,1,0,
        0,0,8293,8287,1,0,0,0,8293,8294,1,0,0,0,8294,8301,1,0,0,0,8295,8296,
        5,252,0,0,8296,8297,5,921,0,0,8297,8298,5,931,0,0,8298,8299,3,1026,
        513,0,8299,8300,5,932,0,0,8300,8302,1,0,0,0,8301,8295,1,0,0,0,8301,
        8302,1,0,0,0,8302,8306,1,0,0,0,8303,8304,5,258,0,0,8304,8305,5,921,
        0,0,8305,8307,3,1024,512,0,8306,8303,1,0,0,0,8306,8307,1,0,0,0,8307,
        8311,1,0,0,0,8308,8309,5,259,0,0,8309,8310,5,921,0,0,8310,8312,3,
        1024,512,0,8311,8308,1,0,0,0,8311,8312,1,0,0,0,8312,8319,1,0,0,0,
        8313,8314,5,254,0,0,8314,8315,5,921,0,0,8315,8316,5,931,0,0,8316,
        8317,3,1024,512,0,8317,8318,5,932,0,0,8318,8320,1,0,0,0,8319,8313,
        1,0,0,0,8319,8320,1,0,0,0,8320,8324,1,0,0,0,8321,8322,5,253,0,0,
        8322,8323,5,921,0,0,8323,8325,7,23,0,0,8324,8321,1,0,0,0,8324,8325,
        1,0,0,0,8325,8329,1,0,0,0,8326,8327,5,260,0,0,8327,8328,5,921,0,
        0,8328,8330,3,1024,512,0,8329,8326,1,0,0,0,8329,8330,1,0,0,0,8330,
        483,1,0,0,0,8331,8332,7,24,0,0,8332,485,1,0,0,0,8333,8335,5,155,
        0,0,8334,8336,3,804,402,0,8335,8334,1,0,0,0,8335,8336,1,0,0,0,8336,
        8337,1,0,0,0,8337,8338,5,666,0,0,8338,8340,5,354,0,0,8339,8341,3,
        802,401,0,8340,8339,1,0,0,0,8340,8341,1,0,0,0,8341,8342,1,0,0,0,
        8342,8343,3,1030,515,0,8343,8344,5,803,0,0,8344,8345,5,921,0,0,8345,
        8346,5,463,0,0,8346,8347,5,466,0,0,8347,8348,5,921,0,0,8348,8349,
        3,494,247,0,8349,8350,5,471,0,0,8350,8351,5,921,0,0,8351,8353,3,
        1024,512,0,8352,8354,3,148,74,0,8353,8352,1,0,0,0,8353,8354,1,0,
        0,0,8354,8358,1,0,0,0,8355,8356,5,470,0,0,8356,8357,5,921,0,0,8357,
        8359,3,556,278,0,8358,8355,1,0,0,0,8358,8359,1,0,0,0,8359,8363,1,
        0,0,0,8360,8361,5,474,0,0,8361,8362,5,921,0,0,8362,8364,3,1060,530,
        0,8363,8360,1,0,0,0,8363,8364,1,0,0,0,8364,8368,1,0,0,0,8365,8366,
        5,476,0,0,8366,8367,5,921,0,0,8367,8369,3,484,242,0,8368,8365,1,
        0,0,0,8368,8369,1,0,0,0,8369,8376,1,0,0,0,8370,8371,5,93,0,0,8371,
        8372,5,921,0,0,8372,8373,5,931,0,0,8373,8374,3,1026,513,0,8374,8375,
        5,932,0,0,8375,8377,1,0,0,0,8376,8370,1,0,0,0,8376,8377,1,0,0,0,
        8377,8379,1,0,0,0,8378,8380,3,794,397,0,8379,8378,1,0,0,0,8379,8380,
        1,0,0,0,8380,8461,1,0,0,0,8381,8383,5,155,0,0,8382,8384,3,804,402,
        0,8383,8382,1,0,0,0,8383,8384,1,0,0,0,8384,8385,1,0,0,0,8385,8386,
        5,666,0,0,8386,8388,5,354,0,0,8387,8389,3,802,401,0,8388,8387,1,
        0,0,0,8388,8389,1,0,0,0,8389,8390,1,0,0,0,8390,8391,3,1030,515,0,
        8391,8392,5,803,0,0,8392,8393,5,921,0,0,8393,8394,5,463,0,0,8394,
        8395,5,466,0,0,8395,8396,5,921,0,0,8396,8397,5,166,0,0,8397,8398,
        5,471,0,0,8398,8399,5,921,0,0,8399,8401,3,1024,512,0,8400,8402,3,
        148,74,0,8401,8400,1,0,0,0,8401,8402,1,0,0,0,8402,8406,1,0,0,0,8403,
        8404,5,465,0,0,8404,8405,5,921,0,0,8405,8407,3,556,278,0,8406,8403,
        1,0,0,0,8406,8407,1,0,0,0,8407,8411,1,0,0,0,8408,8409,5,469,0,0,
        8409,8410,5,921,0,0,8410,8412,3,556,278,0,8411,8408,1,0,0,0,8411,
        8412,1,0,0,0,8412,8416,1,0,0,0,8413,8414,5,476,0,0,8414,8415,5,921,
        0,0,8415,8417,3,484,242,0,8416,8413,1,0,0,0,8416,8417,1,0,0,0,8417,
        8424,1,0,0,0,8418,8419,5,550,0,0,8419,8420,5,921,0,0,8420,8421,5,
        931,0,0,8421,8422,3,1026,513,0,8422,8423,5,932,0,0,8423,8425,1,0,
        0,0,8424,8418,1,0,0,0,8424,8425,1,0,0,0,8425,8432,1,0,0,0,8426,8427,
        5,93,0,0,8427,8428,5,921,0,0,8428,8429,5,931,0,0,8429,8430,3,1026,
        513,0,8430,8431,5,932,0,0,8431,8433,1,0,0,0,8432,8426,1,0,0,0,8432,
        8433,1,0,0,0,8433,8437,1,0,0,0,8434,8435,5,470,0,0,8435,8436,5,921,
        0,0,8436,8438,3,556,278,0,8437,8434,1,0,0,0,8437,8438,1,0,0,0,8438,
        8442,1,0,0,0,8439,8440,5,474,0,0,8440,8441,5,921,0,0,8441,8443,3,
        1060,530,0,8442,8439,1,0,0,0,8442,8443,1,0,0,0,8443,8445,1,0,0,0,
        8444,8446,3,492,246,0,8445,8444,1,0,0,0,8445,8446,1,0,0,0,8446,8450,
        1,0,0,0,8447,8448,5,467,0,0,8448,8449,5,921,0,0,8449,8451,3,1024,
        512,0,8450,8447,1,0,0,0,8450,8451,1,0,0,0,8451,8455,1,0,0,0,8452,
        8453,5,468,0,0,8453,8454,5,921,0,0,8454,8456,3,1024,512,0,8455,8452,
        1,0,0,0,8455,8456,1,0,0,0,8456,8458,1,0,0,0,8457,8459,3,794,397,
        0,8458,8457,1,0,0,0,8458,8459,1,0,0,0,8459,8461,1,0,0,0,8460,8333,
        1,0,0,0,8460,8381,1,0,0,0,8461,487,1,0,0,0,8462,8464,5,155,0,0,8463,
        8465,3,804,402,0,8464,8463,1,0,0,0,8464,8465,1,0,0,0,8465,8466,1,
        0,0,0,8466,8467,5,666,0,0,8467,8469,5,354,0,0,8468,8470,3,802,401,
        0,8469,8468,1,0,0,0,8469,8470,1,0,0,0,8470,8471,1,0,0,0,8471,8472,
        5,803,0,0,8472,8473,5,921,0,0,8473,8474,5,636,0,0,8474,8475,3,148,
        74,0,8475,8476,5,639,0,0,8476,8477,5,921,0,0,8477,8478,3,1024,512,
        0,8478,8479,5,648,0,0,8479,8480,5,921,0,0,8480,8481,3,1024,512,0,
        8481,8482,5,641,0,0,8482,8483,5,921,0,0,8483,8484,3,1024,512,0,8484,
        8485,5,649,0,0,8485,8486,5,921,0,0,8486,8490,3,1024,512,0,8487,8488,
        5,647,0,0,8488,8489,5,921,0,0,8489,8491,3,1024,512,0,8490,8487,1,
        0,0,0,8490,8491,1,0,0,0,8491,8495,1,0,0,0,8492,8493,5,637,0,0,8493,
        8494,5,921,0,0,8494,8496,3,556,278,0,8495,8492,1,0,0,0,8495,8496,
        1,0,0,0,8496,8500,1,0,0,0,8497,8498,5,646,0,0,8498,8499,5,921,0,
        0,8499,8501,3,1024,512,0,8500,8497,1,0,0,0,8500,8501,1,0,0,0,8501,
        8505,1,0,0,0,8502,8503,5,643,0,0,8503,8504,5,921,0,0,8504,8506,3,
        556,278,0,8505,8502,1,0,0,0,8505,8506,1,0,0,0,8506,8510,1,0,0,0,
        8507,8508,5,642,0,0,8508,8509,5,921,0,0,8509,8511,3,1024,512,0,8510,
        8507,1,0,0,0,8510,8511,1,0,0,0,8511,8515,1,0,0,0,8512,8513,5,640,
        0,0,8513,8514,5,921,0,0,8514,8516,3,1024,512,0,8515,8512,1,0,0,0,
        8515,8516,1,0,0,0,8516,8520,1,0,0,0,8517,8518,5,638,0,0,8518,8519,
        5,921,0,0,8519,8521,3,556,278,0,8520,8517,1,0,0,0,8520,8521,1,0,
        0,0,8521,8525,1,0,0,0,8522,8523,5,645,0,0,8523,8524,5,921,0,0,8524,
        8526,3,1024,512,0,8525,8522,1,0,0,0,8525,8526,1,0,0,0,8526,8530,
        1,0,0,0,8527,8528,5,644,0,0,8528,8529,5,921,0,0,8529,8531,3,1024,
        512,0,8530,8527,1,0,0,0,8530,8531,1,0,0,0,8531,489,1,0,0,0,8532,
        8534,5,155,0,0,8533,8535,3,804,402,0,8534,8533,1,0,0,0,8534,8535,
        1,0,0,0,8535,8536,1,0,0,0,8536,8537,5,666,0,0,8537,8539,5,354,0,
        0,8538,8540,3,802,401,0,8539,8538,1,0,0,0,8539,8540,1,0,0,0,8540,
        8541,1,0,0,0,8541,8542,3,1030,515,0,8542,8543,5,803,0,0,8543,8544,
        5,921,0,0,8544,8545,5,658,0,0,8545,8546,5,659,0,0,8546,8547,5,921,
        0,0,8547,8548,7,48,0,0,8548,8549,5,633,0,0,8549,8550,5,921,0,0,8550,
        8552,7,49,0,0,8551,8553,3,492,246,0,8552,8551,1,0,0,0,8552,8553,
        1,0,0,0,8553,8557,1,0,0,0,8554,8555,5,744,0,0,8555,8556,5,921,0,
        0,8556,8558,3,556,278,0,8557,8554,1,0,0,0,8557,8558,1,0,0,0,8558,
        8560,1,0,0,0,8559,8561,3,794,397,0,8560,8559,1,0,0,0,8560,8561,1,
        0,0,0,8561,491,1,0,0,0,8562,8563,5,439,0,0,8563,8564,5,921,0,0,8564,
        8565,3,1024,512,0,8565,493,1,0,0,0,8566,8567,7,50,0,0,8567,495,1,
        0,0,0,8568,8570,5,711,0,0,8569,8571,5,847,0,0,8570,8569,1,0,0,0,
        8570,8571,1,0,0,0,8571,8573,1,0,0,0,8572,8574,5,921,0,0,8573,8572,
        1,0,0,0,8573,8574,1,0,0,0,8574,8575,1,0,0,0,8575,8576,3,1060,530,
        0,8576,497,1,0,0,0,8577,8579,5,341,0,0,8578,8580,5,99,0,0,8579,8578,
        1,0,0,0,8579,8580,1,0,0,0,8580,8582,1,0,0,0,8581,8583,5,921,0,0,
        8582,8581,1,0,0,0,8582,8583,1,0,0,0,8583,8584,1,0,0,0,8584,8585,
        3,1060,530,0,8585,499,1,0,0,0,8586,8588,5,155,0,0,8587,8589,3,804,
        402,0,8588,8587,1,0,0,0,8588,8589,1,0,0,0,8589,8590,1,0,0,0,8590,
        8592,5,670,0,0,8591,8593,3,802,401,0,8592,8591,1,0,0,0,8592,8593,
        1,0,0,0,8593,8594,1,0,0,0,8594,8596,3,1056,528,0,8595,8597,5,847,
        0,0,8596,8595,1,0,0,0,8596,8597,1,0,0,0,8597,8599,1,0,0,0,8598,8600,
        3,496,248,0,8599,8598,1,0,0,0,8599,8600,1,0,0,0,8600,8602,1,0,0,
        0,8601,8603,3,498,249,0,8602,8601,1,0,0,0,8602,8603,1,0,0,0,8603,
        8605,1,0,0,0,8604,8606,3,616,308,0,8605,8604,1,0,0,0,8605,8606,1,
        0,0,0,8606,8608,1,0,0,0,8607,8609,3,794,397,0,8608,8607,1,0,0,0,
        8608,8609,1,0,0,0,8609,501,1,0,0,0,8610,8612,5,155,0,0,8611,8613,
        3,804,402,0,8612,8611,1,0,0,0,8612,8613,1,0,0,0,8613,8614,1,0,0,
        0,8614,8615,5,672,0,0,8615,8617,5,544,0,0,8616,8618,3,802,401,0,
        8617,8616,1,0,0,0,8617,8618,1,0,0,0,8618,8619,1,0,0,0,8619,8623,
        3,1056,528,0,8620,8622,3,504,252,0,8621,8620,1,0,0,0,8622,8625,1,
        0,0,0,8623,8621,1,0,0,0,8623,8624,1,0,0,0,8624,503,1,0,0,0,8625,
        8623,1,0,0,0,8626,8627,3,506,253,0,8627,8628,5,921,0,0,8628,8629,
        3,1060,530,0,8629,8632,1,0,0,0,8630,8632,3,794,397,0,8631,8626,1,
        0,0,0,8631,8630,1,0,0,0,8632,505,1,0,0,0,8633,8634,7,51,0,0,8634,
        507,1,0,0,0,8635,8637,5,155,0,0,8636,8638,3,804,402,0,8637,8636,
        1,0,0,0,8637,8638,1,0,0,0,8638,8639,1,0,0,0,8639,8640,5,520,0,0,
        8640,8642,5,544,0,0,8641,8643,3,802,401,0,8642,8641,1,0,0,0,8642,
        8643,1,0,0,0,8643,8644,1,0,0,0,8644,8648,3,1056,528,0,8645,8647,
        3,510,255,0,8646,8645,1,0,0,0,8647,8650,1,0,0,0,8648,8646,1,0,0,
        0,8648,8649,1,0,0,0,8649,509,1,0,0,0,8650,8648,1,0,0,0,8651,8652,
        3,512,256,0,8652,8653,5,921,0,0,8653,8654,3,1060,530,0,8654,8657,
        1,0,0,0,8655,8657,3,794,397,0,8656,8651,1,0,0,0,8656,8655,1,0,0,
        0,8657,511,1,0,0,0,8658,8659,7,52,0,0,8659,513,1,0,0,0,8660,8662,
        5,155,0,0,8661,8663,3,804,402,0,8662,8661,1,0,0,0,8662,8663,1,0,
        0,0,8663,8664,1,0,0,0,8664,8665,5,678,0,0,8665,8667,3,1030,515,0,
        8666,8668,3,794,397,0,8667,8666,1,0,0,0,8667,8668,1,0,0,0,8668,515,
        1,0,0,0,8669,8670,7,53,0,0,8670,517,1,0,0,0,8671,8672,5,140,0,0,
        8672,8673,5,921,0,0,8673,8819,7,54,0,0,8674,8675,5,577,0,0,8675,
        8678,5,921,0,0,8676,8679,3,1024,512,0,8677,8679,5,444,0,0,8678,8676,
        1,0,0,0,8678,8677,1,0,0,0,8679,8819,1,0,0,0,8680,8681,5,268,0,0,
        8681,8684,5,921,0,0,8682,8685,3,1024,512,0,8683,8685,5,444,0,0,8684,
        8682,1,0,0,0,8684,8683,1,0,0,0,8685,8819,1,0,0,0,8686,8687,5,272,
        0,0,8687,8688,5,921,0,0,8688,8819,3,1024,512,0,8689,8690,5,691,0,
        0,8690,8691,5,921,0,0,8691,8819,3,1060,530,0,8692,8693,5,687,0,0,
        8693,8694,5,921,0,0,8694,8819,3,556,278,0,8695,8696,5,176,0,0,8696,
        8699,5,921,0,0,8697,8700,3,1024,512,0,8698,8700,5,51,0,0,8699,8697,
        1,0,0,0,8699,8698,1,0,0,0,8700,8819,1,0,0,0,8701,8702,5,781,0,0,
        8702,8705,5,921,0,0,8703,8706,3,1024,512,0,8704,8706,5,51,0,0,8705,
        8703,1,0,0,0,8705,8704,1,0,0,0,8706,8819,1,0,0,0,8707,8708,5,768,
        0,0,8708,8711,5,921,0,0,8709,8712,3,1024,512,0,8710,8712,5,51,0,
        0,8711,8709,1,0,0,0,8711,8710,1,0,0,0,8712,8819,1,0,0,0,8713,8714,
        5,88,0,0,8714,8715,5,921,0,0,8715,8819,7,55,0,0,8716,8717,5,237,
        0,0,8717,8721,5,921,0,0,8718,8722,3,516,258,0,8719,8722,5,444,0,
        0,8720,8722,5,445,0,0,8721,8718,1,0,0,0,8721,8719,1,0,0,0,8721,8720,
        1,0,0,0,8722,8819,1,0,0,0,8723,8724,5,238,0,0,8724,8728,5,921,0,
        0,8725,8729,3,1024,512,0,8726,8729,5,444,0,0,8727,8729,5,445,0,0,
        8728,8725,1,0,0,0,8728,8726,1,0,0,0,8728,8727,1,0,0,0,8729,8819,
        1,0,0,0,8730,8731,5,796,0,0,8731,8732,5,921,0,0,8732,8819,3,556,
        278,0,8733,8734,5,269,0,0,8734,8739,5,921,0,0,8735,8740,3,1024,512,
        0,8736,8740,5,444,0,0,8737,8740,5,445,0,0,8738,8740,5,903,0,0,8739,
        8735,1,0,0,0,8739,8736,1,0,0,0,8739,8737,1,0,0,0,8739,8738,1,0,0,
        0,8740,8819,1,0,0,0,8741,8742,5,459,0,0,8742,8743,5,921,0,0,8743,
        8747,5,931,0,0,8744,8746,3,1026,513,0,8745,8744,1,0,0,0,8746,8749,
        1,0,0,0,8747,8745,1,0,0,0,8747,8748,1,0,0,0,8748,8750,1,0,0,0,8749,
        8747,1,0,0,0,8750,8819,5,932,0,0,8751,8752,5,234,0,0,8752,8753,5,
        921,0,0,8753,8819,3,556,278,0,8754,8755,5,592,0,0,8755,8756,5,921,
        0,0,8756,8819,3,556,278,0,8757,8758,5,215,0,0,8758,8759,5,921,0,
        0,8759,8819,3,556,278,0,8760,8761,5,688,0,0,8761,8762,5,921,0,0,
        8762,8819,3,556,278,0,8763,8764,5,223,0,0,8764,8767,5,921,0,0,8765,
        8768,3,1024,512,0,8766,8768,5,826,0,0,8767,8765,1,0,0,0,8767,8766,
        1,0,0,0,8768,8819,1,0,0,0,8769,8770,5,220,0,0,8770,8771,5,921,0,
        0,8771,8819,3,556,278,0,8772,8773,5,25,0,0,8773,8774,5,921,0,0,8774,
        8819,3,556,278,0,8775,8776,5,733,0,0,8776,8777,5,921,0,0,8777,8819,
        3,556,278,0,8778,8779,5,732,0,0,8779,8780,5,921,0,0,8780,8819,3,
        556,278,0,8781,8782,5,331,0,0,8782,8783,5,921,0,0,8783,8819,3,556,
        278,0,8784,8785,5,140,0,0,8785,8786,5,921,0,0,8786,8819,5,51,0,0,
        8787,8819,5,399,0,0,8788,8819,5,693,0,0,8789,8819,5,444,0,0,8790,
        8791,5,694,0,0,8791,8792,5,921,0,0,8792,8819,3,556,278,0,8793,8794,
        5,87,0,0,8794,8795,5,921,0,0,8795,8819,3,556,278,0,8796,8797,5,140,
        0,0,8797,8798,5,921,0,0,8798,8819,5,51,0,0,8799,8819,5,313,0,0,8800,
        8819,5,100,0,0,8801,8819,5,97,0,0,8802,8819,5,862,0,0,8803,8819,
        5,191,0,0,8804,8819,5,573,0,0,8805,8819,5,444,0,0,8806,8807,5,547,
        0,0,8807,8808,5,921,0,0,8808,8819,3,556,278,0,8809,8810,5,734,0,
        0,8810,8811,5,921,0,0,8811,8819,3,556,278,0,8812,8813,5,203,0,0,
        8813,8814,5,921,0,0,8814,8819,3,556,278,0,8815,8816,5,202,0,0,8816,
        8817,5,921,0,0,8817,8819,3,556,278,0,8818,8671,1,0,0,0,8818,8674,
        1,0,0,0,8818,8680,1,0,0,0,8818,8686,1,0,0,0,8818,8689,1,0,0,0,8818,
        8692,1,0,0,0,8818,8695,1,0,0,0,8818,8701,1,0,0,0,8818,8707,1,0,0,
        0,8818,8713,1,0,0,0,8818,8716,1,0,0,0,8818,8723,1,0,0,0,8818,8730,
        1,0,0,0,8818,8733,1,0,0,0,8818,8741,1,0,0,0,8818,8751,1,0,0,0,8818,
        8754,1,0,0,0,8818,8757,1,0,0,0,8818,8760,1,0,0,0,8818,8763,1,0,0,
        0,8818,8769,1,0,0,0,8818,8772,1,0,0,0,8818,8775,1,0,0,0,8818,8778,
        1,0,0,0,8818,8781,1,0,0,0,8818,8784,1,0,0,0,8818,8787,1,0,0,0,8818,
        8788,1,0,0,0,8818,8789,1,0,0,0,8818,8790,1,0,0,0,8818,8793,1,0,0,
        0,8818,8796,1,0,0,0,8818,8799,1,0,0,0,8818,8800,1,0,0,0,8818,8801,
        1,0,0,0,8818,8802,1,0,0,0,8818,8803,1,0,0,0,8818,8804,1,0,0,0,8818,
        8805,1,0,0,0,8818,8806,1,0,0,0,8818,8809,1,0,0,0,8818,8812,1,0,0,
        0,8818,8815,1,0,0,0,8819,519,1,0,0,0,8820,8821,5,492,0,0,8821,8827,
        5,921,0,0,8822,8828,5,151,0,0,8823,8828,5,689,0,0,8824,8828,5,690,
        0,0,8825,8826,5,690,0,0,8826,8828,5,4,0,0,8827,8822,1,0,0,0,8827,
        8823,1,0,0,0,8827,8824,1,0,0,0,8827,8825,1,0,0,0,8828,8853,1,0,0,
        0,8829,8830,5,685,0,0,8830,8831,5,921,0,0,8831,8853,3,1060,530,0,
        8832,8833,5,561,0,0,8833,8834,5,921,0,0,8834,8853,3,556,278,0,8835,
        8836,5,614,0,0,8836,8837,5,921,0,0,8837,8853,3,556,278,0,8838,8839,
        5,407,0,0,8839,8840,5,921,0,0,8840,8853,5,107,0,0,8841,8853,5,106,
        0,0,8842,8853,5,444,0,0,8843,8844,5,228,0,0,8844,8845,5,921,0,0,
        8845,8853,3,556,278,0,8846,8847,5,800,0,0,8847,8848,5,921,0,0,8848,
        8853,3,556,278,0,8849,8850,5,279,0,0,8850,8851,5,921,0,0,8851,8853,
        3,556,278,0,8852,8820,1,0,0,0,8852,8829,1,0,0,0,8852,8832,1,0,0,
        0,8852,8835,1,0,0,0,8852,8838,1,0,0,0,8852,8841,1,0,0,0,8852,8842,
        1,0,0,0,8852,8843,1,0,0,0,8852,8846,1,0,0,0,8852,8849,1,0,0,0,8853,
        521,1,0,0,0,8854,8855,5,224,0,0,8855,8856,5,921,0,0,8856,8857,5,
        931,0,0,8857,8858,5,803,0,0,8858,8859,5,921,0,0,8859,8860,7,56,0,
        0,8860,8861,5,932,0,0,8861,523,1,0,0,0,8862,8863,5,803,0,0,8863,
        8864,5,921,0,0,8864,8865,3,1024,512,0,8865,525,1,0,0,0,8866,8867,
        5,403,0,0,8867,8868,5,921,0,0,8868,8869,3,1024,512,0,8869,527,1,
        0,0,0,8870,8871,5,372,0,0,8871,8872,5,921,0,0,8872,8873,3,1024,512,
        0,8873,529,1,0,0,0,8874,8875,5,224,0,0,8875,8876,5,921,0,0,8876,
        8885,5,931,0,0,8877,8879,3,524,262,0,8878,8877,1,0,0,0,8878,8879,
        1,0,0,0,8879,8880,1,0,0,0,8880,8886,3,526,263,0,8881,8883,3,524,
        262,0,8882,8884,3,528,264,0,8883,8882,1,0,0,0,8883,8884,1,0,0,0,
        8884,8886,1,0,0,0,8885,8878,1,0,0,0,8885,8881,1,0,0,0,8886,8887,
        1,0,0,0,8887,8888,5,932,0,0,8888,531,1,0,0,0,8889,8890,5,72,0,0,
        8890,8891,5,921,0,0,8891,8892,3,1024,512,0,8892,533,1,0,0,0,8893,
        8894,5,65,0,0,8894,8895,5,921,0,0,8895,8896,3,1024,512,0,8896,535,
        1,0,0,0,8897,8898,5,67,0,0,8898,8899,5,921,0,0,8899,8900,3,1024,
        512,0,8900,537,1,0,0,0,8901,8902,5,66,0,0,8902,8903,5,921,0,0,8903,
        8904,3,1024,512,0,8904,539,1,0,0,0,8905,8906,5,803,0,0,8906,8907,
        5,921,0,0,8907,8909,5,75,0,0,8908,8905,1,0,0,0,8908,8909,1,0,0,0,
        8909,8910,1,0,0,0,8910,8911,5,403,0,0,8911,8912,5,921,0,0,8912,8924,
        3,1024,512,0,8913,8914,5,403,0,0,8914,8915,5,921,0,0,8915,8916,3,
        1024,512,0,8916,8917,5,803,0,0,8917,8918,5,921,0,0,8918,8919,5,75,
        0,0,8919,8924,1,0,0,0,8920,8921,5,803,0,0,8921,8922,5,921,0,0,8922,
        8924,5,445,0,0,8923,8908,1,0,0,0,8923,8913,1,0,0,0,8923,8920,1,0,
        0,0,8924,541,1,0,0,0,8925,8926,5,224,0,0,8926,8927,5,921,0,0,8927,
        8928,5,931,0,0,8928,8929,3,540,270,0,8929,8930,5,932,0,0,8930,543,
        1,0,0,0,8931,8932,5,726,0,0,8932,8933,5,921,0,0,8933,8934,3,1030,
        515,0,8934,545,1,0,0,0,8935,8945,3,544,272,0,8936,8937,5,156,0,0,
        8937,8938,5,921,0,0,8938,8939,5,931,0,0,8939,8940,5,79,0,0,8940,
        8941,5,921,0,0,8941,8942,3,1024,512,0,8942,8943,5,932,0,0,8943,8945,
        1,0,0,0,8944,8935,1,0,0,0,8944,8936,1,0,0,0,8945,547,1,0,0,0,8946,
        8947,5,803,0,0,8947,8948,5,921,0,0,8948,8950,5,294,0,0,8949,8946,
        1,0,0,0,8949,8950,1,0,0,0,8950,8951,1,0,0,0,8951,8952,5,372,0,0,
        8952,8953,5,921,0,0,8953,8965,3,1024,512,0,8954,8955,5,372,0,0,8955,
        8956,5,921,0,0,8956,8957,3,1024,512,0,8957,8958,5,803,0,0,8958,8959,
        5,921,0,0,8959,8960,5,294,0,0,8960,8965,1,0,0,0,8961,8962,5,803,
        0,0,8962,8963,5,921,0,0,8963,8965,5,445,0,0,8964,8949,1,0,0,0,8964,
        8954,1,0,0,0,8964,8961,1,0,0,0,8965,549,1,0,0,0,8966,8967,5,224,
        0,0,8967,8968,5,921,0,0,8968,8969,5,931,0,0,8969,8970,3,548,274,
        0,8970,8971,5,932,0,0,8971,551,1,0,0,0,8972,8987,3,544,272,0,8973,
        8974,5,156,0,0,8974,8975,5,921,0,0,8975,8982,5,931,0,0,8976,8977,
        3,534,267,0,8977,8979,3,536,268,0,8978,8980,3,532,266,0,8979,8978,
        1,0,0,0,8979,8980,1,0,0,0,8980,8983,1,0,0,0,8981,8983,3,538,269,
        0,8982,8976,1,0,0,0,8982,8981,1,0,0,0,8983,8984,1,0,0,0,8984,8985,
        5,932,0,0,8985,8987,1,0,0,0,8986,8972,1,0,0,0,8986,8973,1,0,0,0,
        8987,553,1,0,0,0,8988,8989,5,813,0,0,8989,8990,5,921,0,0,8990,8999,
        7,57,0,0,8991,8993,3,552,276,0,8992,8991,1,0,0,0,8992,8993,1,0,0,
        0,8993,8994,1,0,0,0,8994,9000,3,530,265,0,8995,8997,3,530,265,0,
        8996,8995,1,0,0,0,8996,8997,1,0,0,0,8997,8998,1,0,0,0,8998,9000,
        3,552,276,0,8999,8992,1,0,0,0,8999,8996,1,0,0,0,8999,9000,1,0,0,
        0,9000,9028,1,0,0,0,9001,9002,5,813,0,0,9002,9003,5,921,0,0,9003,
        9012,5,908,0,0,9004,9006,3,544,272,0,9005,9004,1,0,0,0,9005,9006,
        1,0,0,0,9006,9007,1,0,0,0,9007,9013,3,550,275,0,9008,9010,3,550,
        275,0,9009,9008,1,0,0,0,9009,9010,1,0,0,0,9010,9011,1,0,0,0,9011,
        9013,3,544,272,0,9012,9005,1,0,0,0,9012,9009,1,0,0,0,9012,9013,1,
        0,0,0,9013,9028,1,0,0,0,9014,9015,5,813,0,0,9015,9016,5,921,0,0,
        9016,9025,5,909,0,0,9017,9019,3,546,273,0,9018,9017,1,0,0,0,9018,
        9019,1,0,0,0,9019,9020,1,0,0,0,9020,9026,3,542,271,0,9021,9023,3,
        542,271,0,9022,9021,1,0,0,0,9022,9023,1,0,0,0,9023,9024,1,0,0,0,
        9024,9026,3,546,273,0,9025,9018,1,0,0,0,9025,9022,1,0,0,0,9025,9026,
        1,0,0,0,9026,9028,1,0,0,0,9027,8988,1,0,0,0,9027,9001,1,0,0,0,9027,
        9014,1,0,0,0,9028,555,1,0,0,0,9029,9030,7,58,0,0,9030,557,1,0,0,
        0,9031,9032,5,216,0,0,9032,9033,5,921,0,0,9033,9034,3,556,278,0,
        9034,559,1,0,0,0,9035,9036,5,583,0,0,9036,9037,5,921,0,0,9037,9038,
        3,556,278,0,9038,561,1,0,0,0,9039,9040,5,59,0,0,9040,9041,5,921,
        0,0,9041,9042,3,556,278,0,9042,563,1,0,0,0,9043,9044,5,450,0,0,9044,
        9045,5,921,0,0,9045,9046,3,1024,512,0,9046,565,1,0,0,0,9047,9048,
        5,199,0,0,9048,9049,5,921,0,0,9049,9060,5,931,0,0,9050,9052,3,558,
        279,0,9051,9053,3,560,280,0,9052,9051,1,0,0,0,9052,9053,1,0,0,0,
        9053,9061,1,0,0,0,9054,9055,5,583,0,0,9055,9056,5,921,0,0,9056,9061,
        5,266,0,0,9057,9058,3,560,280,0,9058,9059,3,558,279,0,9059,9061,
        1,0,0,0,9060,9050,1,0,0,0,9060,9054,1,0,0,0,9060,9057,1,0,0,0,9061,
        9062,1,0,0,0,9062,9063,5,932,0,0,9063,567,1,0,0,0,9064,9065,5,199,
        0,0,9065,9066,5,921,0,0,9066,9067,5,931,0,0,9067,9069,3,558,279,
        0,9068,9070,3,560,280,0,9069,9068,1,0,0,0,9069,9070,1,0,0,0,9070,
        9072,1,0,0,0,9071,9073,3,562,281,0,9072,9071,1,0,0,0,9072,9073,1,
        0,0,0,9073,9074,1,0,0,0,9074,9075,5,932,0,0,9075,9107,1,0,0,0,9076,
        9077,5,199,0,0,9077,9078,5,921,0,0,9078,9079,5,931,0,0,9079,9081,
        3,558,279,0,9080,9082,3,562,281,0,9081,9080,1,0,0,0,9081,9082,1,
        0,0,0,9082,9084,1,0,0,0,9083,9085,3,560,280,0,9084,9083,1,0,0,0,
        9084,9085,1,0,0,0,9085,9087,1,0,0,0,9086,9088,3,564,282,0,9087,9086,
        1,0,0,0,9087,9088,1,0,0,0,9088,9089,1,0,0,0,9089,9090,5,932,0,0,
        9090,9107,1,0,0,0,9091,9092,5,199,0,0,9092,9093,5,921,0,0,9093,9094,
        5,931,0,0,9094,9096,3,558,279,0,9095,9097,3,560,280,0,9096,9095,
        1,0,0,0,9096,9097,1,0,0,0,9097,9099,1,0,0,0,9098,9100,3,562,281,
        0,9099,9098,1,0,0,0,9099,9100,1,0,0,0,9100,9102,1,0,0,0,9101,9103,
        3,564,282,0,9102,9101,1,0,0,0,9102,9103,1,0,0,0,9103,9104,1,0,0,
        0,9104,9105,5,932,0,0,9105,9107,1,0,0,0,9106,9064,1,0,0,0,9106,9076,
        1,0,0,0,9106,9091,1,0,0,0,9107,569,1,0,0,0,9108,9110,5,155,0,0,9109,
        9111,3,804,402,0,9110,9109,1,0,0,0,9110,9111,1,0,0,0,9111,9113,1,
        0,0,0,9112,9114,3,600,300,0,9113,9112,1,0,0,0,9113,9114,1,0,0,0,
        9114,9115,1,0,0,0,9115,9117,5,706,0,0,9116,9118,3,802,401,0,9117,
        9116,1,0,0,0,9117,9118,1,0,0,0,9118,9119,1,0,0,0,9119,9121,3,1058,
        529,0,9120,9122,3,522,261,0,9121,9120,1,0,0,0,9121,9122,1,0,0,0,
        9122,9124,1,0,0,0,9123,9125,3,566,283,0,9124,9123,1,0,0,0,9124,9125,
        1,0,0,0,9125,9145,1,0,0,0,9126,9127,5,273,0,0,9127,9128,5,921,0,
        0,9128,9141,5,931,0,0,9129,9130,5,283,0,0,9130,9131,5,921,0,0,9131,
        9142,3,1024,512,0,9132,9133,5,803,0,0,9133,9134,5,921,0,0,9134,9138,
        3,420,210,0,9135,9137,3,518,259,0,9136,9135,1,0,0,0,9137,9140,1,
        0,0,0,9138,9136,1,0,0,0,9138,9139,1,0,0,0,9139,9142,1,0,0,0,9140,
        9138,1,0,0,0,9141,9129,1,0,0,0,9141,9132,1,0,0,0,9142,9143,1,0,0,
        0,9143,9144,5,932,0,0,9144,9146,1,0,0,0,9145,9126,1,0,0,0,9145,9146,
        1,0,0,0,9146,9153,1,0,0,0,9147,9148,5,153,0,0,9148,9149,5,921,0,
        0,9149,9150,5,931,0,0,9150,9151,3,520,260,0,9151,9152,5,932,0,0,
        9152,9154,1,0,0,0,9153,9147,1,0,0,0,9153,9154,1,0,0,0,9154,9156,
        1,0,0,0,9155,9157,3,604,302,0,9156,9155,1,0,0,0,9156,9157,1,0,0,
        0,9157,9159,1,0,0,0,9158,9160,3,794,397,0,9159,9158,1,0,0,0,9159,
        9160,1,0,0,0,9160,9213,1,0,0,0,9161,9163,5,155,0,0,9162,9164,3,804,
        402,0,9163,9162,1,0,0,0,9163,9164,1,0,0,0,9164,9166,1,0,0,0,9165,
        9167,3,600,300,0,9166,9165,1,0,0,0,9166,9167,1,0,0,0,9167,9168,1,
        0,0,0,9168,9170,5,706,0,0,9169,9171,3,802,401,0,9170,9169,1,0,0,
        0,9170,9171,1,0,0,0,9171,9172,1,0,0,0,9172,9173,3,1058,529,0,9173,
        9175,3,554,277,0,9174,9176,3,568,284,0,9175,9174,1,0,0,0,9175,9176,
        1,0,0,0,9176,9196,1,0,0,0,9177,9178,5,273,0,0,9178,9179,5,921,0,
        0,9179,9192,5,931,0,0,9180,9181,5,283,0,0,9181,9182,5,921,0,0,9182,
        9193,3,1024,512,0,9183,9184,5,803,0,0,9184,9185,5,921,0,0,9185,9189,
        3,420,210,0,9186,9188,3,518,259,0,9187,9186,1,0,0,0,9188,9191,1,
        0,0,0,9189,9187,1,0,0,0,9189,9190,1,0,0,0,9190,9193,1,0,0,0,9191,
        9189,1,0,0,0,9192,9180,1,0,0,0,9192,9183,1,0,0,0,9193,9194,1,0,0,
        0,9194,9195,5,932,0,0,9195,9197,1,0,0,0,9196,9177,1,0,0,0,9196,9197,
        1,0,0,0,9197,9204,1,0,0,0,9198,9199,5,153,0,0,9199,9200,5,921,0,
        0,9200,9201,5,931,0,0,9201,9202,3,520,260,0,9202,9203,5,932,0,0,
        9203,9205,1,0,0,0,9204,9198,1,0,0,0,9204,9205,1,0,0,0,9205,9207,
        1,0,0,0,9206,9208,3,604,302,0,9207,9206,1,0,0,0,9207,9208,1,0,0,
        0,9208,9210,1,0,0,0,9209,9211,3,794,397,0,9210,9209,1,0,0,0,9210,
        9211,1,0,0,0,9211,9213,1,0,0,0,9212,9108,1,0,0,0,9212,9161,1,0,0,
        0,9213,571,1,0,0,0,9214,9215,5,28,0,0,9215,9217,5,706,0,0,9216,9218,
        3,800,400,0,9217,9216,1,0,0,0,9217,9218,1,0,0,0,9218,9219,1,0,0,
        0,9219,9220,3,1058,529,0,9220,9221,5,589,0,0,9221,9222,5,784,0,0,
        9222,9223,3,1058,529,0,9223,9265,1,0,0,0,9224,9225,5,28,0,0,9225,
        9227,5,706,0,0,9226,9228,3,800,400,0,9227,9226,1,0,0,0,9227,9228,
        1,0,0,0,9228,9229,1,0,0,0,9229,9230,3,1058,529,0,9230,9231,3,354,
        177,0,9231,9265,1,0,0,0,9232,9233,5,28,0,0,9233,9235,5,706,0,0,9234,
        9236,3,800,400,0,9235,9234,1,0,0,0,9235,9236,1,0,0,0,9236,9237,1,
        0,0,0,9237,9238,3,1058,529,0,9238,9239,3,358,179,0,9239,9265,1,0,
        0,0,9240,9241,5,28,0,0,9241,9243,5,706,0,0,9242,9244,3,800,400,0,
        9243,9242,1,0,0,0,9243,9244,1,0,0,0,9244,9245,1,0,0,0,9245,9246,
        3,1058,529,0,9246,9248,5,676,0,0,9247,9249,3,554,277,0,9248,9247,
        1,0,0,0,9248,9249,1,0,0,0,9249,9251,1,0,0,0,9250,9252,3,48,24,0,
        9251,9250,1,0,0,0,9251,9252,1,0,0,0,9252,9259,1,0,0,0,9253,9254,
        5,153,0,0,9254,9255,5,921,0,0,9255,9256,5,931,0,0,9256,9257,3,520,
        260,0,9257,9258,5,932,0,0,9258,9260,1,0,0,0,9259,9253,1,0,0,0,9259,
        9260,1,0,0,0,9260,9262,1,0,0,0,9261,9263,3,794,397,0,9262,9261,1,
        0,0,0,9262,9263,1,0,0,0,9263,9265,1,0,0,0,9264,9214,1,0,0,0,9264,
        9224,1,0,0,0,9264,9232,1,0,0,0,9264,9240,1,0,0,0,9265,573,1,0,0,
        0,9266,9267,5,208,0,0,9267,9269,5,706,0,0,9268,9270,3,800,400,0,
        9269,9268,1,0,0,0,9269,9270,1,0,0,0,9270,9271,1,0,0,0,9271,9272,
        3,1058,529,0,9272,575,1,0,0,0,9273,9274,3,808,404,0,9274,9275,5,
        706,0,0,9275,9276,3,1058,529,0,9276,577,1,0,0,0,9277,9278,5,681,
        0,0,9278,9280,5,707,0,0,9279,9281,3,1002,501,0,9280,9279,1,0,0,0,
        9280,9281,1,0,0,0,9281,9283,1,0,0,0,9282,9284,3,928,464,0,9283,9282,
        1,0,0,0,9283,9284,1,0,0,0,9284,579,1,0,0,0,9285,9286,5,727,0,0,9286,
        9287,5,921,0,0,9287,9288,5,635,0,0,9288,9289,5,724,0,0,9289,9290,
        5,921,0,0,9290,9294,3,1024,512,0,9291,9292,5,723,0,0,9292,9293,5,
        921,0,0,9293,9295,3,1024,512,0,9294,9291,1,0,0,0,9294,9295,1,0,0,
        0,9295,9306,1,0,0,0,9296,9297,5,727,0,0,9297,9298,5,921,0,0,9298,
        9306,5,293,0,0,9299,9300,5,727,0,0,9300,9301,5,921,0,0,9301,9302,
        5,73,0,0,9302,9303,5,81,0,0,9303,9304,5,921,0,0,9304,9306,3,1024,
        512,0,9305,9285,1,0,0,0,9305,9296,1,0,0,0,9305,9299,1,0,0,0,9306,
        581,1,0,0,0,9307,9308,5,724,0,0,9308,9309,5,921,0,0,9309,9313,3,
        1024,512,0,9310,9311,5,723,0,0,9311,9312,5,921,0,0,9312,9314,3,1024,
        512,0,9313,9310,1,0,0,0,9313,9314,1,0,0,0,9314,9319,1,0,0,0,9315,
        9316,5,81,0,0,9316,9317,5,921,0,0,9317,9319,3,1024,512,0,9318,9307,
        1,0,0,0,9318,9315,1,0,0,0,9319,583,1,0,0,0,9320,9321,5,354,0,0,9321,
        9322,5,921,0,0,9322,9323,3,1024,512,0,9323,585,1,0,0,0,9324,9326,
        5,155,0,0,9325,9327,3,804,402,0,9326,9325,1,0,0,0,9326,9327,1,0,
        0,0,9327,9328,1,0,0,0,9328,9329,5,721,0,0,9329,9331,5,354,0,0,9330,
        9332,3,802,401,0,9331,9330,1,0,0,0,9331,9332,1,0,0,0,9332,9333,1,
        0,0,0,9333,9334,3,1030,515,0,9334,9335,5,803,0,0,9335,9336,5,921,
        0,0,9336,9337,5,264,0,0,9337,9338,3,580,290,0,9338,9339,5,217,0,
        0,9339,9340,5,921,0,0,9340,9341,3,556,278,0,9341,9342,5,722,0,0,
        9342,9343,5,921,0,0,9343,9344,5,931,0,0,9344,9345,3,1026,513,0,9345,
        9352,5,932,0,0,9346,9347,5,725,0,0,9347,9348,5,921,0,0,9348,9349,
        5,931,0,0,9349,9350,3,1026,513,0,9350,9351,5,932,0,0,9351,9353,1,
        0,0,0,9352,9346,1,0,0,0,9352,9353,1,0,0,0,9353,9355,1,0,0,0,9354,
        9356,3,794,397,0,9355,9354,1,0,0,0,9355,9356,1,0,0,0,9356,587,1,
        0,0,0,9357,9358,5,152,0,0,9358,9359,5,309,0,0,9359,589,1,0,0,0,9360,
        9361,5,41,0,0,9361,9362,5,921,0,0,9362,9363,3,556,278,0,9363,591,
        1,0,0,0,9364,9365,5,352,0,0,9365,9366,5,921,0,0,9366,9367,5,797,
        0,0,9367,593,1,0,0,0,9368,9369,5,682,0,0,9369,9370,5,921,0,0,9370,
        9371,3,556,278,0,9371,595,1,0,0,0,9372,9373,3,382,191,0,9373,9386,
        5,931,0,0,9374,9375,5,766,0,0,9375,9376,5,918,0,0,9376,9387,3,1024,
        512,0,9377,9378,5,482,0,0,9378,9379,5,918,0,0,9379,9387,3,1024,512,
        0,9380,9381,5,716,0,0,9381,9382,5,918,0,0,9382,9387,3,1030,515,0,
        9383,9384,5,728,0,0,9384,9385,5,918,0,0,9385,9387,3,1024,512,0,9386,
        9374,1,0,0,0,9386,9377,1,0,0,0,9386,9380,1,0,0,0,9386,9383,1,0,0,
        0,9387,9388,1,0,0,0,9388,9389,5,932,0,0,9389,597,1,0,0,0,9390,9392,
        5,155,0,0,9391,9393,3,804,402,0,9392,9391,1,0,0,0,9392,9393,1,0,
        0,0,9393,9394,1,0,0,0,9394,9396,5,728,0,0,9395,9397,3,802,401,0,
        9396,9395,1,0,0,0,9396,9397,1,0,0,0,9397,9398,1,0,0,0,9398,9400,
        3,1056,528,0,9399,9401,3,604,302,0,9400,9399,1,0,0,0,9400,9401,1,
        0,0,0,9401,9403,1,0,0,0,9402,9404,3,588,294,0,9403,9402,1,0,0,0,
        9403,9404,1,0,0,0,9404,9405,1,0,0,0,9405,9406,5,488,0,0,9406,9407,
        7,59,0,0,9407,9409,3,1056,528,0,9408,9410,3,596,298,0,9409,9408,
        1,0,0,0,9409,9410,1,0,0,0,9410,9412,1,0,0,0,9411,9413,3,590,295,
        0,9412,9411,1,0,0,0,9412,9413,1,0,0,0,9413,9415,1,0,0,0,9414,9416,
        3,594,297,0,9415,9414,1,0,0,0,9415,9416,1,0,0,0,9416,9418,1,0,0,
        0,9417,9419,3,794,397,0,9418,9417,1,0,0,0,9418,9419,1,0,0,0,9419,
        9470,1,0,0,0,9420,9422,5,155,0,0,9421,9423,3,804,402,0,9422,9421,
        1,0,0,0,9422,9423,1,0,0,0,9423,9424,1,0,0,0,9424,9426,5,728,0,0,
        9425,9427,3,802,401,0,9426,9425,1,0,0,0,9426,9427,1,0,0,0,9427,9428,
        1,0,0,0,9428,9430,3,1056,528,0,9429,9431,3,604,302,0,9430,9429,1,
        0,0,0,9430,9431,1,0,0,0,9431,9433,1,0,0,0,9432,9434,3,588,294,0,
        9433,9432,1,0,0,0,9433,9434,1,0,0,0,9434,9435,1,0,0,0,9435,9436,
        5,488,0,0,9436,9437,5,249,0,0,9437,9438,5,747,0,0,9438,9440,3,1056,
        528,0,9439,9441,3,596,298,0,9440,9439,1,0,0,0,9440,9441,1,0,0,0,
        9441,9443,1,0,0,0,9442,9444,3,592,296,0,9443,9442,1,0,0,0,9443,9444,
        1,0,0,0,9444,9446,1,0,0,0,9445,9447,3,794,397,0,9446,9445,1,0,0,
        0,9446,9447,1,0,0,0,9447,9470,1,0,0,0,9448,9450,5,155,0,0,9449,9451,
        3,804,402,0,9450,9449,1,0,0,0,9450,9451,1,0,0,0,9451,9452,1,0,0,
        0,9452,9454,5,728,0,0,9453,9455,3,802,401,0,9454,9453,1,0,0,0,9454,
        9455,1,0,0,0,9455,9456,1,0,0,0,9456,9458,3,1056,528,0,9457,9459,
        3,604,302,0,9458,9457,1,0,0,0,9458,9459,1,0,0,0,9459,9461,1,0,0,
        0,9460,9462,3,588,294,0,9461,9460,1,0,0,0,9461,9462,1,0,0,0,9462,
        9463,1,0,0,0,9463,9464,5,488,0,0,9464,9465,5,706,0,0,9465,9467,3,
        1056,528,0,9466,9468,3,794,397,0,9467,9466,1,0,0,0,9467,9468,1,0,
        0,0,9468,9470,1,0,0,0,9469,9390,1,0,0,0,9469,9420,1,0,0,0,9469,9448,
        1,0,0,0,9470,599,1,0,0,0,9471,9472,7,60,0,0,9472,601,1,0,0,0,9473,
        9475,7,61,0,0,9474,9473,1,0,0,0,9474,9475,1,0,0,0,9475,9476,1,0,
        0,0,9476,9480,3,600,300,0,9477,9480,5,837,0,0,9478,9480,5,793,0,
        0,9479,9474,1,0,0,0,9479,9477,1,0,0,0,9479,9478,1,0,0,0,9480,603,
        1,0,0,0,9481,9483,5,847,0,0,9482,9481,1,0,0,0,9482,9483,1,0,0,0,
        9483,9484,1,0,0,0,9484,9485,5,754,0,0,9485,9486,5,931,0,0,9486,9491,
        3,444,222,0,9487,9488,5,937,0,0,9488,9490,3,444,222,0,9489,9487,
        1,0,0,0,9490,9493,1,0,0,0,9491,9489,1,0,0,0,9491,9492,1,0,0,0,9492,
        9494,1,0,0,0,9493,9491,1,0,0,0,9494,9495,5,932,0,0,9495,605,1,0,
        0,0,9496,9498,5,847,0,0,9497,9496,1,0,0,0,9497,9498,1,0,0,0,9498,
        9499,1,0,0,0,9499,9500,5,626,0,0,9500,9501,5,5,0,0,9501,9502,5,544,
        0,0,9502,9503,3,1030,515,0,9503,9504,5,488,0,0,9504,9505,5,931,0,
        0,9505,9510,3,1050,525,0,9506,9507,5,937,0,0,9507,9509,3,1050,525,
        0,9508,9506,1,0,0,0,9509,9512,1,0,0,0,9510,9508,1,0,0,0,9510,9511,
        1,0,0,0,9511,9513,1,0,0,0,9512,9510,1,0,0,0,9513,9514,5,932,0,0,
        9514,607,1,0,0,0,9515,9516,5,131,0,0,9516,9518,5,99,0,0,9517,9519,
        5,387,0,0,9518,9517,1,0,0,0,9518,9519,1,0,0,0,9519,9520,1,0,0,0,
        9520,9521,3,1234,617,0,9521,609,1,0,0,0,9522,9523,5,111,0,0,9523,
        9524,5,921,0,0,9524,9525,3,556,278,0,9525,611,1,0,0,0,9526,9528,
        5,847,0,0,9527,9526,1,0,0,0,9527,9528,1,0,0,0,9528,9529,1,0,0,0,
        9529,9530,5,402,0,0,9530,9531,5,544,0,0,9531,9534,3,1030,515,0,9532,
        9533,5,825,0,0,9533,9535,3,446,223,0,9534,9532,1,0,0,0,9534,9535,
        1,0,0,0,9535,613,1,0,0,0,9536,9537,5,134,0,0,9537,9538,3,1024,512,
        0,9538,615,1,0,0,0,9539,9540,7,62,0,0,9540,617,1,0,0,0,9541,9542,
        5,182,0,0,9542,9561,3,1066,533,0,9543,9555,7,63,0,0,9544,9545,5,
        931,0,0,9545,9546,3,1060,530,0,9546,9547,5,937,0,0,9547,9548,3,1060,
        530,0,9548,9549,5,932,0,0,9549,9556,1,0,0,0,9550,9556,3,496,248,
        0,9551,9556,3,498,249,0,9552,9553,3,496,248,0,9553,9554,3,498,249,
        0,9554,9556,1,0,0,0,9555,9544,1,0,0,0,9555,9550,1,0,0,0,9555,9551,
        1,0,0,0,9555,9552,1,0,0,0,9555,9556,1,0,0,0,9556,9558,1,0,0,0,9557,
        9559,3,616,308,0,9558,9557,1,0,0,0,9558,9559,1,0,0,0,9559,9561,1,
        0,0,0,9560,9541,1,0,0,0,9560,9543,1,0,0,0,9561,619,1,0,0,0,9562,
        9563,5,280,0,0,9563,9564,5,370,0,0,9564,621,1,0,0,0,9565,9566,5,
        551,0,0,9566,9567,5,370,0,0,9567,623,1,0,0,0,9568,9569,5,148,0,0,
        9569,9571,3,1030,515,0,9570,9568,1,0,0,0,9570,9571,1,0,0,0,9571,
        9590,1,0,0,0,9572,9575,5,806,0,0,9573,9575,3,622,311,0,9574,9572,
        1,0,0,0,9574,9573,1,0,0,0,9575,9576,1,0,0,0,9576,9580,3,446,223,
        0,9577,9579,3,298,149,0,9578,9577,1,0,0,0,9579,9582,1,0,0,0,9580,
        9578,1,0,0,0,9580,9581,1,0,0,0,9581,9591,1,0,0,0,9582,9580,1,0,0,
        0,9583,9584,3,620,310,0,9584,9585,3,446,223,0,9585,9586,5,579,0,
        0,9586,9587,3,1056,528,0,9587,9588,3,446,223,0,9588,9589,3,308,154,
        0,9589,9591,1,0,0,0,9590,9574,1,0,0,0,9590,9583,1,0,0,0,9591,9593,
        1,0,0,0,9592,9594,3,796,398,0,9593,9592,1,0,0,0,9593,9594,1,0,0,
        0,9594,625,1,0,0,0,9595,9602,3,428,214,0,9596,9601,3,614,307,0,9597,
        9601,3,290,145,0,9598,9601,3,1252,626,0,9599,9601,3,618,309,0,9600,
        9596,1,0,0,0,9600,9597,1,0,0,0,9600,9598,1,0,0,0,9600,9599,1,0,0,
        0,9601,9604,1,0,0,0,9602,9600,1,0,0,0,9602,9603,1,0,0,0,9603,9606,
        1,0,0,0,9604,9602,1,0,0,0,9605,9607,3,612,306,0,9606,9605,1,0,0,
        0,9606,9607,1,0,0,0,9607,9609,1,0,0,0,9608,9610,3,604,302,0,9609,
        9608,1,0,0,0,9609,9610,1,0,0,0,9610,9612,1,0,0,0,9611,9613,3,796,
        398,0,9612,9611,1,0,0,0,9612,9613,1,0,0,0,9613,627,1,0,0,0,9614,
        9616,3,1050,525,0,9615,9617,3,1086,543,0,9616,9615,1,0,0,0,9616,
        9617,1,0,0,0,9617,9619,1,0,0,0,9618,9620,3,612,306,0,9619,9618,1,
        0,0,0,9619,9620,1,0,0,0,9620,9622,1,0,0,0,9621,9623,3,604,302,0,
        9622,9621,1,0,0,0,9622,9623,1,0,0,0,9623,9626,1,0,0,0,9624,9625,
        5,138,0,0,9625,9627,3,1024,512,0,9626,9624,1,0,0,0,9626,9627,1,0,
        0,0,9627,629,1,0,0,0,9628,9633,3,628,314,0,9629,9630,5,937,0,0,9630,
        9632,3,628,314,0,9631,9629,1,0,0,0,9632,9635,1,0,0,0,9633,9631,1,
        0,0,0,9633,9634,1,0,0,0,9634,631,1,0,0,0,9635,9633,1,0,0,0,9636,
        9639,3,626,313,0,9637,9639,3,624,312,0,9638,9636,1,0,0,0,9638,9637,
        1,0,0,0,9639,633,1,0,0,0,9640,9645,3,632,316,0,9641,9642,5,937,0,
        0,9642,9644,3,632,316,0,9643,9641,1,0,0,0,9644,9647,1,0,0,0,9645,
        9643,1,0,0,0,9645,9646,1,0,0,0,9646,635,1,0,0,0,9647,9645,1,0,0,
        0,9648,9651,5,155,0,0,9649,9652,3,804,402,0,9650,9652,3,806,403,
        0,9651,9649,1,0,0,0,9651,9650,1,0,0,0,9651,9652,1,0,0,0,9652,9654,
        1,0,0,0,9653,9655,3,602,301,0,9654,9653,1,0,0,0,9654,9655,1,0,0,
        0,9655,9656,1,0,0,0,9656,9665,5,747,0,0,9657,9659,3,802,401,0,9658,
        9657,1,0,0,0,9658,9659,1,0,0,0,9659,9660,1,0,0,0,9660,9666,3,1056,
        528,0,9661,9663,3,1056,528,0,9662,9664,3,802,401,0,9663,9662,1,0,
        0,0,9663,9664,1,0,0,0,9664,9666,1,0,0,0,9665,9658,1,0,0,0,9665,9661,
        1,0,0,0,9666,9675,1,0,0,0,9667,9669,3,794,397,0,9668,9667,1,0,0,
        0,9668,9669,1,0,0,0,9669,9670,1,0,0,0,9670,9676,3,640,320,0,9671,
        9673,3,640,320,0,9672,9674,3,794,397,0,9673,9672,1,0,0,0,9673,9674,
        1,0,0,0,9674,9676,1,0,0,0,9675,9668,1,0,0,0,9675,9671,1,0,0,0,9676,
        637,1,0,0,0,9677,9678,5,931,0,0,9678,9679,3,634,317,0,9679,9680,
        5,932,0,0,9680,639,1,0,0,0,9681,9683,3,638,319,0,9682,9684,3,608,
        304,0,9683,9682,1,0,0,0,9683,9684,1,0,0,0,9684,9693,1,0,0,0,9685,
        9687,3,608,304,0,9686,9685,1,0,0,0,9686,9687,1,0,0,0,9687,9689,1,
        0,0,0,9688,9690,3,794,397,0,9689,9688,1,0,0,0,9689,9690,1,0,0,0,
        9690,9691,1,0,0,0,9691,9693,3,638,319,0,9692,9681,1,0,0,0,9692,9686,
        1,0,0,0,9693,9695,1,0,0,0,9694,9696,3,54,27,0,9695,9694,1,0,0,0,
        9695,9696,1,0,0,0,9696,9703,1,0,0,0,9697,9698,5,708,0,0,9698,9699,
        5,921,0,0,9699,9700,5,931,0,0,9700,9701,3,520,260,0,9701,9702,5,
        932,0,0,9702,9704,1,0,0,0,9703,9697,1,0,0,0,9703,9704,1,0,0,0,9704,
        9706,1,0,0,0,9705,9707,3,402,201,0,9706,9705,1,0,0,0,9706,9707,1,
        0,0,0,9707,9709,1,0,0,0,9708,9710,3,610,305,0,9709,9708,1,0,0,0,
        9709,9710,1,0,0,0,9710,9712,1,0,0,0,9711,9713,3,140,70,0,9712,9711,
        1,0,0,0,9712,9713,1,0,0,0,9713,9715,1,0,0,0,9714,9716,3,588,294,
        0,9715,9714,1,0,0,0,9715,9716,1,0,0,0,9716,9718,1,0,0,0,9717,9719,
        3,794,397,0,9718,9717,1,0,0,0,9718,9719,1,0,0,0,9719,9721,1,0,0,
        0,9720,9722,3,606,303,0,9721,9720,1,0,0,0,9721,9722,1,0,0,0,9722,
        9724,1,0,0,0,9723,9725,3,604,302,0,9724,9723,1,0,0,0,9724,9725,1,
        0,0,0,9725,641,1,0,0,0,9726,9728,5,155,0,0,9727,9729,3,804,402,0,
        9728,9727,1,0,0,0,9728,9729,1,0,0,0,9729,9731,1,0,0,0,9730,9732,
        3,602,301,0,9731,9730,1,0,0,0,9731,9732,1,0,0,0,9732,9733,1,0,0,
        0,9733,9742,5,747,0,0,9734,9736,3,802,401,0,9735,9734,1,0,0,0,9735,
        9736,1,0,0,0,9736,9737,1,0,0,0,9737,9743,3,1056,528,0,9738,9740,
        3,1056,528,0,9739,9741,3,802,401,0,9740,9739,1,0,0,0,9740,9741,1,
        0,0,0,9741,9743,1,0,0,0,9742,9735,1,0,0,0,9742,9738,1,0,0,0,9743,
        9748,1,0,0,0,9744,9745,5,931,0,0,9745,9746,3,634,317,0,9746,9747,
        5,932,0,0,9747,9749,1,0,0,0,9748,9744,1,0,0,0,9748,9749,1,0,0,0,
        9749,9751,1,0,0,0,9750,9752,3,608,304,0,9751,9750,1,0,0,0,9751,9752,
        1,0,0,0,9752,9754,1,0,0,0,9753,9755,3,588,294,0,9754,9753,1,0,0,
        0,9754,9755,1,0,0,0,9755,9757,1,0,0,0,9756,9758,3,606,303,0,9757,
        9756,1,0,0,0,9757,9758,1,0,0,0,9758,9760,1,0,0,0,9759,9761,3,604,
        302,0,9760,9759,1,0,0,0,9760,9761,1,0,0,0,9761,9763,1,0,0,0,9762,
        9764,3,794,397,0,9763,9762,1,0,0,0,9763,9764,1,0,0,0,9764,9765,1,
        0,0,0,9765,9766,5,45,0,0,9766,9767,3,1122,561,0,9767,643,1,0,0,0,
        9768,9770,5,155,0,0,9769,9771,3,804,402,0,9770,9769,1,0,0,0,9770,
        9771,1,0,0,0,9771,9773,1,0,0,0,9772,9774,5,793,0,0,9773,9772,1,0,
        0,0,9773,9774,1,0,0,0,9774,9775,1,0,0,0,9775,9777,5,747,0,0,9776,
        9778,3,802,401,0,9777,9776,1,0,0,0,9777,9778,1,0,0,0,9778,9779,1,
        0,0,0,9779,9780,3,1056,528,0,9780,9781,5,385,0,0,9781,9783,3,1056,
        528,0,9782,9784,3,608,304,0,9783,9782,1,0,0,0,9783,9784,1,0,0,0,
        9784,9786,1,0,0,0,9785,9787,3,588,294,0,9786,9785,1,0,0,0,9786,9787,
        1,0,0,0,9787,645,1,0,0,0,9788,9790,5,155,0,0,9789,9791,3,804,402,
        0,9790,9789,1,0,0,0,9790,9791,1,0,0,0,9791,9792,1,0,0,0,9792,9794,
        5,754,0,0,9793,9795,3,802,401,0,9794,9793,1,0,0,0,9794,9795,1,0,
        0,0,9795,9796,1,0,0,0,9796,9798,3,1056,528,0,9797,9799,3,648,324,
        0,9798,9797,1,0,0,0,9798,9799,1,0,0,0,9799,9801,1,0,0,0,9800,9802,
        3,794,397,0,9801,9800,1,0,0,0,9801,9802,1,0,0,0,9802,647,1,0,0,0,
        9803,9804,5,23,0,0,9804,9805,3,1026,513,0,9805,649,1,0,0,0,9806,
        9807,7,64,0,0,9807,651,1,0,0,0,9808,9813,3,650,325,0,9809,9810,5,
        937,0,0,9810,9812,3,650,325,0,9811,9809,1,0,0,0,9812,9815,1,0,0,
        0,9813,9811,1,0,0,0,9813,9814,1,0,0,0,9814,653,1,0,0,0,9815,9813,
        1,0,0,0,9816,9821,3,144,72,0,9817,9818,5,937,0,0,9818,9820,3,144,
        72,0,9819,9817,1,0,0,0,9820,9823,1,0,0,0,9821,9819,1,0,0,0,9821,
        9822,1,0,0,0,9822,655,1,0,0,0,9823,9821,1,0,0,0,9824,9826,5,155,
        0,0,9825,9827,3,804,402,0,9826,9825,1,0,0,0,9826,9827,1,0,0,0,9827,
        9828,1,0,0,0,9828,9830,5,757,0,0,9829,9831,3,802,401,0,9830,9829,
        1,0,0,0,9830,9831,1,0,0,0,9831,9832,1,0,0,0,9832,9836,3,1056,528,
        0,9833,9835,3,658,329,0,9834,9833,1,0,0,0,9835,9838,1,0,0,0,9836,
        9834,1,0,0,0,9836,9837,1,0,0,0,9837,9840,1,0,0,0,9838,9836,1,0,0,
        0,9839,9841,3,794,397,0,9840,9839,1,0,0,0,9840,9841,1,0,0,0,9841,
        9843,1,0,0,0,9842,9844,3,588,294,0,9843,9842,1,0,0,0,9843,9844,1,
        0,0,0,9844,9854,1,0,0,0,9845,9846,5,14,0,0,9846,9851,3,1056,528,
        0,9847,9848,5,937,0,0,9848,9850,3,1056,528,0,9849,9847,1,0,0,0,9850,
        9853,1,0,0,0,9851,9849,1,0,0,0,9851,9852,1,0,0,0,9852,9855,1,0,0,
        0,9853,9851,1,0,0,0,9854,9845,1,0,0,0,9854,9855,1,0,0,0,9855,9858,
        1,0,0,0,9856,9857,5,845,0,0,9857,9859,3,1248,624,0,9858,9856,1,0,
        0,0,9858,9859,1,0,0,0,9859,9860,1,0,0,0,9860,9861,5,45,0,0,9861,
        9862,3,672,336,0,9862,657,1,0,0,0,9863,9871,3,660,330,0,9864,9871,
        3,662,331,0,9865,9871,3,670,335,0,9866,9871,3,654,327,0,9867,9871,
        3,664,332,0,9868,9871,3,666,333,0,9869,9871,3,668,334,0,9870,9863,
        1,0,0,0,9870,9864,1,0,0,0,9870,9865,1,0,0,0,9870,9866,1,0,0,0,9870,
        9867,1,0,0,0,9870,9868,1,0,0,0,9870,9869,1,0,0,0,9871,659,1,0,0,
        0,9872,9873,5,838,0,0,9873,9874,5,921,0,0,9874,9882,3,1030,515,0,
        9875,9876,5,821,0,0,9876,9879,5,921,0,0,9877,9880,3,684,342,0,9878,
        9880,3,1024,512,0,9879,9877,1,0,0,0,9879,9878,1,0,0,0,9880,9882,
        1,0,0,0,9881,9872,1,0,0,0,9881,9875,1,0,0,0,9882,661,1,0,0,0,9883,
        9884,5,655,0,0,9884,9885,5,921,0,0,9885,9886,3,1024,512,0,9886,663,
        1,0,0,0,9887,9888,5,822,0,0,9888,9889,5,921,0,0,9889,9890,3,1060,
        530,0,9890,665,1,0,0,0,9891,9892,5,741,0,0,9892,9893,5,921,0,0,9893,
        9894,3,1060,530,0,9894,667,1,0,0,0,9895,9896,5,233,0,0,9896,9897,
        5,921,0,0,9897,9898,3,1030,515,0,9898,669,1,0,0,0,9899,9900,5,27,
        0,0,9900,9901,5,921,0,0,9901,9902,3,556,278,0,9902,671,1,0,0,0,9903,
        9904,5,243,0,0,9904,9905,5,333,0,0,9905,9909,5,911,0,0,9906,9909,
        3,4,2,0,9907,9909,3,674,337,0,9908,9903,1,0,0,0,9908,9906,1,0,0,
        0,9908,9907,1,0,0,0,9909,673,1,0,0,0,9910,9911,5,101,0,0,9911,9912,
        3,1056,528,0,9912,9914,5,931,0,0,9913,9915,3,1062,531,0,9914,9913,
        1,0,0,0,9914,9915,1,0,0,0,9915,9916,1,0,0,0,9916,9917,5,932,0,0,
        9917,675,1,0,0,0,9918,9920,5,155,0,0,9919,9921,3,804,402,0,9920,
        9919,1,0,0,0,9920,9921,1,0,0,0,9921,9922,1,0,0,0,9922,9924,5,816,
        0,0,9923,9925,3,802,401,0,9924,9923,1,0,0,0,9924,9925,1,0,0,0,9925,
        9926,1,0,0,0,9926,9928,3,1030,515,0,9927,9929,3,142,71,0,9928,9927,
        1,0,0,0,9928,9929,1,0,0,0,9929,9931,1,0,0,0,9930,9932,3,138,69,0,
        9931,9930,1,0,0,0,9931,9932,1,0,0,0,9932,9934,1,0,0,0,9933,9935,
        3,144,72,0,9934,9933,1,0,0,0,9934,9935,1,0,0,0,9935,677,1,0,0,0,
        9936,9937,3,1050,525,0,9937,9938,3,612,306,0,9938,9939,3,604,302,
        0,9939,679,1,0,0,0,9940,9942,5,155,0,0,9941,9943,3,804,402,0,9942,
        9941,1,0,0,0,9942,9943,1,0,0,0,9943,9945,1,0,0,0,9944,9946,5,665,
        0,0,9945,9944,1,0,0,0,9945,9946,1,0,0,0,9946,9948,1,0,0,0,9947,9949,
        5,578,0,0,9948,9947,1,0,0,0,9948,9949,1,0,0,0,9949,9950,1,0,0,0,
        9950,9952,5,834,0,0,9951,9953,3,802,401,0,9952,9951,1,0,0,0,9952,
        9953,1,0,0,0,9953,9954,1,0,0,0,9954,9959,3,1056,528,0,9955,9956,
        5,931,0,0,9956,9957,3,1054,527,0,9957,9958,5,932,0,0,9958,9960,1,
        0,0,0,9959,9955,1,0,0,0,9959,9960,1,0,0,0,9960,9964,1,0,0,0,9961,
        9963,3,678,339,0,9962,9961,1,0,0,0,9963,9966,1,0,0,0,9964,9962,1,
        0,0,0,9964,9965,1,0,0,0,9965,9968,1,0,0,0,9966,9964,1,0,0,0,9967,
        9969,3,606,303,0,9968,9967,1,0,0,0,9968,9969,1,0,0,0,9969,9971,1,
        0,0,0,9970,9972,3,604,302,0,9971,9970,1,0,0,0,9971,9972,1,0,0,0,
        9972,9974,1,0,0,0,9973,9975,3,588,294,0,9974,9973,1,0,0,0,9974,9975,
        1,0,0,0,9975,9977,1,0,0,0,9976,9978,3,794,397,0,9977,9976,1,0,0,
        0,9977,9978,1,0,0,0,9978,9979,1,0,0,0,9979,9980,5,45,0,0,9980,9981,
        3,1122,561,0,9981,681,1,0,0,0,9982,9984,5,155,0,0,9983,9985,3,804,
        402,0,9984,9983,1,0,0,0,9984,9985,1,0,0,0,9985,9986,1,0,0,0,9986,
        9988,5,838,0,0,9987,9989,3,802,401,0,9988,9987,1,0,0,0,9988,9989,
        1,0,0,0,9989,9990,1,0,0,0,9990,9999,3,1028,514,0,9991,9993,5,847,
        0,0,9992,9991,1,0,0,0,9992,9993,1,0,0,0,9993,9995,1,0,0,0,9994,9996,
        3,688,344,0,9995,9994,1,0,0,0,9996,9997,1,0,0,0,9997,9995,1,0,0,
        0,9997,9998,1,0,0,0,9998,10000,1,0,0,0,9999,9992,1,0,0,0,9999,10000,
        1,0,0,0,10000,10004,1,0,0,0,10001,10003,3,690,345,0,10002,10001,
        1,0,0,0,10003,10006,1,0,0,0,10004,10002,1,0,0,0,10004,10005,1,0,
        0,0,10005,683,1,0,0,0,10006,10004,1,0,0,0,10007,10008,7,65,0,0,10008,
        685,1,0,0,0,10009,10010,7,66,0,0,10010,687,1,0,0,0,10011,10012,5,
        840,0,0,10012,10016,5,921,0,0,10013,10017,3,684,342,0,10014,10017,
        3,686,343,0,10015,10017,5,905,0,0,10016,10013,1,0,0,0,10016,10014,
        1,0,0,0,10016,10015,1,0,0,0,10017,10056,1,0,0,0,10018,10019,5,841,
        0,0,10019,10020,5,921,0,0,10020,10056,7,67,0,0,10021,10022,5,411,
        0,0,10022,10023,5,921,0,0,10023,10056,3,1060,530,0,10024,10025,5,
        425,0,0,10025,10026,5,921,0,0,10026,10056,3,1060,530,0,10027,10028,
        5,654,0,0,10028,10029,5,921,0,0,10029,10056,7,68,0,0,10030,10034,
        5,61,0,0,10031,10032,5,921,0,0,10032,10035,3,1060,530,0,10033,10035,
        5,458,0,0,10034,10031,1,0,0,0,10034,10033,1,0,0,0,10035,10056,1,
        0,0,0,10036,10037,5,60,0,0,10037,10038,5,921,0,0,10038,10056,3,556,
        278,0,10039,10040,5,347,0,0,10040,10041,5,921,0,0,10041,10056,3,
        556,278,0,10042,10043,5,604,0,0,10043,10044,5,921,0,0,10044,10056,
        3,1030,515,0,10045,10056,3,794,397,0,10046,10047,5,221,0,0,10047,
        10048,5,921,0,0,10048,10056,3,556,278,0,10049,10050,5,568,0,0,10050,
        10051,5,921,0,0,10051,10056,3,1060,530,0,10052,10053,5,412,0,0,10053,
        10054,5,921,0,0,10054,10056,3,1060,530,0,10055,10011,1,0,0,0,10055,
        10018,1,0,0,0,10055,10021,1,0,0,0,10055,10024,1,0,0,0,10055,10027,
        1,0,0,0,10055,10030,1,0,0,0,10055,10036,1,0,0,0,10055,10039,1,0,
        0,0,10055,10042,1,0,0,0,10055,10045,1,0,0,0,10055,10046,1,0,0,0,
        10055,10049,1,0,0,0,10055,10052,1,0,0,0,10056,689,1,0,0,0,10057,
        10058,5,412,0,0,10058,10059,5,921,0,0,10059,10070,3,1060,530,0,10060,
        10061,5,717,0,0,10061,10062,5,921,0,0,10062,10070,3,1060,530,0,10063,
        10064,5,718,0,0,10064,10065,5,921,0,0,10065,10067,3,1060,530,0,10066,
        10068,3,604,302,0,10067,10066,1,0,0,0,10067,10068,1,0,0,0,10068,
        10070,1,0,0,0,10069,10057,1,0,0,0,10069,10060,1,0,0,0,10069,10063,
        1,0,0,0,10070,691,1,0,0,0,10071,10072,5,488,0,0,10072,10073,3,1060,
        530,0,10073,10074,5,536,0,0,10074,10075,5,206,0,0,10075,10076,7,
        20,0,0,10076,693,1,0,0,0,10077,10105,5,620,0,0,10078,10105,5,816,
        0,0,10079,10105,5,838,0,0,10080,10105,5,354,0,0,10081,10082,5,438,
        0,0,10082,10105,5,544,0,0,10083,10084,5,672,0,0,10084,10105,5,544,
        0,0,10085,10105,5,169,0,0,10086,10105,5,656,0,0,10087,10105,5,747,
        0,0,10088,10105,5,834,0,0,10089,10105,5,706,0,0,10090,10091,5,270,
        0,0,10091,10105,5,281,0,0,10092,10105,5,728,0,0,10093,10105,5,757,
        0,0,10094,10095,5,402,0,0,10095,10105,5,544,0,0,10096,10097,5,626,
        0,0,10097,10098,5,5,0,0,10098,10105,5,544,0,0,10099,10105,5,754,
        0,0,10100,10105,5,539,0,0,10101,10105,5,287,0,0,10102,10105,5,555,
        0,0,10103,10105,5,670,0,0,10104,10077,1,0,0,0,10104,10078,1,0,0,
        0,10104,10079,1,0,0,0,10104,10080,1,0,0,0,10104,10081,1,0,0,0,10104,
        10083,1,0,0,0,10104,10085,1,0,0,0,10104,10086,1,0,0,0,10104,10087,
        1,0,0,0,10104,10088,1,0,0,0,10104,10089,1,0,0,0,10104,10090,1,0,
        0,0,10104,10092,1,0,0,0,10104,10093,1,0,0,0,10104,10094,1,0,0,0,
        10104,10096,1,0,0,0,10104,10099,1,0,0,0,10104,10100,1,0,0,0,10104,
        10101,1,0,0,0,10104,10102,1,0,0,0,10104,10103,1,0,0,0,10105,695,
        1,0,0,0,10106,10107,7,69,0,0,10107,697,1,0,0,0,10108,10144,3,700,
        350,0,10109,10144,3,702,351,0,10110,10144,3,704,352,0,10111,10144,
        3,706,353,0,10112,10144,3,708,354,0,10113,10144,3,710,355,0,10114,
        10144,3,712,356,0,10115,10144,3,714,357,0,10116,10144,3,716,358,
        0,10117,10144,3,718,359,0,10118,10144,3,720,360,0,10119,10144,3,
        722,361,0,10120,10144,3,724,362,0,10121,10144,3,726,363,0,10122,
        10144,3,728,364,0,10123,10144,3,750,375,0,10124,10144,3,730,365,
        0,10125,10144,3,732,366,0,10126,10144,3,734,367,0,10127,10144,3,
        736,368,0,10128,10144,3,738,369,0,10129,10144,3,740,370,0,10130,
        10144,3,742,371,0,10131,10144,3,744,372,0,10132,10144,3,746,373,
        0,10133,10144,3,748,374,0,10134,10144,3,752,376,0,10135,10144,3,
        574,287,0,10136,10144,3,754,377,0,10137,10144,3,756,378,0,10138,
        10144,3,758,379,0,10139,10144,3,760,380,0,10140,10144,3,762,381,
        0,10141,10144,3,764,382,0,10142,10144,3,766,383,0,10143,10108,1,
        0,0,0,10143,10109,1,0,0,0,10143,10110,1,0,0,0,10143,10111,1,0,0,
        0,10143,10112,1,0,0,0,10143,10113,1,0,0,0,10143,10114,1,0,0,0,10143,
        10115,1,0,0,0,10143,10116,1,0,0,0,10143,10117,1,0,0,0,10143,10118,
        1,0,0,0,10143,10119,1,0,0,0,10143,10120,1,0,0,0,10143,10121,1,0,
        0,0,10143,10122,1,0,0,0,10143,10123,1,0,0,0,10143,10124,1,0,0,0,
        10143,10125,1,0,0,0,10143,10126,1,0,0,0,10143,10127,1,0,0,0,10143,
        10128,1,0,0,0,10143,10129,1,0,0,0,10143,10130,1,0,0,0,10143,10131,
        1,0,0,0,10143,10132,1,0,0,0,10143,10133,1,0,0,0,10143,10134,1,0,
        0,0,10143,10135,1,0,0,0,10143,10136,1,0,0,0,10143,10137,1,0,0,0,
        10143,10138,1,0,0,0,10143,10139,1,0,0,0,10143,10140,1,0,0,0,10143,
        10141,1,0,0,0,10143,10142,1,0,0,0,10144,699,1,0,0,0,10145,10146,
        5,208,0,0,10146,10147,3,1008,504,0,10147,10148,3,800,400,0,10148,
        10150,3,1030,515,0,10149,10151,3,768,384,0,10150,10149,1,0,0,0,10150,
        10151,1,0,0,0,10151,701,1,0,0,0,10152,10153,5,208,0,0,10153,10154,
        5,15,0,0,10154,10155,3,1030,515,0,10155,703,1,0,0,0,10156,10157,
        5,208,0,0,10157,10159,5,146,0,0,10158,10160,3,800,400,0,10159,10158,
        1,0,0,0,10159,10160,1,0,0,0,10160,10161,1,0,0,0,10161,10162,3,1030,
        515,0,10162,705,1,0,0,0,10163,10164,5,208,0,0,10164,10166,5,169,
        0,0,10165,10167,3,800,400,0,10166,10165,1,0,0,0,10166,10167,1,0,
        0,0,10167,10168,1,0,0,0,10168,10170,3,1030,515,0,10169,10171,3,768,
        384,0,10170,10169,1,0,0,0,10170,10171,1,0,0,0,10171,707,1,0,0,0,
        10172,10173,5,208,0,0,10173,10174,5,209,0,0,10174,10175,5,747,0,
        0,10175,10176,3,1030,515,0,10176,709,1,0,0,0,10177,10178,5,208,0,
        0,10178,10179,5,249,0,0,10179,10181,5,747,0,0,10180,10182,3,800,
        400,0,10181,10180,1,0,0,0,10181,10182,1,0,0,0,10182,10183,1,0,0,
        0,10183,10185,3,1056,528,0,10184,10186,3,768,384,0,10185,10184,1,
        0,0,0,10185,10186,1,0,0,0,10186,711,1,0,0,0,10187,10188,5,208,0,
        0,10188,10189,5,265,0,0,10189,10191,5,310,0,0,10190,10192,3,800,
        400,0,10191,10190,1,0,0,0,10191,10192,1,0,0,0,10192,10193,1,0,0,
        0,10193,10194,3,1030,515,0,10194,713,1,0,0,0,10195,10196,5,208,0,
        0,10196,10197,5,270,0,0,10197,10199,5,281,0,0,10198,10200,3,800,
        400,0,10199,10198,1,0,0,0,10199,10200,1,0,0,0,10200,10201,1,0,0,
        0,10201,10202,3,1030,515,0,10202,715,1,0,0,0,10203,10204,5,208,0,
        0,10204,10206,5,287,0,0,10205,10207,3,800,400,0,10206,10205,1,0,
        0,0,10206,10207,1,0,0,0,10207,10208,1,0,0,0,10208,10209,3,1056,528,
        0,10209,10210,3,770,385,0,10210,717,1,0,0,0,10211,10212,5,208,0,
        0,10212,10213,5,304,0,0,10213,10215,5,596,0,0,10214,10216,3,800,
        400,0,10215,10214,1,0,0,0,10215,10216,1,0,0,0,10216,10217,1,0,0,
        0,10217,10218,3,1056,528,0,10218,719,1,0,0,0,10219,10221,5,208,0,
        0,10220,10222,7,70,0,0,10221,10220,1,0,0,0,10221,10222,1,0,0,0,10222,
        10223,1,0,0,0,10223,10225,5,354,0,0,10224,10226,3,800,400,0,10225,
        10224,1,0,0,0,10225,10226,1,0,0,0,10226,10227,1,0,0,0,10227,10228,
        3,1030,515,0,10228,721,1,0,0,0,10229,10230,5,208,0,0,10230,10231,
        5,401,0,0,10231,10232,5,6,0,0,10232,10233,3,1030,515,0,10233,723,
        1,0,0,0,10234,10235,5,208,0,0,10235,10236,5,402,0,0,10236,10237,
        5,544,0,0,10237,10238,3,1030,515,0,10238,725,1,0,0,0,10239,10240,
        5,208,0,0,10240,10241,5,409,0,0,10241,10243,5,834,0,0,10242,10244,
        3,800,400,0,10243,10242,1,0,0,0,10243,10244,1,0,0,0,10244,10245,
        1,0,0,0,10245,10246,3,1056,528,0,10246,727,1,0,0,0,10247,10248,5,
        208,0,0,10248,10249,5,438,0,0,10249,10251,5,544,0,0,10250,10252,
        3,800,400,0,10251,10250,1,0,0,0,10251,10252,1,0,0,0,10252,10253,
        1,0,0,0,10253,10254,3,1030,515,0,10254,729,1,0,0,0,10255,10256,5,
        208,0,0,10256,10258,5,539,0,0,10257,10259,3,800,400,0,10258,10257,
        1,0,0,0,10258,10259,1,0,0,0,10259,10260,1,0,0,0,10260,10261,3,1056,
        528,0,10261,731,1,0,0,0,10262,10263,5,208,0,0,10263,10265,5,555,
        0,0,10264,10266,3,800,400,0,10265,10264,1,0,0,0,10265,10266,1,0,
        0,0,10266,10267,1,0,0,0,10267,10268,3,1056,528,0,10268,10269,3,770,
        385,0,10269,733,1,0,0,0,10270,10271,5,208,0,0,10271,10272,5,594,
        0,0,10272,10274,5,310,0,0,10273,10275,3,800,400,0,10274,10273,1,
        0,0,0,10274,10275,1,0,0,0,10275,10276,1,0,0,0,10276,10277,3,1030,
        515,0,10277,735,1,0,0,0,10278,10279,5,208,0,0,10279,10280,5,602,
        0,0,10280,10281,5,430,0,0,10281,10282,3,1030,515,0,10282,737,1,0,
        0,0,10283,10284,5,208,0,0,10284,10286,5,620,0,0,10285,10287,3,800,
        400,0,10286,10285,1,0,0,0,10286,10287,1,0,0,0,10287,10288,1,0,0,
        0,10288,10289,3,1030,515,0,10289,739,1,0,0,0,10290,10291,5,208,0,
        0,10291,10292,5,626,0,0,10292,10293,5,5,0,0,10293,10295,5,544,0,
        0,10294,10296,3,800,400,0,10295,10294,1,0,0,0,10295,10296,1,0,0,
        0,10296,10297,1,0,0,0,10297,10298,3,1030,515,0,10298,741,1,0,0,0,
        10299,10300,5,208,0,0,10300,10302,5,656,0,0,10301,10303,3,800,400,
        0,10302,10301,1,0,0,0,10302,10303,1,0,0,0,10303,10304,1,0,0,0,10304,
        10306,3,1006,503,0,10305,10307,3,768,384,0,10306,10305,1,0,0,0,10306,
        10307,1,0,0,0,10307,743,1,0,0,0,10308,10309,5,208,0,0,10309,10311,
        5,662,0,0,10310,10312,3,800,400,0,10311,10310,1,0,0,0,10311,10312,
        1,0,0,0,10312,10313,1,0,0,0,10313,10314,3,1056,528,0,10314,745,1,
        0,0,0,10315,10316,5,208,0,0,10316,10318,5,670,0,0,10317,10319,3,
        800,400,0,10318,10317,1,0,0,0,10318,10319,1,0,0,0,10319,10320,1,
        0,0,0,10320,10322,3,1056,528,0,10321,10323,3,768,384,0,10322,10321,
        1,0,0,0,10322,10323,1,0,0,0,10323,747,1,0,0,0,10324,10325,5,208,
        0,0,10325,10326,5,672,0,0,10326,10328,5,544,0,0,10327,10329,3,800,
        400,0,10328,10327,1,0,0,0,10328,10329,1,0,0,0,10329,10330,1,0,0,
        0,10330,10331,3,1056,528,0,10331,749,1,0,0,0,10332,10333,5,208,0,
        0,10333,10334,5,520,0,0,10334,10336,5,544,0,0,10335,10337,3,800,
        400,0,10336,10335,1,0,0,0,10336,10337,1,0,0,0,10337,10338,1,0,0,
        0,10338,10339,3,1056,528,0,10339,751,1,0,0,0,10340,10341,5,208,0,
        0,10341,10342,5,678,0,0,10342,10343,3,1030,515,0,10343,753,1,0,0,
        0,10344,10345,5,208,0,0,10345,10347,5,728,0,0,10346,10348,3,800,
        400,0,10347,10346,1,0,0,0,10347,10348,1,0,0,0,10348,10349,1,0,0,
        0,10349,10350,3,1056,528,0,10350,755,1,0,0,0,10351,10352,5,208,0,
        0,10352,10354,5,747,0,0,10353,10355,3,800,400,0,10354,10353,1,0,
        0,0,10354,10355,1,0,0,0,10355,10356,1,0,0,0,10356,10358,3,1056,528,
        0,10357,10359,3,768,384,0,10358,10357,1,0,0,0,10358,10359,1,0,0,
        0,10359,757,1,0,0,0,10360,10361,5,208,0,0,10361,10363,5,754,0,0,
        10362,10364,3,800,400,0,10363,10362,1,0,0,0,10363,10364,1,0,0,0,
        10364,10365,1,0,0,0,10365,10366,3,1056,528,0,10366,759,1,0,0,0,10367,
        10368,5,208,0,0,10368,10370,5,757,0,0,10369,10371,3,800,400,0,10370,
        10369,1,0,0,0,10370,10371,1,0,0,0,10371,10372,1,0,0,0,10372,10373,
        3,1056,528,0,10373,761,1,0,0,0,10374,10375,5,208,0,0,10375,10377,
        5,816,0,0,10376,10378,3,800,400,0,10377,10376,1,0,0,0,10377,10378,
        1,0,0,0,10378,10379,1,0,0,0,10379,10380,3,1030,515,0,10380,763,1,
        0,0,0,10381,10382,5,208,0,0,10382,10384,5,834,0,0,10383,10385,3,
        800,400,0,10384,10383,1,0,0,0,10384,10385,1,0,0,0,10385,10386,1,
        0,0,0,10386,10387,3,1056,528,0,10387,765,1,0,0,0,10388,10389,5,208,
        0,0,10389,10391,5,838,0,0,10390,10392,3,800,400,0,10391,10390,1,
        0,0,0,10391,10392,1,0,0,0,10392,10393,1,0,0,0,10393,10394,3,1028,
        514,0,10394,767,1,0,0,0,10395,10396,7,71,0,0,10396,769,1,0,0,0,10397,
        10399,5,931,0,0,10398,10400,3,196,98,0,10399,10398,1,0,0,0,10399,
        10400,1,0,0,0,10400,10401,1,0,0,0,10401,10402,5,932,0,0,10402,771,
        1,0,0,0,10403,10408,3,774,387,0,10404,10408,3,776,388,0,10405,10408,
        3,778,389,0,10406,10408,3,780,390,0,10407,10403,1,0,0,0,10407,10404,
        1,0,0,0,10407,10405,1,0,0,0,10407,10406,1,0,0,0,10408,773,1,0,0,
        0,10409,10410,5,804,0,0,10410,10411,5,169,0,0,10411,10412,3,1030,
        515,0,10412,775,1,0,0,0,10413,10414,5,804,0,0,10414,10415,5,656,
        0,0,10415,10416,3,1006,503,0,10416,777,1,0,0,0,10417,10418,5,804,
        0,0,10418,10419,5,747,0,0,10419,10420,3,1056,528,0,10420,779,1,0,
        0,0,10421,10422,5,804,0,0,10422,10423,5,754,0,0,10423,10424,3,1056,
        528,0,10424,781,1,0,0,0,10425,10431,3,784,392,0,10426,10431,3,786,
        393,0,10427,10431,3,788,394,0,10428,10431,3,790,395,0,10429,10431,
        3,792,396,0,10430,10425,1,0,0,0,10430,10426,1,0,0,0,10430,10427,
        1,0,0,0,10430,10428,1,0,0,0,10430,10429,1,0,0,0,10431,783,1,0,0,
        0,10432,10433,5,815,0,0,10433,10434,5,169,0,0,10434,10435,3,1030,
        515,0,10435,785,1,0,0,0,10436,10437,5,815,0,0,10437,10438,5,620,
        0,0,10438,10439,3,1030,515,0,10439,787,1,0,0,0,10440,10442,5,815,
        0,0,10441,10443,5,656,0,0,10442,10441,1,0,0,0,10442,10443,1,0,0,
        0,10443,10447,1,0,0,0,10444,10445,3,1030,515,0,10445,10446,5,927,
        0,0,10446,10448,1,0,0,0,10447,10444,1,0,0,0,10447,10448,1,0,0,0,
        10448,10449,1,0,0,0,10449,10450,3,1030,515,0,10450,789,1,0,0,0,10451,
        10452,5,815,0,0,10452,10453,5,661,0,0,10453,10454,5,621,0,0,10454,
        10455,7,72,0,0,10455,791,1,0,0,0,10456,10457,5,815,0,0,10457,10458,
        5,838,0,0,10458,10459,3,1028,514,0,10459,793,1,0,0,0,10460,10461,
        5,138,0,0,10461,10462,5,921,0,0,10462,10463,3,1024,512,0,10463,795,
        1,0,0,0,10464,10465,5,138,0,0,10465,10466,3,1024,512,0,10466,797,
        1,0,0,0,10467,10468,5,327,0,0,10468,10469,5,739,0,0,10469,799,1,
        0,0,0,10470,10471,5,327,0,0,10471,10472,5,245,0,0,10472,801,1,0,
        0,0,10473,10474,5,327,0,0,10474,10475,5,448,0,0,10475,10476,5,245,
        0,0,10476,803,1,0,0,0,10477,10478,5,497,0,0,10478,10479,5,591,0,
        0,10479,805,1,0,0,0,10480,10481,5,497,0,0,10481,10482,5,28,0,0,10482,
        807,1,0,0,0,10483,10484,7,73,0,0,10484,809,1,0,0,0,10485,10516,3,
        812,406,0,10486,10516,3,814,407,0,10487,10516,3,816,408,0,10488,
        10516,3,818,409,0,10489,10516,3,820,410,0,10490,10516,3,822,411,
        0,10491,10516,3,824,412,0,10492,10516,3,826,413,0,10493,10516,3,
        828,414,0,10494,10516,3,830,415,0,10495,10516,3,832,416,0,10496,
        10516,3,834,417,0,10497,10516,3,852,426,0,10498,10516,3,836,418,
        0,10499,10516,3,838,419,0,10500,10516,3,840,420,0,10501,10516,3,
        842,421,0,10502,10516,3,844,422,0,10503,10516,3,846,423,0,10504,
        10516,3,848,424,0,10505,10516,3,850,425,0,10506,10516,3,854,427,
        0,10507,10516,3,576,288,0,10508,10516,3,856,428,0,10509,10516,3,
        858,429,0,10510,10516,3,860,430,0,10511,10516,3,862,431,0,10512,
        10516,3,864,432,0,10513,10516,3,866,433,0,10514,10516,3,868,434,
        0,10515,10485,1,0,0,0,10515,10486,1,0,0,0,10515,10487,1,0,0,0,10515,
        10488,1,0,0,0,10515,10489,1,0,0,0,10515,10490,1,0,0,0,10515,10491,
        1,0,0,0,10515,10492,1,0,0,0,10515,10493,1,0,0,0,10515,10494,1,0,
        0,0,10515,10495,1,0,0,0,10515,10496,1,0,0,0,10515,10497,1,0,0,0,
        10515,10498,1,0,0,0,10515,10499,1,0,0,0,10515,10500,1,0,0,0,10515,
        10501,1,0,0,0,10515,10502,1,0,0,0,10515,10503,1,0,0,0,10515,10504,
        1,0,0,0,10515,10505,1,0,0,0,10515,10506,1,0,0,0,10515,10507,1,0,
        0,0,10515,10508,1,0,0,0,10515,10509,1,0,0,0,10515,10510,1,0,0,0,
        10515,10511,1,0,0,0,10515,10512,1,0,0,0,10515,10513,1,0,0,0,10515,
        10514,1,0,0,0,10516,811,1,0,0,0,10517,10518,3,808,404,0,10518,10519,
        5,15,0,0,10519,10520,3,1030,515,0,10520,813,1,0,0,0,10521,10522,
        3,808,404,0,10522,10523,5,169,0,0,10523,10524,3,1030,515,0,10524,
        815,1,0,0,0,10525,10526,3,808,404,0,10526,10527,5,209,0,0,10527,
        10528,5,747,0,0,10528,10529,3,1030,515,0,10529,817,1,0,0,0,10530,
        10531,3,808,404,0,10531,10532,5,239,0,0,10532,10533,5,747,0,0,10533,
        10534,3,1030,515,0,10534,819,1,0,0,0,10535,10537,3,808,404,0,10536,
        10538,5,249,0,0,10537,10536,1,0,0,0,10537,10538,1,0,0,0,10538,10539,
        1,0,0,0,10539,10540,5,747,0,0,10540,10544,3,1056,528,0,10541,10542,
        5,803,0,0,10542,10543,5,921,0,0,10543,10545,7,74,0,0,10544,10541,
        1,0,0,0,10544,10545,1,0,0,0,10545,821,1,0,0,0,10546,10547,3,808,
        404,0,10547,10548,5,270,0,0,10548,10549,5,281,0,0,10549,10550,3,
        1030,515,0,10550,823,1,0,0,0,10551,10552,3,808,404,0,10552,10553,
        5,287,0,0,10553,10554,3,1056,528,0,10554,10555,3,770,385,0,10555,
        825,1,0,0,0,10556,10557,3,808,404,0,10557,10558,5,304,0,0,10558,
        10559,5,596,0,0,10559,10560,3,1056,528,0,10560,827,1,0,0,0,10561,
        10563,3,808,404,0,10562,10564,7,70,0,0,10563,10562,1,0,0,0,10563,
        10564,1,0,0,0,10564,10565,1,0,0,0,10565,10566,5,354,0,0,10566,10567,
        3,1030,515,0,10567,829,1,0,0,0,10568,10569,3,808,404,0,10569,10570,
        5,402,0,0,10570,10571,5,544,0,0,10571,10572,3,1030,515,0,10572,831,
        1,0,0,0,10573,10574,3,808,404,0,10574,10575,5,409,0,0,10575,10576,
        5,834,0,0,10576,10577,3,1056,528,0,10577,833,1,0,0,0,10578,10579,
        3,808,404,0,10579,10580,5,438,0,0,10580,10581,5,544,0,0,10581,10582,
        3,1030,515,0,10582,835,1,0,0,0,10583,10584,3,808,404,0,10584,10585,
        5,539,0,0,10585,10586,3,1056,528,0,10586,837,1,0,0,0,10587,10588,
        3,808,404,0,10588,10589,5,555,0,0,10589,10590,3,1056,528,0,10590,
        10591,3,770,385,0,10591,839,1,0,0,0,10592,10593,3,808,404,0,10593,
        10598,5,609,0,0,10594,10599,5,912,0,0,10595,10596,5,378,0,0,10596,
        10597,5,931,0,0,10597,10599,5,932,0,0,10598,10594,1,0,0,0,10598,
        10595,1,0,0,0,10599,841,1,0,0,0,10600,10601,3,808,404,0,10601,10602,
        5,626,0,0,10602,10603,5,5,0,0,10603,10604,5,544,0,0,10604,10605,
        3,1030,515,0,10605,843,1,0,0,0,10606,10607,3,808,404,0,10607,10608,
        5,656,0,0,10608,10609,3,1006,503,0,10609,845,1,0,0,0,10610,10611,
        3,808,404,0,10611,10612,5,660,0,0,10612,10613,5,495,0,0,10613,10614,
        5,488,0,0,10614,10615,3,1056,528,0,10615,847,1,0,0,0,10616,10617,
        3,808,404,0,10617,10618,5,670,0,0,10618,10619,3,1056,528,0,10619,
        849,1,0,0,0,10620,10621,3,808,404,0,10621,10622,5,672,0,0,10622,
        10623,5,544,0,0,10623,10624,3,1056,528,0,10624,851,1,0,0,0,10625,
        10626,3,808,404,0,10626,10627,5,520,0,0,10627,10628,5,544,0,0,10628,
        10629,3,1056,528,0,10629,853,1,0,0,0,10630,10631,3,808,404,0,10631,
        10632,5,678,0,0,10632,10633,3,1030,515,0,10633,855,1,0,0,0,10634,
        10635,3,808,404,0,10635,10636,5,728,0,0,10636,10637,3,1056,528,0,
        10637,857,1,0,0,0,10638,10639,3,808,404,0,10639,10640,5,747,0,0,
        10640,10644,3,1056,528,0,10641,10642,5,803,0,0,10642,10643,5,921,
        0,0,10643,10645,7,74,0,0,10644,10641,1,0,0,0,10644,10645,1,0,0,0,
        10645,859,1,0,0,0,10646,10647,3,808,404,0,10647,10648,5,757,0,0,
        10648,10649,3,1056,528,0,10649,861,1,0,0,0,10650,10651,3,808,404,
        0,10651,10652,5,789,0,0,10652,10653,3,1060,530,0,10653,863,1,0,0,
        0,10654,10655,3,808,404,0,10655,10656,5,816,0,0,10656,10657,3,1030,
        515,0,10657,865,1,0,0,0,10658,10659,3,808,404,0,10659,10660,5,834,
        0,0,10660,10661,3,1056,528,0,10661,867,1,0,0,0,10662,10663,3,808,
        404,0,10663,10664,5,838,0,0,10664,10665,3,1030,515,0,10665,869,1,
        0,0,0,10666,10727,3,872,436,0,10667,10727,3,874,437,0,10668,10727,
        3,876,438,0,10669,10727,3,878,439,0,10670,10727,3,884,442,0,10671,
        10727,3,886,443,0,10672,10727,3,888,444,0,10673,10727,3,890,445,
        0,10674,10727,3,892,446,0,10675,10727,3,894,447,0,10676,10727,3,
        896,448,0,10677,10727,3,898,449,0,10678,10727,3,900,450,0,10679,
        10727,3,902,451,0,10680,10727,3,904,452,0,10681,10727,3,906,453,
        0,10682,10727,3,908,454,0,10683,10727,3,910,455,0,10684,10727,3,
        912,456,0,10685,10727,3,914,457,0,10686,10727,3,916,458,0,10687,
        10727,3,920,460,0,10688,10727,3,922,461,0,10689,10727,3,924,462,
        0,10690,10727,3,926,463,0,10691,10727,3,932,466,0,10692,10727,3,
        934,467,0,10693,10727,3,936,468,0,10694,10727,3,938,469,0,10695,
        10727,3,942,471,0,10696,10727,3,972,486,0,10697,10727,3,944,472,
        0,10698,10727,3,946,473,0,10699,10727,3,948,474,0,10700,10727,3,
        950,475,0,10701,10727,3,952,476,0,10702,10727,3,954,477,0,10703,
        10727,3,956,478,0,10704,10727,3,958,479,0,10705,10727,3,960,480,
        0,10706,10727,3,962,481,0,10707,10727,3,964,482,0,10708,10727,3,
        966,483,0,10709,10727,3,968,484,0,10710,10727,3,970,485,0,10711,
        10727,3,974,487,0,10712,10727,3,976,488,0,10713,10727,3,978,489,
        0,10714,10727,3,578,289,0,10715,10727,3,980,490,0,10716,10727,3,
        982,491,0,10717,10727,3,984,492,0,10718,10727,3,986,493,0,10719,
        10727,3,988,494,0,10720,10727,3,990,495,0,10721,10727,3,992,496,
        0,10722,10727,3,994,497,0,10723,10727,3,996,498,0,10724,10727,3,
        998,499,0,10725,10727,3,1000,500,0,10726,10666,1,0,0,0,10726,10667,
        1,0,0,0,10726,10668,1,0,0,0,10726,10669,1,0,0,0,10726,10670,1,0,
        0,0,10726,10671,1,0,0,0,10726,10672,1,0,0,0,10726,10673,1,0,0,0,
        10726,10674,1,0,0,0,10726,10675,1,0,0,0,10726,10676,1,0,0,0,10726,
        10677,1,0,0,0,10726,10678,1,0,0,0,10726,10679,1,0,0,0,10726,10680,
        1,0,0,0,10726,10681,1,0,0,0,10726,10682,1,0,0,0,10726,10683,1,0,
        0,0,10726,10684,1,0,0,0,10726,10685,1,0,0,0,10726,10686,1,0,0,0,
        10726,10687,1,0,0,0,10726,10688,1,0,0,0,10726,10689,1,0,0,0,10726,
        10690,1,0,0,0,10726,10691,1,0,0,0,10726,10692,1,0,0,0,10726,10693,
        1,0,0,0,10726,10694,1,0,0,0,10726,10695,1,0,0,0,10726,10696,1,0,
        0,0,10726,10697,1,0,0,0,10726,10698,1,0,0,0,10726,10699,1,0,0,0,
        10726,10700,1,0,0,0,10726,10701,1,0,0,0,10726,10702,1,0,0,0,10726,
        10703,1,0,0,0,10726,10704,1,0,0,0,10726,10705,1,0,0,0,10726,10706,
        1,0,0,0,10726,10707,1,0,0,0,10726,10708,1,0,0,0,10726,10709,1,0,
        0,0,10726,10710,1,0,0,0,10726,10711,1,0,0,0,10726,10712,1,0,0,0,
        10726,10713,1,0,0,0,10726,10714,1,0,0,0,10726,10715,1,0,0,0,10726,
        10716,1,0,0,0,10726,10717,1,0,0,0,10726,10718,1,0,0,0,10726,10719,
        1,0,0,0,10726,10720,1,0,0,0,10726,10721,1,0,0,0,10726,10722,1,0,
        0,0,10726,10723,1,0,0,0,10726,10724,1,0,0,0,10726,10725,1,0,0,0,
        10727,871,1,0,0,0,10728,10730,5,681,0,0,10729,10731,5,761,0,0,10730,
        10729,1,0,0,0,10730,10731,1,0,0,0,10731,10732,1,0,0,0,10732,10734,
        5,16,0,0,10733,10735,3,1002,501,0,10734,10733,1,0,0,0,10734,10735,
        1,0,0,0,10735,10748,1,0,0,0,10736,10746,5,340,0,0,10737,10747,5,
        6,0,0,10738,10740,5,169,0,0,10739,10741,3,1030,515,0,10740,10739,
        1,0,0,0,10740,10741,1,0,0,0,10741,10747,1,0,0,0,10742,10744,5,656,
        0,0,10743,10745,3,1006,503,0,10744,10743,1,0,0,0,10744,10745,1,0,
        0,0,10745,10747,1,0,0,0,10746,10737,1,0,0,0,10746,10738,1,0,0,0,
        10746,10742,1,0,0,0,10747,10749,1,0,0,0,10748,10736,1,0,0,0,10748,
        10749,1,0,0,0,10749,10751,1,0,0,0,10750,10752,3,880,440,0,10751,
        10750,1,0,0,0,10751,10752,1,0,0,0,10752,10754,1,0,0,0,10753,10755,
        3,882,441,0,10754,10753,1,0,0,0,10754,10755,1,0,0,0,10755,873,1,
        0,0,0,10756,10757,5,681,0,0,10757,10759,5,112,0,0,10758,10760,3,
        1002,501,0,10759,10758,1,0,0,0,10759,10760,1,0,0,0,10760,10778,1,
        0,0,0,10761,10776,5,340,0,0,10762,10777,5,6,0,0,10763,10765,5,169,
        0,0,10764,10766,3,1030,515,0,10765,10764,1,0,0,0,10765,10766,1,0,
        0,0,10766,10777,1,0,0,0,10767,10769,5,656,0,0,10768,10770,3,1006,
        503,0,10769,10768,1,0,0,0,10769,10770,1,0,0,0,10770,10777,1,0,0,
        0,10771,10777,5,747,0,0,10772,10774,5,747,0,0,10773,10772,1,0,0,
        0,10773,10774,1,0,0,0,10774,10775,1,0,0,0,10775,10777,3,1056,528,
        0,10776,10762,1,0,0,0,10776,10763,1,0,0,0,10776,10767,1,0,0,0,10776,
        10771,1,0,0,0,10776,10773,1,0,0,0,10777,10779,1,0,0,0,10778,10761,
        1,0,0,0,10778,10779,1,0,0,0,10779,875,1,0,0,0,10780,10781,5,681,
        0,0,10781,10783,5,137,0,0,10782,10784,3,1002,501,0,10783,10782,1,
        0,0,0,10783,10784,1,0,0,0,10784,10807,1,0,0,0,10785,10805,5,340,
        0,0,10786,10806,5,6,0,0,10787,10789,5,169,0,0,10788,10790,3,1030,
        515,0,10789,10788,1,0,0,0,10789,10790,1,0,0,0,10790,10806,1,0,0,
        0,10791,10793,5,656,0,0,10792,10794,3,1006,503,0,10793,10792,1,0,
        0,0,10793,10794,1,0,0,0,10794,10806,1,0,0,0,10795,10806,5,747,0,
        0,10796,10798,5,747,0,0,10797,10796,1,0,0,0,10797,10798,1,0,0,0,
        10798,10799,1,0,0,0,10799,10806,3,1056,528,0,10800,10806,5,834,0,
        0,10801,10803,5,834,0,0,10802,10801,1,0,0,0,10802,10803,1,0,0,0,
        10803,10804,1,0,0,0,10804,10806,3,1056,528,0,10805,10786,1,0,0,0,
        10805,10787,1,0,0,0,10805,10791,1,0,0,0,10805,10795,1,0,0,0,10805,
        10797,1,0,0,0,10805,10800,1,0,0,0,10805,10802,1,0,0,0,10806,10808,
        1,0,0,0,10807,10785,1,0,0,0,10807,10808,1,0,0,0,10808,877,1,0,0,
        0,10809,10810,5,681,0,0,10810,10812,5,147,0,0,10811,10813,3,1002,
        501,0,10812,10811,1,0,0,0,10812,10813,1,0,0,0,10813,879,1,0,0,0,
        10814,10815,5,712,0,0,10815,10816,5,847,0,0,10816,10817,3,1024,512,
        0,10817,881,1,0,0,0,10818,10819,5,386,0,0,10819,10822,3,1060,530,
        0,10820,10821,5,285,0,0,10821,10823,3,1024,512,0,10822,10820,1,0,
        0,0,10822,10823,1,0,0,0,10823,883,1,0,0,0,10824,10826,5,681,0,0,
        10825,10827,5,761,0,0,10826,10825,1,0,0,0,10826,10827,1,0,0,0,10827,
        10828,1,0,0,0,10828,10830,5,170,0,0,10829,10831,5,323,0,0,10830,
        10829,1,0,0,0,10830,10831,1,0,0,0,10831,10833,1,0,0,0,10832,10834,
        3,1002,501,0,10833,10832,1,0,0,0,10833,10834,1,0,0,0,10834,10836,
        1,0,0,0,10835,10837,3,880,440,0,10836,10835,1,0,0,0,10836,10837,
        1,0,0,0,10837,10839,1,0,0,0,10838,10840,3,882,441,0,10839,10838,
        1,0,0,0,10839,10840,1,0,0,0,10840,885,1,0,0,0,10841,10842,5,681,
        0,0,10842,10843,5,170,0,0,10843,10844,5,340,0,0,10844,10845,5,265,
        0,0,10845,10846,5,310,0,0,10846,10847,3,1030,515,0,10847,887,1,0,
        0,0,10848,10849,5,681,0,0,10849,10850,5,170,0,0,10850,10851,5,340,
        0,0,10851,10852,5,594,0,0,10852,10853,5,310,0,0,10853,10854,3,1030,
        515,0,10854,889,1,0,0,0,10855,10856,5,681,0,0,10856,10858,5,172,
        0,0,10857,10859,3,1002,501,0,10858,10857,1,0,0,0,10858,10859,1,0,
        0,0,10859,10868,1,0,0,0,10860,10866,5,340,0,0,10861,10862,5,656,
        0,0,10862,10867,3,1006,503,0,10863,10864,5,169,0,0,10864,10867,3,
        1030,515,0,10865,10867,5,6,0,0,10866,10861,1,0,0,0,10866,10863,1,
        0,0,0,10866,10865,1,0,0,0,10867,10869,1,0,0,0,10868,10860,1,0,0,
        0,10868,10869,1,0,0,0,10869,10873,1,0,0,0,10870,10871,5,712,0,0,
        10871,10872,5,847,0,0,10872,10874,3,1024,512,0,10873,10870,1,0,0,
        0,10873,10874,1,0,0,0,10874,10881,1,0,0,0,10875,10876,5,386,0,0,
        10876,10879,3,1060,530,0,10877,10878,5,285,0,0,10878,10880,3,1024,
        512,0,10879,10877,1,0,0,0,10879,10880,1,0,0,0,10880,10882,1,0,0,
        0,10881,10875,1,0,0,0,10881,10882,1,0,0,0,10882,891,1,0,0,0,10883,
        10884,5,681,0,0,10884,10885,5,192,0,0,10885,10900,5,50,0,0,10886,
        10887,5,681,0,0,10887,10888,5,192,0,0,10888,10889,5,50,0,0,10889,
        10890,5,99,0,0,10890,10891,5,816,0,0,10891,10900,3,1030,515,0,10892,
        10893,5,681,0,0,10893,10894,5,192,0,0,10894,10895,5,50,0,0,10895,
        10896,5,784,0,0,10896,10897,5,666,0,0,10897,10898,5,354,0,0,10898,
        10900,3,1030,515,0,10899,10883,1,0,0,0,10899,10886,1,0,0,0,10899,
        10892,1,0,0,0,10900,893,1,0,0,0,10901,10902,5,681,0,0,10902,10903,
        5,209,0,0,10903,10905,5,750,0,0,10904,10906,3,1002,501,0,10905,10904,
        1,0,0,0,10905,10906,1,0,0,0,10906,10921,1,0,0,0,10907,10919,5,340,
        0,0,10908,10920,5,6,0,0,10909,10911,5,169,0,0,10910,10912,3,1030,
        515,0,10911,10910,1,0,0,0,10911,10912,1,0,0,0,10912,10920,1,0,0,
        0,10913,10915,5,656,0,0,10914,10913,1,0,0,0,10914,10915,1,0,0,0,
        10915,10917,1,0,0,0,10916,10918,3,1006,503,0,10917,10916,1,0,0,0,
        10917,10918,1,0,0,0,10918,10920,1,0,0,0,10919,10908,1,0,0,0,10919,
        10909,1,0,0,0,10919,10914,1,0,0,0,10920,10922,1,0,0,0,10921,10907,
        1,0,0,0,10921,10922,1,0,0,0,10922,10924,1,0,0,0,10923,10925,3,880,
        440,0,10924,10923,1,0,0,0,10924,10925,1,0,0,0,10925,10927,1,0,0,
        0,10926,10928,3,882,441,0,10927,10926,1,0,0,0,10927,10928,1,0,0,
        0,10928,895,1,0,0,0,10929,10931,5,681,0,0,10930,10932,5,761,0,0,
        10931,10930,1,0,0,0,10931,10932,1,0,0,0,10932,10933,1,0,0,0,10933,
        10934,5,239,0,0,10934,10936,5,750,0,0,10935,10937,3,1002,501,0,10936,
        10935,1,0,0,0,10936,10937,1,0,0,0,10937,10952,1,0,0,0,10938,10950,
        5,340,0,0,10939,10951,5,6,0,0,10940,10942,5,169,0,0,10941,10943,
        3,1030,515,0,10942,10941,1,0,0,0,10942,10943,1,0,0,0,10943,10951,
        1,0,0,0,10944,10946,5,656,0,0,10945,10944,1,0,0,0,10945,10946,1,
        0,0,0,10946,10948,1,0,0,0,10947,10949,3,1006,503,0,10948,10947,1,
        0,0,0,10948,10949,1,0,0,0,10949,10951,1,0,0,0,10950,10939,1,0,0,
        0,10950,10940,1,0,0,0,10950,10945,1,0,0,0,10951,10953,1,0,0,0,10952,
        10938,1,0,0,0,10952,10953,1,0,0,0,10953,10955,1,0,0,0,10954,10956,
        3,880,440,0,10955,10954,1,0,0,0,10955,10956,1,0,0,0,10956,10958,
        1,0,0,0,10957,10959,3,882,441,0,10958,10957,1,0,0,0,10958,10959,
        1,0,0,0,10959,897,1,0,0,0,10960,10961,5,681,0,0,10961,10962,5,249,
        0,0,10962,10964,5,288,0,0,10963,10965,3,1002,501,0,10964,10963,1,
        0,0,0,10964,10965,1,0,0,0,10965,899,1,0,0,0,10966,10968,5,681,0,
        0,10967,10969,5,761,0,0,10968,10967,1,0,0,0,10968,10969,1,0,0,0,
        10969,10970,1,0,0,0,10970,10971,5,249,0,0,10971,10973,5,750,0,0,
        10972,10974,3,1002,501,0,10973,10972,1,0,0,0,10973,10974,1,0,0,0,
        10974,10989,1,0,0,0,10975,10987,5,340,0,0,10976,10988,5,6,0,0,10977,
        10979,5,169,0,0,10978,10980,3,1030,515,0,10979,10978,1,0,0,0,10979,
        10980,1,0,0,0,10980,10988,1,0,0,0,10981,10983,5,656,0,0,10982,10981,
        1,0,0,0,10982,10983,1,0,0,0,10983,10985,1,0,0,0,10984,10986,3,1006,
        503,0,10985,10984,1,0,0,0,10985,10986,1,0,0,0,10986,10988,1,0,0,
        0,10987,10976,1,0,0,0,10987,10977,1,0,0,0,10987,10982,1,0,0,0,10988,
        10990,1,0,0,0,10989,10975,1,0,0,0,10989,10990,1,0,0,0,10990,10992,
        1,0,0,0,10991,10993,3,880,440,0,10992,10991,1,0,0,0,10992,10993,
        1,0,0,0,10993,10995,1,0,0,0,10994,10996,3,882,441,0,10995,10994,
        1,0,0,0,10995,10996,1,0,0,0,10996,901,1,0,0,0,10997,10998,5,681,
        0,0,10998,10999,5,265,0,0,10999,11003,5,312,0,0,11000,11001,5,340,
        0,0,11001,11002,5,6,0,0,11002,11004,3,1030,515,0,11003,11000,1,0,
        0,0,11003,11004,1,0,0,0,11004,903,1,0,0,0,11005,11006,5,681,0,0,
        11006,11007,5,270,0,0,11007,11009,5,282,0,0,11008,11010,3,1002,501,
        0,11009,11008,1,0,0,0,11009,11010,1,0,0,0,11010,11022,1,0,0,0,11011,
        11020,5,340,0,0,11012,11021,5,6,0,0,11013,11021,5,169,0,0,11014,
        11015,5,169,0,0,11015,11021,3,1030,515,0,11016,11021,5,656,0,0,11017,
        11018,5,656,0,0,11018,11021,3,1006,503,0,11019,11021,3,1006,503,
        0,11020,11012,1,0,0,0,11020,11013,1,0,0,0,11020,11014,1,0,0,0,11020,
        11016,1,0,0,0,11020,11017,1,0,0,0,11020,11019,1,0,0,0,11021,11023,
        1,0,0,0,11022,11011,1,0,0,0,11022,11023,1,0,0,0,11023,905,1,0,0,
        0,11024,11025,5,681,0,0,11025,11027,5,288,0,0,11026,11028,3,1002,
        501,0,11027,11026,1,0,0,0,11027,11028,1,0,0,0,11028,11040,1,0,0,
        0,11029,11038,5,340,0,0,11030,11039,5,6,0,0,11031,11039,5,169,0,
        0,11032,11033,5,169,0,0,11033,11039,3,1030,515,0,11034,11039,5,656,
        0,0,11035,11036,5,656,0,0,11036,11039,3,1030,515,0,11037,11039,3,
        1030,515,0,11038,11030,1,0,0,0,11038,11031,1,0,0,0,11038,11032,1,
        0,0,0,11038,11034,1,0,0,0,11038,11035,1,0,0,0,11038,11037,1,0,0,
        0,11039,11041,1,0,0,0,11040,11029,1,0,0,0,11040,11041,1,0,0,0,11041,
        907,1,0,0,0,11042,11043,5,681,0,0,11043,11044,5,304,0,0,11044,11046,
        5,96,0,0,11045,11047,3,1002,501,0,11046,11045,1,0,0,0,11046,11047,
        1,0,0,0,11047,11048,1,0,0,0,11048,11051,5,340,0,0,11049,11050,5,
        304,0,0,11050,11052,5,596,0,0,11051,11049,1,0,0,0,11051,11052,1,
        0,0,0,11052,11053,1,0,0,0,11053,11054,3,1056,528,0,11054,909,1,0,
        0,0,11055,11056,5,681,0,0,11056,11057,5,304,0,0,11057,11059,5,597,
        0,0,11058,11060,3,1002,501,0,11059,11058,1,0,0,0,11059,11060,1,0,
        0,0,11060,11074,1,0,0,0,11061,11072,5,340,0,0,11062,11073,5,6,0,
        0,11063,11065,5,169,0,0,11064,11066,3,1030,515,0,11065,11064,1,0,
        0,0,11065,11066,1,0,0,0,11066,11073,1,0,0,0,11067,11069,5,656,0,
        0,11068,11070,3,1006,503,0,11069,11068,1,0,0,0,11069,11070,1,0,0,
        0,11070,11073,1,0,0,0,11071,11073,3,1006,503,0,11072,11062,1,0,0,
        0,11072,11063,1,0,0,0,11072,11067,1,0,0,0,11072,11071,1,0,0,0,11073,
        11075,1,0,0,0,11074,11061,1,0,0,0,11074,11075,1,0,0,0,11075,911,
        1,0,0,0,11076,11077,5,681,0,0,11077,11078,5,304,0,0,11078,11080,
        5,755,0,0,11079,11081,3,1002,501,0,11080,11079,1,0,0,0,11080,11081,
        1,0,0,0,11081,11082,1,0,0,0,11082,11085,5,340,0,0,11083,11084,5,
        304,0,0,11084,11086,5,596,0,0,11085,11083,1,0,0,0,11085,11086,1,
        0,0,0,11086,11087,1,0,0,0,11087,11088,3,1056,528,0,11088,913,1,0,
        0,0,11089,11090,5,681,0,0,11090,11091,5,306,0,0,11091,11093,5,8,
        0,0,11092,11094,3,1002,501,0,11093,11092,1,0,0,0,11093,11094,1,0,
        0,0,11094,915,1,0,0,0,11095,11096,5,681,0,0,11096,11098,5,309,0,
        0,11097,11099,3,918,459,0,11098,11097,1,0,0,0,11098,11099,1,0,0,
        0,11099,11113,1,0,0,0,11100,11101,5,681,0,0,11101,11102,5,289,0,
        0,11102,11103,5,309,0,0,11103,11104,5,340,0,0,11104,11105,5,656,
        0,0,11105,11113,3,1006,503,0,11106,11107,5,681,0,0,11107,11108,5,
        289,0,0,11108,11109,5,309,0,0,11109,11110,5,340,0,0,11110,11111,
        5,169,0,0,11111,11113,3,1030,515,0,11112,11095,1,0,0,0,11112,11100,
        1,0,0,0,11112,11106,1,0,0,0,11113,917,1,0,0,0,11114,11115,5,488,
        0,0,11115,11136,5,6,0,0,11116,11117,5,488,0,0,11117,11118,3,1008,
        504,0,11118,11119,3,1056,528,0,11119,11136,1,0,0,0,11120,11127,5,
        784,0,0,11121,11122,5,620,0,0,11122,11128,3,1030,515,0,11123,11124,
        5,816,0,0,11124,11128,3,1030,515,0,11125,11126,5,678,0,0,11126,11128,
        3,1030,515,0,11127,11121,1,0,0,0,11127,11123,1,0,0,0,11127,11125,
        1,0,0,0,11128,11136,1,0,0,0,11129,11130,5,481,0,0,11130,11131,5,
        620,0,0,11131,11136,3,1030,515,0,11132,11133,5,481,0,0,11133,11134,
        5,678,0,0,11134,11136,3,1030,515,0,11135,11114,1,0,0,0,11135,11116,
        1,0,0,0,11135,11120,1,0,0,0,11135,11129,1,0,0,0,11135,11132,1,0,
        0,0,11136,919,1,0,0,0,11137,11139,5,681,0,0,11138,11140,7,70,0,0,
        11139,11138,1,0,0,0,11139,11140,1,0,0,0,11140,11141,1,0,0,0,11141,
        11143,5,355,0,0,11142,11144,3,1002,501,0,11143,11142,1,0,0,0,11143,
        11144,1,0,0,0,11144,921,1,0,0,0,11145,11146,5,681,0,0,11146,11149,
        5,392,0,0,11147,11148,5,340,0,0,11148,11150,5,6,0,0,11149,11147,
        1,0,0,0,11149,11150,1,0,0,0,11150,923,1,0,0,0,11151,11152,5,681,
        0,0,11152,11153,5,401,0,0,11153,11155,5,8,0,0,11154,11156,3,1002,
        501,0,11155,11154,1,0,0,0,11155,11156,1,0,0,0,11156,925,1,0,0,0,
        11157,11158,5,681,0,0,11158,11159,5,402,0,0,11159,11161,5,543,0,
        0,11160,11162,3,1002,501,0,11161,11160,1,0,0,0,11161,11162,1,0,0,
        0,11162,11164,1,0,0,0,11163,11165,3,928,464,0,11164,11163,1,0,0,
        0,11164,11165,1,0,0,0,11165,927,1,0,0,0,11166,11175,5,340,0,0,11167,
        11176,5,6,0,0,11168,11176,5,169,0,0,11169,11170,5,169,0,0,11170,
        11176,3,1030,515,0,11171,11176,5,656,0,0,11172,11173,5,656,0,0,11173,
        11176,3,1006,503,0,11174,11176,3,1006,503,0,11175,11167,1,0,0,0,
        11175,11168,1,0,0,0,11175,11169,1,0,0,0,11175,11171,1,0,0,0,11175,
        11172,1,0,0,0,11175,11174,1,0,0,0,11176,929,1,0,0,0,11177,11190,
        5,340,0,0,11178,11191,5,6,0,0,11179,11181,5,169,0,0,11180,11182,
        3,1030,515,0,11181,11180,1,0,0,0,11181,11182,1,0,0,0,11182,11191,
        1,0,0,0,11183,11185,5,656,0,0,11184,11186,3,1006,503,0,11185,11184,
        1,0,0,0,11185,11186,1,0,0,0,11186,11191,1,0,0,0,11187,11191,5,747,
        0,0,11188,11189,5,747,0,0,11189,11191,3,1056,528,0,11190,11178,1,
        0,0,0,11190,11179,1,0,0,0,11190,11183,1,0,0,0,11190,11187,1,0,0,
        0,11190,11188,1,0,0,0,11191,931,1,0,0,0,11192,11193,5,681,0,0,11193,
        11194,5,409,0,0,11194,11196,5,835,0,0,11195,11197,3,1002,501,0,11196,
        11195,1,0,0,0,11196,11197,1,0,0,0,11197,11199,1,0,0,0,11198,11200,
        3,928,464,0,11199,11198,1,0,0,0,11199,11200,1,0,0,0,11200,933,1,
        0,0,0,11201,11202,5,681,0,0,11202,11203,5,438,0,0,11203,11204,5,
        543,0,0,11204,935,1,0,0,0,11205,11206,5,681,0,0,11206,11208,5,479,
        0,0,11207,11209,3,1002,501,0,11208,11207,1,0,0,0,11208,11209,1,0,
        0,0,11209,11211,1,0,0,0,11210,11212,3,928,464,0,11211,11210,1,0,
        0,0,11211,11212,1,0,0,0,11212,937,1,0,0,0,11213,11214,5,681,0,0,
        11214,11215,5,502,0,0,11215,11217,5,8,0,0,11216,11218,3,1002,501,
        0,11217,11216,1,0,0,0,11217,11218,1,0,0,0,11218,939,1,0,0,0,11219,
        11220,7,75,0,0,11220,941,1,0,0,0,11221,11222,5,681,0,0,11222,11224,
        5,514,0,0,11223,11225,3,1002,501,0,11224,11223,1,0,0,0,11224,11225,
        1,0,0,0,11225,11241,1,0,0,0,11226,11239,3,940,470,0,11227,11240,
        5,672,0,0,11228,11240,5,6,0,0,11229,11231,5,816,0,0,11230,11232,
        3,1030,515,0,11231,11230,1,0,0,0,11231,11232,1,0,0,0,11232,11240,
        1,0,0,0,11233,11235,7,76,0,0,11234,11236,3,1030,515,0,11235,11234,
        1,0,0,0,11235,11236,1,0,0,0,11236,11240,1,0,0,0,11237,11238,5,747,
        0,0,11238,11240,3,1056,528,0,11239,11227,1,0,0,0,11239,11228,1,0,
        0,0,11239,11229,1,0,0,0,11239,11233,1,0,0,0,11239,11237,1,0,0,0,
        11240,11242,1,0,0,0,11241,11226,1,0,0,0,11241,11242,1,0,0,0,11242,
        943,1,0,0,0,11243,11244,5,681,0,0,11244,11246,5,540,0,0,11245,11247,
        3,1002,501,0,11246,11245,1,0,0,0,11246,11247,1,0,0,0,11247,11249,
        1,0,0,0,11248,11250,3,928,464,0,11249,11248,1,0,0,0,11249,11250,
        1,0,0,0,11250,945,1,0,0,0,11251,11253,5,681,0,0,11252,11254,5,761,
        0,0,11253,11252,1,0,0,0,11253,11254,1,0,0,0,11254,11255,1,0,0,0,
        11255,11256,5,551,0,0,11256,11258,5,371,0,0,11257,11259,3,930,465,
        0,11258,11257,1,0,0,0,11258,11259,1,0,0,0,11259,947,1,0,0,0,11260,
        11261,5,681,0,0,11261,11263,5,556,0,0,11262,11264,3,1002,501,0,11263,
        11262,1,0,0,0,11263,11264,1,0,0,0,11264,11266,1,0,0,0,11265,11267,
        3,928,464,0,11266,11265,1,0,0,0,11266,11267,1,0,0,0,11267,949,1,
        0,0,0,11268,11269,5,681,0,0,11269,11271,5,585,0,0,11270,11272,3,
        1002,501,0,11271,11270,1,0,0,0,11271,11272,1,0,0,0,11272,951,1,0,
        0,0,11273,11274,5,681,0,0,11274,11275,5,594,0,0,11275,11277,5,8,
        0,0,11276,11278,3,1002,501,0,11277,11276,1,0,0,0,11277,11278,1,0,
        0,0,11278,953,1,0,0,0,11279,11280,5,681,0,0,11280,11281,5,594,0,
        0,11281,11283,5,170,0,0,11282,11284,3,1002,501,0,11283,11282,1,0,
        0,0,11283,11284,1,0,0,0,11284,11291,1,0,0,0,11285,11286,5,847,0,
        0,11286,11287,5,551,0,0,11287,11288,3,1004,502,0,11288,11289,5,927,
        0,0,11289,11290,3,1030,515,0,11290,11292,1,0,0,0,11291,11285,1,0,
        0,0,11291,11292,1,0,0,0,11292,955,1,0,0,0,11293,11294,5,681,0,0,
        11294,11295,5,594,0,0,11295,11299,5,312,0,0,11296,11297,5,340,0,
        0,11297,11298,5,6,0,0,11298,11300,3,1030,515,0,11299,11296,1,0,0,
        0,11299,11300,1,0,0,0,11300,957,1,0,0,0,11301,11302,5,681,0,0,11302,
        11303,5,602,0,0,11303,11305,5,431,0,0,11304,11306,3,1002,501,0,11305,
        11304,1,0,0,0,11305,11306,1,0,0,0,11306,959,1,0,0,0,11307,11308,
        5,681,0,0,11308,11310,5,621,0,0,11309,11311,3,1002,501,0,11310,11309,
        1,0,0,0,11310,11311,1,0,0,0,11311,961,1,0,0,0,11312,11313,5,681,
        0,0,11313,11314,5,626,0,0,11314,11315,5,5,0,0,11315,11317,5,543,
        0,0,11316,11318,3,1002,501,0,11317,11316,1,0,0,0,11317,11318,1,0,
        0,0,11318,11320,1,0,0,0,11319,11321,3,928,464,0,11320,11319,1,0,
        0,0,11320,11321,1,0,0,0,11321,963,1,0,0,0,11322,11324,5,681,0,0,
        11323,11325,5,761,0,0,11324,11323,1,0,0,0,11324,11325,1,0,0,0,11325,
        11326,1,0,0,0,11326,11328,5,657,0,0,11327,11329,5,323,0,0,11328,
        11327,1,0,0,0,11328,11329,1,0,0,0,11329,11331,1,0,0,0,11330,11332,
        3,1002,501,0,11331,11330,1,0,0,0,11331,11332,1,0,0,0,11332,11341,
        1,0,0,0,11333,11339,5,340,0,0,11334,11340,5,6,0,0,11335,11337,5,
        169,0,0,11336,11338,3,1030,515,0,11337,11336,1,0,0,0,11337,11338,
        1,0,0,0,11338,11340,1,0,0,0,11339,11334,1,0,0,0,11339,11335,1,0,
        0,0,11340,11342,1,0,0,0,11341,11333,1,0,0,0,11341,11342,1,0,0,0,
        11342,11344,1,0,0,0,11343,11345,3,880,440,0,11344,11343,1,0,0,0,
        11344,11345,1,0,0,0,11345,11347,1,0,0,0,11346,11348,3,882,441,0,
        11347,11346,1,0,0,0,11347,11348,1,0,0,0,11348,965,1,0,0,0,11349,
        11350,5,681,0,0,11350,11352,5,663,0,0,11351,11353,3,1002,501,0,11352,
        11351,1,0,0,0,11352,11353,1,0,0,0,11353,11371,1,0,0,0,11354,11369,
        5,340,0,0,11355,11370,5,6,0,0,11356,11358,5,169,0,0,11357,11356,
        1,0,0,0,11357,11358,1,0,0,0,11358,11359,1,0,0,0,11359,11370,3,1030,
        515,0,11360,11362,5,656,0,0,11361,11360,1,0,0,0,11361,11362,1,0,
        0,0,11362,11363,1,0,0,0,11363,11370,3,1006,503,0,11364,11365,5,42,
        0,0,11365,11370,3,1030,515,0,11366,11367,5,42,0,0,11367,11368,5,
        511,0,0,11368,11370,3,1030,515,0,11369,11355,1,0,0,0,11369,11357,
        1,0,0,0,11369,11361,1,0,0,0,11369,11364,1,0,0,0,11369,11366,1,0,
        0,0,11370,11372,1,0,0,0,11371,11354,1,0,0,0,11371,11372,1,0,0,0,
        11372,967,1,0,0,0,11373,11374,5,681,0,0,11374,11376,5,671,0,0,11375,
        11377,3,1002,501,0,11376,11375,1,0,0,0,11376,11377,1,0,0,0,11377,
        11379,1,0,0,0,11378,11380,3,928,464,0,11379,11378,1,0,0,0,11379,
        11380,1,0,0,0,11380,969,1,0,0,0,11381,11382,5,681,0,0,11382,11383,
        5,672,0,0,11383,11384,5,543,0,0,11384,971,1,0,0,0,11385,11386,5,
        681,0,0,11386,11387,5,520,0,0,11387,11388,5,543,0,0,11388,973,1,
        0,0,0,11389,11390,5,681,0,0,11390,11392,5,679,0,0,11391,11393,3,
        1002,501,0,11392,11391,1,0,0,0,11392,11393,1,0,0,0,11393,975,1,0,
        0,0,11394,11395,5,681,0,0,11395,11396,5,679,0,0,11396,11397,5,340,
        0,0,11397,11398,5,265,0,0,11398,11399,5,310,0,0,11399,11400,3,1030,
        515,0,11400,977,1,0,0,0,11401,11402,5,681,0,0,11402,11403,5,679,
        0,0,11403,11404,5,340,0,0,11404,11405,5,594,0,0,11405,11406,5,310,
        0,0,11406,11407,3,1030,515,0,11407,979,1,0,0,0,11408,11409,5,681,
        0,0,11409,11411,5,729,0,0,11410,11412,3,1002,501,0,11411,11410,1,
        0,0,0,11411,11412,1,0,0,0,11412,11414,1,0,0,0,11413,11415,3,928,
        464,0,11414,11413,1,0,0,0,11414,11415,1,0,0,0,11415,981,1,0,0,0,
        11416,11417,5,681,0,0,11417,11419,5,750,0,0,11418,11420,3,1002,501,
        0,11419,11418,1,0,0,0,11419,11420,1,0,0,0,11420,11422,1,0,0,0,11421,
        11423,3,928,464,0,11422,11421,1,0,0,0,11422,11423,1,0,0,0,11423,
        983,1,0,0,0,11424,11425,5,681,0,0,11425,11427,5,755,0,0,11426,11428,
        3,1002,501,0,11427,11426,1,0,0,0,11427,11428,1,0,0,0,11428,11438,
        1,0,0,0,11429,11430,5,340,0,0,11430,11439,5,6,0,0,11431,11439,5,
        169,0,0,11432,11433,5,169,0,0,11433,11439,3,1030,515,0,11434,11439,
        5,656,0,0,11435,11436,5,656,0,0,11436,11439,3,1006,503,0,11437,11439,
        3,1006,503,0,11438,11429,1,0,0,0,11438,11431,1,0,0,0,11438,11432,
        1,0,0,0,11438,11434,1,0,0,0,11438,11435,1,0,0,0,11438,11437,1,0,
        0,0,11438,11439,1,0,0,0,11439,985,1,0,0,0,11440,11442,5,681,0,0,
        11441,11443,5,761,0,0,11442,11441,1,0,0,0,11442,11443,1,0,0,0,11443,
        11444,1,0,0,0,11444,11446,5,758,0,0,11445,11447,3,1002,501,0,11446,
        11445,1,0,0,0,11446,11447,1,0,0,0,11447,11462,1,0,0,0,11448,11460,
        5,340,0,0,11449,11461,5,6,0,0,11450,11452,5,169,0,0,11451,11453,
        3,1030,515,0,11452,11451,1,0,0,0,11452,11453,1,0,0,0,11453,11461,
        1,0,0,0,11454,11456,5,656,0,0,11455,11454,1,0,0,0,11455,11456,1,
        0,0,0,11456,11458,1,0,0,0,11457,11459,3,1006,503,0,11458,11457,1,
        0,0,0,11458,11459,1,0,0,0,11459,11461,1,0,0,0,11460,11449,1,0,0,
        0,11460,11450,1,0,0,0,11460,11455,1,0,0,0,11461,11463,1,0,0,0,11462,
        11448,1,0,0,0,11462,11463,1,0,0,0,11463,11465,1,0,0,0,11464,11466,
        3,880,440,0,11465,11464,1,0,0,0,11465,11466,1,0,0,0,11466,11468,
        1,0,0,0,11467,11469,3,882,441,0,11468,11467,1,0,0,0,11468,11469,
        1,0,0,0,11469,987,1,0,0,0,11470,11471,5,681,0,0,11471,11474,5,790,
        0,0,11472,11473,5,340,0,0,11473,11475,5,6,0,0,11474,11472,1,0,0,
        0,11474,11475,1,0,0,0,11475,989,1,0,0,0,11476,11477,5,681,0,0,11477,
        11478,5,816,0,0,11478,11480,5,288,0,0,11479,11481,3,1002,501,0,11480,
        11479,1,0,0,0,11480,11481,1,0,0,0,11481,11483,1,0,0,0,11482,11484,
        3,928,464,0,11483,11482,1,0,0,0,11483,11484,1,0,0,0,11484,991,1,
        0,0,0,11485,11487,5,681,0,0,11486,11488,5,761,0,0,11487,11486,1,
        0,0,0,11487,11488,1,0,0,0,11488,11489,1,0,0,0,11489,11491,5,818,
        0,0,11490,11492,3,1002,501,0,11491,11490,1,0,0,0,11491,11492,1,0,
        0,0,11492,11496,1,0,0,0,11493,11494,5,712,0,0,11494,11495,5,847,
        0,0,11495,11497,3,1024,512,0,11496,11493,1,0,0,0,11496,11497,1,0,
        0,0,11497,11500,1,0,0,0,11498,11499,5,386,0,0,11499,11501,3,1060,
        530,0,11500,11498,1,0,0,0,11500,11501,1,0,0,0,11501,11504,1,0,0,
        0,11502,11503,5,285,0,0,11503,11505,3,1024,512,0,11504,11502,1,0,
        0,0,11504,11505,1,0,0,0,11505,993,1,0,0,0,11506,11507,5,681,0,0,
        11507,11509,5,831,0,0,11508,11510,3,1002,501,0,11509,11508,1,0,0,
        0,11509,11510,1,0,0,0,11510,995,1,0,0,0,11511,11512,5,681,0,0,11512,
        11514,5,833,0,0,11513,11515,3,1002,501,0,11514,11513,1,0,0,0,11514,
        11515,1,0,0,0,11515,11516,1,0,0,0,11516,11517,5,340,0,0,11517,11518,
        5,171,0,0,11518,11521,3,1056,528,0,11519,11520,5,386,0,0,11520,11522,
        3,1060,530,0,11521,11519,1,0,0,0,11521,11522,1,0,0,0,11522,997,1,
        0,0,0,11523,11525,5,681,0,0,11524,11526,5,761,0,0,11525,11524,1,
        0,0,0,11525,11526,1,0,0,0,11526,11527,1,0,0,0,11527,11529,5,835,
        0,0,11528,11530,3,1002,501,0,11529,11528,1,0,0,0,11529,11530,1,0,
        0,0,11530,11545,1,0,0,0,11531,11543,5,340,0,0,11532,11544,5,6,0,
        0,11533,11535,5,169,0,0,11534,11536,3,1030,515,0,11535,11534,1,0,
        0,0,11535,11536,1,0,0,0,11536,11544,1,0,0,0,11537,11539,5,656,0,
        0,11538,11537,1,0,0,0,11538,11539,1,0,0,0,11539,11541,1,0,0,0,11540,
        11542,3,1006,503,0,11541,11540,1,0,0,0,11541,11542,1,0,0,0,11542,
        11544,1,0,0,0,11543,11532,1,0,0,0,11543,11533,1,0,0,0,11543,11538,
        1,0,0,0,11544,11546,1,0,0,0,11545,11531,1,0,0,0,11545,11546,1,0,
        0,0,11546,11548,1,0,0,0,11547,11549,3,880,440,0,11548,11547,1,0,
        0,0,11548,11549,1,0,0,0,11549,11551,1,0,0,0,11550,11552,3,882,441,
        0,11551,11550,1,0,0,0,11551,11552,1,0,0,0,11552,999,1,0,0,0,11553,
        11554,5,681,0,0,11554,11556,5,839,0,0,11555,11557,3,1002,501,0,11556,
        11555,1,0,0,0,11556,11557,1,0,0,0,11557,1001,1,0,0,0,11558,11559,
        5,385,0,0,11559,11560,3,1024,512,0,11560,1003,1,0,0,0,11561,11562,
        3,1030,515,0,11562,1005,1,0,0,0,11563,11564,3,1030,515,0,11564,11565,
        5,927,0,0,11565,11566,3,1030,515,0,11566,11569,1,0,0,0,11567,11569,
        3,1030,515,0,11568,11563,1,0,0,0,11568,11567,1,0,0,0,11569,1007,
        1,0,0,0,11570,11571,5,6,0,0,11571,11583,5,514,0,0,11572,11583,5,
        170,0,0,11573,11583,5,355,0,0,11574,11575,5,438,0,0,11575,11583,
        5,543,0,0,11576,11577,5,602,0,0,11577,11583,5,431,0,0,11578,11583,
        5,621,0,0,11579,11583,5,679,0,0,11580,11583,5,818,0,0,11581,11583,
        5,839,0,0,11582,11570,1,0,0,0,11582,11572,1,0,0,0,11582,11573,1,
        0,0,0,11582,11574,1,0,0,0,11582,11576,1,0,0,0,11582,11578,1,0,0,
        0,11582,11579,1,0,0,0,11582,11580,1,0,0,0,11582,11581,1,0,0,0,11583,
        1009,1,0,0,0,11584,11589,3,1008,504,0,11585,11586,5,937,0,0,11586,
        11588,3,1008,504,0,11587,11585,1,0,0,0,11588,11591,1,0,0,0,11589,
        11587,1,0,0,0,11589,11590,1,0,0,0,11590,1011,1,0,0,0,11591,11589,
        1,0,0,0,11592,11593,3,1024,512,0,11593,1013,1,0,0,0,11594,11595,
        3,1030,515,0,11595,1015,1,0,0,0,11596,11597,3,1030,515,0,11597,1017,
        1,0,0,0,11598,11599,3,1030,515,0,11599,1019,1,0,0,0,11600,11601,
        3,1030,515,0,11601,1021,1,0,0,0,11602,11603,3,1030,515,0,11603,1023,
        1,0,0,0,11604,11605,5,912,0,0,11605,1025,1,0,0,0,11606,11611,3,1024,
        512,0,11607,11608,5,937,0,0,11608,11610,3,1024,512,0,11609,11607,
        1,0,0,0,11610,11613,1,0,0,0,11611,11609,1,0,0,0,11611,11612,1,0,
        0,0,11612,1027,1,0,0,0,11613,11611,1,0,0,0,11614,11621,3,1030,515,
        0,11615,11616,5,325,0,0,11616,11617,5,931,0,0,11617,11618,3,1030,
        515,0,11618,11619,5,932,0,0,11619,11621,1,0,0,0,11620,11614,1,0,
        0,0,11620,11615,1,0,0,0,11621,1029,1,0,0,0,11622,11636,5,904,0,0,
        11623,11636,5,905,0,0,11624,11636,5,901,0,0,11625,11636,5,902,0,
        0,11626,11636,3,1032,516,0,11627,11636,3,1034,517,0,11628,11636,
        3,696,348,0,11629,11636,3,1086,543,0,11630,11636,3,1036,518,0,11631,
        11636,3,1038,519,0,11632,11636,3,1040,520,0,11633,11636,3,1042,521,
        0,11634,11636,3,1044,522,0,11635,11622,1,0,0,0,11635,11623,1,0,0,
        0,11635,11624,1,0,0,0,11635,11625,1,0,0,0,11635,11626,1,0,0,0,11635,
        11627,1,0,0,0,11635,11628,1,0,0,0,11635,11629,1,0,0,0,11635,11630,
        1,0,0,0,11635,11631,1,0,0,0,11635,11632,1,0,0,0,11635,11633,1,0,
        0,0,11635,11634,1,0,0,0,11636,1031,1,0,0,0,11637,11638,7,77,0,0,
        11638,1033,1,0,0,0,11639,11640,7,78,0,0,11640,1035,1,0,0,0,11641,
        11642,7,79,0,0,11642,1037,1,0,0,0,11643,11644,7,80,0,0,11644,1039,
        1,0,0,0,11645,11658,7,81,0,0,11646,11658,5,302,0,0,11647,11658,5,
        382,0,0,11648,11658,5,618,0,0,11649,11658,5,179,0,0,11650,11658,
        7,82,0,0,11651,11658,5,701,0,0,11652,11658,5,456,0,0,11653,11658,
        5,231,0,0,11654,11658,5,149,0,0,11655,11658,5,134,0,0,11656,11658,
        5,787,0,0,11657,11645,1,0,0,0,11657,11646,1,0,0,0,11657,11647,1,
        0,0,0,11657,11648,1,0,0,0,11657,11649,1,0,0,0,11657,11650,1,0,0,
        0,11657,11651,1,0,0,0,11657,11652,1,0,0,0,11657,11653,1,0,0,0,11657,
        11654,1,0,0,0,11657,11655,1,0,0,0,11657,11656,1,0,0,0,11658,1041,
        1,0,0,0,11659,11665,5,115,0,0,11660,11665,5,591,0,0,11661,11665,
        7,83,0,0,11662,11665,5,385,0,0,11663,11665,5,332,0,0,11664,11659,
        1,0,0,0,11664,11660,1,0,0,0,11664,11661,1,0,0,0,11664,11662,1,0,
        0,0,11664,11663,1,0,0,0,11665,1043,1,0,0,0,11666,11672,7,84,0,0,
        11667,11672,7,85,0,0,11668,11672,5,702,0,0,11669,11672,5,462,0,0,
        11670,11672,5,328,0,0,11671,11666,1,0,0,0,11671,11667,1,0,0,0,11671,
        11668,1,0,0,0,11671,11669,1,0,0,0,11671,11670,1,0,0,0,11672,1045,
        1,0,0,0,11673,11674,7,86,0,0,11674,1047,1,0,0,0,11675,11676,5,534,
        0,0,11676,11677,5,921,0,0,11677,11678,3,1024,512,0,11678,1049,1,
        0,0,0,11679,11680,3,1030,515,0,11680,11681,5,927,0,0,11681,11683,
        1,0,0,0,11682,11679,1,0,0,0,11682,11683,1,0,0,0,11683,11684,1,0,
        0,0,11684,11685,3,1030,515,0,11685,1051,1,0,0,0,11686,11691,3,1050,
        525,0,11687,11688,5,937,0,0,11688,11690,3,1050,525,0,11689,11687,
        1,0,0,0,11690,11693,1,0,0,0,11691,11689,1,0,0,0,11691,11692,1,0,
        0,0,11692,1053,1,0,0,0,11693,11691,1,0,0,0,11694,11697,3,1050,525,
        0,11695,11696,5,138,0,0,11696,11698,3,1024,512,0,11697,11695,1,0,
        0,0,11697,11698,1,0,0,0,11698,11707,1,0,0,0,11699,11700,5,937,0,
        0,11700,11703,3,1050,525,0,11701,11702,5,138,0,0,11702,11704,3,1024,
        512,0,11703,11701,1,0,0,0,11703,11704,1,0,0,0,11704,11706,1,0,0,
        0,11705,11699,1,0,0,0,11706,11709,1,0,0,0,11707,11705,1,0,0,0,11707,
        11708,1,0,0,0,11708,1055,1,0,0,0,11709,11707,1,0,0,0,11710,11711,
        3,1030,515,0,11711,11712,5,927,0,0,11712,11713,3,1030,515,0,11713,
        11714,5,927,0,0,11714,11715,3,1030,515,0,11715,11722,1,0,0,0,11716,
        11717,3,1030,515,0,11717,11718,5,927,0,0,11718,11719,3,1030,515,
        0,11719,11722,1,0,0,0,11720,11722,3,1030,515,0,11721,11710,1,0,0,
        0,11721,11716,1,0,0,0,11721,11720,1,0,0,0,11722,1057,1,0,0,0,11723,
        11730,3,1056,528,0,11724,11725,5,325,0,0,11725,11726,5,931,0,0,11726,
        11727,3,1024,512,0,11727,11728,5,932,0,0,11728,11730,1,0,0,0,11729,
        11723,1,0,0,0,11729,11724,1,0,0,0,11730,1059,1,0,0,0,11731,11732,
        5,913,0,0,11732,1061,1,0,0,0,11733,11738,3,1066,533,0,11734,11735,
        5,937,0,0,11735,11737,3,1066,533,0,11736,11734,1,0,0,0,11737,11740,
        1,0,0,0,11738,11736,1,0,0,0,11738,11739,1,0,0,0,11739,1063,1,0,0,
        0,11740,11738,1,0,0,0,11741,11743,3,1066,533,0,11742,11744,3,1092,
        546,0,11743,11742,1,0,0,0,11743,11744,1,0,0,0,11744,11752,1,0,0,
        0,11745,11746,5,937,0,0,11746,11748,3,1066,533,0,11747,11749,3,1092,
        546,0,11748,11747,1,0,0,0,11748,11749,1,0,0,0,11749,11751,1,0,0,
        0,11750,11745,1,0,0,0,11751,11754,1,0,0,0,11752,11750,1,0,0,0,11752,
        11753,1,0,0,0,11753,1065,1,0,0,0,11754,11752,1,0,0,0,11755,11756,
        6,533,-1,0,11756,11757,3,1056,528,0,11757,11758,5,927,0,0,11758,
        11759,5,442,0,0,11759,11780,1,0,0,0,11760,11780,3,1116,558,0,11761,
        11780,3,1068,534,0,11762,11780,3,1114,557,0,11763,11764,7,87,0,0,
        11764,11780,3,1066,533,22,11765,11767,5,448,0,0,11766,11765,1,0,
        0,0,11767,11768,1,0,0,0,11768,11766,1,0,0,0,11768,11769,1,0,0,0,
        11769,11770,1,0,0,0,11770,11780,3,1066,533,18,11771,11780,3,1082,
        541,0,11772,11780,3,1074,537,0,11773,11780,3,1072,536,0,11774,11780,
        3,1076,538,0,11775,11780,3,1070,535,0,11776,11780,3,1096,548,0,11777,
        11780,3,1254,627,0,11778,11780,3,1088,544,0,11779,11755,1,0,0,0,
        11779,11760,1,0,0,0,11779,11761,1,0,0,0,11779,11762,1,0,0,0,11779,
        11763,1,0,0,0,11779,11766,1,0,0,0,11779,11771,1,0,0,0,11779,11772,
        1,0,0,0,11779,11773,1,0,0,0,11779,11774,1,0,0,0,11779,11775,1,0,
        0,0,11779,11776,1,0,0,0,11779,11777,1,0,0,0,11779,11778,1,0,0,0,
        11780,11872,1,0,0,0,11781,11782,10,28,0,0,11782,11783,5,939,0,0,
        11783,11871,3,1066,533,29,11784,11785,10,21,0,0,11785,11786,7,88,
        0,0,11786,11871,3,1066,533,22,11787,11788,10,20,0,0,11788,11789,
        7,89,0,0,11789,11871,3,1066,533,21,11790,11791,10,19,0,0,11791,11792,
        3,1250,625,0,11792,11793,3,1066,533,20,11793,11871,1,0,0,0,11794,
        11795,10,17,0,0,11795,11796,5,29,0,0,11796,11871,3,1066,533,18,11797,
        11798,10,16,0,0,11798,11799,5,497,0,0,11799,11871,3,1066,533,17,
        11800,11802,10,3,0,0,11801,11803,5,448,0,0,11802,11801,1,0,0,0,11802,
        11803,1,0,0,0,11803,11804,1,0,0,0,11804,11805,5,619,0,0,11805,11871,
        3,1066,533,4,11806,11807,10,29,0,0,11807,11808,5,933,0,0,11808,11809,
        3,1066,533,0,11809,11810,5,934,0,0,11810,11871,1,0,0,0,11811,11812,
        10,27,0,0,11812,11815,5,927,0,0,11813,11816,5,829,0,0,11814,11816,
        3,1066,533,0,11815,11813,1,0,0,0,11815,11814,1,0,0,0,11816,11871,
        1,0,0,0,11817,11818,10,26,0,0,11818,11819,5,134,0,0,11819,11871,
        3,1024,512,0,11820,11821,10,14,0,0,11821,11871,3,1094,547,0,11822,
        11823,10,12,0,0,11823,11824,5,940,0,0,11824,11871,3,1086,543,0,11825,
        11826,10,6,0,0,11826,11827,5,359,0,0,11827,11871,3,1252,626,0,11828,
        11830,10,5,0,0,11829,11831,5,448,0,0,11830,11829,1,0,0,0,11830,11831,
        1,0,0,0,11831,11832,1,0,0,0,11832,11833,5,340,0,0,11833,11836,5,
        931,0,0,11834,11837,3,1254,627,0,11835,11837,3,1062,531,0,11836,
        11834,1,0,0,0,11836,11835,1,0,0,0,11837,11838,1,0,0,0,11838,11839,
        5,932,0,0,11839,11871,1,0,0,0,11840,11842,10,4,0,0,11841,11843,5,
        448,0,0,11842,11841,1,0,0,0,11842,11843,1,0,0,0,11843,11844,1,0,
        0,0,11844,11845,7,90,0,0,11845,11848,3,1066,533,0,11846,11847,5,
        237,0,0,11847,11849,3,1066,533,0,11848,11846,1,0,0,0,11848,11849,
        1,0,0,0,11849,11871,1,0,0,0,11850,11852,10,2,0,0,11851,11853,5,448,
        0,0,11852,11851,1,0,0,0,11852,11853,1,0,0,0,11853,11854,1,0,0,0,
        11854,11855,7,90,0,0,11855,11856,5,30,0,0,11856,11857,5,931,0,0,
        11857,11862,3,1066,533,0,11858,11859,5,937,0,0,11859,11861,3,1066,
        533,0,11860,11858,1,0,0,0,11861,11864,1,0,0,0,11862,11860,1,0,0,
        0,11862,11863,1,0,0,0,11863,11865,1,0,0,0,11864,11862,1,0,0,0,11865,
        11868,5,932,0,0,11866,11867,5,237,0,0,11867,11869,3,1066,533,0,11868,
        11866,1,0,0,0,11868,11869,1,0,0,0,11869,11871,1,0,0,0,11870,11781,
        1,0,0,0,11870,11784,1,0,0,0,11870,11787,1,0,0,0,11870,11790,1,0,
        0,0,11870,11794,1,0,0,0,11870,11797,1,0,0,0,11870,11800,1,0,0,0,
        11870,11806,1,0,0,0,11870,11811,1,0,0,0,11870,11817,1,0,0,0,11870,
        11820,1,0,0,0,11870,11822,1,0,0,0,11870,11825,1,0,0,0,11870,11828,
        1,0,0,0,11870,11840,1,0,0,0,11870,11850,1,0,0,0,11871,11874,1,0,
        0,0,11872,11870,1,0,0,0,11872,11873,1,0,0,0,11873,1067,1,0,0,0,11874,
        11872,1,0,0,0,11875,11876,5,328,0,0,11876,11877,5,931,0,0,11877,
        11878,3,1248,624,0,11878,11879,5,937,0,0,11879,11880,3,1066,533,
        0,11880,11881,5,937,0,0,11881,11882,3,1066,533,0,11882,11883,5,932,
        0,0,11883,1069,1,0,0,0,11884,11885,7,91,0,0,11885,11886,5,931,0,
        0,11886,11891,3,1066,533,0,11887,11888,5,937,0,0,11888,11890,3,1024,
        512,0,11889,11887,1,0,0,0,11890,11893,1,0,0,0,11891,11889,1,0,0,
        0,11891,11892,1,0,0,0,11892,11894,1,0,0,0,11893,11891,1,0,0,0,11894,
        11895,5,932,0,0,11895,1071,1,0,0,0,11896,11897,5,801,0,0,11897,11898,
        5,931,0,0,11898,11899,3,1066,533,0,11899,11900,5,45,0,0,11900,11901,
        3,1086,543,0,11901,11902,5,932,0,0,11902,1073,1,0,0,0,11903,11904,
        5,108,0,0,11904,11905,5,931,0,0,11905,11906,3,1066,533,0,11906,11907,
        5,45,0,0,11907,11908,3,1086,543,0,11908,11909,5,932,0,0,11909,11913,
        1,0,0,0,11910,11911,7,92,0,0,11911,11913,3,1066,533,0,11912,11903,
        1,0,0,0,11912,11910,1,0,0,0,11913,1075,1,0,0,0,11914,11915,5,935,
        0,0,11915,11920,3,1078,539,0,11916,11917,5,937,0,0,11917,11919,3,
        1078,539,0,11918,11916,1,0,0,0,11919,11922,1,0,0,0,11920,11918,1,
        0,0,0,11920,11921,1,0,0,0,11921,11923,1,0,0,0,11922,11920,1,0,0,
        0,11923,11924,5,936,0,0,11924,11928,1,0,0,0,11925,11926,5,935,0,
        0,11926,11928,5,936,0,0,11927,11914,1,0,0,0,11927,11925,1,0,0,0,
        11928,1077,1,0,0,0,11929,11930,5,912,0,0,11930,11931,5,939,0,0,11931,
        11932,3,1080,540,0,11932,1079,1,0,0,0,11933,11934,3,1066,533,0,11934,
        1081,1,0,0,0,11935,11936,5,933,0,0,11936,11941,3,1080,540,0,11937,
        11938,5,937,0,0,11938,11940,3,1080,540,0,11939,11937,1,0,0,0,11940,
        11943,1,0,0,0,11941,11939,1,0,0,0,11941,11942,1,0,0,0,11942,11944,
        1,0,0,0,11943,11941,1,0,0,0,11944,11945,5,934,0,0,11945,11949,1,
        0,0,0,11946,11947,5,933,0,0,11947,11949,5,934,0,0,11948,11935,1,
        0,0,0,11948,11946,1,0,0,0,11949,1083,1,0,0,0,11950,11951,5,931,0,
        0,11951,11952,3,1060,530,0,11952,11953,5,932,0,0,11953,1085,1,0,
        0,0,11954,12011,7,93,0,0,11955,11964,7,94,0,0,11956,11957,5,931,
        0,0,11957,11960,3,1060,530,0,11958,11959,5,937,0,0,11959,11961,3,
        1060,530,0,11960,11958,1,0,0,0,11960,11961,1,0,0,0,11961,11962,1,
        0,0,0,11962,11963,5,932,0,0,11963,11965,1,0,0,0,11964,11956,1,0,
        0,0,11964,11965,1,0,0,0,11965,12011,1,0,0,0,11966,12011,7,95,0,0,
        11967,12011,5,867,0,0,11968,12011,5,870,0,0,11969,11971,5,871,0,
        0,11970,11972,3,1084,542,0,11971,11970,1,0,0,0,11971,11972,1,0,0,
        0,11972,12011,1,0,0,0,11973,11975,5,763,0,0,11974,11976,3,1084,542,
        0,11975,11974,1,0,0,0,11975,11976,1,0,0,0,11976,12011,1,0,0,0,11977,
        11979,5,766,0,0,11978,11980,3,1084,542,0,11979,11978,1,0,0,0,11979,
        11980,1,0,0,0,11980,12011,1,0,0,0,11981,11983,5,770,0,0,11982,11984,
        3,1084,542,0,11983,11982,1,0,0,0,11983,11984,1,0,0,0,11984,12011,
        1,0,0,0,11985,11987,5,772,0,0,11986,11988,3,1084,542,0,11987,11986,
        1,0,0,0,11987,11988,1,0,0,0,11988,12011,1,0,0,0,11989,11991,5,776,
        0,0,11990,11992,3,1084,542,0,11991,11990,1,0,0,0,11991,11992,1,0,
        0,0,11992,12011,1,0,0,0,11993,11995,7,96,0,0,11994,11996,3,1084,
        542,0,11995,11994,1,0,0,0,11995,11996,1,0,0,0,11996,12011,1,0,0,
        0,11997,11999,7,97,0,0,11998,12000,3,1084,542,0,11999,11998,1,0,
        0,0,11999,12000,1,0,0,0,12000,12011,1,0,0,0,12001,12003,7,98,0,0,
        12002,12004,3,1084,542,0,12003,12002,1,0,0,0,12003,12004,1,0,0,0,
        12004,12011,1,0,0,0,12005,12011,5,894,0,0,12006,12011,5,477,0,0,
        12007,12011,5,863,0,0,12008,12011,5,879,0,0,12009,12011,5,880,0,
        0,12010,11954,1,0,0,0,12010,11955,1,0,0,0,12010,11966,1,0,0,0,12010,
        11967,1,0,0,0,12010,11968,1,0,0,0,12010,11969,1,0,0,0,12010,11973,
        1,0,0,0,12010,11977,1,0,0,0,12010,11981,1,0,0,0,12010,11985,1,0,
        0,0,12010,11989,1,0,0,0,12010,11993,1,0,0,0,12010,11997,1,0,0,0,
        12010,12001,1,0,0,0,12010,12005,1,0,0,0,12010,12006,1,0,0,0,12010,
        12007,1,0,0,0,12010,12008,1,0,0,0,12010,12009,1,0,0,0,12011,1087,
        1,0,0,0,12012,12035,5,182,0,0,12013,12035,5,458,0,0,12014,12019,
        3,1030,515,0,12015,12016,5,927,0,0,12016,12018,3,1030,515,0,12017,
        12015,1,0,0,0,12018,12021,1,0,0,0,12019,12017,1,0,0,0,12019,12020,
        1,0,0,0,12020,12035,1,0,0,0,12021,12019,1,0,0,0,12022,12023,3,1030,
        515,0,12023,12024,5,927,0,0,12024,12025,5,941,0,0,12025,12035,1,
        0,0,0,12026,12035,3,1112,556,0,12027,12035,3,1108,554,0,12028,12035,
        5,864,0,0,12029,12035,5,52,0,0,12030,12035,5,78,0,0,12031,12035,
        5,95,0,0,12032,12035,5,445,0,0,12033,12035,5,478,0,0,12034,12012,
        1,0,0,0,12034,12013,1,0,0,0,12034,12014,1,0,0,0,12034,12022,1,0,
        0,0,12034,12026,1,0,0,0,12034,12027,1,0,0,0,12034,12028,1,0,0,0,
        12034,12029,1,0,0,0,12034,12030,1,0,0,0,12034,12031,1,0,0,0,12034,
        12032,1,0,0,0,12034,12033,1,0,0,0,12035,1089,1,0,0,0,12036,12037,
        5,500,0,0,12037,12038,5,99,0,0,12038,12039,3,1064,532,0,12039,1091,
        1,0,0,0,12040,12041,7,99,0,0,12041,1093,1,0,0,0,12042,12043,5,506,
        0,0,12043,12044,5,931,0,0,12044,12046,3,1206,603,0,12045,12047,3,
        1090,545,0,12046,12045,1,0,0,0,12046,12047,1,0,0,0,12047,12048,1,
        0,0,0,12048,12049,5,932,0,0,12049,12059,1,0,0,0,12050,12051,5,506,
        0,0,12051,12052,5,931,0,0,12052,12053,3,1090,545,0,12053,12054,5,
        932,0,0,12054,12059,1,0,0,0,12055,12056,5,506,0,0,12056,12057,5,
        931,0,0,12057,12059,5,932,0,0,12058,12042,1,0,0,0,12058,12050,1,
        0,0,0,12058,12055,1,0,0,0,12059,1095,1,0,0,0,12060,12138,3,1282,
        641,0,12061,12062,3,1038,519,0,12062,12063,5,931,0,0,12063,12068,
        3,1066,533,0,12064,12065,5,937,0,0,12065,12067,3,1066,533,0,12066,
        12064,1,0,0,0,12067,12070,1,0,0,0,12068,12066,1,0,0,0,12068,12069,
        1,0,0,0,12069,12071,1,0,0,0,12070,12068,1,0,0,0,12071,12072,5,932,
        0,0,12072,12138,1,0,0,0,12073,12074,3,1040,520,0,12074,12075,5,931,
        0,0,12075,12076,3,1066,533,0,12076,12077,5,937,0,0,12077,12078,3,
        1066,533,0,12078,12079,5,932,0,0,12079,12138,1,0,0,0,12080,12081,
        3,1042,521,0,12081,12082,5,931,0,0,12082,12083,3,1066,533,0,12083,
        12084,5,937,0,0,12084,12089,3,1066,533,0,12085,12086,5,937,0,0,12086,
        12088,3,1066,533,0,12087,12085,1,0,0,0,12088,12091,1,0,0,0,12089,
        12087,1,0,0,0,12089,12090,1,0,0,0,12090,12092,1,0,0,0,12091,12089,
        1,0,0,0,12092,12093,5,932,0,0,12093,12138,1,0,0,0,12094,12095,3,
        1044,522,0,12095,12096,5,931,0,0,12096,12097,3,1066,533,0,12097,
        12098,5,937,0,0,12098,12099,3,1066,533,0,12099,12100,5,937,0,0,12100,
        12101,3,1066,533,0,12101,12102,5,932,0,0,12102,12138,1,0,0,0,12103,
        12138,3,1104,552,0,12104,12138,3,1106,553,0,12105,12106,3,1056,528,
        0,12106,12108,5,931,0,0,12107,12109,3,1062,531,0,12108,12107,1,0,
        0,0,12108,12109,1,0,0,0,12109,12110,1,0,0,0,12110,12111,5,932,0,
        0,12111,12138,1,0,0,0,12112,12113,3,1056,528,0,12113,12114,5,931,
        0,0,12114,12115,3,1098,549,0,12115,12116,5,932,0,0,12116,12138,1,
        0,0,0,12117,12118,3,1046,523,0,12118,12119,5,931,0,0,12119,12120,
        3,1062,531,0,12120,12121,5,932,0,0,12121,12138,1,0,0,0,12122,12123,
        7,82,0,0,12123,12124,5,931,0,0,12124,12125,3,1066,533,0,12125,12126,
        5,932,0,0,12126,12138,1,0,0,0,12127,12128,7,100,0,0,12128,12129,
        5,931,0,0,12129,12130,3,1066,533,0,12130,12131,5,932,0,0,12131,12138,
        1,0,0,0,12132,12133,5,785,0,0,12133,12134,5,931,0,0,12134,12135,
        3,1066,533,0,12135,12136,5,932,0,0,12136,12138,1,0,0,0,12137,12060,
        1,0,0,0,12137,12061,1,0,0,0,12137,12073,1,0,0,0,12137,12080,1,0,
        0,0,12137,12094,1,0,0,0,12137,12103,1,0,0,0,12137,12104,1,0,0,0,
        12137,12105,1,0,0,0,12137,12112,1,0,0,0,12137,12117,1,0,0,0,12137,
        12122,1,0,0,0,12137,12127,1,0,0,0,12137,12132,1,0,0,0,12138,1097,
        1,0,0,0,12139,12144,3,1100,550,0,12140,12141,5,937,0,0,12141,12143,
        3,1100,550,0,12142,12140,1,0,0,0,12143,12146,1,0,0,0,12144,12142,
        1,0,0,0,12144,12145,1,0,0,0,12145,1099,1,0,0,0,12146,12144,1,0,0,
        0,12147,12148,3,1030,515,0,12148,12149,5,918,0,0,12149,12150,3,1066,
        533,0,12150,1101,1,0,0,0,12151,12152,7,101,0,0,12152,12153,5,457,
        0,0,12153,1103,1,0,0,0,12154,12155,7,102,0,0,12155,12156,5,931,0,
        0,12156,12157,5,932,0,0,12157,12190,3,1094,547,0,12158,12159,5,455,
        0,0,12159,12160,5,931,0,0,12160,12161,3,1066,533,0,12161,12162,5,
        932,0,0,12162,12163,3,1094,547,0,12163,12190,1,0,0,0,12164,12165,
        7,103,0,0,12165,12166,5,931,0,0,12166,12172,3,1066,533,0,12167,12168,
        5,937,0,0,12168,12169,3,1066,533,0,12169,12170,5,937,0,0,12170,12171,
        3,1066,533,0,12171,12173,1,0,0,0,12172,12167,1,0,0,0,12172,12173,
        1,0,0,0,12173,12174,1,0,0,0,12174,12176,5,932,0,0,12175,12177,3,
        1102,551,0,12176,12175,1,0,0,0,12176,12177,1,0,0,0,12177,12178,1,
        0,0,0,12178,12179,3,1094,547,0,12179,12190,1,0,0,0,12180,12181,7,
        104,0,0,12181,12182,5,931,0,0,12182,12183,3,1066,533,0,12183,12185,
        5,932,0,0,12184,12186,3,1102,551,0,12185,12184,1,0,0,0,12185,12186,
        1,0,0,0,12186,12187,1,0,0,0,12187,12188,3,1094,547,0,12188,12190,
        1,0,0,0,12189,12154,1,0,0,0,12189,12158,1,0,0,0,12189,12164,1,0,
        0,0,12189,12180,1,0,0,0,12190,1105,1,0,0,0,12191,12192,3,1030,515,
        0,12192,12194,5,931,0,0,12193,12195,5,205,0,0,12194,12193,1,0,0,
        0,12194,12195,1,0,0,0,12195,12196,1,0,0,0,12196,12197,3,1062,531,
        0,12197,12198,5,932,0,0,12198,12224,1,0,0,0,12199,12200,3,1030,515,
        0,12200,12201,5,931,0,0,12201,12202,5,941,0,0,12202,12203,5,932,
        0,0,12203,12224,1,0,0,0,12204,12205,7,105,0,0,12205,12207,5,931,
        0,0,12206,12208,5,205,0,0,12207,12206,1,0,0,0,12207,12208,1,0,0,
        0,12208,12209,1,0,0,0,12209,12212,3,1066,533,0,12210,12211,5,937,
        0,0,12211,12213,3,1024,512,0,12212,12210,1,0,0,0,12212,12213,1,0,
        0,0,12213,12214,1,0,0,0,12214,12221,5,932,0,0,12215,12216,5,848,
        0,0,12216,12217,5,310,0,0,12217,12218,5,931,0,0,12218,12219,3,1272,
        636,0,12219,12220,5,932,0,0,12220,12222,1,0,0,0,12221,12215,1,0,
        0,0,12221,12222,1,0,0,0,12222,12224,1,0,0,0,12223,12191,1,0,0,0,
        12223,12199,1,0,0,0,12223,12204,1,0,0,0,12224,1107,1,0,0,0,12225,
        12238,5,912,0,0,12226,12228,3,1110,555,0,12227,12226,1,0,0,0,12227,
        12228,1,0,0,0,12228,12229,1,0,0,0,12229,12238,5,913,0,0,12230,12232,
        3,1110,555,0,12231,12230,1,0,0,0,12231,12232,1,0,0,0,12232,12233,
        1,0,0,0,12233,12238,7,106,0,0,12234,12238,3,556,278,0,12235,12238,
        5,458,0,0,12236,12238,5,929,0,0,12237,12225,1,0,0,0,12237,12227,
        1,0,0,0,12237,12231,1,0,0,0,12237,12234,1,0,0,0,12237,12235,1,0,
        0,0,12237,12236,1,0,0,0,12238,1109,1,0,0,0,12239,12240,7,87,0,0,
        12240,1111,1,0,0,0,12241,12243,3,1030,515,0,12242,12241,1,0,0,0,
        12242,12243,1,0,0,0,12243,12244,1,0,0,0,12244,12246,5,927,0,0,12245,
        12247,3,1030,515,0,12246,12245,1,0,0,0,12246,12247,1,0,0,0,12247,
        12248,1,0,0,0,12248,12250,5,927,0,0,12249,12251,3,1030,515,0,12250,
        12249,1,0,0,0,12250,12251,1,0,0,0,12251,12252,1,0,0,0,12252,12253,
        5,927,0,0,12253,12270,3,1030,515,0,12254,12256,3,1030,515,0,12255,
        12254,1,0,0,0,12255,12256,1,0,0,0,12256,12257,1,0,0,0,12257,12259,
        5,927,0,0,12258,12260,3,1030,515,0,12259,12258,1,0,0,0,12259,12260,
        1,0,0,0,12260,12261,1,0,0,0,12261,12262,5,927,0,0,12262,12270,3,
        1030,515,0,12263,12265,3,1030,515,0,12264,12263,1,0,0,0,12264,12265,
        1,0,0,0,12265,12266,1,0,0,0,12266,12267,5,927,0,0,12267,12270,3,
        1030,515,0,12268,12270,3,1030,515,0,12269,12242,1,0,0,0,12269,12255,
        1,0,0,0,12269,12264,1,0,0,0,12269,12268,1,0,0,0,12270,1113,1,0,0,
        0,12271,12272,5,931,0,0,12272,12273,3,1062,531,0,12273,12274,5,932,
        0,0,12274,12280,1,0,0,0,12275,12276,5,931,0,0,12276,12277,3,1254,
        627,0,12277,12278,5,932,0,0,12278,12280,1,0,0,0,12279,12271,1,0,
        0,0,12279,12275,1,0,0,0,12280,1115,1,0,0,0,12281,12282,5,105,0,0,
        12282,12284,3,1066,533,0,12283,12285,3,1120,560,0,12284,12283,1,
        0,0,0,12285,12286,1,0,0,0,12286,12284,1,0,0,0,12286,12287,1,0,0,
        0,12287,12290,1,0,0,0,12288,12289,5,212,0,0,12289,12291,3,1066,533,
        0,12290,12288,1,0,0,0,12290,12291,1,0,0,0,12291,12292,1,0,0,0,12292,
        12293,5,225,0,0,12293,12307,1,0,0,0,12294,12296,5,105,0,0,12295,
        12297,3,1118,559,0,12296,12295,1,0,0,0,12297,12298,1,0,0,0,12298,
        12296,1,0,0,0,12298,12299,1,0,0,0,12299,12302,1,0,0,0,12300,12301,
        5,212,0,0,12301,12303,3,1066,533,0,12302,12300,1,0,0,0,12302,12303,
        1,0,0,0,12303,12304,1,0,0,0,12304,12305,5,225,0,0,12305,12307,1,
        0,0,0,12306,12281,1,0,0,0,12306,12294,1,0,0,0,12307,1117,1,0,0,0,
        12308,12309,5,845,0,0,12309,12310,3,1248,624,0,12310,12311,5,762,
        0,0,12311,12312,3,1066,533,0,12312,1119,1,0,0,0,12313,12314,5,845,
        0,0,12314,12315,3,1066,533,0,12315,12316,5,762,0,0,12316,12317,3,
        1066,533,0,12317,1121,1,0,0,0,12318,12320,3,1124,562,0,12319,12318,
        1,0,0,0,12319,12320,1,0,0,0,12320,12321,1,0,0,0,12321,12325,3,1132,
        566,0,12322,12324,3,1130,565,0,12323,12322,1,0,0,0,12324,12327,1,
        0,0,0,12325,12323,1,0,0,0,12325,12326,1,0,0,0,12326,1123,1,0,0,0,
        12327,12325,1,0,0,0,12328,12330,5,847,0,0,12329,12331,5,578,0,0,
        12330,12329,1,0,0,0,12330,12331,1,0,0,0,12331,12332,1,0,0,0,12332,
        12337,3,1126,563,0,12333,12334,5,937,0,0,12334,12336,3,1126,563,
        0,12335,12333,1,0,0,0,12336,12339,1,0,0,0,12337,12335,1,0,0,0,12337,
        12338,1,0,0,0,12338,1125,1,0,0,0,12339,12337,1,0,0,0,12340,12345,
        3,1030,515,0,12341,12342,5,931,0,0,12342,12343,3,1052,526,0,12343,
        12344,5,932,0,0,12344,12346,1,0,0,0,12345,12341,1,0,0,0,12345,12346,
        1,0,0,0,12346,12347,1,0,0,0,12347,12348,5,45,0,0,12348,12349,3,1132,
        566,0,12349,1127,1,0,0,0,12350,12351,3,1136,568,0,12351,12353,3,
        1134,567,0,12352,12354,3,1278,639,0,12353,12352,1,0,0,0,12353,12354,
        1,0,0,0,12354,12359,1,0,0,0,12355,12356,3,1138,569,0,12356,12357,
        3,1134,567,0,12357,12359,1,0,0,0,12358,12350,1,0,0,0,12358,12355,
        1,0,0,0,12359,1129,1,0,0,0,12360,12362,5,805,0,0,12361,12363,5,17,
        0,0,12362,12361,1,0,0,0,12362,12363,1,0,0,0,12363,12368,1,0,0,0,
        12364,12368,5,240,0,0,12365,12368,5,424,0,0,12366,12368,5,356,0,
        0,12367,12360,1,0,0,0,12367,12364,1,0,0,0,12367,12365,1,0,0,0,12367,
        12366,1,0,0,0,12368,12369,1,0,0,0,12369,12372,3,1132,566,0,12370,
        12372,3,1132,566,0,12371,12367,1,0,0,0,12371,12370,1,0,0,0,12372,
        1131,1,0,0,0,12373,12374,6,566,-1,0,12374,12375,5,931,0,0,12375,
        12376,3,1132,566,0,12376,12377,5,932,0,0,12377,12381,1,0,0,0,12378,
        12381,3,1128,564,0,12379,12381,3,1124,562,0,12380,12373,1,0,0,0,
        12380,12378,1,0,0,0,12380,12379,1,0,0,0,12381,12386,1,0,0,0,12382,
        12383,10,3,0,0,12383,12385,3,1130,565,0,12384,12382,1,0,0,0,12385,
        12388,1,0,0,0,12386,12384,1,0,0,0,12386,12387,1,0,0,0,12387,1133,
        1,0,0,0,12388,12386,1,0,0,0,12389,12391,3,1166,583,0,12390,12389,
        1,0,0,0,12390,12391,1,0,0,0,12391,12393,1,0,0,0,12392,12394,3,1172,
        586,0,12393,12392,1,0,0,0,12393,12394,1,0,0,0,12394,12396,1,0,0,
        0,12395,12397,3,1258,629,0,12396,12395,1,0,0,0,12396,12397,1,0,0,
        0,12397,12403,1,0,0,0,12398,12400,3,1264,632,0,12399,12401,3,1266,
        633,0,12400,12399,1,0,0,0,12400,12401,1,0,0,0,12401,12404,1,0,0,
        0,12402,12404,3,1266,633,0,12403,12398,1,0,0,0,12403,12402,1,0,0,
        0,12403,12404,1,0,0,0,12404,12406,1,0,0,0,12405,12407,3,1268,634,
        0,12406,12405,1,0,0,0,12406,12407,1,0,0,0,12407,12409,1,0,0,0,12408,
        12410,3,1272,636,0,12409,12408,1,0,0,0,12409,12410,1,0,0,0,12410,
        1135,1,0,0,0,12411,12412,5,669,0,0,12412,12413,3,1140,570,0,12413,
        1137,1,0,0,0,12414,12415,5,669,0,0,12415,12416,3,1142,571,0,12416,
        1139,1,0,0,0,12417,12419,3,1162,581,0,12418,12417,1,0,0,0,12418,
        12419,1,0,0,0,12419,12420,1,0,0,0,12420,12421,3,1144,572,0,12421,
        1141,1,0,0,0,12422,12424,3,1162,581,0,12423,12422,1,0,0,0,12423,
        12424,1,0,0,0,12424,12426,1,0,0,0,12425,12427,3,1164,582,0,12426,
        12425,1,0,0,0,12426,12427,1,0,0,0,12427,12428,1,0,0,0,12428,12429,
        3,1144,572,0,12429,1143,1,0,0,0,12430,12435,3,1146,573,0,12431,12432,
        5,937,0,0,12432,12434,3,1146,573,0,12433,12431,1,0,0,0,12434,12437,
        1,0,0,0,12435,12433,1,0,0,0,12435,12436,1,0,0,0,12436,12439,1,0,
        0,0,12437,12435,1,0,0,0,12438,12440,5,937,0,0,12439,12438,1,0,0,
        0,12439,12440,1,0,0,0,12440,1145,1,0,0,0,12441,12443,3,1150,575,
        0,12442,12444,3,1156,578,0,12443,12442,1,0,0,0,12443,12444,1,0,0,
        0,12444,12454,1,0,0,0,12445,12447,3,1148,574,0,12446,12448,3,1154,
        577,0,12447,12446,1,0,0,0,12447,12448,1,0,0,0,12448,12454,1,0,0,
        0,12449,12451,3,1158,579,0,12450,12452,3,1156,578,0,12451,12450,
        1,0,0,0,12451,12452,1,0,0,0,12452,12454,1,0,0,0,12453,12441,1,0,
        0,0,12453,12445,1,0,0,0,12453,12449,1,0,0,0,12454,1147,1,0,0,0,12455,
        12457,3,1152,576,0,12456,12455,1,0,0,0,12456,12457,1,0,0,0,12457,
        12458,1,0,0,0,12458,12459,5,941,0,0,12459,1149,1,0,0,0,12460,12462,
        3,1152,576,0,12461,12460,1,0,0,0,12461,12462,1,0,0,0,12462,12463,
        1,0,0,0,12463,12470,3,1050,525,0,12464,12466,3,1152,576,0,12465,
        12464,1,0,0,0,12465,12466,1,0,0,0,12466,12467,1,0,0,0,12467,12468,
        5,930,0,0,12468,12470,3,1160,580,0,12469,12461,1,0,0,0,12469,12465,
        1,0,0,0,12470,1151,1,0,0,0,12471,12476,3,1056,528,0,12472,12473,
        3,1208,604,0,12473,12474,5,927,0,0,12474,12476,1,0,0,0,12475,12471,
        1,0,0,0,12475,12472,1,0,0,0,12476,1153,1,0,0,0,12477,12480,5,241,
        0,0,12478,12481,3,1050,525,0,12479,12481,3,446,223,0,12480,12478,
        1,0,0,0,12480,12479,1,0,0,0,12481,1155,1,0,0,0,12482,12484,5,45,
        0,0,12483,12482,1,0,0,0,12483,12484,1,0,0,0,12484,12485,1,0,0,0,
        12485,12486,3,1208,604,0,12486,1157,1,0,0,0,12487,12490,3,1066,533,
        0,12488,12490,3,1256,628,0,12489,12487,1,0,0,0,12489,12488,1,0,0,
        0,12490,1159,1,0,0,0,12491,12492,3,1060,530,0,12492,1161,1,0,0,0,
        12493,12494,7,107,0,0,12494,1163,1,0,0,0,12495,12496,5,788,0,0,12496,
        12497,3,1060,530,0,12497,1165,1,0,0,0,12498,12499,5,358,0,0,12499,
        12500,3,1168,584,0,12500,1167,1,0,0,0,12501,12506,3,1170,585,0,12502,
        12503,5,937,0,0,12503,12505,3,1170,585,0,12504,12502,1,0,0,0,12505,
        12508,1,0,0,0,12506,12504,1,0,0,0,12506,12507,1,0,0,0,12507,1169,
        1,0,0,0,12508,12506,1,0,0,0,12509,12510,5,939,0,0,12510,12511,3,
        1030,515,0,12511,1171,1,0,0,0,12512,12513,5,285,0,0,12513,12514,
        3,1174,587,0,12514,1173,1,0,0,0,12515,12520,3,1176,588,0,12516,12517,
        5,937,0,0,12517,12519,3,1176,588,0,12518,12516,1,0,0,0,12519,12522,
        1,0,0,0,12520,12518,1,0,0,0,12520,12521,1,0,0,0,12521,1175,1,0,0,
        0,12522,12520,1,0,0,0,12523,12524,3,1178,589,0,12524,1177,1,0,0,
        0,12525,12529,3,1180,590,0,12526,12528,3,1196,598,0,12527,12526,
        1,0,0,0,12528,12531,1,0,0,0,12529,12527,1,0,0,0,12529,12530,1,0,
        0,0,12530,12542,1,0,0,0,12531,12529,1,0,0,0,12532,12533,5,931,0,
        0,12533,12534,3,1178,589,0,12534,12538,5,932,0,0,12535,12537,3,1196,
        598,0,12536,12535,1,0,0,0,12537,12540,1,0,0,0,12538,12536,1,0,0,
        0,12538,12539,1,0,0,0,12539,12542,1,0,0,0,12540,12538,1,0,0,0,12541,
        12525,1,0,0,0,12541,12532,1,0,0,0,12542,1179,1,0,0,0,12543,12545,
        3,1056,528,0,12544,12546,3,1198,599,0,12545,12544,1,0,0,0,12545,
        12546,1,0,0,0,12546,12548,1,0,0,0,12547,12549,3,1202,601,0,12548,
        12547,1,0,0,0,12548,12549,1,0,0,0,12549,12551,1,0,0,0,12550,12552,
        3,1228,614,0,12551,12550,1,0,0,0,12551,12552,1,0,0,0,12552,12554,
        1,0,0,0,12553,12555,3,1230,615,0,12554,12553,1,0,0,0,12554,12555,
        1,0,0,0,12555,12557,1,0,0,0,12556,12558,3,1156,578,0,12557,12556,
        1,0,0,0,12557,12558,1,0,0,0,12558,12560,1,0,0,0,12559,12561,3,446,
        223,0,12560,12559,1,0,0,0,12560,12561,1,0,0,0,12561,12563,1,0,0,
        0,12562,12564,3,1246,623,0,12563,12562,1,0,0,0,12563,12564,1,0,0,
        0,12564,12615,1,0,0,0,12565,12566,3,1056,528,0,12566,12567,5,711,
        0,0,12567,12568,5,847,0,0,12568,12569,3,1256,628,0,12569,12570,5,
        145,0,0,12570,12572,5,99,0,0,12571,12573,3,1188,594,0,12572,12571,
        1,0,0,0,12572,12573,1,0,0,0,12573,12615,1,0,0,0,12574,12575,5,747,
        0,0,12575,12576,5,931,0,0,12576,12577,3,1096,548,0,12577,12579,5,
        932,0,0,12578,12580,3,1230,615,0,12579,12578,1,0,0,0,12579,12580,
        1,0,0,0,12580,12582,1,0,0,0,12581,12583,3,1156,578,0,12582,12581,
        1,0,0,0,12582,12583,1,0,0,0,12583,12585,1,0,0,0,12584,12586,3,1246,
        623,0,12585,12584,1,0,0,0,12585,12586,1,0,0,0,12586,12615,1,0,0,
        0,12587,12589,3,1236,618,0,12588,12590,3,1246,623,0,12589,12588,
        1,0,0,0,12589,12590,1,0,0,0,12590,12615,1,0,0,0,12591,12593,5,380,
        0,0,12592,12591,1,0,0,0,12592,12593,1,0,0,0,12593,12594,1,0,0,0,
        12594,12595,5,931,0,0,12595,12596,3,1254,627,0,12596,12598,5,932,
        0,0,12597,12599,3,1230,615,0,12598,12597,1,0,0,0,12598,12599,1,0,
        0,0,12599,12601,1,0,0,0,12600,12602,3,1156,578,0,12601,12600,1,0,
        0,0,12601,12602,1,0,0,0,12602,12604,1,0,0,0,12603,12605,3,446,223,
        0,12604,12603,1,0,0,0,12604,12605,1,0,0,0,12605,12615,1,0,0,0,12606,
        12609,5,380,0,0,12607,12610,3,1184,592,0,12608,12610,3,1186,593,
        0,12609,12607,1,0,0,0,12609,12608,1,0,0,0,12610,12612,1,0,0,0,12611,
        12613,3,1156,578,0,12612,12611,1,0,0,0,12612,12613,1,0,0,0,12613,
        12615,1,0,0,0,12614,12543,1,0,0,0,12614,12565,1,0,0,0,12614,12574,
        1,0,0,0,12614,12587,1,0,0,0,12614,12592,1,0,0,0,12614,12606,1,0,
        0,0,12615,1181,1,0,0,0,12616,12617,5,533,0,0,12617,12618,5,918,0,
        0,12618,12629,3,1024,512,0,12619,12620,5,505,0,0,12620,12621,5,918,
        0,0,12621,12629,3,556,278,0,12622,12623,5,578,0,0,12623,12624,5,
        918,0,0,12624,12629,3,556,278,0,12625,12626,5,427,0,0,12626,12627,
        5,918,0,0,12627,12629,7,108,0,0,12628,12616,1,0,0,0,12628,12619,
        1,0,0,0,12628,12622,1,0,0,0,12628,12625,1,0,0,0,12629,1183,1,0,0,
        0,12630,12631,5,277,0,0,12631,12634,5,931,0,0,12632,12633,5,350,
        0,0,12633,12635,5,918,0,0,12634,12632,1,0,0,0,12634,12635,1,0,0,
        0,12635,12636,1,0,0,0,12636,12641,3,1066,533,0,12637,12638,5,937,
        0,0,12638,12640,3,1182,591,0,12639,12637,1,0,0,0,12640,12643,1,0,
        0,0,12641,12639,1,0,0,0,12641,12642,1,0,0,0,12642,12644,1,0,0,0,
        12643,12641,1,0,0,0,12644,12645,5,932,0,0,12645,1185,1,0,0,0,12646,
        12647,5,703,0,0,12647,12648,5,931,0,0,12648,12649,3,1066,533,0,12649,
        12650,5,937,0,0,12650,12651,3,1066,533,0,12651,12652,5,932,0,0,12652,
        1187,1,0,0,0,12653,12658,3,1190,595,0,12654,12655,5,937,0,0,12655,
        12657,3,1190,595,0,12656,12654,1,0,0,0,12657,12660,1,0,0,0,12658,
        12656,1,0,0,0,12658,12659,1,0,0,0,12659,1189,1,0,0,0,12660,12658,
        1,0,0,0,12661,12663,5,552,0,0,12662,12661,1,0,0,0,12662,12663,1,
        0,0,0,12663,12664,1,0,0,0,12664,12665,3,1030,515,0,12665,12667,5,
        921,0,0,12666,12668,5,552,0,0,12667,12666,1,0,0,0,12667,12668,1,
        0,0,0,12668,12669,1,0,0,0,12669,12670,3,1030,515,0,12670,1191,1,
        0,0,0,12671,12673,7,109,0,0,12672,12674,5,505,0,0,12673,12672,1,
        0,0,0,12673,12674,1,0,0,0,12674,1193,1,0,0,0,12675,12678,5,349,0,
        0,12676,12678,3,1192,596,0,12677,12675,1,0,0,0,12677,12676,1,0,0,
        0,12678,1195,1,0,0,0,12679,12681,3,1194,597,0,12680,12679,1,0,0,
        0,12680,12681,1,0,0,0,12681,12682,1,0,0,0,12682,12683,5,365,0,0,
        12683,12695,3,1180,590,0,12684,12685,5,488,0,0,12685,12687,3,1248,
        624,0,12686,12684,1,0,0,0,12686,12687,1,0,0,0,12687,12696,1,0,0,
        0,12688,12689,5,825,0,0,12689,12690,5,931,0,0,12690,12691,3,1052,
        526,0,12691,12692,5,932,0,0,12692,12694,1,0,0,0,12693,12688,1,0,
        0,0,12693,12694,1,0,0,0,12694,12696,1,0,0,0,12695,12686,1,0,0,0,
        12695,12693,1,0,0,0,12696,12707,1,0,0,0,12697,12699,5,437,0,0,12698,
        12700,3,1192,596,0,12699,12698,1,0,0,0,12699,12700,1,0,0,0,12700,
        12701,1,0,0,0,12701,12702,5,365,0,0,12702,12707,3,1180,590,0,12703,
        12704,5,158,0,0,12704,12705,5,365,0,0,12705,12707,3,1180,590,0,12706,
        12680,1,0,0,0,12706,12697,1,0,0,0,12706,12703,1,0,0,0,12707,1197,
        1,0,0,0,12708,12709,5,48,0,0,12709,12722,5,931,0,0,12710,12711,5,
        766,0,0,12711,12712,5,918,0,0,12712,12723,3,1066,533,0,12713,12714,
        5,482,0,0,12714,12715,5,918,0,0,12715,12723,3,1066,533,0,12716,12717,
        5,716,0,0,12717,12718,5,918,0,0,12718,12723,3,1024,512,0,12719,12720,
        5,728,0,0,12720,12721,5,918,0,0,12721,12723,3,1024,512,0,12722,12710,
        1,0,0,0,12722,12713,1,0,0,0,12722,12716,1,0,0,0,12722,12719,1,0,
        0,0,12723,12724,1,0,0,0,12724,12725,5,932,0,0,12725,12734,1,0,0,
        0,12726,12727,5,83,0,0,12727,12728,5,931,0,0,12728,12729,5,716,0,
        0,12729,12730,5,918,0,0,12730,12731,3,1024,512,0,12731,12732,5,932,
        0,0,12732,12734,1,0,0,0,12733,12708,1,0,0,0,12733,12726,1,0,0,0,
        12734,1199,1,0,0,0,12735,12736,5,225,0,0,12736,12746,5,931,0,0,12737,
        12738,5,766,0,0,12738,12739,5,918,0,0,12739,12747,3,1066,533,0,12740,
        12741,5,482,0,0,12741,12742,5,918,0,0,12742,12747,3,1066,533,0,12743,
        12744,5,716,0,0,12744,12745,5,918,0,0,12745,12747,3,1024,512,0,12746,
        12737,1,0,0,0,12746,12740,1,0,0,0,12746,12743,1,0,0,0,12747,12748,
        1,0,0,0,12748,12749,5,932,0,0,12749,1201,1,0,0,0,12750,12751,5,110,
        0,0,12751,12752,5,931,0,0,12752,12753,5,344,0,0,12753,12754,5,918,
        0,0,12754,12755,3,1204,602,0,12755,12756,5,932,0,0,12756,12758,3,
        1198,599,0,12757,12759,3,1200,600,0,12758,12757,1,0,0,0,12758,12759,
        1,0,0,0,12759,1203,1,0,0,0,12760,12761,7,110,0,0,12761,1205,1,0,
        0,0,12762,12763,5,518,0,0,12763,12764,5,99,0,0,12764,12765,3,1062,
        531,0,12765,1207,1,0,0,0,12766,12767,3,1030,515,0,12767,1209,1,0,
        0,0,12768,12770,3,1066,533,0,12769,12771,5,45,0,0,12770,12769,1,
        0,0,0,12770,12771,1,0,0,0,12771,12772,1,0,0,0,12772,12782,3,1208,
        604,0,12773,12774,5,937,0,0,12774,12776,3,1066,533,0,12775,12777,
        5,45,0,0,12776,12775,1,0,0,0,12776,12777,1,0,0,0,12777,12778,1,0,
        0,0,12778,12779,3,1208,604,0,12779,12781,1,0,0,0,12780,12773,1,0,
        0,0,12781,12784,1,0,0,0,12782,12780,1,0,0,0,12782,12783,1,0,0,0,
        12783,1211,1,0,0,0,12784,12782,1,0,0,0,12785,12786,5,415,0,0,12786,
        12787,3,1210,605,0,12787,1213,1,0,0,0,12788,12789,5,681,0,0,12789,
        12790,5,214,0,0,12790,12798,5,406,0,0,12791,12792,5,487,0,0,12792,
        12793,5,214,0,0,12793,12798,5,406,0,0,12794,12795,5,847,0,0,12795,
        12796,5,807,0,0,12796,12798,5,627,0,0,12797,12788,1,0,0,0,12797,
        12791,1,0,0,0,12797,12794,1,0,0,0,12798,1215,1,0,0,0,12799,12800,
        5,489,0,0,12800,12801,5,626,0,0,12801,12802,5,535,0,0,12802,12808,
        5,404,0,0,12803,12804,5,17,0,0,12804,12805,5,627,0,0,12805,12806,
        5,535,0,0,12806,12808,5,404,0,0,12807,12799,1,0,0,0,12807,12803,
        1,0,0,0,12808,12810,1,0,0,0,12809,12811,3,1214,607,0,12810,12809,
        1,0,0,0,12810,12811,1,0,0,0,12811,1217,1,0,0,0,12812,12813,7,111,
        0,0,12813,1219,1,0,0,0,12814,12815,5,896,0,0,12815,1221,1,0,0,0,
        12816,12817,5,14,0,0,12817,12818,5,404,0,0,12818,12830,5,686,0,0,
        12819,12820,5,532,0,0,12820,12821,5,376,0,0,12821,12831,5,626,0,
        0,12822,12823,5,784,0,0,12823,12824,5,441,0,0,12824,12831,5,626,
        0,0,12825,12827,5,784,0,0,12826,12828,3,1218,609,0,12827,12826,1,
        0,0,0,12827,12828,1,0,0,0,12828,12829,1,0,0,0,12829,12831,3,1220,
        610,0,12830,12819,1,0,0,0,12830,12822,1,0,0,0,12830,12825,1,0,0,
        0,12831,1223,1,0,0,0,12832,12833,3,1220,610,0,12833,12834,5,45,0,
        0,12834,12842,3,1066,533,0,12835,12836,5,937,0,0,12836,12837,3,1220,
        610,0,12837,12838,5,45,0,0,12838,12839,3,1066,533,0,12839,12841,
        1,0,0,0,12840,12835,1,0,0,0,12841,12844,1,0,0,0,12842,12840,1,0,
        0,0,12842,12843,1,0,0,0,12843,1225,1,0,0,0,12844,12842,1,0,0,0,12845,
        12846,5,189,0,0,12846,12847,3,1224,612,0,12847,1227,1,0,0,0,12848,
        12849,5,408,0,0,12849,12851,5,931,0,0,12850,12852,3,1206,603,0,12851,
        12850,1,0,0,0,12851,12852,1,0,0,0,12852,12854,1,0,0,0,12853,12855,
        3,1272,636,0,12854,12853,1,0,0,0,12854,12855,1,0,0,0,12855,12857,
        1,0,0,0,12856,12858,3,1212,606,0,12857,12856,1,0,0,0,12857,12858,
        1,0,0,0,12858,12860,1,0,0,0,12859,12861,3,1216,608,0,12860,12859,
        1,0,0,0,12860,12861,1,0,0,0,12861,12863,1,0,0,0,12862,12864,3,1222,
        611,0,12863,12862,1,0,0,0,12863,12864,1,0,0,0,12864,12866,1,0,0,
        0,12865,12867,3,1048,524,0,12866,12865,1,0,0,0,12866,12867,1,0,0,
        0,12867,12869,1,0,0,0,12868,12870,3,1226,613,0,12869,12868,1,0,0,
        0,12869,12870,1,0,0,0,12870,12871,1,0,0,0,12871,12872,5,932,0,0,
        12872,1229,1,0,0,0,12873,12874,5,542,0,0,12874,12875,5,931,0,0,12875,
        12876,3,1030,515,0,12876,12877,5,931,0,0,12877,12878,3,1030,515,
        0,12878,12879,5,932,0,0,12879,12880,5,278,0,0,12880,12881,3,1030,
        515,0,12881,12882,5,340,0,0,12882,12883,5,931,0,0,12883,12888,3,
        1108,554,0,12884,12885,5,937,0,0,12885,12887,3,1108,554,0,12886,
        12884,1,0,0,0,12887,12890,1,0,0,0,12888,12886,1,0,0,0,12888,12889,
        1,0,0,0,12889,12891,1,0,0,0,12890,12888,1,0,0,0,12891,12892,5,932,
        0,0,12892,12897,5,932,0,0,12893,12895,3,1156,578,0,12894,12896,3,
        1232,616,0,12895,12894,1,0,0,0,12895,12896,1,0,0,0,12896,12898,1,
        0,0,0,12897,12893,1,0,0,0,12897,12898,1,0,0,0,12898,12911,1,0,0,
        0,12899,12900,5,808,0,0,12900,12901,5,931,0,0,12901,12902,3,1030,
        515,0,12902,12903,5,278,0,0,12903,12904,3,1050,525,0,12904,12905,
        5,340,0,0,12905,12906,5,931,0,0,12906,12907,3,1052,526,0,12907,12908,
        5,932,0,0,12908,12909,5,932,0,0,12909,12911,1,0,0,0,12910,12873,
        1,0,0,0,12910,12899,1,0,0,0,12911,1231,1,0,0,0,12912,12913,5,931,
        0,0,12913,12918,3,1030,515,0,12914,12915,5,937,0,0,12915,12917,3,
        1030,515,0,12916,12914,1,0,0,0,12917,12920,1,0,0,0,12918,12916,1,
        0,0,0,12918,12919,1,0,0,0,12919,12921,1,0,0,0,12920,12918,1,0,0,
        0,12921,12922,5,932,0,0,12922,1233,1,0,0,0,12923,12924,5,931,0,0,
        12924,12925,3,1062,531,0,12925,12926,5,932,0,0,12926,1235,1,0,0,
        0,12927,12928,5,931,0,0,12928,12929,3,1238,619,0,12929,12934,5,932,
        0,0,12930,12932,3,1156,578,0,12931,12933,3,1232,616,0,12932,12931,
        1,0,0,0,12932,12933,1,0,0,0,12933,12935,1,0,0,0,12934,12930,1,0,
        0,0,12934,12935,1,0,0,0,12935,12944,1,0,0,0,12936,12941,3,1238,619,
        0,12937,12939,3,1156,578,0,12938,12940,3,1232,616,0,12939,12938,
        1,0,0,0,12939,12940,1,0,0,0,12940,12942,1,0,0,0,12941,12937,1,0,
        0,0,12941,12942,1,0,0,0,12942,12944,1,0,0,0,12943,12927,1,0,0,0,
        12943,12936,1,0,0,0,12944,1237,1,0,0,0,12945,12946,5,830,0,0,12946,
        12951,3,1234,617,0,12947,12948,5,937,0,0,12948,12950,3,1234,617,
        0,12949,12947,1,0,0,0,12950,12953,1,0,0,0,12951,12949,1,0,0,0,12951,
        12952,1,0,0,0,12952,1239,1,0,0,0,12953,12951,1,0,0,0,12954,12957,
        7,112,0,0,12955,12957,7,113,0,0,12956,12954,1,0,0,0,12956,12955,
        1,0,0,0,12957,1241,1,0,0,0,12958,12959,7,114,0,0,12959,12960,5,931,
        0,0,12960,12961,3,1060,530,0,12961,12962,5,932,0,0,12962,1243,1,
        0,0,0,12963,12964,5,931,0,0,12964,12966,3,1060,530,0,12965,12967,
        5,627,0,0,12966,12965,1,0,0,0,12966,12967,1,0,0,0,12967,12968,1,
        0,0,0,12968,12970,5,932,0,0,12969,12971,3,1242,621,0,12970,12969,
        1,0,0,0,12970,12971,1,0,0,0,12971,1245,1,0,0,0,12972,12974,7,115,
        0,0,12973,12975,3,1240,620,0,12974,12973,1,0,0,0,12974,12975,1,0,
        0,0,12975,12976,1,0,0,0,12976,12977,3,1244,622,0,12977,1247,1,0,
        0,0,12978,12982,6,624,-1,0,12979,12981,5,448,0,0,12980,12979,1,0,
        0,0,12981,12984,1,0,0,0,12982,12980,1,0,0,0,12982,12983,1,0,0,0,
        12983,12990,1,0,0,0,12984,12982,1,0,0,0,12985,12991,3,1256,628,0,
        12986,12987,5,931,0,0,12987,12988,3,1248,624,0,12988,12989,5,932,
        0,0,12989,12991,1,0,0,0,12990,12985,1,0,0,0,12990,12986,1,0,0,0,
        12991,13000,1,0,0,0,12992,12993,10,2,0,0,12993,12994,5,29,0,0,12994,
        12999,3,1248,624,3,12995,12996,10,1,0,0,12996,12997,5,497,0,0,12997,
        12999,3,1248,624,2,12998,12992,1,0,0,0,12998,12995,1,0,0,0,12999,
        13002,1,0,0,0,13000,12998,1,0,0,0,13000,13001,1,0,0,0,13001,1249,
        1,0,0,0,13002,13000,1,0,0,0,13003,13004,7,116,0,0,13004,1251,1,0,
        0,0,13005,13007,5,448,0,0,13006,13005,1,0,0,0,13006,13007,1,0,0,
        0,13007,13008,1,0,0,0,13008,13009,5,458,0,0,13009,1253,1,0,0,0,13010,
        13011,3,1122,561,0,13011,1255,1,0,0,0,13012,13013,5,245,0,0,13013,
        13014,5,931,0,0,13014,13015,3,1254,627,0,13015,13016,5,932,0,0,13016,
        13088,1,0,0,0,13017,13018,3,1066,533,0,13018,13019,3,1250,625,0,
        13019,13020,7,117,0,0,13020,13021,5,931,0,0,13021,13022,3,1254,627,
        0,13022,13023,5,932,0,0,13023,13088,1,0,0,0,13024,13026,3,1066,533,
        0,13025,13027,5,448,0,0,13026,13025,1,0,0,0,13026,13027,1,0,0,0,
        13027,13028,1,0,0,0,13028,13029,5,86,0,0,13029,13030,3,1066,533,
        0,13030,13031,5,29,0,0,13031,13032,3,1066,533,0,13032,13088,1,0,
        0,0,13033,13035,3,1066,533,0,13034,13036,5,448,0,0,13035,13034,1,
        0,0,0,13035,13036,1,0,0,0,13036,13037,1,0,0,0,13037,13038,5,340,
        0,0,13038,13041,5,931,0,0,13039,13042,3,1254,627,0,13040,13042,3,
        1062,531,0,13041,13039,1,0,0,0,13041,13040,1,0,0,0,13042,13043,1,
        0,0,0,13043,13044,5,932,0,0,13044,13088,1,0,0,0,13045,13047,3,1066,
        533,0,13046,13048,5,448,0,0,13047,13046,1,0,0,0,13047,13048,1,0,
        0,0,13048,13049,1,0,0,0,13049,13050,7,90,0,0,13050,13053,3,1066,
        533,0,13051,13052,5,237,0,0,13052,13054,3,1066,533,0,13053,13051,
        1,0,0,0,13053,13054,1,0,0,0,13054,13088,1,0,0,0,13055,13057,3,1066,
        533,0,13056,13058,5,448,0,0,13057,13056,1,0,0,0,13057,13058,1,0,
        0,0,13058,13059,1,0,0,0,13059,13060,5,619,0,0,13060,13061,3,1066,
        533,0,13061,13088,1,0,0,0,13062,13064,3,1066,533,0,13063,13065,5,
        448,0,0,13064,13063,1,0,0,0,13064,13065,1,0,0,0,13065,13066,1,0,
        0,0,13066,13067,7,90,0,0,13067,13068,5,30,0,0,13068,13069,5,931,
        0,0,13069,13074,3,1066,533,0,13070,13071,5,937,0,0,13071,13073,3,
        1066,533,0,13072,13070,1,0,0,0,13073,13076,1,0,0,0,13074,13072,1,
        0,0,0,13074,13075,1,0,0,0,13075,13077,1,0,0,0,13076,13074,1,0,0,
        0,13077,13080,5,932,0,0,13078,13079,5,237,0,0,13079,13081,3,1066,
        533,0,13080,13078,1,0,0,0,13080,13081,1,0,0,0,13081,13088,1,0,0,
        0,13082,13083,3,1066,533,0,13083,13084,5,359,0,0,13084,13085,3,1252,
        626,0,13085,13088,1,0,0,0,13086,13088,3,1066,533,0,13087,13012,1,
        0,0,0,13087,13017,1,0,0,0,13087,13024,1,0,0,0,13087,13033,1,0,0,
        0,13087,13045,1,0,0,0,13087,13055,1,0,0,0,13087,13062,1,0,0,0,13087,
        13082,1,0,0,0,13087,13086,1,0,0,0,13088,1257,1,0,0,0,13089,13090,
        5,846,0,0,13090,13091,3,1248,624,0,13091,1259,1,0,0,0,13092,13096,
        3,1150,575,0,13093,13096,3,1060,530,0,13094,13096,3,1158,579,0,13095,
        13092,1,0,0,0,13095,13093,1,0,0,0,13095,13094,1,0,0,0,13096,1261,
        1,0,0,0,13097,13102,3,1260,630,0,13098,13099,5,937,0,0,13099,13101,
        3,1260,630,0,13100,13098,1,0,0,0,13101,13104,1,0,0,0,13102,13100,
        1,0,0,0,13102,13103,1,0,0,0,13103,1263,1,0,0,0,13104,13102,1,0,0,
        0,13105,13106,5,310,0,0,13106,13107,5,99,0,0,13107,13109,3,1262,
        631,0,13108,13110,3,1266,633,0,13109,13108,1,0,0,0,13109,13110,1,
        0,0,0,13110,13127,1,0,0,0,13111,13112,5,310,0,0,13112,13117,5,99,
        0,0,13113,13118,5,161,0,0,13114,13115,5,311,0,0,13115,13118,5,677,
        0,0,13116,13118,5,623,0,0,13117,13113,1,0,0,0,13117,13114,1,0,0,
        0,13117,13116,1,0,0,0,13118,13119,1,0,0,0,13119,13120,5,931,0,0,
        13120,13121,3,1262,631,0,13121,13122,5,932,0,0,13122,13127,1,0,0,
        0,13123,13124,5,310,0,0,13124,13125,5,99,0,0,13125,13127,5,17,0,
        0,13126,13105,1,0,0,0,13126,13111,1,0,0,0,13126,13123,1,0,0,0,13127,
        1265,1,0,0,0,13128,13129,5,318,0,0,13129,13130,3,1248,624,0,13130,
        1267,1,0,0,0,13131,13132,5,564,0,0,13132,13133,3,1066,533,0,13133,
        1269,1,0,0,0,13134,13138,3,1030,515,0,13135,13138,3,1060,530,0,13136,
        13138,3,1066,533,0,13137,13134,1,0,0,0,13137,13135,1,0,0,0,13137,
        13136,1,0,0,0,13138,13140,1,0,0,0,13139,13141,7,99,0,0,13140,13139,
        1,0,0,0,13140,13141,1,0,0,0,13141,13144,1,0,0,0,13142,13143,5,457,
        0,0,13143,13145,7,111,0,0,13144,13142,1,0,0,0,13144,13145,1,0,0,
        0,13145,1271,1,0,0,0,13146,13147,5,500,0,0,13147,13148,5,99,0,0,
        13148,13153,3,1270,635,0,13149,13150,5,937,0,0,13150,13152,3,1270,
        635,0,13151,13149,1,0,0,0,13152,13155,1,0,0,0,13153,13151,1,0,0,
        0,13153,13154,1,0,0,0,13154,1273,1,0,0,0,13155,13153,1,0,0,0,13156,
        13157,7,118,0,0,13157,1275,1,0,0,0,13158,13159,7,119,0,0,13159,1277,
        1,0,0,0,13160,13161,5,386,0,0,13161,13164,3,1060,530,0,13162,13163,
        5,482,0,0,13163,13165,3,1060,530,0,13164,13162,1,0,0,0,13164,13165,
        1,0,0,0,13165,13185,1,0,0,0,13166,13167,5,482,0,0,13167,13169,3,
        1060,530,0,13168,13166,1,0,0,0,13168,13169,1,0,0,0,13169,13171,1,
        0,0,0,13170,13172,3,1274,637,0,13171,13170,1,0,0,0,13171,13172,1,
        0,0,0,13172,13173,1,0,0,0,13173,13175,5,267,0,0,13174,13176,3,1276,
        638,0,13175,13174,1,0,0,0,13175,13176,1,0,0,0,13176,13177,1,0,0,
        0,13177,13179,3,1060,530,0,13178,13180,3,1274,637,0,13179,13178,
        1,0,0,0,13179,13180,1,0,0,0,13180,13182,1,0,0,0,13181,13183,5,490,
        0,0,13182,13181,1,0,0,0,13182,13183,1,0,0,0,13183,13185,1,0,0,0,
        13184,13160,1,0,0,0,13184,13168,1,0,0,0,13185,1279,1,0,0,0,13186,
        13187,7,120,0,0,13187,1281,1,0,0,0,13188,13189,5,624,0,0,13189,13190,
        5,931,0,0,13190,13191,5,248,0,0,13191,13192,5,918,0,0,13192,13193,
        3,1066,533,0,13193,13194,5,937,0,0,13194,13195,5,653,0,0,13195,13196,
        5,918,0,0,13196,13203,3,1066,533,0,13197,13198,5,937,0,0,13198,13199,
        5,625,0,0,13199,13200,5,918,0,0,13200,13202,3,1280,640,0,13201,13197,
        1,0,0,0,13202,13205,1,0,0,0,13203,13201,1,0,0,0,13203,13204,1,0,
        0,0,13204,13206,1,0,0,0,13205,13203,1,0,0,0,13206,13207,5,932,0,
        0,13207,13223,1,0,0,0,13208,13209,5,624,0,0,13209,13210,5,931,0,
        0,13210,13211,3,1066,533,0,13211,13212,5,937,0,0,13212,13217,3,1066,
        533,0,13213,13214,5,937,0,0,13214,13216,3,1280,640,0,13215,13213,
        1,0,0,0,13216,13219,1,0,0,0,13217,13215,1,0,0,0,13217,13218,1,0,
        0,0,13218,13220,1,0,0,0,13219,13217,1,0,0,0,13220,13221,5,932,0,
        0,13221,13223,1,0,0,0,13222,13188,1,0,0,0,13222,13208,1,0,0,0,13223,
        1283,1,0,0,0,1723,1285,1294,1298,1306,1312,1320,1324,1329,1333,1337,
        1343,1352,1356,1360,1364,1372,1375,1384,1392,1398,1409,1415,1421,
        1428,1432,1446,1450,1457,1467,1480,1485,1489,1493,1499,1501,1507,
        1513,1515,1519,1530,1557,1561,1565,1571,1573,1583,1586,1589,1592,
        1597,1603,1612,1622,1626,1629,1632,1637,1640,1652,1662,1676,1691,
        1695,1703,1711,1714,1717,1720,1725,1728,1732,1738,1745,1753,1757,
        1763,1770,1779,1784,1789,1798,1810,1814,1817,1832,1834,1844,1846,
        1854,1860,1862,1869,1871,1880,1886,1888,1898,1903,1905,1916,1918,
        1931,1933,1938,1940,1950,1952,1956,1962,1969,1985,2001,2014,2016,
        2023,2035,2042,2072,2077,2084,2097,2102,2120,2124,2140,2144,2152,
        2155,2160,2164,2169,2174,2182,2186,2188,2195,2200,2205,2210,2215,
        2221,2224,2230,2235,2237,2244,2246,2254,2260,2262,2272,2277,2279,
        2289,2291,2303,2308,2310,2320,2322,2326,2330,2346,2355,2357,2371,
        2375,2389,2400,2405,2414,2417,2430,2435,2480,2524,2551,2609,2704,
        2717,2725,2731,2743,2754,2760,2764,2771,2776,2781,2784,2792,2800,
        2803,2807,2815,2823,2827,2836,2839,2850,2860,2870,2877,2882,2885,
        2888,2903,2912,2926,2936,2960,2967,2976,2990,2993,2998,3003,3010,
        3016,3025,3027,3033,3040,3048,3053,3059,3068,3077,3084,3089,3096,
        3103,3108,3114,3127,3140,3147,3150,3156,3166,3181,3193,3200,3215,
        3223,3231,3238,3249,3256,3259,3265,3273,3279,3291,3306,3318,3330,
        3345,3357,3365,3371,3383,3388,3394,3405,3412,3416,3418,3451,3464,
        3491,3496,3501,3510,3521,3527,3529,3537,3547,3552,3558,3570,3581,
        3587,3607,3611,3614,3618,3627,3631,3636,3640,3644,3648,3653,3657,
        3661,3669,3677,3685,3690,3695,3698,3713,3724,3733,3740,3745,3747,
        3752,3757,3767,3772,3781,3786,3795,3800,3807,3813,3824,3831,3836,
        3842,3856,3862,3868,3880,3895,3907,3919,3934,3946,3954,3960,3972,
        3981,3990,3995,4013,4028,4033,4036,4044,4049,4051,4060,4063,4065,
        4070,4080,4089,4098,4106,4111,4118,4131,4143,4149,4154,4164,4174,
        4181,4186,4189,4192,4197,4205,4213,4222,4228,4235,4242,4252,4256,
        4260,4263,4266,4271,4276,4280,4285,4291,4296,4305,4310,4315,4320,
        4325,4330,4332,4341,4350,4356,4365,4371,4375,4384,4389,4394,4399,
        4408,4410,4415,4420,4429,4431,4436,4441,4449,4457,4465,4470,4475,
        4479,4483,4492,4497,4505,4511,4521,4525,4529,4536,4539,4544,4549,
        4558,4560,4565,4570,4579,4581,4586,4591,4599,4607,4615,4622,4630,
        4634,4643,4648,4656,4662,4668,4672,4679,4682,4687,4692,4697,4702,
        4707,4712,4717,4722,4727,4732,4737,4742,4747,4751,4755,4763,4771,
        4777,4781,4785,4792,4797,4800,4804,4808,4817,4822,4830,4836,4852,
        4855,4861,4868,4875,4881,4887,4898,4903,4905,4911,4918,4925,4931,
        4937,4948,4953,4955,4960,4971,4977,4982,4993,4999,5004,5015,5018,
        5021,5026,5039,5045,5049,5053,5058,5061,5069,5077,5080,5084,5088,
        5095,5103,5107,5113,5118,5123,5126,5131,5144,5150,5155,5165,5175,
        5181,5186,5194,5202,5207,5215,5220,5225,5230,5233,5236,5241,5249,
        5257,5267,5272,5277,5301,5308,5320,5324,5332,5336,5339,5346,5362,
        5372,5375,5391,5394,5409,5418,5423,5426,5429,5432,5444,5451,5455,
        5458,5465,5469,5473,5478,5488,5492,5495,5500,5509,5515,5519,5538,
        5543,5548,5552,5556,5558,5560,5564,5581,5584,5600,5604,5615,5618,
        5621,5626,5637,5640,5651,5654,5656,5662,5675,5694,5697,5718,5730,
        5733,5740,5744,5758,5765,5769,5772,5778,5781,5793,5801,5809,5819,
        5826,5829,5832,5835,5838,5841,5844,5849,5854,5857,5860,5863,5866,
        5869,5872,5877,5885,5893,5903,5910,5915,5923,5933,5942,5963,5971,
        5979,5993,6005,6025,6039,6053,6056,6063,6075,6088,6095,6114,6118,
        6133,6139,6146,6152,6180,6188,6207,6220,6227,6230,6240,6248,6251,
        6254,6265,6268,6273,6275,6278,6301,6311,6314,6318,6321,6324,6330,
        6345,6352,6368,6380,6430,6444,6449,6457,6465,6470,6473,6477,6481,
        6503,6509,6514,6526,6539,6545,6549,6554,6569,6582,6588,6613,6619,
        6621,6625,6629,6645,6649,6653,6661,6664,6670,6675,6679,6690,6692,
        6696,6699,6703,6707,6712,6717,6720,6723,6726,6741,6745,6761,6765,
        6771,6774,6779,6786,6791,6806,6812,6818,6828,6833,6843,6848,6852,
        6857,6861,6866,6869,6872,6875,6878,6881,6885,6888,6902,6905,6911,
        6923,6925,6928,6931,6944,6949,6959,6964,6969,6972,6977,6982,6989,
        6994,7001,7004,7007,7015,7020,7023,7029,7032,7035,7038,7041,7045,
        7050,7057,7060,7063,7073,7076,7079,7082,7086,7091,7098,7101,7104,
        7116,7119,7122,7125,7128,7130,7137,7140,7147,7158,7164,7174,7184,
        7187,7196,7199,7208,7211,7220,7226,7231,7237,7249,7255,7260,7266,
        7271,7275,7280,7288,7297,7301,7305,7308,7312,7321,7324,7336,7339,
        7342,7345,7349,7361,7364,7372,7378,7380,7388,7396,7401,7404,7411,
        7414,7424,7427,7439,7442,7445,7448,7460,7463,7466,7469,7474,7478,
        7483,7489,7502,7521,7525,7530,7541,7549,7561,7564,7569,7576,7581,
        7585,7588,7591,7594,7597,7604,7613,7620,7623,7626,7644,7672,7676,
        7681,7692,7696,7701,7715,7717,7721,7725,7731,7736,7741,7746,7749,
        7762,7769,7779,7782,7794,7797,7800,7803,7817,7820,7823,7826,7833,
        7836,7846,7849,7855,7869,7872,7875,7878,7885,7888,7898,7901,7907,
        7916,7919,7922,7935,7946,7949,7954,7960,7970,7980,7983,7992,7995,
        8004,8007,8016,8022,8027,8033,8045,8049,8056,8059,8065,8067,8072,
        8075,8081,8083,8087,8091,8095,8098,8102,8108,8118,8127,8131,8134,
        8138,8142,8147,8152,8157,8160,8163,8166,8170,8174,8232,8235,8239,
        8244,8266,8274,8283,8285,8293,8301,8306,8311,8319,8324,8329,8335,
        8340,8353,8358,8363,8368,8376,8379,8383,8388,8401,8406,8411,8416,
        8424,8432,8437,8442,8445,8450,8455,8458,8460,8464,8469,8490,8495,
        8500,8505,8510,8515,8520,8525,8530,8534,8539,8552,8557,8560,8570,
        8573,8579,8582,8588,8592,8596,8599,8602,8605,8608,8612,8617,8623,
        8631,8637,8642,8648,8656,8662,8667,8678,8684,8699,8705,8711,8721,
        8728,8739,8747,8767,8818,8827,8852,8878,8883,8885,8908,8923,8944,
        8949,8964,8979,8982,8986,8992,8996,8999,9005,9009,9012,9018,9022,
        9025,9027,9052,9060,9069,9072,9081,9084,9087,9096,9099,9102,9106,
        9110,9113,9117,9121,9124,9138,9141,9145,9153,9156,9159,9163,9166,
        9170,9175,9189,9192,9196,9204,9207,9210,9212,9217,9227,9235,9243,
        9248,9251,9259,9262,9264,9269,9280,9283,9294,9305,9313,9318,9326,
        9331,9352,9355,9386,9392,9396,9400,9403,9409,9412,9415,9418,9422,
        9426,9430,9433,9440,9443,9446,9450,9454,9458,9461,9467,9469,9474,
        9479,9482,9491,9497,9510,9518,9527,9534,9555,9558,9560,9570,9574,
        9580,9590,9593,9600,9602,9606,9609,9612,9616,9619,9622,9626,9633,
        9638,9645,9651,9654,9658,9663,9665,9668,9673,9675,9683,9686,9689,
        9692,9695,9703,9706,9709,9712,9715,9718,9721,9724,9728,9731,9735,
        9740,9742,9748,9751,9754,9757,9760,9763,9770,9773,9777,9783,9786,
        9790,9794,9798,9801,9813,9821,9826,9830,9836,9840,9843,9851,9854,
        9858,9870,9879,9881,9908,9914,9920,9924,9928,9931,9934,9942,9945,
        9948,9952,9959,9964,9968,9971,9974,9977,9984,9988,9992,9997,9999,
        10004,10016,10034,10055,10067,10069,10104,10143,10150,10159,10166,
        10170,10181,10185,10191,10199,10206,10215,10221,10225,10243,10251,
        10258,10265,10274,10286,10295,10302,10306,10311,10318,10322,10328,
        10336,10347,10354,10358,10363,10370,10377,10384,10391,10399,10407,
        10430,10442,10447,10515,10537,10544,10563,10598,10644,10726,10730,
        10734,10740,10744,10746,10748,10751,10754,10759,10765,10769,10773,
        10776,10778,10783,10789,10793,10797,10802,10805,10807,10812,10822,
        10826,10830,10833,10836,10839,10858,10866,10868,10873,10879,10881,
        10899,10905,10911,10914,10917,10919,10921,10924,10927,10931,10936,
        10942,10945,10948,10950,10952,10955,10958,10964,10968,10973,10979,
        10982,10985,10987,10989,10992,10995,11003,11009,11020,11022,11027,
        11038,11040,11046,11051,11059,11065,11069,11072,11074,11080,11085,
        11093,11098,11112,11127,11135,11139,11143,11149,11155,11161,11164,
        11175,11181,11185,11190,11196,11199,11208,11211,11217,11224,11231,
        11235,11239,11241,11246,11249,11253,11258,11263,11266,11271,11277,
        11283,11291,11299,11305,11310,11317,11320,11324,11328,11331,11337,
        11339,11341,11344,11347,11352,11357,11361,11369,11371,11376,11379,
        11392,11411,11414,11419,11422,11427,11438,11442,11446,11452,11455,
        11458,11460,11462,11465,11468,11474,11480,11483,11487,11491,11496,
        11500,11504,11509,11514,11521,11525,11529,11535,11538,11541,11543,
        11545,11548,11551,11556,11568,11582,11589,11611,11620,11635,11657,
        11664,11671,11682,11691,11697,11703,11707,11721,11729,11738,11743,
        11748,11752,11768,11779,11802,11815,11830,11836,11842,11848,11852,
        11862,11868,11870,11872,11891,11912,11920,11927,11941,11948,11960,
        11964,11971,11975,11979,11983,11987,11991,11995,11999,12003,12010,
        12019,12034,12046,12058,12068,12089,12108,12137,12144,12172,12176,
        12185,12189,12194,12207,12212,12221,12223,12227,12231,12237,12242,
        12246,12250,12255,12259,12264,12269,12279,12286,12290,12298,12302,
        12306,12319,12325,12330,12337,12345,12353,12358,12362,12367,12371,
        12380,12386,12390,12393,12396,12400,12403,12406,12409,12418,12423,
        12426,12435,12439,12443,12447,12451,12453,12456,12461,12465,12469,
        12475,12480,12483,12489,12506,12520,12529,12538,12541,12545,12548,
        12551,12554,12557,12560,12563,12572,12579,12582,12585,12589,12592,
        12598,12601,12604,12609,12612,12614,12628,12634,12641,12658,12662,
        12667,12673,12677,12680,12686,12693,12695,12699,12706,12722,12733,
        12746,12758,12770,12776,12782,12797,12807,12810,12827,12830,12842,
        12851,12854,12857,12860,12863,12866,12869,12888,12895,12897,12910,
        12918,12932,12934,12939,12941,12943,12951,12956,12966,12970,12974,
        12982,12990,12998,13000,13006,13026,13035,13041,13047,13053,13057,
        13064,13074,13080,13087,13095,13102,13109,13117,13126,13137,13140,
        13144,13153,13164,13168,13171,13175,13179,13182,13184,13203,13217,
        13222
    ]

class SnowflakeParser ( Parser ):

    grammarFileName = "SnowflakeParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "''AAD_PROVISIONER''", "'ABORT'", "'ABORT_DETACHED_QUERY'", 
                     "'ABORT_STATEMENT'", "'ACCESS'", "'ACCOUNT'", "'ACCOUNTADMIN'", 
                     "'ACCOUNTS'", "'ACTION'", "'ADD'", "'ADMIN_NAME'", 
                     "'ADMIN_PASSWORD'", "'AES'", "'AFTER'", "'ALERT'", 
                     "'ALERTS'", "'ALL'", "'ALLOWED_ACCOUNTS'", "'ALLOWED_DATABASES'", 
                     "'ALLOWED_INTEGRATION_TYPES'", "'ALLOWED_IP_LIST'", 
                     "'ALLOWED_SHARES'", "'ALLOWED_VALUES'", "'ALLOW_CLIENT_MFA_CACHING'", 
                     "'ALLOW_DUPLICATE'", "'ALLOW_ID_TOKEN'", "'ALLOW_OVERLAPPING_EXECUTION'", 
                     "'ALTER'", "'AND'", "'ANY'", "'ANY_VALUE'", "'API'", 
                     "'API_ALLOWED_PREFIXES'", "'API_AUTHENTICATION'", "'API_AWS_ROLE_ARN'", 
                     "'API_BLOCKED_PREFIXES'", "'API_INTEGRATION'", "'API_KEY'", 
                     "'API_PROVIDER'", "'APPEND'", "'APPEND_ONLY'", "'APPLICATION'", 
                     "'APPLY'", "'ARRAY_AGG'", "'AS'", "'ASC'", "'ATTACH'", 
                     "'AT'", "'AUTHORIZATION'", "'AUTHORIZATIONS'", "'AUTO'", 
                     "''AUTO''", "'AUTOCOMMIT'", "'AUTOCOMMIT_API_SUPPORTED'", 
                     "'AUTOINCREMENT'", "'AUTO_COMPRESS'", "'AUTO_DETECT'", 
                     "'AUTO_INGEST'", "'AUTO_REFRESH'", "'AUTO_RESUME'", 
                     "'AUTO_SUSPEND'", "'AVG'", "'AVRO'", "''AVRO''", "'AWS_KEY_ID'", 
                     "'AWS_ROLE'", "'AWS_SECRET_KEY'", "'AWS_SNS'", "'AWS_SNS_ROLE_ARN'", 
                     "'AWS_SNS_TOPIC'", "'AWS_SNS_TOPIC_ARN'", "'AWS_TOKEN'", 
                     "'AZURE'", "'AZURE_AD_APPLICATION_ID'", "''AZURE_CSE''", 
                     "'AZURE_EVENT_GRID'", "'AZURE_EVENT_GRID_TOPIC_ENDPOINT'", 
                     "''AZURE''", "'AZURE_SAS_TOKEN'", "'AZURE_STORAGE_QUEUE_PRIMARY_URI'", 
                     "'AZURE_TENANT_ID'", "'BASE64'", "'BEFORE'", "'BEGIN'", 
                     "'BERNOULLI'", "'BETWEEN'", "'BINARY_AS_TEXT'", "'BINARY_FORMAT'", 
                     "'BINARY_INPUT_FORMAT'", "'BINARY_OUTPUT_FORMAT'", 
                     "'BLOCK'", "'BLOCKED_IP_LIST'", "'BLOCKED_ROLES_LIST'", 
                     "'BODY'", "''BOTH''", "'BRANCHES'", "'BROTLI'", "'BUSINESS_CRITICAL'", 
                     "'BY'", "'BZ2'", "'CALL'", "'CALLED'", "'CALLER'", 
                     "'CASCADE'", "'CASE'", "'CASE_INSENSITIVE'", "'CASE_SENSITIVE'", 
                     "'CAST'", "'CEIL'", "'CHANGES'", "'CHANGE_TRACKING'", 
                     "'CHANNELS'", "'CHAR'", "'CHARACTER'", "'CHARINDEX'", 
                     "'CHECK'", "'CHECKSUM'", "'CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS'", 
                     "'CLIENT_ENCRYPTION_KEY_SIZE'", "'CLIENT_MEMORY_LIMIT'", 
                     "'CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX'", "'CLIENT_METADATA_USE_SESSION_DATABASE'", 
                     "'CLIENT_PREFETCH_THREADS'", "'CLIENT_RESULT_CHUNK_SIZE'", 
                     "'CLIENT_RESULT_COLUMN_CASE_INSENSITIVE'", "'CLIENT_SESSION_KEEP_ALIVE'", 
                     "'CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY'", 
                     "'CLIENT_TIMESTAMP_TYPE_MAPPING'", "'CLONE'", "'CLOUD_PROVIDER_TOKEN'", 
                     "'CLUSTER'", "'CLUSTERING'", "'COALESCE'", "'COLLATE'", 
                     "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
                     "'COMMIT'", "'COMPRESSION'", "'CONCAT'", "'CONCAT_WS'", 
                     "'CONDITION'", "'CONFIGURATION'", "'CONNECT'", "'CONNECTION'", 
                     "'CONNECTIONS'", "'CONSTRAINT'", "'CONTAINS'", "'CONTEXT_HEADERS'", 
                     "'CONTINUE'", "'COPY'", "'COPY_OPTIONS'", "'COUNT'", 
                     "'CREATE'", "'CREDENTIALS'", "'CREDIT_QUOTA'", "'CROSS'", 
                     "'CSV'", "''CSV''", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CUSTOM'", 
                     "'DAILY'", "'DATA'", "'DATABASE'", "'DATABASES'", "'DATASET'", 
                     "'DATASETS'", "'DATA_RETENTION_TIME_IN_DAYS'", "'DATEADD'", 
                     "'DATEDIFF'", "'DATE_FORMAT'", "'DATE_INPUT_FORMAT'", 
                     "'DATE_OUTPUT_FORMAT'", "'DATE_PART'", "'DAYS'", "'DAYS_TO_EXPIRY'", 
                     "'DEFAULT'", "'DEFAULT_DDL_COLLATION'", "'DEFAULT_NAMESPACE'", 
                     "'DEFAULT_ROLE'", "'DEFAULT_WAREHOUSE'", "'DEFERRABLE'", 
                     "'DEFERRED'", "'DEFINE'", "'DEFINITION'", "'DEFLATE'", 
                     "'DELEGATED'", "'DELETE'", "'DELTA'", "'DENSE_RANK'", 
                     "'DESC'", "'DESCRIBE'", "'DIRECTION'", "'DIRECTORY'", 
                     "'DISABLE'", "'DISABLED'", "'DISABLE_AUTO_CONVERT'", 
                     "'DISABLE_SNOWFLAKE_DATA'", "'DISPLAY_NAME'", "'DISTINCT'", 
                     "'DO'", "'DOWNSTREAM'", "'DROP'", "'DYNAMIC'", "'ECONOMY'", 
                     "'EDITION'", "'ELSE'", "'EMAIL'", "'EMPTY'", "'EMPTY_FIELD_AS_NULL'", 
                     "'ENABLE'", "'ENABLED'", "'ENABLE_FOR_PRIVILEGE'", 
                     "'ENABLE_INTERNAL_STAGES_PRIVATELINK'", "'ENABLE_OCTAL'", 
                     "'ENABLE_QUERY_ACCELERATION'", "'ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION'", 
                     "'ENCODING'", "'ENCRYPTION'", "'END'", "'END_TIMESTAMP'", 
                     "'ENFORCED'", "'ENFORCE_LENGTH'", "'ENFORCE_SESSION_POLICY'", 
                     "'ENTERPRISE'", "'EQUAL_NULL'", "'EQUALITY'", "'ERROR_INTEGRATION'", 
                     "'ERROR_ON_COLUMN_COUNT_MISMATCH'", "'ERROR_ON_NONDETERMINISTIC_MERGE'", 
                     "'ERROR_ON_NONDETERMINISTIC_UPDATE'", "'ESCAPE'", "'ESCAPE_UNENCLOSED_FIELD'", 
                     "'EVENT'", "'EXCEPT'", "'EXCLUDE'", "'EXCHANGE'", "<INVALID>", 
                     "'EXECUTION'", "'EXISTS'", "'EXPIRY_DATE'", "'EXPLAIN'", 
                     "'EXPR'", "'EXTERNAL'", "'EXTERNAL_OAUTH'", "'EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST'", 
                     "'EXTERNAL_OAUTH_ALLOWED_ROLES_LIST'", "'EXTERNAL_OAUTH_ANY_ROLE_MODE'", 
                     "'EXTERNAL_OAUTH_AUDIENCE_LIST'", "'EXTERNAL_OAUTH_BLOCKED_ROLES_LIST'", 
                     "'EXTERNAL_OAUTH_ISSUER'", "'EXTERNAL_OAUTH_JWS_KEYS_URL'", 
                     "'EXTERNAL_OAUTH_RSA_PUBLIC_KEY'", "'EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2'", 
                     "'EXTERNAL_OAUTH_SCOPE_DELIMITER'", "'EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE'", 
                     "'EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM'", "'EXTERNAL_OAUTH_TYPE'", 
                     "'EXTERNAL_STAGE'", "'FAILOVER'", "'FALSE'", "'FETCH'", 
                     "'FIELD_DELIMITER'", "'FIELD_OPTIONALLY_ENCLOSED_BY'", 
                     "'FILE'", "'FILES'", "'FILE_EXTENSION'", "'FILE_FORMAT'", 
                     "'FIRST'", "'FIRST_NAME'", "'FIRST_VALUE'", "'FLATTEN'", 
                     "'FOR'", "'FORCE'", "'FOREIGN'", "'FORMAT'", "'FORMATS'", 
                     "'FORMAT_NAME'", "'FREQUENCY'", "'FROM'", "'FULL'", 
                     "'FUNCTION'", "'FUNCTIONS'", "'FUTURE'", "'GCP_PUBSUB'", 
                     "'GCP_PUBSUB_SUBSCRIPTION_NAME'", "'GCP_PUBSUB_TOPIC_NAME'", 
                     "'GCS'", "''GCS_SSE_KMS''", "'GENERIC'", "''GENERIC''", 
                     "''GENERIC_SCIM_PROVISIONER''", "'GENERIC_STRING'", 
                     "'GEO'", "'GEOGRAPHY_OUTPUT_FORMAT'", "'GEOMETRY_OUTPUT_FORMAT'", 
                     "'GET'", "'GETDATE'", "'GIT'", "'GIT_CREDENTIALS'", 
                     "'GLOBAL'", "'GOOGLE_AUDIENCE'", "'GRANT'", "'GRANTS'", 
                     "'GROUP'", "'GROUPING'", "'GROUPS'", "'GZIP'", "''HALF_AWAY_FROM_ZERO''", 
                     "''HALF_TO_EVEN''", "'HANDLER'", "'HASH'", "'HAVING'", 
                     "'HEADER'", "'HEADERS'", "'HEX'", "'HIGH'", "'HISTORY'", 
                     "'HOURS'", "'IDENTIFIER'", "'IDENTITY'", "'IF'", "'IFF'", 
                     "'IFNULL'", "'IGNORE'", "'IGNORE_UTF8_ERRORS'", "'ILIKE'", 
                     "'IMMEDIATE'", "'IMMEDIATELY'", "'IMMUTABLE'", "'IMPLICIT'", 
                     "'IMPORT'", "'IMPORTS'", "'IMPORTED'", "'IN'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDEX'", "'INFORMATION'", "'INITIALIZE'", 
                     "'INITIALLY'", "'INITIALLY_SUSPENDED'", "'INITIAL_REPLICATION_SIZE_LIMIT_IN_TB'", 
                     "'INNER'", "'INPUT'", "'INSERT'", "'INSERT_ONLY'", 
                     "'INT'", "'INTEGRATION'", "'INTEGRATIONS'", "'INTERSECT'", 
                     "'INTERVAL'", "'INTO'", "'IS'", "'JAVA'", "'JAVASCRIPT'", 
                     "'JDBC_TREAT_DECIMAL_AS_INT'", "'JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC'", 
                     "'JDBC_USE_SESSION_TIMEZONE'", "'JOIN'", "'JSON'", 
                     "''JSON''", "'JSON_INDENT'", "'JS_TREAT_INTEGER_AS_BIGINT'", 
                     "'KEY'", "'KEYS'", "'KMS_KEY_ID'", "'LAG'", "'LANGUAGE'", 
                     "'LARGE'", "'LAST'", "'LAST_NAME'", "'LAST_QUERY_ID'", 
                     "'LAST_VALUE'", "'LATERAL'", "'LEAD'", "'LEFT'", "'LEN'", 
                     "'LENGTH'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LIST'", 
                     "'LISTING'", "'LOCAL'", "'LOCATION'", "'LOCKS'", "'LOCK_TIMEOUT'", 
                     "'LOGIN_NAME'", "'LOOKER'", "'LOW'", "'LOWER'", "'LTRIM'", 
                     "'LZO'", "'MANAGE'", "'MANAGED'", "'MASKING'", "'MASTER_KEY'", 
                     "'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_BY_COLUMN_NAME'", 
                     "'MATCH_RECOGNIZE'", "'MATERIALIZED'", "'MAX_BATCH_ROWS'", 
                     "'MAX_CLUSTER_COUNT'", "'MAX_CONCURRENCY_LEVEL'", "'MAX_DATA_EXTENSION_TIME_IN_DAYS'", 
                     "'MAX_SIZE'", "'MEASURES'", "'MEDIUM'", "'MEMOIZABLE'", 
                     "'MERGE'", "'METADATA'", "'MIDDLE_NAME'", "'MIN'", 
                     "'MINS_TO_BYPASS_MFA'", "'MINS_TO_UNLOCK'", "'MINUS'", 
                     "'MIN_CLUSTER_COUNT'", "'MIN_DATA_RETENTION_TIME_IN_DAYS'", 
                     "'MODE'", "'MODIFIED_AFTER'", "'MODIFY'", "'MONITOR'", 
                     "'MONITORS'", "'MONTHLY'", "'MOVE'", "'MULTI_STATEMENT_COUNT'", 
                     "'MUST_CHANGE_PASSWORD'", "'NAME'", "'NATURAL'", "'NETWORK'", 
                     "'NETWORK_POLICY'", "'NEVER'", "'NEXT'", "'NEXTVAL'", 
                     "'NO'", "'NONE'", "''NONE''", "'NOORDER'", "'NORELY'", 
                     "'NOT'", "'NOTIFICATION'", "'NOTIFICATION_INTEGRATION'", 
                     "'NOTIFICATION_PROVIDER'", "'NOTIFY'", "'NOTIFY_USERS'", 
                     "'NOVALIDATE'", "'NTILE'", "'NULLIF'", "'NULLS'", "'NULL'", 
                     "'NULL_IF'", "'NUMBER'", "'NVL'", "'NVL2'", "'OAUTH'", 
                     "'OAUTH2'", "'OAUTH_ALLOW_NON_TLS_REDIRECT_URI'", "'OAUTH_CLIENT'", 
                     "'OAUTH_CLIENT_RSA_PUBLIC_KEY'", "'OAUTH_CLIENT_RSA_PUBLIC_KEY_2'", 
                     "'OAUTH_ENFORCE_PKCE'", "'OAUTH_ISSUE_REFRESH_TOKENS'", 
                     "'OAUTH_REDIRECT_URI'", "'OAUTH_REFRESH_TOKEN'", "'OAUTH_REFRESH_TOKEN_EXPIRY_TIME'", 
                     "'OAUTH_REFRESH_TOKEN_VALIDITY'", "'OAUTH_SCOPES'", 
                     "'OAUTH_USE_SECONDARY_ROLES'", "'OBJECT'", "''OBJECT''", 
                     "'OBJECTS'", "'OBJECT_TYPES'", "'OF'", "'OFFSET'", 
                     "'OKTA'", "''OKTA_PROVISIONER''", "''OKTA''", "'OLD'", 
                     "'OMIT'", "'ON'", "'ONE'", "'ONLY'", "'ON_CREATE'", 
                     "'ON_ERROR'", "'ON_SCHEDULE'", "'OPERATE'", "'OPTIMIZATION'", 
                     "'OPTION'", "'OR'", "'ORC'", "''ORC''", "'ORDER'", 
                     "'ORGADMIN'", "'ORGANIZATION'", "'ORIGIN'", "'OUTBOUND'", 
                     "'OUTER'", "'OVER'", "'OVERRIDE'", "'OVERWRITE'", "'OWNER'", 
                     "'OWNERSHIP'", "'PACKAGE'", "'PACKAGES'", "'PARALLEL'", 
                     "'PARAMETERS'", "'PARQUET'", "''PARQUET''", "'PARTIAL'", 
                     "'PARTITION'", "'PARTITION_TYPE'", "'PASSWORD'", "'PASSWORD_HISTORY'", 
                     "'PASSWORD_LOCKOUT_TIME_MINS'", "'PASSWORD_MAX_AGE_DAYS'", 
                     "'PASSWORD_MAX_LENGTH'", "'PASSWORD_MAX_RETRIES'", 
                     "'PASSWORD_MIN_AGE_DAYS'", "'PASSWORD_MIN_LENGTH'", 
                     "'PASSWORD_MIN_LOWER_CASE_CHARS'", "'PASSWORD_MIN_NUMERIC_CHARS'", 
                     "'PASSWORD_MIN_SPECIAL_CHARS'", "'PASSWORD_MIN_UPPER_CASE_CHARS'", 
                     "'PAST'", "'PATH'", "'PATTERN'", "'PER'", "'PERCENT'", 
                     "'PERIODIC_DATA_REKEYING'", "'PING_FEDERATE'", "'PIPE'", 
                     "'PIPES'", "'PIPE_EXECUTION_PAUSED'", "'PIVOT'", "'POLICIES'", 
                     "'POLICY'", "'PORT'", "'PREFIX'", "'PRESERVE_SPACE'", 
                     "'PREVENT_UNLOAD_TO_INLINE_URL'", "'PREVENT_UNLOAD_TO_INTERNAL_STAGES'", 
                     "'PRE_AUTHORIZED_ROLES_LIST'", "'PRIMARY'", "'PRIOR'", 
                     "'PRIORITY'", "'PRIVILEGES'", "'PROCEDURE'", "'PROCEDURES'", 
                     "'PROCEDURE_NAME'", "'PROPERTY'", "'PROVIDER'", "'PUBLIC'", 
                     "'PURGE'", "'PUT'", "'PYTHON'", "'QUALIFY'", "'QUARTER'", 
                     "'QUERIES'", "'QUERY'", "'QUERY_ACCELERATION_MAX_SCALE_FACTOR'", 
                     "'QUERY_TAG'", "'QUEUE'", "'QUOTED_IDENTIFIERS_IGNORE_CASE'", 
                     "'RANK'", "'RAW_DEFLATE'", "'READ'", "'READER'", "'RECLUSTER'", 
                     "'RECORD_DELIMITER'", "'RECURSIVE'", "'REFERENCES'", 
                     "'REFERENCE_USAGE'", "'REFRESH'", "'REFRESH_MODE'", 
                     "'REFRESH_ON_CREATE'", "'REGION'", "'REGIONS'", "'REGION_GROUP'", 
                     "'RELY'", "'REMOVE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", 
                     "'REPLACE_INVALID_CHARACTERS'", "'REPLICA'", "'REPLICATION'", 
                     "'REPLICATION_SCHEDULE'", "'REPOSITORY'", "'REPOSITORIES'", 
                     "'REQUEST_TRANSLATOR'", "'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION'", 
                     "'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION'", 
                     "'RESET'", "'RESOURCE'", "'RESOURCES'", "'RESOURCE_MONITOR'", 
                     "'RESPECT'", "'RESPONSE_TRANSLATOR'", "'RESTRICT'", 
                     "'RESTRICTIONS'", "'RESULT'", "'RESUME'", "'RETURNS'", 
                     "'RETURN_ALL_ERRORS'", "'RETURN_ERRORS'", "'RETURN_FAILED_ONLY'", 
                     "<INVALID>", "'RETURN_ROWS'", "'REVOKE'", "'RIGHT'", 
                     "'RLIKE'", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", 
                     "'ROUND'", "'ROUNDING_MODE'", "'ROW'", "'ROWS'", "'ROWS_PER_RESULTSET'", 
                     "'ROW_NUMBER'", "'RSA_PUBLIC_KEY'", "'RSA_PUBLIC_KEY_2'", 
                     "'RTRIM'", "'RUN_AS_ROLE'", "'RUNTIME_VERSION'", "''S3''", 
                     "'SAML2'", "'SAML2_ENABLE_SP_INITIATED'", "'SAML2_FORCE_AUTHN'", 
                     "'SAML2_ISSUER'", "'SAML2_POST_LOGOUT_REDIRECT_URL'", 
                     "'SAML2_PROVIDER'", "'SAML2_REQUESTED_NAMEID_FORMAT'", 
                     "'SAML2_SIGN_REQUEST'", "'SAML2_SNOWFLAKE_ACS_URL'", 
                     "'SAML2_SNOWFLAKE_ISSUER_URL'", "'SAML2_SNOWFLAKE_X509_CERT'", 
                     "'SAML2_SP_INITIATED_LOGIN_PAGE_LABEL'", "'SAML2_SSO_URL'", 
                     "'SAML2_X509_CERT'", "'SAML_IDENTITY_PROVIDER'", "'SAMPLE'", 
                     "'SAVE_OLD_URL'", "'SCALE'", "'SCALING_POLICY'", "'SCHEDULE'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SCIM'", "'SCIM_CLIENT'", 
                     "'SEARCH'", "'SECONDARY'", "'SECRET'", "'SECRETS'", 
                     "'SECRET_STRING'", "'SECURE'", "'SECURITY'", "'SECURITYADMIN'", 
                     "'SEED'", "'SELECT'", "'SEQUENCE'", "'SEQUENCES'", 
                     "'SESSION'", "'SESSION_IDLE_TIMEOUT_MINS'", "'SESSION_POLICY'", 
                     "'SESSION_UI_IDLE_TIMEOUT_MINS'", "'SET'", "'SETS'", 
                     "'SHARE'", "'SHARES'", "'SHARE_RESTRICTIONS'", "'SHOW'", 
                     "'SHOW_INITIAL_ROWS'", "'SIMPLE'", "'SIMULATED_DATA_SHARING_CONSUMER'", 
                     "'SIZE_LIMIT'", "'SKIP'", "'SKIP_BLANK_LINES'", "'SKIP_BYTE_ORDER_MARK'", 
                     "'SKIP_FILE'", "<INVALID>", "'SKIP_HEADER'", "'SMALL'", 
                     "'SNAPPY'", "'SNAPPY_COMPRESSION'", "'SNOWFLAKE_FULL'", 
                     "'SNOWFLAKE_SSE'", "''SNOWPARK-OPTIMIZED''", "'SOME'", 
                     "'SOURCE'", "'SOURCE_COMPRESSION'", "'SPLIT'", "'SPLIT_PART'", 
                     "'SPLIT_TO_TABLE'", "'SQL'", "'SSO_LOGIN_PAGE'", "'STAGE'", 
                     "'STAGES'", "'STAGE_COPY_OPTIONS'", "'STAGE_FILE_FORMAT'", 
                     "'STANDARD'", "'START'", "'STARTS'", "'START_DATE'", 
                     "'START_TIMESTAMP'", "'STATE'", "'STATEMENT'", "'STATEMENT_QUEUED_TIMEOUT_IN_SECONDS'", 
                     "'STATEMENT_TIMEOUT_IN_SECONDS'", "'STATS'", "'STATUS'", 
                     "'STORAGE'", "'STORAGE_ALLOWED_LOCATIONS'", "'STORAGE_AWS_OBJECT_ACL'", 
                     "'STORAGE_AWS_ROLE_ARN'", "'STORAGE_BLOCKED_LOCATIONS'", 
                     "'STORAGE_INTEGRATION'", "'STORAGE_PROVIDER'", "'STREAM'", 
                     "'STREAMS'", "'STRICT'", "'STRICT_JSON_OUTPUT'", "'STRIP_NULL_VALUES'", 
                     "'STRIP_OUTER_ARRAY'", "'STRIP_OUTER_ELEMENT'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SUM'", "'SUSPEND'", "'SUSPENDED'", 
                     "'SUSPEND_IMMEDIATE'", "'SUSPEND_TASK_AFTER_NUM_FAILURES'", 
                     "'SWAP'", "'SYMMETRIC_KEY'", "'SYNC_PASSWORD'", "'SYSADMIN'", 
                     "'SYSTEM'", "'TABLE'", "'TABLEAU_DESKTOP'", "'TABLEAU_SERVER'", 
                     "'TABLES'", "'TABLESAMPLE'", "'TABLE_FORMAT'", "'TABULAR'", 
                     "'TAG'", "'TAGS'", "'TARGET_LAG'", "'TASK'", "'TASKS'", 
                     "'TEMP'", "'TEMPORARY'", "'TERSE'", "'THEN'", "'TIME'", 
                     "'TIMEADD'", "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_DAY_IS_ALWAYS_24H'", 
                     "'TIMESTAMP_FORMAT'", "'TIMESTAMP_INPUT_FORMAT'", "<INVALID>", 
                     "'TIMESTAMP_LTZ_OUTPUT_FORMAT'", "<INVALID>", "'TIMESTAMP_NTZ_OUTPUT_FORMAT'", 
                     "'TIMESTAMP_OUTPUT_FORMAT'", "'TIMESTAMP_TYPE_MAPPING'", 
                     "<INVALID>", "'TIMESTAMP_TZ_OUTPUT_FORMAT'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TIMEZONE'", "'TIME_FORMAT'", "'TIME_INPUT_FORMAT'", 
                     "'TIME_OUTPUT_FORMAT'", "'TO'", "'TO_BOOLEAN'", "'TO_DATE'", 
                     "'TO_TIMESTAMP'", "'TOP'", "'TRANSACTION'", "'TRANSACTIONS'", 
                     "'TRANSACTION_ABORT_ON_ERROR'", "'TRANSACTION_DEFAULT_ISOLATION_LEVEL'", 
                     "'TRANSIENT'", "'TRIGGERS'", "'TRIM'", "'TRIM_SPACE'", 
                     "'TRUE'", "'TRUNC'", "'TRUNCATE'", "'TRUNCATECOLUMNS'", 
                     "'TRY_CAST'", "'TWO_DIGIT_CENTURY_START'", "'TYPE'", 
                     "'UNDROP'", "'UNION'", "'UNIQUE'", "'UNMATCHED'", "'UNPIVOT'", 
                     "'UNSET'", "'UNSUPPORTED_DDL_ACTION'", "'UPDATE'", 
                     "'UPPER'", "'URL'", "'USAGE'", "'USE'", "'USER'", "'USERADMIN'", 
                     "'USERS'", "'USERNAME'", "'USER_SPECIFIED'", "'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE'", 
                     "'USER_TASK_TIMEOUT_MS'", "'USE_ANY_ROLE'", "'USE_CACHED_RESULT'", 
                     "'USING'", "'UTF8'", "'VALIDATE'", "'VALIDATION_MODE'", 
                     "'VALUE'", "'VALUES'", "'VARIABLES'", "'VERSION'", 
                     "'VERSIONS'", "'VIEW'", "'VIEWS'", "'VISIBILITY'", 
                     "'VOLATILE'", "'WAREHOUSE'", "'WAREHOUSES'", "'WAREHOUSE_SIZE'", 
                     "'WAREHOUSE_TYPE'", "'WEEKLY'", "'WEEK_OF_YEAR_POLICY'", 
                     "'WEEK_START'", "'WHEN'", "'WHERE'", "'WITH'", "'WITHIN'", 
                     "'WORK'", "'WRITE'", "'X4LARGE'", "'X5LARGE'", "'X6LARGE'", 
                     "'XLARGE'", "'XML'", "''XML''", "'XSMALL'", "'XXLARGE'", 
                     "'XXXLARGE'", "'YEARLY'", "'YEAR'", "'ZSTD'", "'ARRAY'", 
                     "''ARRAY''", "'BIGINT'", "'BINARY'", "'BOOLEAN'", "'BYTEINT'", 
                     "'CHAR VARYING'", "'DATE'", "'DATETIME'", "'DECIMAL'", 
                     "'DOUBLE'", "'DOUBLE PRECISION'", "'FLOAT4'", "'FLOAT8'", 
                     "'FLOAT'", "'FLOOR'", "'GEOGRAPHY'", "'GEOMETRY'", 
                     "'INTEGER'", "'NCHAR'", "'NCHAR VARYING'", "'NUMERIC'", 
                     "'NVARCHAR2'", "'NVARCHAR'", "'REAL'", "'SMALLINT'", 
                     "'STRING'", "'TEXT'", "'TINYINT'", "'VARBINARY'", "'VARCHAR'", 
                     "'VARIANT'", "'LISTAGG'", "'DUMMY'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\"\"'", "'''", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'->'", "'=>'", "'!='", "'<>'", "'='", 
                     "'>'", "'>='", "'<'", "'<='", "'||'", "'.'", "'@'", 
                     "''@''", "'$'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "','", "';'", "':'", "'::'", "'*'", "'/'", "'%'", 
                     "'+'", "'-'", "'~'" ]

    symbolicNames = [ "<INVALID>", "AAD_PROVISIONER_Q", "ABORT", "ABORT_DETACHED_QUERY", 
                      "ABORT_STATEMENT", "ACCESS", "ACCOUNT", "ACCOUNTADMIN", 
                      "ACCOUNTS", "ACTION", "ADD", "ADMIN_NAME", "ADMIN_PASSWORD", 
                      "AES", "AFTER", "ALERT", "ALERTS", "ALL", "ALLOWED_ACCOUNTS", 
                      "ALLOWED_DATABASES", "ALLOWED_INTEGRATION_TYPES", 
                      "ALLOWED_IP_LIST", "ALLOWED_SHARES", "ALLOWED_VALUES", 
                      "ALLOW_CLIENT_MFA_CACHING", "ALLOW_DUPLICATE", "ALLOW_ID_TOKEN", 
                      "ALLOW_OVERLAPPING_EXECUTION", "ALTER", "AND", "ANY", 
                      "ANY_VALUE", "API", "API_ALLOWED_PREFIXES", "API_AUTHENTICATION", 
                      "API_AWS_ROLE_ARN", "API_BLOCKED_PREFIXES", "API_INTEGRATION", 
                      "API_KEY", "API_PROVIDER", "APPEND", "APPEND_ONLY", 
                      "APPLICATION", "APPLY", "ARRAY_AGG", "AS", "ASC", 
                      "ATTACH", "AT_KEYWORD", "AUTHORIZATION", "AUTHORIZATIONS", 
                      "AUTO", "AUTO_Q", "AUTOCOMMIT", "AUTOCOMMIT_API_SUPPORTED", 
                      "AUTOINCREMENT", "AUTO_COMPRESS", "AUTO_DETECT", "AUTO_INGEST", 
                      "AUTO_REFRESH", "AUTO_RESUME", "AUTO_SUSPEND", "AVG", 
                      "AVRO", "AVRO_Q", "AWS_KEY_ID", "AWS_ROLE", "AWS_SECRET_KEY", 
                      "AWS_SNS", "AWS_SNS_ROLE_ARN", "AWS_SNS_TOPIC", "AWS_SNS_TOPIC_ARN", 
                      "AWS_TOKEN", "AZURE", "AZURE_AD_APPLICATION_ID", "AZURE_CSE_Q", 
                      "AZURE_EVENT_GRID", "AZURE_EVENT_GRID_TOPIC_ENDPOINT", 
                      "AZURE_Q", "AZURE_SAS_TOKEN", "AZURE_STORAGE_QUEUE_PRIMARY_URI", 
                      "AZURE_TENANT_ID", "BASE64", "BEFORE", "BEGIN", "BERNOULLI", 
                      "BETWEEN", "BINARY_AS_TEXT", "BINARY_FORMAT", "BINARY_INPUT_FORMAT", 
                      "BINARY_OUTPUT_FORMAT", "BLOCK", "BLOCKED_IP_LIST", 
                      "BLOCKED_ROLES_LIST", "BODY", "BOTH_Q", "BRANCHES", 
                      "BROTLI", "BUSINESS_CRITICAL", "BY", "BZ2", "CALL", 
                      "CALLED", "CALLER", "CASCADE", "CASE", "CASE_INSENSITIVE", 
                      "CASE_SENSITIVE", "CAST", "CEIL", "CHANGES", "CHANGE_TRACKING", 
                      "CHANNELS", "CHAR", "CHARACTER", "CHARINDEX", "CHECK", 
                      "CHECKSUM", "CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS", 
                      "CLIENT_ENCRYPTION_KEY_SIZE", "CLIENT_MEMORY_LIMIT", 
                      "CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX", "CLIENT_METADATA_USE_SESSION_DATABASE", 
                      "CLIENT_PREFETCH_THREADS", "CLIENT_RESULT_CHUNK_SIZE", 
                      "CLIENT_RESULT_COLUMN_CASE_INSENSITIVE", "CLIENT_SESSION_KEEP_ALIVE", 
                      "CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY", "CLIENT_TIMESTAMP_TYPE_MAPPING", 
                      "CLONE", "CLOUD_PROVIDER_TOKEN", "CLUSTER", "CLUSTERING", 
                      "COALESCE", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMPRESSION", "CONCAT", "CONCAT_WS", 
                      "CONDITION", "CONFIGURATION", "CONNECT", "CONNECTION", 
                      "CONNECTIONS", "CONSTRAINT", "CONTAINS", "CONTEXT_HEADERS", 
                      "CONTINUE", "COPY", "COPY_OPTIONS_", "COUNT", "CREATE", 
                      "CREDENTIALS", "CREDIT_QUOTA", "CROSS", "CSV", "CSV_Q", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CUSTOM", "DAILY", "DATA", "DATABASE", 
                      "DATABASES", "DATASET", "DATASETS", "DATA_RETENTION_TIME_IN_DAYS", 
                      "DATEADD", "DATEDIFF", "DATE_FORMAT", "DATE_INPUT_FORMAT", 
                      "DATE_OUTPUT_FORMAT", "DATE_PART", "DAYS", "DAYS_TO_EXPIRY", 
                      "DEFAULT", "DEFAULT_DDL_COLLATION_", "DEFAULT_NAMESPACE", 
                      "DEFAULT_ROLE", "DEFAULT_WAREHOUSE", "DEFERRABLE", 
                      "DEFERRED", "DEFINE", "DEFINITION", "DEFLATE", "DELEGATED", 
                      "DELETE", "DELTA", "DENSE_RANK", "DESC", "DESCRIBE", 
                      "DIRECTION", "DIRECTORY", "DISABLE", "DISABLED", "DISABLE_AUTO_CONVERT", 
                      "DISABLE_SNOWFLAKE_DATA", "DISPLAY_NAME", "DISTINCT", 
                      "DO", "DOWNSTREAM", "DROP", "DYNAMIC", "ECONOMY", 
                      "EDITION", "ELSE", "EMAIL", "EMPTY_", "EMPTY_FIELD_AS_NULL", 
                      "ENABLE", "ENABLED", "ENABLE_FOR_PRIVILEGE", "ENABLE_INTERNAL_STAGES_PRIVATELINK", 
                      "ENABLE_OCTAL", "ENABLE_QUERY_ACCELERATION", "ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION", 
                      "ENCODING", "ENCRYPTION", "END", "END_TIMESTAMP", 
                      "ENFORCED", "ENFORCE_LENGTH", "ENFORCE_SESSION_POLICY", 
                      "ENTERPRISE", "EQUAL_NULL", "EQUALITY", "ERROR_INTEGRATION", 
                      "ERROR_ON_COLUMN_COUNT_MISMATCH", "ERROR_ON_NONDETERMINISTIC_MERGE", 
                      "ERROR_ON_NONDETERMINISTIC_UPDATE", "ESCAPE", "ESCAPE_UNENCLOSED_FIELD", 
                      "EVENT", "EXCEPT", "EXCLUDE", "EXCHANGE", "EXECUTE", 
                      "EXECUTION", "EXISTS", "EXPIRY_DATE", "EXPLAIN", "EXPR", 
                      "EXTERNAL", "EXTERNAL_OAUTH", "EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST", 
                      "EXTERNAL_OAUTH_ALLOWED_ROLES_LIST", "EXTERNAL_OAUTH_ANY_ROLE_MODE", 
                      "EXTERNAL_OAUTH_AUDIENCE_LIST", "EXTERNAL_OAUTH_BLOCKED_ROLES_LIST", 
                      "EXTERNAL_OAUTH_ISSUER", "EXTERNAL_OAUTH_JWS_KEYS_URL", 
                      "EXTERNAL_OAUTH_RSA_PUBLIC_KEY", "EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2", 
                      "EXTERNAL_OAUTH_SCOPE_DELIMITER", "EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE", 
                      "EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM", "EXTERNAL_OAUTH_TYPE", 
                      "EXTERNAL_STAGE", "FAILOVER", "FALSE", "FETCH", "FIELD_DELIMITER", 
                      "FIELD_OPTIONALLY_ENCLOSED_BY", "FILE", "FILES", "FILE_EXTENSION", 
                      "FILE_FORMAT", "FIRST", "FIRST_NAME", "FIRST_VALUE", 
                      "FLATTEN", "FOR", "FORCE", "FOREIGN", "FORMAT", "FORMATS", 
                      "FORMAT_NAME", "FREQUENCY", "FROM", "FULL", "FUNCTION", 
                      "FUNCTIONS", "FUTURE", "GCP_PUBSUB", "GCP_PUBSUB_SUBSCRIPTION_NAME", 
                      "GCP_PUBSUB_TOPIC_NAME", "GCS", "GCS_SSE_KMS_Q", "GENERIC", 
                      "GENERIC_Q", "GENERIC_SCIM_PROVISIONER_Q", "GENERIC_STRING", 
                      "GEO", "GEOGRAPHY_OUTPUT_FORMAT", "GEOMETRY_OUTPUT_FORMAT", 
                      "GET", "GETDATE", "GIT", "GIT_CREDENTIALS", "GLOBAL", 
                      "GOOGLE_AUDIENCE", "GRANT", "GRANTS", "GROUP", "GROUPING", 
                      "GROUPS", "GZIP", "HALF_AWAY_FROM_ZERO_Q", "HALF_TO_EVEN_Q", 
                      "HANDLER", "HASH", "HAVING", "HEADER", "HEADERS", 
                      "HEX", "HIGH", "HISTORY", "HOURS", "IDENTIFIER", "IDENTITY", 
                      "IF", "IFF", "IFNULL", "IGNORE", "IGNORE_UTF8_ERRORS", 
                      "ILIKE", "IMMEDIATE", "IMMEDIATELY", "IMMUTABLE", 
                      "IMPLICIT", "IMPORT", "IMPORTS", "IMPORTED", "IN", 
                      "INCREMENT", "INCREMENTAL", "INDEX", "INFORMATION", 
                      "INITIALIZE", "INITIALLY", "INITIALLY_SUSPENDED", 
                      "INITIAL_REPLICATION_SIZE_LIMIT_IN_TB", "INNER", "INPUT", 
                      "INSERT", "INSERT_ONLY", "INT", "INTEGRATION", "INTEGRATIONS", 
                      "INTERSECT", "INTERVAL", "INTO", "IS", "JAVA", "JAVASCRIPT", 
                      "JDBC_TREAT_DECIMAL_AS_INT", "JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC", 
                      "JDBC_USE_SESSION_TIMEZONE", "JOIN", "JSON", "JSON_Q", 
                      "JSON_INDENT", "JS_TREAT_INTEGER_AS_BIGINT", "KEY", 
                      "KEYS", "KMS_KEY_ID", "LAG", "LANGUAGE", "LARGE", 
                      "LAST", "LAST_NAME", "LAST_QUERY_ID", "LAST_VALUE", 
                      "LATERAL", "LEAD", "LEFT", "LEN", "LENGTH", "LIKE", 
                      "LIMIT", "LINEAR", "LIST", "LISTING", "LOCAL", "LOCATION", 
                      "LOCKS", "LOCK_TIMEOUT", "LOGIN_NAME", "LOOKER", "LOW", 
                      "LOWER", "LTRIM", "LZO", "MANAGE", "MANAGED", "MASKING", 
                      "MASTER_KEY", "MATCH", "MATCHED", "MATCHES", "MATCH_BY_COLUMN_NAME", 
                      "MATCH_RECOGNIZE", "MATERIALIZED", "MAX_BATCH_ROWS", 
                      "MAX_CLUSTER_COUNT", "MAX_CONCURRENCY_LEVEL", "MAX_DATA_EXTENSION_TIME_IN_DAYS", 
                      "MAX_SIZE", "MEASURES", "MEDIUM", "MEMOIZABLE", "MERGE", 
                      "METADATA", "MIDDLE_NAME", "MIN", "MINS_TO_BYPASS_MFA", 
                      "MINS_TO_UNLOCK", "MINUS_", "MIN_CLUSTER_COUNT", "MIN_DATA_RETENTION_TIME_IN_DAYS", 
                      "MODE", "MODIFIED_AFTER", "MODIFY", "MONITOR", "MONITORS", 
                      "MONTHLY", "MOVE", "MULTI_STATEMENT_COUNT", "MUST_CHANGE_PASSWORD", 
                      "NAME", "NATURAL", "NETWORK", "NETWORK_POLICY", "NEVER", 
                      "NEXT", "NEXTVAL", "NO", "NONE", "NONE_Q", "NOORDER", 
                      "NORELY", "NOT", "NOTIFICATION", "NOTIFICATION_INTEGRATION", 
                      "NOTIFICATION_PROVIDER", "NOTIFY", "NOTIFY_USERS", 
                      "NOVALIDATE", "NTILE", "NULLIF", "NULLS", "NULL_", 
                      "NULL_IF", "NUMBER", "NVL", "NVL2", "OAUTH", "OAUTH2", 
                      "OAUTH_ALLOW_NON_TLS_REDIRECT_URI", "OAUTH_CLIENT", 
                      "OAUTH_CLIENT_RSA_PUBLIC_KEY", "OAUTH_CLIENT_RSA_PUBLIC_KEY_2", 
                      "OAUTH_ENFORCE_PKCE", "OAUTH_ISSUE_REFRESH_TOKENS", 
                      "OAUTH_REDIRECT_URI", "OAUTH_REFRESH_TOKEN", "OAUTH_REFRESH_TOKEN_EXPIRY_TIME", 
                      "OAUTH_REFRESH_TOKEN_VALIDITY", "OAUTH_SCOPES", "OAUTH_USE_SECONDARY_ROLES", 
                      "OBJECT", "OBJECT_Q", "OBJECTS", "OBJECT_TYPES", "OF", 
                      "OFFSET", "OKTA", "OKTA_PROVISIONER_Q", "OKTA_Q", 
                      "OLD", "OMIT", "ON", "ONE", "ONLY", "ON_CREATE", "ON_ERROR", 
                      "ON_SCHEDULE", "OPERATE", "OPTIMIZATION", "OPTION", 
                      "OR", "ORC", "ORC_Q", "ORDER", "ORGADMIN", "ORGANIZATION", 
                      "ORIGIN", "OUTBOUND", "OUTER", "OVER", "OVERRIDE", 
                      "OVERWRITE", "OWNER", "OWNERSHIP", "PACKAGE", "PACKAGES", 
                      "PARALLEL", "PARAMETERS", "PARQUET", "PARQUET_Q", 
                      "PARTIAL", "PARTITION", "PARTITION_TYPE", "PASSWORD", 
                      "PASSWORD_HISTORY", "PASSWORD_LOCKOUT_TIME_MINS", 
                      "PASSWORD_MAX_AGE_DAYS", "PASSWORD_MAX_LENGTH", "PASSWORD_MAX_RETRIES", 
                      "PASSWORD_MIN_AGE_DAYS", "PASSWORD_MIN_LENGTH", "PASSWORD_MIN_LOWER_CASE_CHARS", 
                      "PASSWORD_MIN_NUMERIC_CHARS", "PASSWORD_MIN_SPECIAL_CHARS", 
                      "PASSWORD_MIN_UPPER_CASE_CHARS", "PAST", "PATH_", 
                      "PATTERN", "PER", "PERCENT", "PERIODIC_DATA_REKEYING", 
                      "PING_FEDERATE", "PIPE", "PIPES", "PIPE_EXECUTION_PAUSED", 
                      "PIVOT", "POLICIES", "POLICY", "PORT", "PREFIX", "PRESERVE_SPACE", 
                      "PREVENT_UNLOAD_TO_INLINE_URL", "PREVENT_UNLOAD_TO_INTERNAL_STAGES", 
                      "PRE_AUTHORIZED_ROLES_LIST", "PRIMARY", "PRIOR", "PRIORITY", 
                      "PRIVILEGES", "PROCEDURE", "PROCEDURES", "PROCEDURE_NAME", 
                      "PROPERTY", "PROVIDER", "PUBLIC", "PURGE", "PUT", 
                      "PYTHON", "QUALIFY", "QUARTER", "QUERIES", "QUERY", 
                      "QUERY_ACCELERATION_MAX_SCALE_FACTOR", "QUERY_TAG", 
                      "QUEUE", "QUOTED_IDENTIFIERS_IGNORE_CASE", "RANK", 
                      "RAW_DEFLATE", "READ", "READER", "RECLUSTER", "RECORD_DELIMITER", 
                      "RECURSIVE", "REFERENCES", "REFERENCE_USAGE", "REFRESH", 
                      "REFRESH_MODE", "REFRESH_ON_CREATE", "REGION", "REGIONS", 
                      "REGION_GROUP", "RELY", "REMOVE", "RENAME", "REPEATABLE", 
                      "REPLACE", "REPLACE_INVALID_CHARACTERS", "REPLICA", 
                      "REPLICATION", "REPLICATION_SCHEDULE", "REPOSITORY", 
                      "REPOSITORIES", "REQUEST_TRANSLATOR", "REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION", 
                      "REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION", 
                      "RESET", "RESOURCE", "RESOURCES", "RESOURCE_MONITOR", 
                      "RESPECT", "RESPONSE_TRANSLATOR", "RESTRICT", "RESTRICTIONS", 
                      "RESULT", "RESUME", "RETURNS", "RETURN_ALL_ERRORS", 
                      "RETURN_ERRORS", "RETURN_FAILED_ONLY", "RETURN_N_ROWS", 
                      "RETURN_ROWS", "REVOKE", "RIGHT", "RLIKE", "ROLE", 
                      "ROLES", "ROLLBACK", "ROLLUP", "ROUND", "ROUNDING_MODE", 
                      "ROW", "ROWS", "ROWS_PER_RESULTSET", "ROW_NUMBER", 
                      "RSA_PUBLIC_KEY", "RSA_PUBLIC_KEY_2", "RTRIM", "RUN_AS_ROLE", 
                      "RUNTIME_VERSION", "S3", "SAML2", "SAML2_ENABLE_SP_INITIATED", 
                      "SAML2_FORCE_AUTHN", "SAML2_ISSUER", "SAML2_POST_LOGOUT_REDIRECT_URL", 
                      "SAML2_PROVIDER", "SAML2_REQUESTED_NAMEID_FORMAT", 
                      "SAML2_SIGN_REQUEST", "SAML2_SNOWFLAKE_ACS_URL", "SAML2_SNOWFLAKE_ISSUER_URL", 
                      "SAML2_SNOWFLAKE_X509_CERT", "SAML2_SP_INITIATED_LOGIN_PAGE_LABEL", 
                      "SAML2_SSO_URL", "SAML2_X509_CERT", "SAML_IDENTITY_PROVIDER", 
                      "SAMPLE", "SAVE_OLD_URL", "SCALE", "SCALING_POLICY", 
                      "SCHEDULE", "SCHEMA", "SCHEMAS", "SCIM", "SCIM_CLIENT", 
                      "SEARCH", "SECONDARY", "SECRET", "SECRETS", "SECRET_STRING", 
                      "SECURE", "SECURITY", "SECURITYADMIN", "SEED", "SELECT", 
                      "SEQUENCE", "SEQUENCES", "SESSION", "SESSION_IDLE_TIMEOUT_MINS", 
                      "SESSION_POLICY", "SESSION_UI_IDLE_TIMEOUT_MINS", 
                      "SET", "SETS", "SHARE", "SHARES", "SHARE_RESTRICTIONS", 
                      "SHOW", "SHOW_INITIAL_ROWS", "SIMPLE", "SIMULATED_DATA_SHARING_CONSUMER", 
                      "SIZE_LIMIT", "SKIP_", "SKIP_BLANK_LINES", "SKIP_BYTE_ORDER_MARK", 
                      "SKIP_FILE", "SKIP_FILE_N", "SKIP_HEADER", "SMALL", 
                      "SNAPPY", "SNAPPY_COMPRESSION", "SNOWFLAKE_FULL", 
                      "SNOWFLAKE_SSE", "SNOWPARK_OPTIMIZED", "SOME", "SOURCE", 
                      "SOURCE_COMPRESSION", "SPLIT", "SPLIT_PART", "SPLIT_TO_TABLE", 
                      "SQL", "SSO_LOGIN_PAGE", "STAGE", "STAGES", "STAGE_COPY_OPTIONS", 
                      "STAGE_FILE_FORMAT", "STANDARD", "START", "STARTS", 
                      "START_DATE", "START_TIMESTAMP", "STATE", "STATEMENT", 
                      "STATEMENT_QUEUED_TIMEOUT_IN_SECONDS", "STATEMENT_TIMEOUT_IN_SECONDS", 
                      "STATS", "STATUS", "STORAGE", "STORAGE_ALLOWED_LOCATIONS", 
                      "STORAGE_AWS_OBJECT_ACL", "STORAGE_AWS_ROLE_ARN", 
                      "STORAGE_BLOCKED_LOCATIONS", "STORAGE_INTEGRATION", 
                      "STORAGE_PROVIDER", "STREAM", "STREAMS", "STRICT", 
                      "STRICT_JSON_OUTPUT", "STRIP_NULL_VALUES", "STRIP_OUTER_ARRAY", 
                      "STRIP_OUTER_ELEMENT", "SUBSTR", "SUBSTRING", "SUM", 
                      "SUSPEND", "SUSPENDED", "SUSPEND_IMMEDIATE", "SUSPEND_TASK_AFTER_NUM_FAILURES", 
                      "SWAP", "SYMMETRIC_KEY", "SYNC_PASSWORD", "SYSADMIN", 
                      "SYSTEM", "TABLE", "TABLEAU_DESKTOP", "TABLEAU_SERVER", 
                      "TABLES", "TABLESAMPLE", "TABLE_FORMAT", "TABULAR", 
                      "TAG", "TAGS", "TARGET_LAG", "TASK", "TASKS", "TEMP", 
                      "TEMPORARY", "TERSE", "THEN", "TIME", "TIMEADD", "TIMEDIFF", 
                      "TIMESTAMP", "TIMESTAMP_DAY_IS_ALWAYS_24H", "TIMESTAMP_FORMAT", 
                      "TIMESTAMP_INPUT_FORMAT", "TIMESTAMP_LTZ", "TIMESTAMP_LTZ_OUTPUT_FORMAT", 
                      "TIMESTAMP_NTZ", "TIMESTAMP_NTZ_OUTPUT_FORMAT", "TIMESTAMP_OUTPUT_FORMAT", 
                      "TIMESTAMP_TYPE_MAPPING", "TIMESTAMP_TZ", "TIMESTAMP_TZ_OUTPUT_FORMAT", 
                      "TIMESTAMPADD", "TIMESTAMPDIFF", "TIMEZONE", "TIME_FORMAT", 
                      "TIME_INPUT_FORMAT", "TIME_OUTPUT_FORMAT", "TO", "TO_BOOLEAN", 
                      "TO_DATE", "TO_TIMESTAMP", "TOP", "TRANSACTION", "TRANSACTIONS", 
                      "TRANSACTION_ABORT_ON_ERROR", "TRANSACTION_DEFAULT_ISOLATION_LEVEL", 
                      "TRANSIENT", "TRIGGERS", "TRIM", "TRIM_SPACE", "TRUE", 
                      "TRUNC", "TRUNCATE", "TRUNCATECOLUMNS", "TRY_CAST", 
                      "TWO_DIGIT_CENTURY_START", "TYPE", "UNDROP", "UNION", 
                      "UNIQUE", "UNMATCHED", "UNPIVOT", "UNSET", "UNSUPPORTED_DDL_ACTION", 
                      "UPDATE", "UPPER", "URL", "USAGE", "USE", "USER", 
                      "USERADMIN", "USERS", "USERNAME", "USER_SPECIFIED", 
                      "USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE", "USER_TASK_TIMEOUT_MS", 
                      "USE_ANY_ROLE", "USE_CACHED_RESULT", "USING", "UTF8", 
                      "VALIDATE", "VALIDATION_MODE", "VALUE", "VALUES", 
                      "VARIABLES", "VERSION", "VERSIONS", "VIEW", "VIEWS", 
                      "VISIBILITY", "VOLATILE", "WAREHOUSE", "WAREHOUSES", 
                      "WAREHOUSE_SIZE", "WAREHOUSE_TYPE", "WEEKLY", "WEEK_OF_YEAR_POLICY", 
                      "WEEK_START", "WHEN", "WHERE", "WITH", "WITHIN", "WORK", 
                      "WRITE", "X4LARGE", "X5LARGE", "X6LARGE", "XLARGE", 
                      "XML", "XML_Q", "XSMALL", "XXLARGE", "XXXLARGE", "YEARLY", 
                      "YEAR", "ZSTD", "ARRAY", "ARRAY_Q", "BIGINT", "BINARY", 
                      "BOOLEAN", "BYTEINT", "CHAR_VARYING", "DATE", "DATETIME", 
                      "DECIMAL_", "DOUBLE", "DOUBLE_PRECISION", "FLOAT4", 
                      "FLOAT8", "FLOAT_", "FLOOR", "GEOGRAPHY", "GEOMETRY", 
                      "INTEGER", "NCHAR", "NCHAR_VARYING", "NUMERIC", "NVARCHAR2", 
                      "NVARCHAR", "REAL_", "SMALLINT", "STRING_", "TEXT", 
                      "TINYINT", "VARBINARY", "VARCHAR", "VARIANT", "LISTAGG", 
                      "DUMMY", "SPACE", "SQL_COMMENT", "LINE_COMMENT", "LINE_COMMENT_2", 
                      "DOUBLE_QUOTE_ID", "DOUBLE_QUOTE_BLANK", "SINGLE_QUOTE", 
                      "ID", "ID2", "S3_PATH", "S3GOV_PATH", "GCS_PATH", 
                      "AZURE_PATH", "FILE_PATH", "DBL_DOLLAR", "STRING", 
                      "DECIMAL", "FLOAT", "REAL", "CHAR_LITERAL", "ARROW", 
                      "ASSOC", "NE", "LTGT", "EQ", "GT", "GE", "LT", "LE", 
                      "PIPE_PIPE", "DOT", "AT", "AT_Q", "DOLLAR", "LR_BRACKET", 
                      "RR_BRACKET", "LSB", "RSB", "LCB", "RCB", "COMMA", 
                      "SEMI", "COLON", "COLON_COLON", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUS", "TILDA" ]

    RULE_snowflake_file = 0
    RULE_batch = 1
    RULE_sql_command = 2
    RULE_ddl_command = 3
    RULE_dml_command = 4
    RULE_insert_statement = 5
    RULE_insert_multi_table_statement = 6
    RULE_into_clause2 = 7
    RULE_values_list = 8
    RULE_value_item = 9
    RULE_merge_statement = 10
    RULE_merge_matches = 11
    RULE_merge_cond = 12
    RULE_merge_update_delete = 13
    RULE_merge_insert = 14
    RULE_update_statement = 15
    RULE_table_or_query = 16
    RULE_delete_statement = 17
    RULE_values_builder = 18
    RULE_other_command = 19
    RULE_begin_txn = 20
    RULE_copy_into_table = 21
    RULE_external_location = 22
    RULE_files = 23
    RULE_file_format = 24
    RULE_format_name = 25
    RULE_format_type = 26
    RULE_stage_file_format = 27
    RULE_copy_into_location = 28
    RULE_comment = 29
    RULE_function_signature = 30
    RULE_commit = 31
    RULE_execute_immediate = 32
    RULE_execute_task = 33
    RULE_explain = 34
    RULE_parallel = 35
    RULE_get_dml = 36
    RULE_grant_ownership = 37
    RULE_grant_to_role = 38
    RULE_global_privileges = 39
    RULE_global_privilege = 40
    RULE_account_object_privileges = 41
    RULE_account_object_privilege = 42
    RULE_schema_privileges = 43
    RULE_schema_privilege = 44
    RULE_schema_object_privileges = 45
    RULE_schema_object_privilege = 46
    RULE_grant_to_share = 47
    RULE_object_privilege = 48
    RULE_grant_role = 49
    RULE_role_name = 50
    RULE_system_defined_role = 51
    RULE_list = 52
    RULE_user_stage = 53
    RULE_table_stage = 54
    RULE_named_stage = 55
    RULE_stage_path = 56
    RULE_put = 57
    RULE_remove = 58
    RULE_revoke_from_role = 59
    RULE_revoke_from_share = 60
    RULE_revoke_role = 61
    RULE_rollback = 62
    RULE_set = 63
    RULE_truncate_materialized_view = 64
    RULE_truncate_table = 65
    RULE_unset = 66
    RULE_alter_command = 67
    RULE_account_params = 68
    RULE_object_params = 69
    RULE_default_ddl_collation = 70
    RULE_object_properties = 71
    RULE_session_params = 72
    RULE_alter_account = 73
    RULE_enabled_true_false = 74
    RULE_alter_alert = 75
    RULE_resume_suspend = 76
    RULE_alert_set_clause = 77
    RULE_alert_unset_clause = 78
    RULE_alter_api_integration = 79
    RULE_api_integration_property = 80
    RULE_alter_connection = 81
    RULE_alter_database = 82
    RULE_database_property = 83
    RULE_account_id_list = 84
    RULE_alter_dataset = 85
    RULE_alter_dynamic_table = 86
    RULE_id_list = 87
    RULE_alter_external_table = 88
    RULE_ignore_edition_check = 89
    RULE_replication_schedule = 90
    RULE_db_name_list = 91
    RULE_share_name_list = 92
    RULE_full_acct_list = 93
    RULE_alter_failover_group = 94
    RULE_alter_file_format = 95
    RULE_alter_function = 96
    RULE_alter_function_signature = 97
    RULE_data_type_list = 98
    RULE_alter_git_repository = 99
    RULE_alter_git_set_opts = 100
    RULE_alter_git_unset_opts = 101
    RULE_alter_masking_policy = 102
    RULE_alter_materialized_view = 103
    RULE_alter_network_policy = 104
    RULE_alter_notification_integration = 105
    RULE_alter_pipe = 106
    RULE_alter_procedure = 107
    RULE_alter_replication_group = 108
    RULE_credit_quota = 109
    RULE_frequency = 110
    RULE_notify_users = 111
    RULE_triggerDefinition = 112
    RULE_alter_resource_monitor = 113
    RULE_alter_role = 114
    RULE_alter_row_access_policy = 115
    RULE_alter_schema = 116
    RULE_schema_property = 117
    RULE_alter_sequence = 118
    RULE_alter_secret = 119
    RULE_secret_opts = 120
    RULE_secret_set_opts = 121
    RULE_secret_oauth_client_creds_opts = 122
    RULE_secret_oauth_auth_code_opts = 123
    RULE_secret_api_auth_opts = 124
    RULE_secret_basic_auth_opts = 125
    RULE_secret_generic_string_opts = 126
    RULE_alter_security_integration_external_oauth = 127
    RULE_security_integration_external_oauth_property = 128
    RULE_alter_security_integration_snowflake_oauth = 129
    RULE_security_integration_snowflake_oauth_property = 130
    RULE_alter_security_integration_saml2 = 131
    RULE_alter_security_integration_scim = 132
    RULE_security_integration_scim_property = 133
    RULE_alter_session = 134
    RULE_alter_session_policy = 135
    RULE_alter_password_policy = 136
    RULE_alter_share = 137
    RULE_alter_storage_integration = 138
    RULE_alter_stream = 139
    RULE_alter_table = 140
    RULE_rls_operations = 141
    RULE_clustering_action = 142
    RULE_table_column_action = 143
    RULE_alter_column_clause = 144
    RULE_inline_constraint = 145
    RULE_enforced_not_enforced = 146
    RULE_deferrable_not_deferrable = 147
    RULE_initially_deferred_or_immediate = 148
    RULE_common_constraint_properties = 149
    RULE_on_update = 150
    RULE_on_delete = 151
    RULE_foreign_key_match = 152
    RULE_on_action = 153
    RULE_constraint_properties = 154
    RULE_ext_table_column_action = 155
    RULE_constraint_action = 156
    RULE_search_optimization_action = 157
    RULE_search_method_with_target = 158
    RULE_alter_table_alter_column = 159
    RULE_alter_column_decl_list = 160
    RULE_alter_column_decl = 161
    RULE_alter_column_opts = 162
    RULE_column_set_tags = 163
    RULE_column_unset_tags = 164
    RULE_alter_tag = 165
    RULE_alter_task = 166
    RULE_alter_user = 167
    RULE_alter_view = 168
    RULE_alter_modify = 169
    RULE_alter_warehouse = 170
    RULE_alter_connection_opts = 171
    RULE_alter_user_opts = 172
    RULE_alter_tag_opts = 173
    RULE_alter_network_policy_opts = 174
    RULE_alter_warehouse_opts = 175
    RULE_alter_account_opts = 176
    RULE_set_tags = 177
    RULE_tag_decl_list = 178
    RULE_unset_tags = 179
    RULE_tag_list = 180
    RULE_create_command = 181
    RULE_create_account = 182
    RULE_create_alert = 183
    RULE_alert_condition = 184
    RULE_alert_action = 185
    RULE_create_api_integration = 186
    RULE_create_object_clone = 187
    RULE_create_connection = 188
    RULE_create_database = 189
    RULE_clone_at_before = 190
    RULE_at_before1 = 191
    RULE_header_decl = 192
    RULE_compression_type = 193
    RULE_compression = 194
    RULE_create_dataset = 195
    RULE_create_dynamic_table = 196
    RULE_dynamic_table_params = 197
    RULE_dynamic_table_settable_params = 198
    RULE_dynamic_table_unsettable_params = 199
    RULE_data_retention_params = 200
    RULE_set_data_retention_params = 201
    RULE_create_event_table = 202
    RULE_create_external_function = 203
    RULE_create_external_table = 204
    RULE_external_table_column_decl = 205
    RULE_external_table_column_decl_list = 206
    RULE_full_acct = 207
    RULE_integration_type_name = 208
    RULE_create_failover_group = 209
    RULE_type_fileformat = 210
    RULE_create_file_format = 211
    RULE_arg_decl = 212
    RULE_arg_default_value_clause = 213
    RULE_col_decl = 214
    RULE_virtual_column_decl = 215
    RULE_function_definition = 216
    RULE_create_function = 217
    RULE_create_git_repository = 218
    RULE_create_git_opts = 219
    RULE_create_managed_account = 220
    RULE_create_masking_policy = 221
    RULE_tag_decl = 222
    RULE_column_list_in_parentheses = 223
    RULE_create_materialized_view = 224
    RULE_create_network_policy = 225
    RULE_cloud_provider_params_auto = 226
    RULE_cloud_provider_params_push = 227
    RULE_create_notification_integration = 228
    RULE_create_pipe = 229
    RULE_caller_owner = 230
    RULE_executa_as = 231
    RULE_procedure_definition = 232
    RULE_not_null = 233
    RULE_create_procedure = 234
    RULE_create_replication_group = 235
    RULE_create_resource_monitor = 236
    RULE_create_role = 237
    RULE_create_row_access_policy = 238
    RULE_create_schema = 239
    RULE_create_secret = 240
    RULE_create_security_integration_external_oauth = 241
    RULE_implicit_none = 242
    RULE_create_security_integration_snowflake_oauth = 243
    RULE_create_security_integration_saml2 = 244
    RULE_create_security_integration_scim = 245
    RULE_network_policy = 246
    RULE_partner_application = 247
    RULE_start_with = 248
    RULE_increment_by = 249
    RULE_create_sequence = 250
    RULE_create_session_policy = 251
    RULE_session_policy_params = 252
    RULE_session_policy_param_name = 253
    RULE_create_password_policy = 254
    RULE_password_policy_params = 255
    RULE_password_policy_param_name = 256
    RULE_create_share = 257
    RULE_character = 258
    RULE_format_type_options = 259
    RULE_copy_options = 260
    RULE_stage_encryption_opts_internal = 261
    RULE_stage_type = 262
    RULE_stage_master_key = 263
    RULE_stage_kms_key = 264
    RULE_stage_encryption_opts_aws = 265
    RULE_aws_token = 266
    RULE_aws_key_id = 267
    RULE_aws_secret_key = 268
    RULE_aws_role = 269
    RULE_azure_encryption_value = 270
    RULE_stage_encryption_opts_az = 271
    RULE_storage_integration_eq_id = 272
    RULE_az_credential_or_storage_integration = 273
    RULE_gcp_encryption_value = 274
    RULE_stage_encryption_opts_gcp = 275
    RULE_aws_credential_or_storage_integration = 276
    RULE_external_stage_params = 277
    RULE_true_false = 278
    RULE_enable = 279
    RULE_refresh_on_create = 280
    RULE_auto_refresh = 281
    RULE_notification_integration = 282
    RULE_directory_table_internal_params = 283
    RULE_directory_table_external_params = 284
    RULE_create_stage = 285
    RULE_alter_stage = 286
    RULE_drop_stage = 287
    RULE_describe_stage = 288
    RULE_show_stages = 289
    RULE_cloud_provider_params = 290
    RULE_cloud_provider_params2 = 291
    RULE_cloud_provider_params3 = 292
    RULE_create_storage_integration = 293
    RULE_copy_grants = 294
    RULE_append_only = 295
    RULE_insert_only = 296
    RULE_show_initial_rows = 297
    RULE_stream_time = 298
    RULE_create_stream = 299
    RULE_temporary = 300
    RULE_table_type = 301
    RULE_with_tags = 302
    RULE_with_row_access_policy = 303
    RULE_cluster_by = 304
    RULE_change_tracking = 305
    RULE_with_masking_policy = 306
    RULE_collate = 307
    RULE_order_noorder = 308
    RULE_default_value = 309
    RULE_foreign_key = 310
    RULE_primary_key = 311
    RULE_out_of_line_constraint = 312
    RULE_full_col_decl = 313
    RULE_materialized_col_decl = 314
    RULE_materialized_col_decl_list = 315
    RULE_column_decl_item = 316
    RULE_column_decl_item_list = 317
    RULE_create_table = 318
    RULE_column_decl_item_list_paren = 319
    RULE_create_table_clause = 320
    RULE_create_table_as_select = 321
    RULE_create_table_like = 322
    RULE_create_tag = 323
    RULE_tag_allowed_values = 324
    RULE_session_parameter = 325
    RULE_session_parameter_list = 326
    RULE_session_params_list = 327
    RULE_create_task = 328
    RULE_task_parameters = 329
    RULE_task_compute = 330
    RULE_task_schedule = 331
    RULE_task_timeout = 332
    RULE_task_suspend_after_failure_number = 333
    RULE_task_error_integration = 334
    RULE_task_overlap = 335
    RULE_sql = 336
    RULE_call = 337
    RULE_create_user = 338
    RULE_view_col = 339
    RULE_create_view = 340
    RULE_create_warehouse = 341
    RULE_wh_common_size = 342
    RULE_wh_extra_size = 343
    RULE_wh_properties = 344
    RULE_wh_params = 345
    RULE_trigger_definition = 346
    RULE_object_type_name = 347
    RULE_object_type_plural = 348
    RULE_drop_command = 349
    RULE_drop_object = 350
    RULE_drop_alert = 351
    RULE_drop_connection = 352
    RULE_drop_database = 353
    RULE_drop_dynamic_table = 354
    RULE_drop_external_table = 355
    RULE_drop_failover_group = 356
    RULE_drop_file_format = 357
    RULE_drop_function = 358
    RULE_drop_git_repository = 359
    RULE_drop_integration = 360
    RULE_drop_managed_account = 361
    RULE_drop_masking_policy = 362
    RULE_drop_materialized_view = 363
    RULE_drop_network_policy = 364
    RULE_drop_pipe = 365
    RULE_drop_procedure = 366
    RULE_drop_replication_group = 367
    RULE_drop_resource_monitor = 368
    RULE_drop_role = 369
    RULE_drop_row_access_policy = 370
    RULE_drop_schema = 371
    RULE_drop_secret = 372
    RULE_drop_sequence = 373
    RULE_drop_session_policy = 374
    RULE_drop_password_policy = 375
    RULE_drop_share = 376
    RULE_drop_stream = 377
    RULE_drop_table = 378
    RULE_drop_tag = 379
    RULE_drop_task = 380
    RULE_drop_user = 381
    RULE_drop_view = 382
    RULE_drop_warehouse = 383
    RULE_cascade_restrict = 384
    RULE_arg_types = 385
    RULE_undrop_command = 386
    RULE_undrop_database = 387
    RULE_undrop_schema = 388
    RULE_undrop_table = 389
    RULE_undrop_tag = 390
    RULE_use_command = 391
    RULE_use_database = 392
    RULE_use_role = 393
    RULE_use_schema = 394
    RULE_use_secondary_roles = 395
    RULE_use_warehouse = 396
    RULE_comment_clause = 397
    RULE_inline_comment_clause = 398
    RULE_if_suspended = 399
    RULE_if_exists = 400
    RULE_if_not_exists = 401
    RULE_or_replace = 402
    RULE_or_alter = 403
    RULE_describe = 404
    RULE_describe_command = 405
    RULE_describe_alert = 406
    RULE_describe_database = 407
    RULE_describe_dynamic_table = 408
    RULE_describe_event_table = 409
    RULE_describe_external_table = 410
    RULE_describe_file_format = 411
    RULE_describe_function = 412
    RULE_describe_git_repository = 413
    RULE_describe_integration = 414
    RULE_describe_masking_policy = 415
    RULE_describe_materialized_view = 416
    RULE_describe_network_policy = 417
    RULE_describe_pipe = 418
    RULE_describe_procedure = 419
    RULE_describe_result = 420
    RULE_describe_row_access_policy = 421
    RULE_describe_schema = 422
    RULE_describe_search_optimization = 423
    RULE_describe_sequence = 424
    RULE_describe_session_policy = 425
    RULE_describe_password_policy = 426
    RULE_describe_share = 427
    RULE_describe_stream = 428
    RULE_describe_table = 429
    RULE_describe_task = 430
    RULE_describe_transaction = 431
    RULE_describe_user = 432
    RULE_describe_view = 433
    RULE_describe_warehouse = 434
    RULE_show_command = 435
    RULE_show_alerts = 436
    RULE_show_channels = 437
    RULE_show_columns = 438
    RULE_show_connections = 439
    RULE_starts_with = 440
    RULE_limit_rows = 441
    RULE_show_databases = 442
    RULE_show_databases_in_failover_group = 443
    RULE_show_databases_in_replication_group = 444
    RULE_show_datasets = 445
    RULE_show_delegated_authorizations = 446
    RULE_show_dynamic_tables = 447
    RULE_show_event_tables = 448
    RULE_show_external_functions = 449
    RULE_show_external_tables = 450
    RULE_show_failover_groups = 451
    RULE_show_file_formats = 452
    RULE_show_functions = 453
    RULE_show_git_branches = 454
    RULE_show_git_repositories = 455
    RULE_show_git_tags = 456
    RULE_show_global_accounts = 457
    RULE_show_grants = 458
    RULE_show_grants_opts = 459
    RULE_show_integrations = 460
    RULE_show_locks = 461
    RULE_show_managed_accounts = 462
    RULE_show_masking_policies = 463
    RULE_in_obj = 464
    RULE_in_obj_2 = 465
    RULE_show_materialized_views = 466
    RULE_show_network_policies = 467
    RULE_show_objects = 468
    RULE_show_organization_accounts = 469
    RULE_in_for = 470
    RULE_show_parameters = 471
    RULE_show_pipes = 472
    RULE_show_primary_keys = 473
    RULE_show_procedures = 474
    RULE_show_regions = 475
    RULE_show_replication_accounts = 476
    RULE_show_replication_databases = 477
    RULE_show_replication_groups = 478
    RULE_show_resource_monitors = 479
    RULE_show_roles = 480
    RULE_show_row_access_policies = 481
    RULE_show_schemas = 482
    RULE_show_secrets = 483
    RULE_show_sequences = 484
    RULE_show_session_policies = 485
    RULE_show_password_policies = 486
    RULE_show_shares = 487
    RULE_show_shares_in_failover_group = 488
    RULE_show_shares_in_replication_group = 489
    RULE_show_streams = 490
    RULE_show_tables = 491
    RULE_show_tags = 492
    RULE_show_tasks = 493
    RULE_show_transactions = 494
    RULE_show_user_functions = 495
    RULE_show_users = 496
    RULE_show_variables = 497
    RULE_show_versions_in_dataset = 498
    RULE_show_views = 499
    RULE_show_warehouses = 500
    RULE_like_pattern = 501
    RULE_account_identifier = 502
    RULE_schema_name = 503
    RULE_object_type = 504
    RULE_object_type_list = 505
    RULE_tag_value = 506
    RULE_arg_data_type = 507
    RULE_arg_name = 508
    RULE_param_name = 509
    RULE_region_group_id = 510
    RULE_snowflake_region_id = 511
    RULE_string = 512
    RULE_string_list = 513
    RULE_id_fn = 514
    RULE_id_ = 515
    RULE_keyword = 516
    RULE_non_reserved_words = 517
    RULE_builtin_function = 518
    RULE_unary_or_binary_builtin_function = 519
    RULE_binary_builtin_function = 520
    RULE_binary_or_ternary_builtin_function = 521
    RULE_ternary_builtin_function = 522
    RULE_list_function = 523
    RULE_pattern = 524
    RULE_column_name = 525
    RULE_column_list = 526
    RULE_column_list_with_comment = 527
    RULE_object_name = 528
    RULE_object_name_or_identifier = 529
    RULE_num = 530
    RULE_expr_list = 531
    RULE_expr_list_sorted = 532
    RULE_expr = 533
    RULE_iff_expr = 534
    RULE_trim_expression = 535
    RULE_try_cast_expr = 536
    RULE_cast_expr = 537
    RULE_json_literal = 538
    RULE_kv_pair = 539
    RULE_value = 540
    RULE_arr_literal = 541
    RULE_data_type_size = 542
    RULE_data_type = 543
    RULE_primitive_expression = 544
    RULE_order_by_expr = 545
    RULE_asc_desc = 546
    RULE_over_clause = 547
    RULE_function_call = 548
    RULE_param_assoc_list = 549
    RULE_param_assoc = 550
    RULE_ignore_or_repect_nulls = 551
    RULE_ranking_windowed_function = 552
    RULE_aggregate_function = 553
    RULE_literal = 554
    RULE_sign = 555
    RULE_full_column_name = 556
    RULE_bracket_expression = 557
    RULE_case_expression = 558
    RULE_switch_search_condition_section = 559
    RULE_switch_section = 560
    RULE_query_statement = 561
    RULE_with_expression = 562
    RULE_common_table_expression = 563
    RULE_select_statement = 564
    RULE_set_operators = 565
    RULE_select_statement_in_parentheses = 566
    RULE_select_optional_clauses = 567
    RULE_select_clause = 568
    RULE_select_top_clause = 569
    RULE_select_list_no_top = 570
    RULE_select_list_top = 571
    RULE_select_list = 572
    RULE_select_list_elem = 573
    RULE_column_elem_star = 574
    RULE_column_elem = 575
    RULE_object_name_or_alias = 576
    RULE_exclude_clause = 577
    RULE_as_alias = 578
    RULE_expression_elem = 579
    RULE_column_position = 580
    RULE_all_distinct = 581
    RULE_top_clause = 582
    RULE_into_clause = 583
    RULE_var_list = 584
    RULE_var = 585
    RULE_from_clause = 586
    RULE_table_sources = 587
    RULE_table_source = 588
    RULE_table_source_item_joined = 589
    RULE_object_ref = 590
    RULE_flatten_table_option = 591
    RULE_flatten_table = 592
    RULE_splited_table = 593
    RULE_prior_list = 594
    RULE_prior_item = 595
    RULE_outer_join = 596
    RULE_join_type = 597
    RULE_join_clause = 598
    RULE_at_before = 599
    RULE_end = 600
    RULE_changes = 601
    RULE_default_append_only = 602
    RULE_partition_by = 603
    RULE_alias = 604
    RULE_expr_alias_list = 605
    RULE_measures = 606
    RULE_match_opts = 607
    RULE_row_match = 608
    RULE_first_last = 609
    RULE_symbol = 610
    RULE_after_match = 611
    RULE_symbol_list = 612
    RULE_define = 613
    RULE_match_recognize = 614
    RULE_pivot_unpivot = 615
    RULE_column_alias_list_in_brackets = 616
    RULE_expr_list_in_parentheses = 617
    RULE_values_table = 618
    RULE_values_table_body = 619
    RULE_sample_method = 620
    RULE_repeatable_seed = 621
    RULE_sample_opts = 622
    RULE_sample = 623
    RULE_search_condition = 624
    RULE_comparison_operator = 625
    RULE_null_not_null = 626
    RULE_subquery = 627
    RULE_predicate = 628
    RULE_where_clause = 629
    RULE_group_by_elem = 630
    RULE_group_by_list = 631
    RULE_group_by_clause = 632
    RULE_having_clause = 633
    RULE_qualify_clause = 634
    RULE_order_item = 635
    RULE_order_by_clause = 636
    RULE_row_rows = 637
    RULE_first_next = 638
    RULE_limit_clause = 639
    RULE_round_mode = 640
    RULE_round_expr = 641

    ruleNames =  [ "snowflake_file", "batch", "sql_command", "ddl_command", 
                   "dml_command", "insert_statement", "insert_multi_table_statement", 
                   "into_clause2", "values_list", "value_item", "merge_statement", 
                   "merge_matches", "merge_cond", "merge_update_delete", 
                   "merge_insert", "update_statement", "table_or_query", 
                   "delete_statement", "values_builder", "other_command", 
                   "begin_txn", "copy_into_table", "external_location", 
                   "files", "file_format", "format_name", "format_type", 
                   "stage_file_format", "copy_into_location", "comment", 
                   "function_signature", "commit", "execute_immediate", 
                   "execute_task", "explain", "parallel", "get_dml", "grant_ownership", 
                   "grant_to_role", "global_privileges", "global_privilege", 
                   "account_object_privileges", "account_object_privilege", 
                   "schema_privileges", "schema_privilege", "schema_object_privileges", 
                   "schema_object_privilege", "grant_to_share", "object_privilege", 
                   "grant_role", "role_name", "system_defined_role", "list", 
                   "user_stage", "table_stage", "named_stage", "stage_path", 
                   "put", "remove", "revoke_from_role", "revoke_from_share", 
                   "revoke_role", "rollback", "set", "truncate_materialized_view", 
                   "truncate_table", "unset", "alter_command", "account_params", 
                   "object_params", "default_ddl_collation", "object_properties", 
                   "session_params", "alter_account", "enabled_true_false", 
                   "alter_alert", "resume_suspend", "alert_set_clause", 
                   "alert_unset_clause", "alter_api_integration", "api_integration_property", 
                   "alter_connection", "alter_database", "database_property", 
                   "account_id_list", "alter_dataset", "alter_dynamic_table", 
                   "id_list", "alter_external_table", "ignore_edition_check", 
                   "replication_schedule", "db_name_list", "share_name_list", 
                   "full_acct_list", "alter_failover_group", "alter_file_format", 
                   "alter_function", "alter_function_signature", "data_type_list", 
                   "alter_git_repository", "alter_git_set_opts", "alter_git_unset_opts", 
                   "alter_masking_policy", "alter_materialized_view", "alter_network_policy", 
                   "alter_notification_integration", "alter_pipe", "alter_procedure", 
                   "alter_replication_group", "credit_quota", "frequency", 
                   "notify_users", "triggerDefinition", "alter_resource_monitor", 
                   "alter_role", "alter_row_access_policy", "alter_schema", 
                   "schema_property", "alter_sequence", "alter_secret", 
                   "secret_opts", "secret_set_opts", "secret_oauth_client_creds_opts", 
                   "secret_oauth_auth_code_opts", "secret_api_auth_opts", 
                   "secret_basic_auth_opts", "secret_generic_string_opts", 
                   "alter_security_integration_external_oauth", "security_integration_external_oauth_property", 
                   "alter_security_integration_snowflake_oauth", "security_integration_snowflake_oauth_property", 
                   "alter_security_integration_saml2", "alter_security_integration_scim", 
                   "security_integration_scim_property", "alter_session", 
                   "alter_session_policy", "alter_password_policy", "alter_share", 
                   "alter_storage_integration", "alter_stream", "alter_table", 
                   "rls_operations", "clustering_action", "table_column_action", 
                   "alter_column_clause", "inline_constraint", "enforced_not_enforced", 
                   "deferrable_not_deferrable", "initially_deferred_or_immediate", 
                   "common_constraint_properties", "on_update", "on_delete", 
                   "foreign_key_match", "on_action", "constraint_properties", 
                   "ext_table_column_action", "constraint_action", "search_optimization_action", 
                   "search_method_with_target", "alter_table_alter_column", 
                   "alter_column_decl_list", "alter_column_decl", "alter_column_opts", 
                   "column_set_tags", "column_unset_tags", "alter_tag", 
                   "alter_task", "alter_user", "alter_view", "alter_modify", 
                   "alter_warehouse", "alter_connection_opts", "alter_user_opts", 
                   "alter_tag_opts", "alter_network_policy_opts", "alter_warehouse_opts", 
                   "alter_account_opts", "set_tags", "tag_decl_list", "unset_tags", 
                   "tag_list", "create_command", "create_account", "create_alert", 
                   "alert_condition", "alert_action", "create_api_integration", 
                   "create_object_clone", "create_connection", "create_database", 
                   "clone_at_before", "at_before1", "header_decl", "compression_type", 
                   "compression", "create_dataset", "create_dynamic_table", 
                   "dynamic_table_params", "dynamic_table_settable_params", 
                   "dynamic_table_unsettable_params", "data_retention_params", 
                   "set_data_retention_params", "create_event_table", "create_external_function", 
                   "create_external_table", "external_table_column_decl", 
                   "external_table_column_decl_list", "full_acct", "integration_type_name", 
                   "create_failover_group", "type_fileformat", "create_file_format", 
                   "arg_decl", "arg_default_value_clause", "col_decl", "virtual_column_decl", 
                   "function_definition", "create_function", "create_git_repository", 
                   "create_git_opts", "create_managed_account", "create_masking_policy", 
                   "tag_decl", "column_list_in_parentheses", "create_materialized_view", 
                   "create_network_policy", "cloud_provider_params_auto", 
                   "cloud_provider_params_push", "create_notification_integration", 
                   "create_pipe", "caller_owner", "executa_as", "procedure_definition", 
                   "not_null", "create_procedure", "create_replication_group", 
                   "create_resource_monitor", "create_role", "create_row_access_policy", 
                   "create_schema", "create_secret", "create_security_integration_external_oauth", 
                   "implicit_none", "create_security_integration_snowflake_oauth", 
                   "create_security_integration_saml2", "create_security_integration_scim", 
                   "network_policy", "partner_application", "start_with", 
                   "increment_by", "create_sequence", "create_session_policy", 
                   "session_policy_params", "session_policy_param_name", 
                   "create_password_policy", "password_policy_params", "password_policy_param_name", 
                   "create_share", "character", "format_type_options", "copy_options", 
                   "stage_encryption_opts_internal", "stage_type", "stage_master_key", 
                   "stage_kms_key", "stage_encryption_opts_aws", "aws_token", 
                   "aws_key_id", "aws_secret_key", "aws_role", "azure_encryption_value", 
                   "stage_encryption_opts_az", "storage_integration_eq_id", 
                   "az_credential_or_storage_integration", "gcp_encryption_value", 
                   "stage_encryption_opts_gcp", "aws_credential_or_storage_integration", 
                   "external_stage_params", "true_false", "enable", "refresh_on_create", 
                   "auto_refresh", "notification_integration", "directory_table_internal_params", 
                   "directory_table_external_params", "create_stage", "alter_stage", 
                   "drop_stage", "describe_stage", "show_stages", "cloud_provider_params", 
                   "cloud_provider_params2", "cloud_provider_params3", "create_storage_integration", 
                   "copy_grants", "append_only", "insert_only", "show_initial_rows", 
                   "stream_time", "create_stream", "temporary", "table_type", 
                   "with_tags", "with_row_access_policy", "cluster_by", 
                   "change_tracking", "with_masking_policy", "collate", 
                   "order_noorder", "default_value", "foreign_key", "primary_key", 
                   "out_of_line_constraint", "full_col_decl", "materialized_col_decl", 
                   "materialized_col_decl_list", "column_decl_item", "column_decl_item_list", 
                   "create_table", "column_decl_item_list_paren", "create_table_clause", 
                   "create_table_as_select", "create_table_like", "create_tag", 
                   "tag_allowed_values", "session_parameter", "session_parameter_list", 
                   "session_params_list", "create_task", "task_parameters", 
                   "task_compute", "task_schedule", "task_timeout", "task_suspend_after_failure_number", 
                   "task_error_integration", "task_overlap", "sql", "call", 
                   "create_user", "view_col", "create_view", "create_warehouse", 
                   "wh_common_size", "wh_extra_size", "wh_properties", "wh_params", 
                   "trigger_definition", "object_type_name", "object_type_plural", 
                   "drop_command", "drop_object", "drop_alert", "drop_connection", 
                   "drop_database", "drop_dynamic_table", "drop_external_table", 
                   "drop_failover_group", "drop_file_format", "drop_function", 
                   "drop_git_repository", "drop_integration", "drop_managed_account", 
                   "drop_masking_policy", "drop_materialized_view", "drop_network_policy", 
                   "drop_pipe", "drop_procedure", "drop_replication_group", 
                   "drop_resource_monitor", "drop_role", "drop_row_access_policy", 
                   "drop_schema", "drop_secret", "drop_sequence", "drop_session_policy", 
                   "drop_password_policy", "drop_share", "drop_stream", 
                   "drop_table", "drop_tag", "drop_task", "drop_user", "drop_view", 
                   "drop_warehouse", "cascade_restrict", "arg_types", "undrop_command", 
                   "undrop_database", "undrop_schema", "undrop_table", "undrop_tag", 
                   "use_command", "use_database", "use_role", "use_schema", 
                   "use_secondary_roles", "use_warehouse", "comment_clause", 
                   "inline_comment_clause", "if_suspended", "if_exists", 
                   "if_not_exists", "or_replace", "or_alter", "describe", 
                   "describe_command", "describe_alert", "describe_database", 
                   "describe_dynamic_table", "describe_event_table", "describe_external_table", 
                   "describe_file_format", "describe_function", "describe_git_repository", 
                   "describe_integration", "describe_masking_policy", "describe_materialized_view", 
                   "describe_network_policy", "describe_pipe", "describe_procedure", 
                   "describe_result", "describe_row_access_policy", "describe_schema", 
                   "describe_search_optimization", "describe_sequence", 
                   "describe_session_policy", "describe_password_policy", 
                   "describe_share", "describe_stream", "describe_table", 
                   "describe_task", "describe_transaction", "describe_user", 
                   "describe_view", "describe_warehouse", "show_command", 
                   "show_alerts", "show_channels", "show_columns", "show_connections", 
                   "starts_with", "limit_rows", "show_databases", "show_databases_in_failover_group", 
                   "show_databases_in_replication_group", "show_datasets", 
                   "show_delegated_authorizations", "show_dynamic_tables", 
                   "show_event_tables", "show_external_functions", "show_external_tables", 
                   "show_failover_groups", "show_file_formats", "show_functions", 
                   "show_git_branches", "show_git_repositories", "show_git_tags", 
                   "show_global_accounts", "show_grants", "show_grants_opts", 
                   "show_integrations", "show_locks", "show_managed_accounts", 
                   "show_masking_policies", "in_obj", "in_obj_2", "show_materialized_views", 
                   "show_network_policies", "show_objects", "show_organization_accounts", 
                   "in_for", "show_parameters", "show_pipes", "show_primary_keys", 
                   "show_procedures", "show_regions", "show_replication_accounts", 
                   "show_replication_databases", "show_replication_groups", 
                   "show_resource_monitors", "show_roles", "show_row_access_policies", 
                   "show_schemas", "show_secrets", "show_sequences", "show_session_policies", 
                   "show_password_policies", "show_shares", "show_shares_in_failover_group", 
                   "show_shares_in_replication_group", "show_streams", "show_tables", 
                   "show_tags", "show_tasks", "show_transactions", "show_user_functions", 
                   "show_users", "show_variables", "show_versions_in_dataset", 
                   "show_views", "show_warehouses", "like_pattern", "account_identifier", 
                   "schema_name", "object_type", "object_type_list", "tag_value", 
                   "arg_data_type", "arg_name", "param_name", "region_group_id", 
                   "snowflake_region_id", "string", "string_list", "id_fn", 
                   "id_", "keyword", "non_reserved_words", "builtin_function", 
                   "unary_or_binary_builtin_function", "binary_builtin_function", 
                   "binary_or_ternary_builtin_function", "ternary_builtin_function", 
                   "list_function", "pattern", "column_name", "column_list", 
                   "column_list_with_comment", "object_name", "object_name_or_identifier", 
                   "num", "expr_list", "expr_list_sorted", "expr", "iff_expr", 
                   "trim_expression", "try_cast_expr", "cast_expr", "json_literal", 
                   "kv_pair", "value", "arr_literal", "data_type_size", 
                   "data_type", "primitive_expression", "order_by_expr", 
                   "asc_desc", "over_clause", "function_call", "param_assoc_list", 
                   "param_assoc", "ignore_or_repect_nulls", "ranking_windowed_function", 
                   "aggregate_function", "literal", "sign", "full_column_name", 
                   "bracket_expression", "case_expression", "switch_search_condition_section", 
                   "switch_section", "query_statement", "with_expression", 
                   "common_table_expression", "select_statement", "set_operators", 
                   "select_statement_in_parentheses", "select_optional_clauses", 
                   "select_clause", "select_top_clause", "select_list_no_top", 
                   "select_list_top", "select_list", "select_list_elem", 
                   "column_elem_star", "column_elem", "object_name_or_alias", 
                   "exclude_clause", "as_alias", "expression_elem", "column_position", 
                   "all_distinct", "top_clause", "into_clause", "var_list", 
                   "var", "from_clause", "table_sources", "table_source", 
                   "table_source_item_joined", "object_ref", "flatten_table_option", 
                   "flatten_table", "splited_table", "prior_list", "prior_item", 
                   "outer_join", "join_type", "join_clause", "at_before", 
                   "end", "changes", "default_append_only", "partition_by", 
                   "alias", "expr_alias_list", "measures", "match_opts", 
                   "row_match", "first_last", "symbol", "after_match", "symbol_list", 
                   "define", "match_recognize", "pivot_unpivot", "column_alias_list_in_brackets", 
                   "expr_list_in_parentheses", "values_table", "values_table_body", 
                   "sample_method", "repeatable_seed", "sample_opts", "sample", 
                   "search_condition", "comparison_operator", "null_not_null", 
                   "subquery", "predicate", "where_clause", "group_by_elem", 
                   "group_by_list", "group_by_clause", "having_clause", 
                   "qualify_clause", "order_item", "order_by_clause", "row_rows", 
                   "first_next", "limit_clause", "round_mode", "round_expr" ]

    EOF = Token.EOF
    AAD_PROVISIONER_Q=1
    ABORT=2
    ABORT_DETACHED_QUERY=3
    ABORT_STATEMENT=4
    ACCESS=5
    ACCOUNT=6
    ACCOUNTADMIN=7
    ACCOUNTS=8
    ACTION=9
    ADD=10
    ADMIN_NAME=11
    ADMIN_PASSWORD=12
    AES=13
    AFTER=14
    ALERT=15
    ALERTS=16
    ALL=17
    ALLOWED_ACCOUNTS=18
    ALLOWED_DATABASES=19
    ALLOWED_INTEGRATION_TYPES=20
    ALLOWED_IP_LIST=21
    ALLOWED_SHARES=22
    ALLOWED_VALUES=23
    ALLOW_CLIENT_MFA_CACHING=24
    ALLOW_DUPLICATE=25
    ALLOW_ID_TOKEN=26
    ALLOW_OVERLAPPING_EXECUTION=27
    ALTER=28
    AND=29
    ANY=30
    ANY_VALUE=31
    API=32
    API_ALLOWED_PREFIXES=33
    API_AUTHENTICATION=34
    API_AWS_ROLE_ARN=35
    API_BLOCKED_PREFIXES=36
    API_INTEGRATION=37
    API_KEY=38
    API_PROVIDER=39
    APPEND=40
    APPEND_ONLY=41
    APPLICATION=42
    APPLY=43
    ARRAY_AGG=44
    AS=45
    ASC=46
    ATTACH=47
    AT_KEYWORD=48
    AUTHORIZATION=49
    AUTHORIZATIONS=50
    AUTO=51
    AUTO_Q=52
    AUTOCOMMIT=53
    AUTOCOMMIT_API_SUPPORTED=54
    AUTOINCREMENT=55
    AUTO_COMPRESS=56
    AUTO_DETECT=57
    AUTO_INGEST=58
    AUTO_REFRESH=59
    AUTO_RESUME=60
    AUTO_SUSPEND=61
    AVG=62
    AVRO=63
    AVRO_Q=64
    AWS_KEY_ID=65
    AWS_ROLE=66
    AWS_SECRET_KEY=67
    AWS_SNS=68
    AWS_SNS_ROLE_ARN=69
    AWS_SNS_TOPIC=70
    AWS_SNS_TOPIC_ARN=71
    AWS_TOKEN=72
    AZURE=73
    AZURE_AD_APPLICATION_ID=74
    AZURE_CSE_Q=75
    AZURE_EVENT_GRID=76
    AZURE_EVENT_GRID_TOPIC_ENDPOINT=77
    AZURE_Q=78
    AZURE_SAS_TOKEN=79
    AZURE_STORAGE_QUEUE_PRIMARY_URI=80
    AZURE_TENANT_ID=81
    BASE64=82
    BEFORE=83
    BEGIN=84
    BERNOULLI=85
    BETWEEN=86
    BINARY_AS_TEXT=87
    BINARY_FORMAT=88
    BINARY_INPUT_FORMAT=89
    BINARY_OUTPUT_FORMAT=90
    BLOCK=91
    BLOCKED_IP_LIST=92
    BLOCKED_ROLES_LIST=93
    BODY=94
    BOTH_Q=95
    BRANCHES=96
    BROTLI=97
    BUSINESS_CRITICAL=98
    BY=99
    BZ2=100
    CALL=101
    CALLED=102
    CALLER=103
    CASCADE=104
    CASE=105
    CASE_INSENSITIVE=106
    CASE_SENSITIVE=107
    CAST=108
    CEIL=109
    CHANGES=110
    CHANGE_TRACKING=111
    CHANNELS=112
    CHAR=113
    CHARACTER=114
    CHARINDEX=115
    CHECK=116
    CHECKSUM=117
    CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS=118
    CLIENT_ENCRYPTION_KEY_SIZE=119
    CLIENT_MEMORY_LIMIT=120
    CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX=121
    CLIENT_METADATA_USE_SESSION_DATABASE=122
    CLIENT_PREFETCH_THREADS=123
    CLIENT_RESULT_CHUNK_SIZE=124
    CLIENT_RESULT_COLUMN_CASE_INSENSITIVE=125
    CLIENT_SESSION_KEEP_ALIVE=126
    CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY=127
    CLIENT_TIMESTAMP_TYPE_MAPPING=128
    CLONE=129
    CLOUD_PROVIDER_TOKEN=130
    CLUSTER=131
    CLUSTERING=132
    COALESCE=133
    COLLATE=134
    COLLECTION=135
    COLUMN=136
    COLUMNS=137
    COMMENT=138
    COMMIT=139
    COMPRESSION=140
    CONCAT=141
    CONCAT_WS=142
    CONDITION=143
    CONFIGURATION=144
    CONNECT=145
    CONNECTION=146
    CONNECTIONS=147
    CONSTRAINT=148
    CONTAINS=149
    CONTEXT_HEADERS=150
    CONTINUE=151
    COPY=152
    COPY_OPTIONS_=153
    COUNT=154
    CREATE=155
    CREDENTIALS=156
    CREDIT_QUOTA=157
    CROSS=158
    CSV=159
    CSV_Q=160
    CUBE=161
    CURRENT=162
    CURRENT_DATE=163
    CURRENT_TIME=164
    CURRENT_TIMESTAMP=165
    CUSTOM=166
    DAILY=167
    DATA=168
    DATABASE=169
    DATABASES=170
    DATASET=171
    DATASETS=172
    DATA_RETENTION_TIME_IN_DAYS=173
    DATEADD=174
    DATEDIFF=175
    DATE_FORMAT=176
    DATE_INPUT_FORMAT=177
    DATE_OUTPUT_FORMAT=178
    DATE_PART=179
    DAYS=180
    DAYS_TO_EXPIRY=181
    DEFAULT=182
    DEFAULT_DDL_COLLATION_=183
    DEFAULT_NAMESPACE=184
    DEFAULT_ROLE=185
    DEFAULT_WAREHOUSE=186
    DEFERRABLE=187
    DEFERRED=188
    DEFINE=189
    DEFINITION=190
    DEFLATE=191
    DELEGATED=192
    DELETE=193
    DELTA=194
    DENSE_RANK=195
    DESC=196
    DESCRIBE=197
    DIRECTION=198
    DIRECTORY=199
    DISABLE=200
    DISABLED=201
    DISABLE_AUTO_CONVERT=202
    DISABLE_SNOWFLAKE_DATA=203
    DISPLAY_NAME=204
    DISTINCT=205
    DO=206
    DOWNSTREAM=207
    DROP=208
    DYNAMIC=209
    ECONOMY=210
    EDITION=211
    ELSE=212
    EMAIL=213
    EMPTY_=214
    EMPTY_FIELD_AS_NULL=215
    ENABLE=216
    ENABLED=217
    ENABLE_FOR_PRIVILEGE=218
    ENABLE_INTERNAL_STAGES_PRIVATELINK=219
    ENABLE_OCTAL=220
    ENABLE_QUERY_ACCELERATION=221
    ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION=222
    ENCODING=223
    ENCRYPTION=224
    END=225
    END_TIMESTAMP=226
    ENFORCED=227
    ENFORCE_LENGTH=228
    ENFORCE_SESSION_POLICY=229
    ENTERPRISE=230
    EQUAL_NULL=231
    EQUALITY=232
    ERROR_INTEGRATION=233
    ERROR_ON_COLUMN_COUNT_MISMATCH=234
    ERROR_ON_NONDETERMINISTIC_MERGE=235
    ERROR_ON_NONDETERMINISTIC_UPDATE=236
    ESCAPE=237
    ESCAPE_UNENCLOSED_FIELD=238
    EVENT=239
    EXCEPT=240
    EXCLUDE=241
    EXCHANGE=242
    EXECUTE=243
    EXECUTION=244
    EXISTS=245
    EXPIRY_DATE=246
    EXPLAIN=247
    EXPR=248
    EXTERNAL=249
    EXTERNAL_OAUTH=250
    EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST=251
    EXTERNAL_OAUTH_ALLOWED_ROLES_LIST=252
    EXTERNAL_OAUTH_ANY_ROLE_MODE=253
    EXTERNAL_OAUTH_AUDIENCE_LIST=254
    EXTERNAL_OAUTH_BLOCKED_ROLES_LIST=255
    EXTERNAL_OAUTH_ISSUER=256
    EXTERNAL_OAUTH_JWS_KEYS_URL=257
    EXTERNAL_OAUTH_RSA_PUBLIC_KEY=258
    EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2=259
    EXTERNAL_OAUTH_SCOPE_DELIMITER=260
    EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE=261
    EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM=262
    EXTERNAL_OAUTH_TYPE=263
    EXTERNAL_STAGE=264
    FAILOVER=265
    FALSE=266
    FETCH=267
    FIELD_DELIMITER=268
    FIELD_OPTIONALLY_ENCLOSED_BY=269
    FILE=270
    FILES=271
    FILE_EXTENSION=272
    FILE_FORMAT=273
    FIRST=274
    FIRST_NAME=275
    FIRST_VALUE=276
    FLATTEN=277
    FOR=278
    FORCE=279
    FOREIGN=280
    FORMAT=281
    FORMATS=282
    FORMAT_NAME=283
    FREQUENCY=284
    FROM=285
    FULL=286
    FUNCTION=287
    FUNCTIONS=288
    FUTURE=289
    GCP_PUBSUB=290
    GCP_PUBSUB_SUBSCRIPTION_NAME=291
    GCP_PUBSUB_TOPIC_NAME=292
    GCS=293
    GCS_SSE_KMS_Q=294
    GENERIC=295
    GENERIC_Q=296
    GENERIC_SCIM_PROVISIONER_Q=297
    GENERIC_STRING=298
    GEO=299
    GEOGRAPHY_OUTPUT_FORMAT=300
    GEOMETRY_OUTPUT_FORMAT=301
    GET=302
    GETDATE=303
    GIT=304
    GIT_CREDENTIALS=305
    GLOBAL=306
    GOOGLE_AUDIENCE=307
    GRANT=308
    GRANTS=309
    GROUP=310
    GROUPING=311
    GROUPS=312
    GZIP=313
    HALF_AWAY_FROM_ZERO_Q=314
    HALF_TO_EVEN_Q=315
    HANDLER=316
    HASH=317
    HAVING=318
    HEADER=319
    HEADERS=320
    HEX=321
    HIGH=322
    HISTORY=323
    HOURS=324
    IDENTIFIER=325
    IDENTITY=326
    IF=327
    IFF=328
    IFNULL=329
    IGNORE=330
    IGNORE_UTF8_ERRORS=331
    ILIKE=332
    IMMEDIATE=333
    IMMEDIATELY=334
    IMMUTABLE=335
    IMPLICIT=336
    IMPORT=337
    IMPORTS=338
    IMPORTED=339
    IN=340
    INCREMENT=341
    INCREMENTAL=342
    INDEX=343
    INFORMATION=344
    INITIALIZE=345
    INITIALLY=346
    INITIALLY_SUSPENDED=347
    INITIAL_REPLICATION_SIZE_LIMIT_IN_TB=348
    INNER=349
    INPUT=350
    INSERT=351
    INSERT_ONLY=352
    INT=353
    INTEGRATION=354
    INTEGRATIONS=355
    INTERSECT=356
    INTERVAL=357
    INTO=358
    IS=359
    JAVA=360
    JAVASCRIPT=361
    JDBC_TREAT_DECIMAL_AS_INT=362
    JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC=363
    JDBC_USE_SESSION_TIMEZONE=364
    JOIN=365
    JSON=366
    JSON_Q=367
    JSON_INDENT=368
    JS_TREAT_INTEGER_AS_BIGINT=369
    KEY=370
    KEYS=371
    KMS_KEY_ID=372
    LAG=373
    LANGUAGE=374
    LARGE=375
    LAST=376
    LAST_NAME=377
    LAST_QUERY_ID=378
    LAST_VALUE=379
    LATERAL=380
    LEAD=381
    LEFT=382
    LEN=383
    LENGTH=384
    LIKE=385
    LIMIT=386
    LINEAR=387
    LIST=388
    LISTING=389
    LOCAL=390
    LOCATION=391
    LOCKS=392
    LOCK_TIMEOUT=393
    LOGIN_NAME=394
    LOOKER=395
    LOW=396
    LOWER=397
    LTRIM=398
    LZO=399
    MANAGE=400
    MANAGED=401
    MASKING=402
    MASTER_KEY=403
    MATCH=404
    MATCHED=405
    MATCHES=406
    MATCH_BY_COLUMN_NAME=407
    MATCH_RECOGNIZE=408
    MATERIALIZED=409
    MAX_BATCH_ROWS=410
    MAX_CLUSTER_COUNT=411
    MAX_CONCURRENCY_LEVEL=412
    MAX_DATA_EXTENSION_TIME_IN_DAYS=413
    MAX_SIZE=414
    MEASURES=415
    MEDIUM=416
    MEMOIZABLE=417
    MERGE=418
    METADATA=419
    MIDDLE_NAME=420
    MIN=421
    MINS_TO_BYPASS_MFA=422
    MINS_TO_UNLOCK=423
    MINUS_=424
    MIN_CLUSTER_COUNT=425
    MIN_DATA_RETENTION_TIME_IN_DAYS=426
    MODE=427
    MODIFIED_AFTER=428
    MODIFY=429
    MONITOR=430
    MONITORS=431
    MONTHLY=432
    MOVE=433
    MULTI_STATEMENT_COUNT=434
    MUST_CHANGE_PASSWORD=435
    NAME=436
    NATURAL=437
    NETWORK=438
    NETWORK_POLICY=439
    NEVER=440
    NEXT=441
    NEXTVAL=442
    NO=443
    NONE=444
    NONE_Q=445
    NOORDER=446
    NORELY=447
    NOT=448
    NOTIFICATION=449
    NOTIFICATION_INTEGRATION=450
    NOTIFICATION_PROVIDER=451
    NOTIFY=452
    NOTIFY_USERS=453
    NOVALIDATE=454
    NTILE=455
    NULLIF=456
    NULLS=457
    NULL_=458
    NULL_IF=459
    NUMBER=460
    NVL=461
    NVL2=462
    OAUTH=463
    OAUTH2=464
    OAUTH_ALLOW_NON_TLS_REDIRECT_URI=465
    OAUTH_CLIENT=466
    OAUTH_CLIENT_RSA_PUBLIC_KEY=467
    OAUTH_CLIENT_RSA_PUBLIC_KEY_2=468
    OAUTH_ENFORCE_PKCE=469
    OAUTH_ISSUE_REFRESH_TOKENS=470
    OAUTH_REDIRECT_URI=471
    OAUTH_REFRESH_TOKEN=472
    OAUTH_REFRESH_TOKEN_EXPIRY_TIME=473
    OAUTH_REFRESH_TOKEN_VALIDITY=474
    OAUTH_SCOPES=475
    OAUTH_USE_SECONDARY_ROLES=476
    OBJECT=477
    OBJECT_Q=478
    OBJECTS=479
    OBJECT_TYPES=480
    OF=481
    OFFSET=482
    OKTA=483
    OKTA_PROVISIONER_Q=484
    OKTA_Q=485
    OLD=486
    OMIT=487
    ON=488
    ONE=489
    ONLY=490
    ON_CREATE=491
    ON_ERROR=492
    ON_SCHEDULE=493
    OPERATE=494
    OPTIMIZATION=495
    OPTION=496
    OR=497
    ORC=498
    ORC_Q=499
    ORDER=500
    ORGADMIN=501
    ORGANIZATION=502
    ORIGIN=503
    OUTBOUND=504
    OUTER=505
    OVER=506
    OVERRIDE=507
    OVERWRITE=508
    OWNER=509
    OWNERSHIP=510
    PACKAGE=511
    PACKAGES=512
    PARALLEL=513
    PARAMETERS=514
    PARQUET=515
    PARQUET_Q=516
    PARTIAL=517
    PARTITION=518
    PARTITION_TYPE=519
    PASSWORD=520
    PASSWORD_HISTORY=521
    PASSWORD_LOCKOUT_TIME_MINS=522
    PASSWORD_MAX_AGE_DAYS=523
    PASSWORD_MAX_LENGTH=524
    PASSWORD_MAX_RETRIES=525
    PASSWORD_MIN_AGE_DAYS=526
    PASSWORD_MIN_LENGTH=527
    PASSWORD_MIN_LOWER_CASE_CHARS=528
    PASSWORD_MIN_NUMERIC_CHARS=529
    PASSWORD_MIN_SPECIAL_CHARS=530
    PASSWORD_MIN_UPPER_CASE_CHARS=531
    PAST=532
    PATH_=533
    PATTERN=534
    PER=535
    PERCENT=536
    PERIODIC_DATA_REKEYING=537
    PING_FEDERATE=538
    PIPE=539
    PIPES=540
    PIPE_EXECUTION_PAUSED=541
    PIVOT=542
    POLICIES=543
    POLICY=544
    PORT=545
    PREFIX=546
    PRESERVE_SPACE=547
    PREVENT_UNLOAD_TO_INLINE_URL=548
    PREVENT_UNLOAD_TO_INTERNAL_STAGES=549
    PRE_AUTHORIZED_ROLES_LIST=550
    PRIMARY=551
    PRIOR=552
    PRIORITY=553
    PRIVILEGES=554
    PROCEDURE=555
    PROCEDURES=556
    PROCEDURE_NAME=557
    PROPERTY=558
    PROVIDER=559
    PUBLIC=560
    PURGE=561
    PUT=562
    PYTHON=563
    QUALIFY=564
    QUARTER=565
    QUERIES=566
    QUERY=567
    QUERY_ACCELERATION_MAX_SCALE_FACTOR=568
    QUERY_TAG=569
    QUEUE=570
    QUOTED_IDENTIFIERS_IGNORE_CASE=571
    RANK=572
    RAW_DEFLATE=573
    READ=574
    READER=575
    RECLUSTER=576
    RECORD_DELIMITER=577
    RECURSIVE=578
    REFERENCES=579
    REFERENCE_USAGE=580
    REFRESH=581
    REFRESH_MODE=582
    REFRESH_ON_CREATE=583
    REGION=584
    REGIONS=585
    REGION_GROUP=586
    RELY=587
    REMOVE=588
    RENAME=589
    REPEATABLE=590
    REPLACE=591
    REPLACE_INVALID_CHARACTERS=592
    REPLICA=593
    REPLICATION=594
    REPLICATION_SCHEDULE=595
    REPOSITORY=596
    REPOSITORIES=597
    REQUEST_TRANSLATOR=598
    REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION=599
    REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION=600
    RESET=601
    RESOURCE=602
    RESOURCES=603
    RESOURCE_MONITOR=604
    RESPECT=605
    RESPONSE_TRANSLATOR=606
    RESTRICT=607
    RESTRICTIONS=608
    RESULT=609
    RESUME=610
    RETURNS=611
    RETURN_ALL_ERRORS=612
    RETURN_ERRORS=613
    RETURN_FAILED_ONLY=614
    RETURN_N_ROWS=615
    RETURN_ROWS=616
    REVOKE=617
    RIGHT=618
    RLIKE=619
    ROLE=620
    ROLES=621
    ROLLBACK=622
    ROLLUP=623
    ROUND=624
    ROUNDING_MODE=625
    ROW=626
    ROWS=627
    ROWS_PER_RESULTSET=628
    ROW_NUMBER=629
    RSA_PUBLIC_KEY=630
    RSA_PUBLIC_KEY_2=631
    RTRIM=632
    RUN_AS_ROLE=633
    RUNTIME_VERSION=634
    S3=635
    SAML2=636
    SAML2_ENABLE_SP_INITIATED=637
    SAML2_FORCE_AUTHN=638
    SAML2_ISSUER=639
    SAML2_POST_LOGOUT_REDIRECT_URL=640
    SAML2_PROVIDER=641
    SAML2_REQUESTED_NAMEID_FORMAT=642
    SAML2_SIGN_REQUEST=643
    SAML2_SNOWFLAKE_ACS_URL=644
    SAML2_SNOWFLAKE_ISSUER_URL=645
    SAML2_SNOWFLAKE_X509_CERT=646
    SAML2_SP_INITIATED_LOGIN_PAGE_LABEL=647
    SAML2_SSO_URL=648
    SAML2_X509_CERT=649
    SAML_IDENTITY_PROVIDER=650
    SAMPLE=651
    SAVE_OLD_URL=652
    SCALE=653
    SCALING_POLICY=654
    SCHEDULE=655
    SCHEMA=656
    SCHEMAS=657
    SCIM=658
    SCIM_CLIENT=659
    SEARCH=660
    SECONDARY=661
    SECRET=662
    SECRETS=663
    SECRET_STRING=664
    SECURE=665
    SECURITY=666
    SECURITYADMIN=667
    SEED=668
    SELECT=669
    SEQUENCE=670
    SEQUENCES=671
    SESSION=672
    SESSION_IDLE_TIMEOUT_MINS=673
    SESSION_POLICY=674
    SESSION_UI_IDLE_TIMEOUT_MINS=675
    SET=676
    SETS=677
    SHARE=678
    SHARES=679
    SHARE_RESTRICTIONS=680
    SHOW=681
    SHOW_INITIAL_ROWS=682
    SIMPLE=683
    SIMULATED_DATA_SHARING_CONSUMER=684
    SIZE_LIMIT=685
    SKIP_=686
    SKIP_BLANK_LINES=687
    SKIP_BYTE_ORDER_MARK=688
    SKIP_FILE=689
    SKIP_FILE_N=690
    SKIP_HEADER=691
    SMALL=692
    SNAPPY=693
    SNAPPY_COMPRESSION=694
    SNOWFLAKE_FULL=695
    SNOWFLAKE_SSE=696
    SNOWPARK_OPTIMIZED=697
    SOME=698
    SOURCE=699
    SOURCE_COMPRESSION=700
    SPLIT=701
    SPLIT_PART=702
    SPLIT_TO_TABLE=703
    SQL=704
    SSO_LOGIN_PAGE=705
    STAGE=706
    STAGES=707
    STAGE_COPY_OPTIONS=708
    STAGE_FILE_FORMAT=709
    STANDARD=710
    START=711
    STARTS=712
    START_DATE=713
    START_TIMESTAMP=714
    STATE=715
    STATEMENT=716
    STATEMENT_QUEUED_TIMEOUT_IN_SECONDS=717
    STATEMENT_TIMEOUT_IN_SECONDS=718
    STATS=719
    STATUS=720
    STORAGE=721
    STORAGE_ALLOWED_LOCATIONS=722
    STORAGE_AWS_OBJECT_ACL=723
    STORAGE_AWS_ROLE_ARN=724
    STORAGE_BLOCKED_LOCATIONS=725
    STORAGE_INTEGRATION=726
    STORAGE_PROVIDER=727
    STREAM=728
    STREAMS=729
    STRICT=730
    STRICT_JSON_OUTPUT=731
    STRIP_NULL_VALUES=732
    STRIP_OUTER_ARRAY=733
    STRIP_OUTER_ELEMENT=734
    SUBSTR=735
    SUBSTRING=736
    SUM=737
    SUSPEND=738
    SUSPENDED=739
    SUSPEND_IMMEDIATE=740
    SUSPEND_TASK_AFTER_NUM_FAILURES=741
    SWAP=742
    SYMMETRIC_KEY=743
    SYNC_PASSWORD=744
    SYSADMIN=745
    SYSTEM=746
    TABLE=747
    TABLEAU_DESKTOP=748
    TABLEAU_SERVER=749
    TABLES=750
    TABLESAMPLE=751
    TABLE_FORMAT=752
    TABULAR=753
    TAG=754
    TAGS=755
    TARGET_LAG=756
    TASK=757
    TASKS=758
    TEMP=759
    TEMPORARY=760
    TERSE=761
    THEN=762
    TIME=763
    TIMEADD=764
    TIMEDIFF=765
    TIMESTAMP=766
    TIMESTAMP_DAY_IS_ALWAYS_24H=767
    TIMESTAMP_FORMAT=768
    TIMESTAMP_INPUT_FORMAT=769
    TIMESTAMP_LTZ=770
    TIMESTAMP_LTZ_OUTPUT_FORMAT=771
    TIMESTAMP_NTZ=772
    TIMESTAMP_NTZ_OUTPUT_FORMAT=773
    TIMESTAMP_OUTPUT_FORMAT=774
    TIMESTAMP_TYPE_MAPPING=775
    TIMESTAMP_TZ=776
    TIMESTAMP_TZ_OUTPUT_FORMAT=777
    TIMESTAMPADD=778
    TIMESTAMPDIFF=779
    TIMEZONE=780
    TIME_FORMAT=781
    TIME_INPUT_FORMAT=782
    TIME_OUTPUT_FORMAT=783
    TO=784
    TO_BOOLEAN=785
    TO_DATE=786
    TO_TIMESTAMP=787
    TOP=788
    TRANSACTION=789
    TRANSACTIONS=790
    TRANSACTION_ABORT_ON_ERROR=791
    TRANSACTION_DEFAULT_ISOLATION_LEVEL=792
    TRANSIENT=793
    TRIGGERS=794
    TRIM=795
    TRIM_SPACE=796
    TRUE=797
    TRUNC=798
    TRUNCATE=799
    TRUNCATECOLUMNS=800
    TRY_CAST=801
    TWO_DIGIT_CENTURY_START=802
    TYPE=803
    UNDROP=804
    UNION=805
    UNIQUE=806
    UNMATCHED=807
    UNPIVOT=808
    UNSET=809
    UNSUPPORTED_DDL_ACTION=810
    UPDATE=811
    UPPER=812
    URL=813
    USAGE=814
    USE=815
    USER=816
    USERADMIN=817
    USERS=818
    USERNAME=819
    USER_SPECIFIED=820
    USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE=821
    USER_TASK_TIMEOUT_MS=822
    USE_ANY_ROLE=823
    USE_CACHED_RESULT=824
    USING=825
    UTF8=826
    VALIDATE=827
    VALIDATION_MODE=828
    VALUE=829
    VALUES=830
    VARIABLES=831
    VERSION=832
    VERSIONS=833
    VIEW=834
    VIEWS=835
    VISIBILITY=836
    VOLATILE=837
    WAREHOUSE=838
    WAREHOUSES=839
    WAREHOUSE_SIZE=840
    WAREHOUSE_TYPE=841
    WEEKLY=842
    WEEK_OF_YEAR_POLICY=843
    WEEK_START=844
    WHEN=845
    WHERE=846
    WITH=847
    WITHIN=848
    WORK=849
    WRITE=850
    X4LARGE=851
    X5LARGE=852
    X6LARGE=853
    XLARGE=854
    XML=855
    XML_Q=856
    XSMALL=857
    XXLARGE=858
    XXXLARGE=859
    YEARLY=860
    YEAR=861
    ZSTD=862
    ARRAY=863
    ARRAY_Q=864
    BIGINT=865
    BINARY=866
    BOOLEAN=867
    BYTEINT=868
    CHAR_VARYING=869
    DATE=870
    DATETIME=871
    DECIMAL_=872
    DOUBLE=873
    DOUBLE_PRECISION=874
    FLOAT4=875
    FLOAT8=876
    FLOAT_=877
    FLOOR=878
    GEOGRAPHY=879
    GEOMETRY=880
    INTEGER=881
    NCHAR=882
    NCHAR_VARYING=883
    NUMERIC=884
    NVARCHAR2=885
    NVARCHAR=886
    REAL_=887
    SMALLINT=888
    STRING_=889
    TEXT=890
    TINYINT=891
    VARBINARY=892
    VARCHAR=893
    VARIANT=894
    LISTAGG=895
    DUMMY=896
    SPACE=897
    SQL_COMMENT=898
    LINE_COMMENT=899
    LINE_COMMENT_2=900
    DOUBLE_QUOTE_ID=901
    DOUBLE_QUOTE_BLANK=902
    SINGLE_QUOTE=903
    ID=904
    ID2=905
    S3_PATH=906
    S3GOV_PATH=907
    GCS_PATH=908
    AZURE_PATH=909
    FILE_PATH=910
    DBL_DOLLAR=911
    STRING=912
    DECIMAL=913
    FLOAT=914
    REAL=915
    CHAR_LITERAL=916
    ARROW=917
    ASSOC=918
    NE=919
    LTGT=920
    EQ=921
    GT=922
    GE=923
    LT=924
    LE=925
    PIPE_PIPE=926
    DOT=927
    AT=928
    AT_Q=929
    DOLLAR=930
    LR_BRACKET=931
    RR_BRACKET=932
    LSB=933
    RSB=934
    LCB=935
    RCB=936
    COMMA=937
    SEMI=938
    COLON=939
    COLON_COLON=940
    STAR=941
    DIVIDE=942
    MODULE=943
    PLUS=944
    MINUS=945
    TILDA=946

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Snowflake_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SnowflakeParser.EOF, 0)

        def batch(self):
            return self.getTypedRuleContext(SnowflakeParser.BatchContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_snowflake_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnowflake_file" ):
                listener.enterSnowflake_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnowflake_file" ):
                listener.exitSnowflake_file(self)




    def snowflake_file(self):

        localctx = SnowflakeParser.Snowflake_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_snowflake_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28 or _la==84 or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & 20266610640027649) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 19140298416357401) != 0) or ((((_la - 302)) & ~0x3f) == 0 and ((1 << (_la - 302)) & 562949953421377) != 0) or _la==388 or _la==418 or ((((_la - 562)) & ~0x3f) == 0 and ((1 << (_la - 562)) & 1188950301692919809) != 0) or ((((_la - 669)) & ~0x3f) == 0 and ((1 << (_la - 669)) & 4398046515329) != 0) or ((((_la - 799)) & ~0x3f) == 0 and ((1 << (_la - 799)) & 281474976781345) != 0) or _la==931:
                self.state = 1284
                self.batch()


            self.state = 1287
            self.match(SnowflakeParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Sql_commandContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Sql_commandContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.SEMI)
            else:
                return self.getToken(SnowflakeParser.SEMI, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)




    def batch(self):

        localctx = SnowflakeParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.sql_command()
            self.state = 1294
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1290
                    self.match(SnowflakeParser.SEMI)
                    self.state = 1291
                    self.sql_command() 
                self.state = 1296
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==938:
                self.state = 1297
                self.match(SnowflakeParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddl_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Ddl_commandContext,0)


        def dml_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Dml_commandContext,0)


        def show_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_commandContext,0)


        def use_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Use_commandContext,0)


        def describe_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_commandContext,0)


        def other_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Other_commandContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_sql_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_command" ):
                listener.enterSql_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_command" ):
                listener.exitSql_command(self)




    def sql_command(self):

        localctx = SnowflakeParser.Sql_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_command)
        try:
            self.state = 1306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 155, 208, 804]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1300
                self.ddl_command()
                pass
            elif token in [193, 351, 418, 669, 811, 847, 931]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1301
                self.dml_command()
                pass
            elif token in [681]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1302
                self.show_command()
                pass
            elif token in [815]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1303
                self.use_command()
                pass
            elif token in [196, 197]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1304
                self.describe_command()
                pass
            elif token in [84, 101, 138, 139, 152, 243, 247, 302, 308, 388, 562, 588, 617, 622, 676, 711, 799, 809]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1305
                self.other_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_commandContext,0)


        def create_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_commandContext,0)


        def drop_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_commandContext,0)


        def undrop_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Undrop_commandContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_ddl_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_command" ):
                listener.enterDdl_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_command" ):
                listener.exitDdl_command(self)




    def ddl_command(self):

        localctx = SnowflakeParser.Ddl_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_ddl_command)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.alter_command()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self.create_command()
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1310
                self.drop_command()
                pass
            elif token in [804]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1311
                self.undrop_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Insert_statementContext,0)


        def insert_multi_table_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Insert_multi_table_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Update_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Delete_statementContext,0)


        def merge_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Merge_statementContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_dml_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_command" ):
                listener.enterDml_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_command" ):
                listener.exitDml_command(self)




    def dml_command(self):

        localctx = SnowflakeParser.Dml_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_command)
        try:
            self.state = 1320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1314
                self.query_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.insert_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1316
                self.insert_multi_table_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1317
                self.update_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1318
                self.delete_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1319
                self.merge_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(SnowflakeParser.INSERT, 0)

        def INTO(self):
            return self.getToken(SnowflakeParser.INTO, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def values_builder(self):
            return self.getTypedRuleContext(SnowflakeParser.Values_builderContext,0)


        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def OVERWRITE(self):
            return self.getToken(SnowflakeParser.OVERWRITE, 0)

        def column_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)




    def insert_statement(self):

        localctx = SnowflakeParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(SnowflakeParser.INSERT)
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==508:
                self.state = 1323
                self.match(SnowflakeParser.OVERWRITE)


            self.state = 1326
            self.match(SnowflakeParser.INTO)
            self.state = 1327
            self.object_name()
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 1328
                self.column_list_in_parentheses()


            self.state = 1333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [830]:
                self.state = 1331
                self.values_builder()
                pass
            elif token in [669, 847, 931]:
                self.state = 1332
                self.query_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_multi_table_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(SnowflakeParser.INSERT, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def into_clause2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Into_clause2Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Into_clause2Context,i)


        def OVERWRITE(self):
            return self.getToken(SnowflakeParser.OVERWRITE, 0)

        def subquery(self):
            return self.getTypedRuleContext(SnowflakeParser.SubqueryContext,0)


        def FIRST(self):
            return self.getToken(SnowflakeParser.FIRST, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.WHEN)
            else:
                return self.getToken(SnowflakeParser.WHEN, i)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.PredicateContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.PredicateContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.THEN)
            else:
                return self.getToken(SnowflakeParser.THEN, i)

        def ELSE(self):
            return self.getToken(SnowflakeParser.ELSE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_insert_multi_table_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_multi_table_statement" ):
                listener.enterInsert_multi_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_multi_table_statement" ):
                listener.exitInsert_multi_table_statement(self)




    def insert_multi_table_statement(self):

        localctx = SnowflakeParser.Insert_multi_table_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_insert_multi_table_statement)
        self._la = 0 # Token type
        try:
            self.state = 1364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self.match(SnowflakeParser.INSERT)
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==508:
                    self.state = 1336
                    self.match(SnowflakeParser.OVERWRITE)


                self.state = 1339
                self.match(SnowflakeParser.ALL)
                self.state = 1340
                self.into_clause2()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1341
                self.match(SnowflakeParser.INSERT)
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==508:
                    self.state = 1342
                    self.match(SnowflakeParser.OVERWRITE)


                self.state = 1345
                _la = self._input.LA(1)
                if not(_la==17 or _la==274):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1354 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1346
                    self.match(SnowflakeParser.WHEN)
                    self.state = 1347
                    self.predicate()
                    self.state = 1348
                    self.match(SnowflakeParser.THEN)
                    self.state = 1350 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1349
                        self.into_clause2()
                        self.state = 1352 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==358):
                            break

                    self.state = 1356 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==845):
                        break

                self.state = 1360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1358
                    self.match(SnowflakeParser.ELSE)
                    self.state = 1359
                    self.into_clause2()


                self.state = 1362
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clause2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(SnowflakeParser.INTO, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def values_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Values_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_into_clause2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause2" ):
                listener.enterInto_clause2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause2" ):
                listener.exitInto_clause2(self)




    def into_clause2(self):

        localctx = SnowflakeParser.Into_clause2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_into_clause2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(SnowflakeParser.INTO)
            self.state = 1367
            self.object_name()
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 1368
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 1369
                self.column_list()
                self.state = 1370
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==830:
                self.state = 1374
                self.values_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SnowflakeParser.VALUES, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def value_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Value_itemContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Value_itemContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_values_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_list" ):
                listener.enterValues_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_list" ):
                listener.exitValues_list(self)




    def values_list(self):

        localctx = SnowflakeParser.Values_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_values_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(SnowflakeParser.VALUES)
            self.state = 1378
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 1379
            self.value_item()
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 1380
                self.match(SnowflakeParser.COMMA)
                self.state = 1381
                self.value_item()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1387
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_value_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_item" ):
                listener.enterValue_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_item" ):
                listener.exitValue_item(self)




    def value_item(self):

        localctx = SnowflakeParser.Value_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_value_item)
        try:
            self.state = 1392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 62, 108, 109, 113, 114, 115, 117, 131, 134, 135, 138, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 190, 194, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 381, 382, 384, 385, 390, 396, 397, 412, 416, 421, 427, 436, 438, 446, 456, 460, 461, 462, 477, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 653, 655, 657, 667, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 904, 905]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self.column_name()
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1390
                self.match(SnowflakeParser.DEFAULT)
                pass
            elif token in [458]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1391
                self.match(SnowflakeParser.NULL_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(SnowflakeParser.MERGE, 0)

        def INTO(self):
            return self.getToken(SnowflakeParser.INTO, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def table_source(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_sourceContext,0)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def merge_matches(self):
            return self.getTypedRuleContext(SnowflakeParser.Merge_matchesContext,0)


        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)




    def merge_statement(self):

        localctx = SnowflakeParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(SnowflakeParser.MERGE)
            self.state = 1395
            self.match(SnowflakeParser.INTO)
            self.state = 1396
            self.object_name()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612020272244040384) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                self.state = 1397
                self.as_alias()


            self.state = 1400
            self.match(SnowflakeParser.USING)
            self.state = 1401
            self.table_source()
            self.state = 1402
            self.match(SnowflakeParser.ON)
            self.state = 1403
            self.search_condition(0)
            self.state = 1404
            self.merge_matches()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_matchesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Merge_condContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Merge_condContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_merge_matches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_matches" ):
                listener.enterMerge_matches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_matches" ):
                listener.exitMerge_matches(self)




    def merge_matches(self):

        localctx = SnowflakeParser.Merge_matchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_merge_matches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1406
                self.merge_cond()
                self.state = 1409 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==845):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.WHEN)
            else:
                return self.getToken(SnowflakeParser.WHEN, i)

        def MATCHED(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.MATCHED)
            else:
                return self.getToken(SnowflakeParser.MATCHED, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.THEN)
            else:
                return self.getToken(SnowflakeParser.THEN, i)

        def merge_update_delete(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Merge_update_deleteContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Merge_update_deleteContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.AND)
            else:
                return self.getToken(SnowflakeParser.AND, i)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,i)


        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def merge_insert(self):
            return self.getTypedRuleContext(SnowflakeParser.Merge_insertContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_merge_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_cond" ):
                listener.enterMerge_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_cond" ):
                listener.exitMerge_cond(self)




    def merge_cond(self):

        localctx = SnowflakeParser.Merge_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_merge_cond)
        self._la = 0 # Token type
        try:
            self.state = 1432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1419 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1411
                        self.match(SnowflakeParser.WHEN)
                        self.state = 1412
                        self.match(SnowflakeParser.MATCHED)
                        self.state = 1415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==29:
                            self.state = 1413
                            self.match(SnowflakeParser.AND)
                            self.state = 1414
                            self.search_condition(0)


                        self.state = 1417
                        self.match(SnowflakeParser.THEN)
                        self.state = 1418
                        self.merge_update_delete()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1421 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1423
                self.match(SnowflakeParser.WHEN)
                self.state = 1424
                self.match(SnowflakeParser.NOT)
                self.state = 1425
                self.match(SnowflakeParser.MATCHED)
                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 1426
                    self.match(SnowflakeParser.AND)
                    self.state = 1427
                    self.search_condition(0)


                self.state = 1430
                self.match(SnowflakeParser.THEN)
                self.state = 1431
                self.merge_insert()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_update_deleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SnowflakeParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def DELETE(self):
            return self.getToken(SnowflakeParser.DELETE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_merge_update_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_update_delete" ):
                listener.enterMerge_update_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_update_delete" ):
                listener.exitMerge_update_delete(self)




    def merge_update_delete(self):

        localctx = SnowflakeParser.Merge_update_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_merge_update_delete)
        self._la = 0 # Token type
        try:
            self.state = 1450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [811]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(SnowflakeParser.UPDATE)
                self.state = 1435
                self.match(SnowflakeParser.SET)
                self.state = 1436
                self.column_name()
                self.state = 1437
                self.match(SnowflakeParser.EQ)
                self.state = 1438
                self.expr(0)
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 1439
                    self.match(SnowflakeParser.COMMA)
                    self.state = 1440
                    self.column_name()
                    self.state = 1441
                    self.match(SnowflakeParser.EQ)
                    self.state = 1442
                    self.expr(0)
                    self.state = 1448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1449
                self.match(SnowflakeParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_insertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(SnowflakeParser.INSERT, 0)

        def VALUES(self):
            return self.getToken(SnowflakeParser.VALUES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_merge_insert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_insert" ):
                listener.enterMerge_insert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_insert" ):
                listener.exitMerge_insert(self)




    def merge_insert(self):

        localctx = SnowflakeParser.Merge_insertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_merge_insert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.match(SnowflakeParser.INSERT)
            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==931:
                self.state = 1453
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 1454
                self.column_list()
                self.state = 1455
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 1459
            self.match(SnowflakeParser.VALUES)
            self.state = 1460
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 1461
            self.expr_list()
            self.state = 1462
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SnowflakeParser.UPDATE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(SnowflakeParser.WHERE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)




    def update_statement(self):

        localctx = SnowflakeParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(SnowflakeParser.UPDATE)
            self.state = 1465
            self.object_name()
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612020272244040384) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                self.state = 1466
                self.as_alias()


            self.state = 1469
            self.match(SnowflakeParser.SET)
            self.state = 1470
            self.column_name()
            self.state = 1471
            self.match(SnowflakeParser.EQ)
            self.state = 1472
            self.expr(0)
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 1473
                self.match(SnowflakeParser.COMMA)
                self.state = 1474
                self.column_name()
                self.state = 1475
                self.match(SnowflakeParser.EQ)
                self.state = 1476
                self.expr(0)
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==285:
                self.state = 1483
                self.match(SnowflakeParser.FROM)
                self.state = 1484
                self.table_sources()


            self.state = 1489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==846:
                self.state = 1487
                self.match(SnowflakeParser.WHERE)
                self.state = 1488
                self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(SnowflakeParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_table_or_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_query" ):
                listener.enterTable_or_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_query" ):
                listener.exitTable_or_query(self)




    def table_or_query(self):

        localctx = SnowflakeParser.Table_or_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_table_or_query)
        self._la = 0 # Token type
        try:
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 62, 108, 109, 113, 114, 115, 117, 131, 134, 135, 138, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 190, 194, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 381, 382, 384, 385, 390, 396, 397, 412, 416, 421, 427, 436, 438, 446, 456, 460, 461, 462, 477, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 653, 655, 657, 667, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 904, 905]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                self.object_name()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612020272244040384) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 1492
                    self.as_alias()


                pass
            elif token in [931]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1495
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 1496
                self.subquery()
                self.state = 1497
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612020272244040384) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 1498
                    self.as_alias()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SnowflakeParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def table_or_query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Table_or_queryContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Table_or_queryContext,i)


        def WHERE(self):
            return self.getToken(SnowflakeParser.WHERE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)




    def delete_statement(self):

        localctx = SnowflakeParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.match(SnowflakeParser.DELETE)
            self.state = 1504
            self.match(SnowflakeParser.FROM)
            self.state = 1505
            self.object_name()
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4612020272244040384) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                self.state = 1506
                self.as_alias()


            self.state = 1515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==825:
                self.state = 1509
                self.match(SnowflakeParser.USING)
                self.state = 1510
                self.table_or_query()
                self.state = 1513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==937:
                    self.state = 1511
                    self.match(SnowflakeParser.COMMA)
                    self.state = 1512
                    self.table_or_query()




            self.state = 1519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==846:
                self.state = 1517
                self.match(SnowflakeParser.WHERE)
                self.state = 1518
                self.search_condition(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_builderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SnowflakeParser.VALUES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def expr_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Expr_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_values_builder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_builder" ):
                listener.enterValues_builder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_builder" ):
                listener.exitValues_builder(self)




    def values_builder(self):

        localctx = SnowflakeParser.Values_builderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_values_builder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(SnowflakeParser.VALUES)
            self.state = 1522
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 1523
            self.expr_list()
            self.state = 1524
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==937:
                self.state = 1525
                self.match(SnowflakeParser.COMMA)
                self.state = 1526
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 1527
                self.expr_list()
                self.state = 1528
                self.match(SnowflakeParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def copy_into_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_into_tableContext,0)


        def copy_into_location(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_into_locationContext,0)


        def comment(self):
            return self.getTypedRuleContext(SnowflakeParser.CommentContext,0)


        def commit(self):
            return self.getTypedRuleContext(SnowflakeParser.CommitContext,0)


        def execute_immediate(self):
            return self.getTypedRuleContext(SnowflakeParser.Execute_immediateContext,0)


        def execute_task(self):
            return self.getTypedRuleContext(SnowflakeParser.Execute_taskContext,0)


        def explain(self):
            return self.getTypedRuleContext(SnowflakeParser.ExplainContext,0)


        def get_dml(self):
            return self.getTypedRuleContext(SnowflakeParser.Get_dmlContext,0)


        def grant_ownership(self):
            return self.getTypedRuleContext(SnowflakeParser.Grant_ownershipContext,0)


        def grant_to_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Grant_to_roleContext,0)


        def grant_to_share(self):
            return self.getTypedRuleContext(SnowflakeParser.Grant_to_shareContext,0)


        def grant_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Grant_roleContext,0)


        def list_(self):
            return self.getTypedRuleContext(SnowflakeParser.ListContext,0)


        def put(self):
            return self.getTypedRuleContext(SnowflakeParser.PutContext,0)


        def remove(self):
            return self.getTypedRuleContext(SnowflakeParser.RemoveContext,0)


        def revoke_from_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Revoke_from_roleContext,0)


        def revoke_from_share(self):
            return self.getTypedRuleContext(SnowflakeParser.Revoke_from_shareContext,0)


        def revoke_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Revoke_roleContext,0)


        def rollback(self):
            return self.getTypedRuleContext(SnowflakeParser.RollbackContext,0)


        def set_(self):
            return self.getTypedRuleContext(SnowflakeParser.SetContext,0)


        def truncate_materialized_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Truncate_materialized_viewContext,0)


        def truncate_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Truncate_tableContext,0)


        def unset(self):
            return self.getTypedRuleContext(SnowflakeParser.UnsetContext,0)


        def call(self):
            return self.getTypedRuleContext(SnowflakeParser.CallContext,0)


        def begin_txn(self):
            return self.getTypedRuleContext(SnowflakeParser.Begin_txnContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_other_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_command" ):
                listener.enterOther_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_command" ):
                listener.exitOther_command(self)




    def other_command(self):

        localctx = SnowflakeParser.Other_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_other_command)
        try:
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.copy_into_table()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.copy_into_location()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1534
                self.comment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1535
                self.commit()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1536
                self.execute_immediate()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1537
                self.execute_task()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1538
                self.explain()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1539
                self.get_dml()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1540
                self.grant_ownership()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1541
                self.grant_to_role()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1542
                self.grant_to_share()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1543
                self.grant_role()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1544
                self.list_()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1545
                self.put()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1546
                self.remove()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1547
                self.revoke_from_role()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1548
                self.revoke_from_share()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1549
                self.revoke_role()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1550
                self.rollback()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1551
                self.set_()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1552
                self.truncate_materialized_view()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1553
                self.truncate_table()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1554
                self.unset()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1555
                self.call()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1556
                self.begin_txn()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_txnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(SnowflakeParser.BEGIN, 0)

        def NAME(self):
            return self.getToken(SnowflakeParser.NAME, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def WORK(self):
            return self.getToken(SnowflakeParser.WORK, 0)

        def TRANSACTION(self):
            return self.getToken(SnowflakeParser.TRANSACTION, 0)

        def START(self):
            return self.getToken(SnowflakeParser.START, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_begin_txn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_txn" ):
                listener.enterBegin_txn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_txn" ):
                listener.exitBegin_txn(self)




    def begin_txn(self):

        localctx = SnowflakeParser.Begin_txnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_begin_txn)
        self._la = 0 # Token type
        try:
            self.state = 1573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1559
                self.match(SnowflakeParser.BEGIN)
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==789 or _la==849:
                    self.state = 1560
                    _la = self._input.LA(1)
                    if not(_la==789 or _la==849):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==436:
                    self.state = 1563
                    self.match(SnowflakeParser.NAME)
                    self.state = 1564
                    self.id_()


                pass
            elif token in [711]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1567
                self.match(SnowflakeParser.START)
                self.state = 1568
                self.match(SnowflakeParser.TRANSACTION)
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==436:
                    self.state = 1569
                    self.match(SnowflakeParser.NAME)
                    self.state = 1570
                    self.id_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_into_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(SnowflakeParser.COPY, 0)

        def INTO(self):
            return self.getToken(SnowflakeParser.INTO, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.FROM)
            else:
                return self.getToken(SnowflakeParser.FROM, i)

        def table_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_stageContext,0)


        def user_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.User_stageContext,0)


        def named_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Named_stageContext,0)


        def external_location(self):
            return self.getTypedRuleContext(SnowflakeParser.External_locationContext,0)


        def files(self):
            return self.getTypedRuleContext(SnowflakeParser.FilesContext,0)


        def pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.PatternContext,0)


        def file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.File_formatContext,0)


        def copy_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Copy_optionsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Copy_optionsContext,i)


        def VALIDATION_MODE(self):
            return self.getToken(SnowflakeParser.VALIDATION_MODE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def RETURN_N_ROWS(self):
            return self.getToken(SnowflakeParser.RETURN_N_ROWS, 0)

        def RETURN_ERRORS(self):
            return self.getToken(SnowflakeParser.RETURN_ERRORS, 0)

        def RETURN_ALL_ERRORS(self):
            return self.getToken(SnowflakeParser.RETURN_ALL_ERRORS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def SELECT(self):
            return self.getToken(SnowflakeParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_listContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_copy_into_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_into_table" ):
                listener.enterCopy_into_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_into_table" ):
                listener.exitCopy_into_table(self)




    def copy_into_table(self):

        localctx = SnowflakeParser.Copy_into_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_copy_into_table)
        self._la = 0 # Token type
        try:
            self.state = 1640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1575
                self.match(SnowflakeParser.COPY)
                self.state = 1576
                self.match(SnowflakeParser.INTO)
                self.state = 1577
                self.object_name()
                self.state = 1578
                self.match(SnowflakeParser.FROM)
                self.state = 1583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 1579
                    self.table_stage()
                    pass

                elif la_ == 2:
                    self.state = 1580
                    self.user_stage()
                    pass

                elif la_ == 3:
                    self.state = 1581
                    self.named_stage()
                    pass

                elif la_ == 4:
                    self.state = 1582
                    self.external_location()
                    pass


                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271:
                    self.state = 1585
                    self.files()


                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==534:
                    self.state = 1588
                    self.pattern()


                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 1591
                    self.file_format()


                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==106 or _la==228 or _la==279 or _la==407 or _la==444 or _la==492 or _la==561 or _la==614 or _la==685 or _la==800:
                    self.state = 1594
                    self.copy_options()
                    self.state = 1599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==828:
                    self.state = 1600
                    self.match(SnowflakeParser.VALIDATION_MODE)
                    self.state = 1601
                    self.match(SnowflakeParser.EQ)
                    self.state = 1602
                    _la = self._input.LA(1)
                    if not(((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & 11) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.match(SnowflakeParser.COPY)
                self.state = 1606
                self.match(SnowflakeParser.INTO)
                self.state = 1607
                self.object_name()
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==931:
                    self.state = 1608
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 1609
                    self.column_list()
                    self.state = 1610
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 1614
                self.match(SnowflakeParser.FROM)
                self.state = 1615
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 1616
                self.match(SnowflakeParser.SELECT)
                self.state = 1617
                self.select_list()
                self.state = 1618
                self.match(SnowflakeParser.FROM)
                self.state = 1622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 1619
                    self.table_stage()
                    pass

                elif la_ == 2:
                    self.state = 1620
                    self.user_stage()
                    pass

                elif la_ == 3:
                    self.state = 1621
                    self.named_stage()
                    pass


                self.state = 1624
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 1626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==271:
                    self.state = 1625
                    self.files()


                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==534:
                    self.state = 1628
                    self.pattern()


                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 1631
                    self.file_format()


                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==106 or _la==228 or _la==279 or _la==407 or _la==444 or _la==492 or _la==561 or _la==614 or _la==685 or _la==800:
                    self.state = 1634
                    self.copy_options()
                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_locationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S3_PATH(self):
            return self.getToken(SnowflakeParser.S3_PATH, 0)

        def GCS_PATH(self):
            return self.getToken(SnowflakeParser.GCS_PATH, 0)

        def AZURE_PATH(self):
            return self.getToken(SnowflakeParser.AZURE_PATH, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_external_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_location" ):
                listener.enterExternal_location(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_location" ):
                listener.exitExternal_location(self)




    def external_location(self):

        localctx = SnowflakeParser.External_locationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_external_location)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            _la = self._input.LA(1)
            if not(((((_la - 906)) & ~0x3f) == 0 and ((1 << (_la - 906)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILES(self):
            return self.getToken(SnowflakeParser.FILES, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiles" ):
                listener.enterFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiles" ):
                listener.exitFiles(self)




    def files(self):

        localctx = SnowflakeParser.FilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.match(SnowflakeParser.FILES)
            self.state = 1645
            self.match(SnowflakeParser.EQ)
            self.state = 1646
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 1647
            self.string()
            self.state = 1652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 1648
                self.match(SnowflakeParser.COMMA)
                self.state = 1649
                self.string()
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1655
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE_FORMAT(self):
            return self.getToken(SnowflakeParser.FILE_FORMAT, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def format_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Format_nameContext,0)


        def format_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Format_typeContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_format" ):
                listener.enterFile_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_format" ):
                listener.exitFile_format(self)




    def file_format(self):

        localctx = SnowflakeParser.File_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_file_format)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.match(SnowflakeParser.FILE_FORMAT)
            self.state = 1658
            self.match(SnowflakeParser.EQ)
            self.state = 1659
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 1662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [283]:
                self.state = 1660
                self.format_name()
                pass
            elif token in [803]:
                self.state = 1661
                self.format_type()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1664
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_NAME(self):
            return self.getToken(SnowflakeParser.FORMAT_NAME, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_format_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_name" ):
                listener.enterFormat_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_name" ):
                listener.exitFormat_name(self)




    def format_name(self):

        localctx = SnowflakeParser.Format_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_format_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(SnowflakeParser.FORMAT_NAME)
            self.state = 1667
            self.match(SnowflakeParser.EQ)
            self.state = 1668
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def type_fileformat(self):
            return self.getTypedRuleContext(SnowflakeParser.Type_fileformatContext,0)


        def format_type_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Format_type_optionsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Format_type_optionsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_format_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_type" ):
                listener.enterFormat_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_type" ):
                listener.exitFormat_type(self)




    def format_type(self):

        localctx = SnowflakeParser.Format_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_format_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.match(SnowflakeParser.TYPE)
            self.state = 1671
            self.match(SnowflakeParser.EQ)
            self.state = 1672
            self.type_fileformat()
            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 9007199254750211) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 7205918283424366593) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & -9223336852482686957) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 1152956688978935809) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 35185512939521) != 0) or ((((_la - 687)) & ~0x3f) == 0 and ((1 << (_la - 687)) & 246290604622035) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & 268443649) != 0) or _la==862:
                self.state = 1673
                self.format_type_options()
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_file_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAGE_FILE_FORMAT(self):
            return self.getToken(SnowflakeParser.STAGE_FILE_FORMAT, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def FORMAT_NAME(self):
            return self.getToken(SnowflakeParser.FORMAT_NAME, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def type_fileformat(self):
            return self.getTypedRuleContext(SnowflakeParser.Type_fileformatContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def format_type_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Format_type_optionsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Format_type_optionsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_file_format" ):
                listener.enterStage_file_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_file_format" ):
                listener.exitStage_file_format(self)




    def stage_file_format(self):

        localctx = SnowflakeParser.Stage_file_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_stage_file_format)
        self._la = 0 # Token type
        try:
            self.state = 1695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [709]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                self.match(SnowflakeParser.STAGE_FILE_FORMAT)
                self.state = 1680
                self.match(SnowflakeParser.EQ)
                self.state = 1681
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 1682
                self.match(SnowflakeParser.FORMAT_NAME)
                self.state = 1683
                self.match(SnowflakeParser.EQ)
                self.state = 1684
                self.string()
                pass
            elif token in [803]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1685
                self.match(SnowflakeParser.TYPE)
                self.state = 1686
                self.match(SnowflakeParser.EQ)
                self.state = 1687
                self.type_fileformat()
                self.state = 1689 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1688
                    self.format_type_options()
                    self.state = 1691 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==25 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 9007199254750211) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 7205918283424366593) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & -9223336852482686957) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 1152956688978935809) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 35185512939521) != 0) or ((((_la - 687)) & ~0x3f) == 0 and ((1 << (_la - 687)) & 246290604622035) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & 268443649) != 0) or _la==862):
                        break

                self.state = 1693
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_into_locationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(SnowflakeParser.COPY, 0)

        def INTO(self):
            return self.getToken(SnowflakeParser.INTO, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def table_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_stageContext,0)


        def user_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.User_stageContext,0)


        def named_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Named_stageContext,0)


        def external_location(self):
            return self.getTypedRuleContext(SnowflakeParser.External_locationContext,0)


        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Partition_byContext,0)


        def file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.File_formatContext,0)


        def copy_options(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_optionsContext,0)


        def VALIDATION_MODE(self):
            return self.getToken(SnowflakeParser.VALIDATION_MODE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def RETURN_ROWS(self):
            return self.getToken(SnowflakeParser.RETURN_ROWS, 0)

        def HEADER(self):
            return self.getToken(SnowflakeParser.HEADER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_copy_into_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_into_location" ):
                listener.enterCopy_into_location(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_into_location" ):
                listener.exitCopy_into_location(self)




    def copy_into_location(self):

        localctx = SnowflakeParser.Copy_into_locationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_copy_into_location)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(SnowflakeParser.COPY)
            self.state = 1698
            self.match(SnowflakeParser.INTO)
            self.state = 1703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 1699
                self.table_stage()
                pass

            elif la_ == 2:
                self.state = 1700
                self.user_stage()
                pass

            elif la_ == 3:
                self.state = 1701
                self.named_stage()
                pass

            elif la_ == 4:
                self.state = 1702
                self.external_location()
                pass


            self.state = 1705
            self.match(SnowflakeParser.FROM)
            self.state = 1711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 62, 108, 109, 113, 114, 115, 117, 131, 134, 135, 138, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 190, 194, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 381, 382, 384, 385, 390, 396, 397, 412, 416, 421, 427, 436, 438, 446, 456, 460, 461, 462, 477, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 653, 655, 657, 667, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 904, 905]:
                self.state = 1706
                self.object_name()
                pass
            elif token in [931]:
                self.state = 1707
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 1708
                self.query_statement()
                self.state = 1709
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==518:
                self.state = 1713
                self.partition_by()


            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 1716
                self.file_format()


            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106 or _la==228 or _la==279 or _la==407 or _la==444 or _la==492 or _la==561 or _la==614 or _la==685 or _la==800:
                self.state = 1719
                self.copy_options()


            self.state = 1725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==828:
                self.state = 1722
                self.match(SnowflakeParser.VALIDATION_MODE)
                self.state = 1723
                self.match(SnowflakeParser.EQ)
                self.state = 1724
                self.match(SnowflakeParser.RETURN_ROWS)


            self.state = 1728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==319:
                self.state = 1727
                self.match(SnowflakeParser.HEADER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def object_type_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_nameContext,0)


        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def IS(self):
            return self.getToken(SnowflakeParser.IS, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def function_signature(self):
            return self.getTypedRuleContext(SnowflakeParser.Function_signatureContext,0)


        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Full_column_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = SnowflakeParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.state = 1753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1730
                self.match(SnowflakeParser.COMMENT)
                self.state = 1732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 1731
                    self.if_exists()


                self.state = 1734
                self.match(SnowflakeParser.ON)
                self.state = 1735
                self.object_type_name()
                self.state = 1736
                self.object_name()
                self.state = 1738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==931:
                    self.state = 1737
                    self.function_signature()


                self.state = 1740
                self.match(SnowflakeParser.IS)
                self.state = 1741
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1743
                self.match(SnowflakeParser.COMMENT)
                self.state = 1745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 1744
                    self.if_exists()


                self.state = 1747
                self.match(SnowflakeParser.ON)
                self.state = 1748
                self.match(SnowflakeParser.COLUMN)
                self.state = 1749
                self.full_column_name()
                self.state = 1750
                self.match(SnowflakeParser.IS)
                self.state = 1751
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def data_type_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_type_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_signature" ):
                listener.enterFunction_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_signature" ):
                listener.exitFunction_signature(self)




    def function_signature(self):

        localctx = SnowflakeParser.Function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_function_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                self.state = 1756
                self.data_type_list()


            self.state = 1759
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(SnowflakeParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(SnowflakeParser.WORK, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_commit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)




    def commit(self):

        localctx = SnowflakeParser.CommitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_commit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            self.match(SnowflakeParser.COMMIT)
            self.state = 1763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==849:
                self.state = 1762
                self.match(SnowflakeParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_immediateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(SnowflakeParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(SnowflakeParser.IMMEDIATE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ID2(self):
            return self.getToken(SnowflakeParser.ID2, 0)

        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def DBL_DOLLAR(self):
            return self.getToken(SnowflakeParser.DBL_DOLLAR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_execute_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate" ):
                listener.enterExecute_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate" ):
                listener.exitExecute_immediate(self)




    def execute_immediate(self):

        localctx = SnowflakeParser.Execute_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_execute_immediate)
        self._la = 0 # Token type
        try:
            self.state = 1789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1765
                self.match(SnowflakeParser.EXECUTE)
                self.state = 1766
                self.match(SnowflakeParser.IMMEDIATE)
                self.state = 1770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.string()
                    pass

                elif la_ == 2:
                    self.state = 1768
                    self.id_()
                    pass

                elif la_ == 3:
                    self.state = 1769
                    self.match(SnowflakeParser.ID2)
                    pass


                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==825:
                    self.state = 1772
                    self.match(SnowflakeParser.USING)
                    self.state = 1773
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 1774
                    self.id_()
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 1775
                        self.match(SnowflakeParser.COMMA)
                        self.state = 1776
                        self.id_()
                        self.state = 1781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1782
                    self.match(SnowflakeParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1786
                self.match(SnowflakeParser.EXECUTE)
                self.state = 1787
                self.match(SnowflakeParser.IMMEDIATE)
                self.state = 1788
                self.match(SnowflakeParser.DBL_DOLLAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_taskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(SnowflakeParser.EXECUTE, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_execute_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_task" ):
                listener.enterExecute_task(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_task" ):
                listener.exitExecute_task(self)




    def execute_task(self):

        localctx = SnowflakeParser.Execute_taskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_execute_task)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1791
            self.match(SnowflakeParser.EXECUTE)
            self.state = 1792
            self.match(SnowflakeParser.TASK)
            self.state = 1793
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(SnowflakeParser.EXPLAIN, 0)

        def sql_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Sql_commandContext,0)


        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def TABULAR(self):
            return self.getToken(SnowflakeParser.TABULAR, 0)

        def JSON(self):
            return self.getToken(SnowflakeParser.JSON, 0)

        def TEXT(self):
            return self.getToken(SnowflakeParser.TEXT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_explain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)




    def explain(self):

        localctx = SnowflakeParser.ExplainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_explain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(SnowflakeParser.EXPLAIN)
            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==825:
                self.state = 1796
                self.match(SnowflakeParser.USING)
                self.state = 1797
                _la = self._input.LA(1)
                if not(_la==366 or _la==753 or _la==890):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1800
            self.sql_command()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParallelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARALLEL(self):
            return self.getToken(SnowflakeParser.PARALLEL, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_parallel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParallel" ):
                listener.enterParallel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParallel" ):
                listener.exitParallel(self)




    def parallel(self):

        localctx = SnowflakeParser.ParallelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_parallel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.match(SnowflakeParser.PARALLEL)
            self.state = 1803
            self.match(SnowflakeParser.EQ)
            self.state = 1804
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_dmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(SnowflakeParser.GET, 0)

        def FILE_PATH(self):
            return self.getToken(SnowflakeParser.FILE_PATH, 0)

        def named_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Named_stageContext,0)


        def user_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.User_stageContext,0)


        def table_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_stageContext,0)


        def parallel(self):
            return self.getTypedRuleContext(SnowflakeParser.ParallelContext,0)


        def pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.PatternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_get_dml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_dml" ):
                listener.enterGet_dml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_dml" ):
                listener.exitGet_dml(self)




    def get_dml(self):

        localctx = SnowflakeParser.Get_dmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_get_dml)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.match(SnowflakeParser.GET)
            self.state = 1810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 1807
                self.named_stage()
                pass

            elif la_ == 2:
                self.state = 1808
                self.user_stage()
                pass

            elif la_ == 3:
                self.state = 1809
                self.table_stage()
                pass


            self.state = 1812
            self.match(SnowflakeParser.FILE_PATH)
            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==513:
                self.state = 1813
                self.parallel()


            self.state = 1817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==534:
                self.state = 1816
                self.pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_ownershipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(SnowflakeParser.GRANT, 0)

        def OWNERSHIP(self):
            return self.getToken(SnowflakeParser.OWNERSHIP, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def FUTURE(self):
            return self.getToken(SnowflakeParser.FUTURE, 0)

        def object_type_plural(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_pluralContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def CURRENT(self):
            return self.getToken(SnowflakeParser.CURRENT, 0)

        def GRANTS(self):
            return self.getToken(SnowflakeParser.GRANTS, 0)

        def object_type_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_nameContext,0)


        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def REVOKE(self):
            return self.getToken(SnowflakeParser.REVOKE, 0)

        def COPY(self):
            return self.getToken(SnowflakeParser.COPY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_grant_ownership

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_ownership" ):
                listener.enterGrant_ownership(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_ownership" ):
                listener.exitGrant_ownership(self)




    def grant_ownership(self):

        localctx = SnowflakeParser.Grant_ownershipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_grant_ownership)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1819
            self.match(SnowflakeParser.GRANT)
            self.state = 1820
            self.match(SnowflakeParser.OWNERSHIP)
            self.state = 1846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 1821
                self.match(SnowflakeParser.ON)
                self.state = 1834
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [169, 270, 287, 354, 402, 438, 539, 555, 620, 626, 656, 670, 672, 706, 728, 747, 754, 757, 816, 834, 838]:
                    self.state = 1822
                    self.object_type_name()
                    self.state = 1823
                    self.object_name()
                    pass
                elif token in [17]:
                    self.state = 1825
                    self.match(SnowflakeParser.ALL)
                    self.state = 1826
                    self.object_type_plural()
                    self.state = 1827
                    self.match(SnowflakeParser.IN)
                    self.state = 1832
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [169]:
                        self.state = 1828
                        self.match(SnowflakeParser.DATABASE)
                        self.state = 1829
                        self.id_()
                        pass
                    elif token in [656]:
                        self.state = 1830
                        self.match(SnowflakeParser.SCHEMA)
                        self.state = 1831
                        self.schema_name()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1836
                self.match(SnowflakeParser.ON)
                self.state = 1837
                self.match(SnowflakeParser.FUTURE)
                self.state = 1838
                self.object_type_plural()
                self.state = 1839
                self.match(SnowflakeParser.IN)
                self.state = 1844
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [169]:
                    self.state = 1840
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 1841
                    self.id_()
                    pass
                elif token in [656]:
                    self.state = 1842
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 1843
                    self.schema_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 1848
            self.match(SnowflakeParser.TO)
            self.state = 1849
            self.match(SnowflakeParser.ROLE)
            self.state = 1850
            self.id_()
            self.state = 1854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152 or _la==617:
                self.state = 1851
                _la = self._input.LA(1)
                if not(_la==152 or _la==617):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1852
                self.match(SnowflakeParser.CURRENT)
                self.state = 1853
                self.match(SnowflakeParser.GRANTS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_to_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.GRANT)
            else:
                return self.getToken(SnowflakeParser.GRANT, i)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def FUTURE(self):
            return self.getToken(SnowflakeParser.FUTURE, 0)

        def SCHEMAS(self):
            return self.getToken(SnowflakeParser.SCHEMAS, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def object_type_plural(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_pluralContext,0)


        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def OPTION(self):
            return self.getToken(SnowflakeParser.OPTION, 0)

        def global_privileges(self):
            return self.getTypedRuleContext(SnowflakeParser.Global_privilegesContext,0)


        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ALL)
            else:
                return self.getToken(SnowflakeParser.ALL, i)

        def account_object_privileges(self):
            return self.getTypedRuleContext(SnowflakeParser.Account_object_privilegesContext,0)


        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def schema_privileges(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_privilegesContext,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def schema_object_privileges(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_object_privilegesContext,0)


        def object_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_typeContext,0)


        def PRIVILEGES(self):
            return self.getToken(SnowflakeParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_grant_to_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_to_role" ):
                listener.enterGrant_to_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_to_role" ):
                listener.exitGrant_to_role(self)




    def grant_to_role(self):

        localctx = SnowflakeParser.Grant_to_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_grant_to_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.match(SnowflakeParser.GRANT)
            self.state = 1952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1862
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43, 47, 155, 243, 337, 400, 430, 507]:
                    self.state = 1857
                    self.global_privileges()
                    pass
                elif token in [17]:
                    self.state = 1858
                    self.match(SnowflakeParser.ALL)
                    self.state = 1860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 1859
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1864
                self.match(SnowflakeParser.ON)
                self.state = 1865
                self.match(SnowflakeParser.ACCOUNT)
                pass

            elif la_ == 2:
                self.state = 1871
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [155, 339, 429, 430, 494, 814, 823]:
                    self.state = 1866
                    self.account_object_privileges()
                    pass
                elif token in [17]:
                    self.state = 1867
                    self.match(SnowflakeParser.ALL)
                    self.state = 1869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 1868
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1873
                self.match(SnowflakeParser.ON)
                self.state = 1880
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [816]:
                    self.state = 1874
                    self.match(SnowflakeParser.USER)
                    pass
                elif token in [602]:
                    self.state = 1875
                    self.match(SnowflakeParser.RESOURCE)
                    self.state = 1876
                    self.match(SnowflakeParser.MONITOR)
                    pass
                elif token in [838]:
                    self.state = 1877
                    self.match(SnowflakeParser.WAREHOUSE)
                    pass
                elif token in [169]:
                    self.state = 1878
                    self.match(SnowflakeParser.DATABASE)
                    pass
                elif token in [354]:
                    self.state = 1879
                    self.match(SnowflakeParser.INTEGRATION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1882
                self.object_name()
                pass

            elif la_ == 3:
                self.state = 1888
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 155, 429, 430, 814]:
                    self.state = 1883
                    self.schema_privileges()
                    pass
                elif token in [17]:
                    self.state = 1884
                    self.match(SnowflakeParser.ALL)
                    self.state = 1886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 1885
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1890
                self.match(SnowflakeParser.ON)
                self.state = 1898
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [656]:
                    self.state = 1891
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 1892
                    self.schema_name()
                    pass
                elif token in [17]:
                    self.state = 1893
                    self.match(SnowflakeParser.ALL)
                    self.state = 1894
                    self.match(SnowflakeParser.SCHEMAS)
                    self.state = 1895
                    self.match(SnowflakeParser.IN)
                    self.state = 1896
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 1897
                    self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 1905
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 155, 429, 430, 814]:
                    self.state = 1900
                    self.schema_privileges()
                    pass
                elif token in [17]:
                    self.state = 1901
                    self.match(SnowflakeParser.ALL)
                    self.state = 1903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 1902
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1907
                self.match(SnowflakeParser.ON)
                self.state = 1908
                self.match(SnowflakeParser.FUTURE)
                self.state = 1909
                self.match(SnowflakeParser.SCHEMAS)
                self.state = 1910
                self.match(SnowflakeParser.IN)
                self.state = 1911
                self.match(SnowflakeParser.DATABASE)
                self.state = 1912
                self.id_()
                pass

            elif la_ == 5:
                self.state = 1918
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43, 193, 351, 430, 494, 574, 579, 669, 799, 811, 814]:
                    self.state = 1913
                    self.schema_object_privileges()
                    pass
                elif token in [17]:
                    self.state = 1914
                    self.match(SnowflakeParser.ALL)
                    self.state = 1916
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 1915
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1920
                self.match(SnowflakeParser.ON)
                self.state = 1933
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6, 170, 355, 438, 602, 621, 679, 818, 839]:
                    self.state = 1921
                    self.object_type()
                    self.state = 1922
                    self.object_name()
                    pass
                elif token in [17]:
                    self.state = 1924
                    self.match(SnowflakeParser.ALL)
                    self.state = 1925
                    self.object_type_plural()
                    self.state = 1926
                    self.match(SnowflakeParser.IN)
                    self.state = 1931
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [169]:
                        self.state = 1927
                        self.match(SnowflakeParser.DATABASE)
                        self.state = 1928
                        self.id_()
                        pass
                    elif token in [656]:
                        self.state = 1929
                        self.match(SnowflakeParser.SCHEMA)
                        self.state = 1930
                        self.schema_name()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.state = 1940
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43, 193, 351, 430, 494, 574, 579, 669, 799, 811, 814]:
                    self.state = 1935
                    self.schema_object_privileges()
                    pass
                elif token in [17]:
                    self.state = 1936
                    self.match(SnowflakeParser.ALL)
                    self.state = 1938
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 1937
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1942
                self.match(SnowflakeParser.ON)
                self.state = 1943
                self.match(SnowflakeParser.FUTURE)
                self.state = 1944
                self.object_type_plural()
                self.state = 1945
                self.match(SnowflakeParser.IN)
                self.state = 1950
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [169]:
                    self.state = 1946
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 1947
                    self.id_()
                    pass
                elif token in [656]:
                    self.state = 1948
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 1949
                    self.schema_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 1954
            self.match(SnowflakeParser.TO)
            self.state = 1956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1955
                self.match(SnowflakeParser.ROLE)


            self.state = 1958
            self.id_()
            self.state = 1962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==847:
                self.state = 1959
                self.match(SnowflakeParser.WITH)
                self.state = 1960
                self.match(SnowflakeParser.GRANT)
                self.state = 1961
                self.match(SnowflakeParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_privilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def global_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Global_privilegeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Global_privilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_global_privileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_privileges" ):
                listener.enterGlobal_privileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_privileges" ):
                listener.exitGlobal_privileges(self)




    def global_privileges(self):

        localctx = SnowflakeParser.Global_privilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_global_privileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1964
            self.global_privilege()
            self.state = 1969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 1965
                self.match(SnowflakeParser.COMMA)
                self.state = 1966
                self.global_privilege()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATA(self):
            return self.getToken(SnowflakeParser.DATA, 0)

        def EXCHANGE(self):
            return self.getToken(SnowflakeParser.EXCHANGE, 0)

        def LISTING(self):
            return self.getToken(SnowflakeParser.LISTING, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def APPLY(self):
            return self.getToken(SnowflakeParser.APPLY, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def ATTACH(self):
            return self.getToken(SnowflakeParser.ATTACH, 0)

        def EXECUTE(self):
            return self.getToken(SnowflakeParser.EXECUTE, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def IMPORT(self):
            return self.getToken(SnowflakeParser.IMPORT, 0)

        def MANAGE(self):
            return self.getToken(SnowflakeParser.MANAGE, 0)

        def GRANTS(self):
            return self.getToken(SnowflakeParser.GRANTS, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def OVERRIDE(self):
            return self.getToken(SnowflakeParser.OVERRIDE, 0)

        def RESTRICTIONS(self):
            return self.getToken(SnowflakeParser.RESTRICTIONS, 0)

        def EXECUTION(self):
            return self.getToken(SnowflakeParser.EXECUTION, 0)

        def USAGE(self):
            return self.getToken(SnowflakeParser.USAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_global_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_privilege" ):
                listener.enterGlobal_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_privilege" ):
                listener.exitGlobal_privilege(self)




    def global_privilege(self):

        localctx = SnowflakeParser.Global_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_global_privilege)
        self._la = 0 # Token type
        try:
            self.state = 2016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [155]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.match(SnowflakeParser.CREATE)
                self.state = 1985
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6]:
                    self.state = 1973
                    self.match(SnowflakeParser.ACCOUNT)
                    pass
                elif token in [168]:
                    self.state = 1974
                    self.match(SnowflakeParser.DATA)
                    self.state = 1975
                    self.match(SnowflakeParser.EXCHANGE)
                    self.state = 1976
                    self.match(SnowflakeParser.LISTING)
                    pass
                elif token in [169]:
                    self.state = 1977
                    self.match(SnowflakeParser.DATABASE)
                    pass
                elif token in [354]:
                    self.state = 1978
                    self.match(SnowflakeParser.INTEGRATION)
                    pass
                elif token in [438]:
                    self.state = 1979
                    self.match(SnowflakeParser.NETWORK)
                    self.state = 1980
                    self.match(SnowflakeParser.POLICY)
                    pass
                elif token in [620]:
                    self.state = 1981
                    self.match(SnowflakeParser.ROLE)
                    pass
                elif token in [678]:
                    self.state = 1982
                    self.match(SnowflakeParser.SHARE)
                    pass
                elif token in [816]:
                    self.state = 1983
                    self.match(SnowflakeParser.USER)
                    pass
                elif token in [838]:
                    self.state = 1984
                    self.match(SnowflakeParser.WAREHOUSE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [43, 47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1987
                    self.match(SnowflakeParser.APPLY)
                    self.state = 1988
                    self.match(SnowflakeParser.MASKING)
                    self.state = 1989
                    self.match(SnowflakeParser.POLICY)
                    pass

                elif la_ == 2:
                    self.state = 1990
                    self.match(SnowflakeParser.APPLY)
                    self.state = 1991
                    self.match(SnowflakeParser.ROW)
                    self.state = 1992
                    self.match(SnowflakeParser.ACCESS)
                    self.state = 1993
                    self.match(SnowflakeParser.POLICY)
                    pass

                elif la_ == 3:
                    self.state = 1994
                    self.match(SnowflakeParser.APPLY)
                    self.state = 1995
                    self.match(SnowflakeParser.SESSION)
                    self.state = 1996
                    self.match(SnowflakeParser.POLICY)
                    pass

                elif la_ == 4:
                    self.state = 1997
                    self.match(SnowflakeParser.APPLY)
                    self.state = 1998
                    self.match(SnowflakeParser.TAG)
                    pass

                elif la_ == 5:
                    self.state = 1999
                    self.match(SnowflakeParser.ATTACH)
                    self.state = 2000
                    self.match(SnowflakeParser.POLICY)
                    pass


                pass
            elif token in [243, 337, 400, 430, 507]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2014
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [243]:
                    self.state = 2003
                    self.match(SnowflakeParser.EXECUTE)
                    self.state = 2004
                    self.match(SnowflakeParser.TASK)
                    pass
                elif token in [337]:
                    self.state = 2005
                    self.match(SnowflakeParser.IMPORT)
                    self.state = 2006
                    self.match(SnowflakeParser.SHARE)
                    pass
                elif token in [400]:
                    self.state = 2007
                    self.match(SnowflakeParser.MANAGE)
                    self.state = 2008
                    self.match(SnowflakeParser.GRANTS)
                    pass
                elif token in [430]:
                    self.state = 2009
                    self.match(SnowflakeParser.MONITOR)
                    self.state = 2010
                    _la = self._input.LA(1)
                    if not(_la==244 or _la==814):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [507]:
                    self.state = 2011
                    self.match(SnowflakeParser.OVERRIDE)
                    self.state = 2012
                    self.match(SnowflakeParser.SHARE)
                    self.state = 2013
                    self.match(SnowflakeParser.RESTRICTIONS)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Account_object_privilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def account_object_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Account_object_privilegeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Account_object_privilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_account_object_privileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccount_object_privileges" ):
                listener.enterAccount_object_privileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccount_object_privileges" ):
                listener.exitAccount_object_privileges(self)




    def account_object_privileges(self):

        localctx = SnowflakeParser.Account_object_privilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_account_object_privileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.account_object_privilege()
            self.state = 2023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 2019
                self.match(SnowflakeParser.COMMA)
                self.state = 2020
                self.account_object_privilege()
                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Account_object_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def MODIFY(self):
            return self.getToken(SnowflakeParser.MODIFY, 0)

        def USAGE(self):
            return self.getToken(SnowflakeParser.USAGE, 0)

        def OPERATE(self):
            return self.getToken(SnowflakeParser.OPERATE, 0)

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def IMPORTED(self):
            return self.getToken(SnowflakeParser.IMPORTED, 0)

        def PRIVILEGES(self):
            return self.getToken(SnowflakeParser.PRIVILEGES, 0)

        def USE_ANY_ROLE(self):
            return self.getToken(SnowflakeParser.USE_ANY_ROLE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_account_object_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccount_object_privilege" ):
                listener.enterAccount_object_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccount_object_privilege" ):
                listener.exitAccount_object_privilege(self)




    def account_object_privilege(self):

        localctx = SnowflakeParser.Account_object_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_account_object_privilege)
        try:
            self.state = 2035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [430]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2026
                self.match(SnowflakeParser.MONITOR)
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2027
                self.match(SnowflakeParser.MODIFY)
                pass
            elif token in [814]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2028
                self.match(SnowflakeParser.USAGE)
                pass
            elif token in [494]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2029
                self.match(SnowflakeParser.OPERATE)
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2030
                self.match(SnowflakeParser.CREATE)
                self.state = 2031
                self.match(SnowflakeParser.SCHEMA)
                pass
            elif token in [339]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2032
                self.match(SnowflakeParser.IMPORTED)
                self.state = 2033
                self.match(SnowflakeParser.PRIVILEGES)
                pass
            elif token in [823]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2034
                self.match(SnowflakeParser.USE_ANY_ROLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_privilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schema_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Schema_privilegeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Schema_privilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_schema_privileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_privileges" ):
                listener.enterSchema_privileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_privileges" ):
                listener.exitSchema_privileges(self)




    def schema_privileges(self):

        localctx = SnowflakeParser.Schema_privilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_schema_privileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self.schema_privilege()
            self.state = 2042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 2038
                self.match(SnowflakeParser.COMMA)
                self.state = 2039
                self.schema_privilege()
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(SnowflakeParser.MODIFY, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def USAGE(self):
            return self.getToken(SnowflakeParser.USAGE, 0)

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def MATERIALIZED(self):
            return self.getToken(SnowflakeParser.MATERIALIZED, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(SnowflakeParser.PROCEDURE, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(SnowflakeParser.FORMAT, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def PIPE(self):
            return self.getToken(SnowflakeParser.PIPE, 0)

        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def SEARCH(self):
            return self.getToken(SnowflakeParser.SEARCH, 0)

        def OPTIMIZATION(self):
            return self.getToken(SnowflakeParser.OPTIMIZATION, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_schema_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_privilege" ):
                listener.enterSchema_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_privilege" ):
                listener.exitSchema_privilege(self)




    def schema_privilege(self):

        localctx = SnowflakeParser.Schema_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_schema_privilege)
        try:
            self.state = 2077
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [429]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2045
                self.match(SnowflakeParser.MODIFY)
                pass
            elif token in [430]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2046
                self.match(SnowflakeParser.MONITOR)
                pass
            elif token in [814]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2047
                self.match(SnowflakeParser.USAGE)
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2048
                self.match(SnowflakeParser.CREATE)
                self.state = 2072
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [747]:
                    self.state = 2049
                    self.match(SnowflakeParser.TABLE)
                    pass
                elif token in [249]:
                    self.state = 2050
                    self.match(SnowflakeParser.EXTERNAL)
                    self.state = 2051
                    self.match(SnowflakeParser.TABLE)
                    pass
                elif token in [834]:
                    self.state = 2052
                    self.match(SnowflakeParser.VIEW)
                    pass
                elif token in [409]:
                    self.state = 2053
                    self.match(SnowflakeParser.MATERIALIZED)
                    self.state = 2054
                    self.match(SnowflakeParser.VIEW)
                    pass
                elif token in [402]:
                    self.state = 2055
                    self.match(SnowflakeParser.MASKING)
                    self.state = 2056
                    self.match(SnowflakeParser.POLICY)
                    pass
                elif token in [626]:
                    self.state = 2057
                    self.match(SnowflakeParser.ROW)
                    self.state = 2058
                    self.match(SnowflakeParser.ACCESS)
                    self.state = 2059
                    self.match(SnowflakeParser.POLICY)
                    pass
                elif token in [672]:
                    self.state = 2060
                    self.match(SnowflakeParser.SESSION)
                    self.state = 2061
                    self.match(SnowflakeParser.POLICY)
                    pass
                elif token in [754]:
                    self.state = 2062
                    self.match(SnowflakeParser.TAG)
                    pass
                elif token in [670]:
                    self.state = 2063
                    self.match(SnowflakeParser.SEQUENCE)
                    pass
                elif token in [287]:
                    self.state = 2064
                    self.match(SnowflakeParser.FUNCTION)
                    pass
                elif token in [555]:
                    self.state = 2065
                    self.match(SnowflakeParser.PROCEDURE)
                    pass
                elif token in [270]:
                    self.state = 2066
                    self.match(SnowflakeParser.FILE)
                    self.state = 2067
                    self.match(SnowflakeParser.FORMAT)
                    pass
                elif token in [706]:
                    self.state = 2068
                    self.match(SnowflakeParser.STAGE)
                    pass
                elif token in [539]:
                    self.state = 2069
                    self.match(SnowflakeParser.PIPE)
                    pass
                elif token in [728]:
                    self.state = 2070
                    self.match(SnowflakeParser.STREAM)
                    pass
                elif token in [757]:
                    self.state = 2071
                    self.match(SnowflakeParser.TASK)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2074
                self.match(SnowflakeParser.ADD)
                self.state = 2075
                self.match(SnowflakeParser.SEARCH)
                self.state = 2076
                self.match(SnowflakeParser.OPTIMIZATION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_object_privilegesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schema_object_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Schema_object_privilegeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Schema_object_privilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_schema_object_privileges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_object_privileges" ):
                listener.enterSchema_object_privileges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_object_privileges" ):
                listener.exitSchema_object_privileges(self)




    def schema_object_privileges(self):

        localctx = SnowflakeParser.Schema_object_privilegesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_schema_object_privileges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            self.schema_object_privilege()
            self.state = 2084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 2080
                self.match(SnowflakeParser.COMMA)
                self.state = 2081
                self.schema_object_privilege()
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_object_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SnowflakeParser.SELECT, 0)

        def INSERT(self):
            return self.getToken(SnowflakeParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(SnowflakeParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(SnowflakeParser.DELETE, 0)

        def TRUNCATE(self):
            return self.getToken(SnowflakeParser.TRUNCATE, 0)

        def REFERENCES(self):
            return self.getToken(SnowflakeParser.REFERENCES, 0)

        def USAGE(self):
            return self.getToken(SnowflakeParser.USAGE, 0)

        def READ(self):
            return self.getToken(SnowflakeParser.READ, 0)

        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def WRITE(self):
            return self.getToken(SnowflakeParser.WRITE, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def OPERATE(self):
            return self.getToken(SnowflakeParser.OPERATE, 0)

        def APPLY(self):
            return self.getToken(SnowflakeParser.APPLY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_schema_object_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_object_privilege" ):
                listener.enterSchema_object_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_object_privilege" ):
                listener.exitSchema_object_privilege(self)




    def schema_object_privilege(self):

        localctx = SnowflakeParser.Schema_object_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_schema_object_privilege)
        try:
            self.state = 2102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [669]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2087
                self.match(SnowflakeParser.SELECT)
                pass
            elif token in [351]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2088
                self.match(SnowflakeParser.INSERT)
                pass
            elif token in [811]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2089
                self.match(SnowflakeParser.UPDATE)
                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2090
                self.match(SnowflakeParser.DELETE)
                pass
            elif token in [799]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2091
                self.match(SnowflakeParser.TRUNCATE)
                pass
            elif token in [579]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2092
                self.match(SnowflakeParser.REFERENCES)
                pass
            elif token in [814]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2093
                self.match(SnowflakeParser.USAGE)
                pass
            elif token in [574]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2094
                self.match(SnowflakeParser.READ)
                self.state = 2097
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 2095
                    self.match(SnowflakeParser.COMMA)
                    self.state = 2096
                    self.match(SnowflakeParser.WRITE)


                pass
            elif token in [430]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2099
                self.match(SnowflakeParser.MONITOR)
                pass
            elif token in [494]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2100
                self.match(SnowflakeParser.OPERATE)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2101
                self.match(SnowflakeParser.APPLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_to_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(SnowflakeParser.GRANT, 0)

        def object_privilege(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_privilegeContext,0)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def TABLES(self):
            return self.getToken(SnowflakeParser.TABLES, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_grant_to_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_to_share" ):
                listener.enterGrant_to_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_to_share" ):
                listener.exitGrant_to_share(self)




    def grant_to_share(self):

        localctx = SnowflakeParser.Grant_to_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_grant_to_share)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2104
            self.match(SnowflakeParser.GRANT)
            self.state = 2105
            self.object_privilege()
            self.state = 2106
            self.match(SnowflakeParser.ON)
            self.state = 2124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [169]:
                self.state = 2107
                self.match(SnowflakeParser.DATABASE)
                self.state = 2108
                self.id_()
                pass
            elif token in [656]:
                self.state = 2109
                self.match(SnowflakeParser.SCHEMA)
                self.state = 2110
                self.id_()
                pass
            elif token in [287]:
                self.state = 2111
                self.match(SnowflakeParser.FUNCTION)
                self.state = 2112
                self.id_()
                pass
            elif token in [17, 747]:
                self.state = 2120
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [747]:
                    self.state = 2113
                    self.match(SnowflakeParser.TABLE)
                    self.state = 2114
                    self.object_name()
                    pass
                elif token in [17]:
                    self.state = 2115
                    self.match(SnowflakeParser.ALL)
                    self.state = 2116
                    self.match(SnowflakeParser.TABLES)
                    self.state = 2117
                    self.match(SnowflakeParser.IN)
                    self.state = 2118
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 2119
                    self.schema_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [834]:
                self.state = 2122
                self.match(SnowflakeParser.VIEW)
                self.state = 2123
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2126
            self.match(SnowflakeParser.TO)
            self.state = 2127
            self.match(SnowflakeParser.SHARE)
            self.state = 2128
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USAGE(self):
            return self.getToken(SnowflakeParser.USAGE, 0)

        def SELECT(self):
            return self.getToken(SnowflakeParser.SELECT, 0)

        def REFERENCE_USAGE(self):
            return self.getToken(SnowflakeParser.REFERENCE_USAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_privilege" ):
                listener.enterObject_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_privilege" ):
                listener.exitObject_privilege(self)




    def object_privilege(self):

        localctx = SnowflakeParser.Object_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_object_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            _la = self._input.LA(1)
            if not(_la==580 or _la==669 or _la==814):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(SnowflakeParser.GRANT, 0)

        def ROLE(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ROLE)
            else:
                return self.getToken(SnowflakeParser.ROLE, i)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_grant_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_role" ):
                listener.enterGrant_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_role" ):
                listener.exitGrant_role(self)




    def grant_role(self):

        localctx = SnowflakeParser.Grant_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_grant_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2132
            self.match(SnowflakeParser.GRANT)
            self.state = 2133
            self.match(SnowflakeParser.ROLE)
            self.state = 2134
            self.role_name()
            self.state = 2135
            self.match(SnowflakeParser.TO)
            self.state = 2140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [620]:
                self.state = 2136
                self.match(SnowflakeParser.ROLE)
                self.state = 2137
                self.role_name()
                pass
            elif token in [816]:
                self.state = 2138
                self.match(SnowflakeParser.USER)
                self.state = 2139
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def system_defined_role(self):
            return self.getTypedRuleContext(SnowflakeParser.System_defined_roleContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = SnowflakeParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_role_name)
        try:
            self.state = 2144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2142
                self.system_defined_role()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2143
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_defined_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORGADMIN(self):
            return self.getToken(SnowflakeParser.ORGADMIN, 0)

        def ACCOUNTADMIN(self):
            return self.getToken(SnowflakeParser.ACCOUNTADMIN, 0)

        def SECURITYADMIN(self):
            return self.getToken(SnowflakeParser.SECURITYADMIN, 0)

        def USERADMIN(self):
            return self.getToken(SnowflakeParser.USERADMIN, 0)

        def SYSADMIN(self):
            return self.getToken(SnowflakeParser.SYSADMIN, 0)

        def PUBLIC(self):
            return self.getToken(SnowflakeParser.PUBLIC, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_system_defined_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_defined_role" ):
                listener.enterSystem_defined_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_defined_role" ):
                listener.exitSystem_defined_role(self)




    def system_defined_role(self):

        localctx = SnowflakeParser.System_defined_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_system_defined_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2146
            _la = self._input.LA(1)
            if not(_la==7 or _la==501 or _la==560 or _la==667 or _la==745 or _la==817):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(SnowflakeParser.LIST, 0)

        def user_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.User_stageContext,0)


        def table_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_stageContext,0)


        def named_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Named_stageContext,0)


        def pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.PatternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)




    def list_(self):

        localctx = SnowflakeParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2148
            self.match(SnowflakeParser.LIST)
            self.state = 2152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 2149
                self.user_stage()
                pass

            elif la_ == 2:
                self.state = 2150
                self.table_stage()
                pass

            elif la_ == 3:
                self.state = 2151
                self.named_stage()
                pass


            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==534:
                self.state = 2154
                self.pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_stageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(SnowflakeParser.AT, 0)

        def TILDA(self):
            return self.getToken(SnowflakeParser.TILDA, 0)

        def stage_path(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_pathContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_user_stage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_stage" ):
                listener.enterUser_stage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_stage" ):
                listener.exitUser_stage(self)




    def user_stage(self):

        localctx = SnowflakeParser.User_stageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_user_stage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            self.match(SnowflakeParser.AT)
            self.state = 2158
            self.match(SnowflakeParser.TILDA)
            self.state = 2160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==942:
                self.state = 2159
                self.stage_path()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_stageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(SnowflakeParser.AT, 0)

        def MODULE(self):
            return self.getToken(SnowflakeParser.MODULE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def stage_path(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_pathContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_table_stage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_stage" ):
                listener.enterTable_stage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_stage" ):
                listener.exitTable_stage(self)




    def table_stage(self):

        localctx = SnowflakeParser.Table_stageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_table_stage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            self.match(SnowflakeParser.AT)
            self.state = 2164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                self.state = 2163
                self.schema_name()


            self.state = 2166
            self.match(SnowflakeParser.MODULE)
            self.state = 2167
            self.id_()
            self.state = 2169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==942:
                self.state = 2168
                self.stage_path()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_stageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(SnowflakeParser.AT, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def stage_path(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_pathContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_named_stage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_stage" ):
                listener.enterNamed_stage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_stage" ):
                listener.exitNamed_stage(self)




    def named_stage(self):

        localctx = SnowflakeParser.Named_stageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_named_stage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2171
            self.match(SnowflakeParser.AT)
            self.state = 2172
            self.object_name()
            self.state = 2174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==942:
                self.state = 2173
                self.stage_path()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIVIDE(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DIVIDE)
            else:
                return self.getToken(SnowflakeParser.DIVIDE, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ID)
            else:
                return self.getToken(SnowflakeParser.ID, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_path" ):
                listener.enterStage_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_path" ):
                listener.exitStage_path(self)




    def stage_path(self):

        localctx = SnowflakeParser.Stage_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_stage_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176
            self.match(SnowflakeParser.DIVIDE)
            self.state = 2188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==904:
                self.state = 2177
                self.match(SnowflakeParser.ID)
                self.state = 2182
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2178
                        self.match(SnowflakeParser.DIVIDE)
                        self.state = 2179
                        self.match(SnowflakeParser.ID) 
                    self.state = 2184
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 2186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==942:
                    self.state = 2185
                    self.match(SnowflakeParser.DIVIDE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUT(self):
            return self.getToken(SnowflakeParser.PUT, 0)

        def FILE_PATH(self):
            return self.getToken(SnowflakeParser.FILE_PATH, 0)

        def table_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_stageContext,0)


        def user_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.User_stageContext,0)


        def named_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Named_stageContext,0)


        def PARALLEL(self):
            return self.getToken(SnowflakeParser.PARALLEL, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def AUTO_COMPRESS(self):
            return self.getToken(SnowflakeParser.AUTO_COMPRESS, 0)

        def true_false(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.True_falseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.True_falseContext,i)


        def SOURCE_COMPRESSION(self):
            return self.getToken(SnowflakeParser.SOURCE_COMPRESSION, 0)

        def OVERWRITE(self):
            return self.getToken(SnowflakeParser.OVERWRITE, 0)

        def AUTO_DETECT(self):
            return self.getToken(SnowflakeParser.AUTO_DETECT, 0)

        def GZIP(self):
            return self.getToken(SnowflakeParser.GZIP, 0)

        def BZ2(self):
            return self.getToken(SnowflakeParser.BZ2, 0)

        def BROTLI(self):
            return self.getToken(SnowflakeParser.BROTLI, 0)

        def ZSTD(self):
            return self.getToken(SnowflakeParser.ZSTD, 0)

        def DEFLATE(self):
            return self.getToken(SnowflakeParser.DEFLATE, 0)

        def RAW_DEFLATE(self):
            return self.getToken(SnowflakeParser.RAW_DEFLATE, 0)

        def NONE(self):
            return self.getToken(SnowflakeParser.NONE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_put

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPut" ):
                listener.enterPut(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPut" ):
                listener.exitPut(self)




    def put(self):

        localctx = SnowflakeParser.PutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_put)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2190
            self.match(SnowflakeParser.PUT)
            self.state = 2191
            self.match(SnowflakeParser.FILE_PATH)
            self.state = 2195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 2192
                self.table_stage()
                pass

            elif la_ == 2:
                self.state = 2193
                self.user_stage()
                pass

            elif la_ == 3:
                self.state = 2194
                self.named_stage()
                pass


            self.state = 2200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==513:
                self.state = 2197
                self.match(SnowflakeParser.PARALLEL)
                self.state = 2198
                self.match(SnowflakeParser.EQ)
                self.state = 2199
                self.num()


            self.state = 2205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 2202
                self.match(SnowflakeParser.AUTO_COMPRESS)
                self.state = 2203
                self.match(SnowflakeParser.EQ)
                self.state = 2204
                self.true_false()


            self.state = 2210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==700:
                self.state = 2207
                self.match(SnowflakeParser.SOURCE_COMPRESSION)
                self.state = 2208
                self.match(SnowflakeParser.EQ)
                self.state = 2209
                _la = self._input.LA(1)
                if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 9895604649985) != 0) or _la==191 or _la==313 or _la==444 or _la==573 or _la==862):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==508:
                self.state = 2212
                self.match(SnowflakeParser.OVERWRITE)
                self.state = 2213
                self.match(SnowflakeParser.EQ)
                self.state = 2214
                self.true_false()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(SnowflakeParser.REMOVE, 0)

        def table_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_stageContext,0)


        def user_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.User_stageContext,0)


        def named_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Named_stageContext,0)


        def pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.PatternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = SnowflakeParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.match(SnowflakeParser.REMOVE)
            self.state = 2221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 2218
                self.table_stage()
                pass

            elif la_ == 2:
                self.state = 2219
                self.user_stage()
                pass

            elif la_ == 3:
                self.state = 2220
                self.named_stage()
                pass


            self.state = 2224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==534:
                self.state = 2223
                self.pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_from_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(SnowflakeParser.REVOKE, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def FUTURE(self):
            return self.getToken(SnowflakeParser.FUTURE, 0)

        def object_type_plural(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_pluralContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def GRANT(self):
            return self.getToken(SnowflakeParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(SnowflakeParser.OPTION, 0)

        def FOR(self):
            return self.getToken(SnowflakeParser.FOR, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def global_privilege(self):
            return self.getTypedRuleContext(SnowflakeParser.Global_privilegeContext,0)


        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ALL)
            else:
                return self.getToken(SnowflakeParser.ALL, i)

        def account_object_privileges(self):
            return self.getTypedRuleContext(SnowflakeParser.Account_object_privilegesContext,0)


        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def schema_privileges(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_privilegesContext,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def SCHEMAS(self):
            return self.getToken(SnowflakeParser.SCHEMAS, 0)

        def schema_object_privileges(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_object_privilegesContext,0)


        def object_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_typeContext,0)


        def PRIVILEGES(self):
            return self.getToken(SnowflakeParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_revoke_from_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_from_role" ):
                listener.enterRevoke_from_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_from_role" ):
                listener.exitRevoke_from_role(self)




    def revoke_from_role(self):

        localctx = SnowflakeParser.Revoke_from_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_revoke_from_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.match(SnowflakeParser.REVOKE)
            self.state = 2230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==308:
                self.state = 2227
                self.match(SnowflakeParser.GRANT)
                self.state = 2228
                self.match(SnowflakeParser.OPTION)
                self.state = 2229
                self.match(SnowflakeParser.FOR)


            self.state = 2322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 2237
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43, 47, 155, 243, 337, 400, 430, 507]:
                    self.state = 2232
                    self.global_privilege()
                    pass
                elif token in [17]:
                    self.state = 2233
                    self.match(SnowflakeParser.ALL)
                    self.state = 2235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 2234
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2239
                self.match(SnowflakeParser.ON)
                self.state = 2240
                self.match(SnowflakeParser.ACCOUNT)
                pass

            elif la_ == 2:
                self.state = 2246
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [155, 339, 429, 430, 494, 814, 823]:
                    self.state = 2241
                    self.account_object_privileges()
                    pass
                elif token in [17]:
                    self.state = 2242
                    self.match(SnowflakeParser.ALL)
                    self.state = 2244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 2243
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2248
                self.match(SnowflakeParser.ON)
                self.state = 2254
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [602]:
                    self.state = 2249
                    self.match(SnowflakeParser.RESOURCE)
                    self.state = 2250
                    self.match(SnowflakeParser.MONITOR)
                    pass
                elif token in [838]:
                    self.state = 2251
                    self.match(SnowflakeParser.WAREHOUSE)
                    pass
                elif token in [169]:
                    self.state = 2252
                    self.match(SnowflakeParser.DATABASE)
                    pass
                elif token in [354]:
                    self.state = 2253
                    self.match(SnowflakeParser.INTEGRATION)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2256
                self.object_name()
                pass

            elif la_ == 3:
                self.state = 2262
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 155, 429, 430, 814]:
                    self.state = 2257
                    self.schema_privileges()
                    pass
                elif token in [17]:
                    self.state = 2258
                    self.match(SnowflakeParser.ALL)
                    self.state = 2260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 2259
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2264
                self.match(SnowflakeParser.ON)
                self.state = 2272
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [656]:
                    self.state = 2265
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 2266
                    self.schema_name()
                    pass
                elif token in [17]:
                    self.state = 2267
                    self.match(SnowflakeParser.ALL)
                    self.state = 2268
                    self.match(SnowflakeParser.SCHEMAS)
                    self.state = 2269
                    self.match(SnowflakeParser.IN)
                    self.state = 2270
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 2271
                    self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 2279
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 155, 429, 430, 814]:
                    self.state = 2274
                    self.schema_privileges()
                    pass
                elif token in [17]:
                    self.state = 2275
                    self.match(SnowflakeParser.ALL)
                    self.state = 2277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 2276
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2281
                self.match(SnowflakeParser.ON)

                self.state = 2282
                self.match(SnowflakeParser.FUTURE)
                self.state = 2283
                self.match(SnowflakeParser.SCHEMAS)
                self.state = 2284
                self.match(SnowflakeParser.IN)
                self.state = 2285
                self.match(SnowflakeParser.DATABASE)
                pass

            elif la_ == 5:
                self.state = 2291
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43, 193, 351, 430, 494, 574, 579, 669, 799, 811, 814]:
                    self.state = 2286
                    self.schema_object_privileges()
                    pass
                elif token in [17]:
                    self.state = 2287
                    self.match(SnowflakeParser.ALL)
                    self.state = 2289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 2288
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2293
                self.match(SnowflakeParser.ON)
                self.state = 2303
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6, 170, 355, 438, 602, 621, 679, 818, 839]:
                    self.state = 2294
                    self.object_type()
                    self.state = 2295
                    self.object_name()
                    pass
                elif token in [17]:
                    self.state = 2297
                    self.match(SnowflakeParser.ALL)
                    self.state = 2298
                    self.object_type_plural()
                    self.state = 2299
                    self.match(SnowflakeParser.IN)
                    self.state = 2300
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 2301
                    self.schema_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.state = 2310
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [43, 193, 351, 430, 494, 574, 579, 669, 799, 811, 814]:
                    self.state = 2305
                    self.schema_object_privileges()
                    pass
                elif token in [17]:
                    self.state = 2306
                    self.match(SnowflakeParser.ALL)
                    self.state = 2308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==554:
                        self.state = 2307
                        self.match(SnowflakeParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2312
                self.match(SnowflakeParser.ON)
                self.state = 2313
                self.match(SnowflakeParser.FUTURE)
                self.state = 2314
                self.object_type_plural()
                self.state = 2315
                self.match(SnowflakeParser.IN)
                self.state = 2320
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [169]:
                    self.state = 2316
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 2317
                    self.id_()
                    pass
                elif token in [656]:
                    self.state = 2318
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 2319
                    self.schema_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 2324
            self.match(SnowflakeParser.FROM)
            self.state = 2326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 2325
                self.match(SnowflakeParser.ROLE)


            self.state = 2328
            self.id_()
            self.state = 2330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==607:
                self.state = 2329
                self.cascade_restrict()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_from_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(SnowflakeParser.REVOKE, 0)

        def object_privilege(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_privilegeContext,0)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def TABLES(self):
            return self.getToken(SnowflakeParser.TABLES, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(SnowflakeParser.VIEWS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_revoke_from_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_from_share" ):
                listener.enterRevoke_from_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_from_share" ):
                listener.exitRevoke_from_share(self)




    def revoke_from_share(self):

        localctx = SnowflakeParser.Revoke_from_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_revoke_from_share)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2332
            self.match(SnowflakeParser.REVOKE)
            self.state = 2333
            self.object_privilege()
            self.state = 2334
            self.match(SnowflakeParser.ON)
            self.state = 2357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 2335
                self.match(SnowflakeParser.DATABASE)
                self.state = 2336
                self.id_()
                pass

            elif la_ == 2:
                self.state = 2337
                self.match(SnowflakeParser.SCHEMA)
                self.state = 2338
                self.schema_name()
                pass

            elif la_ == 3:
                self.state = 2346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [747]:
                    self.state = 2339
                    self.match(SnowflakeParser.TABLE)
                    self.state = 2340
                    self.object_name()
                    pass
                elif token in [17]:
                    self.state = 2341
                    self.match(SnowflakeParser.ALL)
                    self.state = 2342
                    self.match(SnowflakeParser.TABLES)
                    self.state = 2343
                    self.match(SnowflakeParser.IN)
                    self.state = 2344
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 2345
                    self.schema_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 2355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [834]:
                    self.state = 2348
                    self.match(SnowflakeParser.VIEW)
                    self.state = 2349
                    self.object_name()
                    pass
                elif token in [17]:
                    self.state = 2350
                    self.match(SnowflakeParser.ALL)
                    self.state = 2351
                    self.match(SnowflakeParser.VIEWS)
                    self.state = 2352
                    self.match(SnowflakeParser.IN)
                    self.state = 2353
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 2354
                    self.schema_name()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 2359
            self.match(SnowflakeParser.FROM)
            self.state = 2360
            self.match(SnowflakeParser.SHARE)
            self.state = 2361
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(SnowflakeParser.REVOKE, 0)

        def ROLE(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ROLE)
            else:
                return self.getToken(SnowflakeParser.ROLE, i)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Role_nameContext,i)


        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_revoke_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_role" ):
                listener.enterRevoke_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_role" ):
                listener.exitRevoke_role(self)




    def revoke_role(self):

        localctx = SnowflakeParser.Revoke_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_revoke_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2363
            self.match(SnowflakeParser.REVOKE)
            self.state = 2364
            self.match(SnowflakeParser.ROLE)
            self.state = 2365
            self.role_name()
            self.state = 2366
            self.match(SnowflakeParser.FROM)
            self.state = 2371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [620]:
                self.state = 2367
                self.match(SnowflakeParser.ROLE)
                self.state = 2368
                self.role_name()
                pass
            elif token in [816]:
                self.state = 2369
                self.match(SnowflakeParser.USER)
                self.state = 2370
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(SnowflakeParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(SnowflakeParser.WORK, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_rollback

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)




    def rollback(self):

        localctx = SnowflakeParser.RollbackContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_rollback)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.match(SnowflakeParser.ROLLBACK)
            self.state = 2375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==849:
                self.state = 2374
                self.match(SnowflakeParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)




    def set_(self):

        localctx = SnowflakeParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_set)
        self._la = 0 # Token type
        try:
            self.state = 2405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2377
                self.match(SnowflakeParser.SET)
                self.state = 2378
                self.id_()
                self.state = 2379
                self.match(SnowflakeParser.EQ)
                self.state = 2380
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2382
                self.match(SnowflakeParser.SET)
                self.state = 2383
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 2384
                self.id_()
                self.state = 2389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 2385
                    self.match(SnowflakeParser.COMMA)
                    self.state = 2386
                    self.id_()
                    self.state = 2391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2392
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 2393
                self.match(SnowflakeParser.EQ)
                self.state = 2394
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 2395
                self.expr(0)
                self.state = 2400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 2396
                    self.match(SnowflakeParser.COMMA)
                    self.state = 2397
                    self.expr(0)
                    self.state = 2402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2403
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Truncate_materialized_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(SnowflakeParser.TRUNCATE, 0)

        def MATERIALIZED(self):
            return self.getToken(SnowflakeParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_truncate_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncate_materialized_view" ):
                listener.enterTruncate_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncate_materialized_view" ):
                listener.exitTruncate_materialized_view(self)




    def truncate_materialized_view(self):

        localctx = SnowflakeParser.Truncate_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_truncate_materialized_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2407
            self.match(SnowflakeParser.TRUNCATE)
            self.state = 2408
            self.match(SnowflakeParser.MATERIALIZED)
            self.state = 2409
            self.match(SnowflakeParser.VIEW)
            self.state = 2410
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Truncate_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(SnowflakeParser.TRUNCATE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_truncate_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncate_table" ):
                listener.enterTruncate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncate_table" ):
                listener.exitTruncate_table(self)




    def truncate_table(self):

        localctx = SnowflakeParser.Truncate_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_truncate_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(SnowflakeParser.TRUNCATE)
            self.state = 2414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==747:
                self.state = 2413
                self.match(SnowflakeParser.TABLE)


            self.state = 2417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 2416
                self.if_exists()


            self.state = 2419
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_unset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnset" ):
                listener.enterUnset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnset" ):
                listener.exitUnset(self)




    def unset(self):

        localctx = SnowflakeParser.UnsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_unset)
        self._la = 0 # Token type
        try:
            self.state = 2435
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2421
                self.match(SnowflakeParser.UNSET)
                self.state = 2422
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2423
                self.match(SnowflakeParser.UNSET)
                self.state = 2424
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 2425
                self.id_()
                self.state = 2430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 2426
                    self.match(SnowflakeParser.COMMA)
                    self.state = 2427
                    self.id_()
                    self.state = 2432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2433
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_account(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_accountContext,0)


        def alter_alert(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_alertContext,0)


        def alter_api_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_api_integrationContext,0)


        def alter_connection(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_connectionContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_databaseContext,0)


        def alter_dataset(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_datasetContext,0)


        def alter_dynamic_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_dynamic_tableContext,0)


        def alter_external_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_external_tableContext,0)


        def alter_failover_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_failover_groupContext,0)


        def alter_file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_file_formatContext,0)


        def alter_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_functionContext,0)


        def alter_git_repository(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_git_repositoryContext,0)


        def alter_masking_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_masking_policyContext,0)


        def alter_materialized_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_materialized_viewContext,0)


        def alter_network_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_network_policyContext,0)


        def alter_notification_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_notification_integrationContext,0)


        def alter_password_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_password_policyContext,0)


        def alter_pipe(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_pipeContext,0)


        def alter_procedure(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_procedureContext,0)


        def alter_replication_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_replication_groupContext,0)


        def alter_resource_monitor(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_resource_monitorContext,0)


        def alter_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_roleContext,0)


        def alter_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_row_access_policyContext,0)


        def alter_schema(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_schemaContext,0)


        def alter_secret(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_secretContext,0)


        def alter_security_integration_external_oauth(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_security_integration_external_oauthContext,0)


        def alter_security_integration_snowflake_oauth(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_security_integration_snowflake_oauthContext,0)


        def alter_security_integration_saml2(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_security_integration_saml2Context,0)


        def alter_security_integration_scim(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_security_integration_scimContext,0)


        def alter_sequence(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_sequenceContext,0)


        def alter_session(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_sessionContext,0)


        def alter_session_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_session_policyContext,0)


        def alter_share(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_shareContext,0)


        def alter_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_stageContext,0)


        def alter_storage_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_storage_integrationContext,0)


        def alter_stream(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_streamContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_tableContext,0)


        def alter_table_alter_column(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_table_alter_columnContext,0)


        def alter_tag(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_tagContext,0)


        def alter_task(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_taskContext,0)


        def alter_user(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_userContext,0)


        def alter_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_viewContext,0)


        def alter_warehouse(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_warehouseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_command" ):
                listener.enterAlter_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_command" ):
                listener.exitAlter_command(self)




    def alter_command(self):

        localctx = SnowflakeParser.Alter_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alter_command)
        try:
            self.state = 2480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2437
                self.alter_account()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2438
                self.alter_alert()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2439
                self.alter_api_integration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2440
                self.alter_connection()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2441
                self.alter_database()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2442
                self.alter_dataset()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2443
                self.alter_dynamic_table()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2444
                self.alter_external_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2445
                self.alter_failover_group()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2446
                self.alter_file_format()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2447
                self.alter_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2448
                self.alter_git_repository()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2449
                self.alter_masking_policy()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2450
                self.alter_materialized_view()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2451
                self.alter_network_policy()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2452
                self.alter_notification_integration()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2453
                self.alter_password_policy()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2454
                self.alter_pipe()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2455
                self.alter_procedure()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2456
                self.alter_replication_group()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2457
                self.alter_resource_monitor()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2458
                self.alter_role()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2459
                self.alter_row_access_policy()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2460
                self.alter_schema()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2461
                self.alter_secret()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2462
                self.alter_security_integration_external_oauth()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2463
                self.alter_security_integration_snowflake_oauth()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2464
                self.alter_security_integration_saml2()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2465
                self.alter_security_integration_scim()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2466
                self.alter_sequence()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2467
                self.alter_session()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2468
                self.alter_session_policy()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2469
                self.alter_share()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2470
                self.alter_stage()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2471
                self.alter_storage_integration()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2472
                self.alter_stream()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2473
                self.alter_table()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2474
                self.alter_table_alter_column()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2475
                self.alter_tag()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2476
                self.alter_task()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2477
                self.alter_user()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2478
                self.alter_view()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2479
                self.alter_warehouse()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Account_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_ID_TOKEN(self):
            return self.getToken(SnowflakeParser.ALLOW_ID_TOKEN, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def CLIENT_ENCRYPTION_KEY_SIZE(self):
            return self.getToken(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def ENFORCE_SESSION_POLICY(self):
            return self.getToken(SnowflakeParser.ENFORCE_SESSION_POLICY, 0)

        def EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0)

        def INITIAL_REPLICATION_SIZE_LIMIT_IN_TB(self):
            return self.getToken(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0)

        def NETWORK_POLICY(self):
            return self.getToken(SnowflakeParser.NETWORK_POLICY, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def PERIODIC_DATA_REKEYING(self):
            return self.getToken(SnowflakeParser.PERIODIC_DATA_REKEYING, 0)

        def PREVENT_UNLOAD_TO_INLINE_URL(self):
            return self.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL, 0)

        def PREVENT_UNLOAD_TO_INTERNAL_STAGES(self):
            return self.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES, 0)

        def REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION(self):
            return self.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0)

        def REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION(self):
            return self.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0)

        def SAML_IDENTITY_PROVIDER(self):
            return self.getToken(SnowflakeParser.SAML_IDENTITY_PROVIDER, 0)

        def json_literal(self):
            return self.getTypedRuleContext(SnowflakeParser.Json_literalContext,0)


        def SESSION_POLICY(self):
            return self.getToken(SnowflakeParser.SESSION_POLICY, 0)

        def SSO_LOGIN_PAGE(self):
            return self.getToken(SnowflakeParser.SSO_LOGIN_PAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_account_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccount_params" ):
                listener.enterAccount_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccount_params" ):
                listener.exitAccount_params(self)




    def account_params(self):

        localctx = SnowflakeParser.Account_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_account_params)
        try:
            self.state = 2524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2482
                self.match(SnowflakeParser.ALLOW_ID_TOKEN)
                self.state = 2483
                self.match(SnowflakeParser.EQ)
                self.state = 2484
                self.true_false()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2485
                self.match(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE)
                self.state = 2486
                self.match(SnowflakeParser.EQ)
                self.state = 2487
                self.num()
                pass
            elif token in [229]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2488
                self.match(SnowflakeParser.ENFORCE_SESSION_POLICY)
                self.state = 2489
                self.match(SnowflakeParser.EQ)
                self.state = 2490
                self.true_false()
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2491
                self.match(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST)
                self.state = 2492
                self.match(SnowflakeParser.EQ)
                self.state = 2493
                self.true_false()
                pass
            elif token in [348]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2494
                self.match(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB)
                self.state = 2495
                self.match(SnowflakeParser.EQ)
                self.state = 2496
                self.num()
                pass
            elif token in [439]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2497
                self.match(SnowflakeParser.NETWORK_POLICY)
                self.state = 2498
                self.match(SnowflakeParser.EQ)
                self.state = 2499
                self.string()
                pass
            elif token in [537]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2500
                self.match(SnowflakeParser.PERIODIC_DATA_REKEYING)
                self.state = 2501
                self.match(SnowflakeParser.EQ)
                self.state = 2502
                self.true_false()
                pass
            elif token in [548]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2503
                self.match(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL)
                self.state = 2504
                self.match(SnowflakeParser.EQ)
                self.state = 2505
                self.true_false()
                pass
            elif token in [549]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2506
                self.match(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES)
                self.state = 2507
                self.match(SnowflakeParser.EQ)
                self.state = 2508
                self.true_false()
                pass
            elif token in [599]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2509
                self.match(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION)
                self.state = 2510
                self.match(SnowflakeParser.EQ)
                self.state = 2511
                self.true_false()
                pass
            elif token in [600]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2512
                self.match(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION)
                self.state = 2513
                self.match(SnowflakeParser.EQ)
                self.state = 2514
                self.true_false()
                pass
            elif token in [650]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2515
                self.match(SnowflakeParser.SAML_IDENTITY_PROVIDER)
                self.state = 2516
                self.match(SnowflakeParser.EQ)
                self.state = 2517
                self.json_literal()
                pass
            elif token in [674]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2518
                self.match(SnowflakeParser.SESSION_POLICY)
                self.state = 2519
                self.match(SnowflakeParser.EQ)
                self.state = 2520
                self.string()
                pass
            elif token in [705]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2521
                self.match(SnowflakeParser.SSO_LOGIN_PAGE)
                self.state = 2522
                self.match(SnowflakeParser.EQ)
                self.state = 2523
                self.true_false()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def default_ddl_collation(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_ddl_collationContext,0)


        def MAX_CONCURRENCY_LEVEL(self):
            return self.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0)

        def NETWORK_POLICY(self):
            return self.getToken(SnowflakeParser.NETWORK_POLICY, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def PIPE_EXECUTION_PAUSED(self):
            return self.getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def SESSION_POLICY(self):
            return self.getToken(SnowflakeParser.SESSION_POLICY, 0)

        def STATEMENT_QUEUED_TIMEOUT_IN_SECONDS(self):
            return self.getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0)

        def STATEMENT_TIMEOUT_IN_SECONDS(self):
            return self.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_params" ):
                listener.enterObject_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_params" ):
                listener.exitObject_params(self)




    def object_params(self):

        localctx = SnowflakeParser.Object_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_object_params)
        try:
            self.state = 2551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [173]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2526
                self.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS)
                self.state = 2527
                self.match(SnowflakeParser.EQ)
                self.state = 2528
                self.num()
                pass
            elif token in [413]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2529
                self.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS)
                self.state = 2530
                self.match(SnowflakeParser.EQ)
                self.state = 2531
                self.num()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2532
                self.default_ddl_collation()
                pass
            elif token in [412]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2533
                self.match(SnowflakeParser.MAX_CONCURRENCY_LEVEL)
                self.state = 2534
                self.match(SnowflakeParser.EQ)
                self.state = 2535
                self.num()
                pass
            elif token in [439]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2536
                self.match(SnowflakeParser.NETWORK_POLICY)
                self.state = 2537
                self.match(SnowflakeParser.EQ)
                self.state = 2538
                self.string()
                pass
            elif token in [541]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2539
                self.match(SnowflakeParser.PIPE_EXECUTION_PAUSED)
                self.state = 2540
                self.match(SnowflakeParser.EQ)
                self.state = 2541
                self.true_false()
                pass
            elif token in [674]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2542
                self.match(SnowflakeParser.SESSION_POLICY)
                self.state = 2543
                self.match(SnowflakeParser.EQ)
                self.state = 2544
                self.string()
                pass
            elif token in [717]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2545
                self.match(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS)
                self.state = 2546
                self.match(SnowflakeParser.EQ)
                self.state = 2547
                self.num()
                pass
            elif token in [718]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2548
                self.match(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS)
                self.state = 2549
                self.match(SnowflakeParser.EQ)
                self.state = 2550
                self.num()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_ddl_collationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_default_ddl_collation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_ddl_collation" ):
                listener.enterDefault_ddl_collation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_ddl_collation" ):
                listener.exitDefault_ddl_collation(self)




    def default_ddl_collation(self):

        localctx = SnowflakeParser.Default_ddl_collationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_default_ddl_collation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2553
            self.match(SnowflakeParser.DEFAULT_DDL_COLLATION_)
            self.state = 2554
            self.match(SnowflakeParser.EQ)
            self.state = 2555
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_propertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def LOGIN_NAME(self):
            return self.getToken(SnowflakeParser.LOGIN_NAME, 0)

        def DISPLAY_NAME(self):
            return self.getToken(SnowflakeParser.DISPLAY_NAME, 0)

        def FIRST_NAME(self):
            return self.getToken(SnowflakeParser.FIRST_NAME, 0)

        def MIDDLE_NAME(self):
            return self.getToken(SnowflakeParser.MIDDLE_NAME, 0)

        def LAST_NAME(self):
            return self.getToken(SnowflakeParser.LAST_NAME, 0)

        def EMAIL(self):
            return self.getToken(SnowflakeParser.EMAIL, 0)

        def MUST_CHANGE_PASSWORD(self):
            return self.getToken(SnowflakeParser.MUST_CHANGE_PASSWORD, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def DISABLED(self):
            return self.getToken(SnowflakeParser.DISABLED, 0)

        def DAYS_TO_EXPIRY(self):
            return self.getToken(SnowflakeParser.DAYS_TO_EXPIRY, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def MINS_TO_UNLOCK(self):
            return self.getToken(SnowflakeParser.MINS_TO_UNLOCK, 0)

        def DEFAULT_WAREHOUSE(self):
            return self.getToken(SnowflakeParser.DEFAULT_WAREHOUSE, 0)

        def DEFAULT_NAMESPACE(self):
            return self.getToken(SnowflakeParser.DEFAULT_NAMESPACE, 0)

        def DEFAULT_ROLE(self):
            return self.getToken(SnowflakeParser.DEFAULT_ROLE, 0)

        def MINS_TO_BYPASS_MFA(self):
            return self.getToken(SnowflakeParser.MINS_TO_BYPASS_MFA, 0)

        def RSA_PUBLIC_KEY(self):
            return self.getToken(SnowflakeParser.RSA_PUBLIC_KEY, 0)

        def RSA_PUBLIC_KEY_2(self):
            return self.getToken(SnowflakeParser.RSA_PUBLIC_KEY_2, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_properties" ):
                listener.enterObject_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_properties" ):
                listener.exitObject_properties(self)




    def object_properties(self):

        localctx = SnowflakeParser.Object_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_object_properties)
        try:
            self.state = 2609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [520]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2557
                self.match(SnowflakeParser.PASSWORD)
                self.state = 2558
                self.match(SnowflakeParser.EQ)
                self.state = 2559
                self.string()
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2560
                self.match(SnowflakeParser.LOGIN_NAME)
                self.state = 2561
                self.match(SnowflakeParser.EQ)
                self.state = 2562
                self.string()
                pass
            elif token in [204]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2563
                self.match(SnowflakeParser.DISPLAY_NAME)
                self.state = 2564
                self.match(SnowflakeParser.EQ)
                self.state = 2565
                self.string()
                pass
            elif token in [275]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2566
                self.match(SnowflakeParser.FIRST_NAME)
                self.state = 2567
                self.match(SnowflakeParser.EQ)
                self.state = 2568
                self.string()
                pass
            elif token in [420]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2569
                self.match(SnowflakeParser.MIDDLE_NAME)
                self.state = 2570
                self.match(SnowflakeParser.EQ)
                self.state = 2571
                self.string()
                pass
            elif token in [377]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2572
                self.match(SnowflakeParser.LAST_NAME)
                self.state = 2573
                self.match(SnowflakeParser.EQ)
                self.state = 2574
                self.string()
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2575
                self.match(SnowflakeParser.EMAIL)
                self.state = 2576
                self.match(SnowflakeParser.EQ)
                self.state = 2577
                self.string()
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2578
                self.match(SnowflakeParser.MUST_CHANGE_PASSWORD)
                self.state = 2579
                self.match(SnowflakeParser.EQ)
                self.state = 2580
                self.true_false()
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2581
                self.match(SnowflakeParser.DISABLED)
                self.state = 2582
                self.match(SnowflakeParser.EQ)
                self.state = 2583
                self.true_false()
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2584
                self.match(SnowflakeParser.DAYS_TO_EXPIRY)
                self.state = 2585
                self.match(SnowflakeParser.EQ)
                self.state = 2586
                self.num()
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2587
                self.match(SnowflakeParser.MINS_TO_UNLOCK)
                self.state = 2588
                self.match(SnowflakeParser.EQ)
                self.state = 2589
                self.num()
                pass
            elif token in [186]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2590
                self.match(SnowflakeParser.DEFAULT_WAREHOUSE)
                self.state = 2591
                self.match(SnowflakeParser.EQ)
                self.state = 2592
                self.string()
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2593
                self.match(SnowflakeParser.DEFAULT_NAMESPACE)
                self.state = 2594
                self.match(SnowflakeParser.EQ)
                self.state = 2595
                self.string()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2596
                self.match(SnowflakeParser.DEFAULT_ROLE)
                self.state = 2597
                self.match(SnowflakeParser.EQ)
                self.state = 2598
                self.string()
                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2599
                self.match(SnowflakeParser.MINS_TO_BYPASS_MFA)
                self.state = 2600
                self.match(SnowflakeParser.EQ)
                self.state = 2601
                self.num()
                pass
            elif token in [630]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2602
                self.match(SnowflakeParser.RSA_PUBLIC_KEY)
                self.state = 2603
                self.match(SnowflakeParser.EQ)
                self.state = 2604
                self.string()
                pass
            elif token in [631]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2605
                self.match(SnowflakeParser.RSA_PUBLIC_KEY_2)
                self.state = 2606
                self.match(SnowflakeParser.EQ)
                self.state = 2607
                self.string()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2608
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_DETACHED_QUERY(self):
            return self.getToken(SnowflakeParser.ABORT_DETACHED_QUERY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def AUTOCOMMIT(self):
            return self.getToken(SnowflakeParser.AUTOCOMMIT, 0)

        def BINARY_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.BINARY_INPUT_FORMAT, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def BINARY_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.BINARY_OUTPUT_FORMAT, 0)

        def DATE_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.DATE_INPUT_FORMAT, 0)

        def DATE_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.DATE_OUTPUT_FORMAT, 0)

        def ERROR_ON_NONDETERMINISTIC_MERGE(self):
            return self.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE, 0)

        def ERROR_ON_NONDETERMINISTIC_UPDATE(self):
            return self.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE, 0)

        def JSON_INDENT(self):
            return self.getToken(SnowflakeParser.JSON_INDENT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def LOCK_TIMEOUT(self):
            return self.getToken(SnowflakeParser.LOCK_TIMEOUT, 0)

        def QUERY_TAG(self):
            return self.getToken(SnowflakeParser.QUERY_TAG, 0)

        def ROWS_PER_RESULTSET(self):
            return self.getToken(SnowflakeParser.ROWS_PER_RESULTSET, 0)

        def SIMULATED_DATA_SHARING_CONSUMER(self):
            return self.getToken(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER, 0)

        def STATEMENT_TIMEOUT_IN_SECONDS(self):
            return self.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0)

        def STRICT_JSON_OUTPUT(self):
            return self.getToken(SnowflakeParser.STRICT_JSON_OUTPUT, 0)

        def TIMESTAMP_DAY_IS_ALWAYS_24H(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H, 0)

        def TIMESTAMP_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_INPUT_FORMAT, 0)

        def TIMESTAMP_LTZ_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT, 0)

        def TIMESTAMP_NTZ_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT, 0)

        def TIMESTAMP_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT, 0)

        def TIMESTAMP_TYPE_MAPPING(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_TYPE_MAPPING, 0)

        def TIMESTAMP_TZ_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT, 0)

        def TIMEZONE(self):
            return self.getToken(SnowflakeParser.TIMEZONE, 0)

        def TIME_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIME_INPUT_FORMAT, 0)

        def TIME_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIME_OUTPUT_FORMAT, 0)

        def TRANSACTION_DEFAULT_ISOLATION_LEVEL(self):
            return self.getToken(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL, 0)

        def TWO_DIGIT_CENTURY_START(self):
            return self.getToken(SnowflakeParser.TWO_DIGIT_CENTURY_START, 0)

        def UNSUPPORTED_DDL_ACTION(self):
            return self.getToken(SnowflakeParser.UNSUPPORTED_DDL_ACTION, 0)

        def USE_CACHED_RESULT(self):
            return self.getToken(SnowflakeParser.USE_CACHED_RESULT, 0)

        def WEEK_OF_YEAR_POLICY(self):
            return self.getToken(SnowflakeParser.WEEK_OF_YEAR_POLICY, 0)

        def WEEK_START(self):
            return self.getToken(SnowflakeParser.WEEK_START, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_session_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_params" ):
                listener.enterSession_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_params" ):
                listener.exitSession_params(self)




    def session_params(self):

        localctx = SnowflakeParser.Session_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_session_params)
        try:
            self.state = 2704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2611
                self.match(SnowflakeParser.ABORT_DETACHED_QUERY)
                self.state = 2612
                self.match(SnowflakeParser.EQ)
                self.state = 2613
                self.true_false()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2614
                self.match(SnowflakeParser.AUTOCOMMIT)
                self.state = 2615
                self.match(SnowflakeParser.EQ)
                self.state = 2616
                self.true_false()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2617
                self.match(SnowflakeParser.BINARY_INPUT_FORMAT)
                self.state = 2618
                self.match(SnowflakeParser.EQ)
                self.state = 2619
                self.string()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2620
                self.match(SnowflakeParser.BINARY_OUTPUT_FORMAT)
                self.state = 2621
                self.match(SnowflakeParser.EQ)
                self.state = 2622
                self.string()
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2623
                self.match(SnowflakeParser.DATE_INPUT_FORMAT)
                self.state = 2624
                self.match(SnowflakeParser.EQ)
                self.state = 2625
                self.string()
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2626
                self.match(SnowflakeParser.DATE_OUTPUT_FORMAT)
                self.state = 2627
                self.match(SnowflakeParser.EQ)
                self.state = 2628
                self.string()
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2629
                self.match(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE)
                self.state = 2630
                self.match(SnowflakeParser.EQ)
                self.state = 2631
                self.true_false()
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2632
                self.match(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE)
                self.state = 2633
                self.match(SnowflakeParser.EQ)
                self.state = 2634
                self.true_false()
                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2635
                self.match(SnowflakeParser.JSON_INDENT)
                self.state = 2636
                self.match(SnowflakeParser.EQ)
                self.state = 2637
                self.num()
                pass
            elif token in [393]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2638
                self.match(SnowflakeParser.LOCK_TIMEOUT)
                self.state = 2639
                self.match(SnowflakeParser.EQ)
                self.state = 2640
                self.num()
                pass
            elif token in [569]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2641
                self.match(SnowflakeParser.QUERY_TAG)
                self.state = 2642
                self.match(SnowflakeParser.EQ)
                self.state = 2643
                self.string()
                pass
            elif token in [628]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2644
                self.match(SnowflakeParser.ROWS_PER_RESULTSET)
                self.state = 2645
                self.match(SnowflakeParser.EQ)
                self.state = 2646
                self.num()
                pass
            elif token in [684]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2647
                self.match(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER)
                self.state = 2648
                self.match(SnowflakeParser.EQ)
                self.state = 2649
                self.string()
                pass
            elif token in [718]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2650
                self.match(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS)
                self.state = 2651
                self.match(SnowflakeParser.EQ)
                self.state = 2652
                self.num()
                pass
            elif token in [731]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2653
                self.match(SnowflakeParser.STRICT_JSON_OUTPUT)
                self.state = 2654
                self.match(SnowflakeParser.EQ)
                self.state = 2655
                self.true_false()
                pass
            elif token in [767]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2656
                self.match(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H)
                self.state = 2657
                self.match(SnowflakeParser.EQ)
                self.state = 2658
                self.true_false()
                pass
            elif token in [769]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2659
                self.match(SnowflakeParser.TIMESTAMP_INPUT_FORMAT)
                self.state = 2660
                self.match(SnowflakeParser.EQ)
                self.state = 2661
                self.string()
                pass
            elif token in [771]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2662
                self.match(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT)
                self.state = 2663
                self.match(SnowflakeParser.EQ)
                self.state = 2664
                self.string()
                pass
            elif token in [773]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2665
                self.match(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT)
                self.state = 2666
                self.match(SnowflakeParser.EQ)
                self.state = 2667
                self.string()
                pass
            elif token in [774]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2668
                self.match(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT)
                self.state = 2669
                self.match(SnowflakeParser.EQ)
                self.state = 2670
                self.string()
                pass
            elif token in [775]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2671
                self.match(SnowflakeParser.TIMESTAMP_TYPE_MAPPING)
                self.state = 2672
                self.match(SnowflakeParser.EQ)
                self.state = 2673
                self.string()
                pass
            elif token in [777]:
                self.enterOuterAlt(localctx, 22)
                self.state = 2674
                self.match(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT)
                self.state = 2675
                self.match(SnowflakeParser.EQ)
                self.state = 2676
                self.string()
                pass
            elif token in [780]:
                self.enterOuterAlt(localctx, 23)
                self.state = 2677
                self.match(SnowflakeParser.TIMEZONE)
                self.state = 2678
                self.match(SnowflakeParser.EQ)
                self.state = 2679
                self.string()
                pass
            elif token in [782]:
                self.enterOuterAlt(localctx, 24)
                self.state = 2680
                self.match(SnowflakeParser.TIME_INPUT_FORMAT)
                self.state = 2681
                self.match(SnowflakeParser.EQ)
                self.state = 2682
                self.string()
                pass
            elif token in [783]:
                self.enterOuterAlt(localctx, 25)
                self.state = 2683
                self.match(SnowflakeParser.TIME_OUTPUT_FORMAT)
                self.state = 2684
                self.match(SnowflakeParser.EQ)
                self.state = 2685
                self.string()
                pass
            elif token in [792]:
                self.enterOuterAlt(localctx, 26)
                self.state = 2686
                self.match(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL)
                self.state = 2687
                self.match(SnowflakeParser.EQ)
                self.state = 2688
                self.string()
                pass
            elif token in [802]:
                self.enterOuterAlt(localctx, 27)
                self.state = 2689
                self.match(SnowflakeParser.TWO_DIGIT_CENTURY_START)
                self.state = 2690
                self.match(SnowflakeParser.EQ)
                self.state = 2691
                self.num()
                pass
            elif token in [810]:
                self.enterOuterAlt(localctx, 28)
                self.state = 2692
                self.match(SnowflakeParser.UNSUPPORTED_DDL_ACTION)
                self.state = 2693
                self.match(SnowflakeParser.EQ)
                self.state = 2694
                self.string()
                pass
            elif token in [824]:
                self.enterOuterAlt(localctx, 29)
                self.state = 2695
                self.match(SnowflakeParser.USE_CACHED_RESULT)
                self.state = 2696
                self.match(SnowflakeParser.EQ)
                self.state = 2697
                self.true_false()
                pass
            elif token in [843]:
                self.enterOuterAlt(localctx, 30)
                self.state = 2698
                self.match(SnowflakeParser.WEEK_OF_YEAR_POLICY)
                self.state = 2699
                self.match(SnowflakeParser.EQ)
                self.state = 2700
                self.num()
                pass
            elif token in [844]:
                self.enterOuterAlt(localctx, 31)
                self.state = 2701
                self.match(SnowflakeParser.WEEK_START)
                self.state = 2702
                self.match(SnowflakeParser.EQ)
                self.state = 2703
                self.num()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_accountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def alter_account_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_account_optsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_account

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_account" ):
                listener.enterAlter_account(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_account" ):
                listener.exitAlter_account(self)




    def alter_account(self):

        localctx = SnowflakeParser.Alter_accountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alter_account)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2706
            self.match(SnowflakeParser.ALTER)
            self.state = 2707
            self.match(SnowflakeParser.ACCOUNT)
            self.state = 2708
            self.alter_account_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enabled_true_falseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_enabled_true_false

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabled_true_false" ):
                listener.enterEnabled_true_false(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabled_true_false" ):
                listener.exitEnabled_true_false(self)




    def enabled_true_false(self):

        localctx = SnowflakeParser.Enabled_true_falseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_enabled_true_false)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2710
            self.match(SnowflakeParser.ENABLED)
            self.state = 2711
            self.match(SnowflakeParser.EQ)
            self.state = 2712
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_alertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def ALERT(self):
            return self.getToken(SnowflakeParser.ALERT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def resume_suspend(self):
            return self.getTypedRuleContext(SnowflakeParser.Resume_suspendContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def MODIFY(self):
            return self.getToken(SnowflakeParser.MODIFY, 0)

        def CONDITION(self):
            return self.getToken(SnowflakeParser.CONDITION, 0)

        def EXISTS(self):
            return self.getToken(SnowflakeParser.EXISTS, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def alert_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Alert_conditionContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def ACTION(self):
            return self.getToken(SnowflakeParser.ACTION, 0)

        def alert_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Alert_actionContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def alert_set_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Alert_set_clauseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Alert_set_clauseContext,i)


        def alert_unset_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Alert_unset_clauseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Alert_unset_clauseContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_alert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_alert" ):
                listener.enterAlter_alert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_alert" ):
                listener.exitAlter_alert(self)




    def alter_alert(self):

        localctx = SnowflakeParser.Alter_alertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alter_alert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2714
            self.match(SnowflakeParser.ALTER)
            self.state = 2715
            self.match(SnowflakeParser.ALERT)
            self.state = 2717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 2716
                self.if_exists()


            self.state = 2719
            self.id_()
            self.state = 2743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 2720
                self.resume_suspend()
                pass

            elif la_ == 2:
                self.state = 2721
                self.match(SnowflakeParser.SET)
                self.state = 2723 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2722
                    self.alert_set_clause()
                    self.state = 2725 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138 or _la==655 or _la==838):
                        break

                pass

            elif la_ == 3:
                self.state = 2727
                self.match(SnowflakeParser.UNSET)
                self.state = 2729 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2728
                    self.alert_unset_clause()
                    self.state = 2731 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138 or _la==655 or _la==838):
                        break

                pass

            elif la_ == 4:
                self.state = 2733
                self.match(SnowflakeParser.MODIFY)
                self.state = 2734
                self.match(SnowflakeParser.CONDITION)
                self.state = 2735
                self.match(SnowflakeParser.EXISTS)
                self.state = 2736
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 2737
                self.alert_condition()
                self.state = 2738
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.state = 2740
                self.match(SnowflakeParser.MODIFY)
                self.state = 2741
                self.match(SnowflakeParser.ACTION)
                self.state = 2742
                self.alert_action()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resume_suspendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESUME(self):
            return self.getToken(SnowflakeParser.RESUME, 0)

        def SUSPEND(self):
            return self.getToken(SnowflakeParser.SUSPEND, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_resume_suspend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResume_suspend" ):
                listener.enterResume_suspend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResume_suspend" ):
                listener.exitResume_suspend(self)




    def resume_suspend(self):

        localctx = SnowflakeParser.Resume_suspendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_resume_suspend)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2745
            _la = self._input.LA(1)
            if not(_la==610 or _la==738):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alert_set_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEDULE(self):
            return self.getToken(SnowflakeParser.SCHEDULE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alert_set_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlert_set_clause" ):
                listener.enterAlert_set_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlert_set_clause" ):
                listener.exitAlert_set_clause(self)




    def alert_set_clause(self):

        localctx = SnowflakeParser.Alert_set_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_alert_set_clause)
        try:
            self.state = 2754
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [838]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2747
                self.match(SnowflakeParser.WAREHOUSE)
                self.state = 2748
                self.match(SnowflakeParser.EQ)
                self.state = 2749
                self.id_()
                pass
            elif token in [655]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2750
                self.match(SnowflakeParser.SCHEDULE)
                self.state = 2751
                self.match(SnowflakeParser.EQ)
                self.state = 2752
                self.string()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2753
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alert_unset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def SCHEDULE(self):
            return self.getToken(SnowflakeParser.SCHEDULE, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alert_unset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlert_unset_clause" ):
                listener.enterAlert_unset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlert_unset_clause" ):
                listener.exitAlert_unset_clause(self)




    def alert_unset_clause(self):

        localctx = SnowflakeParser.Alert_unset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_alert_unset_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2756
            _la = self._input.LA(1)
            if not(_la==138 or _la==655 or _la==838):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_api_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def API(self):
            return self.getToken(SnowflakeParser.API, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def API_AWS_ROLE_ARN(self):
            return self.getToken(SnowflakeParser.API_AWS_ROLE_ARN, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def AZURE_AD_APPLICATION_ID(self):
            return self.getToken(SnowflakeParser.AZURE_AD_APPLICATION_ID, 0)

        def API_KEY(self):
            return self.getToken(SnowflakeParser.API_KEY, 0)

        def enabled_true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.Enabled_true_falseContext,0)


        def API_ALLOWED_PREFIXES(self):
            return self.getToken(SnowflakeParser.API_ALLOWED_PREFIXES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def API_BLOCKED_PREFIXES(self):
            return self.getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def api_integration_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Api_integration_propertyContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Api_integration_propertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_api_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_api_integration" ):
                listener.enterAlter_api_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_api_integration" ):
                listener.exitAlter_api_integration(self)




    def alter_api_integration(self):

        localctx = SnowflakeParser.Alter_api_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_alter_api_integration)
        self._la = 0 # Token type
        try:
            self.state = 2839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2758
                self.match(SnowflakeParser.ALTER)
                self.state = 2760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 2759
                    self.match(SnowflakeParser.API)


                self.state = 2762
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 2764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 2763
                    self.if_exists()


                self.state = 2766
                self.id_()
                self.state = 2767
                self.match(SnowflakeParser.SET)
                self.state = 2771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 2768
                    self.match(SnowflakeParser.API_AWS_ROLE_ARN)
                    self.state = 2769
                    self.match(SnowflakeParser.EQ)
                    self.state = 2770
                    self.string()


                self.state = 2776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 2773
                    self.match(SnowflakeParser.AZURE_AD_APPLICATION_ID)
                    self.state = 2774
                    self.match(SnowflakeParser.EQ)
                    self.state = 2775
                    self.string()


                self.state = 2781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 2778
                    self.match(SnowflakeParser.API_KEY)
                    self.state = 2779
                    self.match(SnowflakeParser.EQ)
                    self.state = 2780
                    self.string()


                self.state = 2784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 2783
                    self.enabled_true_false()


                self.state = 2792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 2786
                    self.match(SnowflakeParser.API_ALLOWED_PREFIXES)
                    self.state = 2787
                    self.match(SnowflakeParser.EQ)
                    self.state = 2788
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 2789
                    self.string()
                    self.state = 2790
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 2794
                    self.match(SnowflakeParser.API_BLOCKED_PREFIXES)
                    self.state = 2795
                    self.match(SnowflakeParser.EQ)
                    self.state = 2796
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 2797
                    self.string()
                    self.state = 2798
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 2803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2802
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2805
                self.match(SnowflakeParser.ALTER)
                self.state = 2807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 2806
                    self.match(SnowflakeParser.API)


                self.state = 2809
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 2810
                self.id_()
                self.state = 2811
                self.set_tags()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2813
                self.match(SnowflakeParser.ALTER)
                self.state = 2815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 2814
                    self.match(SnowflakeParser.API)


                self.state = 2817
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 2818
                self.id_()
                self.state = 2819
                self.unset_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2821
                self.match(SnowflakeParser.ALTER)
                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 2822
                    self.match(SnowflakeParser.API)


                self.state = 2825
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 2827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 2826
                    self.if_exists()


                self.state = 2829
                self.id_()
                self.state = 2830
                self.match(SnowflakeParser.UNSET)
                self.state = 2831
                self.api_integration_property()
                self.state = 2836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 2832
                    self.match(SnowflakeParser.COMMA)
                    self.state = 2833
                    self.api_integration_property()
                    self.state = 2838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Api_integration_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def API_KEY(self):
            return self.getToken(SnowflakeParser.API_KEY, 0)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def API_BLOCKED_PREFIXES(self):
            return self.getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_api_integration_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApi_integration_property" ):
                listener.enterApi_integration_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApi_integration_property" ):
                listener.exitApi_integration_property(self)




    def api_integration_property(self):

        localctx = SnowflakeParser.Api_integration_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_api_integration_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2841
            _la = self._input.LA(1)
            if not(_la==36 or _la==38 or _la==138 or _la==217):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_connectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def CONNECTION(self):
            return self.getToken(SnowflakeParser.CONNECTION, 0)

        def alter_connection_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_connection_optsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_connection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_connection" ):
                listener.enterAlter_connection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_connection" ):
                listener.exitAlter_connection(self)




    def alter_connection(self):

        localctx = SnowflakeParser.Alter_connectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_alter_connection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2843
            self.match(SnowflakeParser.ALTER)
            self.state = 2844
            self.match(SnowflakeParser.CONNECTION)
            self.state = 2845
            self.alter_connection_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SWAP(self):
            return self.getToken(SnowflakeParser.SWAP, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def default_ddl_collation(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_ddl_collationContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def database_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Database_propertyContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Database_propertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ACCOUNTS, 0)

        def account_id_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Account_id_listContext,0)


        def IGNORE(self):
            return self.getToken(SnowflakeParser.IGNORE, 0)

        def EDITION(self):
            return self.getToken(SnowflakeParser.EDITION, 0)

        def CHECK(self):
            return self.getToken(SnowflakeParser.CHECK, 0)

        def DISABLE(self):
            return self.getToken(SnowflakeParser.DISABLE, 0)

        def REFRESH(self):
            return self.getToken(SnowflakeParser.REFRESH, 0)

        def FAILOVER(self):
            return self.getToken(SnowflakeParser.FAILOVER, 0)

        def PRIMARY(self):
            return self.getToken(SnowflakeParser.PRIMARY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)




    def alter_database(self):

        localctx = SnowflakeParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_alter_database)
        self._la = 0 # Token type
        try:
            self.state = 2967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2847
                self.match(SnowflakeParser.ALTER)
                self.state = 2848
                self.match(SnowflakeParser.DATABASE)
                self.state = 2850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 2849
                    self.if_exists()


                self.state = 2852
                self.id_()
                self.state = 2853
                self.match(SnowflakeParser.RENAME)
                self.state = 2854
                self.match(SnowflakeParser.TO)
                self.state = 2855
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2857
                self.match(SnowflakeParser.ALTER)
                self.state = 2858
                self.match(SnowflakeParser.DATABASE)
                self.state = 2860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 2859
                    self.if_exists()


                self.state = 2862
                self.id_()
                self.state = 2863
                self.match(SnowflakeParser.SWAP)
                self.state = 2864
                self.match(SnowflakeParser.WITH)
                self.state = 2865
                self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2867
                self.match(SnowflakeParser.ALTER)
                self.state = 2868
                self.match(SnowflakeParser.DATABASE)
                self.state = 2870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 2869
                    self.if_exists()


                self.state = 2872
                self.id_()
                self.state = 2873
                self.match(SnowflakeParser.SET)
                self.state = 2877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 2874
                    self.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS)
                    self.state = 2875
                    self.match(SnowflakeParser.EQ)
                    self.state = 2876
                    self.num()


                self.state = 2882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==413:
                    self.state = 2879
                    self.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS)
                    self.state = 2880
                    self.match(SnowflakeParser.EQ)
                    self.state = 2881
                    self.num()


                self.state = 2885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 2884
                    self.default_ddl_collation()


                self.state = 2888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2887
                    self.comment_clause()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2890
                self.match(SnowflakeParser.ALTER)
                self.state = 2891
                self.match(SnowflakeParser.DATABASE)
                self.state = 2892
                self.id_()
                self.state = 2893
                self.set_tags()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2895
                self.match(SnowflakeParser.ALTER)
                self.state = 2896
                self.match(SnowflakeParser.DATABASE)
                self.state = 2897
                self.id_()
                self.state = 2898
                self.unset_tags()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2900
                self.match(SnowflakeParser.ALTER)
                self.state = 2901
                self.match(SnowflakeParser.DATABASE)
                self.state = 2903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                if la_ == 1:
                    self.state = 2902
                    self.if_exists()


                self.state = 2905
                self.id_()
                self.state = 2906
                self.match(SnowflakeParser.UNSET)
                self.state = 2907
                self.database_property()
                self.state = 2912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 2908
                    self.match(SnowflakeParser.COMMA)
                    self.state = 2909
                    self.database_property()
                    self.state = 2914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2915
                self.match(SnowflakeParser.ALTER)
                self.state = 2916
                self.match(SnowflakeParser.DATABASE)
                self.state = 2917
                self.id_()
                self.state = 2918
                self.match(SnowflakeParser.ENABLE)
                self.state = 2919
                self.match(SnowflakeParser.REPLICATION)
                self.state = 2920
                self.match(SnowflakeParser.TO)
                self.state = 2921
                self.match(SnowflakeParser.ACCOUNTS)
                self.state = 2922
                self.account_id_list()
                self.state = 2926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 2923
                    self.match(SnowflakeParser.IGNORE)
                    self.state = 2924
                    self.match(SnowflakeParser.EDITION)
                    self.state = 2925
                    self.match(SnowflakeParser.CHECK)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2928
                self.match(SnowflakeParser.ALTER)
                self.state = 2929
                self.match(SnowflakeParser.DATABASE)
                self.state = 2930
                self.id_()
                self.state = 2931
                self.match(SnowflakeParser.DISABLE)
                self.state = 2932
                self.match(SnowflakeParser.REPLICATION)
                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==784:
                    self.state = 2933
                    self.match(SnowflakeParser.TO)
                    self.state = 2934
                    self.match(SnowflakeParser.ACCOUNTS)
                    self.state = 2935
                    self.account_id_list()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2938
                self.match(SnowflakeParser.ALTER)
                self.state = 2939
                self.match(SnowflakeParser.DATABASE)
                self.state = 2940
                self.id_()
                self.state = 2941
                self.match(SnowflakeParser.REFRESH)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2943
                self.match(SnowflakeParser.ALTER)
                self.state = 2944
                self.match(SnowflakeParser.DATABASE)
                self.state = 2945
                self.id_()
                self.state = 2946
                self.match(SnowflakeParser.ENABLE)
                self.state = 2947
                self.match(SnowflakeParser.FAILOVER)
                self.state = 2948
                self.match(SnowflakeParser.TO)
                self.state = 2949
                self.match(SnowflakeParser.ACCOUNTS)
                self.state = 2950
                self.account_id_list()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2952
                self.match(SnowflakeParser.ALTER)
                self.state = 2953
                self.match(SnowflakeParser.DATABASE)
                self.state = 2954
                self.id_()
                self.state = 2955
                self.match(SnowflakeParser.DISABLE)
                self.state = 2956
                self.match(SnowflakeParser.FAILOVER)
                self.state = 2960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==784:
                    self.state = 2957
                    self.match(SnowflakeParser.TO)
                    self.state = 2958
                    self.match(SnowflakeParser.ACCOUNTS)
                    self.state = 2959
                    self.account_id_list()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2962
                self.match(SnowflakeParser.ALTER)
                self.state = 2963
                self.match(SnowflakeParser.DATABASE)
                self.state = 2964
                self.id_()
                self.state = 2965
                self.match(SnowflakeParser.PRIMARY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_database_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_property" ):
                listener.enterDatabase_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_property" ):
                listener.exitDatabase_property(self)




    def database_property(self):

        localctx = SnowflakeParser.Database_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_database_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2969
            _la = self._input.LA(1)
            if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 35218731827201) != 0) or _la==413):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Account_id_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def account_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Account_identifierContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Account_identifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_account_id_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccount_id_list" ):
                listener.enterAccount_id_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccount_id_list" ):
                listener.exitAccount_id_list(self)




    def account_id_list(self):

        localctx = SnowflakeParser.Account_id_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_account_id_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2971
            self.account_identifier()
            self.state = 2976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 2972
                self.match(SnowflakeParser.COMMA)
                self.state = 2973
                self.account_identifier()
                self.state = 2978
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_datasetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ds = None # Object_nameContext
            self.v = None # StringContext

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def DATASET(self):
            return self.getToken(SnowflakeParser.DATASET, 0)

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def VERSION(self):
            return self.getToken(SnowflakeParser.VERSION, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def PARTITION(self):
            return self.getToken(SnowflakeParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def id_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_listContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def METADATA(self):
            return self.getToken(SnowflakeParser.METADATA, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_dataset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_dataset" ):
                listener.enterAlter_dataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_dataset" ):
                listener.exitAlter_dataset(self)




    def alter_dataset(self):

        localctx = SnowflakeParser.Alter_datasetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_alter_dataset)
        self._la = 0 # Token type
        try:
            self.state = 3010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2979
                self.match(SnowflakeParser.ALTER)
                self.state = 2980
                self.match(SnowflakeParser.DATASET)
                self.state = 2981
                localctx.ds = self.object_name()
                self.state = 2982
                self.match(SnowflakeParser.ADD)
                self.state = 2983
                self.match(SnowflakeParser.VERSION)
                self.state = 2984
                localctx.v = self.string()
                self.state = 2985
                self.match(SnowflakeParser.FROM)
                self.state = 2986
                self.query_statement()
                self.state = 2990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==518:
                    self.state = 2987
                    self.match(SnowflakeParser.PARTITION)
                    self.state = 2988
                    self.match(SnowflakeParser.BY)
                    self.state = 2989
                    self.id_list()


                self.state = 2993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 2992
                    self.comment_clause()


                self.state = 2998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==419:
                    self.state = 2995
                    self.match(SnowflakeParser.METADATA)
                    self.state = 2996
                    self.match(SnowflakeParser.EQ)
                    self.state = 2997
                    self.string()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3000
                self.match(SnowflakeParser.ALTER)
                self.state = 3001
                self.match(SnowflakeParser.DATASET)
                self.state = 3003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 3002
                    self.if_exists()


                self.state = 3005
                localctx.ds = self.object_name()
                self.state = 3006
                self.match(SnowflakeParser.DROP)
                self.state = 3007
                self.match(SnowflakeParser.VERSION)
                self.state = 3008
                localctx.v = self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_dynamic_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def DYNAMIC(self):
            return self.getToken(SnowflakeParser.DYNAMIC, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def resume_suspend(self):
            return self.getTypedRuleContext(SnowflakeParser.Resume_suspendContext,0)


        def REFRESH(self):
            return self.getToken(SnowflakeParser.REFRESH, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def dynamic_table_settable_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Dynamic_table_settable_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Dynamic_table_settable_paramsContext,i)


        def SWAP(self):
            return self.getToken(SnowflakeParser.SWAP, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def search_optimization_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_optimization_actionContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def dynamic_table_unsettable_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Dynamic_table_unsettable_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Dynamic_table_unsettable_paramsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def rls_operations(self):
            return self.getTypedRuleContext(SnowflakeParser.Rls_operationsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_dynamic_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_dynamic_table" ):
                listener.enterAlter_dynamic_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_dynamic_table" ):
                listener.exitAlter_dynamic_table(self)




    def alter_dynamic_table(self):

        localctx = SnowflakeParser.Alter_dynamic_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_alter_dynamic_table)
        self._la = 0 # Token type
        try:
            self.state = 3089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3012
                self.match(SnowflakeParser.ALTER)
                self.state = 3013
                self.match(SnowflakeParser.DYNAMIC)
                self.state = 3014
                self.match(SnowflakeParser.TABLE)
                self.state = 3016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 3015
                    self.if_exists()


                self.state = 3018
                self.object_name()
                self.state = 3027
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [610, 738]:
                    self.state = 3019
                    self.resume_suspend()
                    pass
                elif token in [581]:
                    self.state = 3020
                    self.match(SnowflakeParser.REFRESH)
                    pass
                elif token in [676]:
                    self.state = 3021
                    self.match(SnowflakeParser.SET)
                    self.state = 3023 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3022
                        self.dynamic_table_settable_params()
                        self.state = 3025 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 35218731827201) != 0) or _la==373 or _la==413 or _la==756 or _la==838):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3029
                self.match(SnowflakeParser.ALTER)
                self.state = 3030
                self.match(SnowflakeParser.DYNAMIC)
                self.state = 3031
                self.match(SnowflakeParser.TABLE)
                self.state = 3033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 3032
                    self.if_exists()


                self.state = 3035
                self.object_name()
                self.state = 3040
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [742]:
                    self.state = 3036
                    self.match(SnowflakeParser.SWAP)
                    self.state = 3037
                    self.match(SnowflakeParser.WITH)
                    pass
                elif token in [589]:
                    self.state = 3038
                    self.match(SnowflakeParser.RENAME)
                    self.state = 3039
                    self.match(SnowflakeParser.TO)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3042
                self.object_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3044
                self.match(SnowflakeParser.ALTER)
                self.state = 3045
                self.match(SnowflakeParser.DYNAMIC)
                self.state = 3046
                self.match(SnowflakeParser.TABLE)
                self.state = 3048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 3047
                    self.if_exists()


                self.state = 3050
                self.object_name()
                self.state = 3053
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [676]:
                    self.state = 3051
                    self.set_tags()
                    pass
                elif token in [809]:
                    self.state = 3052
                    self.unset_tags()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3055
                self.match(SnowflakeParser.ALTER)
                self.state = 3056
                self.match(SnowflakeParser.DYNAMIC)
                self.state = 3057
                self.match(SnowflakeParser.TABLE)
                self.state = 3059
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 3058
                    self.if_exists()


                self.state = 3061
                self.object_name()
                self.state = 3062
                self.search_optimization_action()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3064
                self.match(SnowflakeParser.ALTER)
                self.state = 3065
                self.match(SnowflakeParser.DYNAMIC)
                self.state = 3066
                self.match(SnowflakeParser.TABLE)
                self.state = 3068
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 3067
                    self.if_exists()


                self.state = 3070
                self.object_name()
                self.state = 3071
                self.match(SnowflakeParser.UNSET)
                self.state = 3072
                self.dynamic_table_unsettable_params()
                self.state = 3077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 3073
                    self.match(SnowflakeParser.COMMA)
                    self.state = 3074
                    self.dynamic_table_unsettable_params()
                    self.state = 3079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3080
                self.match(SnowflakeParser.ALTER)
                self.state = 3081
                self.match(SnowflakeParser.DYNAMIC)
                self.state = 3082
                self.match(SnowflakeParser.TABLE)
                self.state = 3084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 3083
                    self.if_exists()


                self.state = 3086
                self.object_name()
                self.state = 3087
                self.rls_operations()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_id_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_list" ):
                listener.enterId_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_list" ):
                listener.exitId_list(self)




    def id_list(self):

        localctx = SnowflakeParser.Id_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_id_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3091
            self.id_()
            self.state = 3096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 3092
                self.match(SnowflakeParser.COMMA)
                self.state = 3093
                self.id_()
                self.state = 3098
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_external_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def REFRESH(self):
            return self.getToken(SnowflakeParser.REFRESH, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def FILES(self):
            return self.getToken(SnowflakeParser.FILES, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def string_list(self):
            return self.getTypedRuleContext(SnowflakeParser.String_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def REMOVE(self):
            return self.getToken(SnowflakeParser.REMOVE, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def AUTO_REFRESH(self):
            return self.getToken(SnowflakeParser.AUTO_REFRESH, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def tag_decl_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_decl_listContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def PARTITION(self):
            return self.getToken(SnowflakeParser.PARTITION, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def LOCATION(self):
            return self.getToken(SnowflakeParser.LOCATION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_external_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_external_table" ):
                listener.enterAlter_external_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_external_table" ):
                listener.exitAlter_external_table(self)




    def alter_external_table(self):

        localctx = SnowflakeParser.Alter_external_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_alter_external_table)
        self._la = 0 # Token type
        try:
            self.state = 3200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3099
                self.match(SnowflakeParser.ALTER)
                self.state = 3100
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 3101
                self.match(SnowflakeParser.TABLE)
                self.state = 3103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 3102
                    self.if_exists()


                self.state = 3105
                self.object_name()
                self.state = 3106
                self.match(SnowflakeParser.REFRESH)
                self.state = 3108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==912:
                    self.state = 3107
                    self.string()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3110
                self.match(SnowflakeParser.ALTER)
                self.state = 3111
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 3112
                self.match(SnowflakeParser.TABLE)
                self.state = 3114
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 3113
                    self.if_exists()


                self.state = 3116
                self.object_name()
                self.state = 3117
                self.match(SnowflakeParser.ADD)
                self.state = 3118
                self.match(SnowflakeParser.FILES)
                self.state = 3119
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3120
                self.string_list()
                self.state = 3121
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3123
                self.match(SnowflakeParser.ALTER)
                self.state = 3124
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 3125
                self.match(SnowflakeParser.TABLE)
                self.state = 3127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 3126
                    self.if_exists()


                self.state = 3129
                self.object_name()
                self.state = 3130
                self.match(SnowflakeParser.REMOVE)
                self.state = 3131
                self.match(SnowflakeParser.FILES)
                self.state = 3132
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3133
                self.string_list()
                self.state = 3134
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3136
                self.match(SnowflakeParser.ALTER)
                self.state = 3137
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 3138
                self.match(SnowflakeParser.TABLE)
                self.state = 3140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 3139
                    self.if_exists()


                self.state = 3142
                self.object_name()
                self.state = 3143
                self.match(SnowflakeParser.SET)
                self.state = 3147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 3144
                    self.match(SnowflakeParser.AUTO_REFRESH)
                    self.state = 3145
                    self.match(SnowflakeParser.EQ)
                    self.state = 3146
                    self.true_false()


                self.state = 3150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754:
                    self.state = 3149
                    self.tag_decl_list()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3152
                self.match(SnowflakeParser.ALTER)
                self.state = 3153
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 3154
                self.match(SnowflakeParser.TABLE)
                self.state = 3156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 3155
                    self.if_exists()


                self.state = 3158
                self.object_name()
                self.state = 3159
                self.unset_tags()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3161
                self.match(SnowflakeParser.ALTER)
                self.state = 3162
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 3163
                self.match(SnowflakeParser.TABLE)
                self.state = 3164
                self.object_name()
                self.state = 3166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 3165
                    self.if_exists()


                self.state = 3168
                self.match(SnowflakeParser.ADD)
                self.state = 3169
                self.match(SnowflakeParser.PARTITION)
                self.state = 3170
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3171
                self.column_name()
                self.state = 3172
                self.match(SnowflakeParser.EQ)
                self.state = 3173
                self.string()
                self.state = 3181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 3174
                    self.match(SnowflakeParser.COMMA)
                    self.state = 3175
                    self.column_name()
                    self.state = 3176
                    self.match(SnowflakeParser.EQ)
                    self.state = 3177
                    self.string()
                    self.state = 3183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3184
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 3185
                self.match(SnowflakeParser.LOCATION)
                self.state = 3186
                self.string()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3188
                self.match(SnowflakeParser.ALTER)
                self.state = 3189
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 3190
                self.match(SnowflakeParser.TABLE)
                self.state = 3191
                self.object_name()
                self.state = 3193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 3192
                    self.if_exists()


                self.state = 3195
                self.match(SnowflakeParser.DROP)
                self.state = 3196
                self.match(SnowflakeParser.PARTITION)
                self.state = 3197
                self.match(SnowflakeParser.LOCATION)
                self.state = 3198
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_edition_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(SnowflakeParser.IGNORE, 0)

        def EDITION(self):
            return self.getToken(SnowflakeParser.EDITION, 0)

        def CHECK(self):
            return self.getToken(SnowflakeParser.CHECK, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_ignore_edition_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_edition_check" ):
                listener.enterIgnore_edition_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_edition_check" ):
                listener.exitIgnore_edition_check(self)




    def ignore_edition_check(self):

        localctx = SnowflakeParser.Ignore_edition_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_ignore_edition_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3202
            self.match(SnowflakeParser.IGNORE)
            self.state = 3203
            self.match(SnowflakeParser.EDITION)
            self.state = 3204
            self.match(SnowflakeParser.CHECK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replication_scheduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLICATION_SCHEDULE(self):
            return self.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_replication_schedule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplication_schedule" ):
                listener.enterReplication_schedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplication_schedule" ):
                listener.exitReplication_schedule(self)




    def replication_schedule(self):

        localctx = SnowflakeParser.Replication_scheduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_replication_schedule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3206
            self.match(SnowflakeParser.REPLICATION_SCHEDULE)
            self.state = 3207
            self.match(SnowflakeParser.EQ)
            self.state = 3208
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Db_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_db_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_name_list" ):
                listener.enterDb_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_name_list" ):
                listener.exitDb_name_list(self)




    def db_name_list(self):

        localctx = SnowflakeParser.Db_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_db_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3210
            self.id_()
            self.state = 3215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 3211
                self.match(SnowflakeParser.COMMA)
                self.state = 3212
                self.id_()
                self.state = 3217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Share_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_share_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShare_name_list" ):
                listener.enterShare_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShare_name_list" ):
                listener.exitShare_name_list(self)




    def share_name_list(self):

        localctx = SnowflakeParser.Share_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_share_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3218
            self.id_()
            self.state = 3223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 3219
                self.match(SnowflakeParser.COMMA)
                self.state = 3220
                self.id_()
                self.state = 3225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_acct_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_acct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Full_acctContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Full_acctContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_full_acct_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_acct_list" ):
                listener.enterFull_acct_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_acct_list" ):
                listener.exitFull_acct_list(self)




    def full_acct_list(self):

        localctx = SnowflakeParser.Full_acct_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_full_acct_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3226
            self.full_acct()
            self.state = 3231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 3227
                self.match(SnowflakeParser.COMMA)
                self.state = 3228
                self.full_acct()
                self.state = 3233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_failover_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def FAILOVER(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.FAILOVER)
            else:
                return self.getToken(SnowflakeParser.FAILOVER, i)

        def GROUP(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.GROUP)
            else:
                return self.getToken(SnowflakeParser.GROUP, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def OBJECT_TYPES(self):
            return self.getToken(SnowflakeParser.OBJECT_TYPES, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def object_type_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_listContext,0)


        def replication_schedule(self):
            return self.getTypedRuleContext(SnowflakeParser.Replication_scheduleContext,0)


        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def db_name_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Db_name_listContext,0)


        def ALLOWED_DATABASES(self):
            return self.getToken(SnowflakeParser.ALLOWED_DATABASES, 0)

        def MOVE(self):
            return self.getToken(SnowflakeParser.MOVE, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def REMOVE(self):
            return self.getToken(SnowflakeParser.REMOVE, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def share_name_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Share_name_listContext,0)


        def ALLOWED_SHARES(self):
            return self.getToken(SnowflakeParser.ALLOWED_SHARES, 0)

        def SHARES(self):
            return self.getToken(SnowflakeParser.SHARES, 0)

        def full_acct_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Full_acct_listContext,0)


        def ALLOWED_ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0)

        def ignore_edition_check(self):
            return self.getTypedRuleContext(SnowflakeParser.Ignore_edition_checkContext,0)


        def REFRESH(self):
            return self.getToken(SnowflakeParser.REFRESH, 0)

        def PRIMARY(self):
            return self.getToken(SnowflakeParser.PRIMARY, 0)

        def SUSPEND(self):
            return self.getToken(SnowflakeParser.SUSPEND, 0)

        def RESUME(self):
            return self.getToken(SnowflakeParser.RESUME, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_failover_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_failover_group" ):
                listener.enterAlter_failover_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_failover_group" ):
                listener.exitAlter_failover_group(self)




    def alter_failover_group(self):

        localctx = SnowflakeParser.Alter_failover_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_alter_failover_group)
        self._la = 0 # Token type
        try:
            self.state = 3388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3234
                self.match(SnowflakeParser.ALTER)
                self.state = 3235
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3236
                self.match(SnowflakeParser.GROUP)
                self.state = 3238
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 3237
                    self.if_exists()


                self.state = 3240
                self.id_()
                self.state = 3241
                self.match(SnowflakeParser.RENAME)
                self.state = 3242
                self.match(SnowflakeParser.TO)
                self.state = 3243
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3245
                self.match(SnowflakeParser.ALTER)
                self.state = 3246
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3247
                self.match(SnowflakeParser.GROUP)
                self.state = 3249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 3248
                    self.if_exists()


                self.state = 3251
                self.id_()
                self.state = 3252
                self.match(SnowflakeParser.SET)
                self.state = 3256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==480:
                    self.state = 3253
                    self.match(SnowflakeParser.OBJECT_TYPES)
                    self.state = 3254
                    self.match(SnowflakeParser.EQ)
                    self.state = 3255
                    self.object_type_list()


                self.state = 3259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==595:
                    self.state = 3258
                    self.replication_schedule()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3261
                self.match(SnowflakeParser.ALTER)
                self.state = 3262
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3263
                self.match(SnowflakeParser.GROUP)
                self.state = 3265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 3264
                    self.if_exists()


                self.state = 3267
                self.id_()
                self.state = 3268
                self.match(SnowflakeParser.SET)
                self.state = 3269
                self.match(SnowflakeParser.OBJECT_TYPES)
                self.state = 3270
                self.match(SnowflakeParser.EQ)
                self.state = 3271
                self.object_type_list()
                self.state = 3273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==595:
                    self.state = 3272
                    self.replication_schedule()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3275
                self.match(SnowflakeParser.ALTER)
                self.state = 3276
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3277
                self.match(SnowflakeParser.GROUP)
                self.state = 3279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 3278
                    self.if_exists()


                self.state = 3281
                self.id_()
                self.state = 3282
                self.match(SnowflakeParser.ADD)
                self.state = 3283
                self.db_name_list()
                self.state = 3284
                self.match(SnowflakeParser.TO)
                self.state = 3285
                self.match(SnowflakeParser.ALLOWED_DATABASES)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3287
                self.match(SnowflakeParser.ALTER)
                self.state = 3288
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3289
                self.match(SnowflakeParser.GROUP)
                self.state = 3291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 3290
                    self.if_exists()


                self.state = 3293
                self.id_()
                self.state = 3294
                self.match(SnowflakeParser.MOVE)
                self.state = 3295
                self.match(SnowflakeParser.DATABASES)
                self.state = 3296
                self.db_name_list()
                self.state = 3297
                self.match(SnowflakeParser.TO)
                self.state = 3298
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3299
                self.match(SnowflakeParser.GROUP)
                self.state = 3300
                self.id_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3302
                self.match(SnowflakeParser.ALTER)
                self.state = 3303
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3304
                self.match(SnowflakeParser.GROUP)
                self.state = 3306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 3305
                    self.if_exists()


                self.state = 3308
                self.id_()
                self.state = 3309
                self.match(SnowflakeParser.REMOVE)
                self.state = 3310
                self.db_name_list()
                self.state = 3311
                self.match(SnowflakeParser.FROM)
                self.state = 3312
                self.match(SnowflakeParser.ALLOWED_DATABASES)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3314
                self.match(SnowflakeParser.ALTER)
                self.state = 3315
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3316
                self.match(SnowflakeParser.GROUP)
                self.state = 3318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 3317
                    self.if_exists()


                self.state = 3320
                self.id_()
                self.state = 3321
                self.match(SnowflakeParser.ADD)
                self.state = 3322
                self.share_name_list()
                self.state = 3323
                self.match(SnowflakeParser.TO)
                self.state = 3324
                self.match(SnowflakeParser.ALLOWED_SHARES)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3326
                self.match(SnowflakeParser.ALTER)
                self.state = 3327
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3328
                self.match(SnowflakeParser.GROUP)
                self.state = 3330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 3329
                    self.if_exists()


                self.state = 3332
                self.id_()
                self.state = 3333
                self.match(SnowflakeParser.MOVE)
                self.state = 3334
                self.match(SnowflakeParser.SHARES)
                self.state = 3335
                self.share_name_list()
                self.state = 3336
                self.match(SnowflakeParser.TO)
                self.state = 3337
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3338
                self.match(SnowflakeParser.GROUP)
                self.state = 3339
                self.id_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3341
                self.match(SnowflakeParser.ALTER)
                self.state = 3342
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3343
                self.match(SnowflakeParser.GROUP)
                self.state = 3345
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                if la_ == 1:
                    self.state = 3344
                    self.if_exists()


                self.state = 3347
                self.id_()
                self.state = 3348
                self.match(SnowflakeParser.REMOVE)
                self.state = 3349
                self.share_name_list()
                self.state = 3350
                self.match(SnowflakeParser.FROM)
                self.state = 3351
                self.match(SnowflakeParser.ALLOWED_SHARES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3353
                self.match(SnowflakeParser.ALTER)
                self.state = 3354
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3355
                self.match(SnowflakeParser.GROUP)
                self.state = 3357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                if la_ == 1:
                    self.state = 3356
                    self.if_exists()


                self.state = 3359
                self.id_()
                self.state = 3360
                self.match(SnowflakeParser.ADD)
                self.state = 3361
                self.full_acct_list()
                self.state = 3362
                self.match(SnowflakeParser.TO)
                self.state = 3363
                self.match(SnowflakeParser.ALLOWED_ACCOUNTS)
                self.state = 3365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 3364
                    self.ignore_edition_check()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3367
                self.match(SnowflakeParser.ALTER)
                self.state = 3368
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3369
                self.match(SnowflakeParser.GROUP)
                self.state = 3371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 3370
                    self.if_exists()


                self.state = 3373
                self.id_()
                self.state = 3374
                self.match(SnowflakeParser.REMOVE)
                self.state = 3375
                self.full_acct_list()
                self.state = 3376
                self.match(SnowflakeParser.FROM)
                self.state = 3377
                self.match(SnowflakeParser.ALLOWED_ACCOUNTS)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3379
                self.match(SnowflakeParser.ALTER)
                self.state = 3380
                self.match(SnowflakeParser.FAILOVER)
                self.state = 3381
                self.match(SnowflakeParser.GROUP)
                self.state = 3383
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 3382
                    self.if_exists()


                self.state = 3385
                self.id_()
                self.state = 3386
                _la = self._input.LA(1)
                if not(((((_la - 551)) & ~0x3f) == 0 and ((1 << (_la - 551)) & 576460753377165313) != 0) or _la==738):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_file_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(SnowflakeParser.FORMAT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def format_type_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Format_type_optionsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Format_type_optionsContext,i)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_file_format" ):
                listener.enterAlter_file_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_file_format" ):
                listener.exitAlter_file_format(self)




    def alter_file_format(self):

        localctx = SnowflakeParser.Alter_file_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_alter_file_format)
        self._la = 0 # Token type
        try:
            self.state = 3418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3390
                self.match(SnowflakeParser.ALTER)
                self.state = 3391
                self.match(SnowflakeParser.FILE)
                self.state = 3392
                self.match(SnowflakeParser.FORMAT)
                self.state = 3394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 3393
                    self.if_exists()


                self.state = 3396
                self.id_()
                self.state = 3397
                self.match(SnowflakeParser.RENAME)
                self.state = 3398
                self.match(SnowflakeParser.TO)
                self.state = 3399
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3401
                self.match(SnowflakeParser.ALTER)
                self.state = 3402
                self.match(SnowflakeParser.FILE)
                self.state = 3403
                self.match(SnowflakeParser.FORMAT)
                self.state = 3405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                if la_ == 1:
                    self.state = 3404
                    self.if_exists()


                self.state = 3407
                self.id_()
                self.state = 3408
                self.match(SnowflakeParser.SET)

                self.state = 3412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==25 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 9007199254750211) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 7205918283424366593) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & -9223336852482686957) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 1152956688978935809) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 35185512939521) != 0) or ((((_la - 687)) & ~0x3f) == 0 and ((1 << (_la - 687)) & 246290604622035) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & 268443649) != 0) or _la==862:
                    self.state = 3409
                    self.format_type_options()
                    self.state = 3414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3415
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_function_signature(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_function_signatureContext,0)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def API_INTEGRATION(self):
            return self.getToken(SnowflakeParser.API_INTEGRATION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def HEADERS(self):
            return self.getToken(SnowflakeParser.HEADERS, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def header_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Header_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Header_declContext,i)


        def CONTEXT_HEADERS(self):
            return self.getToken(SnowflakeParser.CONTEXT_HEADERS, 0)

        def MAX_BATCH_ROWS(self):
            return self.getToken(SnowflakeParser.MAX_BATCH_ROWS, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def COMPRESSION(self):
            return self.getToken(SnowflakeParser.COMPRESSION, 0)

        def compression_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Compression_typeContext,0)


        def REQUEST_TRANSLATOR(self):
            return self.getToken(SnowflakeParser.REQUEST_TRANSLATOR, 0)

        def RESPONSE_TRANSLATOR(self):
            return self.getToken(SnowflakeParser.RESPONSE_TRANSLATOR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function" ):
                listener.enterAlter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function" ):
                listener.exitAlter_function(self)




    def alter_function(self):

        localctx = SnowflakeParser.Alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_alter_function)
        self._la = 0 # Token type
        try:
            self.state = 3491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3420
                self.alter_function_signature()
                self.state = 3421
                self.match(SnowflakeParser.RENAME)
                self.state = 3422
                self.match(SnowflakeParser.TO)
                self.state = 3423
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3425
                self.alter_function_signature()
                self.state = 3426
                self.match(SnowflakeParser.SET)
                self.state = 3427
                self.comment_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3429
                self.alter_function_signature()
                self.state = 3430
                self.match(SnowflakeParser.SET)
                self.state = 3431
                self.match(SnowflakeParser.SECURE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3433
                self.alter_function_signature()
                self.state = 3434
                self.match(SnowflakeParser.UNSET)
                self.state = 3435
                _la = self._input.LA(1)
                if not(_la==138 or _la==665):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3437
                self.alter_function_signature()
                self.state = 3438
                self.match(SnowflakeParser.SET)
                self.state = 3439
                self.match(SnowflakeParser.API_INTEGRATION)
                self.state = 3440
                self.match(SnowflakeParser.EQ)
                self.state = 3441
                self.id_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3443
                self.alter_function_signature()
                self.state = 3444
                self.match(SnowflakeParser.SET)
                self.state = 3445
                self.match(SnowflakeParser.HEADERS)
                self.state = 3446
                self.match(SnowflakeParser.EQ)
                self.state = 3447
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==912:
                    self.state = 3448
                    self.header_decl()
                    self.state = 3453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3454
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3456
                self.alter_function_signature()
                self.state = 3457
                self.match(SnowflakeParser.SET)
                self.state = 3458
                self.match(SnowflakeParser.CONTEXT_HEADERS)
                self.state = 3459
                self.match(SnowflakeParser.EQ)
                self.state = 3460
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 3461
                    self.id_()
                    self.state = 3466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3467
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3469
                self.alter_function_signature()
                self.state = 3470
                self.match(SnowflakeParser.SET)
                self.state = 3471
                self.match(SnowflakeParser.MAX_BATCH_ROWS)
                self.state = 3472
                self.match(SnowflakeParser.EQ)
                self.state = 3473
                self.num()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3475
                self.alter_function_signature()
                self.state = 3476
                self.match(SnowflakeParser.SET)
                self.state = 3477
                self.match(SnowflakeParser.COMPRESSION)
                self.state = 3478
                self.match(SnowflakeParser.EQ)
                self.state = 3479
                self.compression_type()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3481
                self.alter_function_signature()
                self.state = 3482
                self.match(SnowflakeParser.SET)
                self.state = 3483
                _la = self._input.LA(1)
                if not(_la==598 or _la==606):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3484
                self.match(SnowflakeParser.EQ)
                self.state = 3485
                self.id_()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3487
                self.alter_function_signature()
                self.state = 3488
                self.match(SnowflakeParser.UNSET)
                self.state = 3489
                _la = self._input.LA(1)
                if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 4101) != 0) or _la==320 or _la==410 or _la==598 or _la==606 or _la==665):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_function_signatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def data_type_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_type_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_function_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function_signature" ):
                listener.enterAlter_function_signature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function_signature" ):
                listener.exitAlter_function_signature(self)




    def alter_function_signature(self):

        localctx = SnowflakeParser.Alter_function_signatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_alter_function_signature)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3493
            self.match(SnowflakeParser.ALTER)
            self.state = 3494
            self.match(SnowflakeParser.FUNCTION)
            self.state = 3496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 3495
                self.if_exists()


            self.state = 3498
            self.id_()
            self.state = 3499
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 3501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                self.state = 3500
                self.data_type_list()


            self.state = 3503
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_data_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_list" ):
                listener.enterData_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_list" ):
                listener.exitData_type_list(self)




    def data_type_list(self):

        localctx = SnowflakeParser.Data_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_data_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3505
            self.data_type()
            self.state = 3510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 3506
                self.match(SnowflakeParser.COMMA)
                self.state = 3507
                self.data_type()
                self.state = 3512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_git_repositoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None # Object_nameContext

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def GIT(self):
            return self.getToken(SnowflakeParser.GIT, 0)

        def REPOSITORY(self):
            return self.getToken(SnowflakeParser.REPOSITORY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def alter_git_set_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Alter_git_set_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Alter_git_set_optsContext,i)


        def alter_git_unset_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Alter_git_unset_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Alter_git_unset_optsContext,i)


        def FETCH(self):
            return self.getToken(SnowflakeParser.FETCH, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_git_repository

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_git_repository" ):
                listener.enterAlter_git_repository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_git_repository" ):
                listener.exitAlter_git_repository(self)




    def alter_git_repository(self):

        localctx = SnowflakeParser.Alter_git_repositoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_alter_git_repository)
        self._la = 0 # Token type
        try:
            self.state = 3537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3513
                self.match(SnowflakeParser.ALTER)
                self.state = 3514
                self.match(SnowflakeParser.GIT)
                self.state = 3515
                self.match(SnowflakeParser.REPOSITORY)
                self.state = 3516
                localctx.r = self.object_name()
                self.state = 3529
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [676]:
                    self.state = 3517
                    self.match(SnowflakeParser.SET)
                    self.state = 3519 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3518
                        self.alter_git_set_opts()
                        self.state = 3521 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==37 or _la==138 or _la==305 or _la==754):
                            break

                    pass
                elif token in [809]:
                    self.state = 3523
                    self.match(SnowflakeParser.UNSET)
                    self.state = 3525 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3524
                        self.alter_git_unset_opts()
                        self.state = 3527 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==138 or _la==305 or _la==754):
                            break

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3531
                self.match(SnowflakeParser.ALTER)
                self.state = 3532
                self.match(SnowflakeParser.GIT)
                self.state = 3533
                self.match(SnowflakeParser.REPOSITORY)
                self.state = 3534
                localctx.r = self.object_name()
                self.state = 3535
                self.match(SnowflakeParser.FETCH)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_git_set_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sn = None # Object_nameContext
            self.ai = None # Id_Context

        def GIT_CREDENTIALS(self):
            return self.getToken(SnowflakeParser.GIT_CREDENTIALS, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def API_INTEGRATION(self):
            return self.getToken(SnowflakeParser.API_INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def tag_decl_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_decl_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_git_set_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_git_set_opts" ):
                listener.enterAlter_git_set_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_git_set_opts" ):
                listener.exitAlter_git_set_opts(self)




    def alter_git_set_opts(self):

        localctx = SnowflakeParser.Alter_git_set_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_alter_git_set_opts)
        try:
            self.state = 3547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [305]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3539
                self.match(SnowflakeParser.GIT_CREDENTIALS)
                self.state = 3540
                self.match(SnowflakeParser.EQ)
                self.state = 3541
                localctx.sn = self.object_name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3542
                self.match(SnowflakeParser.API_INTEGRATION)
                self.state = 3543
                self.match(SnowflakeParser.EQ)
                self.state = 3544
                localctx.ai = self.id_()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3545
                self.comment_clause()
                pass
            elif token in [754]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3546
                self.tag_decl_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_git_unset_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GIT_CREDENTIALS(self):
            return self.getToken(SnowflakeParser.GIT_CREDENTIALS, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def tag_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_git_unset_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_git_unset_opts" ):
                listener.enterAlter_git_unset_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_git_unset_opts" ):
                listener.exitAlter_git_unset_opts(self)




    def alter_git_unset_opts(self):

        localctx = SnowflakeParser.Alter_git_unset_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_alter_git_unset_opts)
        try:
            self.state = 3552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [305]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3549
                self.match(SnowflakeParser.GIT_CREDENTIALS)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3550
                self.match(SnowflakeParser.COMMENT)
                pass
            elif token in [754]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3551
                self.tag_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_masking_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def BODY(self):
            return self.getToken(SnowflakeParser.BODY, 0)

        def ARROW(self):
            return self.getToken(SnowflakeParser.ARROW, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_masking_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_masking_policy" ):
                listener.enterAlter_masking_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_masking_policy" ):
                listener.exitAlter_masking_policy(self)




    def alter_masking_policy(self):

        localctx = SnowflakeParser.Alter_masking_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_alter_masking_policy)
        try:
            self.state = 3587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3554
                self.match(SnowflakeParser.ALTER)
                self.state = 3555
                self.match(SnowflakeParser.MASKING)
                self.state = 3556
                self.match(SnowflakeParser.POLICY)
                self.state = 3558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 3557
                    self.if_exists()


                self.state = 3560
                self.id_()
                self.state = 3561
                self.match(SnowflakeParser.SET)
                self.state = 3562
                self.match(SnowflakeParser.BODY)
                self.state = 3563
                self.match(SnowflakeParser.ARROW)
                self.state = 3564
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3566
                self.match(SnowflakeParser.ALTER)
                self.state = 3567
                self.match(SnowflakeParser.MASKING)
                self.state = 3568
                self.match(SnowflakeParser.POLICY)
                self.state = 3570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 3569
                    self.if_exists()


                self.state = 3572
                self.id_()
                self.state = 3573
                self.match(SnowflakeParser.RENAME)
                self.state = 3574
                self.match(SnowflakeParser.TO)
                self.state = 3575
                self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3577
                self.match(SnowflakeParser.ALTER)
                self.state = 3578
                self.match(SnowflakeParser.MASKING)
                self.state = 3579
                self.match(SnowflakeParser.POLICY)
                self.state = 3581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 3580
                    self.if_exists()


                self.state = 3583
                self.id_()
                self.state = 3584
                self.match(SnowflakeParser.SET)
                self.state = 3585
                self.comment_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_materialized_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def MATERIALIZED(self):
            return self.getToken(SnowflakeParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def CLUSTER(self):
            return self.getToken(SnowflakeParser.CLUSTER, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def CLUSTERING(self):
            return self.getToken(SnowflakeParser.CLUSTERING, 0)

        def KEY(self):
            return self.getToken(SnowflakeParser.KEY, 0)

        def resume_suspend(self):
            return self.getTypedRuleContext(SnowflakeParser.Resume_suspendContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def RECLUSTER(self):
            return self.getToken(SnowflakeParser.RECLUSTER, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_materialized_view" ):
                listener.enterAlter_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_materialized_view" ):
                listener.exitAlter_materialized_view(self)




    def alter_materialized_view(self):

        localctx = SnowflakeParser.Alter_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_alter_materialized_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3589
            self.match(SnowflakeParser.ALTER)
            self.state = 3590
            self.match(SnowflakeParser.MATERIALIZED)
            self.state = 3591
            self.match(SnowflakeParser.VIEW)
            self.state = 3592
            self.id_()
            self.state = 3618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [589]:
                self.state = 3593
                self.match(SnowflakeParser.RENAME)
                self.state = 3594
                self.match(SnowflakeParser.TO)
                self.state = 3595
                self.id_()
                pass
            elif token in [131]:
                self.state = 3596
                self.match(SnowflakeParser.CLUSTER)
                self.state = 3597
                self.match(SnowflakeParser.BY)
                self.state = 3598
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3599
                self.expr_list()
                self.state = 3600
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            elif token in [208]:
                self.state = 3602
                self.match(SnowflakeParser.DROP)
                self.state = 3603
                self.match(SnowflakeParser.CLUSTERING)
                self.state = 3604
                self.match(SnowflakeParser.KEY)
                pass
            elif token in [610, 738]:
                self.state = 3605
                self.resume_suspend()
                self.state = 3607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==576:
                    self.state = 3606
                    self.match(SnowflakeParser.RECLUSTER)


                pass
            elif token in [676]:
                self.state = 3609
                self.match(SnowflakeParser.SET)

                self.state = 3611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 3610
                    self.match(SnowflakeParser.SECURE)


                self.state = 3614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3613
                    self.comment_clause()


                pass
            elif token in [809]:
                self.state = 3616
                self.match(SnowflakeParser.UNSET)
                self.state = 3617
                _la = self._input.LA(1)
                if not(_la==138 or _la==665):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_network_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def alter_network_policy_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_network_policy_optsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_network_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_network_policy" ):
                listener.enterAlter_network_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_network_policy" ):
                listener.exitAlter_network_policy(self)




    def alter_network_policy(self):

        localctx = SnowflakeParser.Alter_network_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_alter_network_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3620
            self.match(SnowflakeParser.ALTER)
            self.state = 3621
            self.match(SnowflakeParser.NETWORK)
            self.state = 3622
            self.match(SnowflakeParser.POLICY)
            self.state = 3623
            self.alter_network_policy_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_notification_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def cloud_provider_params_auto(self):
            return self.getTypedRuleContext(SnowflakeParser.Cloud_provider_params_autoContext,0)


        def NOTIFICATION(self):
            return self.getToken(SnowflakeParser.NOTIFICATION, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def enabled_true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.Enabled_true_falseContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def cloud_provider_params_push(self):
            return self.getTypedRuleContext(SnowflakeParser.Cloud_provider_params_pushContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_notification_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_notification_integration" ):
                listener.enterAlter_notification_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_notification_integration" ):
                listener.exitAlter_notification_integration(self)




    def alter_notification_integration(self):

        localctx = SnowflakeParser.Alter_notification_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_alter_notification_integration)
        self._la = 0 # Token type
        try:
            self.state = 3685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3625
                self.match(SnowflakeParser.ALTER)
                self.state = 3627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==449:
                    self.state = 3626
                    self.match(SnowflakeParser.NOTIFICATION)


                self.state = 3629
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 3631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 3630
                    self.if_exists()


                self.state = 3633
                self.id_()
                self.state = 3634
                self.match(SnowflakeParser.SET)
                self.state = 3636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 3635
                    self.enabled_true_false()


                self.state = 3638
                self.cloud_provider_params_auto()
                self.state = 3640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3639
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3642
                self.match(SnowflakeParser.ALTER)
                self.state = 3644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==449:
                    self.state = 3643
                    self.match(SnowflakeParser.NOTIFICATION)


                self.state = 3646
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 3648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
                if la_ == 1:
                    self.state = 3647
                    self.if_exists()


                self.state = 3650
                self.id_()
                self.state = 3651
                self.match(SnowflakeParser.SET)
                self.state = 3653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 3652
                    self.enabled_true_false()


                self.state = 3655
                self.cloud_provider_params_push()
                self.state = 3657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3656
                    self.comment_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3659
                self.match(SnowflakeParser.ALTER)
                self.state = 3661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==449:
                    self.state = 3660
                    self.match(SnowflakeParser.NOTIFICATION)


                self.state = 3663
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 3664
                self.id_()
                self.state = 3665
                self.set_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3667
                self.match(SnowflakeParser.ALTER)
                self.state = 3669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==449:
                    self.state = 3668
                    self.match(SnowflakeParser.NOTIFICATION)


                self.state = 3671
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 3672
                self.id_()
                self.state = 3673
                self.unset_tags()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3675
                self.match(SnowflakeParser.ALTER)
                self.state = 3677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==449:
                    self.state = 3676
                    self.match(SnowflakeParser.NOTIFICATION)


                self.state = 3679
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 3680
                self.if_exists()
                self.state = 3681
                self.id_()
                self.state = 3682
                self.match(SnowflakeParser.UNSET)
                self.state = 3683
                _la = self._input.LA(1)
                if not(_la==138 or _la==217):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_pipeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def PIPE(self):
            return self.getToken(SnowflakeParser.PIPE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def object_properties(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_propertiesContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def PIPE_EXECUTION_PAUSED(self):
            return self.getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def REFRESH(self):
            return self.getToken(SnowflakeParser.REFRESH, 0)

        def PREFIX(self):
            return self.getToken(SnowflakeParser.PREFIX, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def MODIFIED_AFTER(self):
            return self.getToken(SnowflakeParser.MODIFIED_AFTER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_pipe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_pipe" ):
                listener.enterAlter_pipe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_pipe" ):
                listener.exitAlter_pipe(self)




    def alter_pipe(self):

        localctx = SnowflakeParser.Alter_pipeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_alter_pipe)
        self._la = 0 # Token type
        try:
            self.state = 3747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3687
                self.match(SnowflakeParser.ALTER)
                self.state = 3688
                self.match(SnowflakeParser.PIPE)
                self.state = 3690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 3689
                    self.if_exists()


                self.state = 3692
                self.id_()
                self.state = 3693
                self.match(SnowflakeParser.SET)

                self.state = 3695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 3694
                    self.object_properties()


                self.state = 3698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3697
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3700
                self.match(SnowflakeParser.ALTER)
                self.state = 3701
                self.match(SnowflakeParser.PIPE)
                self.state = 3702
                self.id_()
                self.state = 3703
                self.set_tags()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3705
                self.match(SnowflakeParser.ALTER)
                self.state = 3706
                self.match(SnowflakeParser.PIPE)
                self.state = 3707
                self.id_()
                self.state = 3708
                self.unset_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3710
                self.match(SnowflakeParser.ALTER)
                self.state = 3711
                self.match(SnowflakeParser.PIPE)
                self.state = 3713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 3712
                    self.if_exists()


                self.state = 3715
                self.id_()
                self.state = 3716
                self.match(SnowflakeParser.UNSET)
                self.state = 3717
                self.match(SnowflakeParser.PIPE_EXECUTION_PAUSED)
                self.state = 3718
                self.match(SnowflakeParser.EQ)
                self.state = 3719
                self.true_false()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3721
                self.match(SnowflakeParser.ALTER)
                self.state = 3722
                self.match(SnowflakeParser.PIPE)
                self.state = 3724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 3723
                    self.if_exists()


                self.state = 3726
                self.id_()
                self.state = 3727
                self.match(SnowflakeParser.UNSET)
                self.state = 3728
                self.match(SnowflakeParser.COMMENT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3730
                self.match(SnowflakeParser.ALTER)
                self.state = 3731
                self.match(SnowflakeParser.PIPE)
                self.state = 3733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
                if la_ == 1:
                    self.state = 3732
                    self.if_exists()


                self.state = 3735
                self.id_()
                self.state = 3736
                self.match(SnowflakeParser.REFRESH)
                self.state = 3740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==546:
                    self.state = 3737
                    self.match(SnowflakeParser.PREFIX)
                    self.state = 3738
                    self.match(SnowflakeParser.EQ)
                    self.state = 3739
                    self.string()


                self.state = 3745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==428:
                    self.state = 3742
                    self.match(SnowflakeParser.MODIFIED_AFTER)
                    self.state = 3743
                    self.match(SnowflakeParser.EQ)
                    self.state = 3744
                    self.string()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(SnowflakeParser.PROCEDURE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def data_type_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_type_listContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def EXECUTE(self):
            return self.getToken(SnowflakeParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def caller_owner(self):
            return self.getTypedRuleContext(SnowflakeParser.Caller_ownerContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_procedure" ):
                listener.enterAlter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_procedure" ):
                listener.exitAlter_procedure(self)




    def alter_procedure(self):

        localctx = SnowflakeParser.Alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_alter_procedure)
        self._la = 0 # Token type
        try:
            self.state = 3807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3749
                self.match(SnowflakeParser.ALTER)
                self.state = 3750
                self.match(SnowflakeParser.PROCEDURE)
                self.state = 3752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                if la_ == 1:
                    self.state = 3751
                    self.if_exists()


                self.state = 3754
                self.id_()
                self.state = 3755
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                    self.state = 3756
                    self.data_type_list()


                self.state = 3759
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 3760
                self.match(SnowflakeParser.RENAME)
                self.state = 3761
                self.match(SnowflakeParser.TO)
                self.state = 3762
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3764
                self.match(SnowflakeParser.ALTER)
                self.state = 3765
                self.match(SnowflakeParser.PROCEDURE)
                self.state = 3767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
                if la_ == 1:
                    self.state = 3766
                    self.if_exists()


                self.state = 3769
                self.id_()
                self.state = 3770
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                    self.state = 3771
                    self.data_type_list()


                self.state = 3774
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 3775
                self.match(SnowflakeParser.SET)
                self.state = 3776
                self.comment_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3778
                self.match(SnowflakeParser.ALTER)
                self.state = 3779
                self.match(SnowflakeParser.PROCEDURE)
                self.state = 3781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                if la_ == 1:
                    self.state = 3780
                    self.if_exists()


                self.state = 3783
                self.id_()
                self.state = 3784
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                    self.state = 3785
                    self.data_type_list()


                self.state = 3788
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 3789
                self.match(SnowflakeParser.UNSET)
                self.state = 3790
                self.match(SnowflakeParser.COMMENT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3792
                self.match(SnowflakeParser.ALTER)
                self.state = 3793
                self.match(SnowflakeParser.PROCEDURE)
                self.state = 3795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 3794
                    self.if_exists()


                self.state = 3797
                self.id_()
                self.state = 3798
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 3800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                    self.state = 3799
                    self.data_type_list()


                self.state = 3802
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 3803
                self.match(SnowflakeParser.EXECUTE)
                self.state = 3804
                self.match(SnowflakeParser.AS)
                self.state = 3805
                self.caller_owner()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_replication_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def REPLICATION(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.REPLICATION)
            else:
                return self.getToken(SnowflakeParser.REPLICATION, i)

        def GROUP(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.GROUP)
            else:
                return self.getToken(SnowflakeParser.GROUP, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def OBJECT_TYPES(self):
            return self.getToken(SnowflakeParser.OBJECT_TYPES, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def object_type_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_listContext,0)


        def REPLICATION_SCHEDULE(self):
            return self.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def ALLOWED_INTEGRATION_TYPES(self):
            return self.getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0)

        def integration_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Integration_type_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Integration_type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def db_name_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Db_name_listContext,0)


        def ALLOWED_DATABASES(self):
            return self.getToken(SnowflakeParser.ALLOWED_DATABASES, 0)

        def MOVE(self):
            return self.getToken(SnowflakeParser.MOVE, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def REMOVE(self):
            return self.getToken(SnowflakeParser.REMOVE, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def share_name_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Share_name_listContext,0)


        def ALLOWED_SHARES(self):
            return self.getToken(SnowflakeParser.ALLOWED_SHARES, 0)

        def SHARES(self):
            return self.getToken(SnowflakeParser.SHARES, 0)

        def account_id_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Account_id_listContext,0)


        def ALLOWED_ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0)

        def ignore_edition_check(self):
            return self.getTypedRuleContext(SnowflakeParser.Ignore_edition_checkContext,0)


        def REFRESH(self):
            return self.getToken(SnowflakeParser.REFRESH, 0)

        def SUSPEND(self):
            return self.getToken(SnowflakeParser.SUSPEND, 0)

        def RESUME(self):
            return self.getToken(SnowflakeParser.RESUME, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_replication_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_replication_group" ):
                listener.enterAlter_replication_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_replication_group" ):
                listener.exitAlter_replication_group(self)




    def alter_replication_group(self):

        localctx = SnowflakeParser.Alter_replication_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_alter_replication_group)
        self._la = 0 # Token type
        try:
            self.state = 3995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3809
                self.match(SnowflakeParser.ALTER)
                self.state = 3810
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3811
                self.match(SnowflakeParser.GROUP)
                self.state = 3813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                if la_ == 1:
                    self.state = 3812
                    self.if_exists()


                self.state = 3815
                self.id_()
                self.state = 3816
                self.match(SnowflakeParser.RENAME)
                self.state = 3817
                self.match(SnowflakeParser.TO)
                self.state = 3818
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3820
                self.match(SnowflakeParser.ALTER)
                self.state = 3821
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3822
                self.match(SnowflakeParser.GROUP)
                self.state = 3824
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 3823
                    self.if_exists()


                self.state = 3826
                self.id_()
                self.state = 3827
                self.match(SnowflakeParser.SET)
                self.state = 3831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==480:
                    self.state = 3828
                    self.match(SnowflakeParser.OBJECT_TYPES)
                    self.state = 3829
                    self.match(SnowflakeParser.EQ)
                    self.state = 3830
                    self.object_type_list()


                self.state = 3836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==595:
                    self.state = 3833
                    self.match(SnowflakeParser.REPLICATION_SCHEDULE)
                    self.state = 3834
                    self.match(SnowflakeParser.EQ)
                    self.state = 3835
                    self.string()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3838
                self.match(SnowflakeParser.ALTER)
                self.state = 3839
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3840
                self.match(SnowflakeParser.GROUP)
                self.state = 3842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 3841
                    self.if_exists()


                self.state = 3844
                self.id_()
                self.state = 3845
                self.match(SnowflakeParser.SET)
                self.state = 3846
                self.match(SnowflakeParser.OBJECT_TYPES)
                self.state = 3847
                self.match(SnowflakeParser.EQ)
                self.state = 3848
                self.object_type_list()
                self.state = 3849
                self.match(SnowflakeParser.ALLOWED_INTEGRATION_TYPES)
                self.state = 3850
                self.match(SnowflakeParser.EQ)
                self.state = 3851
                self.integration_type_name()
                self.state = 3856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 3852
                    self.match(SnowflakeParser.COMMA)
                    self.state = 3853
                    self.integration_type_name()
                    self.state = 3858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==595:
                    self.state = 3859
                    self.match(SnowflakeParser.REPLICATION_SCHEDULE)
                    self.state = 3860
                    self.match(SnowflakeParser.EQ)
                    self.state = 3861
                    self.string()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3864
                self.match(SnowflakeParser.ALTER)
                self.state = 3865
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3866
                self.match(SnowflakeParser.GROUP)
                self.state = 3868
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
                if la_ == 1:
                    self.state = 3867
                    self.if_exists()


                self.state = 3870
                self.id_()
                self.state = 3871
                self.match(SnowflakeParser.ADD)
                self.state = 3872
                self.db_name_list()
                self.state = 3873
                self.match(SnowflakeParser.TO)
                self.state = 3874
                self.match(SnowflakeParser.ALLOWED_DATABASES)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3876
                self.match(SnowflakeParser.ALTER)
                self.state = 3877
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3878
                self.match(SnowflakeParser.GROUP)
                self.state = 3880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 3879
                    self.if_exists()


                self.state = 3882
                self.id_()
                self.state = 3883
                self.match(SnowflakeParser.MOVE)
                self.state = 3884
                self.match(SnowflakeParser.DATABASES)
                self.state = 3885
                self.db_name_list()
                self.state = 3886
                self.match(SnowflakeParser.TO)
                self.state = 3887
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3888
                self.match(SnowflakeParser.GROUP)
                self.state = 3889
                self.id_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3891
                self.match(SnowflakeParser.ALTER)
                self.state = 3892
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3893
                self.match(SnowflakeParser.GROUP)
                self.state = 3895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 3894
                    self.if_exists()


                self.state = 3897
                self.id_()
                self.state = 3898
                self.match(SnowflakeParser.REMOVE)
                self.state = 3899
                self.db_name_list()
                self.state = 3900
                self.match(SnowflakeParser.FROM)
                self.state = 3901
                self.match(SnowflakeParser.ALLOWED_DATABASES)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3903
                self.match(SnowflakeParser.ALTER)
                self.state = 3904
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3905
                self.match(SnowflakeParser.GROUP)
                self.state = 3907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
                if la_ == 1:
                    self.state = 3906
                    self.if_exists()


                self.state = 3909
                self.id_()
                self.state = 3910
                self.match(SnowflakeParser.ADD)
                self.state = 3911
                self.share_name_list()
                self.state = 3912
                self.match(SnowflakeParser.TO)
                self.state = 3913
                self.match(SnowflakeParser.ALLOWED_SHARES)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3915
                self.match(SnowflakeParser.ALTER)
                self.state = 3916
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3917
                self.match(SnowflakeParser.GROUP)
                self.state = 3919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 3918
                    self.if_exists()


                self.state = 3921
                self.id_()
                self.state = 3922
                self.match(SnowflakeParser.MOVE)
                self.state = 3923
                self.match(SnowflakeParser.SHARES)
                self.state = 3924
                self.share_name_list()
                self.state = 3925
                self.match(SnowflakeParser.TO)
                self.state = 3926
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3927
                self.match(SnowflakeParser.GROUP)
                self.state = 3928
                self.id_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3930
                self.match(SnowflakeParser.ALTER)
                self.state = 3931
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3932
                self.match(SnowflakeParser.GROUP)
                self.state = 3934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                if la_ == 1:
                    self.state = 3933
                    self.if_exists()


                self.state = 3936
                self.id_()
                self.state = 3937
                self.match(SnowflakeParser.REMOVE)
                self.state = 3938
                self.share_name_list()
                self.state = 3939
                self.match(SnowflakeParser.FROM)
                self.state = 3940
                self.match(SnowflakeParser.ALLOWED_SHARES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3942
                self.match(SnowflakeParser.ALTER)
                self.state = 3943
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3944
                self.match(SnowflakeParser.GROUP)
                self.state = 3946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 3945
                    self.if_exists()


                self.state = 3948
                self.id_()
                self.state = 3949
                self.match(SnowflakeParser.ADD)
                self.state = 3950
                self.account_id_list()
                self.state = 3951
                self.match(SnowflakeParser.TO)
                self.state = 3952
                self.match(SnowflakeParser.ALLOWED_ACCOUNTS)
                self.state = 3954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 3953
                    self.ignore_edition_check()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3956
                self.match(SnowflakeParser.ALTER)
                self.state = 3957
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3958
                self.match(SnowflakeParser.GROUP)
                self.state = 3960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 3959
                    self.if_exists()


                self.state = 3962
                self.id_()
                self.state = 3963
                self.match(SnowflakeParser.REMOVE)
                self.state = 3964
                self.account_id_list()
                self.state = 3965
                self.match(SnowflakeParser.FROM)
                self.state = 3966
                self.match(SnowflakeParser.ALLOWED_ACCOUNTS)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3968
                self.match(SnowflakeParser.ALTER)
                self.state = 3969
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3970
                self.match(SnowflakeParser.GROUP)
                self.state = 3972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 3971
                    self.if_exists()


                self.state = 3974
                self.id_()
                self.state = 3975
                self.match(SnowflakeParser.REFRESH)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3977
                self.match(SnowflakeParser.ALTER)
                self.state = 3978
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3979
                self.match(SnowflakeParser.GROUP)
                self.state = 3981
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                if la_ == 1:
                    self.state = 3980
                    self.if_exists()


                self.state = 3983
                self.id_()
                self.state = 3984
                self.match(SnowflakeParser.SUSPEND)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3986
                self.match(SnowflakeParser.ALTER)
                self.state = 3987
                self.match(SnowflakeParser.REPLICATION)
                self.state = 3988
                self.match(SnowflakeParser.GROUP)
                self.state = 3990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
                if la_ == 1:
                    self.state = 3989
                    self.if_exists()


                self.state = 3992
                self.id_()
                self.state = 3993
                self.match(SnowflakeParser.RESUME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Credit_quotaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREDIT_QUOTA(self):
            return self.getToken(SnowflakeParser.CREDIT_QUOTA, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_credit_quota

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCredit_quota" ):
                listener.enterCredit_quota(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCredit_quota" ):
                listener.exitCredit_quota(self)




    def credit_quota(self):

        localctx = SnowflakeParser.Credit_quotaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_credit_quota)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3997
            self.match(SnowflakeParser.CREDIT_QUOTA)
            self.state = 3998
            self.match(SnowflakeParser.EQ)
            self.state = 3999
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrequencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FREQUENCY(self):
            return self.getToken(SnowflakeParser.FREQUENCY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def MONTHLY(self):
            return self.getToken(SnowflakeParser.MONTHLY, 0)

        def DAILY(self):
            return self.getToken(SnowflakeParser.DAILY, 0)

        def WEEKLY(self):
            return self.getToken(SnowflakeParser.WEEKLY, 0)

        def YEARLY(self):
            return self.getToken(SnowflakeParser.YEARLY, 0)

        def NEVER(self):
            return self.getToken(SnowflakeParser.NEVER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_frequency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrequency" ):
                listener.enterFrequency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrequency" ):
                listener.exitFrequency(self)




    def frequency(self):

        localctx = SnowflakeParser.FrequencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_frequency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4001
            self.match(SnowflakeParser.FREQUENCY)
            self.state = 4002
            self.match(SnowflakeParser.EQ)
            self.state = 4003
            _la = self._input.LA(1)
            if not(_la==167 or _la==432 or _la==440 or _la==842 or _la==860):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notify_usersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTIFY_USERS(self):
            return self.getToken(SnowflakeParser.NOTIFY_USERS, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_notify_users

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotify_users" ):
                listener.enterNotify_users(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotify_users" ):
                listener.exitNotify_users(self)




    def notify_users(self):

        localctx = SnowflakeParser.Notify_usersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_notify_users)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4005
            self.match(SnowflakeParser.NOTIFY_USERS)
            self.state = 4006
            self.match(SnowflakeParser.EQ)
            self.state = 4007
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 4008
            self.id_()
            self.state = 4013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 4009
                self.match(SnowflakeParser.COMMA)
                self.state = 4010
                self.id_()
                self.state = 4015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4016
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TriggerDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def PERCENT(self):
            return self.getToken(SnowflakeParser.PERCENT, 0)

        def DO(self):
            return self.getToken(SnowflakeParser.DO, 0)

        def SUSPEND(self):
            return self.getToken(SnowflakeParser.SUSPEND, 0)

        def SUSPEND_IMMEDIATE(self):
            return self.getToken(SnowflakeParser.SUSPEND_IMMEDIATE, 0)

        def NOTIFY(self):
            return self.getToken(SnowflakeParser.NOTIFY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_triggerDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTriggerDefinition" ):
                listener.enterTriggerDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTriggerDefinition" ):
                listener.exitTriggerDefinition(self)




    def triggerDefinition(self):

        localctx = SnowflakeParser.TriggerDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_triggerDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4018
            self.match(SnowflakeParser.ON)
            self.state = 4019
            self.num()
            self.state = 4020
            self.match(SnowflakeParser.PERCENT)
            self.state = 4021
            self.match(SnowflakeParser.DO)
            self.state = 4022
            _la = self._input.LA(1)
            if not(_la==452 or _la==738 or _la==740):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_resource_monitorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def notify_users(self):
            return self.getTypedRuleContext(SnowflakeParser.Notify_usersContext,0)


        def credit_quota(self):
            return self.getTypedRuleContext(SnowflakeParser.Credit_quotaContext,0)


        def frequency(self):
            return self.getTypedRuleContext(SnowflakeParser.FrequencyContext,0)


        def START_TIMESTAMP(self):
            return self.getToken(SnowflakeParser.START_TIMESTAMP, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def IMMEDIATELY(self):
            return self.getToken(SnowflakeParser.IMMEDIATELY, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def END_TIMESTAMP(self):
            return self.getToken(SnowflakeParser.END_TIMESTAMP, 0)

        def TRIGGERS(self):
            return self.getToken(SnowflakeParser.TRIGGERS, 0)

        def triggerDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.TriggerDefinitionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.TriggerDefinitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_resource_monitor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_resource_monitor" ):
                listener.enterAlter_resource_monitor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_resource_monitor" ):
                listener.exitAlter_resource_monitor(self)




    def alter_resource_monitor(self):

        localctx = SnowflakeParser.Alter_resource_monitorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_alter_resource_monitor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4024
            self.match(SnowflakeParser.ALTER)
            self.state = 4025
            self.match(SnowflakeParser.RESOURCE)
            self.state = 4026
            self.match(SnowflakeParser.MONITOR)
            self.state = 4028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 4027
                self.if_exists()


            self.state = 4030
            self.id_()
            self.state = 4051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==676:
                self.state = 4031
                self.match(SnowflakeParser.SET)
                self.state = 4033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 4032
                    self.credit_quota()


                self.state = 4036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==284:
                    self.state = 4035
                    self.frequency()


                self.state = 4044
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [714]:
                    self.state = 4038
                    self.match(SnowflakeParser.START_TIMESTAMP)
                    self.state = 4039
                    self.match(SnowflakeParser.EQ)
                    self.state = 4040
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 4041
                    self.string()
                    pass
                elif token in [334]:
                    self.state = 4042
                    self.match(SnowflakeParser.IMMEDIATELY)
                    self.state = 4043
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                elif token in [-1, 226, 453, 938]:
                    pass
                else:
                    pass
                self.state = 4049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 4046
                    self.match(SnowflakeParser.END_TIMESTAMP)
                    self.state = 4047
                    self.match(SnowflakeParser.EQ)
                    self.state = 4048
                    self.string()




            self.state = 4065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 4053
                self.notify_users()
                self.state = 4063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==794:
                    self.state = 4054
                    self.match(SnowflakeParser.TRIGGERS)
                    self.state = 4055
                    self.triggerDefinition()
                    self.state = 4060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 4056
                        self.match(SnowflakeParser.COMMA)
                        self.state = 4057
                        self.triggerDefinition()
                        self.state = 4062
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)





        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_role" ):
                listener.enterAlter_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_role" ):
                listener.exitAlter_role(self)




    def alter_role(self):

        localctx = SnowflakeParser.Alter_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_alter_role)
        try:
            self.state = 4111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4067
                self.match(SnowflakeParser.ALTER)
                self.state = 4068
                self.match(SnowflakeParser.ROLE)
                self.state = 4070
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,348,self._ctx)
                if la_ == 1:
                    self.state = 4069
                    self.if_exists()


                self.state = 4072
                self.id_()
                self.state = 4073
                self.match(SnowflakeParser.RENAME)
                self.state = 4074
                self.match(SnowflakeParser.TO)
                self.state = 4075
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4077
                self.match(SnowflakeParser.ALTER)
                self.state = 4078
                self.match(SnowflakeParser.ROLE)
                self.state = 4080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
                if la_ == 1:
                    self.state = 4079
                    self.if_exists()


                self.state = 4082
                self.id_()
                self.state = 4083
                self.match(SnowflakeParser.SET)
                self.state = 4084
                self.comment_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4086
                self.match(SnowflakeParser.ALTER)
                self.state = 4087
                self.match(SnowflakeParser.ROLE)
                self.state = 4089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
                if la_ == 1:
                    self.state = 4088
                    self.if_exists()


                self.state = 4091
                self.id_()
                self.state = 4092
                self.match(SnowflakeParser.UNSET)
                self.state = 4093
                self.match(SnowflakeParser.COMMENT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4095
                self.match(SnowflakeParser.ALTER)
                self.state = 4096
                self.match(SnowflakeParser.ROLE)
                self.state = 4098
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,351,self._ctx)
                if la_ == 1:
                    self.state = 4097
                    self.if_exists()


                self.state = 4100
                self.id_()
                self.state = 4101
                self.set_tags()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4103
                self.match(SnowflakeParser.ALTER)
                self.state = 4104
                self.match(SnowflakeParser.ROLE)
                self.state = 4106
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 4105
                    self.if_exists()


                self.state = 4108
                self.id_()
                self.state = 4109
                self.unset_tags()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_row_access_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def BODY(self):
            return self.getToken(SnowflakeParser.BODY, 0)

        def ARROW(self):
            return self.getToken(SnowflakeParser.ARROW, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_row_access_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_row_access_policy" ):
                listener.enterAlter_row_access_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_row_access_policy" ):
                listener.exitAlter_row_access_policy(self)




    def alter_row_access_policy(self):

        localctx = SnowflakeParser.Alter_row_access_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_alter_row_access_policy)
        try:
            self.state = 4149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4113
                self.match(SnowflakeParser.ALTER)
                self.state = 4114
                self.match(SnowflakeParser.ROW)
                self.state = 4115
                self.match(SnowflakeParser.ACCESS)
                self.state = 4116
                self.match(SnowflakeParser.POLICY)
                self.state = 4118
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
                if la_ == 1:
                    self.state = 4117
                    self.if_exists()


                self.state = 4120
                self.id_()
                self.state = 4121
                self.match(SnowflakeParser.SET)
                self.state = 4122
                self.match(SnowflakeParser.BODY)
                self.state = 4123
                self.match(SnowflakeParser.ARROW)
                self.state = 4124
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4126
                self.match(SnowflakeParser.ALTER)
                self.state = 4127
                self.match(SnowflakeParser.ROW)
                self.state = 4128
                self.match(SnowflakeParser.ACCESS)
                self.state = 4129
                self.match(SnowflakeParser.POLICY)
                self.state = 4131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                if la_ == 1:
                    self.state = 4130
                    self.if_exists()


                self.state = 4133
                self.id_()
                self.state = 4134
                self.match(SnowflakeParser.RENAME)
                self.state = 4135
                self.match(SnowflakeParser.TO)
                self.state = 4136
                self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4138
                self.match(SnowflakeParser.ALTER)
                self.state = 4139
                self.match(SnowflakeParser.ROW)
                self.state = 4140
                self.match(SnowflakeParser.ACCESS)
                self.state = 4141
                self.match(SnowflakeParser.POLICY)
                self.state = 4143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
                if la_ == 1:
                    self.state = 4142
                    self.if_exists()


                self.state = 4145
                self.id_()
                self.state = 4146
                self.match(SnowflakeParser.SET)
                self.state = 4147
                self.comment_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Schema_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SWAP(self):
            return self.getToken(SnowflakeParser.SWAP, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def default_ddl_collation(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_ddl_collationContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def schema_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Schema_propertyContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Schema_propertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def MANAGED(self):
            return self.getToken(SnowflakeParser.MANAGED, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(SnowflakeParser.DISABLE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_schema" ):
                listener.enterAlter_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_schema" ):
                listener.exitAlter_schema(self)




    def alter_schema(self):

        localctx = SnowflakeParser.Alter_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_alter_schema)
        self._la = 0 # Token type
        try:
            self.state = 4235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4151
                self.match(SnowflakeParser.ALTER)
                self.state = 4152
                self.match(SnowflakeParser.SCHEMA)
                self.state = 4154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,358,self._ctx)
                if la_ == 1:
                    self.state = 4153
                    self.if_exists()


                self.state = 4156
                self.schema_name()
                self.state = 4157
                self.match(SnowflakeParser.RENAME)
                self.state = 4158
                self.match(SnowflakeParser.TO)
                self.state = 4159
                self.schema_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4161
                self.match(SnowflakeParser.ALTER)
                self.state = 4162
                self.match(SnowflakeParser.SCHEMA)
                self.state = 4164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 4163
                    self.if_exists()


                self.state = 4166
                self.schema_name()
                self.state = 4167
                self.match(SnowflakeParser.SWAP)
                self.state = 4168
                self.match(SnowflakeParser.WITH)
                self.state = 4169
                self.schema_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4171
                self.match(SnowflakeParser.ALTER)
                self.state = 4172
                self.match(SnowflakeParser.SCHEMA)
                self.state = 4174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 4173
                    self.if_exists()


                self.state = 4176
                self.schema_name()
                self.state = 4177
                self.match(SnowflakeParser.SET)

                self.state = 4181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 4178
                    self.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS)
                    self.state = 4179
                    self.match(SnowflakeParser.EQ)
                    self.state = 4180
                    self.num()


                self.state = 4186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==413:
                    self.state = 4183
                    self.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS)
                    self.state = 4184
                    self.match(SnowflakeParser.EQ)
                    self.state = 4185
                    self.num()


                self.state = 4189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 4188
                    self.default_ddl_collation()


                self.state = 4192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 4191
                    self.comment_clause()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4194
                self.match(SnowflakeParser.ALTER)
                self.state = 4195
                self.match(SnowflakeParser.SCHEMA)
                self.state = 4197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 4196
                    self.if_exists()


                self.state = 4199
                self.schema_name()
                self.state = 4200
                self.set_tags()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4202
                self.match(SnowflakeParser.ALTER)
                self.state = 4203
                self.match(SnowflakeParser.SCHEMA)
                self.state = 4205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 4204
                    self.if_exists()


                self.state = 4207
                self.schema_name()
                self.state = 4208
                self.unset_tags()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4210
                self.match(SnowflakeParser.ALTER)
                self.state = 4211
                self.match(SnowflakeParser.SCHEMA)
                self.state = 4213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
                if la_ == 1:
                    self.state = 4212
                    self.if_exists()


                self.state = 4215
                self.schema_name()
                self.state = 4216
                self.match(SnowflakeParser.UNSET)
                self.state = 4217
                self.schema_property()
                self.state = 4222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 4218
                    self.match(SnowflakeParser.COMMA)
                    self.state = 4219
                    self.schema_property()
                    self.state = 4224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4225
                self.match(SnowflakeParser.ALTER)
                self.state = 4226
                self.match(SnowflakeParser.SCHEMA)
                self.state = 4228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 4227
                    self.if_exists()


                self.state = 4230
                self.schema_name()
                self.state = 4231
                _la = self._input.LA(1)
                if not(_la==200 or _la==216):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4232
                self.match(SnowflakeParser.MANAGED)
                self.state = 4233
                self.match(SnowflakeParser.ACCESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_schema_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_property" ):
                listener.enterSchema_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_property" ):
                listener.exitSchema_property(self)




    def schema_property(self):

        localctx = SnowflakeParser.Schema_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_schema_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4237
            _la = self._input.LA(1)
            if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 35218731827201) != 0) or _la==413):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def INCREMENT(self):
            return self.getToken(SnowflakeParser.INCREMENT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def order_noorder(self):
            return self.getTypedRuleContext(SnowflakeParser.Order_noorderContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_sequence" ):
                listener.enterAlter_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_sequence" ):
                listener.exitAlter_sequence(self)




    def alter_sequence(self):

        localctx = SnowflakeParser.Alter_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_alter_sequence)
        self._la = 0 # Token type
        try:
            self.state = 4291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4239
                self.match(SnowflakeParser.ALTER)
                self.state = 4240
                self.match(SnowflakeParser.SEQUENCE)
                self.state = 4242
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                if la_ == 1:
                    self.state = 4241
                    self.if_exists()


                self.state = 4244
                self.object_name()
                self.state = 4245
                self.match(SnowflakeParser.RENAME)
                self.state = 4246
                self.match(SnowflakeParser.TO)
                self.state = 4247
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4249
                self.match(SnowflakeParser.ALTER)
                self.state = 4250
                self.match(SnowflakeParser.SEQUENCE)
                self.state = 4252
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
                if la_ == 1:
                    self.state = 4251
                    self.if_exists()


                self.state = 4254
                self.object_name()
                self.state = 4256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==676:
                    self.state = 4255
                    self.match(SnowflakeParser.SET)


                self.state = 4266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==341:
                    self.state = 4258
                    self.match(SnowflakeParser.INCREMENT)
                    self.state = 4260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==99:
                        self.state = 4259
                        self.match(SnowflakeParser.BY)


                    self.state = 4263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==921:
                        self.state = 4262
                        self.match(SnowflakeParser.EQ)


                    self.state = 4265
                    self.num()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4268
                self.match(SnowflakeParser.ALTER)
                self.state = 4269
                self.match(SnowflakeParser.SEQUENCE)
                self.state = 4271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 4270
                    self.if_exists()


                self.state = 4273
                self.object_name()
                self.state = 4274
                self.match(SnowflakeParser.SET)
                self.state = 4280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,379,self._ctx)
                if la_ == 1:
                    self.state = 4276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==446 or _la==500:
                        self.state = 4275
                        self.order_noorder()


                    self.state = 4278
                    self.comment_clause()
                    pass

                elif la_ == 2:
                    self.state = 4279
                    self.order_noorder()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4282
                self.match(SnowflakeParser.ALTER)
                self.state = 4283
                self.match(SnowflakeParser.SEQUENCE)
                self.state = 4285
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,380,self._ctx)
                if la_ == 1:
                    self.state = 4284
                    self.if_exists()


                self.state = 4287
                self.object_name()
                self.state = 4288
                self.match(SnowflakeParser.UNSET)
                self.state = 4289
                self.match(SnowflakeParser.COMMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_secretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def SECRET(self):
            return self.getToken(SnowflakeParser.SECRET, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def secret_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Secret_optsContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_secret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_secret" ):
                listener.enterAlter_secret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_secret" ):
                listener.exitAlter_secret(self)




    def alter_secret(self):

        localctx = SnowflakeParser.Alter_secretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_alter_secret)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4293
            self.match(SnowflakeParser.ALTER)
            self.state = 4294
            self.match(SnowflakeParser.SECRET)
            self.state = 4296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
            if la_ == 1:
                self.state = 4295
                self.if_exists()


            self.state = 4298
            self.object_name()
            self.state = 4299
            self.secret_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secret_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def secret_set_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Secret_set_optsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_secret_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecret_opts" ):
                listener.enterSecret_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecret_opts" ):
                listener.exitSecret_opts(self)




    def secret_opts(self):

        localctx = SnowflakeParser.Secret_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_secret_opts)
        try:
            self.state = 4305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [809]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4301
                self.match(SnowflakeParser.UNSET)
                self.state = 4302
                self.match(SnowflakeParser.COMMENT)
                pass
            elif token in [676]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4303
                self.match(SnowflakeParser.SET)
                self.state = 4304
                self.secret_set_opts()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secret_set_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def secret_oauth_client_creds_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Secret_oauth_client_creds_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Secret_oauth_client_creds_optsContext,i)


        def secret_oauth_auth_code_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Secret_oauth_auth_code_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Secret_oauth_auth_code_optsContext,i)


        def secret_basic_auth_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Secret_basic_auth_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Secret_basic_auth_optsContext,i)


        def secret_generic_string_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Secret_generic_string_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Secret_generic_string_optsContext,i)


        def secret_api_auth_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Secret_api_auth_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Secret_api_auth_optsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_secret_set_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecret_set_opts" ):
                listener.enterSecret_set_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecret_set_opts" ):
                listener.exitSecret_set_opts(self)




    def secret_set_opts(self):

        localctx = SnowflakeParser.Secret_set_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_secret_set_opts)
        self._la = 0 # Token type
        try:
            self.state = 4332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4308 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4307
                    self.secret_oauth_client_creds_opts()
                    self.state = 4310 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138 or _la==475):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4313 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4312
                    self.secret_oauth_auth_code_opts()
                    self.state = 4315 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138 or _la==472 or _la==473):
                        break

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4318 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4317
                    self.secret_basic_auth_opts()
                    self.state = 4320 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138 or _la==520 or _la==819):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4323 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4322
                    self.secret_generic_string_opts()
                    self.state = 4325 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==138 or _la==664):
                        break

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4327
                    self.secret_api_auth_opts()
                    self.state = 4330 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==34 or _la==138):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secret_oauth_client_creds_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OAUTH_SCOPES(self):
            return self.getToken(SnowflakeParser.OAUTH_SCOPES, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def string_list(self):
            return self.getTypedRuleContext(SnowflakeParser.String_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_secret_oauth_client_creds_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecret_oauth_client_creds_opts" ):
                listener.enterSecret_oauth_client_creds_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecret_oauth_client_creds_opts" ):
                listener.exitSecret_oauth_client_creds_opts(self)




    def secret_oauth_client_creds_opts(self):

        localctx = SnowflakeParser.Secret_oauth_client_creds_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_secret_oauth_client_creds_opts)
        try:
            self.state = 4341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [475]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4334
                self.match(SnowflakeParser.OAUTH_SCOPES)
                self.state = 4335
                self.match(SnowflakeParser.EQ)
                self.state = 4336
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 4337
                self.string_list()
                self.state = 4338
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4340
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secret_oauth_auth_code_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None # StringContext
            self.tet = None # StringContext

        def OAUTH_REFRESH_TOKEN(self):
            return self.getToken(SnowflakeParser.OAUTH_REFRESH_TOKEN, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def OAUTH_REFRESH_TOKEN_EXPIRY_TIME(self):
            return self.getToken(SnowflakeParser.OAUTH_REFRESH_TOKEN_EXPIRY_TIME, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_secret_oauth_auth_code_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecret_oauth_auth_code_opts" ):
                listener.enterSecret_oauth_auth_code_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecret_oauth_auth_code_opts" ):
                listener.exitSecret_oauth_auth_code_opts(self)




    def secret_oauth_auth_code_opts(self):

        localctx = SnowflakeParser.Secret_oauth_auth_code_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_secret_oauth_auth_code_opts)
        try:
            self.state = 4350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [472]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4343
                self.match(SnowflakeParser.OAUTH_REFRESH_TOKEN)
                self.state = 4344
                self.match(SnowflakeParser.EQ)
                self.state = 4345
                localctx.t = self.string()
                pass
            elif token in [473]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4346
                self.match(SnowflakeParser.OAUTH_REFRESH_TOKEN_EXPIRY_TIME)
                self.state = 4347
                self.match(SnowflakeParser.EQ)
                self.state = 4348
                localctx.tet = self.string()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4349
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secret_api_auth_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aa = None # StringContext

        def API_AUTHENTICATION(self):
            return self.getToken(SnowflakeParser.API_AUTHENTICATION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_secret_api_auth_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecret_api_auth_opts" ):
                listener.enterSecret_api_auth_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecret_api_auth_opts" ):
                listener.exitSecret_api_auth_opts(self)




    def secret_api_auth_opts(self):

        localctx = SnowflakeParser.Secret_api_auth_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_secret_api_auth_opts)
        try:
            self.state = 4356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4352
                self.match(SnowflakeParser.API_AUTHENTICATION)
                self.state = 4353
                self.match(SnowflakeParser.EQ)
                self.state = 4354
                localctx.aa = self.string()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4355
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secret_basic_auth_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.u = None # StringContext
            self.p = None # StringContext

        def USERNAME(self):
            return self.getToken(SnowflakeParser.USERNAME, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_secret_basic_auth_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecret_basic_auth_opts" ):
                listener.enterSecret_basic_auth_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecret_basic_auth_opts" ):
                listener.exitSecret_basic_auth_opts(self)




    def secret_basic_auth_opts(self):

        localctx = SnowflakeParser.Secret_basic_auth_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_secret_basic_auth_opts)
        try:
            self.state = 4365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [819]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4358
                self.match(SnowflakeParser.USERNAME)
                self.state = 4359
                self.match(SnowflakeParser.EQ)
                self.state = 4360
                localctx.u = self.string()
                pass
            elif token in [520]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4361
                self.match(SnowflakeParser.PASSWORD)
                self.state = 4362
                self.match(SnowflakeParser.EQ)
                self.state = 4363
                localctx.p = self.string()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4364
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secret_generic_string_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ss = None # StringContext

        def SECRET_STRING(self):
            return self.getToken(SnowflakeParser.SECRET_STRING, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_secret_generic_string_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecret_generic_string_opts" ):
                listener.enterSecret_generic_string_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecret_generic_string_opts" ):
                listener.exitSecret_generic_string_opts(self)




    def secret_generic_string_opts(self):

        localctx = SnowflakeParser.Secret_generic_string_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_secret_generic_string_opts)
        try:
            self.state = 4371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [664]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4367
                self.match(SnowflakeParser.SECRET_STRING)
                self.state = 4368
                self.match(SnowflakeParser.EQ)
                self.state = 4369
                localctx.ss = self.string()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4370
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_security_integration_external_oauthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def EXTERNAL_OAUTH(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH, 0)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def EXTERNAL_OAUTH_TYPE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0)

        def EXTERNAL_OAUTH_ISSUER(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0)

        def EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0)

        def EXTERNAL_OAUTH_JWS_KEYS_URL(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
            else:
                return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i)

        def EXTERNAL_OAUTH_RSA_PUBLIC_KEY(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0)

        def EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0)

        def EXTERNAL_OAUTH_BLOCKED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def EXTERNAL_OAUTH_ALLOWED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0)

        def EXTERNAL_OAUTH_AUDIENCE_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0)

        def EXTERNAL_OAUTH_ANY_ROLE_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE)
            else:
                return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, i)

        def OKTA(self):
            return self.getToken(SnowflakeParser.OKTA, 0)

        def AZURE(self):
            return self.getToken(SnowflakeParser.AZURE, 0)

        def PING_FEDERATE(self):
            return self.getToken(SnowflakeParser.PING_FEDERATE, 0)

        def CUSTOM(self):
            return self.getToken(SnowflakeParser.CUSTOM, 0)

        def DISABLE(self):
            return self.getToken(SnowflakeParser.DISABLE, 0)

        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def ENABLE_FOR_PRIVILEGE(self):
            return self.getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def security_integration_external_oauth_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Security_integration_external_oauth_propertyContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Security_integration_external_oauth_propertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_security_integration_external_oauth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_security_integration_external_oauth" ):
                listener.enterAlter_security_integration_external_oauth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_security_integration_external_oauth" ):
                listener.exitAlter_security_integration_external_oauth(self)




    def alter_security_integration_external_oauth(self):

        localctx = SnowflakeParser.Alter_security_integration_external_oauthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_alter_security_integration_external_oauth)
        self._la = 0 # Token type
        try:
            self.state = 4511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4373
                self.match(SnowflakeParser.ALTER)
                self.state = 4375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4374
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4377
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4378
                self.if_exists()
                self.state = 4379
                self.id_()
                self.state = 4380
                self.match(SnowflakeParser.SET)
                self.state = 4384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==803:
                    self.state = 4381
                    self.match(SnowflakeParser.TYPE)
                    self.state = 4382
                    self.match(SnowflakeParser.EQ)
                    self.state = 4383
                    self.match(SnowflakeParser.EXTERNAL_OAUTH)


                self.state = 4389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 4386
                    self.match(SnowflakeParser.ENABLED)
                    self.state = 4387
                    self.match(SnowflakeParser.EQ)
                    self.state = 4388
                    self.true_false()


                self.state = 4394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 4391
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_TYPE)
                    self.state = 4392
                    self.match(SnowflakeParser.EQ)
                    self.state = 4393
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==166 or _la==483 or _la==538):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==256:
                    self.state = 4396
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_ISSUER)
                    self.state = 4397
                    self.match(SnowflakeParser.EQ)
                    self.state = 4398
                    self.string()


                self.state = 4410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==262:
                    self.state = 4401
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM)
                    self.state = 4402
                    self.match(SnowflakeParser.EQ)
                    self.state = 4408
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [912]:
                        self.state = 4403
                        self.string()
                        pass
                    elif token in [931]:
                        self.state = 4404
                        self.match(SnowflakeParser.LR_BRACKET)
                        self.state = 4405
                        self.string_list()
                        self.state = 4406
                        self.match(SnowflakeParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 4412
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE)
                    self.state = 4413
                    self.match(SnowflakeParser.EQ)
                    self.state = 4414
                    self.string()


                self.state = 4420
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                if la_ == 1:
                    self.state = 4417
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
                    self.state = 4418
                    self.match(SnowflakeParser.EQ)
                    self.state = 4419
                    self.string()


                self.state = 4431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==257:
                    self.state = 4422
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
                    self.state = 4423
                    self.match(SnowflakeParser.EQ)
                    self.state = 4429
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [912]:
                        self.state = 4424
                        self.string()
                        pass
                    elif token in [931]:
                        self.state = 4425
                        self.match(SnowflakeParser.LR_BRACKET)
                        self.state = 4426
                        self.string_list()
                        self.state = 4427
                        self.match(SnowflakeParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 4433
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY)
                    self.state = 4434
                    self.match(SnowflakeParser.EQ)
                    self.state = 4435
                    self.string()


                self.state = 4441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==259:
                    self.state = 4438
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2)
                    self.state = 4439
                    self.match(SnowflakeParser.EQ)
                    self.state = 4440
                    self.string()


                self.state = 4449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==255:
                    self.state = 4443
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST)
                    self.state = 4444
                    self.match(SnowflakeParser.EQ)
                    self.state = 4445
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 4446
                    self.string_list()
                    self.state = 4447
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 4457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 4451
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST)
                    self.state = 4452
                    self.match(SnowflakeParser.EQ)
                    self.state = 4453
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 4454
                    self.string_list()
                    self.state = 4455
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 4465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==254:
                    self.state = 4459
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST)
                    self.state = 4460
                    self.match(SnowflakeParser.EQ)
                    self.state = 4461
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 4462
                    self.string()
                    self.state = 4463
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 4470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
                if la_ == 1:
                    self.state = 4467
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE)
                    self.state = 4468
                    self.match(SnowflakeParser.EQ)
                    self.state = 4469
                    _la = self._input.LA(1)
                    if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 327681) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==253:
                    self.state = 4472
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE)
                    self.state = 4473
                    self.match(SnowflakeParser.EQ)
                    self.state = 4474
                    self.string()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4477
                self.match(SnowflakeParser.ALTER)
                self.state = 4479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4478
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4481
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
                if la_ == 1:
                    self.state = 4482
                    self.if_exists()


                self.state = 4485
                self.id_()
                self.state = 4486
                self.match(SnowflakeParser.UNSET)
                self.state = 4487
                self.security_integration_external_oauth_property()
                self.state = 4492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 4488
                    self.match(SnowflakeParser.COMMA)
                    self.state = 4489
                    self.security_integration_external_oauth_property()
                    self.state = 4494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4495
                self.match(SnowflakeParser.ALTER)
                self.state = 4497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4496
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4499
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4500
                self.id_()
                self.state = 4501
                self.set_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4503
                self.match(SnowflakeParser.ALTER)
                self.state = 4505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4504
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4507
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4508
                self.id_()
                self.state = 4509
                self.unset_tags()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_integration_external_oauth_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def NETWORK_POLICY(self):
            return self.getToken(SnowflakeParser.NETWORK_POLICY, 0)

        def OAUTH_CLIENT_RSA_PUBLIC_KEY(self):
            return self.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY, 0)

        def OAUTH_CLIENT_RSA_PUBLIC_KEY_2(self):
            return self.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0)

        def OAUTH_USE_SECONDARY_ROLES(self):
            return self.getToken(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def IMPLICIT(self):
            return self.getToken(SnowflakeParser.IMPLICIT, 0)

        def NONE(self):
            return self.getToken(SnowflakeParser.NONE, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_security_integration_external_oauth_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_integration_external_oauth_property" ):
                listener.enterSecurity_integration_external_oauth_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_integration_external_oauth_property" ):
                listener.exitSecurity_integration_external_oauth_property(self)




    def security_integration_external_oauth_property(self):

        localctx = SnowflakeParser.Security_integration_external_oauth_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_security_integration_external_oauth_property)
        self._la = 0 # Token type
        try:
            self.state = 4521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [217]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4513
                self.match(SnowflakeParser.ENABLED)
                pass
            elif token in [439]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4514
                self.match(SnowflakeParser.NETWORK_POLICY)
                pass
            elif token in [467]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4515
                self.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY)
                pass
            elif token in [468]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4516
                self.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2)
                pass
            elif token in [476]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4517
                self.match(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES)
                self.state = 4518
                self.match(SnowflakeParser.EQ)
                self.state = 4519
                _la = self._input.LA(1)
                if not(_la==336 or _la==444):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4520
                self.match(SnowflakeParser.COMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_security_integration_snowflake_oauthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def EXTERNAL_OAUTH_SCOPE_DELIMITER(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EXTERNAL_OAUTH(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH, 0)

        def enabled_true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.Enabled_true_falseContext,0)


        def EXTERNAL_OAUTH_TYPE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0)

        def EXTERNAL_OAUTH_ISSUER(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0)

        def EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0)

        def EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0)

        def EXTERNAL_OAUTH_JWS_KEYS_URL(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
            else:
                return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i)

        def EXTERNAL_OAUTH_RSA_PUBLIC_KEY(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0)

        def EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0)

        def EXTERNAL_OAUTH_BLOCKED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def EXTERNAL_OAUTH_ALLOWED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0)

        def EXTERNAL_OAUTH_AUDIENCE_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0)

        def EXTERNAL_OAUTH_ANY_ROLE_MODE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, 0)

        def DISABLE(self):
            return self.getToken(SnowflakeParser.DISABLE, 0)

        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def ENABLE_FOR_PRIVILEGE(self):
            return self.getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0)

        def OKTA(self):
            return self.getToken(SnowflakeParser.OKTA, 0)

        def AZURE(self):
            return self.getToken(SnowflakeParser.AZURE, 0)

        def PING_FEDERATE(self):
            return self.getToken(SnowflakeParser.PING_FEDERATE, 0)

        def CUSTOM(self):
            return self.getToken(SnowflakeParser.CUSTOM, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def security_integration_snowflake_oauth_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Security_integration_snowflake_oauth_propertyContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Security_integration_snowflake_oauth_propertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_security_integration_snowflake_oauth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_security_integration_snowflake_oauth" ):
                listener.enterAlter_security_integration_snowflake_oauth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_security_integration_snowflake_oauth" ):
                listener.exitAlter_security_integration_snowflake_oauth(self)




    def alter_security_integration_snowflake_oauth(self):

        localctx = SnowflakeParser.Alter_security_integration_snowflake_oauthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_alter_security_integration_snowflake_oauth)
        self._la = 0 # Token type
        try:
            self.state = 4662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4523
                self.match(SnowflakeParser.ALTER)
                self.state = 4525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4524
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4527
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 4528
                    self.if_exists()


                self.state = 4531
                self.id_()
                self.state = 4532
                self.match(SnowflakeParser.SET)
                self.state = 4536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==803:
                    self.state = 4533
                    self.match(SnowflakeParser.TYPE)
                    self.state = 4534
                    self.match(SnowflakeParser.EQ)
                    self.state = 4535
                    self.match(SnowflakeParser.EXTERNAL_OAUTH)


                self.state = 4539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 4538
                    self.enabled_true_false()


                self.state = 4544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 4541
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_TYPE)
                    self.state = 4542
                    self.match(SnowflakeParser.EQ)
                    self.state = 4543
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==166 or _la==483 or _la==538):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==256:
                    self.state = 4546
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_ISSUER)
                    self.state = 4547
                    self.match(SnowflakeParser.EQ)
                    self.state = 4548
                    self.string()


                self.state = 4560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==262:
                    self.state = 4551
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM)
                    self.state = 4552
                    self.match(SnowflakeParser.EQ)
                    self.state = 4558
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [912]:
                        self.state = 4553
                        self.string()
                        pass
                    elif token in [931]:
                        self.state = 4554
                        self.match(SnowflakeParser.LR_BRACKET)
                        self.state = 4555
                        self.string_list()
                        self.state = 4556
                        self.match(SnowflakeParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 4562
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE)
                    self.state = 4563
                    self.match(SnowflakeParser.EQ)
                    self.state = 4564
                    self.string()


                self.state = 4570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 4567
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
                    self.state = 4568
                    self.match(SnowflakeParser.EQ)
                    self.state = 4569
                    self.string()


                self.state = 4581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==257:
                    self.state = 4572
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
                    self.state = 4573
                    self.match(SnowflakeParser.EQ)
                    self.state = 4579
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [912]:
                        self.state = 4574
                        self.string()
                        pass
                    elif token in [931]:
                        self.state = 4575
                        self.match(SnowflakeParser.LR_BRACKET)
                        self.state = 4576
                        self.string_list()
                        self.state = 4577
                        self.match(SnowflakeParser.RR_BRACKET)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==258:
                    self.state = 4583
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY)
                    self.state = 4584
                    self.match(SnowflakeParser.EQ)
                    self.state = 4585
                    self.string()


                self.state = 4591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==259:
                    self.state = 4588
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2)
                    self.state = 4589
                    self.match(SnowflakeParser.EQ)
                    self.state = 4590
                    self.string()


                self.state = 4599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==255:
                    self.state = 4593
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST)
                    self.state = 4594
                    self.match(SnowflakeParser.EQ)
                    self.state = 4595
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 4596
                    self.string_list()
                    self.state = 4597
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 4607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 4601
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST)
                    self.state = 4602
                    self.match(SnowflakeParser.EQ)
                    self.state = 4603
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 4604
                    self.string_list()
                    self.state = 4605
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 4615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==254:
                    self.state = 4609
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST)
                    self.state = 4610
                    self.match(SnowflakeParser.EQ)
                    self.state = 4611
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 4612
                    self.string()
                    self.state = 4613
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 4622
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [253]:
                    self.state = 4617
                    self.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE)
                    self.state = 4618
                    self.match(SnowflakeParser.EQ)
                    self.state = 4619
                    self.match(SnowflakeParser.DISABLE)
                    pass
                elif token in [216]:
                    self.state = 4620
                    self.match(SnowflakeParser.ENABLE)
                    pass
                elif token in [218]:
                    self.state = 4621
                    self.match(SnowflakeParser.ENABLE_FOR_PRIVILEGE)
                    pass
                elif token in [260]:
                    pass
                else:
                    pass

                self.state = 4624
                self.match(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER)
                self.state = 4625
                self.match(SnowflakeParser.EQ)
                self.state = 4626
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4628
                self.match(SnowflakeParser.ALTER)
                self.state = 4630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4629
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4632
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
                if la_ == 1:
                    self.state = 4633
                    self.if_exists()


                self.state = 4636
                self.id_()
                self.state = 4637
                self.match(SnowflakeParser.UNSET)
                self.state = 4638
                self.security_integration_snowflake_oauth_property()
                self.state = 4643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 4639
                    self.match(SnowflakeParser.COMMA)
                    self.state = 4640
                    self.security_integration_snowflake_oauth_property()
                    self.state = 4645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4646
                self.match(SnowflakeParser.ALTER)
                self.state = 4648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4647
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4650
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4651
                self.id_()
                self.state = 4652
                self.set_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4654
                self.match(SnowflakeParser.ALTER)
                self.state = 4656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4655
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4658
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4659
                self.id_()
                self.state = 4660
                self.unset_tags()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_integration_snowflake_oauth_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def EXTERNAL_OAUTH_AUDIENCE_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_security_integration_snowflake_oauth_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_integration_snowflake_oauth_property" ):
                listener.enterSecurity_integration_snowflake_oauth_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_integration_snowflake_oauth_property" ):
                listener.exitSecurity_integration_snowflake_oauth_property(self)




    def security_integration_snowflake_oauth_property(self):

        localctx = SnowflakeParser.Security_integration_snowflake_oauth_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_security_integration_snowflake_oauth_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4664
            _la = self._input.LA(1)
            if not(_la==217 or _la==254):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_security_integration_saml2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def SAML2(self):
            return self.getToken(SnowflakeParser.SAML2, 0)

        def enabled_true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.Enabled_true_falseContext,0)


        def SAML2_ISSUER(self):
            return self.getToken(SnowflakeParser.SAML2_ISSUER, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def SAML2_SSO_URL(self):
            return self.getToken(SnowflakeParser.SAML2_SSO_URL, 0)

        def SAML2_PROVIDER(self):
            return self.getToken(SnowflakeParser.SAML2_PROVIDER, 0)

        def SAML2_X509_CERT(self):
            return self.getToken(SnowflakeParser.SAML2_X509_CERT, 0)

        def SAML2_SP_INITIATED_LOGIN_PAGE_LABEL(self):
            return self.getToken(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0)

        def SAML2_ENABLE_SP_INITIATED(self):
            return self.getToken(SnowflakeParser.SAML2_ENABLE_SP_INITIATED, 0)

        def true_false(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.True_falseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.True_falseContext,i)


        def SAML2_SNOWFLAKE_X509_CERT(self):
            return self.getToken(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT, 0)

        def SAML2_SIGN_REQUEST(self):
            return self.getToken(SnowflakeParser.SAML2_SIGN_REQUEST, 0)

        def SAML2_REQUESTED_NAMEID_FORMAT(self):
            return self.getToken(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT, 0)

        def SAML2_POST_LOGOUT_REDIRECT_URL(self):
            return self.getToken(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL, 0)

        def SAML2_FORCE_AUTHN(self):
            return self.getToken(SnowflakeParser.SAML2_FORCE_AUTHN, 0)

        def SAML2_SNOWFLAKE_ISSUER_URL(self):
            return self.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL, 0)

        def SAML2_SNOWFLAKE_ACS_URL(self):
            return self.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_security_integration_saml2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_security_integration_saml2" ):
                listener.enterAlter_security_integration_saml2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_security_integration_saml2" ):
                listener.exitAlter_security_integration_saml2(self)




    def alter_security_integration_saml2(self):

        localctx = SnowflakeParser.Alter_security_integration_saml2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_alter_security_integration_saml2)
        self._la = 0 # Token type
        try:
            self.state = 4777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4666
                self.match(SnowflakeParser.ALTER)
                self.state = 4668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4667
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4670
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
                if la_ == 1:
                    self.state = 4671
                    self.if_exists()


                self.state = 4674
                self.id_()
                self.state = 4675
                self.match(SnowflakeParser.SET)
                self.state = 4679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==803:
                    self.state = 4676
                    self.match(SnowflakeParser.TYPE)
                    self.state = 4677
                    self.match(SnowflakeParser.EQ)
                    self.state = 4678
                    self.match(SnowflakeParser.SAML2)


                self.state = 4682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 4681
                    self.enabled_true_false()


                self.state = 4687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==639:
                    self.state = 4684
                    self.match(SnowflakeParser.SAML2_ISSUER)
                    self.state = 4685
                    self.match(SnowflakeParser.EQ)
                    self.state = 4686
                    self.string()


                self.state = 4692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==648:
                    self.state = 4689
                    self.match(SnowflakeParser.SAML2_SSO_URL)
                    self.state = 4690
                    self.match(SnowflakeParser.EQ)
                    self.state = 4691
                    self.string()


                self.state = 4697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==641:
                    self.state = 4694
                    self.match(SnowflakeParser.SAML2_PROVIDER)
                    self.state = 4695
                    self.match(SnowflakeParser.EQ)
                    self.state = 4696
                    self.string()


                self.state = 4702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==649:
                    self.state = 4699
                    self.match(SnowflakeParser.SAML2_X509_CERT)
                    self.state = 4700
                    self.match(SnowflakeParser.EQ)
                    self.state = 4701
                    self.string()


                self.state = 4707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==647:
                    self.state = 4704
                    self.match(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL)
                    self.state = 4705
                    self.match(SnowflakeParser.EQ)
                    self.state = 4706
                    self.string()


                self.state = 4712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==637:
                    self.state = 4709
                    self.match(SnowflakeParser.SAML2_ENABLE_SP_INITIATED)
                    self.state = 4710
                    self.match(SnowflakeParser.EQ)
                    self.state = 4711
                    self.true_false()


                self.state = 4717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==646:
                    self.state = 4714
                    self.match(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT)
                    self.state = 4715
                    self.match(SnowflakeParser.EQ)
                    self.state = 4716
                    self.string()


                self.state = 4722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==643:
                    self.state = 4719
                    self.match(SnowflakeParser.SAML2_SIGN_REQUEST)
                    self.state = 4720
                    self.match(SnowflakeParser.EQ)
                    self.state = 4721
                    self.true_false()


                self.state = 4727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==642:
                    self.state = 4724
                    self.match(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT)
                    self.state = 4725
                    self.match(SnowflakeParser.EQ)
                    self.state = 4726
                    self.string()


                self.state = 4732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==640:
                    self.state = 4729
                    self.match(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL)
                    self.state = 4730
                    self.match(SnowflakeParser.EQ)
                    self.state = 4731
                    self.string()


                self.state = 4737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==638:
                    self.state = 4734
                    self.match(SnowflakeParser.SAML2_FORCE_AUTHN)
                    self.state = 4735
                    self.match(SnowflakeParser.EQ)
                    self.state = 4736
                    self.true_false()


                self.state = 4742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==645:
                    self.state = 4739
                    self.match(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL)
                    self.state = 4740
                    self.match(SnowflakeParser.EQ)
                    self.state = 4741
                    self.string()


                self.state = 4747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==644:
                    self.state = 4744
                    self.match(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL)
                    self.state = 4745
                    self.match(SnowflakeParser.EQ)
                    self.state = 4746
                    self.string()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4749
                self.match(SnowflakeParser.ALTER)
                self.state = 4751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4750
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4753
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
                if la_ == 1:
                    self.state = 4754
                    self.if_exists()


                self.state = 4757
                self.id_()
                self.state = 4758
                self.match(SnowflakeParser.UNSET)
                self.state = 4759
                self.match(SnowflakeParser.ENABLED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4761
                self.match(SnowflakeParser.ALTER)
                self.state = 4763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4762
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4765
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4766
                self.id_()
                self.state = 4767
                self.set_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4769
                self.match(SnowflakeParser.ALTER)
                self.state = 4771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4770
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4773
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4774
                self.id_()
                self.state = 4775
                self.unset_tags()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_security_integration_scimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def NETWORK_POLICY(self):
            return self.getToken(SnowflakeParser.NETWORK_POLICY, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def SYNC_PASSWORD(self):
            return self.getToken(SnowflakeParser.SYNC_PASSWORD, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def security_integration_scim_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Security_integration_scim_propertyContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Security_integration_scim_propertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_security_integration_scim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_security_integration_scim" ):
                listener.enterAlter_security_integration_scim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_security_integration_scim" ):
                listener.exitAlter_security_integration_scim(self)




    def alter_security_integration_scim(self):

        localctx = SnowflakeParser.Alter_security_integration_scimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_alter_security_integration_scim)
        self._la = 0 # Token type
        try:
            self.state = 4836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4779
                self.match(SnowflakeParser.ALTER)
                self.state = 4781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4780
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4783
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                if la_ == 1:
                    self.state = 4784
                    self.if_exists()


                self.state = 4787
                self.id_()
                self.state = 4788
                self.match(SnowflakeParser.SET)
                self.state = 4792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==439:
                    self.state = 4789
                    self.match(SnowflakeParser.NETWORK_POLICY)
                    self.state = 4790
                    self.match(SnowflakeParser.EQ)
                    self.state = 4791
                    self.string()


                self.state = 4797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==744:
                    self.state = 4794
                    self.match(SnowflakeParser.SYNC_PASSWORD)
                    self.state = 4795
                    self.match(SnowflakeParser.EQ)
                    self.state = 4796
                    self.true_false()


                self.state = 4800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 4799
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4802
                self.match(SnowflakeParser.ALTER)
                self.state = 4804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4803
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4806
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                if la_ == 1:
                    self.state = 4807
                    self.if_exists()


                self.state = 4810
                self.id_()
                self.state = 4811
                self.match(SnowflakeParser.UNSET)
                self.state = 4812
                self.security_integration_scim_property()
                self.state = 4817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 4813
                    self.match(SnowflakeParser.COMMA)
                    self.state = 4814
                    self.security_integration_scim_property()
                    self.state = 4819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4820
                self.match(SnowflakeParser.ALTER)
                self.state = 4822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4821
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4824
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4825
                self.id_()
                self.state = 4826
                self.set_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4828
                self.match(SnowflakeParser.ALTER)
                self.state = 4830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==666:
                    self.state = 4829
                    self.match(SnowflakeParser.SECURITY)


                self.state = 4832
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 4833
                self.id_()
                self.state = 4834
                self.unset_tags()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Security_integration_scim_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NETWORK_POLICY(self):
            return self.getToken(SnowflakeParser.NETWORK_POLICY, 0)

        def SYNC_PASSWORD(self):
            return self.getToken(SnowflakeParser.SYNC_PASSWORD, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_security_integration_scim_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_integration_scim_property" ):
                listener.enterSecurity_integration_scim_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_integration_scim_property" ):
                listener.exitSecurity_integration_scim_property(self)




    def security_integration_scim_property(self):

        localctx = SnowflakeParser.Security_integration_scim_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_security_integration_scim_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4838
            _la = self._input.LA(1)
            if not(_la==138 or _la==439 or _la==744):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_sessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def session_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_paramsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def param_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Param_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Param_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_session

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_session" ):
                listener.enterAlter_session(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_session" ):
                listener.exitAlter_session(self)




    def alter_session(self):

        localctx = SnowflakeParser.Alter_sessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_alter_session)
        self._la = 0 # Token type
        try:
            self.state = 4855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4840
                self.match(SnowflakeParser.ALTER)
                self.state = 4841
                self.match(SnowflakeParser.SESSION)
                self.state = 4842
                self.match(SnowflakeParser.SET)
                self.state = 4843
                self.session_params()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4844
                self.match(SnowflakeParser.ALTER)
                self.state = 4845
                self.match(SnowflakeParser.SESSION)
                self.state = 4846
                self.match(SnowflakeParser.UNSET)
                self.state = 4847
                self.param_name()
                self.state = 4852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 4848
                    self.match(SnowflakeParser.COMMA)
                    self.state = 4849
                    self.param_name()
                    self.state = 4854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_session_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def session_policy_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Session_policy_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Session_policy_paramsContext,i)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def session_policy_param_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_policy_param_nameContext,0)


        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_session_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_session_policy" ):
                listener.enterAlter_session_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_session_policy" ):
                listener.exitAlter_session_policy(self)




    def alter_session_policy(self):

        localctx = SnowflakeParser.Alter_session_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_alter_session_policy)
        self._la = 0 # Token type
        try:
            self.state = 4905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4857
                self.match(SnowflakeParser.ALTER)
                self.state = 4858
                self.match(SnowflakeParser.SESSION)
                self.state = 4859
                self.match(SnowflakeParser.POLICY)
                self.state = 4861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
                if la_ == 1:
                    self.state = 4860
                    self.if_exists()


                self.state = 4863
                self.object_name()
                self.state = 4864
                self.match(SnowflakeParser.SET)
                self.state = 4868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==138 or _la==673 or _la==675:
                    self.state = 4865
                    self.session_policy_params()
                    self.state = 4870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4871
                self.match(SnowflakeParser.ALTER)
                self.state = 4872
                self.match(SnowflakeParser.SESSION)
                self.state = 4873
                self.match(SnowflakeParser.POLICY)
                self.state = 4875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                if la_ == 1:
                    self.state = 4874
                    self.if_exists()


                self.state = 4877
                self.object_name()
                self.state = 4878
                self.match(SnowflakeParser.UNSET)
                self.state = 4881
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [673, 675]:
                    self.state = 4879
                    self.session_policy_param_name()
                    pass
                elif token in [138]:
                    self.state = 4880
                    self.match(SnowflakeParser.COMMENT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4883
                self.match(SnowflakeParser.ALTER)
                self.state = 4884
                self.match(SnowflakeParser.SESSION)
                self.state = 4885
                self.match(SnowflakeParser.POLICY)
                self.state = 4887
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 4886
                    self.if_exists()


                self.state = 4889
                self.object_name()
                self.state = 4890
                self.match(SnowflakeParser.RENAME)
                self.state = 4891
                self.match(SnowflakeParser.TO)
                self.state = 4892
                self.object_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4894
                self.match(SnowflakeParser.ALTER)
                self.state = 4895
                self.match(SnowflakeParser.SESSION)
                self.state = 4896
                self.match(SnowflakeParser.POLICY)
                self.state = 4898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
                if la_ == 1:
                    self.state = 4897
                    self.if_exists()


                self.state = 4900
                self.object_name()
                self.state = 4903
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [676]:
                    self.state = 4901
                    self.set_tags()
                    pass
                elif token in [809]:
                    self.state = 4902
                    self.unset_tags()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_password_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def password_policy_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Password_policy_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Password_policy_paramsContext,i)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def password_policy_param_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Password_policy_param_nameContext,0)


        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_password_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_password_policy" ):
                listener.enterAlter_password_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_password_policy" ):
                listener.exitAlter_password_policy(self)




    def alter_password_policy(self):

        localctx = SnowflakeParser.Alter_password_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_alter_password_policy)
        self._la = 0 # Token type
        try:
            self.state = 4955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,494,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4907
                self.match(SnowflakeParser.ALTER)
                self.state = 4908
                self.match(SnowflakeParser.PASSWORD)
                self.state = 4909
                self.match(SnowflakeParser.POLICY)
                self.state = 4911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                if la_ == 1:
                    self.state = 4910
                    self.if_exists()


                self.state = 4913
                self.object_name()
                self.state = 4914
                self.match(SnowflakeParser.SET)
                self.state = 4918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==138 or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & 2047) != 0):
                    self.state = 4915
                    self.password_policy_params()
                    self.state = 4920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4921
                self.match(SnowflakeParser.ALTER)
                self.state = 4922
                self.match(SnowflakeParser.PASSWORD)
                self.state = 4923
                self.match(SnowflakeParser.POLICY)
                self.state = 4925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
                if la_ == 1:
                    self.state = 4924
                    self.if_exists()


                self.state = 4927
                self.object_name()
                self.state = 4928
                self.match(SnowflakeParser.UNSET)
                self.state = 4931
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531]:
                    self.state = 4929
                    self.password_policy_param_name()
                    pass
                elif token in [138]:
                    self.state = 4930
                    self.match(SnowflakeParser.COMMENT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4933
                self.match(SnowflakeParser.ALTER)
                self.state = 4934
                self.match(SnowflakeParser.PASSWORD)
                self.state = 4935
                self.match(SnowflakeParser.POLICY)
                self.state = 4937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
                if la_ == 1:
                    self.state = 4936
                    self.if_exists()


                self.state = 4939
                self.object_name()
                self.state = 4940
                self.match(SnowflakeParser.RENAME)
                self.state = 4941
                self.match(SnowflakeParser.TO)
                self.state = 4942
                self.object_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4944
                self.match(SnowflakeParser.ALTER)
                self.state = 4945
                self.match(SnowflakeParser.PASSWORD)
                self.state = 4946
                self.match(SnowflakeParser.POLICY)
                self.state = 4948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                if la_ == 1:
                    self.state = 4947
                    self.if_exists()


                self.state = 4950
                self.object_name()
                self.state = 4953
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [676]:
                    self.state = 4951
                    self.set_tags()
                    pass
                elif token in [809]:
                    self.state = 4952
                    self.unset_tags()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ACCOUNTS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def REMOVE(self):
            return self.getToken(SnowflakeParser.REMOVE, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def SHARE_RESTRICTIONS(self):
            return self.getToken(SnowflakeParser.SHARE_RESTRICTIONS, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_share" ):
                listener.enterAlter_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_share" ):
                listener.exitAlter_share(self)




    def alter_share(self):

        localctx = SnowflakeParser.Alter_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_alter_share)
        self._la = 0 # Token type
        try:
            self.state = 5045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4957
                self.match(SnowflakeParser.ALTER)
                self.state = 4958
                self.match(SnowflakeParser.SHARE)
                self.state = 4960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
                if la_ == 1:
                    self.state = 4959
                    self.if_exists()


                self.state = 4962
                self.id_()
                self.state = 4963
                _la = self._input.LA(1)
                if not(_la==10 or _la==588):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4964
                self.match(SnowflakeParser.ACCOUNTS)
                self.state = 4965
                self.match(SnowflakeParser.EQ)
                self.state = 4966
                self.id_()
                self.state = 4971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 4967
                    self.match(SnowflakeParser.COMMA)
                    self.state = 4968
                    self.id_()
                    self.state = 4973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==680:
                    self.state = 4974
                    self.match(SnowflakeParser.SHARE_RESTRICTIONS)
                    self.state = 4975
                    self.match(SnowflakeParser.EQ)
                    self.state = 4976
                    self.true_false()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4979
                self.match(SnowflakeParser.ALTER)
                self.state = 4980
                self.match(SnowflakeParser.SHARE)
                self.state = 4982
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
                if la_ == 1:
                    self.state = 4981
                    self.if_exists()


                self.state = 4984
                self.id_()
                self.state = 4985
                self.match(SnowflakeParser.ADD)
                self.state = 4986
                self.match(SnowflakeParser.ACCOUNTS)
                self.state = 4987
                self.match(SnowflakeParser.EQ)
                self.state = 4988
                self.id_()
                self.state = 4993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 4989
                    self.match(SnowflakeParser.COMMA)
                    self.state = 4990
                    self.id_()
                    self.state = 4995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==680:
                    self.state = 4996
                    self.match(SnowflakeParser.SHARE_RESTRICTIONS)
                    self.state = 4997
                    self.match(SnowflakeParser.EQ)
                    self.state = 4998
                    self.true_false()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5001
                self.match(SnowflakeParser.ALTER)
                self.state = 5002
                self.match(SnowflakeParser.SHARE)
                self.state = 5004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
                if la_ == 1:
                    self.state = 5003
                    self.if_exists()


                self.state = 5006
                self.id_()
                self.state = 5007
                self.match(SnowflakeParser.SET)
                self.state = 5018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 5008
                    self.match(SnowflakeParser.ACCOUNTS)
                    self.state = 5009
                    self.match(SnowflakeParser.EQ)
                    self.state = 5010
                    self.id_()
                    self.state = 5015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 5011
                        self.match(SnowflakeParser.COMMA)
                        self.state = 5012
                        self.id_()
                        self.state = 5017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5020
                    self.comment_clause()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5023
                self.match(SnowflakeParser.ALTER)
                self.state = 5024
                self.match(SnowflakeParser.SHARE)
                self.state = 5026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
                if la_ == 1:
                    self.state = 5025
                    self.if_exists()


                self.state = 5028
                self.id_()
                self.state = 5029
                self.set_tags()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5031
                self.match(SnowflakeParser.ALTER)
                self.state = 5032
                self.match(SnowflakeParser.SHARE)
                self.state = 5033
                self.id_()
                self.state = 5034
                self.unset_tags()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5036
                self.match(SnowflakeParser.ALTER)
                self.state = 5037
                self.match(SnowflakeParser.SHARE)
                self.state = 5039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
                if la_ == 1:
                    self.state = 5038
                    self.if_exists()


                self.state = 5041
                self.id_()
                self.state = 5042
                self.match(SnowflakeParser.UNSET)
                self.state = 5043
                self.match(SnowflakeParser.COMMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_storage_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def STORAGE(self):
            return self.getToken(SnowflakeParser.STORAGE, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def cloud_provider_params2(self):
            return self.getTypedRuleContext(SnowflakeParser.Cloud_provider_params2Context,0)


        def enabled_true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.Enabled_true_falseContext,0)


        def STORAGE_ALLOWED_LOCATIONS(self):
            return self.getToken(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def STORAGE_BLOCKED_LOCATIONS(self):
            return self.getToken(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_storage_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_storage_integration" ):
                listener.enterAlter_storage_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_storage_integration" ):
                listener.exitAlter_storage_integration(self)




    def alter_storage_integration(self):

        localctx = SnowflakeParser.Alter_storage_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_alter_storage_integration)
        self._la = 0 # Token type
        try:
            self.state = 5113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5047
                self.match(SnowflakeParser.ALTER)
                self.state = 5049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==721:
                    self.state = 5048
                    self.match(SnowflakeParser.STORAGE)


                self.state = 5051
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 5053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,509,self._ctx)
                if la_ == 1:
                    self.state = 5052
                    self.if_exists()


                self.state = 5055
                self.id_()
                self.state = 5056
                self.match(SnowflakeParser.SET)
                self.state = 5058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81 or _la==724:
                    self.state = 5057
                    self.cloud_provider_params2()


                self.state = 5061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 5060
                    self.enabled_true_false()


                self.state = 5069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==722:
                    self.state = 5063
                    self.match(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS)
                    self.state = 5064
                    self.match(SnowflakeParser.EQ)
                    self.state = 5065
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5066
                    self.string_list()
                    self.state = 5067
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 5077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==725:
                    self.state = 5071
                    self.match(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS)
                    self.state = 5072
                    self.match(SnowflakeParser.EQ)
                    self.state = 5073
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5074
                    self.string_list()
                    self.state = 5075
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 5080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5079
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5082
                self.match(SnowflakeParser.ALTER)
                self.state = 5084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==721:
                    self.state = 5083
                    self.match(SnowflakeParser.STORAGE)


                self.state = 5086
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 5088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
                if la_ == 1:
                    self.state = 5087
                    self.if_exists()


                self.state = 5090
                self.id_()
                self.state = 5091
                self.set_tags()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5093
                self.match(SnowflakeParser.ALTER)
                self.state = 5095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==721:
                    self.state = 5094
                    self.match(SnowflakeParser.STORAGE)


                self.state = 5097
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 5098
                self.id_()
                self.state = 5099
                self.unset_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5101
                self.match(SnowflakeParser.ALTER)
                self.state = 5103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==721:
                    self.state = 5102
                    self.match(SnowflakeParser.STORAGE)


                self.state = 5105
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 5107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
                if la_ == 1:
                    self.state = 5106
                    self.if_exists()


                self.state = 5109
                self.id_()
                self.state = 5110
                self.match(SnowflakeParser.UNSET)
                self.state = 5111
                _la = self._input.LA(1)
                if not(_la==138 or _la==217 or _la==725):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_streamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def tag_decl_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_decl_listContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_stream

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_stream" ):
                listener.enterAlter_stream(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_stream" ):
                listener.exitAlter_stream(self)




    def alter_stream(self):

        localctx = SnowflakeParser.Alter_streamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_alter_stream)
        self._la = 0 # Token type
        try:
            self.state = 5150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5115
                self.match(SnowflakeParser.ALTER)
                self.state = 5116
                self.match(SnowflakeParser.STREAM)
                self.state = 5118
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 5117
                    self.if_exists()


                self.state = 5120
                self.id_()
                self.state = 5121
                self.match(SnowflakeParser.SET)
                self.state = 5123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754:
                    self.state = 5122
                    self.tag_decl_list()


                self.state = 5126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5125
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5128
                self.match(SnowflakeParser.ALTER)
                self.state = 5129
                self.match(SnowflakeParser.STREAM)
                self.state = 5131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,524,self._ctx)
                if la_ == 1:
                    self.state = 5130
                    self.if_exists()


                self.state = 5133
                self.id_()
                self.state = 5134
                self.set_tags()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5136
                self.match(SnowflakeParser.ALTER)
                self.state = 5137
                self.match(SnowflakeParser.STREAM)
                self.state = 5138
                self.id_()
                self.state = 5139
                self.unset_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5141
                self.match(SnowflakeParser.ALTER)
                self.state = 5142
                self.match(SnowflakeParser.STREAM)
                self.state = 5144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,525,self._ctx)
                if la_ == 1:
                    self.state = 5143
                    self.if_exists()


                self.state = 5146
                self.id_()
                self.state = 5147
                self.match(SnowflakeParser.UNSET)
                self.state = 5148
                self.match(SnowflakeParser.COMMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SWAP(self):
            return self.getToken(SnowflakeParser.SWAP, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def clustering_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Clustering_actionContext,0)


        def table_column_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_column_actionContext,0)


        def constraint_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Constraint_actionContext,0)


        def ext_table_column_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Ext_table_column_actionContext,0)


        def search_optimization_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_optimization_actionContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def stage_file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_file_formatContext,0)


        def STAGE_COPY_OPTIONS(self):
            return self.getToken(SnowflakeParser.STAGE_COPY_OPTIONS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def copy_options(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def CHANGE_TRACKING(self):
            return self.getToken(SnowflakeParser.CHANGE_TRACKING, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def default_ddl_collation(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_ddl_collationContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def rls_operations(self):
            return self.getTypedRuleContext(SnowflakeParser.Rls_operationsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)




    def alter_table(self):

        localctx = SnowflakeParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.state = 5277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5152
                self.match(SnowflakeParser.ALTER)
                self.state = 5153
                self.match(SnowflakeParser.TABLE)
                self.state = 5155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
                if la_ == 1:
                    self.state = 5154
                    self.if_exists()


                self.state = 5157
                self.object_name()
                self.state = 5158
                self.match(SnowflakeParser.RENAME)
                self.state = 5159
                self.match(SnowflakeParser.TO)
                self.state = 5160
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5162
                self.match(SnowflakeParser.ALTER)
                self.state = 5163
                self.match(SnowflakeParser.TABLE)
                self.state = 5165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                if la_ == 1:
                    self.state = 5164
                    self.if_exists()


                self.state = 5167
                self.object_name()
                self.state = 5168
                self.match(SnowflakeParser.SWAP)
                self.state = 5169
                self.match(SnowflakeParser.WITH)
                self.state = 5170
                self.object_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5172
                self.match(SnowflakeParser.ALTER)
                self.state = 5173
                self.match(SnowflakeParser.TABLE)
                self.state = 5175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,529,self._ctx)
                if la_ == 1:
                    self.state = 5174
                    self.if_exists()


                self.state = 5177
                self.object_name()
                self.state = 5181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,530,self._ctx)
                if la_ == 1:
                    self.state = 5178
                    self.clustering_action()
                    pass

                elif la_ == 2:
                    self.state = 5179
                    self.table_column_action()
                    pass

                elif la_ == 3:
                    self.state = 5180
                    self.constraint_action()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5183
                self.match(SnowflakeParser.ALTER)
                self.state = 5184
                self.match(SnowflakeParser.TABLE)
                self.state = 5186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                if la_ == 1:
                    self.state = 5185
                    self.if_exists()


                self.state = 5188
                self.object_name()
                self.state = 5189
                self.ext_table_column_action()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5191
                self.match(SnowflakeParser.ALTER)
                self.state = 5192
                self.match(SnowflakeParser.TABLE)
                self.state = 5194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
                if la_ == 1:
                    self.state = 5193
                    self.if_exists()


                self.state = 5196
                self.object_name()
                self.state = 5197
                self.search_optimization_action()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5199
                self.match(SnowflakeParser.ALTER)
                self.state = 5200
                self.match(SnowflakeParser.TABLE)
                self.state = 5202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
                if la_ == 1:
                    self.state = 5201
                    self.if_exists()


                self.state = 5204
                self.object_name()
                self.state = 5205
                self.match(SnowflakeParser.SET)
                self.state = 5207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==709 or _la==803:
                    self.state = 5206
                    self.stage_file_format()


                self.state = 5215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==708:
                    self.state = 5209
                    self.match(SnowflakeParser.STAGE_COPY_OPTIONS)
                    self.state = 5210
                    self.match(SnowflakeParser.EQ)
                    self.state = 5211
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5212
                    self.copy_options()
                    self.state = 5213
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 5220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 5217
                    self.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS)
                    self.state = 5218
                    self.match(SnowflakeParser.EQ)
                    self.state = 5219
                    self.num()


                self.state = 5225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==413:
                    self.state = 5222
                    self.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS)
                    self.state = 5223
                    self.match(SnowflakeParser.EQ)
                    self.state = 5224
                    self.num()


                self.state = 5230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==111:
                    self.state = 5227
                    self.match(SnowflakeParser.CHANGE_TRACKING)
                    self.state = 5228
                    self.match(SnowflakeParser.EQ)
                    self.state = 5229
                    self.true_false()


                self.state = 5233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==183:
                    self.state = 5232
                    self.default_ddl_collation()


                self.state = 5236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5235
                    self.comment_clause()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5238
                self.match(SnowflakeParser.ALTER)
                self.state = 5239
                self.match(SnowflakeParser.TABLE)
                self.state = 5241
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
                if la_ == 1:
                    self.state = 5240
                    self.if_exists()


                self.state = 5243
                self.object_name()
                self.state = 5244
                self.set_tags()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5246
                self.match(SnowflakeParser.ALTER)
                self.state = 5247
                self.match(SnowflakeParser.TABLE)
                self.state = 5249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
                if la_ == 1:
                    self.state = 5248
                    self.if_exists()


                self.state = 5251
                self.object_name()
                self.state = 5252
                self.unset_tags()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5254
                self.match(SnowflakeParser.ALTER)
                self.state = 5255
                self.match(SnowflakeParser.TABLE)
                self.state = 5257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
                if la_ == 1:
                    self.state = 5256
                    self.if_exists()


                self.state = 5259
                self.object_name()
                self.state = 5260
                self.match(SnowflakeParser.UNSET)
                self.state = 5267
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 5261
                    self.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS)
                    pass
                elif token in [413]:
                    self.state = 5262
                    self.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS)
                    pass
                elif token in [111]:
                    self.state = 5263
                    self.match(SnowflakeParser.CHANGE_TRACKING)
                    pass
                elif token in [183]:
                    self.state = 5264
                    self.match(SnowflakeParser.DEFAULT_DDL_COLLATION_)
                    pass
                elif token in [138]:
                    self.state = 5265
                    self.match(SnowflakeParser.COMMENT)
                    pass
                elif token in [-1, 938]:
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5269
                self.match(SnowflakeParser.ALTER)
                self.state = 5270
                self.match(SnowflakeParser.TABLE)
                self.state = 5272
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
                if la_ == 1:
                    self.state = 5271
                    self.if_exists()


                self.state = 5274
                self.object_name()
                self.state = 5275
                self.rls_operations()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rls_operationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ROW)
            else:
                return self.getToken(SnowflakeParser.ROW, i)

        def ACCESS(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ACCESS)
            else:
                return self.getToken(SnowflakeParser.ACCESS, i)

        def POLICY(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.POLICY)
            else:
                return self.getToken(SnowflakeParser.POLICY, i)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def column_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,0)


        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_rls_operations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRls_operations" ):
                listener.enterRls_operations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRls_operations" ):
                listener.exitRls_operations(self)




    def rls_operations(self):

        localctx = SnowflakeParser.Rls_operationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_rls_operations)
        self._la = 0 # Token type
        try:
            self.state = 5308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5279
                self.match(SnowflakeParser.ADD)
                self.state = 5280
                self.match(SnowflakeParser.ROW)
                self.state = 5281
                self.match(SnowflakeParser.ACCESS)
                self.state = 5282
                self.match(SnowflakeParser.POLICY)
                self.state = 5283
                self.object_name()
                self.state = 5284
                self.match(SnowflakeParser.ON)
                self.state = 5285
                self.column_list_in_parentheses()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5287
                self.match(SnowflakeParser.DROP)
                self.state = 5288
                self.match(SnowflakeParser.ROW)
                self.state = 5289
                self.match(SnowflakeParser.ACCESS)
                self.state = 5290
                self.match(SnowflakeParser.POLICY)
                self.state = 5291
                self.object_name()
                self.state = 5301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==937:
                    self.state = 5292
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5293
                    self.match(SnowflakeParser.ADD)
                    self.state = 5294
                    self.match(SnowflakeParser.ROW)
                    self.state = 5295
                    self.match(SnowflakeParser.ACCESS)
                    self.state = 5296
                    self.match(SnowflakeParser.POLICY)
                    self.state = 5297
                    self.object_name()
                    self.state = 5298
                    self.match(SnowflakeParser.ON)
                    self.state = 5299
                    self.column_list_in_parentheses()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5303
                self.match(SnowflakeParser.DROP)
                self.state = 5304
                self.match(SnowflakeParser.ALL)
                self.state = 5305
                self.match(SnowflakeParser.ROW)
                self.state = 5306
                self.match(SnowflakeParser.ACCESS)
                self.state = 5307
                self.match(SnowflakeParser.POLICIES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clustering_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(SnowflakeParser.CLUSTER, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def RECLUSTER(self):
            return self.getToken(SnowflakeParser.RECLUSTER, 0)

        def MAX_SIZE(self):
            return self.getToken(SnowflakeParser.MAX_SIZE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def WHERE(self):
            return self.getToken(SnowflakeParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def resume_suspend(self):
            return self.getTypedRuleContext(SnowflakeParser.Resume_suspendContext,0)


        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def CLUSTERING(self):
            return self.getToken(SnowflakeParser.CLUSTERING, 0)

        def KEY(self):
            return self.getToken(SnowflakeParser.KEY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_clustering_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustering_action" ):
                listener.enterClustering_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustering_action" ):
                listener.exitClustering_action(self)




    def clustering_action(self):

        localctx = SnowflakeParser.Clustering_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_clustering_action)
        self._la = 0 # Token type
        try:
            self.state = 5332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5310
                self.match(SnowflakeParser.CLUSTER)
                self.state = 5311
                self.match(SnowflakeParser.BY)
                self.state = 5312
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 5313
                self.expr_list()
                self.state = 5314
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            elif token in [576]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5316
                self.match(SnowflakeParser.RECLUSTER)
                self.state = 5320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==414:
                    self.state = 5317
                    self.match(SnowflakeParser.MAX_SIZE)
                    self.state = 5318
                    self.match(SnowflakeParser.EQ)
                    self.state = 5319
                    self.num()


                self.state = 5324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==846:
                    self.state = 5322
                    self.match(SnowflakeParser.WHERE)
                    self.state = 5323
                    self.expr(0)


                pass
            elif token in [610, 738]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5326
                self.resume_suspend()
                self.state = 5327
                self.match(SnowflakeParser.RECLUSTER)
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5329
                self.match(SnowflakeParser.DROP)
                self.state = 5330
                self.match(SnowflakeParser.CLUSTERING)
                self.state = 5331
                self.match(SnowflakeParser.KEY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_column_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def full_col_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Full_col_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Full_col_declContext,i)


        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def alter_modify(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_modifyContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def alter_column_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Alter_column_clauseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Alter_column_clauseContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def FORCE(self):
            return self.getToken(SnowflakeParser.FORCE, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def column_set_tags(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_set_tagsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_set_tagsContext,i)


        def column_unset_tags(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_unset_tagsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_unset_tagsContext,i)


        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_table_column_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_column_action" ):
                listener.enterTable_column_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_column_action" ):
                listener.exitTable_column_action(self)




    def table_column_action(self):

        localctx = SnowflakeParser.Table_column_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_table_column_action)
        self._la = 0 # Token type
        try:
            self.state = 5429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5334
                self.match(SnowflakeParser.ADD)
                self.state = 5336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 5335
                    self.match(SnowflakeParser.COLUMN)


                self.state = 5339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,553,self._ctx)
                if la_ == 1:
                    self.state = 5338
                    self.if_not_exists()


                self.state = 5341
                self.full_col_decl()
                self.state = 5346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 5342
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5343
                    self.full_col_decl()
                    self.state = 5348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5349
                self.match(SnowflakeParser.RENAME)
                self.state = 5350
                self.match(SnowflakeParser.COLUMN)
                self.state = 5351
                self.column_name()
                self.state = 5352
                self.match(SnowflakeParser.TO)
                self.state = 5353
                self.column_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5355
                self.alter_modify()
                self.state = 5375
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [931]:
                    self.state = 5356
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5357
                    self.alter_column_clause()
                    self.state = 5362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 5358
                        self.match(SnowflakeParser.COMMA)
                        self.state = 5359
                        self.alter_column_clause()
                        self.state = 5364
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 5365
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                elif token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 62, 108, 109, 113, 114, 115, 117, 131, 134, 135, 136, 138, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 190, 194, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 381, 382, 384, 385, 390, 396, 397, 412, 416, 421, 427, 436, 438, 446, 456, 460, 461, 462, 477, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 653, 655, 657, 667, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 904, 905]:
                    self.state = 5367
                    self.alter_column_clause()
                    self.state = 5372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 5368
                        self.match(SnowflakeParser.COMMA)
                        self.state = 5369
                        self.alter_column_clause()
                        self.state = 5374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5377
                self.alter_modify()
                self.state = 5378
                self.match(SnowflakeParser.COLUMN)
                self.state = 5379
                self.column_name()
                self.state = 5380
                self.match(SnowflakeParser.SET)
                self.state = 5381
                self.match(SnowflakeParser.MASKING)
                self.state = 5382
                self.match(SnowflakeParser.POLICY)
                self.state = 5383
                self.id_()
                self.state = 5391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==825:
                    self.state = 5384
                    self.match(SnowflakeParser.USING)
                    self.state = 5385
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5386
                    self.column_name()
                    self.state = 5387
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5388
                    self.column_list()
                    self.state = 5389
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 5394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 5393
                    self.match(SnowflakeParser.FORCE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5396
                self.alter_modify()
                self.state = 5397
                self.match(SnowflakeParser.COLUMN)
                self.state = 5398
                self.column_name()
                self.state = 5399
                self.match(SnowflakeParser.UNSET)
                self.state = 5400
                self.match(SnowflakeParser.MASKING)
                self.state = 5401
                self.match(SnowflakeParser.POLICY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5403
                self.alter_modify()
                self.state = 5404
                self.column_set_tags()
                self.state = 5409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 5405
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5406
                    self.column_set_tags()
                    self.state = 5411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5412
                self.alter_modify()
                self.state = 5413
                self.column_unset_tags()
                self.state = 5418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 5414
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5415
                    self.column_unset_tags()
                    self.state = 5420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5421
                self.match(SnowflakeParser.DROP)
                self.state = 5423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 5422
                    self.match(SnowflakeParser.COLUMN)


                self.state = 5426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
                if la_ == 1:
                    self.state = 5425
                    self.if_exists()


                self.state = 5428
                self.column_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def NEXTVAL(self):
            return self.getToken(SnowflakeParser.NEXTVAL, 0)

        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def DATA(self):
            return self.getToken(SnowflakeParser.DATA, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_column_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_clause" ):
                listener.enterAlter_column_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_clause" ):
                listener.exitAlter_column_clause(self)




    def alter_column_clause(self):

        localctx = SnowflakeParser.Alter_column_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_alter_column_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 5431
                self.match(SnowflakeParser.COLUMN)


            self.state = 5434
            self.column_name()
            self.state = 5465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.state = 5435
                self.match(SnowflakeParser.DROP)
                self.state = 5436
                self.match(SnowflakeParser.DEFAULT)
                pass

            elif la_ == 2:
                self.state = 5437
                self.match(SnowflakeParser.SET)
                self.state = 5438
                self.match(SnowflakeParser.DEFAULT)
                self.state = 5439
                self.object_name()
                self.state = 5440
                self.match(SnowflakeParser.DOT)
                self.state = 5441
                self.match(SnowflakeParser.NEXTVAL)
                pass

            elif la_ == 3:
                self.state = 5451
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [448, 676]:
                    self.state = 5444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==676:
                        self.state = 5443
                        self.match(SnowflakeParser.SET)


                    self.state = 5446
                    self.match(SnowflakeParser.NOT)
                    self.state = 5447
                    self.match(SnowflakeParser.NULL_)
                    pass
                elif token in [208]:
                    self.state = 5448
                    self.match(SnowflakeParser.DROP)
                    self.state = 5449
                    self.match(SnowflakeParser.NOT)
                    self.state = 5450
                    self.match(SnowflakeParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 5458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==676 or _la==803:
                    self.state = 5455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==676:
                        self.state = 5453
                        self.match(SnowflakeParser.SET)
                        self.state = 5454
                        self.match(SnowflakeParser.DATA)


                    self.state = 5457
                    self.match(SnowflakeParser.TYPE)


                self.state = 5460
                self.data_type()
                pass

            elif la_ == 5:
                self.state = 5461
                self.match(SnowflakeParser.COMMENT)
                self.state = 5462
                self.string()
                pass

            elif la_ == 6:
                self.state = 5463
                self.match(SnowflakeParser.UNSET)
                self.state = 5464
                self.match(SnowflakeParser.COMMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def foreign_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Foreign_keyContext,0)


        def REFERENCES(self):
            return self.getToken(SnowflakeParser.REFERENCES, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def constraint_properties(self):
            return self.getTypedRuleContext(SnowflakeParser.Constraint_propertiesContext,0)


        def CONSTRAINT(self):
            return self.getToken(SnowflakeParser.CONSTRAINT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def UNIQUE(self):
            return self.getToken(SnowflakeParser.UNIQUE, 0)

        def primary_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Primary_keyContext,0)


        def common_constraint_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Common_constraint_propertiesContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Common_constraint_propertiesContext,i)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_inline_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_constraint" ):
                listener.enterInline_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_constraint" ):
                listener.exitInline_constraint(self)




    def inline_constraint(self):

        localctx = SnowflakeParser.Inline_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_inline_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 5467
                self.match(SnowflakeParser.CONSTRAINT)
                self.state = 5468
                self.id_()


            self.state = 5492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [551, 806]:
                self.state = 5473
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [806]:
                    self.state = 5471
                    self.match(SnowflakeParser.UNIQUE)
                    pass
                elif token in [551]:
                    self.state = 5472
                    self.primary_key()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,573,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5475
                        self.common_constraint_properties() 
                    self.state = 5480
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,573,self._ctx)

                pass
            elif token in [280]:
                self.state = 5481
                self.foreign_key()
                self.state = 5482
                self.match(SnowflakeParser.REFERENCES)
                self.state = 5483
                self.object_name()
                self.state = 5488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==931:
                    self.state = 5484
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5485
                    self.column_name()
                    self.state = 5486
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 5490
                self.constraint_properties()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enforced_not_enforcedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENFORCED(self):
            return self.getToken(SnowflakeParser.ENFORCED, 0)

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_enforced_not_enforced

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnforced_not_enforced" ):
                listener.enterEnforced_not_enforced(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnforced_not_enforced" ):
                listener.exitEnforced_not_enforced(self)




    def enforced_not_enforced(self):

        localctx = SnowflakeParser.Enforced_not_enforcedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_enforced_not_enforced)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448:
                self.state = 5494
                self.match(SnowflakeParser.NOT)


            self.state = 5497
            self.match(SnowflakeParser.ENFORCED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deferrable_not_deferrableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFERRABLE(self):
            return self.getToken(SnowflakeParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_deferrable_not_deferrable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferrable_not_deferrable" ):
                listener.enterDeferrable_not_deferrable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferrable_not_deferrable" ):
                listener.exitDeferrable_not_deferrable(self)




    def deferrable_not_deferrable(self):

        localctx = SnowflakeParser.Deferrable_not_deferrableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_deferrable_not_deferrable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448:
                self.state = 5499
                self.match(SnowflakeParser.NOT)


            self.state = 5502
            self.match(SnowflakeParser.DEFERRABLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initially_deferred_or_immediateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INITIALLY(self):
            return self.getToken(SnowflakeParser.INITIALLY, 0)

        def DEFERRED(self):
            return self.getToken(SnowflakeParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SnowflakeParser.IMMEDIATE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_initially_deferred_or_immediate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitially_deferred_or_immediate" ):
                listener.enterInitially_deferred_or_immediate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitially_deferred_or_immediate" ):
                listener.exitInitially_deferred_or_immediate(self)




    def initially_deferred_or_immediate(self):

        localctx = SnowflakeParser.Initially_deferred_or_immediateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_initially_deferred_or_immediate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5504
            self.match(SnowflakeParser.INITIALLY)
            self.state = 5505
            _la = self._input.LA(1)
            if not(_la==188 or _la==333):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_constraint_propertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enforced_not_enforced(self):
            return self.getTypedRuleContext(SnowflakeParser.Enforced_not_enforcedContext,0)


        def VALIDATE(self):
            return self.getToken(SnowflakeParser.VALIDATE, 0)

        def NOVALIDATE(self):
            return self.getToken(SnowflakeParser.NOVALIDATE, 0)

        def deferrable_not_deferrable(self):
            return self.getTypedRuleContext(SnowflakeParser.Deferrable_not_deferrableContext,0)


        def initially_deferred_or_immediate(self):
            return self.getTypedRuleContext(SnowflakeParser.Initially_deferred_or_immediateContext,0)


        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(SnowflakeParser.DISABLE, 0)

        def RELY(self):
            return self.getToken(SnowflakeParser.RELY, 0)

        def NORELY(self):
            return self.getToken(SnowflakeParser.NORELY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_common_constraint_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_constraint_properties" ):
                listener.enterCommon_constraint_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_constraint_properties" ):
                listener.exitCommon_constraint_properties(self)




    def common_constraint_properties(self):

        localctx = SnowflakeParser.Common_constraint_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_common_constraint_properties)
        self._la = 0 # Token type
        try:
            self.state = 5519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5507
                self.enforced_not_enforced()
                self.state = 5509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==454 or _la==827:
                    self.state = 5508
                    _la = self._input.LA(1)
                    if not(_la==454 or _la==827):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5511
                self.deferrable_not_deferrable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5512
                self.initially_deferred_or_immediate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5513
                _la = self._input.LA(1)
                if not(_la==200 or _la==216):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==454 or _la==827:
                    self.state = 5514
                    _la = self._input.LA(1)
                    if not(_la==454 or _la==827):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5517
                self.match(SnowflakeParser.RELY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5518
                self.match(SnowflakeParser.NORELY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def UPDATE(self):
            return self.getToken(SnowflakeParser.UPDATE, 0)

        def on_action(self):
            return self.getTypedRuleContext(SnowflakeParser.On_actionContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_on_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_update" ):
                listener.enterOn_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_update" ):
                listener.exitOn_update(self)




    def on_update(self):

        localctx = SnowflakeParser.On_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_on_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5521
            self.match(SnowflakeParser.ON)
            self.state = 5522
            self.match(SnowflakeParser.UPDATE)
            self.state = 5523
            self.on_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_deleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def DELETE(self):
            return self.getToken(SnowflakeParser.DELETE, 0)

        def on_action(self):
            return self.getTypedRuleContext(SnowflakeParser.On_actionContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_on_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_delete" ):
                listener.enterOn_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_delete" ):
                listener.exitOn_delete(self)




    def on_delete(self):

        localctx = SnowflakeParser.On_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_on_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5525
            self.match(SnowflakeParser.ON)
            self.state = 5526
            self.match(SnowflakeParser.DELETE)
            self.state = 5527
            self.on_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.match_type = None # Token

        def MATCH(self):
            return self.getToken(SnowflakeParser.MATCH, 0)

        def FULL(self):
            return self.getToken(SnowflakeParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(SnowflakeParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(SnowflakeParser.SIMPLE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_foreign_key_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_match" ):
                listener.enterForeign_key_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_match" ):
                listener.exitForeign_key_match(self)




    def foreign_key_match(self):

        localctx = SnowflakeParser.Foreign_key_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_foreign_key_match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5529
            self.match(SnowflakeParser.MATCH)
            self.state = 5530
            localctx.match_type = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==286 or _la==517 or _la==683):
                localctx.match_type = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class On_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASCADE(self):
            return self.getToken(SnowflakeParser.CASCADE, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def RESTRICT(self):
            return self.getToken(SnowflakeParser.RESTRICT, 0)

        def NO(self):
            return self.getToken(SnowflakeParser.NO, 0)

        def ACTION(self):
            return self.getToken(SnowflakeParser.ACTION, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_on_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_action" ):
                listener.enterOn_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_action" ):
                listener.exitOn_action(self)




    def on_action(self):

        localctx = SnowflakeParser.On_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_on_action)
        self._la = 0 # Token type
        try:
            self.state = 5538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5532
                self.match(SnowflakeParser.CASCADE)
                pass
            elif token in [676]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5533
                self.match(SnowflakeParser.SET)
                self.state = 5534
                _la = self._input.LA(1)
                if not(_la==182 or _la==458):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [607]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5535
                self.match(SnowflakeParser.RESTRICT)
                pass
            elif token in [443]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5536
                self.match(SnowflakeParser.NO)
                self.state = 5537
                self.match(SnowflakeParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_propertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def common_constraint_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Common_constraint_propertiesContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Common_constraint_propertiesContext,i)


        def foreign_key_match(self):
            return self.getTypedRuleContext(SnowflakeParser.Foreign_key_matchContext,0)


        def on_update(self):
            return self.getTypedRuleContext(SnowflakeParser.On_updateContext,0)


        def on_delete(self):
            return self.getTypedRuleContext(SnowflakeParser.On_deleteContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_constraint_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_properties" ):
                listener.enterConstraint_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_properties" ):
                listener.exitConstraint_properties(self)




    def constraint_properties(self):

        localctx = SnowflakeParser.Constraint_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_constraint_properties)
        self._la = 0 # Token type
        try:
            self.state = 5560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,582,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5540
                        self.common_constraint_properties() 
                    self.state = 5545
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,582,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5546
                self.foreign_key_match()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==404:
                    self.state = 5547
                    self.foreign_key_match()


                self.state = 5558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,586,self._ctx)
                if la_ == 1:
                    self.state = 5550
                    self.on_update()
                    self.state = 5552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==488:
                        self.state = 5551
                        self.on_delete()


                    pass

                elif la_ == 2:
                    self.state = 5554
                    self.on_delete()
                    self.state = 5556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==488:
                        self.state = 5555
                        self.on_update()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ext_table_column_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_ext_table_column_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExt_table_column_action" ):
                listener.enterExt_table_column_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExt_table_column_action" ):
                listener.exitExt_table_column_action(self)




    def ext_table_column_action(self):

        localctx = SnowflakeParser.Ext_table_column_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_ext_table_column_action)
        self._la = 0 # Token type
        try:
            self.state = 5584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5562
                self.match(SnowflakeParser.ADD)
                self.state = 5564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 5563
                    self.match(SnowflakeParser.COLUMN)


                self.state = 5566
                self.column_name()
                self.state = 5567
                self.data_type()
                self.state = 5568
                self.match(SnowflakeParser.AS)
                self.state = 5569
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 5570
                self.expr(0)
                self.state = 5571
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            elif token in [589]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5573
                self.match(SnowflakeParser.RENAME)
                self.state = 5574
                self.match(SnowflakeParser.COLUMN)
                self.state = 5575
                self.column_name()
                self.state = 5576
                self.match(SnowflakeParser.TO)
                self.state = 5577
                self.column_name()
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5579
                self.match(SnowflakeParser.DROP)
                self.state = 5581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 5580
                    self.match(SnowflakeParser.COLUMN)


                self.state = 5583
                self.column_list()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constraint_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def out_of_line_constraint(self):
            return self.getTypedRuleContext(SnowflakeParser.Out_of_line_constraintContext,0)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def CONSTRAINT(self):
            return self.getToken(SnowflakeParser.CONSTRAINT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def alter_modify(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_modifyContext,0)


        def column_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,0)


        def VALIDATE(self):
            return self.getToken(SnowflakeParser.VALIDATE, 0)

        def NOVALIDATE(self):
            return self.getToken(SnowflakeParser.NOVALIDATE, 0)

        def RELY(self):
            return self.getToken(SnowflakeParser.RELY, 0)

        def NORELY(self):
            return self.getToken(SnowflakeParser.NORELY, 0)

        def primary_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Primary_keyContext,0)


        def UNIQUE(self):
            return self.getToken(SnowflakeParser.UNIQUE, 0)

        def foreign_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Foreign_keyContext,0)


        def enforced_not_enforced(self):
            return self.getTypedRuleContext(SnowflakeParser.Enforced_not_enforcedContext,0)


        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def PRIMARY(self):
            return self.getToken(SnowflakeParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(SnowflakeParser.KEY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_constraint_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_action" ):
                listener.enterConstraint_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_action" ):
                listener.exitConstraint_action(self)




    def constraint_action(self):

        localctx = SnowflakeParser.Constraint_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_constraint_action)
        self._la = 0 # Token type
        try:
            self.state = 5626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5586
                self.match(SnowflakeParser.ADD)
                self.state = 5587
                self.out_of_line_constraint()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5588
                self.match(SnowflakeParser.RENAME)
                self.state = 5589
                self.match(SnowflakeParser.CONSTRAINT)
                self.state = 5590
                self.id_()
                self.state = 5591
                self.match(SnowflakeParser.TO)
                self.state = 5592
                self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5594
                self.alter_modify()
                self.state = 5600
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [148]:
                    self.state = 5595
                    self.match(SnowflakeParser.CONSTRAINT)
                    self.state = 5596
                    self.id_()
                    pass
                elif token in [551]:
                    self.state = 5597
                    self.primary_key()
                    pass
                elif token in [806]:
                    self.state = 5598
                    self.match(SnowflakeParser.UNIQUE)
                    pass
                elif token in [280]:
                    self.state = 5599
                    self.foreign_key()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5602
                self.column_list_in_parentheses()
                self.state = 5604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==227 or _la==448:
                    self.state = 5603
                    self.enforced_not_enforced()


                self.state = 5606
                _la = self._input.LA(1)
                if not(_la==454 or _la==827):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5607
                _la = self._input.LA(1)
                if not(_la==447 or _la==587):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5609
                self.match(SnowflakeParser.DROP)
                self.state = 5615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [148]:
                    self.state = 5610
                    self.match(SnowflakeParser.CONSTRAINT)
                    self.state = 5611
                    self.id_()
                    pass
                elif token in [551]:
                    self.state = 5612
                    self.primary_key()
                    pass
                elif token in [806]:
                    self.state = 5613
                    self.match(SnowflakeParser.UNIQUE)
                    pass
                elif token in [280]:
                    self.state = 5614
                    self.foreign_key()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==931:
                    self.state = 5617
                    self.column_list_in_parentheses()


                self.state = 5621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104 or _la==607:
                    self.state = 5620
                    self.cascade_restrict()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5623
                self.match(SnowflakeParser.DROP)
                self.state = 5624
                self.match(SnowflakeParser.PRIMARY)
                self.state = 5625
                self.match(SnowflakeParser.KEY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_optimization_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def SEARCH(self):
            return self.getToken(SnowflakeParser.SEARCH, 0)

        def OPTIMIZATION(self):
            return self.getToken(SnowflakeParser.OPTIMIZATION, 0)

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def search_method_with_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Search_method_with_targetContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Search_method_with_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_search_optimization_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_optimization_action" ):
                listener.enterSearch_optimization_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_optimization_action" ):
                listener.exitSearch_optimization_action(self)




    def search_optimization_action(self):

        localctx = SnowflakeParser.Search_optimization_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_search_optimization_action)
        self._la = 0 # Token type
        try:
            self.state = 5656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5628
                self.match(SnowflakeParser.ADD)
                self.state = 5629
                self.match(SnowflakeParser.SEARCH)
                self.state = 5630
                self.match(SnowflakeParser.OPTIMIZATION)
                self.state = 5640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==488:
                    self.state = 5631
                    self.match(SnowflakeParser.ON)
                    self.state = 5632
                    self.search_method_with_target()
                    self.state = 5637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 5633
                        self.match(SnowflakeParser.COMMA)
                        self.state = 5634
                        self.search_method_with_target()
                        self.state = 5639
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5642
                self.match(SnowflakeParser.DROP)
                self.state = 5643
                self.match(SnowflakeParser.SEARCH)
                self.state = 5644
                self.match(SnowflakeParser.OPTIMIZATION)
                self.state = 5654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==488:
                    self.state = 5645
                    self.match(SnowflakeParser.ON)
                    self.state = 5646
                    self.search_method_with_target()
                    self.state = 5651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 5647
                        self.match(SnowflakeParser.COMMA)
                        self.state = 5648
                        self.search_method_with_target()
                        self.state = 5653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_method_with_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def EQUALITY(self):
            return self.getToken(SnowflakeParser.EQUALITY, 0)

        def SUBSTRING(self):
            return self.getToken(SnowflakeParser.SUBSTRING, 0)

        def GEO(self):
            return self.getToken(SnowflakeParser.GEO, 0)

        def STAR(self):
            return self.getToken(SnowflakeParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_search_method_with_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_method_with_target" ):
                listener.enterSearch_method_with_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_method_with_target" ):
                listener.exitSearch_method_with_target(self)




    def search_method_with_target(self):

        localctx = SnowflakeParser.Search_method_with_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_search_method_with_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5658
            _la = self._input.LA(1)
            if not(_la==232 or _la==299 or _la==736):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5659
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 5662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [941]:
                self.state = 5660
                self.match(SnowflakeParser.STAR)
                pass
            elif token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 52, 62, 78, 95, 105, 108, 109, 113, 114, 115, 117, 131, 133, 134, 135, 138, 141, 142, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 182, 190, 194, 195, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 266, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 317, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 379, 381, 382, 383, 384, 385, 390, 396, 397, 398, 412, 416, 421, 427, 436, 438, 445, 446, 448, 455, 456, 458, 460, 461, 462, 477, 478, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 632, 653, 655, 657, 667, 669, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 795, 797, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 847, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 901, 902, 904, 905, 912, 913, 914, 915, 927, 929, 931, 933, 935, 944, 945]:
                self.state = 5661
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5664
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_alter_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def alter_modify(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_modifyContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def alter_column_decl_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_column_decl_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def FORCE(self):
            return self.getToken(SnowflakeParser.FORCE, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def column_set_tags(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_set_tagsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_set_tagsContext,i)


        def column_unset_tags(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_unset_tagsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_unset_tagsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_table_alter_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_alter_column" ):
                listener.enterAlter_table_alter_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_alter_column" ):
                listener.exitAlter_table_alter_column(self)




    def alter_table_alter_column(self):

        localctx = SnowflakeParser.Alter_table_alter_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_alter_table_alter_column)
        self._la = 0 # Token type
        try:
            self.state = 5733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5666
                self.match(SnowflakeParser.ALTER)
                self.state = 5667
                self.match(SnowflakeParser.TABLE)
                self.state = 5668
                self.object_name()
                self.state = 5669
                self.alter_modify()
                self.state = 5675
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [931]:
                    self.state = 5670
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5671
                    self.alter_column_decl_list()
                    self.state = 5672
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                elif token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 62, 108, 109, 113, 114, 115, 117, 131, 134, 135, 136, 138, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 190, 194, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 381, 382, 384, 385, 390, 396, 397, 412, 416, 421, 427, 436, 438, 446, 456, 460, 461, 462, 477, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 653, 655, 657, 667, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 904, 905]:
                    self.state = 5674
                    self.alter_column_decl_list()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5677
                self.match(SnowflakeParser.ALTER)
                self.state = 5678
                self.match(SnowflakeParser.TABLE)
                self.state = 5679
                self.object_name()
                self.state = 5680
                self.alter_modify()
                self.state = 5681
                self.match(SnowflakeParser.COLUMN)
                self.state = 5682
                self.column_name()
                self.state = 5683
                self.match(SnowflakeParser.SET)
                self.state = 5684
                self.match(SnowflakeParser.MASKING)
                self.state = 5685
                self.match(SnowflakeParser.POLICY)
                self.state = 5686
                self.id_()
                self.state = 5694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==825:
                    self.state = 5687
                    self.match(SnowflakeParser.USING)
                    self.state = 5688
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 5689
                    self.column_name()
                    self.state = 5690
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5691
                    self.column_list()
                    self.state = 5692
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 5697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 5696
                    self.match(SnowflakeParser.FORCE)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5699
                self.match(SnowflakeParser.ALTER)
                self.state = 5700
                self.match(SnowflakeParser.TABLE)
                self.state = 5701
                self.object_name()
                self.state = 5702
                self.alter_modify()
                self.state = 5703
                self.match(SnowflakeParser.COLUMN)
                self.state = 5704
                self.column_name()
                self.state = 5705
                self.match(SnowflakeParser.UNSET)
                self.state = 5706
                self.match(SnowflakeParser.MASKING)
                self.state = 5707
                self.match(SnowflakeParser.POLICY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5709
                self.match(SnowflakeParser.ALTER)
                self.state = 5710
                self.match(SnowflakeParser.TABLE)
                self.state = 5711
                self.object_name()
                self.state = 5712
                self.alter_modify()
                self.state = 5713
                self.column_set_tags()
                self.state = 5718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 5714
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5715
                    self.column_set_tags()
                    self.state = 5720
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5721
                self.match(SnowflakeParser.ALTER)
                self.state = 5722
                self.match(SnowflakeParser.TABLE)
                self.state = 5723
                self.object_name()
                self.state = 5724
                self.alter_modify()
                self.state = 5725
                self.column_unset_tags()
                self.state = 5730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 5726
                    self.match(SnowflakeParser.COMMA)
                    self.state = 5727
                    self.column_unset_tags()
                    self.state = 5732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_column_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Alter_column_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Alter_column_declContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_column_decl_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_decl_list" ):
                listener.enterAlter_column_decl_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_decl_list" ):
                listener.exitAlter_column_decl_list(self)




    def alter_column_decl_list(self):

        localctx = SnowflakeParser.Alter_column_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_alter_column_decl_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5735
            self.alter_column_decl()
            self.state = 5740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 5736
                self.match(SnowflakeParser.COMMA)
                self.state = 5737
                self.alter_column_decl()
                self.state = 5742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def alter_column_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_column_optsContext,0)


        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_column_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_decl" ):
                listener.enterAlter_column_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_decl" ):
                listener.exitAlter_column_decl(self)




    def alter_column_decl(self):

        localctx = SnowflakeParser.Alter_column_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_alter_column_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 5743
                self.match(SnowflakeParser.COLUMN)


            self.state = 5746
            self.column_name()
            self.state = 5747
            self.alter_column_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def NEXTVAL(self):
            return self.getToken(SnowflakeParser.NEXTVAL, 0)

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def DATA(self):
            return self.getToken(SnowflakeParser.DATA, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_column_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_opts" ):
                listener.enterAlter_column_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_opts" ):
                listener.exitAlter_column_opts(self)




    def alter_column_opts(self):

        localctx = SnowflakeParser.Alter_column_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_alter_column_opts)
        self._la = 0 # Token type
        try:
            self.state = 5778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,615,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5749
                self.match(SnowflakeParser.DROP)
                self.state = 5750
                self.match(SnowflakeParser.DEFAULT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5751
                self.match(SnowflakeParser.SET)
                self.state = 5752
                self.match(SnowflakeParser.DEFAULT)
                self.state = 5753
                self.object_name()
                self.state = 5754
                self.match(SnowflakeParser.DOT)
                self.state = 5755
                self.match(SnowflakeParser.NEXTVAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5765
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [448, 676]:
                    self.state = 5758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==676:
                        self.state = 5757
                        self.match(SnowflakeParser.SET)


                    self.state = 5760
                    self.match(SnowflakeParser.NOT)
                    self.state = 5761
                    self.match(SnowflakeParser.NULL_)
                    pass
                elif token in [208]:
                    self.state = 5762
                    self.match(SnowflakeParser.DROP)
                    self.state = 5763
                    self.match(SnowflakeParser.NOT)
                    self.state = 5764
                    self.match(SnowflakeParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==676 or _la==803:
                    self.state = 5769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==676:
                        self.state = 5767
                        self.match(SnowflakeParser.SET)
                        self.state = 5768
                        self.match(SnowflakeParser.DATA)


                    self.state = 5771
                    self.match(SnowflakeParser.TYPE)


                self.state = 5774
                self.data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5775
                self.comment_clause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5776
                self.match(SnowflakeParser.UNSET)
                self.state = 5777
                self.match(SnowflakeParser.COMMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_set_tagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_set_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_set_tags" ):
                listener.enterColumn_set_tags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_set_tags" ):
                listener.exitColumn_set_tags(self)




    def column_set_tags(self):

        localctx = SnowflakeParser.Column_set_tagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_column_set_tags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 5780
                self.match(SnowflakeParser.COLUMN)


            self.state = 5783
            self.column_name()
            self.state = 5784
            self.set_tags()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_unset_tagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_unset_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_unset_tags" ):
                listener.enterColumn_unset_tags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_unset_tags" ):
                listener.exitColumn_unset_tags(self)




    def column_unset_tags(self):

        localctx = SnowflakeParser.Column_unset_tagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_column_unset_tags)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5786
            self.match(SnowflakeParser.COLUMN)
            self.state = 5787
            self.column_name()
            self.state = 5788
            self.unset_tags()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def alter_tag_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_tag_optsContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_tag" ):
                listener.enterAlter_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_tag" ):
                listener.exitAlter_tag(self)




    def alter_tag(self):

        localctx = SnowflakeParser.Alter_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_alter_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5790
            self.match(SnowflakeParser.ALTER)
            self.state = 5791
            self.match(SnowflakeParser.TAG)
            self.state = 5793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,617,self._ctx)
            if la_ == 1:
                self.state = 5792
                self.if_exists()


            self.state = 5795
            self.object_name()
            self.state = 5796
            self.alter_tag_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_taskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def resume_suspend(self):
            return self.getTypedRuleContext(SnowflakeParser.Resume_suspendContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def AFTER(self):
            return self.getToken(SnowflakeParser.AFTER, 0)

        def string_list(self):
            return self.getTypedRuleContext(SnowflakeParser.String_listContext,0)


        def REMOVE(self):
            return self.getToken(SnowflakeParser.REMOVE, 0)

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def task_schedule(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_scheduleContext,0)


        def task_overlap(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_overlapContext,0)


        def task_timeout(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_timeoutContext,0)


        def task_suspend_after_failure_number(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_suspend_after_failure_numberContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def session_params_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_params_listContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def SCHEDULE(self):
            return self.getToken(SnowflakeParser.SCHEDULE, 0)

        def ALLOW_OVERLAPPING_EXECUTION(self):
            return self.getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0)

        def USER_TASK_TIMEOUT_MS(self):
            return self.getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0)

        def SUSPEND_TASK_AFTER_NUM_FAILURES(self):
            return self.getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def session_parameter_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_parameter_listContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def MODIFY(self):
            return self.getToken(SnowflakeParser.MODIFY, 0)

        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def sql(self):
            return self.getTypedRuleContext(SnowflakeParser.SqlContext,0)


        def WHEN(self):
            return self.getToken(SnowflakeParser.WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_task" ):
                listener.enterAlter_task(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_task" ):
                listener.exitAlter_task(self)




    def alter_task(self):

        localctx = SnowflakeParser.Alter_taskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_alter_task)
        self._la = 0 # Token type
        try:
            self.state = 5910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5798
                self.match(SnowflakeParser.ALTER)
                self.state = 5799
                self.match(SnowflakeParser.TASK)
                self.state = 5801
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
                if la_ == 1:
                    self.state = 5800
                    self.if_exists()


                self.state = 5803
                self.object_name()
                self.state = 5804
                self.resume_suspend()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5806
                self.match(SnowflakeParser.ALTER)
                self.state = 5807
                self.match(SnowflakeParser.TASK)
                self.state = 5809
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,619,self._ctx)
                if la_ == 1:
                    self.state = 5808
                    self.if_exists()


                self.state = 5811
                self.object_name()
                self.state = 5812
                _la = self._input.LA(1)
                if not(_la==10 or _la==588):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5813
                self.match(SnowflakeParser.AFTER)
                self.state = 5814
                self.string_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5816
                self.match(SnowflakeParser.ALTER)
                self.state = 5817
                self.match(SnowflakeParser.TASK)
                self.state = 5819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
                if la_ == 1:
                    self.state = 5818
                    self.if_exists()


                self.state = 5821
                self.object_name()
                self.state = 5822
                self.match(SnowflakeParser.SET)
                self.state = 5826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==838:
                    self.state = 5823
                    self.match(SnowflakeParser.WAREHOUSE)
                    self.state = 5824
                    self.match(SnowflakeParser.EQ)
                    self.state = 5825
                    self.id_()


                self.state = 5829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==655:
                    self.state = 5828
                    self.task_schedule()


                self.state = 5832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 5831
                    self.task_overlap()


                self.state = 5835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==822:
                    self.state = 5834
                    self.task_timeout()


                self.state = 5838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==741:
                    self.state = 5837
                    self.task_suspend_after_failure_number()


                self.state = 5841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5840
                    self.comment_clause()


                self.state = 5844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==53 or _la==89 or _la==90 or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 864691128455135235) != 0) or _la==368 or _la==393 or _la==569 or _la==628 or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & 140754668224513) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & 144124018562278869) != 0) or _la==843 or _la==844:
                    self.state = 5843
                    self.session_params_list()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5846
                self.match(SnowflakeParser.ALTER)
                self.state = 5847
                self.match(SnowflakeParser.TASK)
                self.state = 5849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
                if la_ == 1:
                    self.state = 5848
                    self.if_exists()


                self.state = 5851
                self.object_name()
                self.state = 5852
                self.match(SnowflakeParser.UNSET)
                self.state = 5854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==838:
                    self.state = 5853
                    self.match(SnowflakeParser.WAREHOUSE)


                self.state = 5857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==655:
                    self.state = 5856
                    self.match(SnowflakeParser.SCHEDULE)


                self.state = 5860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 5859
                    self.match(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION)


                self.state = 5863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,632,self._ctx)
                if la_ == 1:
                    self.state = 5862
                    self.match(SnowflakeParser.USER_TASK_TIMEOUT_MS)


                self.state = 5866
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,633,self._ctx)
                if la_ == 1:
                    self.state = 5865
                    self.match(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES)


                self.state = 5869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 5868
                    self.match(SnowflakeParser.COMMENT)


                self.state = 5872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27021597848109064) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 1098974756867) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & -4538995105691859919) != 0) or ((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & 1688849860263937) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 35184375349249) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & 138428419) != 0) or ((((_la - 537)) & ~0x3f) == 0 and ((1 << (_la - 537)) & -4611685996952545263) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & 76561193669492737) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & 4611686087213985793) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & 49541803526875509) != 0) or _la==843 or _la==844:
                    self.state = 5871
                    self.session_parameter_list()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5874
                self.match(SnowflakeParser.ALTER)
                self.state = 5875
                self.match(SnowflakeParser.TASK)
                self.state = 5877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
                if la_ == 1:
                    self.state = 5876
                    self.if_exists()


                self.state = 5879
                self.object_name()
                self.state = 5880
                self.set_tags()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5882
                self.match(SnowflakeParser.ALTER)
                self.state = 5883
                self.match(SnowflakeParser.TASK)
                self.state = 5885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
                if la_ == 1:
                    self.state = 5884
                    self.if_exists()


                self.state = 5887
                self.object_name()
                self.state = 5888
                self.unset_tags()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5890
                self.match(SnowflakeParser.ALTER)
                self.state = 5891
                self.match(SnowflakeParser.TASK)
                self.state = 5893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
                if la_ == 1:
                    self.state = 5892
                    self.if_exists()


                self.state = 5895
                self.object_name()
                self.state = 5896
                self.match(SnowflakeParser.MODIFY)
                self.state = 5897
                self.match(SnowflakeParser.AS)
                self.state = 5898
                self.sql()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5900
                self.match(SnowflakeParser.ALTER)
                self.state = 5901
                self.match(SnowflakeParser.TASK)
                self.state = 5903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,639,self._ctx)
                if la_ == 1:
                    self.state = 5902
                    self.if_exists()


                self.state = 5905
                self.object_name()
                self.state = 5906
                self.match(SnowflakeParser.MODIFY)
                self.state = 5907
                self.match(SnowflakeParser.WHEN)
                self.state = 5908
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_userContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def alter_user_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_user_optsContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user" ):
                listener.enterAlter_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user" ):
                listener.exitAlter_user(self)




    def alter_user(self):

        localctx = SnowflakeParser.Alter_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_alter_user)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5912
            self.match(SnowflakeParser.ALTER)
            self.state = 5913
            self.match(SnowflakeParser.USER)
            self.state = 5915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,641,self._ctx)
            if la_ == 1:
                self.state = 5914
                self.if_exists()


            self.state = 5917
            self.id_()
            self.state = 5918
            self.alter_user_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ROW)
            else:
                return self.getToken(SnowflakeParser.ROW, i)

        def ACCESS(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ACCESS)
            else:
                return self.getToken(SnowflakeParser.ACCESS, i)

        def POLICY(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.POLICY)
            else:
                return self.getToken(SnowflakeParser.POLICY, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def column_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,0)


        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def alter_modify(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_modifyContext,0)


        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def COLUMN(self):
            return self.getToken(SnowflakeParser.COLUMN, 0)

        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def FORCE(self):
            return self.getToken(SnowflakeParser.FORCE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_view" ):
                listener.enterAlter_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_view" ):
                listener.exitAlter_view(self)




    def alter_view(self):

        localctx = SnowflakeParser.Alter_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_alter_view)
        self._la = 0 # Token type
        try:
            self.state = 6088
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5920
                self.match(SnowflakeParser.ALTER)
                self.state = 5921
                self.match(SnowflakeParser.VIEW)
                self.state = 5923
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
                if la_ == 1:
                    self.state = 5922
                    self.if_exists()


                self.state = 5925
                self.object_name()
                self.state = 5926
                self.match(SnowflakeParser.RENAME)
                self.state = 5927
                self.match(SnowflakeParser.TO)
                self.state = 5928
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5930
                self.match(SnowflakeParser.ALTER)
                self.state = 5931
                self.match(SnowflakeParser.VIEW)
                self.state = 5933
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
                if la_ == 1:
                    self.state = 5932
                    self.if_exists()


                self.state = 5935
                self.object_name()
                self.state = 5936
                self.match(SnowflakeParser.SET)
                self.state = 5937
                self.comment_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5939
                self.match(SnowflakeParser.ALTER)
                self.state = 5940
                self.match(SnowflakeParser.VIEW)
                self.state = 5942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
                if la_ == 1:
                    self.state = 5941
                    self.if_exists()


                self.state = 5944
                self.object_name()
                self.state = 5945
                self.match(SnowflakeParser.UNSET)
                self.state = 5946
                self.match(SnowflakeParser.COMMENT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5948
                self.match(SnowflakeParser.ALTER)
                self.state = 5949
                self.match(SnowflakeParser.VIEW)
                self.state = 5950
                self.object_name()
                self.state = 5951
                self.match(SnowflakeParser.SET)
                self.state = 5952
                self.match(SnowflakeParser.SECURE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5954
                self.match(SnowflakeParser.ALTER)
                self.state = 5955
                self.match(SnowflakeParser.VIEW)
                self.state = 5956
                self.object_name()
                self.state = 5957
                self.match(SnowflakeParser.UNSET)
                self.state = 5958
                self.match(SnowflakeParser.SECURE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5960
                self.match(SnowflakeParser.ALTER)
                self.state = 5961
                self.match(SnowflakeParser.VIEW)
                self.state = 5963
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
                if la_ == 1:
                    self.state = 5962
                    self.if_exists()


                self.state = 5965
                self.object_name()
                self.state = 5966
                self.set_tags()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5968
                self.match(SnowflakeParser.ALTER)
                self.state = 5969
                self.match(SnowflakeParser.VIEW)
                self.state = 5971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
                if la_ == 1:
                    self.state = 5970
                    self.if_exists()


                self.state = 5973
                self.object_name()
                self.state = 5974
                self.unset_tags()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5976
                self.match(SnowflakeParser.ALTER)
                self.state = 5977
                self.match(SnowflakeParser.VIEW)
                self.state = 5979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
                if la_ == 1:
                    self.state = 5978
                    self.if_exists()


                self.state = 5981
                self.object_name()
                self.state = 5982
                self.match(SnowflakeParser.ADD)
                self.state = 5983
                self.match(SnowflakeParser.ROW)
                self.state = 5984
                self.match(SnowflakeParser.ACCESS)
                self.state = 5985
                self.match(SnowflakeParser.POLICY)
                self.state = 5986
                self.id_()
                self.state = 5987
                self.match(SnowflakeParser.ON)
                self.state = 5988
                self.column_list_in_parentheses()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5990
                self.match(SnowflakeParser.ALTER)
                self.state = 5991
                self.match(SnowflakeParser.VIEW)
                self.state = 5993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,648,self._ctx)
                if la_ == 1:
                    self.state = 5992
                    self.if_exists()


                self.state = 5995
                self.object_name()
                self.state = 5996
                self.match(SnowflakeParser.DROP)
                self.state = 5997
                self.match(SnowflakeParser.ROW)
                self.state = 5998
                self.match(SnowflakeParser.ACCESS)
                self.state = 5999
                self.match(SnowflakeParser.POLICY)
                self.state = 6000
                self.id_()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6002
                self.match(SnowflakeParser.ALTER)
                self.state = 6003
                self.match(SnowflakeParser.VIEW)
                self.state = 6005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
                if la_ == 1:
                    self.state = 6004
                    self.if_exists()


                self.state = 6007
                self.object_name()
                self.state = 6008
                self.match(SnowflakeParser.ADD)
                self.state = 6009
                self.match(SnowflakeParser.ROW)
                self.state = 6010
                self.match(SnowflakeParser.ACCESS)
                self.state = 6011
                self.match(SnowflakeParser.POLICY)
                self.state = 6012
                self.id_()
                self.state = 6013
                self.match(SnowflakeParser.ON)
                self.state = 6014
                self.column_list_in_parentheses()
                self.state = 6015
                self.match(SnowflakeParser.COMMA)
                self.state = 6016
                self.match(SnowflakeParser.DROP)
                self.state = 6017
                self.match(SnowflakeParser.ROW)
                self.state = 6018
                self.match(SnowflakeParser.ACCESS)
                self.state = 6019
                self.match(SnowflakeParser.POLICY)
                self.state = 6020
                self.id_()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6022
                self.match(SnowflakeParser.ALTER)
                self.state = 6023
                self.match(SnowflakeParser.VIEW)
                self.state = 6025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,650,self._ctx)
                if la_ == 1:
                    self.state = 6024
                    self.if_exists()


                self.state = 6027
                self.object_name()
                self.state = 6028
                self.match(SnowflakeParser.DROP)
                self.state = 6029
                self.match(SnowflakeParser.ALL)
                self.state = 6030
                self.match(SnowflakeParser.ROW)
                self.state = 6031
                self.match(SnowflakeParser.ACCESS)
                self.state = 6032
                self.match(SnowflakeParser.POLICIES)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6034
                self.match(SnowflakeParser.ALTER)
                self.state = 6035
                self.match(SnowflakeParser.VIEW)
                self.state = 6036
                self.object_name()
                self.state = 6037
                self.alter_modify()
                self.state = 6039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 6038
                    self.match(SnowflakeParser.COLUMN)


                self.state = 6041
                self.id_()
                self.state = 6042
                self.match(SnowflakeParser.SET)
                self.state = 6043
                self.match(SnowflakeParser.MASKING)
                self.state = 6044
                self.match(SnowflakeParser.POLICY)
                self.state = 6045
                self.id_()
                self.state = 6053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==825:
                    self.state = 6046
                    self.match(SnowflakeParser.USING)
                    self.state = 6047
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 6048
                    self.column_name()
                    self.state = 6049
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6050
                    self.column_list()
                    self.state = 6051
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 6056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==279:
                    self.state = 6055
                    self.match(SnowflakeParser.FORCE)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6058
                self.match(SnowflakeParser.ALTER)
                self.state = 6059
                self.match(SnowflakeParser.VIEW)
                self.state = 6060
                self.object_name()
                self.state = 6061
                self.alter_modify()
                self.state = 6063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 6062
                    self.match(SnowflakeParser.COLUMN)


                self.state = 6065
                self.id_()
                self.state = 6066
                self.match(SnowflakeParser.UNSET)
                self.state = 6067
                self.match(SnowflakeParser.MASKING)
                self.state = 6068
                self.match(SnowflakeParser.POLICY)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6070
                self.match(SnowflakeParser.ALTER)
                self.state = 6071
                self.match(SnowflakeParser.VIEW)
                self.state = 6072
                self.object_name()
                self.state = 6073
                self.alter_modify()
                self.state = 6075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 6074
                    self.match(SnowflakeParser.COLUMN)


                self.state = 6077
                self.id_()
                self.state = 6078
                self.set_tags()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6080
                self.match(SnowflakeParser.ALTER)
                self.state = 6081
                self.match(SnowflakeParser.VIEW)
                self.state = 6082
                self.object_name()
                self.state = 6083
                self.alter_modify()
                self.state = 6084
                self.match(SnowflakeParser.COLUMN)
                self.state = 6085
                self.id_()
                self.state = 6086
                self.unset_tags()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_modifyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def MODIFY(self):
            return self.getToken(SnowflakeParser.MODIFY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_modify

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_modify" ):
                listener.enterAlter_modify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_modify" ):
                listener.exitAlter_modify(self)




    def alter_modify(self):

        localctx = SnowflakeParser.Alter_modifyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_alter_modify)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6090
            _la = self._input.LA(1)
            if not(_la==28 or _la==429):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_warehouseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def alter_warehouse_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Alter_warehouse_optsContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_warehouse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_warehouse" ):
                listener.enterAlter_warehouse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_warehouse" ):
                listener.exitAlter_warehouse(self)




    def alter_warehouse(self):

        localctx = SnowflakeParser.Alter_warehouseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_alter_warehouse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6092
            self.match(SnowflakeParser.ALTER)
            self.state = 6093
            self.match(SnowflakeParser.WAREHOUSE)
            self.state = 6095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.state = 6094
                self.if_exists()


            self.state = 6097
            self.alter_warehouse_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_connection_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def FAILOVER(self):
            return self.getToken(SnowflakeParser.FAILOVER, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ACCOUNTS, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DOT)
            else:
                return self.getToken(SnowflakeParser.DOT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def ignore_edition_check(self):
            return self.getTypedRuleContext(SnowflakeParser.Ignore_edition_checkContext,0)


        def DISABLE(self):
            return self.getToken(SnowflakeParser.DISABLE, 0)

        def PRIMARY(self):
            return self.getToken(SnowflakeParser.PRIMARY, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_connection_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_connection_opts" ):
                listener.enterAlter_connection_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_connection_opts" ):
                listener.exitAlter_connection_opts(self)




    def alter_connection_opts(self):

        localctx = SnowflakeParser.Alter_connection_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_alter_connection_opts)
        self._la = 0 # Token type
        try:
            self.state = 6152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6099
                self.id_()
                self.state = 6100
                self.match(SnowflakeParser.ENABLE)
                self.state = 6101
                self.match(SnowflakeParser.FAILOVER)
                self.state = 6102
                self.match(SnowflakeParser.TO)
                self.state = 6103
                self.match(SnowflakeParser.ACCOUNTS)
                self.state = 6104
                self.id_()
                self.state = 6105
                self.match(SnowflakeParser.DOT)
                self.state = 6106
                self.id_()
                self.state = 6114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6107
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6108
                    self.id_()
                    self.state = 6109
                    self.match(SnowflakeParser.DOT)
                    self.state = 6110
                    self.id_()
                    self.state = 6116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 6117
                    self.ignore_edition_check()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6120
                self.id_()
                self.state = 6121
                self.match(SnowflakeParser.DISABLE)
                self.state = 6122
                self.match(SnowflakeParser.FAILOVER)
                self.state = 6133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==784:
                    self.state = 6123
                    self.match(SnowflakeParser.TO)
                    self.state = 6124
                    self.match(SnowflakeParser.ACCOUNTS)
                    self.state = 6125
                    self.id_()
                    self.state = 6126
                    self.match(SnowflakeParser.DOT)
                    self.state = 6127
                    self.id_()

                    self.state = 6128
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6129
                    self.id_()
                    self.state = 6130
                    self.match(SnowflakeParser.DOT)
                    self.state = 6131
                    self.id_()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6135
                self.id_()
                self.state = 6136
                self.match(SnowflakeParser.PRIMARY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                if la_ == 1:
                    self.state = 6138
                    self.if_exists()


                self.state = 6141
                self.id_()
                self.state = 6142
                self.match(SnowflakeParser.SET)
                self.state = 6143
                self.comment_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
                if la_ == 1:
                    self.state = 6145
                    self.if_exists()


                self.state = 6148
                self.id_()
                self.state = 6149
                self.match(SnowflakeParser.UNSET)
                self.state = 6150
                self.match(SnowflakeParser.COMMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_user_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RESET(self):
            return self.getToken(SnowflakeParser.RESET, 0)

        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def ABORT(self):
            return self.getToken(SnowflakeParser.ABORT, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def QUERIES(self):
            return self.getToken(SnowflakeParser.QUERIES, 0)

        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def DELEGATED(self):
            return self.getToken(SnowflakeParser.DELEGATED, 0)

        def AUTHORIZATION(self):
            return self.getToken(SnowflakeParser.AUTHORIZATION, 0)

        def OF(self):
            return self.getToken(SnowflakeParser.OF, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def REMOVE(self):
            return self.getToken(SnowflakeParser.REMOVE, 0)

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def AUTHORIZATIONS(self):
            return self.getToken(SnowflakeParser.AUTHORIZATIONS, 0)

        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_user_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_user_opts" ):
                listener.enterAlter_user_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_user_opts" ):
                listener.exitAlter_user_opts(self)




    def alter_user_opts(self):

        localctx = SnowflakeParser.Alter_user_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_alter_user_opts)
        try:
            self.state = 6188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [589]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6154
                self.match(SnowflakeParser.RENAME)
                self.state = 6155
                self.match(SnowflakeParser.TO)
                self.state = 6156
                self.id_()
                pass
            elif token in [601]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6157
                self.match(SnowflakeParser.RESET)
                self.state = 6158
                self.match(SnowflakeParser.PASSWORD)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6159
                self.match(SnowflakeParser.ABORT)
                self.state = 6160
                self.match(SnowflakeParser.ALL)
                self.state = 6161
                self.match(SnowflakeParser.QUERIES)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6162
                self.match(SnowflakeParser.ADD)
                self.state = 6163
                self.match(SnowflakeParser.DELEGATED)
                self.state = 6164
                self.match(SnowflakeParser.AUTHORIZATION)
                self.state = 6165
                self.match(SnowflakeParser.OF)
                self.state = 6166
                self.match(SnowflakeParser.ROLE)
                self.state = 6167
                self.id_()
                self.state = 6168
                self.match(SnowflakeParser.TO)
                self.state = 6169
                self.match(SnowflakeParser.SECURITY)
                self.state = 6170
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 6171
                self.id_()
                pass
            elif token in [588]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6173
                self.match(SnowflakeParser.REMOVE)
                self.state = 6174
                self.match(SnowflakeParser.DELEGATED)
                self.state = 6180
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 6175
                    self.match(SnowflakeParser.AUTHORIZATION)
                    self.state = 6176
                    self.match(SnowflakeParser.OF)
                    self.state = 6177
                    self.match(SnowflakeParser.ROLE)
                    self.state = 6178
                    self.id_()
                    pass
                elif token in [50]:
                    self.state = 6179
                    self.match(SnowflakeParser.AUTHORIZATIONS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6182
                self.match(SnowflakeParser.FROM)
                self.state = 6183
                self.match(SnowflakeParser.SECURITY)
                self.state = 6184
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 6185
                self.id_()
                pass
            elif token in [676]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6186
                self.set_tags()
                pass
            elif token in [809]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6187
                self.unset_tags()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_tag_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def tag_allowed_values(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_allowed_valuesContext,0)


        def ADD(self):
            return self.getToken(SnowflakeParser.ADD, 0)

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def ALLOWED_VALUES(self):
            return self.getToken(SnowflakeParser.ALLOWED_VALUES, 0)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def MASKING(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.MASKING)
            else:
                return self.getToken(SnowflakeParser.MASKING, i)

        def POLICY(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.POLICY)
            else:
                return self.getToken(SnowflakeParser.POLICY, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_tag_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_tag_opts" ):
                listener.enterAlter_tag_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_tag_opts" ):
                listener.exitAlter_tag_opts(self)




    def alter_tag_opts(self):

        localctx = SnowflakeParser.Alter_tag_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_alter_tag_opts)
        self._la = 0 # Token type
        try:
            self.state = 6227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6190
                self.match(SnowflakeParser.RENAME)
                self.state = 6191
                self.match(SnowflakeParser.TO)
                self.state = 6192
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6193
                _la = self._input.LA(1)
                if not(_la==10 or _la==208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6194
                self.tag_allowed_values()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6195
                self.match(SnowflakeParser.UNSET)
                self.state = 6196
                self.match(SnowflakeParser.ALLOWED_VALUES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6197
                self.match(SnowflakeParser.SET)
                self.state = 6198
                self.match(SnowflakeParser.MASKING)
                self.state = 6199
                self.match(SnowflakeParser.POLICY)
                self.state = 6200
                self.id_()
                self.state = 6207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6201
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6202
                    self.match(SnowflakeParser.MASKING)
                    self.state = 6203
                    self.match(SnowflakeParser.POLICY)
                    self.state = 6204
                    self.id_()
                    self.state = 6209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6210
                self.match(SnowflakeParser.UNSET)
                self.state = 6211
                self.match(SnowflakeParser.MASKING)
                self.state = 6212
                self.match(SnowflakeParser.POLICY)
                self.state = 6213
                self.id_()
                self.state = 6220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6214
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6215
                    self.match(SnowflakeParser.MASKING)
                    self.state = 6216
                    self.match(SnowflakeParser.POLICY)
                    self.state = 6217
                    self.id_()
                    self.state = 6222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6223
                self.match(SnowflakeParser.SET)
                self.state = 6224
                self.comment_clause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6225
                self.match(SnowflakeParser.UNSET)
                self.state = 6226
                self.match(SnowflakeParser.COMMENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_network_policy_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def ALLOWED_IP_LIST(self):
            return self.getToken(SnowflakeParser.ALLOWED_IP_LIST, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def BLOCKED_IP_LIST(self):
            return self.getToken(SnowflakeParser.BLOCKED_IP_LIST, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_network_policy_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_network_policy_opts" ):
                listener.enterAlter_network_policy_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_network_policy_opts" ):
                listener.exitAlter_network_policy_opts(self)




    def alter_network_policy_opts(self):

        localctx = SnowflakeParser.Alter_network_policy_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_alter_network_policy_opts)
        self._la = 0 # Token type
        try:
            self.state = 6265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,674,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
                if la_ == 1:
                    self.state = 6229
                    self.if_exists()


                self.state = 6232
                self.id_()
                self.state = 6233
                self.match(SnowflakeParser.SET)
                self.state = 6240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 6234
                    self.match(SnowflakeParser.ALLOWED_IP_LIST)
                    self.state = 6235
                    self.match(SnowflakeParser.EQ)
                    self.state = 6236
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 6237
                    self.string_list()
                    self.state = 6238
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 6248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 6242
                    self.match(SnowflakeParser.BLOCKED_IP_LIST)
                    self.state = 6243
                    self.match(SnowflakeParser.EQ)
                    self.state = 6244
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 6245
                    self.string_list()
                    self.state = 6246
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 6251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 6250
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
                if la_ == 1:
                    self.state = 6253
                    self.if_exists()


                self.state = 6256
                self.id_()
                self.state = 6257
                self.match(SnowflakeParser.UNSET)
                self.state = 6258
                self.match(SnowflakeParser.COMMENT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6260
                self.id_()
                self.state = 6261
                self.match(SnowflakeParser.RENAME)
                self.state = 6262
                self.match(SnowflakeParser.TO)
                self.state = 6263
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_warehouse_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUSPEND(self):
            return self.getToken(SnowflakeParser.SUSPEND, 0)

        def RESUME(self):
            return self.getToken(SnowflakeParser.RESUME, 0)

        def id_fn(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_fnContext,0)


        def if_suspended(self):
            return self.getTypedRuleContext(SnowflakeParser.If_suspendedContext,0)


        def ABORT(self):
            return self.getToken(SnowflakeParser.ABORT, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def QUERIES(self):
            return self.getToken(SnowflakeParser.QUERIES, 0)

        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def wh_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Wh_propertiesContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Wh_propertiesContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_warehouse_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_warehouse_opts" ):
                listener.enterAlter_warehouse_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_warehouse_opts" ):
                listener.exitAlter_warehouse_opts(self)




    def alter_warehouse_opts(self):

        localctx = SnowflakeParser.Alter_warehouse_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_alter_warehouse_opts)
        self._la = 0 # Token type
        try:
            self.state = 6314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,681,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 6267
                    self.id_fn()


                self.state = 6275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [738]:
                    self.state = 6270
                    self.match(SnowflakeParser.SUSPEND)
                    pass
                elif token in [610]:
                    self.state = 6271
                    self.match(SnowflakeParser.RESUME)
                    self.state = 6273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==327:
                        self.state = 6272
                        self.if_suspended()


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 6277
                    self.id_fn()


                self.state = 6280
                self.match(SnowflakeParser.ABORT)
                self.state = 6281
                self.match(SnowflakeParser.ALL)
                self.state = 6282
                self.match(SnowflakeParser.QUERIES)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6283
                self.id_fn()
                self.state = 6284
                self.match(SnowflakeParser.RENAME)
                self.state = 6285
                self.match(SnowflakeParser.TO)
                self.state = 6286
                self.id_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6288
                self.id_fn()
                self.state = 6289
                self.set_tags()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6291
                self.id_fn()
                self.state = 6292
                self.unset_tags()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6294
                self.id_fn()
                self.state = 6295
                self.match(SnowflakeParser.UNSET)
                self.state = 6296
                self.id_()
                self.state = 6301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6297
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6298
                    self.id_()
                    self.state = 6303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6304
                self.id_()
                self.state = 6305
                self.match(SnowflakeParser.SET)
                self.state = 6306
                self.wh_properties()
                self.state = 6311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6307
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6308
                    self.wh_properties()
                    self.state = 6313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_account_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def account_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Account_paramsContext,0)


        def object_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_paramsContext,0)


        def session_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_paramsContext,0)


        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def param_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Param_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Param_nameContext,i)


        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def RESOURCE_MONITOR(self):
            return self.getToken(SnowflakeParser.RESOURCE_MONITOR, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def SAVE_OLD_URL(self):
            return self.getToken(SnowflakeParser.SAVE_OLD_URL, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def OLD(self):
            return self.getToken(SnowflakeParser.OLD, 0)

        def URL(self):
            return self.getToken(SnowflakeParser.URL, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_account_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_account_opts" ):
                listener.enterAlter_account_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_account_opts" ):
                listener.exitAlter_account_opts(self)




    def alter_account_opts(self):

        localctx = SnowflakeParser.Alter_account_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_alter_account_opts)
        self._la = 0 # Token type
        try:
            self.state = 6352
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,687,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6316
                self.match(SnowflakeParser.SET)
                self.state = 6318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,682,self._ctx)
                if la_ == 1:
                    self.state = 6317
                    self.account_params()


                self.state = 6321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,683,self._ctx)
                if la_ == 1:
                    self.state = 6320
                    self.object_params()


                self.state = 6324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==53 or _la==89 or _la==90 or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 864691128455135235) != 0) or _la==368 or _la==393 or _la==569 or _la==628 or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & 140754668224513) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & 144124018562278869) != 0) or _la==843 or _la==844:
                    self.state = 6323
                    self.session_params()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6326
                self.match(SnowflakeParser.UNSET)
                self.state = 6327
                self.param_name()
                self.state = 6330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==937:
                    self.state = 6328
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6329
                    self.param_name()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6332
                self.match(SnowflakeParser.SET)
                self.state = 6333
                self.match(SnowflakeParser.RESOURCE_MONITOR)
                self.state = 6334
                self.match(SnowflakeParser.EQ)
                self.state = 6335
                self.id_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6336
                self.set_tags()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6337
                self.unset_tags()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6338
                self.id_()
                self.state = 6339
                self.match(SnowflakeParser.RENAME)
                self.state = 6340
                self.match(SnowflakeParser.TO)
                self.state = 6341
                self.id_()
                self.state = 6345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==652:
                    self.state = 6342
                    self.match(SnowflakeParser.SAVE_OLD_URL)
                    self.state = 6343
                    self.match(SnowflakeParser.EQ)
                    self.state = 6344
                    self.true_false()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6347
                self.id_()
                self.state = 6348
                self.match(SnowflakeParser.DROP)
                self.state = 6349
                self.match(SnowflakeParser.OLD)
                self.state = 6350
                self.match(SnowflakeParser.URL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_tagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def tag_decl_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_decl_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_set_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_tags" ):
                listener.enterSet_tags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_tags" ):
                listener.exitSet_tags(self)




    def set_tags(self):

        localctx = SnowflakeParser.Set_tagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_set_tags)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6354
            self.match(SnowflakeParser.SET)
            self.state = 6355
            self.tag_decl_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tag_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def tag_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Tag_valueContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Tag_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_tag_decl_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag_decl_list" ):
                listener.enterTag_decl_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag_decl_list" ):
                listener.exitTag_decl_list(self)




    def tag_decl_list(self):

        localctx = SnowflakeParser.Tag_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_tag_decl_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6357
            self.match(SnowflakeParser.TAG)
            self.state = 6358
            self.object_name()
            self.state = 6359
            self.match(SnowflakeParser.EQ)
            self.state = 6360
            self.tag_value()
            self.state = 6368
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,688,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6361
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6362
                    self.object_name()
                    self.state = 6363
                    self.match(SnowflakeParser.EQ)
                    self.state = 6364
                    self.tag_value() 
                self.state = 6370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,688,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unset_tagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSET(self):
            return self.getToken(SnowflakeParser.UNSET, 0)

        def tag_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_unset_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnset_tags" ):
                listener.enterUnset_tags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnset_tags" ):
                listener.exitUnset_tags(self)




    def unset_tags(self):

        localctx = SnowflakeParser.Unset_tagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_unset_tags)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6371
            self.match(SnowflakeParser.UNSET)
            self.state = 6372
            self.tag_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tag_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_tag_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag_list" ):
                listener.enterTag_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag_list" ):
                listener.exitTag_list(self)




    def tag_list(self):

        localctx = SnowflakeParser.Tag_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_tag_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6374
            self.match(SnowflakeParser.TAG)
            self.state = 6375
            self.object_name()
            self.state = 6380
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,689,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6376
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6377
                    self.object_name() 
                self.state = 6382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,689,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_account(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_accountContext,0)


        def create_alert(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_alertContext,0)


        def create_api_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_api_integrationContext,0)


        def create_object_clone(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_object_cloneContext,0)


        def create_connection(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_connectionContext,0)


        def create_database(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_databaseContext,0)


        def create_dataset(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_datasetContext,0)


        def create_dynamic_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_dynamic_tableContext,0)


        def create_event_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_event_tableContext,0)


        def create_external_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_external_functionContext,0)


        def create_external_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_external_tableContext,0)


        def create_failover_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_failover_groupContext,0)


        def create_file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_file_formatContext,0)


        def create_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_functionContext,0)


        def create_git_repository(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_git_repositoryContext,0)


        def create_managed_account(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_managed_accountContext,0)


        def create_masking_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_masking_policyContext,0)


        def create_materialized_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_materialized_viewContext,0)


        def create_network_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_network_policyContext,0)


        def create_notification_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_notification_integrationContext,0)


        def create_password_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_password_policyContext,0)


        def create_pipe(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_pipeContext,0)


        def create_procedure(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_procedureContext,0)


        def create_replication_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_replication_groupContext,0)


        def create_resource_monitor(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_resource_monitorContext,0)


        def create_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_roleContext,0)


        def create_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_row_access_policyContext,0)


        def create_schema(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_schemaContext,0)


        def create_secret(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_secretContext,0)


        def create_security_integration_external_oauth(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_security_integration_external_oauthContext,0)


        def create_security_integration_snowflake_oauth(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_security_integration_snowflake_oauthContext,0)


        def create_security_integration_saml2(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_security_integration_saml2Context,0)


        def create_security_integration_scim(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_security_integration_scimContext,0)


        def create_sequence(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_sequenceContext,0)


        def create_session_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_session_policyContext,0)


        def create_share(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_shareContext,0)


        def create_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_stageContext,0)


        def create_storage_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_storage_integrationContext,0)


        def create_stream(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_streamContext,0)


        def create_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_tableContext,0)


        def create_table_as_select(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_table_as_selectContext,0)


        def create_table_like(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_table_likeContext,0)


        def create_tag(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_tagContext,0)


        def create_task(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_taskContext,0)


        def create_user(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_userContext,0)


        def create_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_viewContext,0)


        def create_warehouse(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_warehouseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_command" ):
                listener.enterCreate_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_command" ):
                listener.exitCreate_command(self)




    def create_command(self):

        localctx = SnowflakeParser.Create_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_create_command)
        try:
            self.state = 6430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6383
                self.create_account()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6384
                self.create_alert()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6385
                self.create_api_integration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6386
                self.create_object_clone()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6387
                self.create_connection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6388
                self.create_database()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6389
                self.create_dataset()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6390
                self.create_dynamic_table()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6391
                self.create_event_table()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6392
                self.create_external_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6393
                self.create_external_table()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6394
                self.create_failover_group()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6395
                self.create_file_format()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6396
                self.create_function()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6397
                self.create_git_repository()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6398
                self.create_managed_account()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6399
                self.create_masking_policy()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6400
                self.create_materialized_view()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6401
                self.create_network_policy()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6402
                self.create_notification_integration()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6403
                self.create_password_policy()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6404
                self.create_pipe()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 6405
                self.create_procedure()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 6406
                self.create_replication_group()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 6407
                self.create_resource_monitor()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 6408
                self.create_role()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 6409
                self.create_row_access_policy()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 6410
                self.create_schema()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 6411
                self.create_secret()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 6412
                self.create_security_integration_external_oauth()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 6413
                self.create_security_integration_snowflake_oauth()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 6414
                self.create_security_integration_saml2()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 6415
                self.create_security_integration_scim()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 6416
                self.create_sequence()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 6417
                self.create_session_policy()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 6418
                self.create_share()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 6419
                self.create_stage()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 6420
                self.create_storage_integration()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 6421
                self.create_stream()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 6422
                self.create_table()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 6423
                self.create_table_as_select()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 6424
                self.create_table_like()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 6425
                self.create_tag()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 6426
                self.create_task()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 6427
                self.create_user()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 6428
                self.create_view()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 6429
                self.create_warehouse()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_accountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ADMIN_NAME(self):
            return self.getToken(SnowflakeParser.ADMIN_NAME, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def ADMIN_PASSWORD(self):
            return self.getToken(SnowflakeParser.ADMIN_PASSWORD, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def EMAIL(self):
            return self.getToken(SnowflakeParser.EMAIL, 0)

        def EDITION(self):
            return self.getToken(SnowflakeParser.EDITION, 0)

        def STANDARD(self):
            return self.getToken(SnowflakeParser.STANDARD, 0)

        def ENTERPRISE(self):
            return self.getToken(SnowflakeParser.ENTERPRISE, 0)

        def BUSINESS_CRITICAL(self):
            return self.getToken(SnowflakeParser.BUSINESS_CRITICAL, 0)

        def FIRST_NAME(self):
            return self.getToken(SnowflakeParser.FIRST_NAME, 0)

        def LAST_NAME(self):
            return self.getToken(SnowflakeParser.LAST_NAME, 0)

        def MUST_CHANGE_PASSWORD(self):
            return self.getToken(SnowflakeParser.MUST_CHANGE_PASSWORD, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def REGION_GROUP(self):
            return self.getToken(SnowflakeParser.REGION_GROUP, 0)

        def region_group_id(self):
            return self.getTypedRuleContext(SnowflakeParser.Region_group_idContext,0)


        def REGION(self):
            return self.getToken(SnowflakeParser.REGION, 0)

        def snowflake_region_id(self):
            return self.getTypedRuleContext(SnowflakeParser.Snowflake_region_idContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_account

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_account" ):
                listener.enterCreate_account(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_account" ):
                listener.exitCreate_account(self)




    def create_account(self):

        localctx = SnowflakeParser.Create_accountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_create_account)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6432
            self.match(SnowflakeParser.CREATE)
            self.state = 6433
            self.match(SnowflakeParser.ACCOUNT)
            self.state = 6434
            self.id_()
            self.state = 6435
            self.match(SnowflakeParser.ADMIN_NAME)
            self.state = 6436
            self.match(SnowflakeParser.EQ)
            self.state = 6437
            self.id_()
            self.state = 6438
            self.match(SnowflakeParser.ADMIN_PASSWORD)
            self.state = 6439
            self.match(SnowflakeParser.EQ)
            self.state = 6440
            self.string()
            self.state = 6444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==275:
                self.state = 6441
                self.match(SnowflakeParser.FIRST_NAME)
                self.state = 6442
                self.match(SnowflakeParser.EQ)
                self.state = 6443
                self.id_()


            self.state = 6449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==377:
                self.state = 6446
                self.match(SnowflakeParser.LAST_NAME)
                self.state = 6447
                self.match(SnowflakeParser.EQ)
                self.state = 6448
                self.id_()


            self.state = 6451
            self.match(SnowflakeParser.EMAIL)
            self.state = 6452
            self.match(SnowflakeParser.EQ)
            self.state = 6453
            self.string()
            self.state = 6457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==435:
                self.state = 6454
                self.match(SnowflakeParser.MUST_CHANGE_PASSWORD)
                self.state = 6455
                self.match(SnowflakeParser.EQ)
                self.state = 6456
                self.true_false()


            self.state = 6459
            self.match(SnowflakeParser.EDITION)
            self.state = 6460
            self.match(SnowflakeParser.EQ)
            self.state = 6461
            _la = self._input.LA(1)
            if not(_la==98 or _la==230 or _la==710):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==586:
                self.state = 6462
                self.match(SnowflakeParser.REGION_GROUP)
                self.state = 6463
                self.match(SnowflakeParser.EQ)
                self.state = 6464
                self.region_group_id()


            self.state = 6470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==584:
                self.state = 6467
                self.match(SnowflakeParser.REGION)
                self.state = 6468
                self.match(SnowflakeParser.EQ)
                self.state = 6469
                self.snowflake_region_id()


            self.state = 6473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 6472
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_alertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def ALERT(self):
            return self.getToken(SnowflakeParser.ALERT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def SCHEDULE(self):
            return self.getToken(SnowflakeParser.SCHEDULE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def IF(self):
            return self.getToken(SnowflakeParser.IF, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def EXISTS(self):
            return self.getToken(SnowflakeParser.EXISTS, 0)

        def alert_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Alert_conditionContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def THEN(self):
            return self.getToken(SnowflakeParser.THEN, 0)

        def alert_action(self):
            return self.getTypedRuleContext(SnowflakeParser.Alert_actionContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_alert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_alert" ):
                listener.enterCreate_alert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_alert" ):
                listener.exitCreate_alert(self)




    def create_alert(self):

        localctx = SnowflakeParser.Create_alertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_create_alert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6475
            self.match(SnowflakeParser.CREATE)
            self.state = 6477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 6476
                self.or_replace()


            self.state = 6479
            self.match(SnowflakeParser.ALERT)
            self.state = 6481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,698,self._ctx)
            if la_ == 1:
                self.state = 6480
                self.if_not_exists()


            self.state = 6483
            self.id_()
            self.state = 6484
            self.match(SnowflakeParser.WAREHOUSE)
            self.state = 6485
            self.match(SnowflakeParser.EQ)
            self.state = 6486
            self.id_()
            self.state = 6487
            self.match(SnowflakeParser.SCHEDULE)
            self.state = 6488
            self.match(SnowflakeParser.EQ)
            self.state = 6489
            self.string()
            self.state = 6490
            self.match(SnowflakeParser.IF)
            self.state = 6491
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 6492
            self.match(SnowflakeParser.EXISTS)
            self.state = 6493
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 6494
            self.alert_condition()
            self.state = 6495
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 6496
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 6497
            self.match(SnowflakeParser.THEN)
            self.state = 6498
            self.alert_action()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alert_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_statementContext,0)


        def show_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_commandContext,0)


        def call(self):
            return self.getTypedRuleContext(SnowflakeParser.CallContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alert_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlert_condition" ):
                listener.enterAlert_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlert_condition" ):
                listener.exitAlert_condition(self)




    def alert_condition(self):

        localctx = SnowflakeParser.Alert_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_alert_condition)
        try:
            self.state = 6503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [669]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6500
                self.select_statement()
                pass
            elif token in [681]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6501
                self.show_command()
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6502
                self.call()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alert_actionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Sql_commandContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alert_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlert_action" ):
                listener.enterAlert_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlert_action" ):
                listener.exitAlert_action(self)




    def alert_action(self):

        localctx = SnowflakeParser.Alert_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_alert_action)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6505
            self.sql_command()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_api_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def API(self):
            return self.getToken(SnowflakeParser.API, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def API_PROVIDER(self):
            return self.getToken(SnowflakeParser.API_PROVIDER, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def API_AWS_ROLE_ARN(self):
            return self.getToken(SnowflakeParser.API_AWS_ROLE_ARN, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def API_ALLOWED_PREFIXES(self):
            return self.getToken(SnowflakeParser.API_ALLOWED_PREFIXES, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def API_KEY(self):
            return self.getToken(SnowflakeParser.API_KEY, 0)

        def API_BLOCKED_PREFIXES(self):
            return self.getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def AZURE_TENANT_ID(self):
            return self.getToken(SnowflakeParser.AZURE_TENANT_ID, 0)

        def AZURE_AD_APPLICATION_ID(self):
            return self.getToken(SnowflakeParser.AZURE_AD_APPLICATION_ID, 0)

        def GOOGLE_AUDIENCE(self):
            return self.getToken(SnowflakeParser.GOOGLE_AUDIENCE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_api_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_api_integration" ):
                listener.enterCreate_api_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_api_integration" ):
                listener.exitCreate_api_integration(self)




    def create_api_integration(self):

        localctx = SnowflakeParser.Create_api_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_create_api_integration)
        self._la = 0 # Token type
        try:
            self.state = 6621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,712,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6507
                self.match(SnowflakeParser.CREATE)
                self.state = 6509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 6508
                    self.or_replace()


                self.state = 6511
                self.match(SnowflakeParser.API)
                self.state = 6512
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 6514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,701,self._ctx)
                if la_ == 1:
                    self.state = 6513
                    self.if_not_exists()


                self.state = 6516
                self.id_()
                self.state = 6517
                self.match(SnowflakeParser.API_PROVIDER)
                self.state = 6518
                self.match(SnowflakeParser.EQ)

                self.state = 6519
                self.id_()
                self.state = 6520
                self.match(SnowflakeParser.API_AWS_ROLE_ARN)
                self.state = 6521
                self.match(SnowflakeParser.EQ)
                self.state = 6522
                self.string()
                self.state = 6526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 6523
                    self.match(SnowflakeParser.API_KEY)
                    self.state = 6524
                    self.match(SnowflakeParser.EQ)
                    self.state = 6525
                    self.string()


                self.state = 6528
                self.match(SnowflakeParser.API_ALLOWED_PREFIXES)
                self.state = 6529
                self.match(SnowflakeParser.EQ)
                self.state = 6530
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6531
                self.string()
                self.state = 6532
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 6539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 6533
                    self.match(SnowflakeParser.API_BLOCKED_PREFIXES)
                    self.state = 6534
                    self.match(SnowflakeParser.EQ)
                    self.state = 6535
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 6536
                    self.string()
                    self.state = 6537
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 6541
                self.match(SnowflakeParser.ENABLED)
                self.state = 6542
                self.match(SnowflakeParser.EQ)
                self.state = 6543
                self.true_false()
                self.state = 6545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 6544
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6547
                self.match(SnowflakeParser.CREATE)
                self.state = 6549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 6548
                    self.or_replace()


                self.state = 6551
                self.match(SnowflakeParser.API)
                self.state = 6552
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 6554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
                if la_ == 1:
                    self.state = 6553
                    self.if_not_exists()


                self.state = 6556
                self.id_()
                self.state = 6557
                self.match(SnowflakeParser.API_PROVIDER)
                self.state = 6558
                self.match(SnowflakeParser.EQ)
                self.state = 6559
                self.id_()
                self.state = 6560
                self.match(SnowflakeParser.AZURE_TENANT_ID)
                self.state = 6561
                self.match(SnowflakeParser.EQ)
                self.state = 6562
                self.string()
                self.state = 6563
                self.match(SnowflakeParser.AZURE_AD_APPLICATION_ID)
                self.state = 6564
                self.match(SnowflakeParser.EQ)
                self.state = 6565
                self.string()
                self.state = 6569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 6566
                    self.match(SnowflakeParser.API_KEY)
                    self.state = 6567
                    self.match(SnowflakeParser.EQ)
                    self.state = 6568
                    self.string()


                self.state = 6571
                self.match(SnowflakeParser.API_ALLOWED_PREFIXES)
                self.state = 6572
                self.match(SnowflakeParser.EQ)
                self.state = 6573
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6574
                self.string()
                self.state = 6575
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 6582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 6576
                    self.match(SnowflakeParser.API_BLOCKED_PREFIXES)
                    self.state = 6577
                    self.match(SnowflakeParser.EQ)
                    self.state = 6578
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 6579
                    self.string()
                    self.state = 6580
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 6584
                self.match(SnowflakeParser.ENABLED)
                self.state = 6585
                self.match(SnowflakeParser.EQ)
                self.state = 6586
                self.true_false()
                self.state = 6588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 6587
                    self.comment_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6590
                self.match(SnowflakeParser.CREATE)
                self.state = 6591
                self.or_replace()
                self.state = 6592
                self.match(SnowflakeParser.API)
                self.state = 6593
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 6594
                self.if_not_exists()
                self.state = 6595
                self.id_()
                self.state = 6596
                self.match(SnowflakeParser.API_PROVIDER)
                self.state = 6597
                self.match(SnowflakeParser.EQ)
                self.state = 6598
                self.id_()
                self.state = 6599
                self.match(SnowflakeParser.GOOGLE_AUDIENCE)
                self.state = 6600
                self.match(SnowflakeParser.EQ)
                self.state = 6601
                self.string()
                self.state = 6602
                self.match(SnowflakeParser.API_ALLOWED_PREFIXES)
                self.state = 6603
                self.match(SnowflakeParser.EQ)
                self.state = 6604
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6605
                self.string()
                self.state = 6606
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 6613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 6607
                    self.match(SnowflakeParser.API_BLOCKED_PREFIXES)
                    self.state = 6608
                    self.match(SnowflakeParser.EQ)
                    self.state = 6609
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 6610
                    self.string()
                    self.state = 6611
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 6615
                self.match(SnowflakeParser.ENABLED)
                self.state = 6616
                self.match(SnowflakeParser.EQ)
                self.state = 6617
                self.true_false()
                self.state = 6619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 6618
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_object_cloneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def CLONE(self):
            return self.getToken(SnowflakeParser.CLONE, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def at_before1(self):
            return self.getTypedRuleContext(SnowflakeParser.At_before1Context,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def OFFSET(self):
            return self.getToken(SnowflakeParser.OFFSET, 0)

        def STATEMENT(self):
            return self.getToken(SnowflakeParser.STATEMENT, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(SnowflakeParser.FORMAT, 0)

        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_object_clone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_object_clone" ):
                listener.enterCreate_object_clone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_object_clone" ):
                listener.exitCreate_object_clone(self)




    def create_object_clone(self):

        localctx = SnowflakeParser.Create_object_cloneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_create_object_clone)
        self._la = 0 # Token type
        try:
            self.state = 6670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6623
                self.match(SnowflakeParser.CREATE)
                self.state = 6625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 6624
                    self.or_replace()


                self.state = 6627
                _la = self._input.LA(1)
                if not(_la==169 or _la==656 or _la==747):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6629
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,714,self._ctx)
                if la_ == 1:
                    self.state = 6628
                    self.if_not_exists()


                self.state = 6631
                self.id_()
                self.state = 6632
                self.match(SnowflakeParser.CLONE)
                self.state = 6633
                self.object_name()
                self.state = 6649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48 or _la==83:
                    self.state = 6634
                    self.at_before1()
                    self.state = 6635
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 6645
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [766]:
                        self.state = 6636
                        self.match(SnowflakeParser.TIMESTAMP)
                        self.state = 6637
                        self.match(SnowflakeParser.ASSOC)
                        self.state = 6638
                        self.string()
                        pass
                    elif token in [482]:
                        self.state = 6639
                        self.match(SnowflakeParser.OFFSET)
                        self.state = 6640
                        self.match(SnowflakeParser.ASSOC)
                        self.state = 6641
                        self.string()
                        pass
                    elif token in [716]:
                        self.state = 6642
                        self.match(SnowflakeParser.STATEMENT)
                        self.state = 6643
                        self.match(SnowflakeParser.ASSOC)
                        self.state = 6644
                        self.id_()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 6647
                    self.match(SnowflakeParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6651
                self.match(SnowflakeParser.CREATE)
                self.state = 6653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 6652
                    self.or_replace()


                self.state = 6661
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [706]:
                    self.state = 6655
                    self.match(SnowflakeParser.STAGE)
                    pass
                elif token in [270]:
                    self.state = 6656
                    self.match(SnowflakeParser.FILE)
                    self.state = 6657
                    self.match(SnowflakeParser.FORMAT)
                    pass
                elif token in [670]:
                    self.state = 6658
                    self.match(SnowflakeParser.SEQUENCE)
                    pass
                elif token in [728]:
                    self.state = 6659
                    self.match(SnowflakeParser.STREAM)
                    pass
                elif token in [757]:
                    self.state = 6660
                    self.match(SnowflakeParser.TASK)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,719,self._ctx)
                if la_ == 1:
                    self.state = 6663
                    self.if_not_exists()


                self.state = 6666
                self.object_name()
                self.state = 6667
                self.match(SnowflakeParser.CLONE)
                self.state = 6668
                self.object_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_connectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def CONNECTION(self):
            return self.getToken(SnowflakeParser.CONNECTION, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def REPLICA(self):
            return self.getToken(SnowflakeParser.REPLICA, 0)

        def OF(self):
            return self.getToken(SnowflakeParser.OF, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DOT)
            else:
                return self.getToken(SnowflakeParser.DOT, i)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_connection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_connection" ):
                listener.enterCreate_connection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_connection" ):
                listener.exitCreate_connection(self)




    def create_connection(self):

        localctx = SnowflakeParser.Create_connectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_create_connection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6672
            self.match(SnowflakeParser.CREATE)
            self.state = 6673
            self.match(SnowflakeParser.CONNECTION)
            self.state = 6675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
            if la_ == 1:
                self.state = 6674
                self.if_not_exists()


            self.state = 6677
            self.id_()
            self.state = 6692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1, 138, 938]:
                self.state = 6679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 6678
                    self.comment_clause()


                pass
            elif token in [45]:
                self.state = 6681
                self.match(SnowflakeParser.AS)
                self.state = 6682
                self.match(SnowflakeParser.REPLICA)
                self.state = 6683
                self.match(SnowflakeParser.OF)
                self.state = 6684
                self.id_()
                self.state = 6685
                self.match(SnowflakeParser.DOT)
                self.state = 6686
                self.id_()
                self.state = 6687
                self.match(SnowflakeParser.DOT)
                self.state = 6688
                self.id_()
                self.state = 6690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 6689
                    self.comment_clause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def TRANSIENT(self):
            return self.getToken(SnowflakeParser.TRANSIENT, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def clone_at_before(self):
            return self.getTypedRuleContext(SnowflakeParser.Clone_at_beforeContext,0)


        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def default_ddl_collation(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_ddl_collationContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)




    def create_database(self):

        localctx = SnowflakeParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6694
            self.match(SnowflakeParser.CREATE)
            self.state = 6696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 6695
                self.or_replace()


            self.state = 6699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==793:
                self.state = 6698
                self.match(SnowflakeParser.TRANSIENT)


            self.state = 6701
            self.match(SnowflakeParser.DATABASE)
            self.state = 6703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
            if la_ == 1:
                self.state = 6702
                self.if_not_exists()


            self.state = 6705
            self.id_()
            self.state = 6707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 6706
                self.clone_at_before()


            self.state = 6712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 6709
                self.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS)
                self.state = 6710
                self.match(SnowflakeParser.EQ)
                self.state = 6711
                self.num()


            self.state = 6717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==413:
                self.state = 6714
                self.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS)
                self.state = 6715
                self.match(SnowflakeParser.EQ)
                self.state = 6716
                self.num()


            self.state = 6720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==183:
                self.state = 6719
                self.default_ddl_collation()


            self.state = 6723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 6722
                self.with_tags()


            self.state = 6726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 6725
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Clone_at_beforeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE(self):
            return self.getToken(SnowflakeParser.CLONE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def at_before1(self):
            return self.getTypedRuleContext(SnowflakeParser.At_before1Context,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def OFFSET(self):
            return self.getToken(SnowflakeParser.OFFSET, 0)

        def STATEMENT(self):
            return self.getToken(SnowflakeParser.STATEMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_clone_at_before

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClone_at_before" ):
                listener.enterClone_at_before(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClone_at_before" ):
                listener.exitClone_at_before(self)




    def clone_at_before(self):

        localctx = SnowflakeParser.Clone_at_beforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_clone_at_before)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6728
            self.match(SnowflakeParser.CLONE)
            self.state = 6729
            self.id_()
            self.state = 6745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48 or _la==83:
                self.state = 6730
                self.at_before1()
                self.state = 6731
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [766]:
                    self.state = 6732
                    self.match(SnowflakeParser.TIMESTAMP)
                    self.state = 6733
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 6734
                    self.string()
                    pass
                elif token in [482]:
                    self.state = 6735
                    self.match(SnowflakeParser.OFFSET)
                    self.state = 6736
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 6737
                    self.string()
                    pass
                elif token in [716]:
                    self.state = 6738
                    self.match(SnowflakeParser.STATEMENT)
                    self.state = 6739
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 6740
                    self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6743
                self.match(SnowflakeParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_before1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_KEYWORD(self):
            return self.getToken(SnowflakeParser.AT_KEYWORD, 0)

        def BEFORE(self):
            return self.getToken(SnowflakeParser.BEFORE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_at_before1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_before1" ):
                listener.enterAt_before1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_before1" ):
                listener.exitAt_before1(self)




    def at_before1(self):

        localctx = SnowflakeParser.At_before1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_at_before1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6747
            _la = self._input.LA(1)
            if not(_la==48 or _la==83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Header_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_header_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeader_decl" ):
                listener.enterHeader_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeader_decl" ):
                listener.exitHeader_decl(self)




    def header_decl(self):

        localctx = SnowflakeParser.Header_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_header_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6749
            self.string()
            self.state = 6750
            self.match(SnowflakeParser.EQ)
            self.state = 6751
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compression_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONE(self):
            return self.getToken(SnowflakeParser.NONE, 0)

        def GZIP(self):
            return self.getToken(SnowflakeParser.GZIP, 0)

        def DEFLATE(self):
            return self.getToken(SnowflakeParser.DEFLATE, 0)

        def AUTO(self):
            return self.getToken(SnowflakeParser.AUTO, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_compression_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression_type" ):
                listener.enterCompression_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression_type" ):
                listener.exitCompression_type(self)




    def compression_type(self):

        localctx = SnowflakeParser.Compression_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_compression_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6753
            _la = self._input.LA(1)
            if not(_la==51 or _la==191 or _la==313 or _la==444):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPRESSION(self):
            return self.getToken(SnowflakeParser.COMPRESSION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def compression_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Compression_typeContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_compression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression" ):
                listener.enterCompression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression" ):
                listener.exitCompression(self)




    def compression(self):

        localctx = SnowflakeParser.CompressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_compression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6755
            self.match(SnowflakeParser.COMPRESSION)
            self.state = 6756
            self.match(SnowflakeParser.EQ)
            self.state = 6757
            self.compression_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_datasetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ds = None # Object_nameContext

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def DATASET(self):
            return self.getToken(SnowflakeParser.DATASET, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_dataset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_dataset" ):
                listener.enterCreate_dataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_dataset" ):
                listener.exitCreate_dataset(self)




    def create_dataset(self):

        localctx = SnowflakeParser.Create_datasetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_create_dataset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6759
            self.match(SnowflakeParser.CREATE)
            self.state = 6761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 6760
                self.or_replace()


            self.state = 6763
            self.match(SnowflakeParser.DATASET)
            self.state = 6765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,737,self._ctx)
            if la_ == 1:
                self.state = 6764
                self.if_not_exists()


            self.state = 6767
            localctx.ds = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_dynamic_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def DYNAMIC(self):
            return self.getToken(SnowflakeParser.DYNAMIC, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def TRANSIENT(self):
            return self.getToken(SnowflakeParser.TRANSIENT, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def materialized_col_decl_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Materialized_col_decl_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def dynamic_table_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Dynamic_table_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Dynamic_table_paramsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_dynamic_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_dynamic_table" ):
                listener.enterCreate_dynamic_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_dynamic_table" ):
                listener.exitCreate_dynamic_table(self)




    def create_dynamic_table(self):

        localctx = SnowflakeParser.Create_dynamic_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_create_dynamic_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6769
            self.match(SnowflakeParser.CREATE)
            self.state = 6771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 6770
                self.or_replace()


            self.state = 6774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==793:
                self.state = 6773
                self.match(SnowflakeParser.TRANSIENT)


            self.state = 6776
            self.match(SnowflakeParser.DYNAMIC)
            self.state = 6777
            self.match(SnowflakeParser.TABLE)
            self.state = 6779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
            if la_ == 1:
                self.state = 6778
                self.if_not_exists()


            self.state = 6781
            self.object_name()
            self.state = 6786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==931:
                self.state = 6782
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6783
                self.materialized_col_decl_list()
                self.state = 6784
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 6789 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6788
                self.dynamic_table_params()
                self.state = 6791 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4507997673881729) != 0) or _la==345 or _la==373 or _la==413 or _la==582 or _la==626 or _la==754 or _la==756 or _la==838 or _la==847):
                    break

            self.state = 6793
            self.match(SnowflakeParser.AS)
            self.state = 6794
            self.query_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_table_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamic_table_settable_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Dynamic_table_settable_paramsContext,0)


        def REFRESH_MODE(self):
            return self.getToken(SnowflakeParser.REFRESH_MODE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def AUTO(self):
            return self.getToken(SnowflakeParser.AUTO, 0)

        def FULL(self):
            return self.getToken(SnowflakeParser.FULL, 0)

        def INCREMENTAL(self):
            return self.getToken(SnowflakeParser.INCREMENTAL, 0)

        def INITIALIZE(self):
            return self.getToken(SnowflakeParser.INITIALIZE, 0)

        def ON_CREATE(self):
            return self.getToken(SnowflakeParser.ON_CREATE, 0)

        def ON_SCHEDULE(self):
            return self.getToken(SnowflakeParser.ON_SCHEDULE, 0)

        def cluster_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Cluster_byContext,0)


        def with_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_row_access_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_dynamic_table_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_table_params" ):
                listener.enterDynamic_table_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_table_params" ):
                listener.exitDynamic_table_params(self)




    def dynamic_table_params(self):

        localctx = SnowflakeParser.Dynamic_table_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_dynamic_table_params)
        self._la = 0 # Token type
        try:
            self.state = 6806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6796
                self.dynamic_table_settable_params()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6797
                self.match(SnowflakeParser.REFRESH_MODE)
                self.state = 6798
                self.match(SnowflakeParser.EQ)
                self.state = 6799
                _la = self._input.LA(1)
                if not(_la==51 or _la==286 or _la==342):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6800
                self.match(SnowflakeParser.INITIALIZE)
                self.state = 6801
                self.match(SnowflakeParser.EQ)
                self.state = 6802
                _la = self._input.LA(1)
                if not(_la==491 or _la==493):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6803
                self.cluster_by()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6804
                self.with_row_access_policy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6805
                self.with_tags()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_table_settable_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.wh = None # Id_Context

        def TARGET_LAG(self):
            return self.getToken(SnowflakeParser.TARGET_LAG, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def DOWNSTREAM(self):
            return self.getToken(SnowflakeParser.DOWNSTREAM, 0)

        def LAG(self):
            return self.getToken(SnowflakeParser.LAG, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def set_data_retention_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_data_retention_paramsContext,0)


        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def STRING(self):
            return self.getToken(SnowflakeParser.STRING, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_dynamic_table_settable_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_table_settable_params" ):
                listener.enterDynamic_table_settable_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_table_settable_params" ):
                listener.exitDynamic_table_settable_params(self)




    def dynamic_table_settable_params(self):

        localctx = SnowflakeParser.Dynamic_table_settable_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_dynamic_table_settable_params)
        try:
            self.state = 6828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [756]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6808
                self.match(SnowflakeParser.TARGET_LAG)
                self.state = 6809
                self.match(SnowflakeParser.EQ)
                self.state = 6812
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 6810
                    self.string()
                    pass
                elif token in [207]:
                    self.state = 6811
                    self.match(SnowflakeParser.DOWNSTREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [373]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6814
                self.match(SnowflakeParser.LAG)
                self.state = 6815
                self.match(SnowflakeParser.EQ)
                self.state = 6818
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 6816
                    self.string()
                    pass
                elif token in [207]:
                    self.state = 6817
                    self.match(SnowflakeParser.DOWNSTREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [838]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6820
                self.match(SnowflakeParser.WAREHOUSE)
                self.state = 6821
                self.match(SnowflakeParser.EQ)
                self.state = 6822
                localctx.wh = self.id_()
                pass
            elif token in [173, 413]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6823
                self.set_data_retention_params()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6824
                self.match(SnowflakeParser.DEFAULT_DDL_COLLATION_)
                self.state = 6825
                self.match(SnowflakeParser.EQ)
                self.state = 6826
                self.match(SnowflakeParser.STRING)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6827
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_table_unsettable_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_retention_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_retention_paramsContext,0)


        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_dynamic_table_unsettable_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_table_unsettable_params" ):
                listener.enterDynamic_table_unsettable_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_table_unsettable_params" ):
                listener.exitDynamic_table_unsettable_params(self)




    def dynamic_table_unsettable_params(self):

        localctx = SnowflakeParser.Dynamic_table_unsettable_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_dynamic_table_unsettable_params)
        try:
            self.state = 6833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [173, 413]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6830
                self.data_retention_params()
                pass
            elif token in [183]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6831
                self.match(SnowflakeParser.DEFAULT_DDL_COLLATION_)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6832
                self.match(SnowflakeParser.COMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_retention_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_data_retention_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_retention_params" ):
                listener.enterData_retention_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_retention_params" ):
                listener.exitData_retention_params(self)




    def data_retention_params(self):

        localctx = SnowflakeParser.Data_retention_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_data_retention_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6835
            _la = self._input.LA(1)
            if not(_la==173 or _la==413):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_data_retention_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_retention_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_retention_paramsContext,0)


        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_set_data_retention_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_data_retention_params" ):
                listener.enterSet_data_retention_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_data_retention_params" ):
                listener.exitSet_data_retention_params(self)




    def set_data_retention_params(self):

        localctx = SnowflakeParser.Set_data_retention_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_set_data_retention_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6837
            self.data_retention_params()
            self.state = 6838
            self.match(SnowflakeParser.EQ)
            self.state = 6839
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_event_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(SnowflakeParser.EVENT, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def cluster_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Cluster_byContext,0)


        def data_retention_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Data_retention_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Data_retention_paramsContext,i)


        def change_tracking(self):
            return self.getTypedRuleContext(SnowflakeParser.Change_trackingContext,0)


        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def with_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_row_access_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_event_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_event_table" ):
                listener.enterCreate_event_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_event_table" ):
                listener.exitCreate_event_table(self)




    def create_event_table(self):

        localctx = SnowflakeParser.Create_event_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_create_event_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6841
            self.match(SnowflakeParser.CREATE)
            self.state = 6843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 6842
                self.or_replace()


            self.state = 6845
            self.match(SnowflakeParser.EVENT)
            self.state = 6846
            self.match(SnowflakeParser.TABLE)
            self.state = 6848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,749,self._ctx)
            if la_ == 1:
                self.state = 6847
                self.if_not_exists()


            self.state = 6850
            self.id_()
            self.state = 6852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 6851
                self.cluster_by()


            self.state = 6857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==173 or _la==413:
                self.state = 6854
                self.data_retention_params()
                self.state = 6859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 6860
                self.change_tracking()


            self.state = 6866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==183:
                self.state = 6863
                self.match(SnowflakeParser.DEFAULT_DDL_COLLATION_)
                self.state = 6864
                self.match(SnowflakeParser.EQ)
                self.state = 6865
                self.string()


            self.state = 6869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 6868
                self.copy_grants()


            self.state = 6872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
            if la_ == 1:
                self.state = 6871
                self.with_row_access_policy()


            self.state = 6875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
            if la_ == 1:
                self.state = 6874
                self.with_tags()


            self.state = 6881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138 or _la==847:
                self.state = 6878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==847:
                    self.state = 6877
                    self.match(SnowflakeParser.WITH)


                self.state = 6880
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_external_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def RETURNS(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RETURNS)
            else:
                return self.getToken(SnowflakeParser.RETURNS, i)

        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def API_INTEGRATION(self):
            return self.getToken(SnowflakeParser.API_INTEGRATION, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def arg_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Arg_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Arg_nameContext,i)


        def arg_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Arg_data_typeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Arg_data_typeContext,i)


        def null_not_null(self):
            return self.getTypedRuleContext(SnowflakeParser.Null_not_nullContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def HEADERS(self):
            return self.getToken(SnowflakeParser.HEADERS, 0)

        def header_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Header_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Header_declContext,i)


        def CONTEXT_HEADERS(self):
            return self.getToken(SnowflakeParser.CONTEXT_HEADERS, 0)

        def MAX_BATCH_ROWS(self):
            return self.getToken(SnowflakeParser.MAX_BATCH_ROWS, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def compression(self):
            return self.getTypedRuleContext(SnowflakeParser.CompressionContext,0)


        def REQUEST_TRANSLATOR(self):
            return self.getToken(SnowflakeParser.REQUEST_TRANSLATOR, 0)

        def RESPONSE_TRANSLATOR(self):
            return self.getToken(SnowflakeParser.RESPONSE_TRANSLATOR, 0)

        def VOLATILE(self):
            return self.getToken(SnowflakeParser.VOLATILE, 0)

        def IMMUTABLE(self):
            return self.getToken(SnowflakeParser.IMMUTABLE, 0)

        def CALLED(self):
            return self.getToken(SnowflakeParser.CALLED, 0)

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.NULL_)
            else:
                return self.getToken(SnowflakeParser.NULL_, i)

        def INPUT(self):
            return self.getToken(SnowflakeParser.INPUT, 0)

        def STRICT(self):
            return self.getToken(SnowflakeParser.STRICT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_external_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_external_function" ):
                listener.enterCreate_external_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_external_function" ):
                listener.exitCreate_external_function(self)




    def create_external_function(self):

        localctx = SnowflakeParser.Create_external_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_create_external_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6883
            self.match(SnowflakeParser.CREATE)
            self.state = 6885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 6884
                self.or_replace()


            self.state = 6888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==665:
                self.state = 6887
                self.match(SnowflakeParser.SECURE)


            self.state = 6890
            self.match(SnowflakeParser.EXTERNAL)
            self.state = 6891
            self.match(SnowflakeParser.FUNCTION)
            self.state = 6892
            self.object_name()
            self.state = 6893
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 6905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                self.state = 6894
                self.arg_name()
                self.state = 6895
                self.arg_data_type()
                self.state = 6902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6896
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6897
                    self.arg_name()
                    self.state = 6898
                    self.arg_data_type()
                    self.state = 6904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6907
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 6908
            self.match(SnowflakeParser.RETURNS)
            self.state = 6909
            self.data_type()
            self.state = 6911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448 or _la==458:
                self.state = 6910
                self.null_not_null()


            self.state = 6925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [102]:
                self.state = 6913
                self.match(SnowflakeParser.CALLED)
                self.state = 6914
                self.match(SnowflakeParser.ON)
                self.state = 6915
                self.match(SnowflakeParser.NULL_)
                self.state = 6916
                self.match(SnowflakeParser.INPUT)
                pass
            elif token in [611, 730]:
                self.state = 6923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [611]:
                    self.state = 6917
                    self.match(SnowflakeParser.RETURNS)
                    self.state = 6918
                    self.match(SnowflakeParser.NULL_)
                    self.state = 6919
                    self.match(SnowflakeParser.ON)
                    self.state = 6920
                    self.match(SnowflakeParser.NULL_)
                    self.state = 6921
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [730]:
                    self.state = 6922
                    self.match(SnowflakeParser.STRICT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [37, 138, 335, 837]:
                pass
            else:
                pass
            self.state = 6928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==335 or _la==837:
                self.state = 6927
                _la = self._input.LA(1)
                if not(_la==335 or _la==837):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 6930
                self.comment_clause()


            self.state = 6933
            self.match(SnowflakeParser.API_INTEGRATION)
            self.state = 6934
            self.match(SnowflakeParser.EQ)
            self.state = 6935
            self.id_()
            self.state = 6949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==320:
                self.state = 6936
                self.match(SnowflakeParser.HEADERS)
                self.state = 6937
                self.match(SnowflakeParser.EQ)
                self.state = 6938
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6939
                self.header_decl()
                self.state = 6944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6940
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6941
                    self.header_decl()
                    self.state = 6946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6947
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 6964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==150:
                self.state = 6951
                self.match(SnowflakeParser.CONTEXT_HEADERS)
                self.state = 6952
                self.match(SnowflakeParser.EQ)
                self.state = 6953
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6954
                self.id_()
                self.state = 6959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 6955
                    self.match(SnowflakeParser.COMMA)
                    self.state = 6956
                    self.id_()
                    self.state = 6961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6962
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 6969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==410:
                self.state = 6966
                self.match(SnowflakeParser.MAX_BATCH_ROWS)
                self.state = 6967
                self.match(SnowflakeParser.EQ)
                self.state = 6968
                self.num()


            self.state = 6972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==140:
                self.state = 6971
                self.compression()


            self.state = 6977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==598:
                self.state = 6974
                self.match(SnowflakeParser.REQUEST_TRANSLATOR)
                self.state = 6975
                self.match(SnowflakeParser.EQ)
                self.state = 6976
                self.id_()


            self.state = 6982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==606:
                self.state = 6979
                self.match(SnowflakeParser.RESPONSE_TRANSLATOR)
                self.state = 6980
                self.match(SnowflakeParser.EQ)
                self.state = 6981
                self.id_()


            self.state = 6984
            self.match(SnowflakeParser.AS)
            self.state = 6985
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_external_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def external_table_column_decl_list(self):
            return self.getTypedRuleContext(SnowflakeParser.External_table_column_decl_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def LOCATION(self):
            return self.getToken(SnowflakeParser.LOCATION, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def named_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Named_stageContext,0)


        def file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.File_formatContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def cloud_provider_params3(self):
            return self.getTypedRuleContext(SnowflakeParser.Cloud_provider_params3Context,0)


        def partition_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Partition_byContext,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def REFRESH_ON_CREATE(self):
            return self.getToken(SnowflakeParser.REFRESH_ON_CREATE, 0)

        def true_false(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.True_falseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.True_falseContext,i)


        def AUTO_REFRESH(self):
            return self.getToken(SnowflakeParser.AUTO_REFRESH, 0)

        def pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.PatternContext,0)


        def AWS_SNS_TOPIC(self):
            return self.getToken(SnowflakeParser.AWS_SNS_TOPIC, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def with_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_row_access_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def PARTITION_TYPE(self):
            return self.getToken(SnowflakeParser.PARTITION_TYPE, 0)

        def USER_SPECIFIED(self):
            return self.getToken(SnowflakeParser.USER_SPECIFIED, 0)

        def TABLE_FORMAT(self):
            return self.getToken(SnowflakeParser.TABLE_FORMAT, 0)

        def DELTA(self):
            return self.getToken(SnowflakeParser.DELTA, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_external_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_external_table" ):
                listener.enterCreate_external_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_external_table" ):
                listener.exitCreate_external_table(self)




    def create_external_table(self):

        localctx = SnowflakeParser.Create_external_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_create_external_table)
        self._la = 0 # Token type
        try:
            self.state = 7130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6987
                self.match(SnowflakeParser.CREATE)
                self.state = 6989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 6988
                    self.or_replace()


                self.state = 6991
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 6992
                self.match(SnowflakeParser.TABLE)
                self.state = 6994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
                if la_ == 1:
                    self.state = 6993
                    self.if_not_exists()


                self.state = 6996
                self.object_name()
                self.state = 6997
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 6998
                self.external_table_column_decl_list()
                self.state = 6999
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 7000
                    self.cloud_provider_params3()


                self.state = 7004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==518:
                    self.state = 7003
                    self.partition_by()


                self.state = 7007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==847:
                    self.state = 7006
                    self.match(SnowflakeParser.WITH)


                self.state = 7009
                self.match(SnowflakeParser.LOCATION)
                self.state = 7010
                self.match(SnowflakeParser.EQ)
                self.state = 7011
                self.named_stage()
                self.state = 7015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==583:
                    self.state = 7012
                    self.match(SnowflakeParser.REFRESH_ON_CREATE)
                    self.state = 7013
                    self.match(SnowflakeParser.EQ)
                    self.state = 7014
                    self.true_false()


                self.state = 7020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 7017
                    self.match(SnowflakeParser.AUTO_REFRESH)
                    self.state = 7018
                    self.match(SnowflakeParser.EQ)
                    self.state = 7019
                    self.true_false()


                self.state = 7023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==534:
                    self.state = 7022
                    self.pattern()


                self.state = 7025
                self.file_format()
                self.state = 7029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 7026
                    self.match(SnowflakeParser.AWS_SNS_TOPIC)
                    self.state = 7027
                    self.match(SnowflakeParser.EQ)
                    self.state = 7028
                    self.string()


                self.state = 7032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 7031
                    self.copy_grants()


                self.state = 7035
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,786,self._ctx)
                if la_ == 1:
                    self.state = 7034
                    self.with_row_access_policy()


                self.state = 7038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 7037
                    self.with_tags()


                self.state = 7041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7040
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7043
                self.match(SnowflakeParser.CREATE)
                self.state = 7045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7044
                    self.or_replace()


                self.state = 7047
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 7048
                self.match(SnowflakeParser.TABLE)
                self.state = 7050
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,790,self._ctx)
                if la_ == 1:
                    self.state = 7049
                    self.if_not_exists()


                self.state = 7052
                self.object_name()
                self.state = 7053
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7054
                self.external_table_column_decl_list()
                self.state = 7055
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 7056
                    self.cloud_provider_params3()


                self.state = 7060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==518:
                    self.state = 7059
                    self.partition_by()


                self.state = 7063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==847:
                    self.state = 7062
                    self.match(SnowflakeParser.WITH)


                self.state = 7065
                self.match(SnowflakeParser.LOCATION)
                self.state = 7066
                self.match(SnowflakeParser.EQ)
                self.state = 7067
                self.named_stage()
                self.state = 7068
                self.match(SnowflakeParser.PARTITION_TYPE)
                self.state = 7069
                self.match(SnowflakeParser.EQ)
                self.state = 7070
                self.match(SnowflakeParser.USER_SPECIFIED)
                self.state = 7071
                self.file_format()
                self.state = 7073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 7072
                    self.copy_grants()


                self.state = 7076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
                if la_ == 1:
                    self.state = 7075
                    self.with_row_access_policy()


                self.state = 7079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 7078
                    self.with_tags()


                self.state = 7082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7081
                    self.comment_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7084
                self.match(SnowflakeParser.CREATE)
                self.state = 7086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7085
                    self.or_replace()


                self.state = 7088
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 7089
                self.match(SnowflakeParser.TABLE)
                self.state = 7091
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,799,self._ctx)
                if la_ == 1:
                    self.state = 7090
                    self.if_not_exists()


                self.state = 7093
                self.object_name()
                self.state = 7094
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7095
                self.external_table_column_decl_list()
                self.state = 7096
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==354:
                    self.state = 7097
                    self.cloud_provider_params3()


                self.state = 7101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==518:
                    self.state = 7100
                    self.partition_by()


                self.state = 7104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==847:
                    self.state = 7103
                    self.match(SnowflakeParser.WITH)


                self.state = 7106
                self.match(SnowflakeParser.LOCATION)
                self.state = 7107
                self.match(SnowflakeParser.EQ)
                self.state = 7108
                self.named_stage()
                self.state = 7109
                self.match(SnowflakeParser.PARTITION_TYPE)
                self.state = 7110
                self.match(SnowflakeParser.EQ)
                self.state = 7111
                self.match(SnowflakeParser.USER_SPECIFIED)
                self.state = 7112
                self.file_format()
                self.state = 7116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==752:
                    self.state = 7113
                    self.match(SnowflakeParser.TABLE_FORMAT)
                    self.state = 7114
                    self.match(SnowflakeParser.EQ)
                    self.state = 7115
                    self.match(SnowflakeParser.DELTA)


                self.state = 7119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 7118
                    self.copy_grants()


                self.state = 7122
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
                if la_ == 1:
                    self.state = 7121
                    self.with_row_access_policy()


                self.state = 7125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 7124
                    self.with_tags()


                self.state = 7128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7127
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_table_column_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def inline_constraint(self):
            return self.getTypedRuleContext(SnowflakeParser.Inline_constraintContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_external_table_column_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_table_column_decl" ):
                listener.enterExternal_table_column_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_table_column_decl" ):
                listener.exitExternal_table_column_decl(self)




    def external_table_column_decl(self):

        localctx = SnowflakeParser.External_table_column_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_external_table_column_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7132
            self.column_name()
            self.state = 7133
            self.data_type()
            self.state = 7134
            self.match(SnowflakeParser.AS)
            self.state = 7137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
            if la_ == 1:
                self.state = 7135
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 7136
                self.id_()
                pass


            self.state = 7140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148 or _la==280 or _la==551 or _la==806:
                self.state = 7139
                self.inline_constraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_table_column_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def external_table_column_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.External_table_column_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.External_table_column_declContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_external_table_column_decl_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_table_column_decl_list" ):
                listener.enterExternal_table_column_decl_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_table_column_decl_list" ):
                listener.exitExternal_table_column_decl_list(self)




    def external_table_column_decl_list(self):

        localctx = SnowflakeParser.External_table_column_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_external_table_column_decl_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7142
            self.external_table_column_decl()
            self.state = 7147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 7143
                self.match(SnowflakeParser.COMMA)
                self.state = 7144
                self.external_table_column_decl()
                self.state = 7149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_acctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_full_acct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_acct" ):
                listener.enterFull_acct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_acct" ):
                listener.exitFull_acct(self)




    def full_acct(self):

        localctx = SnowflakeParser.Full_acctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_full_acct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7150
            self.id_()
            self.state = 7151
            self.match(SnowflakeParser.DOT)
            self.state = 7152
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integration_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def INTEGRATIONS(self):
            return self.getToken(SnowflakeParser.INTEGRATIONS, 0)

        def API(self):
            return self.getToken(SnowflakeParser.API, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_integration_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegration_type_name" ):
                listener.enterIntegration_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegration_type_name" ):
                listener.exitIntegration_type_name(self)




    def integration_type_name(self):

        localctx = SnowflakeParser.Integration_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_integration_type_name)
        try:
            self.state = 7158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [666]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7154
                self.match(SnowflakeParser.SECURITY)
                self.state = 7155
                self.match(SnowflakeParser.INTEGRATIONS)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7156
                self.match(SnowflakeParser.API)
                self.state = 7157
                self.match(SnowflakeParser.INTEGRATIONS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_failover_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def FAILOVER(self):
            return self.getToken(SnowflakeParser.FAILOVER, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def OBJECT_TYPES(self):
            return self.getToken(SnowflakeParser.OBJECT_TYPES, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def object_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_typeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_typeContext,i)


        def ALLOWED_ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0)

        def full_acct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Full_acctContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Full_acctContext,i)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def ALLOWED_DATABASES(self):
            return self.getToken(SnowflakeParser.ALLOWED_DATABASES, 0)

        def ALLOWED_SHARES(self):
            return self.getToken(SnowflakeParser.ALLOWED_SHARES, 0)

        def ALLOWED_INTEGRATION_TYPES(self):
            return self.getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0)

        def integration_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Integration_type_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Integration_type_nameContext,i)


        def IGNORE(self):
            return self.getToken(SnowflakeParser.IGNORE, 0)

        def EDITION(self):
            return self.getToken(SnowflakeParser.EDITION, 0)

        def CHECK(self):
            return self.getToken(SnowflakeParser.CHECK, 0)

        def REPLICATION_SCHEDULE(self):
            return self.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def REPLICA(self):
            return self.getToken(SnowflakeParser.REPLICA, 0)

        def OF(self):
            return self.getToken(SnowflakeParser.OF, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DOT)
            else:
                return self.getToken(SnowflakeParser.DOT, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_failover_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_failover_group" ):
                listener.enterCreate_failover_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_failover_group" ):
                listener.exitCreate_failover_group(self)




    def create_failover_group(self):

        localctx = SnowflakeParser.Create_failover_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_create_failover_group)
        self._la = 0 # Token type
        try:
            self.state = 7249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,825,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7160
                self.match(SnowflakeParser.CREATE)
                self.state = 7161
                self.match(SnowflakeParser.FAILOVER)
                self.state = 7162
                self.match(SnowflakeParser.GROUP)
                self.state = 7164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,813,self._ctx)
                if la_ == 1:
                    self.state = 7163
                    self.if_not_exists()


                self.state = 7166
                self.id_()
                self.state = 7167
                self.match(SnowflakeParser.OBJECT_TYPES)
                self.state = 7168
                self.match(SnowflakeParser.EQ)
                self.state = 7169
                self.object_type()
                self.state = 7174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 7170
                    self.match(SnowflakeParser.COMMA)
                    self.state = 7171
                    self.object_type()
                    self.state = 7176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 7177
                    self.match(SnowflakeParser.ALLOWED_DATABASES)
                    self.state = 7178
                    self.match(SnowflakeParser.EQ)
                    self.state = 7179
                    self.id_()
                    self.state = 7184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7180
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7181
                        self.id_()
                        self.state = 7186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 7189
                    self.match(SnowflakeParser.ALLOWED_SHARES)
                    self.state = 7190
                    self.match(SnowflakeParser.EQ)
                    self.state = 7191
                    self.id_()
                    self.state = 7196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7192
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7193
                        self.id_()
                        self.state = 7198
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7201
                    self.match(SnowflakeParser.ALLOWED_INTEGRATION_TYPES)
                    self.state = 7202
                    self.match(SnowflakeParser.EQ)
                    self.state = 7203
                    self.integration_type_name()
                    self.state = 7208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7204
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7205
                        self.integration_type_name()
                        self.state = 7210
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7213
                self.match(SnowflakeParser.ALLOWED_ACCOUNTS)
                self.state = 7214
                self.match(SnowflakeParser.EQ)
                self.state = 7215
                self.full_acct()
                self.state = 7220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 7216
                    self.match(SnowflakeParser.COMMA)
                    self.state = 7217
                    self.full_acct()
                    self.state = 7222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 7223
                    self.match(SnowflakeParser.IGNORE)
                    self.state = 7224
                    self.match(SnowflakeParser.EDITION)
                    self.state = 7225
                    self.match(SnowflakeParser.CHECK)


                self.state = 7231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==595:
                    self.state = 7228
                    self.match(SnowflakeParser.REPLICATION_SCHEDULE)
                    self.state = 7229
                    self.match(SnowflakeParser.EQ)
                    self.state = 7230
                    self.string()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7233
                self.match(SnowflakeParser.CREATE)
                self.state = 7234
                self.match(SnowflakeParser.FAILOVER)
                self.state = 7235
                self.match(SnowflakeParser.GROUP)
                self.state = 7237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
                if la_ == 1:
                    self.state = 7236
                    self.if_not_exists()


                self.state = 7239
                self.id_()
                self.state = 7240
                self.match(SnowflakeParser.AS)
                self.state = 7241
                self.match(SnowflakeParser.REPLICA)
                self.state = 7242
                self.match(SnowflakeParser.OF)
                self.state = 7243
                self.id_()
                self.state = 7244
                self.match(SnowflakeParser.DOT)
                self.state = 7245
                self.id_()
                self.state = 7246
                self.match(SnowflakeParser.DOT)
                self.state = 7247
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_fileformatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CSV(self):
            return self.getToken(SnowflakeParser.CSV, 0)

        def JSON(self):
            return self.getToken(SnowflakeParser.JSON, 0)

        def AVRO(self):
            return self.getToken(SnowflakeParser.AVRO, 0)

        def ORC(self):
            return self.getToken(SnowflakeParser.ORC, 0)

        def PARQUET(self):
            return self.getToken(SnowflakeParser.PARQUET, 0)

        def XML(self):
            return self.getToken(SnowflakeParser.XML, 0)

        def CSV_Q(self):
            return self.getToken(SnowflakeParser.CSV_Q, 0)

        def JSON_Q(self):
            return self.getToken(SnowflakeParser.JSON_Q, 0)

        def AVRO_Q(self):
            return self.getToken(SnowflakeParser.AVRO_Q, 0)

        def ORC_Q(self):
            return self.getToken(SnowflakeParser.ORC_Q, 0)

        def PARQUET_Q(self):
            return self.getToken(SnowflakeParser.PARQUET_Q, 0)

        def XML_Q(self):
            return self.getToken(SnowflakeParser.XML_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_type_fileformat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_fileformat" ):
                listener.enterType_fileformat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_fileformat" ):
                listener.exitType_fileformat(self)




    def type_fileformat(self):

        localctx = SnowflakeParser.Type_fileformatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_type_fileformat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7251
            _la = self._input.LA(1)
            if not(_la==63 or _la==64 or _la==159 or _la==160 or _la==366 or _la==367 or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 393219) != 0) or _la==855 or _la==856):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_file_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(SnowflakeParser.FORMAT, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def type_fileformat(self):
            return self.getTypedRuleContext(SnowflakeParser.Type_fileformatContext,0)


        def format_type_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Format_type_optionsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Format_type_optionsContext,i)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_file_format" ):
                listener.enterCreate_file_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_file_format" ):
                listener.exitCreate_file_format(self)




    def create_file_format(self):

        localctx = SnowflakeParser.Create_file_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_create_file_format)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7253
            self.match(SnowflakeParser.CREATE)
            self.state = 7255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 7254
                self.or_replace()


            self.state = 7257
            self.match(SnowflakeParser.FILE)
            self.state = 7258
            self.match(SnowflakeParser.FORMAT)
            self.state = 7260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,827,self._ctx)
            if la_ == 1:
                self.state = 7259
                self.if_not_exists()


            self.state = 7262
            self.object_name()
            self.state = 7266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==803:
                self.state = 7263
                self.match(SnowflakeParser.TYPE)
                self.state = 7264
                self.match(SnowflakeParser.EQ)
                self.state = 7265
                self.type_fileformat()


            self.state = 7271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 9007199254750211) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 7205918283424366593) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & -9223336852482686957) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 1152956688978935809) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 35185512939521) != 0) or ((((_la - 687)) & ~0x3f) == 0 and ((1 << (_la - 687)) & 246290604622035) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & 268443649) != 0) or _la==862:
                self.state = 7268
                self.format_type_options()
                self.state = 7273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 7274
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Arg_nameContext,0)


        def arg_data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Arg_data_typeContext,0)


        def arg_default_value_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Arg_default_value_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_arg_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_decl" ):
                listener.enterArg_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_decl" ):
                listener.exitArg_decl(self)




    def arg_decl(self):

        localctx = SnowflakeParser.Arg_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_arg_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7277
            self.arg_name()
            self.state = 7278
            self.arg_data_type()
            self.state = 7280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 7279
                self.arg_default_value_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_default_value_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_arg_default_value_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_default_value_clause" ):
                listener.enterArg_default_value_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_default_value_clause" ):
                listener.exitArg_default_value_clause(self)




    def arg_default_value_clause(self):

        localctx = SnowflakeParser.Arg_default_value_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_arg_default_value_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7282
            self.match(SnowflakeParser.DEFAULT)
            self.state = 7283
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Col_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def virtual_column_decl(self):
            return self.getTypedRuleContext(SnowflakeParser.Virtual_column_declContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_col_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCol_decl" ):
                listener.enterCol_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCol_decl" ):
                listener.exitCol_decl(self)




    def col_decl(self):

        localctx = SnowflakeParser.Col_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_col_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7285
            self.column_name()
            self.state = 7286
            self.data_type()
            self.state = 7288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 7287
                self.virtual_column_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Virtual_column_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def function_call(self):
            return self.getTypedRuleContext(SnowflakeParser.Function_callContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_virtual_column_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtual_column_decl" ):
                listener.enterVirtual_column_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtual_column_decl" ):
                listener.exitVirtual_column_decl(self)




    def virtual_column_decl(self):

        localctx = SnowflakeParser.Virtual_column_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_virtual_column_decl)
        try:
            self.state = 7297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7290
                self.match(SnowflakeParser.AS)
                self.state = 7291
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7292
                self.function_call()
                self.state = 7293
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7295
                self.match(SnowflakeParser.AS)
                self.state = 7296
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def DBL_DOLLAR(self):
            return self.getToken(SnowflakeParser.DBL_DOLLAR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_function_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition" ):
                listener.enterFunction_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition" ):
                listener.exitFunction_definition(self)




    def function_definition(self):

        localctx = SnowflakeParser.Function_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_function_definition)
        try:
            self.state = 7301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [912]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7299
                self.string()
                pass
            elif token in [911]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7300
                self.match(SnowflakeParser.DBL_DOLLAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def RETURNS(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RETURNS)
            else:
                return self.getToken(SnowflakeParser.RETURNS, i)

        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def function_definition(self):
            return self.getTypedRuleContext(SnowflakeParser.Function_definitionContext,0)


        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def arg_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Arg_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Arg_declContext,i)


        def null_not_null(self):
            return self.getTypedRuleContext(SnowflakeParser.Null_not_nullContext,0)


        def LANGUAGE(self):
            return self.getToken(SnowflakeParser.LANGUAGE, 0)

        def CALLED(self):
            return self.getToken(SnowflakeParser.CALLED, 0)

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.NULL_)
            else:
                return self.getToken(SnowflakeParser.NULL_, i)

        def INPUT(self):
            return self.getToken(SnowflakeParser.INPUT, 0)

        def STRICT(self):
            return self.getToken(SnowflakeParser.STRICT, 0)

        def PACKAGES(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.PACKAGES)
            else:
                return self.getToken(SnowflakeParser.PACKAGES, i)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RUNTIME_VERSION(self):
            return self.getToken(SnowflakeParser.RUNTIME_VERSION, 0)

        def IMPORTS(self):
            return self.getToken(SnowflakeParser.IMPORTS, 0)

        def HANDLER(self):
            return self.getToken(SnowflakeParser.HANDLER, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def JAVA(self):
            return self.getToken(SnowflakeParser.JAVA, 0)

        def PYTHON(self):
            return self.getToken(SnowflakeParser.PYTHON, 0)

        def JAVASCRIPT(self):
            return self.getToken(SnowflakeParser.JAVASCRIPT, 0)

        def SQL(self):
            return self.getToken(SnowflakeParser.SQL, 0)

        def VOLATILE(self):
            return self.getToken(SnowflakeParser.VOLATILE, 0)

        def IMMUTABLE(self):
            return self.getToken(SnowflakeParser.IMMUTABLE, 0)

        def col_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Col_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Col_declContext,i)


        def FLOAT(self):
            return self.getToken(SnowflakeParser.FLOAT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def MEMOIZABLE(self):
            return self.getToken(SnowflakeParser.MEMOIZABLE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_function" ):
                listener.enterCreate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_function" ):
                listener.exitCreate_function(self)




    def create_function(self):

        localctx = SnowflakeParser.Create_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_create_function)
        self._la = 0 # Token type
        try:
            self.state = 7474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,866,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7303
                self.match(SnowflakeParser.CREATE)
                self.state = 7305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7304
                    self.or_replace()


                self.state = 7308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7307
                    self.match(SnowflakeParser.SECURE)


                self.state = 7310
                self.match(SnowflakeParser.FUNCTION)
                self.state = 7312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,837,self._ctx)
                if la_ == 1:
                    self.state = 7311
                    self.if_not_exists()


                self.state = 7314
                self.object_name()
                self.state = 7315
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 7316
                    self.arg_decl()
                    self.state = 7321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7317
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7318
                        self.arg_decl()
                        self.state = 7323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7326
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7327
                self.match(SnowflakeParser.RETURNS)
                self.state = 7342
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [113, 114, 353, 460, 477, 763, 766, 770, 772, 776, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894]:
                    self.state = 7328
                    self.data_type()
                    pass
                elif token in [747]:
                    self.state = 7329
                    self.match(SnowflakeParser.TABLE)
                    self.state = 7330
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 7331
                        self.col_decl()
                        self.state = 7336
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==937:
                            self.state = 7332
                            self.match(SnowflakeParser.COMMA)
                            self.state = 7333
                            self.col_decl()
                            self.state = 7338
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 7341
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448 or _la==458:
                    self.state = 7344
                    self.null_not_null()


                self.state = 7349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==374:
                    self.state = 7347
                    self.match(SnowflakeParser.LANGUAGE)
                    self.state = 7348
                    _la = self._input.LA(1)
                    if not(_la==360 or _la==361 or _la==563 or _la==704):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7361
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [102]:
                    self.state = 7351
                    self.match(SnowflakeParser.CALLED)
                    self.state = 7352
                    self.match(SnowflakeParser.ON)
                    self.state = 7353
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7354
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [611]:
                    self.state = 7355
                    self.match(SnowflakeParser.RETURNS)
                    self.state = 7356
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7357
                    self.match(SnowflakeParser.ON)
                    self.state = 7358
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7359
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [730]:
                    self.state = 7360
                    self.match(SnowflakeParser.STRICT)
                    pass
                elif token in [45, 138, 316, 335, 338, 512, 634, 837]:
                    pass
                else:
                    pass
                self.state = 7364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==335 or _la==837:
                    self.state = 7363
                    _la = self._input.LA(1)
                    if not(_la==335 or _la==837):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
                if la_ == 1:
                    self.state = 7366
                    self.match(SnowflakeParser.PACKAGES)
                    self.state = 7367
                    self.match(SnowflakeParser.EQ)
                    self.state = 7368
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7369
                    self.string_list()
                    self.state = 7370
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 7380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==634:
                    self.state = 7374
                    self.match(SnowflakeParser.RUNTIME_VERSION)
                    self.state = 7375
                    self.match(SnowflakeParser.EQ)
                    self.state = 7378
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [912]:
                        self.state = 7376
                        self.string()
                        pass
                    elif token in [914]:
                        self.state = 7377
                        self.match(SnowflakeParser.FLOAT)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 7388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==338:
                    self.state = 7382
                    self.match(SnowflakeParser.IMPORTS)
                    self.state = 7383
                    self.match(SnowflakeParser.EQ)
                    self.state = 7384
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7385
                    self.string_list()
                    self.state = 7386
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 7396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==512:
                    self.state = 7390
                    self.match(SnowflakeParser.PACKAGES)
                    self.state = 7391
                    self.match(SnowflakeParser.EQ)
                    self.state = 7392
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7393
                    self.string_list()
                    self.state = 7394
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 7401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 7398
                    self.match(SnowflakeParser.HANDLER)
                    self.state = 7399
                    self.match(SnowflakeParser.EQ)
                    self.state = 7400
                    self.string()


                self.state = 7404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7403
                    self.comment_clause()


                self.state = 7406
                self.match(SnowflakeParser.AS)
                self.state = 7407
                self.function_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7409
                self.match(SnowflakeParser.CREATE)
                self.state = 7411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7410
                    self.or_replace()


                self.state = 7414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7413
                    self.match(SnowflakeParser.SECURE)


                self.state = 7416
                self.match(SnowflakeParser.FUNCTION)
                self.state = 7417
                self.object_name()
                self.state = 7418
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 7419
                    self.arg_decl()
                    self.state = 7424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7420
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7421
                        self.arg_decl()
                        self.state = 7426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7429
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7430
                self.match(SnowflakeParser.RETURNS)
                self.state = 7445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [113, 114, 353, 460, 477, 763, 766, 770, 772, 776, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894]:
                    self.state = 7431
                    self.data_type()
                    pass
                elif token in [747]:
                    self.state = 7432
                    self.match(SnowflakeParser.TABLE)
                    self.state = 7433
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 7434
                        self.col_decl()
                        self.state = 7439
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==937:
                            self.state = 7435
                            self.match(SnowflakeParser.COMMA)
                            self.state = 7436
                            self.col_decl()
                            self.state = 7441
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 7444
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448 or _la==458:
                    self.state = 7447
                    self.null_not_null()


                self.state = 7460
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [102]:
                    self.state = 7450
                    self.match(SnowflakeParser.CALLED)
                    self.state = 7451
                    self.match(SnowflakeParser.ON)
                    self.state = 7452
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7453
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [611]:
                    self.state = 7454
                    self.match(SnowflakeParser.RETURNS)
                    self.state = 7455
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7456
                    self.match(SnowflakeParser.ON)
                    self.state = 7457
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7458
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [730]:
                    self.state = 7459
                    self.match(SnowflakeParser.STRICT)
                    pass
                elif token in [45, 138, 335, 417, 837]:
                    pass
                else:
                    pass
                self.state = 7463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==335 or _la==837:
                    self.state = 7462
                    _la = self._input.LA(1)
                    if not(_la==335 or _la==837):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==417:
                    self.state = 7465
                    self.match(SnowflakeParser.MEMOIZABLE)


                self.state = 7469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7468
                    self.comment_clause()


                self.state = 7471
                self.match(SnowflakeParser.AS)
                self.state = 7472
                self.function_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_git_repositoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None # Object_nameContext

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def GIT(self):
            return self.getToken(SnowflakeParser.GIT, 0)

        def REPOSITORY(self):
            return self.getToken(SnowflakeParser.REPOSITORY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def create_git_opts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Create_git_optsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Create_git_optsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_git_repository

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_git_repository" ):
                listener.enterCreate_git_repository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_git_repository" ):
                listener.exitCreate_git_repository(self)




    def create_git_repository(self):

        localctx = SnowflakeParser.Create_git_repositoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_create_git_repository)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7476
            self.match(SnowflakeParser.CREATE)
            self.state = 7478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 7477
                self.or_replace()


            self.state = 7480
            self.match(SnowflakeParser.GIT)
            self.state = 7481
            self.match(SnowflakeParser.REPOSITORY)
            self.state = 7483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,868,self._ctx)
            if la_ == 1:
                self.state = 7482
                self.if_not_exists()


            self.state = 7485
            localctx.r = self.object_name()
            self.state = 7487 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 7486
                self.create_git_opts()
                self.state = 7489 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==37 or _la==138 or _la==305 or _la==503 or _la==754 or _la==847):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_git_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ai = None # Id_Context
            self.sn = None # Object_nameContext

        def ORIGIN(self):
            return self.getToken(SnowflakeParser.ORIGIN, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def API_INTEGRATION(self):
            return self.getToken(SnowflakeParser.API_INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def GIT_CREDENTIALS(self):
            return self.getToken(SnowflakeParser.GIT_CREDENTIALS, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_git_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_git_opts" ):
                listener.enterCreate_git_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_git_opts" ):
                listener.exitCreate_git_opts(self)




    def create_git_opts(self):

        localctx = SnowflakeParser.Create_git_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_create_git_opts)
        try:
            self.state = 7502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [503]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7491
                self.match(SnowflakeParser.ORIGIN)
                self.state = 7492
                self.match(SnowflakeParser.EQ)
                self.state = 7493
                self.string()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7494
                self.match(SnowflakeParser.API_INTEGRATION)
                self.state = 7495
                self.match(SnowflakeParser.EQ)
                self.state = 7496
                localctx.ai = self.id_()
                pass
            elif token in [305]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7497
                self.match(SnowflakeParser.GIT_CREDENTIALS)
                self.state = 7498
                self.match(SnowflakeParser.EQ)
                self.state = 7499
                localctx.sn = self.object_name()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7500
                self.comment_clause()
                pass
            elif token in [754, 847]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7501
                self.with_tags()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_managed_accountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def MANAGED(self):
            return self.getToken(SnowflakeParser.MANAGED, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def ADMIN_NAME(self):
            return self.getToken(SnowflakeParser.ADMIN_NAME, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def ADMIN_PASSWORD(self):
            return self.getToken(SnowflakeParser.ADMIN_PASSWORD, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def READER(self):
            return self.getToken(SnowflakeParser.READER, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_managed_account

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_managed_account" ):
                listener.enterCreate_managed_account(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_managed_account" ):
                listener.exitCreate_managed_account(self)




    def create_managed_account(self):

        localctx = SnowflakeParser.Create_managed_accountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_create_managed_account)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7504
            self.match(SnowflakeParser.CREATE)
            self.state = 7505
            self.match(SnowflakeParser.MANAGED)
            self.state = 7506
            self.match(SnowflakeParser.ACCOUNT)
            self.state = 7507
            self.id_()
            self.state = 7508
            self.match(SnowflakeParser.ADMIN_NAME)
            self.state = 7509
            self.match(SnowflakeParser.EQ)
            self.state = 7510
            self.id_()
            self.state = 7511
            self.match(SnowflakeParser.COMMA)
            self.state = 7512
            self.match(SnowflakeParser.ADMIN_PASSWORD)
            self.state = 7513
            self.match(SnowflakeParser.EQ)
            self.state = 7514
            self.string()
            self.state = 7515
            self.match(SnowflakeParser.COMMA)
            self.state = 7516
            self.match(SnowflakeParser.TYPE)
            self.state = 7517
            self.match(SnowflakeParser.EQ)
            self.state = 7518
            self.match(SnowflakeParser.READER)
            self.state = 7521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==937:
                self.state = 7519
                self.match(SnowflakeParser.COMMA)
                self.state = 7520
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_masking_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def arg_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Arg_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Arg_nameContext,i)


        def arg_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Arg_data_typeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Arg_data_typeContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def RETURNS(self):
            return self.getToken(SnowflakeParser.RETURNS, 0)

        def ARROW(self):
            return self.getToken(SnowflakeParser.ARROW, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_masking_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_masking_policy" ):
                listener.enterCreate_masking_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_masking_policy" ):
                listener.exitCreate_masking_policy(self)




    def create_masking_policy(self):

        localctx = SnowflakeParser.Create_masking_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_create_masking_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7523
            self.match(SnowflakeParser.CREATE)
            self.state = 7525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 7524
                self.or_replace()


            self.state = 7527
            self.match(SnowflakeParser.MASKING)
            self.state = 7528
            self.match(SnowflakeParser.POLICY)
            self.state = 7530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
            if la_ == 1:
                self.state = 7529
                self.if_not_exists()


            self.state = 7532
            self.object_name()
            self.state = 7533
            self.match(SnowflakeParser.AS)
            self.state = 7534
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 7535
            self.arg_name()
            self.state = 7536
            self.arg_data_type()
            self.state = 7541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==937:
                self.state = 7537
                self.match(SnowflakeParser.COMMA)
                self.state = 7538
                self.arg_name()
                self.state = 7539
                self.arg_data_type()


            self.state = 7543
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 7544
            self.match(SnowflakeParser.RETURNS)
            self.state = 7545
            self.arg_data_type()
            self.state = 7546
            self.match(SnowflakeParser.ARROW)
            self.state = 7547
            self.expr(0)
            self.state = 7549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 7548
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tag_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_tag_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag_decl" ):
                listener.enterTag_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag_decl" ):
                listener.exitTag_decl(self)




    def tag_decl(self):

        localctx = SnowflakeParser.Tag_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_tag_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7551
            self.object_name()
            self.state = 7552
            self.match(SnowflakeParser.EQ)
            self.state = 7553
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_list_in_parenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_list_in_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list_in_parentheses" ):
                listener.enterColumn_list_in_parentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list_in_parentheses" ):
                listener.exitColumn_list_in_parentheses(self)




    def column_list_in_parentheses(self):

        localctx = SnowflakeParser.Column_list_in_parenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_column_list_in_parentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7555
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 7556
            self.column_list()
            self.state = 7557
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_materialized_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(SnowflakeParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_statementContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_list_with_comment(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_with_commentContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def view_col(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.View_colContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.View_colContext,i)


        def with_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_row_access_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def cluster_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Cluster_byContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_materialized_view" ):
                listener.enterCreate_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_materialized_view" ):
                listener.exitCreate_materialized_view(self)




    def create_materialized_view(self):

        localctx = SnowflakeParser.Create_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_create_materialized_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7559
            self.match(SnowflakeParser.CREATE)
            self.state = 7561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 7560
                self.or_replace()


            self.state = 7564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==665:
                self.state = 7563
                self.match(SnowflakeParser.SECURE)


            self.state = 7566
            self.match(SnowflakeParser.MATERIALIZED)
            self.state = 7567
            self.match(SnowflakeParser.VIEW)
            self.state = 7569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,878,self._ctx)
            if la_ == 1:
                self.state = 7568
                self.if_not_exists()


            self.state = 7571
            self.object_name()
            self.state = 7576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==931:
                self.state = 7572
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7573
                self.column_list_with_comment()
                self.state = 7574
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 7581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,880,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 7578
                    self.view_col() 
                self.state = 7583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,880,self._ctx)

            self.state = 7585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,881,self._ctx)
            if la_ == 1:
                self.state = 7584
                self.with_row_access_policy()


            self.state = 7588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 7587
                self.with_tags()


            self.state = 7591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 7590
                self.copy_grants()


            self.state = 7594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 7593
                self.comment_clause()


            self.state = 7597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 7596
                self.cluster_by()


            self.state = 7599
            self.match(SnowflakeParser.AS)
            self.state = 7600
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_network_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def ALLOWED_IP_LIST(self):
            return self.getToken(SnowflakeParser.ALLOWED_IP_LIST, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def BLOCKED_IP_LIST(self):
            return self.getToken(SnowflakeParser.BLOCKED_IP_LIST, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_network_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_network_policy" ):
                listener.enterCreate_network_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_network_policy" ):
                listener.exitCreate_network_policy(self)




    def create_network_policy(self):

        localctx = SnowflakeParser.Create_network_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_create_network_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7602
            self.match(SnowflakeParser.CREATE)
            self.state = 7604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 7603
                self.or_replace()


            self.state = 7606
            self.match(SnowflakeParser.NETWORK)
            self.state = 7607
            self.match(SnowflakeParser.POLICY)
            self.state = 7608
            self.id_()
            self.state = 7609
            self.match(SnowflakeParser.ALLOWED_IP_LIST)
            self.state = 7610
            self.match(SnowflakeParser.EQ)
            self.state = 7611
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 7613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==912:
                self.state = 7612
                self.string_list()


            self.state = 7615
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 7623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 7616
                self.match(SnowflakeParser.BLOCKED_IP_LIST)
                self.state = 7617
                self.match(SnowflakeParser.EQ)
                self.state = 7618
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==912:
                    self.state = 7619
                    self.string_list()


                self.state = 7622
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 7626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 7625
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cloud_provider_params_autoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTIFICATION_PROVIDER(self):
            return self.getToken(SnowflakeParser.NOTIFICATION_PROVIDER, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def GCP_PUBSUB(self):
            return self.getToken(SnowflakeParser.GCP_PUBSUB, 0)

        def GCP_PUBSUB_SUBSCRIPTION_NAME(self):
            return self.getToken(SnowflakeParser.GCP_PUBSUB_SUBSCRIPTION_NAME, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def AZURE_EVENT_GRID(self):
            return self.getToken(SnowflakeParser.AZURE_EVENT_GRID, 0)

        def AZURE_STORAGE_QUEUE_PRIMARY_URI(self):
            return self.getToken(SnowflakeParser.AZURE_STORAGE_QUEUE_PRIMARY_URI, 0)

        def AZURE_TENANT_ID(self):
            return self.getToken(SnowflakeParser.AZURE_TENANT_ID, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_cloud_provider_params_auto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloud_provider_params_auto" ):
                listener.enterCloud_provider_params_auto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloud_provider_params_auto" ):
                listener.exitCloud_provider_params_auto(self)




    def cloud_provider_params_auto(self):

        localctx = SnowflakeParser.Cloud_provider_params_autoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_cloud_provider_params_auto)
        try:
            self.state = 7644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7628
                self.match(SnowflakeParser.NOTIFICATION_PROVIDER)
                self.state = 7629
                self.match(SnowflakeParser.EQ)
                self.state = 7630
                self.match(SnowflakeParser.GCP_PUBSUB)
                self.state = 7631
                self.match(SnowflakeParser.GCP_PUBSUB_SUBSCRIPTION_NAME)
                self.state = 7632
                self.match(SnowflakeParser.EQ)
                self.state = 7633
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7634
                self.match(SnowflakeParser.NOTIFICATION_PROVIDER)
                self.state = 7635
                self.match(SnowflakeParser.EQ)
                self.state = 7636
                self.match(SnowflakeParser.AZURE_EVENT_GRID)
                self.state = 7637
                self.match(SnowflakeParser.AZURE_STORAGE_QUEUE_PRIMARY_URI)
                self.state = 7638
                self.match(SnowflakeParser.EQ)
                self.state = 7639
                self.string()
                self.state = 7640
                self.match(SnowflakeParser.AZURE_TENANT_ID)
                self.state = 7641
                self.match(SnowflakeParser.EQ)
                self.state = 7642
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cloud_provider_params_pushContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTIFICATION_PROVIDER(self):
            return self.getToken(SnowflakeParser.NOTIFICATION_PROVIDER, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def AWS_SNS(self):
            return self.getToken(SnowflakeParser.AWS_SNS, 0)

        def AWS_SNS_TOPIC_ARN(self):
            return self.getToken(SnowflakeParser.AWS_SNS_TOPIC_ARN, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def AWS_SNS_ROLE_ARN(self):
            return self.getToken(SnowflakeParser.AWS_SNS_ROLE_ARN, 0)

        def GCP_PUBSUB(self):
            return self.getToken(SnowflakeParser.GCP_PUBSUB, 0)

        def GCP_PUBSUB_TOPIC_NAME(self):
            return self.getToken(SnowflakeParser.GCP_PUBSUB_TOPIC_NAME, 0)

        def AZURE_EVENT_GRID(self):
            return self.getToken(SnowflakeParser.AZURE_EVENT_GRID, 0)

        def AZURE_EVENT_GRID_TOPIC_ENDPOINT(self):
            return self.getToken(SnowflakeParser.AZURE_EVENT_GRID_TOPIC_ENDPOINT, 0)

        def AZURE_TENANT_ID(self):
            return self.getToken(SnowflakeParser.AZURE_TENANT_ID, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_cloud_provider_params_push

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloud_provider_params_push" ):
                listener.enterCloud_provider_params_push(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloud_provider_params_push" ):
                listener.exitCloud_provider_params_push(self)




    def cloud_provider_params_push(self):

        localctx = SnowflakeParser.Cloud_provider_params_pushContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_cloud_provider_params_push)
        try:
            self.state = 7672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,892,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7646
                self.match(SnowflakeParser.NOTIFICATION_PROVIDER)
                self.state = 7647
                self.match(SnowflakeParser.EQ)
                self.state = 7648
                self.match(SnowflakeParser.AWS_SNS)
                self.state = 7649
                self.match(SnowflakeParser.AWS_SNS_TOPIC_ARN)
                self.state = 7650
                self.match(SnowflakeParser.EQ)
                self.state = 7651
                self.string()
                self.state = 7652
                self.match(SnowflakeParser.AWS_SNS_ROLE_ARN)
                self.state = 7653
                self.match(SnowflakeParser.EQ)
                self.state = 7654
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7656
                self.match(SnowflakeParser.NOTIFICATION_PROVIDER)
                self.state = 7657
                self.match(SnowflakeParser.EQ)
                self.state = 7658
                self.match(SnowflakeParser.GCP_PUBSUB)
                self.state = 7659
                self.match(SnowflakeParser.GCP_PUBSUB_TOPIC_NAME)
                self.state = 7660
                self.match(SnowflakeParser.EQ)
                self.state = 7661
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7662
                self.match(SnowflakeParser.NOTIFICATION_PROVIDER)
                self.state = 7663
                self.match(SnowflakeParser.EQ)
                self.state = 7664
                self.match(SnowflakeParser.AZURE_EVENT_GRID)
                self.state = 7665
                self.match(SnowflakeParser.AZURE_EVENT_GRID_TOPIC_ENDPOINT)
                self.state = 7666
                self.match(SnowflakeParser.EQ)
                self.state = 7667
                self.string()
                self.state = 7668
                self.match(SnowflakeParser.AZURE_TENANT_ID)
                self.state = 7669
                self.match(SnowflakeParser.EQ)
                self.state = 7670
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_notification_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def NOTIFICATION(self):
            return self.getToken(SnowflakeParser.NOTIFICATION, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def QUEUE(self):
            return self.getToken(SnowflakeParser.QUEUE, 0)

        def cloud_provider_params_auto(self):
            return self.getTypedRuleContext(SnowflakeParser.Cloud_provider_params_autoContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def DIRECTION(self):
            return self.getToken(SnowflakeParser.DIRECTION, 0)

        def OUTBOUND(self):
            return self.getToken(SnowflakeParser.OUTBOUND, 0)

        def cloud_provider_params_push(self):
            return self.getTypedRuleContext(SnowflakeParser.Cloud_provider_params_pushContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_notification_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_notification_integration" ):
                listener.enterCreate_notification_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_notification_integration" ):
                listener.exitCreate_notification_integration(self)




    def create_notification_integration(self):

        localctx = SnowflakeParser.Create_notification_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_create_notification_integration)
        self._la = 0 # Token type
        try:
            self.state = 7717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,899,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7674
                self.match(SnowflakeParser.CREATE)
                self.state = 7676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7675
                    self.or_replace()


                self.state = 7678
                self.match(SnowflakeParser.NOTIFICATION)
                self.state = 7679
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 7681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,894,self._ctx)
                if la_ == 1:
                    self.state = 7680
                    self.if_not_exists()


                self.state = 7683
                self.id_()
                self.state = 7684
                self.match(SnowflakeParser.ENABLED)
                self.state = 7685
                self.match(SnowflakeParser.EQ)
                self.state = 7686
                self.true_false()
                self.state = 7687
                self.match(SnowflakeParser.TYPE)
                self.state = 7688
                self.match(SnowflakeParser.EQ)
                self.state = 7689
                self.match(SnowflakeParser.QUEUE)
                self.state = 7690
                self.cloud_provider_params_auto()
                self.state = 7692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7691
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7694
                self.match(SnowflakeParser.CREATE)
                self.state = 7696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7695
                    self.or_replace()


                self.state = 7698
                self.match(SnowflakeParser.NOTIFICATION)
                self.state = 7699
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 7701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,897,self._ctx)
                if la_ == 1:
                    self.state = 7700
                    self.if_not_exists()


                self.state = 7703
                self.id_()
                self.state = 7704
                self.match(SnowflakeParser.ENABLED)
                self.state = 7705
                self.match(SnowflakeParser.EQ)
                self.state = 7706
                self.true_false()
                self.state = 7707
                self.match(SnowflakeParser.DIRECTION)
                self.state = 7708
                self.match(SnowflakeParser.EQ)
                self.state = 7709
                self.match(SnowflakeParser.OUTBOUND)
                self.state = 7710
                self.match(SnowflakeParser.TYPE)
                self.state = 7711
                self.match(SnowflakeParser.EQ)
                self.state = 7712
                self.match(SnowflakeParser.QUEUE)
                self.state = 7713
                self.cloud_provider_params_push()
                self.state = 7715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7714
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_pipeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def PIPE(self):
            return self.getToken(SnowflakeParser.PIPE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def copy_into_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_into_tableContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def AUTO_INGEST(self):
            return self.getToken(SnowflakeParser.AUTO_INGEST, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def ERROR_INTEGRATION(self):
            return self.getToken(SnowflakeParser.ERROR_INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def AWS_SNS_TOPIC(self):
            return self.getToken(SnowflakeParser.AWS_SNS_TOPIC, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_pipe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_pipe" ):
                listener.enterCreate_pipe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_pipe" ):
                listener.exitCreate_pipe(self)




    def create_pipe(self):

        localctx = SnowflakeParser.Create_pipeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_create_pipe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7719
            self.match(SnowflakeParser.CREATE)
            self.state = 7721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 7720
                self.or_replace()


            self.state = 7723
            self.match(SnowflakeParser.PIPE)
            self.state = 7725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
            if la_ == 1:
                self.state = 7724
                self.if_not_exists()


            self.state = 7727
            self.object_name()
            self.state = 7731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 7728
                self.match(SnowflakeParser.AUTO_INGEST)
                self.state = 7729
                self.match(SnowflakeParser.EQ)
                self.state = 7730
                self.true_false()


            self.state = 7736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==233:
                self.state = 7733
                self.match(SnowflakeParser.ERROR_INTEGRATION)
                self.state = 7734
                self.match(SnowflakeParser.EQ)
                self.state = 7735
                self.id_()


            self.state = 7741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 7738
                self.match(SnowflakeParser.AWS_SNS_TOPIC)
                self.state = 7739
                self.match(SnowflakeParser.EQ)
                self.state = 7740
                self.string()


            self.state = 7746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==354:
                self.state = 7743
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 7744
                self.match(SnowflakeParser.EQ)
                self.state = 7745
                self.string()


            self.state = 7749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 7748
                self.comment_clause()


            self.state = 7751
            self.match(SnowflakeParser.AS)
            self.state = 7752
            self.copy_into_table()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Caller_ownerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALLER(self):
            return self.getToken(SnowflakeParser.CALLER, 0)

        def OWNER(self):
            return self.getToken(SnowflakeParser.OWNER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_caller_owner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaller_owner" ):
                listener.enterCaller_owner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaller_owner" ):
                listener.exitCaller_owner(self)




    def caller_owner(self):

        localctx = SnowflakeParser.Caller_ownerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_caller_owner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7754
            _la = self._input.LA(1)
            if not(_la==103 or _la==509):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Executa_asContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(SnowflakeParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def caller_owner(self):
            return self.getTypedRuleContext(SnowflakeParser.Caller_ownerContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_executa_as

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuta_as" ):
                listener.enterExecuta_as(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuta_as" ):
                listener.exitExecuta_as(self)




    def executa_as(self):

        localctx = SnowflakeParser.Executa_asContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_executa_as)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7756
            self.match(SnowflakeParser.EXECUTE)
            self.state = 7757
            self.match(SnowflakeParser.AS)
            self.state = 7758
            self.caller_owner()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def DBL_DOLLAR(self):
            return self.getToken(SnowflakeParser.DBL_DOLLAR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_procedure_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_definition" ):
                listener.enterProcedure_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_definition" ):
                listener.exitProcedure_definition(self)




    def procedure_definition(self):

        localctx = SnowflakeParser.Procedure_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_procedure_definition)
        try:
            self.state = 7762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [912]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7760
                self.string()
                pass
            elif token in [911]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7761
                self.match(SnowflakeParser.DBL_DOLLAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_nullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_not_null

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_null" ):
                listener.enterNot_null(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_null" ):
                listener.exitNot_null(self)




    def not_null(self):

        localctx = SnowflakeParser.Not_nullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_not_null)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7764
            self.match(SnowflakeParser.NOT)
            self.state = 7765
            self.match(SnowflakeParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(SnowflakeParser.PROCEDURE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def RETURNS(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RETURNS)
            else:
                return self.getToken(SnowflakeParser.RETURNS, i)

        def LANGUAGE(self):
            return self.getToken(SnowflakeParser.LANGUAGE, 0)

        def SQL(self):
            return self.getToken(SnowflakeParser.SQL, 0)

        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def procedure_definition(self):
            return self.getTypedRuleContext(SnowflakeParser.Procedure_definitionContext,0)


        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def arg_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Arg_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Arg_declContext,i)


        def not_null(self):
            return self.getTypedRuleContext(SnowflakeParser.Not_nullContext,0)


        def CALLED(self):
            return self.getToken(SnowflakeParser.CALLED, 0)

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.NULL_)
            else:
                return self.getToken(SnowflakeParser.NULL_, i)

        def INPUT(self):
            return self.getToken(SnowflakeParser.INPUT, 0)

        def STRICT(self):
            return self.getToken(SnowflakeParser.STRICT, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def executa_as(self):
            return self.getTypedRuleContext(SnowflakeParser.Executa_asContext,0)


        def VOLATILE(self):
            return self.getToken(SnowflakeParser.VOLATILE, 0)

        def IMMUTABLE(self):
            return self.getToken(SnowflakeParser.IMMUTABLE, 0)

        def col_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Col_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Col_declContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def JAVASCRIPT(self):
            return self.getToken(SnowflakeParser.JAVASCRIPT, 0)

        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def PYTHON(self):
            return self.getToken(SnowflakeParser.PYTHON, 0)

        def RUNTIME_VERSION(self):
            return self.getToken(SnowflakeParser.RUNTIME_VERSION, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def PACKAGES(self):
            return self.getToken(SnowflakeParser.PACKAGES, 0)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def HANDLER(self):
            return self.getToken(SnowflakeParser.HANDLER, 0)

        def IMPORTS(self):
            return self.getToken(SnowflakeParser.IMPORTS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_procedure" ):
                listener.enterCreate_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_procedure" ):
                listener.exitCreate_procedure(self)




    def create_procedure(self):

        localctx = SnowflakeParser.Create_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_create_procedure)
        self._la = 0 # Token type
        try:
            self.state = 7954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,939,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7767
                self.match(SnowflakeParser.CREATE)
                self.state = 7769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7768
                    self.or_replace()


                self.state = 7771
                self.match(SnowflakeParser.PROCEDURE)
                self.state = 7772
                self.object_name()
                self.state = 7773
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 7774
                    self.arg_decl()
                    self.state = 7779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7775
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7776
                        self.arg_decl()
                        self.state = 7781
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7784
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7785
                self.match(SnowflakeParser.RETURNS)
                self.state = 7800
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [113, 114, 353, 460, 477, 763, 766, 770, 772, 776, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894]:
                    self.state = 7786
                    self.data_type()
                    pass
                elif token in [747]:
                    self.state = 7787
                    self.match(SnowflakeParser.TABLE)
                    self.state = 7788
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 7789
                        self.col_decl()
                        self.state = 7794
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==937:
                            self.state = 7790
                            self.match(SnowflakeParser.COMMA)
                            self.state = 7791
                            self.col_decl()
                            self.state = 7796
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 7799
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 7802
                    self.not_null()


                self.state = 7805
                self.match(SnowflakeParser.LANGUAGE)
                self.state = 7806
                self.match(SnowflakeParser.SQL)
                self.state = 7817
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [102]:
                    self.state = 7807
                    self.match(SnowflakeParser.CALLED)
                    self.state = 7808
                    self.match(SnowflakeParser.ON)
                    self.state = 7809
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7810
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [611]:
                    self.state = 7811
                    self.match(SnowflakeParser.RETURNS)
                    self.state = 7812
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7813
                    self.match(SnowflakeParser.ON)
                    self.state = 7814
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7815
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [730]:
                    self.state = 7816
                    self.match(SnowflakeParser.STRICT)
                    pass
                elif token in [45, 138, 243, 335, 837]:
                    pass
                else:
                    pass
                self.state = 7820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==335 or _la==837:
                    self.state = 7819
                    _la = self._input.LA(1)
                    if not(_la==335 or _la==837):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7822
                    self.comment_clause()


                self.state = 7826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 7825
                    self.executa_as()


                self.state = 7828
                self.match(SnowflakeParser.AS)
                self.state = 7829
                self.procedure_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7831
                self.match(SnowflakeParser.CREATE)
                self.state = 7833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7832
                    self.or_replace()


                self.state = 7836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7835
                    self.match(SnowflakeParser.SECURE)


                self.state = 7838
                self.match(SnowflakeParser.PROCEDURE)
                self.state = 7839
                self.object_name()
                self.state = 7840
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 7841
                    self.arg_decl()
                    self.state = 7846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7842
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7843
                        self.arg_decl()
                        self.state = 7848
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7851
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7852
                self.match(SnowflakeParser.RETURNS)
                self.state = 7853
                self.data_type()
                self.state = 7855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 7854
                    self.not_null()


                self.state = 7857
                self.match(SnowflakeParser.LANGUAGE)
                self.state = 7858
                self.match(SnowflakeParser.JAVASCRIPT)
                self.state = 7869
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [102]:
                    self.state = 7859
                    self.match(SnowflakeParser.CALLED)
                    self.state = 7860
                    self.match(SnowflakeParser.ON)
                    self.state = 7861
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7862
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [611]:
                    self.state = 7863
                    self.match(SnowflakeParser.RETURNS)
                    self.state = 7864
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7865
                    self.match(SnowflakeParser.ON)
                    self.state = 7866
                    self.match(SnowflakeParser.NULL_)
                    self.state = 7867
                    self.match(SnowflakeParser.INPUT)
                    pass
                elif token in [730]:
                    self.state = 7868
                    self.match(SnowflakeParser.STRICT)
                    pass
                elif token in [45, 138, 243, 335, 837]:
                    pass
                else:
                    pass
                self.state = 7872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==335 or _la==837:
                    self.state = 7871
                    _la = self._input.LA(1)
                    if not(_la==335 or _la==837):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 7875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7874
                    self.comment_clause()


                self.state = 7878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 7877
                    self.executa_as()


                self.state = 7880
                self.match(SnowflakeParser.AS)
                self.state = 7881
                self.procedure_definition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7883
                self.match(SnowflakeParser.CREATE)
                self.state = 7885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 7884
                    self.or_replace()


                self.state = 7888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==665:
                    self.state = 7887
                    self.match(SnowflakeParser.SECURE)


                self.state = 7890
                self.match(SnowflakeParser.PROCEDURE)
                self.state = 7891
                self.object_name()
                self.state = 7892
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 7893
                    self.arg_decl()
                    self.state = 7898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7894
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7895
                        self.arg_decl()
                        self.state = 7900
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7903
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7904
                self.match(SnowflakeParser.RETURNS)
                self.state = 7922
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [113, 114, 353, 460, 477, 763, 766, 770, 772, 776, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894]:
                    self.state = 7905
                    self.data_type()
                    self.state = 7907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==448:
                        self.state = 7906
                        self.not_null()


                    pass
                elif token in [747]:
                    self.state = 7909
                    self.match(SnowflakeParser.TABLE)
                    self.state = 7910
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 7911
                        self.col_decl()
                        self.state = 7916
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==937:
                            self.state = 7912
                            self.match(SnowflakeParser.COMMA)
                            self.state = 7913
                            self.col_decl()
                            self.state = 7918
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 7921
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 7924
                self.match(SnowflakeParser.LANGUAGE)
                self.state = 7925
                self.match(SnowflakeParser.PYTHON)
                self.state = 7926
                self.match(SnowflakeParser.RUNTIME_VERSION)
                self.state = 7927
                self.match(SnowflakeParser.EQ)
                self.state = 7928
                self.string()
                self.state = 7935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==338:
                    self.state = 7929
                    self.match(SnowflakeParser.IMPORTS)
                    self.state = 7930
                    self.match(SnowflakeParser.EQ)
                    self.state = 7931
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 7932
                    self.string_list()
                    self.state = 7933
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 7937
                self.match(SnowflakeParser.PACKAGES)
                self.state = 7938
                self.match(SnowflakeParser.EQ)
                self.state = 7939
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 7940
                self.string_list()
                self.state = 7941
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 7942
                self.match(SnowflakeParser.HANDLER)
                self.state = 7943
                self.match(SnowflakeParser.EQ)
                self.state = 7944
                self.string()
                self.state = 7946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 7945
                    self.comment_clause()


                self.state = 7949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 7948
                    self.executa_as()


                self.state = 7951
                self.match(SnowflakeParser.AS)
                self.state = 7952
                self.procedure_definition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replication_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def OBJECT_TYPES(self):
            return self.getToken(SnowflakeParser.OBJECT_TYPES, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def object_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_typeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_typeContext,i)


        def ALLOWED_ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0)

        def full_acct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Full_acctContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Full_acctContext,i)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def ALLOWED_DATABASES(self):
            return self.getToken(SnowflakeParser.ALLOWED_DATABASES, 0)

        def ALLOWED_SHARES(self):
            return self.getToken(SnowflakeParser.ALLOWED_SHARES, 0)

        def ALLOWED_INTEGRATION_TYPES(self):
            return self.getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0)

        def integration_type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Integration_type_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Integration_type_nameContext,i)


        def IGNORE(self):
            return self.getToken(SnowflakeParser.IGNORE, 0)

        def EDITION(self):
            return self.getToken(SnowflakeParser.EDITION, 0)

        def CHECK(self):
            return self.getToken(SnowflakeParser.CHECK, 0)

        def REPLICATION_SCHEDULE(self):
            return self.getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def REPLICA(self):
            return self.getToken(SnowflakeParser.REPLICA, 0)

        def OF(self):
            return self.getToken(SnowflakeParser.OF, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DOT)
            else:
                return self.getToken(SnowflakeParser.DOT, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_replication_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replication_group" ):
                listener.enterCreate_replication_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replication_group" ):
                listener.exitCreate_replication_group(self)




    def create_replication_group(self):

        localctx = SnowflakeParser.Create_replication_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_create_replication_group)
        self._la = 0 # Token type
        try:
            self.state = 8045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,952,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7956
                self.match(SnowflakeParser.CREATE)
                self.state = 7957
                self.match(SnowflakeParser.REPLICATION)
                self.state = 7958
                self.match(SnowflakeParser.GROUP)
                self.state = 7960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,940,self._ctx)
                if la_ == 1:
                    self.state = 7959
                    self.if_not_exists()


                self.state = 7962
                self.id_()
                self.state = 7963
                self.match(SnowflakeParser.OBJECT_TYPES)
                self.state = 7964
                self.match(SnowflakeParser.EQ)
                self.state = 7965
                self.object_type()
                self.state = 7970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 7966
                    self.match(SnowflakeParser.COMMA)
                    self.state = 7967
                    self.object_type()
                    self.state = 7972
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 7973
                    self.match(SnowflakeParser.ALLOWED_DATABASES)
                    self.state = 7974
                    self.match(SnowflakeParser.EQ)
                    self.state = 7975
                    self.id_()
                    self.state = 7980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7976
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7977
                        self.id_()
                        self.state = 7982
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 7985
                    self.match(SnowflakeParser.ALLOWED_SHARES)
                    self.state = 7986
                    self.match(SnowflakeParser.EQ)
                    self.state = 7987
                    self.id_()
                    self.state = 7992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 7988
                        self.match(SnowflakeParser.COMMA)
                        self.state = 7989
                        self.id_()
                        self.state = 7994
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 8007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7997
                    self.match(SnowflakeParser.ALLOWED_INTEGRATION_TYPES)
                    self.state = 7998
                    self.match(SnowflakeParser.EQ)
                    self.state = 7999
                    self.integration_type_name()
                    self.state = 8004
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==937:
                        self.state = 8000
                        self.match(SnowflakeParser.COMMA)
                        self.state = 8001
                        self.integration_type_name()
                        self.state = 8006
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 8009
                self.match(SnowflakeParser.ALLOWED_ACCOUNTS)
                self.state = 8010
                self.match(SnowflakeParser.EQ)
                self.state = 8011
                self.full_acct()
                self.state = 8016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 8012
                    self.match(SnowflakeParser.COMMA)
                    self.state = 8013
                    self.full_acct()
                    self.state = 8018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 8022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330:
                    self.state = 8019
                    self.match(SnowflakeParser.IGNORE)
                    self.state = 8020
                    self.match(SnowflakeParser.EDITION)
                    self.state = 8021
                    self.match(SnowflakeParser.CHECK)


                self.state = 8027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==595:
                    self.state = 8024
                    self.match(SnowflakeParser.REPLICATION_SCHEDULE)
                    self.state = 8025
                    self.match(SnowflakeParser.EQ)
                    self.state = 8026
                    self.string()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8029
                self.match(SnowflakeParser.CREATE)
                self.state = 8030
                self.match(SnowflakeParser.REPLICATION)
                self.state = 8031
                self.match(SnowflakeParser.GROUP)
                self.state = 8033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
                if la_ == 1:
                    self.state = 8032
                    self.if_not_exists()


                self.state = 8035
                self.id_()
                self.state = 8036
                self.match(SnowflakeParser.AS)
                self.state = 8037
                self.match(SnowflakeParser.REPLICA)
                self.state = 8038
                self.match(SnowflakeParser.OF)
                self.state = 8039
                self.id_()
                self.state = 8040
                self.match(SnowflakeParser.DOT)
                self.state = 8041
                self.id_()
                self.state = 8042
                self.match(SnowflakeParser.DOT)
                self.state = 8043
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_resource_monitorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def credit_quota(self):
            return self.getTypedRuleContext(SnowflakeParser.Credit_quotaContext,0)


        def frequency(self):
            return self.getTypedRuleContext(SnowflakeParser.FrequencyContext,0)


        def START_TIMESTAMP(self):
            return self.getToken(SnowflakeParser.START_TIMESTAMP, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def END_TIMESTAMP(self):
            return self.getToken(SnowflakeParser.END_TIMESTAMP, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def notify_users(self):
            return self.getTypedRuleContext(SnowflakeParser.Notify_usersContext,0)


        def TRIGGERS(self):
            return self.getToken(SnowflakeParser.TRIGGERS, 0)

        def IMMEDIATELY(self):
            return self.getToken(SnowflakeParser.IMMEDIATELY, 0)

        def trigger_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Trigger_definitionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Trigger_definitionContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_resource_monitor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_resource_monitor" ):
                listener.enterCreate_resource_monitor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_resource_monitor" ):
                listener.exitCreate_resource_monitor(self)




    def create_resource_monitor(self):

        localctx = SnowflakeParser.Create_resource_monitorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_create_resource_monitor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8047
            self.match(SnowflakeParser.CREATE)
            self.state = 8049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8048
                self.or_replace()


            self.state = 8051
            self.match(SnowflakeParser.RESOURCE)
            self.state = 8052
            self.match(SnowflakeParser.MONITOR)
            self.state = 8053
            self.id_()
            self.state = 8054
            self.match(SnowflakeParser.WITH)
            self.state = 8056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 8055
                self.credit_quota()


            self.state = 8059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==284:
                self.state = 8058
                self.frequency()


            self.state = 8067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==714:
                self.state = 8061
                self.match(SnowflakeParser.START_TIMESTAMP)
                self.state = 8062
                self.match(SnowflakeParser.EQ)
                self.state = 8065
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8063
                    self.string()
                    pass
                elif token in [334]:
                    self.state = 8064
                    self.match(SnowflakeParser.IMMEDIATELY)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 8072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226:
                self.state = 8069
                self.match(SnowflakeParser.END_TIMESTAMP)
                self.state = 8070
                self.match(SnowflakeParser.EQ)
                self.state = 8071
                self.string()


            self.state = 8075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 8074
                self.notify_users()


            self.state = 8083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==794:
                self.state = 8077
                self.match(SnowflakeParser.TRIGGERS)
                self.state = 8079 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 8078
                    self.trigger_definition()
                    self.state = 8081 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==488):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_role" ):
                listener.enterCreate_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_role" ):
                listener.exitCreate_role(self)




    def create_role(self):

        localctx = SnowflakeParser.Create_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_create_role)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8085
            self.match(SnowflakeParser.CREATE)
            self.state = 8087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8086
                self.or_replace()


            self.state = 8089
            self.match(SnowflakeParser.ROLE)
            self.state = 8091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
            if la_ == 1:
                self.state = 8090
                self.if_not_exists()


            self.state = 8093
            self.id_()
            self.state = 8095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 8094
                self.with_tags()


            self.state = 8098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8097
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_row_access_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def arg_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Arg_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Arg_declContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def RETURNS(self):
            return self.getToken(SnowflakeParser.RETURNS, 0)

        def BOOLEAN(self):
            return self.getToken(SnowflakeParser.BOOLEAN, 0)

        def ARROW(self):
            return self.getToken(SnowflakeParser.ARROW, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_row_access_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_row_access_policy" ):
                listener.enterCreate_row_access_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_row_access_policy" ):
                listener.exitCreate_row_access_policy(self)




    def create_row_access_policy(self):

        localctx = SnowflakeParser.Create_row_access_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_create_row_access_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8100
            self.match(SnowflakeParser.CREATE)
            self.state = 8102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8101
                self.or_replace()


            self.state = 8104
            self.match(SnowflakeParser.ROW)
            self.state = 8105
            self.match(SnowflakeParser.ACCESS)
            self.state = 8106
            self.match(SnowflakeParser.POLICY)
            self.state = 8108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
            if la_ == 1:
                self.state = 8107
                self.if_not_exists()


            self.state = 8110
            self.id_()
            self.state = 8111
            self.match(SnowflakeParser.AS)
            self.state = 8112
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 8113
            self.arg_decl()
            self.state = 8118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 8114
                self.match(SnowflakeParser.COMMA)
                self.state = 8115
                self.arg_decl()
                self.state = 8120
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8121
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 8122
            self.match(SnowflakeParser.RETURNS)
            self.state = 8123
            self.match(SnowflakeParser.BOOLEAN)
            self.state = 8124
            self.match(SnowflakeParser.ARROW)
            self.state = 8125
            self.expr(0)
            self.state = 8127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8126
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def TRANSIENT(self):
            return self.getToken(SnowflakeParser.TRANSIENT, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def clone_at_before(self):
            return self.getTypedRuleContext(SnowflakeParser.Clone_at_beforeContext,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def MANAGED(self):
            return self.getToken(SnowflakeParser.MANAGED, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def default_ddl_collation(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_ddl_collationContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_schema" ):
                listener.enterCreate_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_schema" ):
                listener.exitCreate_schema(self)




    def create_schema(self):

        localctx = SnowflakeParser.Create_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_create_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8129
            self.match(SnowflakeParser.CREATE)
            self.state = 8131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8130
                self.or_replace()


            self.state = 8134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==793:
                self.state = 8133
                self.match(SnowflakeParser.TRANSIENT)


            self.state = 8136
            self.match(SnowflakeParser.SCHEMA)
            self.state = 8138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,972,self._ctx)
            if la_ == 1:
                self.state = 8137
                self.if_not_exists()


            self.state = 8140
            self.schema_name()
            self.state = 8142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 8141
                self.clone_at_before()


            self.state = 8147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                self.state = 8144
                self.match(SnowflakeParser.WITH)
                self.state = 8145
                self.match(SnowflakeParser.MANAGED)
                self.state = 8146
                self.match(SnowflakeParser.ACCESS)


            self.state = 8152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 8149
                self.match(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS)
                self.state = 8150
                self.match(SnowflakeParser.EQ)
                self.state = 8151
                self.num()


            self.state = 8157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==413:
                self.state = 8154
                self.match(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS)
                self.state = 8155
                self.match(SnowflakeParser.EQ)
                self.state = 8156
                self.num()


            self.state = 8160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==183:
                self.state = 8159
                self.default_ddl_collation()


            self.state = 8163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 8162
                self.with_tags()


            self.state = 8166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8165
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_secretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s = None # Object_nameContext
            self.rt = None # StringContext
            self.et = None # StringContext
            self.aa = None # Id_Context
            self.u = None # StringContext
            self.p = None # StringContext
            self.ss = None # StringContext
            self.ALGORITHM = None # Token

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SECRET(self):
            return self.getToken(SnowflakeParser.SECRET, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def OAUTH2(self):
            return self.getToken(SnowflakeParser.OAUTH2, 0)

        def API_AUTHENTICATION(self):
            return self.getToken(SnowflakeParser.API_AUTHENTICATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def OAUTH_SCOPES(self):
            return self.getToken(SnowflakeParser.OAUTH_SCOPES, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def string_list(self):
            return self.getTypedRuleContext(SnowflakeParser.String_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def OAUTH_REFRESH_TOKEN(self):
            return self.getToken(SnowflakeParser.OAUTH_REFRESH_TOKEN, 0)

        def OAUTH_REFRESH_TOKEN_EXPIRY_TIME(self):
            return self.getToken(SnowflakeParser.OAUTH_REFRESH_TOKEN_EXPIRY_TIME, 0)

        def CLOUD_PROVIDER_TOKEN(self):
            return self.getToken(SnowflakeParser.CLOUD_PROVIDER_TOKEN, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def PASSWORD(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.PASSWORD)
            else:
                return self.getToken(SnowflakeParser.PASSWORD, i)

        def USERNAME(self):
            return self.getToken(SnowflakeParser.USERNAME, 0)

        def GENERIC_STRING(self):
            return self.getToken(SnowflakeParser.GENERIC_STRING, 0)

        def SECRET_STRING(self):
            return self.getToken(SnowflakeParser.SECRET_STRING, 0)

        def SYMMETRIC_KEY(self):
            return self.getToken(SnowflakeParser.SYMMETRIC_KEY, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def GENERIC(self):
            return self.getToken(SnowflakeParser.GENERIC, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_secret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_secret" ):
                listener.enterCreate_secret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_secret" ):
                listener.exitCreate_secret(self)




    def create_secret(self):

        localctx = SnowflakeParser.Create_secretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_create_secret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8168
            self.match(SnowflakeParser.CREATE)
            self.state = 8170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8169
                self.or_replace()


            self.state = 8172
            self.match(SnowflakeParser.SECRET)
            self.state = 8174
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
            if la_ == 1:
                self.state = 8173
                self.if_not_exists()


            self.state = 8176
            localctx.s = self.object_name()
            self.state = 8232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
            if la_ == 1:
                self.state = 8177
                self.match(SnowflakeParser.TYPE)
                self.state = 8178
                self.match(SnowflakeParser.EQ)
                self.state = 8179
                self.match(SnowflakeParser.OAUTH2)
                self.state = 8180
                self.match(SnowflakeParser.API_AUTHENTICATION)
                self.state = 8181
                self.match(SnowflakeParser.EQ)
                self.state = 8182
                self.id_()
                self.state = 8183
                self.match(SnowflakeParser.OAUTH_SCOPES)
                self.state = 8184
                self.match(SnowflakeParser.EQ)
                self.state = 8185
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8186
                self.string_list()
                self.state = 8187
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 8189
                self.match(SnowflakeParser.TYPE)
                self.state = 8190
                self.match(SnowflakeParser.EQ)
                self.state = 8191
                self.match(SnowflakeParser.OAUTH2)
                self.state = 8192
                self.match(SnowflakeParser.OAUTH_REFRESH_TOKEN)
                self.state = 8193
                self.match(SnowflakeParser.EQ)
                self.state = 8194
                localctx.rt = self.string()
                self.state = 8195
                self.match(SnowflakeParser.OAUTH_REFRESH_TOKEN_EXPIRY_TIME)
                self.state = 8196
                self.match(SnowflakeParser.EQ)
                self.state = 8197
                localctx.et = self.string()
                self.state = 8198
                self.match(SnowflakeParser.API_AUTHENTICATION)
                self.state = 8199
                self.match(SnowflakeParser.EQ)
                self.state = 8200
                localctx.aa = self.id_()
                pass

            elif la_ == 3:
                self.state = 8202
                self.match(SnowflakeParser.TYPE)
                self.state = 8203
                self.match(SnowflakeParser.EQ)
                self.state = 8204
                self.match(SnowflakeParser.CLOUD_PROVIDER_TOKEN)
                self.state = 8205
                self.match(SnowflakeParser.API_AUTHENTICATION)
                self.state = 8206
                self.match(SnowflakeParser.EQ)
                self.state = 8207
                self.string()
                self.state = 8208
                self.match(SnowflakeParser.ENABLED)
                self.state = 8209
                self.match(SnowflakeParser.EQ)
                self.state = 8210
                self.true_false()
                pass

            elif la_ == 4:
                self.state = 8212
                self.match(SnowflakeParser.TYPE)
                self.state = 8213
                self.match(SnowflakeParser.EQ)
                self.state = 8214
                self.match(SnowflakeParser.PASSWORD)
                self.state = 8215
                self.match(SnowflakeParser.USERNAME)
                self.state = 8216
                self.match(SnowflakeParser.EQ)
                self.state = 8217
                localctx.u = self.string()
                self.state = 8218
                self.match(SnowflakeParser.PASSWORD)
                self.state = 8219
                self.match(SnowflakeParser.EQ)
                self.state = 8220
                localctx.p = self.string()
                pass

            elif la_ == 5:
                self.state = 8222
                self.match(SnowflakeParser.TYPE)
                self.state = 8223
                self.match(SnowflakeParser.EQ)
                self.state = 8224
                self.match(SnowflakeParser.GENERIC_STRING)
                self.state = 8225
                self.match(SnowflakeParser.SECRET_STRING)
                self.state = 8226
                self.match(SnowflakeParser.EQ)
                self.state = 8227
                localctx.ss = self.string()
                pass

            elif la_ == 6:
                self.state = 8228
                self.match(SnowflakeParser.TYPE)
                self.state = 8229
                self.match(SnowflakeParser.EQ)
                self.state = 8230
                self.match(SnowflakeParser.SYMMETRIC_KEY)
                self.state = 8231
                localctx.ALGORITHM = self.match(SnowflakeParser.GENERIC)
                pass


            self.state = 8235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8234
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_security_integration_external_oauthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def EXTERNAL_OAUTH(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH, 0)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def EXTERNAL_OAUTH_TYPE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0)

        def EXTERNAL_OAUTH_ISSUER(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0)

        def EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0)

        def OKTA(self):
            return self.getToken(SnowflakeParser.OKTA, 0)

        def AZURE(self):
            return self.getToken(SnowflakeParser.AZURE, 0)

        def PING_FEDERATE(self):
            return self.getToken(SnowflakeParser.PING_FEDERATE, 0)

        def CUSTOM(self):
            return self.getToken(SnowflakeParser.CUSTOM, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def EXTERNAL_OAUTH_JWS_KEYS_URL(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
            else:
                return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i)

        def EXTERNAL_OAUTH_BLOCKED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0)

        def EXTERNAL_OAUTH_ALLOWED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0)

        def EXTERNAL_OAUTH_RSA_PUBLIC_KEY(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0)

        def EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0)

        def EXTERNAL_OAUTH_AUDIENCE_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0)

        def EXTERNAL_OAUTH_ANY_ROLE_MODE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, 0)

        def EXTERNAL_OAUTH_SCOPE_DELIMITER(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER, 0)

        def DISABLE(self):
            return self.getToken(SnowflakeParser.DISABLE, 0)

        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def ENABLE_FOR_PRIVILEGE(self):
            return self.getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_security_integration_external_oauth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_security_integration_external_oauth" ):
                listener.enterCreate_security_integration_external_oauth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_security_integration_external_oauth" ):
                listener.exitCreate_security_integration_external_oauth(self)




    def create_security_integration_external_oauth(self):

        localctx = SnowflakeParser.Create_security_integration_external_oauthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_create_security_integration_external_oauth)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8237
            self.match(SnowflakeParser.CREATE)
            self.state = 8239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8238
                self.or_replace()


            self.state = 8241
            self.match(SnowflakeParser.SECURITY)
            self.state = 8242
            self.match(SnowflakeParser.INTEGRATION)
            self.state = 8244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,985,self._ctx)
            if la_ == 1:
                self.state = 8243
                self.if_not_exists()


            self.state = 8246
            self.id_()
            self.state = 8247
            self.match(SnowflakeParser.TYPE)
            self.state = 8248
            self.match(SnowflakeParser.EQ)
            self.state = 8249
            self.match(SnowflakeParser.EXTERNAL_OAUTH)
            self.state = 8250
            self.match(SnowflakeParser.ENABLED)
            self.state = 8251
            self.match(SnowflakeParser.EQ)
            self.state = 8252
            self.true_false()
            self.state = 8253
            self.match(SnowflakeParser.EXTERNAL_OAUTH_TYPE)
            self.state = 8254
            self.match(SnowflakeParser.EQ)
            self.state = 8255
            _la = self._input.LA(1)
            if not(_la==73 or _la==166 or _la==483 or _la==538):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8256
            self.match(SnowflakeParser.EXTERNAL_OAUTH_ISSUER)
            self.state = 8257
            self.match(SnowflakeParser.EQ)
            self.state = 8258
            self.string()
            self.state = 8259
            self.match(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM)
            self.state = 8260
            self.match(SnowflakeParser.EQ)
            self.state = 8266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [912]:
                self.state = 8261
                self.string()
                pass
            elif token in [931]:
                self.state = 8262
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8263
                self.string_list()
                self.state = 8264
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8268
            self.match(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE)
            self.state = 8269
            self.match(SnowflakeParser.EQ)
            self.state = 8270
            self.string()
            self.state = 8274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,987,self._ctx)
            if la_ == 1:
                self.state = 8271
                self.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
                self.state = 8272
                self.match(SnowflakeParser.EQ)
                self.state = 8273
                self.string()


            self.state = 8285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==257:
                self.state = 8276
                self.match(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL)
                self.state = 8277
                self.match(SnowflakeParser.EQ)
                self.state = 8283
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8278
                    self.string()
                    pass
                elif token in [931]:
                    self.state = 8279
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 8280
                    self.string_list()
                    self.state = 8281
                    self.match(SnowflakeParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 8293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==255:
                self.state = 8287
                self.match(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST)
                self.state = 8288
                self.match(SnowflakeParser.EQ)
                self.state = 8289
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8290
                self.string_list()
                self.state = 8291
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 8301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 8295
                self.match(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST)
                self.state = 8296
                self.match(SnowflakeParser.EQ)
                self.state = 8297
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8298
                self.string_list()
                self.state = 8299
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 8306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 8303
                self.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY)
                self.state = 8304
                self.match(SnowflakeParser.EQ)
                self.state = 8305
                self.string()


            self.state = 8311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==259:
                self.state = 8308
                self.match(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2)
                self.state = 8309
                self.match(SnowflakeParser.EQ)
                self.state = 8310
                self.string()


            self.state = 8319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==254:
                self.state = 8313
                self.match(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST)
                self.state = 8314
                self.match(SnowflakeParser.EQ)
                self.state = 8315
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8316
                self.string()
                self.state = 8317
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 8324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==253:
                self.state = 8321
                self.match(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE)
                self.state = 8322
                self.match(SnowflakeParser.EQ)
                self.state = 8323
                _la = self._input.LA(1)
                if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 327681) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==260:
                self.state = 8326
                self.match(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER)
                self.state = 8327
                self.match(SnowflakeParser.EQ)
                self.state = 8328
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Implicit_noneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLICIT(self):
            return self.getToken(SnowflakeParser.IMPLICIT, 0)

        def NONE(self):
            return self.getToken(SnowflakeParser.NONE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_implicit_none

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicit_none" ):
                listener.enterImplicit_none(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicit_none" ):
                listener.exitImplicit_none(self)




    def implicit_none(self):

        localctx = SnowflakeParser.Implicit_noneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_implicit_none)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8331
            _la = self._input.LA(1)
            if not(_la==336 or _la==444):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_security_integration_snowflake_oauthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def OAUTH(self):
            return self.getToken(SnowflakeParser.OAUTH, 0)

        def OAUTH_CLIENT(self):
            return self.getToken(SnowflakeParser.OAUTH_CLIENT, 0)

        def partner_application(self):
            return self.getTypedRuleContext(SnowflakeParser.Partner_applicationContext,0)


        def OAUTH_REDIRECT_URI(self):
            return self.getToken(SnowflakeParser.OAUTH_REDIRECT_URI, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def enabled_true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.Enabled_true_falseContext,0)


        def OAUTH_ISSUE_REFRESH_TOKENS(self):
            return self.getToken(SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS, 0)

        def true_false(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.True_falseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.True_falseContext,i)


        def OAUTH_REFRESH_TOKEN_VALIDITY(self):
            return self.getToken(SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def OAUTH_USE_SECONDARY_ROLES(self):
            return self.getToken(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES, 0)

        def implicit_none(self):
            return self.getTypedRuleContext(SnowflakeParser.Implicit_noneContext,0)


        def BLOCKED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.BLOCKED_ROLES_LIST, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def CUSTOM(self):
            return self.getToken(SnowflakeParser.CUSTOM, 0)

        def OAUTH_ALLOW_NON_TLS_REDIRECT_URI(self):
            return self.getToken(SnowflakeParser.OAUTH_ALLOW_NON_TLS_REDIRECT_URI, 0)

        def OAUTH_ENFORCE_PKCE(self):
            return self.getToken(SnowflakeParser.OAUTH_ENFORCE_PKCE, 0)

        def PRE_AUTHORIZED_ROLES_LIST(self):
            return self.getToken(SnowflakeParser.PRE_AUTHORIZED_ROLES_LIST, 0)

        def network_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Network_policyContext,0)


        def OAUTH_CLIENT_RSA_PUBLIC_KEY(self):
            return self.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY, 0)

        def OAUTH_CLIENT_RSA_PUBLIC_KEY_2(self):
            return self.getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_security_integration_snowflake_oauth

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_security_integration_snowflake_oauth" ):
                listener.enterCreate_security_integration_snowflake_oauth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_security_integration_snowflake_oauth" ):
                listener.exitCreate_security_integration_snowflake_oauth(self)




    def create_security_integration_snowflake_oauth(self):

        localctx = SnowflakeParser.Create_security_integration_snowflake_oauthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_create_security_integration_snowflake_oauth)
        self._la = 0 # Token type
        try:
            self.state = 8460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1019,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8333
                self.match(SnowflakeParser.CREATE)
                self.state = 8335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 8334
                    self.or_replace()


                self.state = 8337
                self.match(SnowflakeParser.SECURITY)
                self.state = 8338
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 8340
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,998,self._ctx)
                if la_ == 1:
                    self.state = 8339
                    self.if_not_exists()


                self.state = 8342
                self.id_()
                self.state = 8343
                self.match(SnowflakeParser.TYPE)
                self.state = 8344
                self.match(SnowflakeParser.EQ)
                self.state = 8345
                self.match(SnowflakeParser.OAUTH)
                self.state = 8346
                self.match(SnowflakeParser.OAUTH_CLIENT)
                self.state = 8347
                self.match(SnowflakeParser.EQ)
                self.state = 8348
                self.partner_application()
                self.state = 8349
                self.match(SnowflakeParser.OAUTH_REDIRECT_URI)
                self.state = 8350
                self.match(SnowflakeParser.EQ)
                self.state = 8351
                self.string()
                self.state = 8353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 8352
                    self.enabled_true_false()


                self.state = 8358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 8355
                    self.match(SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS)
                    self.state = 8356
                    self.match(SnowflakeParser.EQ)
                    self.state = 8357
                    self.true_false()


                self.state = 8363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 8360
                    self.match(SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY)
                    self.state = 8361
                    self.match(SnowflakeParser.EQ)
                    self.state = 8362
                    self.num()


                self.state = 8368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==476:
                    self.state = 8365
                    self.match(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES)
                    self.state = 8366
                    self.match(SnowflakeParser.EQ)
                    self.state = 8367
                    self.implicit_none()


                self.state = 8376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 8370
                    self.match(SnowflakeParser.BLOCKED_ROLES_LIST)
                    self.state = 8371
                    self.match(SnowflakeParser.EQ)
                    self.state = 8372
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 8373
                    self.string_list()
                    self.state = 8374
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 8379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 8378
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8381
                self.match(SnowflakeParser.CREATE)
                self.state = 8383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 8382
                    self.or_replace()


                self.state = 8385
                self.match(SnowflakeParser.SECURITY)
                self.state = 8386
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 8388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
                if la_ == 1:
                    self.state = 8387
                    self.if_not_exists()


                self.state = 8390
                self.id_()
                self.state = 8391
                self.match(SnowflakeParser.TYPE)
                self.state = 8392
                self.match(SnowflakeParser.EQ)
                self.state = 8393
                self.match(SnowflakeParser.OAUTH)
                self.state = 8394
                self.match(SnowflakeParser.OAUTH_CLIENT)
                self.state = 8395
                self.match(SnowflakeParser.EQ)
                self.state = 8396
                self.match(SnowflakeParser.CUSTOM)
                self.state = 8397
                self.match(SnowflakeParser.OAUTH_REDIRECT_URI)
                self.state = 8398
                self.match(SnowflakeParser.EQ)
                self.state = 8399
                self.string()
                self.state = 8401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 8400
                    self.enabled_true_false()


                self.state = 8406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==465:
                    self.state = 8403
                    self.match(SnowflakeParser.OAUTH_ALLOW_NON_TLS_REDIRECT_URI)
                    self.state = 8404
                    self.match(SnowflakeParser.EQ)
                    self.state = 8405
                    self.true_false()


                self.state = 8411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==469:
                    self.state = 8408
                    self.match(SnowflakeParser.OAUTH_ENFORCE_PKCE)
                    self.state = 8409
                    self.match(SnowflakeParser.EQ)
                    self.state = 8410
                    self.true_false()


                self.state = 8416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==476:
                    self.state = 8413
                    self.match(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES)
                    self.state = 8414
                    self.match(SnowflakeParser.EQ)
                    self.state = 8415
                    self.implicit_none()


                self.state = 8424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==550:
                    self.state = 8418
                    self.match(SnowflakeParser.PRE_AUTHORIZED_ROLES_LIST)
                    self.state = 8419
                    self.match(SnowflakeParser.EQ)
                    self.state = 8420
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 8421
                    self.string_list()
                    self.state = 8422
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 8432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 8426
                    self.match(SnowflakeParser.BLOCKED_ROLES_LIST)
                    self.state = 8427
                    self.match(SnowflakeParser.EQ)
                    self.state = 8428
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 8429
                    self.string_list()
                    self.state = 8430
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 8437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 8434
                    self.match(SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS)
                    self.state = 8435
                    self.match(SnowflakeParser.EQ)
                    self.state = 8436
                    self.true_false()


                self.state = 8442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 8439
                    self.match(SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY)
                    self.state = 8440
                    self.match(SnowflakeParser.EQ)
                    self.state = 8441
                    self.num()


                self.state = 8445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==439:
                    self.state = 8444
                    self.network_policy()


                self.state = 8450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==467:
                    self.state = 8447
                    self.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY)
                    self.state = 8448
                    self.match(SnowflakeParser.EQ)
                    self.state = 8449
                    self.string()


                self.state = 8455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==468:
                    self.state = 8452
                    self.match(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2)
                    self.state = 8453
                    self.match(SnowflakeParser.EQ)
                    self.state = 8454
                    self.string()


                self.state = 8458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 8457
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_security_integration_saml2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def SAML2(self):
            return self.getToken(SnowflakeParser.SAML2, 0)

        def enabled_true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.Enabled_true_falseContext,0)


        def SAML2_ISSUER(self):
            return self.getToken(SnowflakeParser.SAML2_ISSUER, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def SAML2_SSO_URL(self):
            return self.getToken(SnowflakeParser.SAML2_SSO_URL, 0)

        def SAML2_PROVIDER(self):
            return self.getToken(SnowflakeParser.SAML2_PROVIDER, 0)

        def SAML2_X509_CERT(self):
            return self.getToken(SnowflakeParser.SAML2_X509_CERT, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def SAML2_SP_INITIATED_LOGIN_PAGE_LABEL(self):
            return self.getToken(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0)

        def SAML2_ENABLE_SP_INITIATED(self):
            return self.getToken(SnowflakeParser.SAML2_ENABLE_SP_INITIATED, 0)

        def true_false(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.True_falseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.True_falseContext,i)


        def SAML2_SNOWFLAKE_X509_CERT(self):
            return self.getToken(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT, 0)

        def SAML2_SIGN_REQUEST(self):
            return self.getToken(SnowflakeParser.SAML2_SIGN_REQUEST, 0)

        def SAML2_REQUESTED_NAMEID_FORMAT(self):
            return self.getToken(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT, 0)

        def SAML2_POST_LOGOUT_REDIRECT_URL(self):
            return self.getToken(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL, 0)

        def SAML2_FORCE_AUTHN(self):
            return self.getToken(SnowflakeParser.SAML2_FORCE_AUTHN, 0)

        def SAML2_SNOWFLAKE_ISSUER_URL(self):
            return self.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL, 0)

        def SAML2_SNOWFLAKE_ACS_URL(self):
            return self.getToken(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_security_integration_saml2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_security_integration_saml2" ):
                listener.enterCreate_security_integration_saml2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_security_integration_saml2" ):
                listener.exitCreate_security_integration_saml2(self)




    def create_security_integration_saml2(self):

        localctx = SnowflakeParser.Create_security_integration_saml2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_create_security_integration_saml2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8462
            self.match(SnowflakeParser.CREATE)
            self.state = 8464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8463
                self.or_replace()


            self.state = 8466
            self.match(SnowflakeParser.SECURITY)
            self.state = 8467
            self.match(SnowflakeParser.INTEGRATION)
            self.state = 8469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==327:
                self.state = 8468
                self.if_not_exists()


            self.state = 8471
            self.match(SnowflakeParser.TYPE)
            self.state = 8472
            self.match(SnowflakeParser.EQ)
            self.state = 8473
            self.match(SnowflakeParser.SAML2)
            self.state = 8474
            self.enabled_true_false()
            self.state = 8475
            self.match(SnowflakeParser.SAML2_ISSUER)
            self.state = 8476
            self.match(SnowflakeParser.EQ)
            self.state = 8477
            self.string()
            self.state = 8478
            self.match(SnowflakeParser.SAML2_SSO_URL)
            self.state = 8479
            self.match(SnowflakeParser.EQ)
            self.state = 8480
            self.string()
            self.state = 8481
            self.match(SnowflakeParser.SAML2_PROVIDER)
            self.state = 8482
            self.match(SnowflakeParser.EQ)
            self.state = 8483
            self.string()
            self.state = 8484
            self.match(SnowflakeParser.SAML2_X509_CERT)
            self.state = 8485
            self.match(SnowflakeParser.EQ)
            self.state = 8486
            self.string()
            self.state = 8490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==647:
                self.state = 8487
                self.match(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL)
                self.state = 8488
                self.match(SnowflakeParser.EQ)
                self.state = 8489
                self.string()


            self.state = 8495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==637:
                self.state = 8492
                self.match(SnowflakeParser.SAML2_ENABLE_SP_INITIATED)
                self.state = 8493
                self.match(SnowflakeParser.EQ)
                self.state = 8494
                self.true_false()


            self.state = 8500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==646:
                self.state = 8497
                self.match(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT)
                self.state = 8498
                self.match(SnowflakeParser.EQ)
                self.state = 8499
                self.string()


            self.state = 8505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==643:
                self.state = 8502
                self.match(SnowflakeParser.SAML2_SIGN_REQUEST)
                self.state = 8503
                self.match(SnowflakeParser.EQ)
                self.state = 8504
                self.true_false()


            self.state = 8510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==642:
                self.state = 8507
                self.match(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT)
                self.state = 8508
                self.match(SnowflakeParser.EQ)
                self.state = 8509
                self.string()


            self.state = 8515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==640:
                self.state = 8512
                self.match(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL)
                self.state = 8513
                self.match(SnowflakeParser.EQ)
                self.state = 8514
                self.string()


            self.state = 8520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==638:
                self.state = 8517
                self.match(SnowflakeParser.SAML2_FORCE_AUTHN)
                self.state = 8518
                self.match(SnowflakeParser.EQ)
                self.state = 8519
                self.true_false()


            self.state = 8525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==645:
                self.state = 8522
                self.match(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL)
                self.state = 8523
                self.match(SnowflakeParser.EQ)
                self.state = 8524
                self.string()


            self.state = 8530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==644:
                self.state = 8527
                self.match(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL)
                self.state = 8528
                self.match(SnowflakeParser.EQ)
                self.state = 8529
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_security_integration_scimContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def SCIM(self):
            return self.getToken(SnowflakeParser.SCIM, 0)

        def SCIM_CLIENT(self):
            return self.getToken(SnowflakeParser.SCIM_CLIENT, 0)

        def RUN_AS_ROLE(self):
            return self.getToken(SnowflakeParser.RUN_AS_ROLE, 0)

        def OKTA_Q(self):
            return self.getToken(SnowflakeParser.OKTA_Q, 0)

        def AZURE_Q(self):
            return self.getToken(SnowflakeParser.AZURE_Q, 0)

        def GENERIC_Q(self):
            return self.getToken(SnowflakeParser.GENERIC_Q, 0)

        def OKTA_PROVISIONER_Q(self):
            return self.getToken(SnowflakeParser.OKTA_PROVISIONER_Q, 0)

        def AAD_PROVISIONER_Q(self):
            return self.getToken(SnowflakeParser.AAD_PROVISIONER_Q, 0)

        def GENERIC_SCIM_PROVISIONER_Q(self):
            return self.getToken(SnowflakeParser.GENERIC_SCIM_PROVISIONER_Q, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def network_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Network_policyContext,0)


        def SYNC_PASSWORD(self):
            return self.getToken(SnowflakeParser.SYNC_PASSWORD, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_security_integration_scim

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_security_integration_scim" ):
                listener.enterCreate_security_integration_scim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_security_integration_scim" ):
                listener.exitCreate_security_integration_scim(self)




    def create_security_integration_scim(self):

        localctx = SnowflakeParser.Create_security_integration_scimContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_create_security_integration_scim)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8532
            self.match(SnowflakeParser.CREATE)
            self.state = 8534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8533
                self.or_replace()


            self.state = 8536
            self.match(SnowflakeParser.SECURITY)
            self.state = 8537
            self.match(SnowflakeParser.INTEGRATION)
            self.state = 8539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
            if la_ == 1:
                self.state = 8538
                self.if_not_exists()


            self.state = 8541
            self.id_()
            self.state = 8542
            self.match(SnowflakeParser.TYPE)
            self.state = 8543
            self.match(SnowflakeParser.EQ)
            self.state = 8544
            self.match(SnowflakeParser.SCIM)
            self.state = 8545
            self.match(SnowflakeParser.SCIM_CLIENT)
            self.state = 8546
            self.match(SnowflakeParser.EQ)
            self.state = 8547
            _la = self._input.LA(1)
            if not(_la==78 or _la==296 or _la==485):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8548
            self.match(SnowflakeParser.RUN_AS_ROLE)
            self.state = 8549
            self.match(SnowflakeParser.EQ)
            self.state = 8550
            _la = self._input.LA(1)
            if not(_la==1 or _la==297 or _la==484):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==439:
                self.state = 8551
                self.network_policy()


            self.state = 8557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==744:
                self.state = 8554
                self.match(SnowflakeParser.SYNC_PASSWORD)
                self.state = 8555
                self.match(SnowflakeParser.EQ)
                self.state = 8556
                self.true_false()


            self.state = 8560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8559
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Network_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NETWORK_POLICY(self):
            return self.getToken(SnowflakeParser.NETWORK_POLICY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_network_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNetwork_policy" ):
                listener.enterNetwork_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNetwork_policy" ):
                listener.exitNetwork_policy(self)




    def network_policy(self):

        localctx = SnowflakeParser.Network_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_network_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8562
            self.match(SnowflakeParser.NETWORK_POLICY)
            self.state = 8563
            self.match(SnowflakeParser.EQ)
            self.state = 8564
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partner_applicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLEAU_DESKTOP(self):
            return self.getToken(SnowflakeParser.TABLEAU_DESKTOP, 0)

        def TABLEAU_SERVER(self):
            return self.getToken(SnowflakeParser.TABLEAU_SERVER, 0)

        def LOOKER(self):
            return self.getToken(SnowflakeParser.LOOKER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_partner_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartner_application" ):
                listener.enterPartner_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartner_application" ):
                listener.exitPartner_application(self)




    def partner_application(self):

        localctx = SnowflakeParser.Partner_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_partner_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8566
            _la = self._input.LA(1)
            if not(_la==395 or _la==748 or _la==749):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Start_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(SnowflakeParser.START, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_start_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart_with" ):
                listener.enterStart_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart_with" ):
                listener.exitStart_with(self)




    def start_with(self):

        localctx = SnowflakeParser.Start_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_start_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8568
            self.match(SnowflakeParser.START)
            self.state = 8570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==847:
                self.state = 8569
                self.match(SnowflakeParser.WITH)


            self.state = 8573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==921:
                self.state = 8572
                self.match(SnowflakeParser.EQ)


            self.state = 8575
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Increment_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENT(self):
            return self.getToken(SnowflakeParser.INCREMENT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_increment_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncrement_by" ):
                listener.enterIncrement_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncrement_by" ):
                listener.exitIncrement_by(self)




    def increment_by(self):

        localctx = SnowflakeParser.Increment_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_increment_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8577
            self.match(SnowflakeParser.INCREMENT)
            self.state = 8579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==99:
                self.state = 8578
                self.match(SnowflakeParser.BY)


            self.state = 8582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==921:
                self.state = 8581
                self.match(SnowflakeParser.EQ)


            self.state = 8584
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def start_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Start_withContext,0)


        def increment_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Increment_byContext,0)


        def order_noorder(self):
            return self.getTypedRuleContext(SnowflakeParser.Order_noorderContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_sequence" ):
                listener.enterCreate_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_sequence" ):
                listener.exitCreate_sequence(self)




    def create_sequence(self):

        localctx = SnowflakeParser.Create_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_create_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8586
            self.match(SnowflakeParser.CREATE)
            self.state = 8588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8587
                self.or_replace()


            self.state = 8590
            self.match(SnowflakeParser.SEQUENCE)
            self.state = 8592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1041,self._ctx)
            if la_ == 1:
                self.state = 8591
                self.if_not_exists()


            self.state = 8594
            self.object_name()
            self.state = 8596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==847:
                self.state = 8595
                self.match(SnowflakeParser.WITH)


            self.state = 8599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==711:
                self.state = 8598
                self.start_with()


            self.state = 8602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==341:
                self.state = 8601
                self.increment_by()


            self.state = 8605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==446 or _la==500:
                self.state = 8604
                self.order_noorder()


            self.state = 8608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8607
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_session_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def session_policy_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Session_policy_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Session_policy_paramsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_session_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_session_policy" ):
                listener.enterCreate_session_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_session_policy" ):
                listener.exitCreate_session_policy(self)




    def create_session_policy(self):

        localctx = SnowflakeParser.Create_session_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_create_session_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8610
            self.match(SnowflakeParser.CREATE)
            self.state = 8612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8611
                self.or_replace()


            self.state = 8614
            self.match(SnowflakeParser.SESSION)
            self.state = 8615
            self.match(SnowflakeParser.POLICY)
            self.state = 8617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
            if la_ == 1:
                self.state = 8616
                self.if_not_exists()


            self.state = 8619
            self.object_name()
            self.state = 8623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138 or _la==673 or _la==675:
                self.state = 8620
                self.session_policy_params()
                self.state = 8625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_policy_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def session_policy_param_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_policy_param_nameContext,0)


        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_session_policy_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_policy_params" ):
                listener.enterSession_policy_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_policy_params" ):
                listener.exitSession_policy_params(self)




    def session_policy_params(self):

        localctx = SnowflakeParser.Session_policy_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_session_policy_params)
        try:
            self.state = 8631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [673, 675]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8626
                self.session_policy_param_name()
                self.state = 8627
                self.match(SnowflakeParser.EQ)
                self.state = 8628
                self.num()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8630
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_policy_param_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION_IDLE_TIMEOUT_MINS(self):
            return self.getToken(SnowflakeParser.SESSION_IDLE_TIMEOUT_MINS, 0)

        def SESSION_UI_IDLE_TIMEOUT_MINS(self):
            return self.getToken(SnowflakeParser.SESSION_UI_IDLE_TIMEOUT_MINS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_session_policy_param_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_policy_param_name" ):
                listener.enterSession_policy_param_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_policy_param_name" ):
                listener.exitSession_policy_param_name(self)




    def session_policy_param_name(self):

        localctx = SnowflakeParser.Session_policy_param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_session_policy_param_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8633
            _la = self._input.LA(1)
            if not(_la==673 or _la==675):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_password_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def password_policy_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Password_policy_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Password_policy_paramsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_password_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_password_policy" ):
                listener.enterCreate_password_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_password_policy" ):
                listener.exitCreate_password_policy(self)




    def create_password_policy(self):

        localctx = SnowflakeParser.Create_password_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_create_password_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8635
            self.match(SnowflakeParser.CREATE)
            self.state = 8637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8636
                self.or_replace()


            self.state = 8639
            self.match(SnowflakeParser.PASSWORD)
            self.state = 8640
            self.match(SnowflakeParser.POLICY)
            self.state = 8642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1052,self._ctx)
            if la_ == 1:
                self.state = 8641
                self.if_not_exists()


            self.state = 8644
            self.object_name()
            self.state = 8648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==138 or ((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & 2047) != 0):
                self.state = 8645
                self.password_policy_params()
                self.state = 8650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Password_policy_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def password_policy_param_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Password_policy_param_nameContext,0)


        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_password_policy_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword_policy_params" ):
                listener.enterPassword_policy_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword_policy_params" ):
                listener.exitPassword_policy_params(self)




    def password_policy_params(self):

        localctx = SnowflakeParser.Password_policy_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_password_policy_params)
        try:
            self.state = 8656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8651
                self.password_policy_param_name()
                self.state = 8652
                self.match(SnowflakeParser.EQ)
                self.state = 8653
                self.num()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8655
                self.comment_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Password_policy_param_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD_HISTORY(self):
            return self.getToken(SnowflakeParser.PASSWORD_HISTORY, 0)

        def PASSWORD_LOCKOUT_TIME_MINS(self):
            return self.getToken(SnowflakeParser.PASSWORD_LOCKOUT_TIME_MINS, 0)

        def PASSWORD_MAX_AGE_DAYS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MAX_AGE_DAYS, 0)

        def PASSWORD_MAX_LENGTH(self):
            return self.getToken(SnowflakeParser.PASSWORD_MAX_LENGTH, 0)

        def PASSWORD_MAX_RETRIES(self):
            return self.getToken(SnowflakeParser.PASSWORD_MAX_RETRIES, 0)

        def PASSWORD_MIN_AGE_DAYS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_AGE_DAYS, 0)

        def PASSWORD_MIN_LENGTH(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_LENGTH, 0)

        def PASSWORD_MIN_LOWER_CASE_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_LOWER_CASE_CHARS, 0)

        def PASSWORD_MIN_NUMERIC_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_NUMERIC_CHARS, 0)

        def PASSWORD_MIN_SPECIAL_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_SPECIAL_CHARS, 0)

        def PASSWORD_MIN_UPPER_CASE_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_UPPER_CASE_CHARS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_password_policy_param_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword_policy_param_name" ):
                listener.enterPassword_policy_param_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword_policy_param_name" ):
                listener.exitPassword_policy_param_name(self)




    def password_policy_param_name(self):

        localctx = SnowflakeParser.Password_policy_param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_password_policy_param_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8658
            _la = self._input.LA(1)
            if not(((((_la - 521)) & ~0x3f) == 0 and ((1 << (_la - 521)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_share" ):
                listener.enterCreate_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_share" ):
                listener.exitCreate_share(self)




    def create_share(self):

        localctx = SnowflakeParser.Create_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_create_share)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8660
            self.match(SnowflakeParser.CREATE)
            self.state = 8662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 8661
                self.or_replace()


            self.state = 8664
            self.match(SnowflakeParser.SHARE)
            self.state = 8665
            self.id_()
            self.state = 8667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 8666
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_LITERAL(self):
            return self.getToken(SnowflakeParser.CHAR_LITERAL, 0)

        def AAD_PROVISIONER_Q(self):
            return self.getToken(SnowflakeParser.AAD_PROVISIONER_Q, 0)

        def ARRAY_Q(self):
            return self.getToken(SnowflakeParser.ARRAY_Q, 0)

        def AUTO_Q(self):
            return self.getToken(SnowflakeParser.AUTO_Q, 0)

        def AVRO_Q(self):
            return self.getToken(SnowflakeParser.AVRO_Q, 0)

        def AZURE_CSE_Q(self):
            return self.getToken(SnowflakeParser.AZURE_CSE_Q, 0)

        def AZURE_Q(self):
            return self.getToken(SnowflakeParser.AZURE_Q, 0)

        def BOTH_Q(self):
            return self.getToken(SnowflakeParser.BOTH_Q, 0)

        def CSV_Q(self):
            return self.getToken(SnowflakeParser.CSV_Q, 0)

        def GCS_SSE_KMS_Q(self):
            return self.getToken(SnowflakeParser.GCS_SSE_KMS_Q, 0)

        def GENERIC_Q(self):
            return self.getToken(SnowflakeParser.GENERIC_Q, 0)

        def GENERIC_SCIM_PROVISIONER_Q(self):
            return self.getToken(SnowflakeParser.GENERIC_SCIM_PROVISIONER_Q, 0)

        def JSON_Q(self):
            return self.getToken(SnowflakeParser.JSON_Q, 0)

        def NONE_Q(self):
            return self.getToken(SnowflakeParser.NONE_Q, 0)

        def OBJECT_Q(self):
            return self.getToken(SnowflakeParser.OBJECT_Q, 0)

        def OKTA_PROVISIONER_Q(self):
            return self.getToken(SnowflakeParser.OKTA_PROVISIONER_Q, 0)

        def OKTA_Q(self):
            return self.getToken(SnowflakeParser.OKTA_Q, 0)

        def ORC_Q(self):
            return self.getToken(SnowflakeParser.ORC_Q, 0)

        def PARQUET_Q(self):
            return self.getToken(SnowflakeParser.PARQUET_Q, 0)

        def S3(self):
            return self.getToken(SnowflakeParser.S3, 0)

        def SNOWPARK_OPTIMIZED(self):
            return self.getToken(SnowflakeParser.SNOWPARK_OPTIMIZED, 0)

        def XML_Q(self):
            return self.getToken(SnowflakeParser.XML_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_character

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter" ):
                listener.enterCharacter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter" ):
                listener.exitCharacter(self)




    def character(self):

        localctx = SnowflakeParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_character)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8669
            _la = self._input.LA(1)
            if not(_la==1 or _la==52 or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2147502081) != 0) or _la==160 or ((((_la - 294)) & ~0x3f) == 0 and ((1 << (_la - 294)) & 13) != 0) or _la==367 or ((((_la - 445)) & ~0x3f) == 0 and ((1 << (_la - 445)) & 18016056366858241) != 0) or _la==516 or _la==635 or _la==697 or ((((_la - 856)) & ~0x3f) == 0 and ((1 << (_la - 856)) & 1152921504606847233) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_type_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPRESSION(self):
            return self.getToken(SnowflakeParser.COMPRESSION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def AUTO(self):
            return self.getToken(SnowflakeParser.AUTO, 0)

        def GZIP(self):
            return self.getToken(SnowflakeParser.GZIP, 0)

        def BZ2(self):
            return self.getToken(SnowflakeParser.BZ2, 0)

        def BROTLI(self):
            return self.getToken(SnowflakeParser.BROTLI, 0)

        def ZSTD(self):
            return self.getToken(SnowflakeParser.ZSTD, 0)

        def DEFLATE(self):
            return self.getToken(SnowflakeParser.DEFLATE, 0)

        def RAW_DEFLATE(self):
            return self.getToken(SnowflakeParser.RAW_DEFLATE, 0)

        def NONE(self):
            return self.getToken(SnowflakeParser.NONE, 0)

        def AUTO_Q(self):
            return self.getToken(SnowflakeParser.AUTO_Q, 0)

        def RECORD_DELIMITER(self):
            return self.getToken(SnowflakeParser.RECORD_DELIMITER, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def FIELD_DELIMITER(self):
            return self.getToken(SnowflakeParser.FIELD_DELIMITER, 0)

        def FILE_EXTENSION(self):
            return self.getToken(SnowflakeParser.FILE_EXTENSION, 0)

        def SKIP_HEADER(self):
            return self.getToken(SnowflakeParser.SKIP_HEADER, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def SKIP_BLANK_LINES(self):
            return self.getToken(SnowflakeParser.SKIP_BLANK_LINES, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def DATE_FORMAT(self):
            return self.getToken(SnowflakeParser.DATE_FORMAT, 0)

        def TIME_FORMAT(self):
            return self.getToken(SnowflakeParser.TIME_FORMAT, 0)

        def TIMESTAMP_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_FORMAT, 0)

        def BINARY_FORMAT(self):
            return self.getToken(SnowflakeParser.BINARY_FORMAT, 0)

        def HEX(self):
            return self.getToken(SnowflakeParser.HEX, 0)

        def BASE64(self):
            return self.getToken(SnowflakeParser.BASE64, 0)

        def UTF8(self):
            return self.getToken(SnowflakeParser.UTF8, 0)

        def ESCAPE(self):
            return self.getToken(SnowflakeParser.ESCAPE, 0)

        def character(self):
            return self.getTypedRuleContext(SnowflakeParser.CharacterContext,0)


        def NONE_Q(self):
            return self.getToken(SnowflakeParser.NONE_Q, 0)

        def ESCAPE_UNENCLOSED_FIELD(self):
            return self.getToken(SnowflakeParser.ESCAPE_UNENCLOSED_FIELD, 0)

        def TRIM_SPACE(self):
            return self.getToken(SnowflakeParser.TRIM_SPACE, 0)

        def FIELD_OPTIONALLY_ENCLOSED_BY(self):
            return self.getToken(SnowflakeParser.FIELD_OPTIONALLY_ENCLOSED_BY, 0)

        def SINGLE_QUOTE(self):
            return self.getToken(SnowflakeParser.SINGLE_QUOTE, 0)

        def NULL_IF(self):
            return self.getToken(SnowflakeParser.NULL_IF, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def ERROR_ON_COLUMN_COUNT_MISMATCH(self):
            return self.getToken(SnowflakeParser.ERROR_ON_COLUMN_COUNT_MISMATCH, 0)

        def REPLACE_INVALID_CHARACTERS(self):
            return self.getToken(SnowflakeParser.REPLACE_INVALID_CHARACTERS, 0)

        def EMPTY_FIELD_AS_NULL(self):
            return self.getToken(SnowflakeParser.EMPTY_FIELD_AS_NULL, 0)

        def SKIP_BYTE_ORDER_MARK(self):
            return self.getToken(SnowflakeParser.SKIP_BYTE_ORDER_MARK, 0)

        def ENCODING(self):
            return self.getToken(SnowflakeParser.ENCODING, 0)

        def ENABLE_OCTAL(self):
            return self.getToken(SnowflakeParser.ENABLE_OCTAL, 0)

        def ALLOW_DUPLICATE(self):
            return self.getToken(SnowflakeParser.ALLOW_DUPLICATE, 0)

        def STRIP_OUTER_ARRAY(self):
            return self.getToken(SnowflakeParser.STRIP_OUTER_ARRAY, 0)

        def STRIP_NULL_VALUES(self):
            return self.getToken(SnowflakeParser.STRIP_NULL_VALUES, 0)

        def IGNORE_UTF8_ERRORS(self):
            return self.getToken(SnowflakeParser.IGNORE_UTF8_ERRORS, 0)

        def LZO(self):
            return self.getToken(SnowflakeParser.LZO, 0)

        def SNAPPY(self):
            return self.getToken(SnowflakeParser.SNAPPY, 0)

        def SNAPPY_COMPRESSION(self):
            return self.getToken(SnowflakeParser.SNAPPY_COMPRESSION, 0)

        def BINARY_AS_TEXT(self):
            return self.getToken(SnowflakeParser.BINARY_AS_TEXT, 0)

        def PRESERVE_SPACE(self):
            return self.getToken(SnowflakeParser.PRESERVE_SPACE, 0)

        def STRIP_OUTER_ELEMENT(self):
            return self.getToken(SnowflakeParser.STRIP_OUTER_ELEMENT, 0)

        def DISABLE_SNOWFLAKE_DATA(self):
            return self.getToken(SnowflakeParser.DISABLE_SNOWFLAKE_DATA, 0)

        def DISABLE_AUTO_CONVERT(self):
            return self.getToken(SnowflakeParser.DISABLE_AUTO_CONVERT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_format_type_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_type_options" ):
                listener.enterFormat_type_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_type_options" ):
                listener.exitFormat_type_options(self)




    def format_type_options(self):

        localctx = SnowflakeParser.Format_type_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_format_type_options)
        self._la = 0 # Token type
        try:
            self.state = 8818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8671
                self.match(SnowflakeParser.COMPRESSION)
                self.state = 8672
                self.match(SnowflakeParser.EQ)
                self.state = 8673
                _la = self._input.LA(1)
                if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 633318697598979) != 0) or _la==191 or _la==313 or _la==444 or _la==573 or _la==862):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8674
                self.match(SnowflakeParser.RECORD_DELIMITER)
                self.state = 8675
                self.match(SnowflakeParser.EQ)
                self.state = 8678
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8676
                    self.string()
                    pass
                elif token in [444]:
                    self.state = 8677
                    self.match(SnowflakeParser.NONE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8680
                self.match(SnowflakeParser.FIELD_DELIMITER)
                self.state = 8681
                self.match(SnowflakeParser.EQ)
                self.state = 8684
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8682
                    self.string()
                    pass
                elif token in [444]:
                    self.state = 8683
                    self.match(SnowflakeParser.NONE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8686
                self.match(SnowflakeParser.FILE_EXTENSION)
                self.state = 8687
                self.match(SnowflakeParser.EQ)
                self.state = 8688
                self.string()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8689
                self.match(SnowflakeParser.SKIP_HEADER)
                self.state = 8690
                self.match(SnowflakeParser.EQ)
                self.state = 8691
                self.num()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8692
                self.match(SnowflakeParser.SKIP_BLANK_LINES)
                self.state = 8693
                self.match(SnowflakeParser.EQ)
                self.state = 8694
                self.true_false()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8695
                self.match(SnowflakeParser.DATE_FORMAT)
                self.state = 8696
                self.match(SnowflakeParser.EQ)
                self.state = 8699
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8697
                    self.string()
                    pass
                elif token in [51]:
                    self.state = 8698
                    self.match(SnowflakeParser.AUTO)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8701
                self.match(SnowflakeParser.TIME_FORMAT)
                self.state = 8702
                self.match(SnowflakeParser.EQ)
                self.state = 8705
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8703
                    self.string()
                    pass
                elif token in [51]:
                    self.state = 8704
                    self.match(SnowflakeParser.AUTO)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8707
                self.match(SnowflakeParser.TIMESTAMP_FORMAT)
                self.state = 8708
                self.match(SnowflakeParser.EQ)
                self.state = 8711
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8709
                    self.string()
                    pass
                elif token in [51]:
                    self.state = 8710
                    self.match(SnowflakeParser.AUTO)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8713
                self.match(SnowflakeParser.BINARY_FORMAT)
                self.state = 8714
                self.match(SnowflakeParser.EQ)
                self.state = 8715
                _la = self._input.LA(1)
                if not(_la==82 or _la==321 or _la==826):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8716
                self.match(SnowflakeParser.ESCAPE)
                self.state = 8717
                self.match(SnowflakeParser.EQ)
                self.state = 8721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1062,self._ctx)
                if la_ == 1:
                    self.state = 8718
                    self.character()
                    pass

                elif la_ == 2:
                    self.state = 8719
                    self.match(SnowflakeParser.NONE)
                    pass

                elif la_ == 3:
                    self.state = 8720
                    self.match(SnowflakeParser.NONE_Q)
                    pass


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8723
                self.match(SnowflakeParser.ESCAPE_UNENCLOSED_FIELD)
                self.state = 8724
                self.match(SnowflakeParser.EQ)
                self.state = 8728
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8725
                    self.string()
                    pass
                elif token in [444]:
                    self.state = 8726
                    self.match(SnowflakeParser.NONE)
                    pass
                elif token in [445]:
                    self.state = 8727
                    self.match(SnowflakeParser.NONE_Q)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8730
                self.match(SnowflakeParser.TRIM_SPACE)
                self.state = 8731
                self.match(SnowflakeParser.EQ)
                self.state = 8732
                self.true_false()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 8733
                self.match(SnowflakeParser.FIELD_OPTIONALLY_ENCLOSED_BY)
                self.state = 8734
                self.match(SnowflakeParser.EQ)
                self.state = 8739
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8735
                    self.string()
                    pass
                elif token in [444]:
                    self.state = 8736
                    self.match(SnowflakeParser.NONE)
                    pass
                elif token in [445]:
                    self.state = 8737
                    self.match(SnowflakeParser.NONE_Q)
                    pass
                elif token in [903]:
                    self.state = 8738
                    self.match(SnowflakeParser.SINGLE_QUOTE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 8741
                self.match(SnowflakeParser.NULL_IF)
                self.state = 8742
                self.match(SnowflakeParser.EQ)
                self.state = 8743
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==912:
                    self.state = 8744
                    self.string_list()
                    self.state = 8749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 8750
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 8751
                self.match(SnowflakeParser.ERROR_ON_COLUMN_COUNT_MISMATCH)
                self.state = 8752
                self.match(SnowflakeParser.EQ)
                self.state = 8753
                self.true_false()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 8754
                self.match(SnowflakeParser.REPLACE_INVALID_CHARACTERS)
                self.state = 8755
                self.match(SnowflakeParser.EQ)
                self.state = 8756
                self.true_false()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 8757
                self.match(SnowflakeParser.EMPTY_FIELD_AS_NULL)
                self.state = 8758
                self.match(SnowflakeParser.EQ)
                self.state = 8759
                self.true_false()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 8760
                self.match(SnowflakeParser.SKIP_BYTE_ORDER_MARK)
                self.state = 8761
                self.match(SnowflakeParser.EQ)
                self.state = 8762
                self.true_false()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 8763
                self.match(SnowflakeParser.ENCODING)
                self.state = 8764
                self.match(SnowflakeParser.EQ)
                self.state = 8767
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [912]:
                    self.state = 8765
                    self.string()
                    pass
                elif token in [826]:
                    self.state = 8766
                    self.match(SnowflakeParser.UTF8)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 8769
                self.match(SnowflakeParser.ENABLE_OCTAL)
                self.state = 8770
                self.match(SnowflakeParser.EQ)
                self.state = 8771
                self.true_false()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 8772
                self.match(SnowflakeParser.ALLOW_DUPLICATE)
                self.state = 8773
                self.match(SnowflakeParser.EQ)
                self.state = 8774
                self.true_false()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 8775
                self.match(SnowflakeParser.STRIP_OUTER_ARRAY)
                self.state = 8776
                self.match(SnowflakeParser.EQ)
                self.state = 8777
                self.true_false()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 8778
                self.match(SnowflakeParser.STRIP_NULL_VALUES)
                self.state = 8779
                self.match(SnowflakeParser.EQ)
                self.state = 8780
                self.true_false()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 8781
                self.match(SnowflakeParser.IGNORE_UTF8_ERRORS)
                self.state = 8782
                self.match(SnowflakeParser.EQ)
                self.state = 8783
                self.true_false()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 8784
                self.match(SnowflakeParser.COMPRESSION)
                self.state = 8785
                self.match(SnowflakeParser.EQ)
                self.state = 8786
                self.match(SnowflakeParser.AUTO)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 8787
                self.match(SnowflakeParser.LZO)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 8788
                self.match(SnowflakeParser.SNAPPY)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 8789
                self.match(SnowflakeParser.NONE)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 8790
                self.match(SnowflakeParser.SNAPPY_COMPRESSION)
                self.state = 8791
                self.match(SnowflakeParser.EQ)
                self.state = 8792
                self.true_false()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 8793
                self.match(SnowflakeParser.BINARY_AS_TEXT)
                self.state = 8794
                self.match(SnowflakeParser.EQ)
                self.state = 8795
                self.true_false()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 8796
                self.match(SnowflakeParser.COMPRESSION)
                self.state = 8797
                self.match(SnowflakeParser.EQ)
                self.state = 8798
                self.match(SnowflakeParser.AUTO)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 8799
                self.match(SnowflakeParser.GZIP)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 8800
                self.match(SnowflakeParser.BZ2)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 8801
                self.match(SnowflakeParser.BROTLI)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 8802
                self.match(SnowflakeParser.ZSTD)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 8803
                self.match(SnowflakeParser.DEFLATE)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 8804
                self.match(SnowflakeParser.RAW_DEFLATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 8805
                self.match(SnowflakeParser.NONE)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 8806
                self.match(SnowflakeParser.PRESERVE_SPACE)
                self.state = 8807
                self.match(SnowflakeParser.EQ)
                self.state = 8808
                self.true_false()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 8809
                self.match(SnowflakeParser.STRIP_OUTER_ELEMENT)
                self.state = 8810
                self.match(SnowflakeParser.EQ)
                self.state = 8811
                self.true_false()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 8812
                self.match(SnowflakeParser.DISABLE_SNOWFLAKE_DATA)
                self.state = 8813
                self.match(SnowflakeParser.EQ)
                self.state = 8814
                self.true_false()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 8815
                self.match(SnowflakeParser.DISABLE_AUTO_CONVERT)
                self.state = 8816
                self.match(SnowflakeParser.EQ)
                self.state = 8817
                self.true_false()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_optionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_ERROR(self):
            return self.getToken(SnowflakeParser.ON_ERROR, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def CONTINUE(self):
            return self.getToken(SnowflakeParser.CONTINUE, 0)

        def SKIP_FILE(self):
            return self.getToken(SnowflakeParser.SKIP_FILE, 0)

        def SKIP_FILE_N(self):
            return self.getToken(SnowflakeParser.SKIP_FILE_N, 0)

        def ABORT_STATEMENT(self):
            return self.getToken(SnowflakeParser.ABORT_STATEMENT, 0)

        def SIZE_LIMIT(self):
            return self.getToken(SnowflakeParser.SIZE_LIMIT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def PURGE(self):
            return self.getToken(SnowflakeParser.PURGE, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def RETURN_FAILED_ONLY(self):
            return self.getToken(SnowflakeParser.RETURN_FAILED_ONLY, 0)

        def MATCH_BY_COLUMN_NAME(self):
            return self.getToken(SnowflakeParser.MATCH_BY_COLUMN_NAME, 0)

        def CASE_SENSITIVE(self):
            return self.getToken(SnowflakeParser.CASE_SENSITIVE, 0)

        def CASE_INSENSITIVE(self):
            return self.getToken(SnowflakeParser.CASE_INSENSITIVE, 0)

        def NONE(self):
            return self.getToken(SnowflakeParser.NONE, 0)

        def ENFORCE_LENGTH(self):
            return self.getToken(SnowflakeParser.ENFORCE_LENGTH, 0)

        def TRUNCATECOLUMNS(self):
            return self.getToken(SnowflakeParser.TRUNCATECOLUMNS, 0)

        def FORCE(self):
            return self.getToken(SnowflakeParser.FORCE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_copy_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_options" ):
                listener.enterCopy_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_options" ):
                listener.exitCopy_options(self)




    def copy_options(self):

        localctx = SnowflakeParser.Copy_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_copy_options)
        try:
            self.state = 8852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [492]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8820
                self.match(SnowflakeParser.ON_ERROR)
                self.state = 8821
                self.match(SnowflakeParser.EQ)
                self.state = 8827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1068,self._ctx)
                if la_ == 1:
                    self.state = 8822
                    self.match(SnowflakeParser.CONTINUE)
                    pass

                elif la_ == 2:
                    self.state = 8823
                    self.match(SnowflakeParser.SKIP_FILE)
                    pass

                elif la_ == 3:
                    self.state = 8824
                    self.match(SnowflakeParser.SKIP_FILE_N)
                    pass

                elif la_ == 4:
                    self.state = 8825
                    self.match(SnowflakeParser.SKIP_FILE_N)
                    self.state = 8826
                    self.match(SnowflakeParser.ABORT_STATEMENT)
                    pass


                pass
            elif token in [685]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8829
                self.match(SnowflakeParser.SIZE_LIMIT)
                self.state = 8830
                self.match(SnowflakeParser.EQ)
                self.state = 8831
                self.num()
                pass
            elif token in [561]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8832
                self.match(SnowflakeParser.PURGE)
                self.state = 8833
                self.match(SnowflakeParser.EQ)
                self.state = 8834
                self.true_false()
                pass
            elif token in [614]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8835
                self.match(SnowflakeParser.RETURN_FAILED_ONLY)
                self.state = 8836
                self.match(SnowflakeParser.EQ)
                self.state = 8837
                self.true_false()
                pass
            elif token in [407]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8838
                self.match(SnowflakeParser.MATCH_BY_COLUMN_NAME)
                self.state = 8839
                self.match(SnowflakeParser.EQ)
                self.state = 8840
                self.match(SnowflakeParser.CASE_SENSITIVE)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8841
                self.match(SnowflakeParser.CASE_INSENSITIVE)
                pass
            elif token in [444]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8842
                self.match(SnowflakeParser.NONE)
                pass
            elif token in [228]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8843
                self.match(SnowflakeParser.ENFORCE_LENGTH)
                self.state = 8844
                self.match(SnowflakeParser.EQ)
                self.state = 8845
                self.true_false()
                pass
            elif token in [800]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8846
                self.match(SnowflakeParser.TRUNCATECOLUMNS)
                self.state = 8847
                self.match(SnowflakeParser.EQ)
                self.state = 8848
                self.true_false()
                pass
            elif token in [279]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8849
                self.match(SnowflakeParser.FORCE)
                self.state = 8850
                self.match(SnowflakeParser.EQ)
                self.state = 8851
                self.true_false()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_encryption_opts_internalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(SnowflakeParser.ENCRYPTION, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def SNOWFLAKE_FULL(self):
            return self.getToken(SnowflakeParser.SNOWFLAKE_FULL, 0)

        def SNOWFLAKE_SSE(self):
            return self.getToken(SnowflakeParser.SNOWFLAKE_SSE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_encryption_opts_internal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_encryption_opts_internal" ):
                listener.enterStage_encryption_opts_internal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_encryption_opts_internal" ):
                listener.exitStage_encryption_opts_internal(self)




    def stage_encryption_opts_internal(self):

        localctx = SnowflakeParser.Stage_encryption_opts_internalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_stage_encryption_opts_internal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8854
            self.match(SnowflakeParser.ENCRYPTION)
            self.state = 8855
            self.match(SnowflakeParser.EQ)
            self.state = 8856
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 8857
            self.match(SnowflakeParser.TYPE)
            self.state = 8858
            self.match(SnowflakeParser.EQ)
            self.state = 8859
            _la = self._input.LA(1)
            if not(_la==695 or _la==696):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8860
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_type" ):
                listener.enterStage_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_type" ):
                listener.exitStage_type(self)




    def stage_type(self):

        localctx = SnowflakeParser.Stage_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_stage_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8862
            self.match(SnowflakeParser.TYPE)
            self.state = 8863
            self.match(SnowflakeParser.EQ)
            self.state = 8864
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_master_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_KEY(self):
            return self.getToken(SnowflakeParser.MASTER_KEY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_master_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_master_key" ):
                listener.enterStage_master_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_master_key" ):
                listener.exitStage_master_key(self)




    def stage_master_key(self):

        localctx = SnowflakeParser.Stage_master_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_stage_master_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8866
            self.match(SnowflakeParser.MASTER_KEY)
            self.state = 8867
            self.match(SnowflakeParser.EQ)
            self.state = 8868
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_kms_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KMS_KEY_ID(self):
            return self.getToken(SnowflakeParser.KMS_KEY_ID, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_kms_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_kms_key" ):
                listener.enterStage_kms_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_kms_key" ):
                listener.exitStage_kms_key(self)




    def stage_kms_key(self):

        localctx = SnowflakeParser.Stage_kms_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_stage_kms_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8870
            self.match(SnowflakeParser.KMS_KEY_ID)
            self.state = 8871
            self.match(SnowflakeParser.EQ)
            self.state = 8872
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_encryption_opts_awsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(SnowflakeParser.ENCRYPTION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def stage_master_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_master_keyContext,0)


        def stage_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_typeContext,0)


        def stage_kms_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_kms_keyContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_encryption_opts_aws

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_encryption_opts_aws" ):
                listener.enterStage_encryption_opts_aws(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_encryption_opts_aws" ):
                listener.exitStage_encryption_opts_aws(self)




    def stage_encryption_opts_aws(self):

        localctx = SnowflakeParser.Stage_encryption_opts_awsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_stage_encryption_opts_aws)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8874
            self.match(SnowflakeParser.ENCRYPTION)
            self.state = 8875
            self.match(SnowflakeParser.EQ)
            self.state = 8876
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 8885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1072,self._ctx)
            if la_ == 1:
                self.state = 8878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==803:
                    self.state = 8877
                    self.stage_type()


                self.state = 8880
                self.stage_master_key()
                pass

            elif la_ == 2:
                self.state = 8881
                self.stage_type()
                self.state = 8883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==372:
                    self.state = 8882
                    self.stage_kms_key()


                pass


            self.state = 8887
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aws_tokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWS_TOKEN(self):
            return self.getToken(SnowflakeParser.AWS_TOKEN, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_aws_token

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAws_token" ):
                listener.enterAws_token(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAws_token" ):
                listener.exitAws_token(self)




    def aws_token(self):

        localctx = SnowflakeParser.Aws_tokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_aws_token)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8889
            self.match(SnowflakeParser.AWS_TOKEN)
            self.state = 8890
            self.match(SnowflakeParser.EQ)
            self.state = 8891
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aws_key_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWS_KEY_ID(self):
            return self.getToken(SnowflakeParser.AWS_KEY_ID, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_aws_key_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAws_key_id" ):
                listener.enterAws_key_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAws_key_id" ):
                listener.exitAws_key_id(self)




    def aws_key_id(self):

        localctx = SnowflakeParser.Aws_key_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_aws_key_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8893
            self.match(SnowflakeParser.AWS_KEY_ID)
            self.state = 8894
            self.match(SnowflakeParser.EQ)
            self.state = 8895
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aws_secret_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWS_SECRET_KEY(self):
            return self.getToken(SnowflakeParser.AWS_SECRET_KEY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_aws_secret_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAws_secret_key" ):
                listener.enterAws_secret_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAws_secret_key" ):
                listener.exitAws_secret_key(self)




    def aws_secret_key(self):

        localctx = SnowflakeParser.Aws_secret_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_aws_secret_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8897
            self.match(SnowflakeParser.AWS_SECRET_KEY)
            self.state = 8898
            self.match(SnowflakeParser.EQ)
            self.state = 8899
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aws_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWS_ROLE(self):
            return self.getToken(SnowflakeParser.AWS_ROLE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_aws_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAws_role" ):
                listener.enterAws_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAws_role" ):
                listener.exitAws_role(self)




    def aws_role(self):

        localctx = SnowflakeParser.Aws_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_aws_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8901
            self.match(SnowflakeParser.AWS_ROLE)
            self.state = 8902
            self.match(SnowflakeParser.EQ)
            self.state = 8903
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Azure_encryption_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_KEY(self):
            return self.getToken(SnowflakeParser.MASTER_KEY, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def AZURE_CSE_Q(self):
            return self.getToken(SnowflakeParser.AZURE_CSE_Q, 0)

        def NONE_Q(self):
            return self.getToken(SnowflakeParser.NONE_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_azure_encryption_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAzure_encryption_value" ):
                listener.enterAzure_encryption_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAzure_encryption_value" ):
                listener.exitAzure_encryption_value(self)




    def azure_encryption_value(self):

        localctx = SnowflakeParser.Azure_encryption_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_azure_encryption_value)
        self._la = 0 # Token type
        try:
            self.state = 8923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1074,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==803:
                    self.state = 8905
                    self.match(SnowflakeParser.TYPE)
                    self.state = 8906
                    self.match(SnowflakeParser.EQ)
                    self.state = 8907
                    self.match(SnowflakeParser.AZURE_CSE_Q)


                self.state = 8910
                self.match(SnowflakeParser.MASTER_KEY)
                self.state = 8911
                self.match(SnowflakeParser.EQ)
                self.state = 8912
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8913
                self.match(SnowflakeParser.MASTER_KEY)
                self.state = 8914
                self.match(SnowflakeParser.EQ)
                self.state = 8915
                self.string()
                self.state = 8916
                self.match(SnowflakeParser.TYPE)
                self.state = 8917
                self.match(SnowflakeParser.EQ)
                self.state = 8918
                self.match(SnowflakeParser.AZURE_CSE_Q)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8920
                self.match(SnowflakeParser.TYPE)
                self.state = 8921
                self.match(SnowflakeParser.EQ)
                self.state = 8922
                self.match(SnowflakeParser.NONE_Q)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_encryption_opts_azContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(SnowflakeParser.ENCRYPTION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def azure_encryption_value(self):
            return self.getTypedRuleContext(SnowflakeParser.Azure_encryption_valueContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_encryption_opts_az

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_encryption_opts_az" ):
                listener.enterStage_encryption_opts_az(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_encryption_opts_az" ):
                listener.exitStage_encryption_opts_az(self)




    def stage_encryption_opts_az(self):

        localctx = SnowflakeParser.Stage_encryption_opts_azContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_stage_encryption_opts_az)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8925
            self.match(SnowflakeParser.ENCRYPTION)
            self.state = 8926
            self.match(SnowflakeParser.EQ)
            self.state = 8927
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 8928
            self.azure_encryption_value()
            self.state = 8929
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Storage_integration_eq_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE_INTEGRATION(self):
            return self.getToken(SnowflakeParser.STORAGE_INTEGRATION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_storage_integration_eq_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorage_integration_eq_id" ):
                listener.enterStorage_integration_eq_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorage_integration_eq_id" ):
                listener.exitStorage_integration_eq_id(self)




    def storage_integration_eq_id(self):

        localctx = SnowflakeParser.Storage_integration_eq_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_storage_integration_eq_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8931
            self.match(SnowflakeParser.STORAGE_INTEGRATION)
            self.state = 8932
            self.match(SnowflakeParser.EQ)
            self.state = 8933
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Az_credential_or_storage_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storage_integration_eq_id(self):
            return self.getTypedRuleContext(SnowflakeParser.Storage_integration_eq_idContext,0)


        def CREDENTIALS(self):
            return self.getToken(SnowflakeParser.CREDENTIALS, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def AZURE_SAS_TOKEN(self):
            return self.getToken(SnowflakeParser.AZURE_SAS_TOKEN, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_az_credential_or_storage_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAz_credential_or_storage_integration" ):
                listener.enterAz_credential_or_storage_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAz_credential_or_storage_integration" ):
                listener.exitAz_credential_or_storage_integration(self)




    def az_credential_or_storage_integration(self):

        localctx = SnowflakeParser.Az_credential_or_storage_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_az_credential_or_storage_integration)
        try:
            self.state = 8944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [726]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8935
                self.storage_integration_eq_id()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8936
                self.match(SnowflakeParser.CREDENTIALS)
                self.state = 8937
                self.match(SnowflakeParser.EQ)
                self.state = 8938
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8939
                self.match(SnowflakeParser.AZURE_SAS_TOKEN)
                self.state = 8940
                self.match(SnowflakeParser.EQ)
                self.state = 8941
                self.string()
                self.state = 8942
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gcp_encryption_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KMS_KEY_ID(self):
            return self.getToken(SnowflakeParser.KMS_KEY_ID, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def GCS_SSE_KMS_Q(self):
            return self.getToken(SnowflakeParser.GCS_SSE_KMS_Q, 0)

        def NONE_Q(self):
            return self.getToken(SnowflakeParser.NONE_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_gcp_encryption_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGcp_encryption_value" ):
                listener.enterGcp_encryption_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGcp_encryption_value" ):
                listener.exitGcp_encryption_value(self)




    def gcp_encryption_value(self):

        localctx = SnowflakeParser.Gcp_encryption_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_gcp_encryption_value)
        self._la = 0 # Token type
        try:
            self.state = 8964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1077,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==803:
                    self.state = 8946
                    self.match(SnowflakeParser.TYPE)
                    self.state = 8947
                    self.match(SnowflakeParser.EQ)
                    self.state = 8948
                    self.match(SnowflakeParser.GCS_SSE_KMS_Q)


                self.state = 8951
                self.match(SnowflakeParser.KMS_KEY_ID)
                self.state = 8952
                self.match(SnowflakeParser.EQ)
                self.state = 8953
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8954
                self.match(SnowflakeParser.KMS_KEY_ID)
                self.state = 8955
                self.match(SnowflakeParser.EQ)
                self.state = 8956
                self.string()
                self.state = 8957
                self.match(SnowflakeParser.TYPE)
                self.state = 8958
                self.match(SnowflakeParser.EQ)
                self.state = 8959
                self.match(SnowflakeParser.GCS_SSE_KMS_Q)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8961
                self.match(SnowflakeParser.TYPE)
                self.state = 8962
                self.match(SnowflakeParser.EQ)
                self.state = 8963
                self.match(SnowflakeParser.NONE_Q)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stage_encryption_opts_gcpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(SnowflakeParser.ENCRYPTION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def gcp_encryption_value(self):
            return self.getTypedRuleContext(SnowflakeParser.Gcp_encryption_valueContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_stage_encryption_opts_gcp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStage_encryption_opts_gcp" ):
                listener.enterStage_encryption_opts_gcp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStage_encryption_opts_gcp" ):
                listener.exitStage_encryption_opts_gcp(self)




    def stage_encryption_opts_gcp(self):

        localctx = SnowflakeParser.Stage_encryption_opts_gcpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_stage_encryption_opts_gcp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8966
            self.match(SnowflakeParser.ENCRYPTION)
            self.state = 8967
            self.match(SnowflakeParser.EQ)
            self.state = 8968
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 8969
            self.gcp_encryption_value()
            self.state = 8970
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aws_credential_or_storage_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storage_integration_eq_id(self):
            return self.getTypedRuleContext(SnowflakeParser.Storage_integration_eq_idContext,0)


        def CREDENTIALS(self):
            return self.getToken(SnowflakeParser.CREDENTIALS, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def aws_key_id(self):
            return self.getTypedRuleContext(SnowflakeParser.Aws_key_idContext,0)


        def aws_secret_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Aws_secret_keyContext,0)


        def aws_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Aws_roleContext,0)


        def aws_token(self):
            return self.getTypedRuleContext(SnowflakeParser.Aws_tokenContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_aws_credential_or_storage_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAws_credential_or_storage_integration" ):
                listener.enterAws_credential_or_storage_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAws_credential_or_storage_integration" ):
                listener.exitAws_credential_or_storage_integration(self)




    def aws_credential_or_storage_integration(self):

        localctx = SnowflakeParser.Aws_credential_or_storage_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_aws_credential_or_storage_integration)
        self._la = 0 # Token type
        try:
            self.state = 8986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [726]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8972
                self.storage_integration_eq_id()
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8973
                self.match(SnowflakeParser.CREDENTIALS)
                self.state = 8974
                self.match(SnowflakeParser.EQ)
                self.state = 8975
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 8982
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [65]:
                    self.state = 8976
                    self.aws_key_id()
                    self.state = 8977
                    self.aws_secret_key()
                    self.state = 8979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==72:
                        self.state = 8978
                        self.aws_token()


                    pass
                elif token in [66]:
                    self.state = 8981
                    self.aws_role()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8984
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_stage_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s3_url = None # Token
            self.gc_url = None # Token
            self.azure_url = None # Token

        def URL(self):
            return self.getToken(SnowflakeParser.URL, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def S3_PATH(self):
            return self.getToken(SnowflakeParser.S3_PATH, 0)

        def S3GOV_PATH(self):
            return self.getToken(SnowflakeParser.S3GOV_PATH, 0)

        def stage_encryption_opts_aws(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_encryption_opts_awsContext,0)


        def aws_credential_or_storage_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Aws_credential_or_storage_integrationContext,0)


        def GCS_PATH(self):
            return self.getToken(SnowflakeParser.GCS_PATH, 0)

        def stage_encryption_opts_gcp(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_encryption_opts_gcpContext,0)


        def storage_integration_eq_id(self):
            return self.getTypedRuleContext(SnowflakeParser.Storage_integration_eq_idContext,0)


        def AZURE_PATH(self):
            return self.getToken(SnowflakeParser.AZURE_PATH, 0)

        def stage_encryption_opts_az(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_encryption_opts_azContext,0)


        def az_credential_or_storage_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Az_credential_or_storage_integrationContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_external_stage_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_stage_params" ):
                listener.enterExternal_stage_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_stage_params" ):
                listener.exitExternal_stage_params(self)




    def external_stage_params(self):

        localctx = SnowflakeParser.External_stage_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_external_stage_params)
        self._la = 0 # Token type
        try:
            self.state = 9027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1090,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8988
                self.match(SnowflakeParser.URL)
                self.state = 8989
                self.match(SnowflakeParser.EQ)
                self.state = 8990
                localctx.s3_url = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==906 or _la==907):
                    localctx.s3_url = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1083,self._ctx)
                if la_ == 1:
                    self.state = 8992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==156 or _la==726:
                        self.state = 8991
                        self.aws_credential_or_storage_integration()


                    self.state = 8994
                    self.stage_encryption_opts_aws()

                elif la_ == 2:
                    self.state = 8996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==224:
                        self.state = 8995
                        self.stage_encryption_opts_aws()


                    self.state = 8998
                    self.aws_credential_or_storage_integration()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9001
                self.match(SnowflakeParser.URL)
                self.state = 9002
                self.match(SnowflakeParser.EQ)
                self.state = 9003
                localctx.gc_url = self.match(SnowflakeParser.GCS_PATH)
                self.state = 9012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1086,self._ctx)
                if la_ == 1:
                    self.state = 9005
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==726:
                        self.state = 9004
                        self.storage_integration_eq_id()


                    self.state = 9007
                    self.stage_encryption_opts_gcp()

                elif la_ == 2:
                    self.state = 9009
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==224:
                        self.state = 9008
                        self.stage_encryption_opts_gcp()


                    self.state = 9011
                    self.storage_integration_eq_id()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9014
                self.match(SnowflakeParser.URL)
                self.state = 9015
                self.match(SnowflakeParser.EQ)
                self.state = 9016
                localctx.azure_url = self.match(SnowflakeParser.AZURE_PATH)
                self.state = 9025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1089,self._ctx)
                if la_ == 1:
                    self.state = 9018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==156 or _la==726:
                        self.state = 9017
                        self.az_credential_or_storage_integration()


                    self.state = 9020
                    self.stage_encryption_opts_az()

                elif la_ == 2:
                    self.state = 9022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==224:
                        self.state = 9021
                        self.stage_encryption_opts_az()


                    self.state = 9024
                    self.az_credential_or_storage_integration()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class True_falseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SnowflakeParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SnowflakeParser.FALSE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_true_false

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrue_false" ):
                listener.enterTrue_false(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrue_false" ):
                listener.exitTrue_false(self)




    def true_false(self):

        localctx = SnowflakeParser.True_falseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_true_false)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9029
            _la = self._input.LA(1)
            if not(_la==266 or _la==797):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(SnowflakeParser.ENABLE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_enable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnable" ):
                listener.enterEnable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnable" ):
                listener.exitEnable(self)




    def enable(self):

        localctx = SnowflakeParser.EnableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_enable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9031
            self.match(SnowflakeParser.ENABLE)
            self.state = 9032
            self.match(SnowflakeParser.EQ)
            self.state = 9033
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Refresh_on_createContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH_ON_CREATE(self):
            return self.getToken(SnowflakeParser.REFRESH_ON_CREATE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_refresh_on_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefresh_on_create" ):
                listener.enterRefresh_on_create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefresh_on_create" ):
                listener.exitRefresh_on_create(self)




    def refresh_on_create(self):

        localctx = SnowflakeParser.Refresh_on_createContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_refresh_on_create)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9035
            self.match(SnowflakeParser.REFRESH_ON_CREATE)
            self.state = 9036
            self.match(SnowflakeParser.EQ)
            self.state = 9037
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auto_refreshContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_REFRESH(self):
            return self.getToken(SnowflakeParser.AUTO_REFRESH, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_auto_refresh

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_refresh" ):
                listener.enterAuto_refresh(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_refresh" ):
                listener.exitAuto_refresh(self)




    def auto_refresh(self):

        localctx = SnowflakeParser.Auto_refreshContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_auto_refresh)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9039
            self.match(SnowflakeParser.AUTO_REFRESH)
            self.state = 9040
            self.match(SnowflakeParser.EQ)
            self.state = 9041
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notification_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOTIFICATION_INTEGRATION(self):
            return self.getToken(SnowflakeParser.NOTIFICATION_INTEGRATION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_notification_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotification_integration" ):
                listener.enterNotification_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotification_integration" ):
                listener.exitNotification_integration(self)




    def notification_integration(self):

        localctx = SnowflakeParser.Notification_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_notification_integration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9043
            self.match(SnowflakeParser.NOTIFICATION_INTEGRATION)
            self.state = 9044
            self.match(SnowflakeParser.EQ)
            self.state = 9045
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Directory_table_internal_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIRECTORY(self):
            return self.getToken(SnowflakeParser.DIRECTORY, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def enable(self):
            return self.getTypedRuleContext(SnowflakeParser.EnableContext,0)


        def REFRESH_ON_CREATE(self):
            return self.getToken(SnowflakeParser.REFRESH_ON_CREATE, 0)

        def FALSE(self):
            return self.getToken(SnowflakeParser.FALSE, 0)

        def refresh_on_create(self):
            return self.getTypedRuleContext(SnowflakeParser.Refresh_on_createContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_directory_table_internal_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectory_table_internal_params" ):
                listener.enterDirectory_table_internal_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectory_table_internal_params" ):
                listener.exitDirectory_table_internal_params(self)




    def directory_table_internal_params(self):

        localctx = SnowflakeParser.Directory_table_internal_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_directory_table_internal_params)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9047
            self.match(SnowflakeParser.DIRECTORY)
            self.state = 9048
            self.match(SnowflakeParser.EQ)
            self.state = 9049
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 9060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1092,self._ctx)
            if la_ == 1:
                self.state = 9050
                self.enable()
                self.state = 9052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==583:
                    self.state = 9051
                    self.refresh_on_create()


                pass

            elif la_ == 2:
                self.state = 9054
                self.match(SnowflakeParser.REFRESH_ON_CREATE)
                self.state = 9055
                self.match(SnowflakeParser.EQ)
                self.state = 9056
                self.match(SnowflakeParser.FALSE)
                pass

            elif la_ == 3:
                self.state = 9057
                self.refresh_on_create()
                self.state = 9058
                self.enable()
                pass


            self.state = 9062
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Directory_table_external_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIRECTORY(self):
            return self.getToken(SnowflakeParser.DIRECTORY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def enable(self):
            return self.getTypedRuleContext(SnowflakeParser.EnableContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def refresh_on_create(self):
            return self.getTypedRuleContext(SnowflakeParser.Refresh_on_createContext,0)


        def auto_refresh(self):
            return self.getTypedRuleContext(SnowflakeParser.Auto_refreshContext,0)


        def notification_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Notification_integrationContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_directory_table_external_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectory_table_external_params" ):
                listener.enterDirectory_table_external_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectory_table_external_params" ):
                listener.exitDirectory_table_external_params(self)




    def directory_table_external_params(self):

        localctx = SnowflakeParser.Directory_table_external_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_directory_table_external_params)
        self._la = 0 # Token type
        try:
            self.state = 9106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9064
                self.match(SnowflakeParser.DIRECTORY)
                self.state = 9065
                self.match(SnowflakeParser.EQ)
                self.state = 9066
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 9067
                self.enable()
                self.state = 9069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==583:
                    self.state = 9068
                    self.refresh_on_create()


                self.state = 9072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 9071
                    self.auto_refresh()


                self.state = 9074
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9076
                self.match(SnowflakeParser.DIRECTORY)
                self.state = 9077
                self.match(SnowflakeParser.EQ)
                self.state = 9078
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 9079
                self.enable()
                self.state = 9081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 9080
                    self.auto_refresh()


                self.state = 9084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==583:
                    self.state = 9083
                    self.refresh_on_create()


                self.state = 9087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==450:
                    self.state = 9086
                    self.notification_integration()


                self.state = 9089
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9091
                self.match(SnowflakeParser.DIRECTORY)
                self.state = 9092
                self.match(SnowflakeParser.EQ)
                self.state = 9093
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 9094
                self.enable()
                self.state = 9096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==583:
                    self.state = 9095
                    self.refresh_on_create()


                self.state = 9099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 9098
                    self.auto_refresh()


                self.state = 9102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==450:
                    self.state = 9101
                    self.notification_integration()


                self.state = 9104
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_stageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def object_name_or_identifier(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_name_or_identifierContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def temporary(self):
            return self.getTypedRuleContext(SnowflakeParser.TemporaryContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def stage_encryption_opts_internal(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_encryption_opts_internalContext,0)


        def directory_table_internal_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Directory_table_internal_paramsContext,0)


        def FILE_FORMAT(self):
            return self.getToken(SnowflakeParser.FILE_FORMAT, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def COPY_OPTIONS_(self):
            return self.getToken(SnowflakeParser.COPY_OPTIONS_, 0)

        def copy_options(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_optionsContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def FORMAT_NAME(self):
            return self.getToken(SnowflakeParser.FORMAT_NAME, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def type_fileformat(self):
            return self.getTypedRuleContext(SnowflakeParser.Type_fileformatContext,0)


        def format_type_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Format_type_optionsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Format_type_optionsContext,i)


        def external_stage_params(self):
            return self.getTypedRuleContext(SnowflakeParser.External_stage_paramsContext,0)


        def directory_table_external_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Directory_table_external_paramsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_stage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_stage" ):
                listener.enterCreate_stage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_stage" ):
                listener.exitCreate_stage(self)




    def create_stage(self):

        localctx = SnowflakeParser.Create_stageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_create_stage)
        self._la = 0 # Token type
        try:
            self.state = 9212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9108
                self.match(SnowflakeParser.CREATE)
                self.state = 9110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 9109
                    self.or_replace()


                self.state = 9113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==759 or _la==760:
                    self.state = 9112
                    self.temporary()


                self.state = 9115
                self.match(SnowflakeParser.STAGE)
                self.state = 9117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
                if la_ == 1:
                    self.state = 9116
                    self.if_not_exists()


                self.state = 9119
                self.object_name_or_identifier()
                self.state = 9121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 9120
                    self.stage_encryption_opts_internal()


                self.state = 9124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 9123
                    self.directory_table_internal_params()


                self.state = 9145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 9126
                    self.match(SnowflakeParser.FILE_FORMAT)
                    self.state = 9127
                    self.match(SnowflakeParser.EQ)
                    self.state = 9128
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 9141
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [283]:
                        self.state = 9129
                        self.match(SnowflakeParser.FORMAT_NAME)
                        self.state = 9130
                        self.match(SnowflakeParser.EQ)
                        self.state = 9131
                        self.string()
                        pass
                    elif token in [803]:
                        self.state = 9132
                        self.match(SnowflakeParser.TYPE)
                        self.state = 9133
                        self.match(SnowflakeParser.EQ)
                        self.state = 9134
                        self.type_fileformat()
                        self.state = 9138
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==25 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 9007199254750211) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 7205918283424366593) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & -9223336852482686957) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 1152956688978935809) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 35185512939521) != 0) or ((((_la - 687)) & ~0x3f) == 0 and ((1 << (_la - 687)) & 246290604622035) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & 268443649) != 0) or _la==862:
                            self.state = 9135
                            self.format_type_options()
                            self.state = 9140
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 9143
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 9153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 9147
                    self.match(SnowflakeParser.COPY_OPTIONS_)
                    self.state = 9148
                    self.match(SnowflakeParser.EQ)
                    self.state = 9149
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 9150
                    self.copy_options()
                    self.state = 9151
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 9156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 9155
                    self.with_tags()


                self.state = 9159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9158
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9161
                self.match(SnowflakeParser.CREATE)
                self.state = 9163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 9162
                    self.or_replace()


                self.state = 9166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==759 or _la==760:
                    self.state = 9165
                    self.temporary()


                self.state = 9168
                self.match(SnowflakeParser.STAGE)
                self.state = 9170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1115,self._ctx)
                if la_ == 1:
                    self.state = 9169
                    self.if_not_exists()


                self.state = 9172
                self.object_name_or_identifier()
                self.state = 9173
                self.external_stage_params()
                self.state = 9175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 9174
                    self.directory_table_external_params()


                self.state = 9196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 9177
                    self.match(SnowflakeParser.FILE_FORMAT)
                    self.state = 9178
                    self.match(SnowflakeParser.EQ)
                    self.state = 9179
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 9192
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [283]:
                        self.state = 9180
                        self.match(SnowflakeParser.FORMAT_NAME)
                        self.state = 9181
                        self.match(SnowflakeParser.EQ)
                        self.state = 9182
                        self.string()
                        pass
                    elif token in [803]:
                        self.state = 9183
                        self.match(SnowflakeParser.TYPE)
                        self.state = 9184
                        self.match(SnowflakeParser.EQ)
                        self.state = 9185
                        self.type_fileformat()
                        self.state = 9189
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==25 or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 9007199254750211) != 0) or ((((_la - 176)) & ~0x3f) == 0 and ((1 << (_la - 176)) & 7205918283424366593) != 0) or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & -9223336852482686957) != 0) or ((((_la - 399)) & ~0x3f) == 0 and ((1 << (_la - 399)) & 1152956688978935809) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 35185512939521) != 0) or ((((_la - 687)) & ~0x3f) == 0 and ((1 << (_la - 687)) & 246290604622035) != 0) or ((((_la - 768)) & ~0x3f) == 0 and ((1 << (_la - 768)) & 268443649) != 0) or _la==862:
                            self.state = 9186
                            self.format_type_options()
                            self.state = 9191
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 9194
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 9204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 9198
                    self.match(SnowflakeParser.COPY_OPTIONS_)
                    self.state = 9199
                    self.match(SnowflakeParser.EQ)
                    self.state = 9200
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 9201
                    self.copy_options()
                    self.state = 9202
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 9207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 9206
                    self.with_tags()


                self.state = 9210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9209
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_stageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def object_name_or_identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_name_or_identifierContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_name_or_identifierContext,i)


        def RENAME(self):
            return self.getToken(SnowflakeParser.RENAME, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def set_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_tagsContext,0)


        def unset_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Unset_tagsContext,0)


        def SET(self):
            return self.getToken(SnowflakeParser.SET, 0)

        def external_stage_params(self):
            return self.getTypedRuleContext(SnowflakeParser.External_stage_paramsContext,0)


        def file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.File_formatContext,0)


        def COPY_OPTIONS_(self):
            return self.getToken(SnowflakeParser.COPY_OPTIONS_, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def copy_options(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alter_stage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_stage" ):
                listener.enterAlter_stage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_stage" ):
                listener.exitAlter_stage(self)




    def alter_stage(self):

        localctx = SnowflakeParser.Alter_stageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_alter_stage)
        self._la = 0 # Token type
        try:
            self.state = 9264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9214
                self.match(SnowflakeParser.ALTER)
                self.state = 9215
                self.match(SnowflakeParser.STAGE)
                self.state = 9217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1124,self._ctx)
                if la_ == 1:
                    self.state = 9216
                    self.if_exists()


                self.state = 9219
                self.object_name_or_identifier()
                self.state = 9220
                self.match(SnowflakeParser.RENAME)
                self.state = 9221
                self.match(SnowflakeParser.TO)
                self.state = 9222
                self.object_name_or_identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9224
                self.match(SnowflakeParser.ALTER)
                self.state = 9225
                self.match(SnowflakeParser.STAGE)
                self.state = 9227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1125,self._ctx)
                if la_ == 1:
                    self.state = 9226
                    self.if_exists()


                self.state = 9229
                self.object_name_or_identifier()
                self.state = 9230
                self.set_tags()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9232
                self.match(SnowflakeParser.ALTER)
                self.state = 9233
                self.match(SnowflakeParser.STAGE)
                self.state = 9235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1126,self._ctx)
                if la_ == 1:
                    self.state = 9234
                    self.if_exists()


                self.state = 9237
                self.object_name_or_identifier()
                self.state = 9238
                self.unset_tags()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9240
                self.match(SnowflakeParser.ALTER)
                self.state = 9241
                self.match(SnowflakeParser.STAGE)
                self.state = 9243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1127,self._ctx)
                if la_ == 1:
                    self.state = 9242
                    self.if_exists()


                self.state = 9245
                self.object_name_or_identifier()
                self.state = 9246
                self.match(SnowflakeParser.SET)
                self.state = 9248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==813:
                    self.state = 9247
                    self.external_stage_params()


                self.state = 9251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 9250
                    self.file_format()


                self.state = 9259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 9253
                    self.match(SnowflakeParser.COPY_OPTIONS_)
                    self.state = 9254
                    self.match(SnowflakeParser.EQ)
                    self.state = 9255
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 9256
                    self.copy_options()
                    self.state = 9257
                    self.match(SnowflakeParser.RR_BRACKET)


                self.state = 9262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9261
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def object_name_or_identifier(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_name_or_identifierContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_stage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stage" ):
                listener.enterDrop_stage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stage" ):
                listener.exitDrop_stage(self)




    def drop_stage(self):

        localctx = SnowflakeParser.Drop_stageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_drop_stage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9266
            self.match(SnowflakeParser.DROP)
            self.state = 9267
            self.match(SnowflakeParser.STAGE)
            self.state = 9269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1133,self._ctx)
            if la_ == 1:
                self.state = 9268
                self.if_exists()


            self.state = 9271
            self.object_name_or_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_stageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def object_name_or_identifier(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_name_or_identifierContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_stage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_stage" ):
                listener.enterDescribe_stage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_stage" ):
                listener.exitDescribe_stage(self)




    def describe_stage(self):

        localctx = SnowflakeParser.Describe_stageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_describe_stage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9273
            self.describe()
            self.state = 9274
            self.match(SnowflakeParser.STAGE)
            self.state = 9275
            self.object_name_or_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_stagesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def STAGES(self):
            return self.getToken(SnowflakeParser.STAGES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_stages

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_stages" ):
                listener.enterShow_stages(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_stages" ):
                listener.exitShow_stages(self)




    def show_stages(self):

        localctx = SnowflakeParser.Show_stagesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_show_stages)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9277
            self.match(SnowflakeParser.SHOW)
            self.state = 9278
            self.match(SnowflakeParser.STAGES)
            self.state = 9280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 9279
                self.like_pattern()


            self.state = 9283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 9282
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cloud_provider_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE_PROVIDER(self):
            return self.getToken(SnowflakeParser.STORAGE_PROVIDER, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def S3(self):
            return self.getToken(SnowflakeParser.S3, 0)

        def STORAGE_AWS_ROLE_ARN(self):
            return self.getToken(SnowflakeParser.STORAGE_AWS_ROLE_ARN, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def STORAGE_AWS_OBJECT_ACL(self):
            return self.getToken(SnowflakeParser.STORAGE_AWS_OBJECT_ACL, 0)

        def GCS(self):
            return self.getToken(SnowflakeParser.GCS, 0)

        def AZURE(self):
            return self.getToken(SnowflakeParser.AZURE, 0)

        def AZURE_TENANT_ID(self):
            return self.getToken(SnowflakeParser.AZURE_TENANT_ID, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_cloud_provider_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloud_provider_params" ):
                listener.enterCloud_provider_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloud_provider_params" ):
                listener.exitCloud_provider_params(self)




    def cloud_provider_params(self):

        localctx = SnowflakeParser.Cloud_provider_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_cloud_provider_params)
        self._la = 0 # Token type
        try:
            self.state = 9305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9285
                self.match(SnowflakeParser.STORAGE_PROVIDER)
                self.state = 9286
                self.match(SnowflakeParser.EQ)
                self.state = 9287
                self.match(SnowflakeParser.S3)
                self.state = 9288
                self.match(SnowflakeParser.STORAGE_AWS_ROLE_ARN)
                self.state = 9289
                self.match(SnowflakeParser.EQ)
                self.state = 9290
                self.string()
                self.state = 9294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==723:
                    self.state = 9291
                    self.match(SnowflakeParser.STORAGE_AWS_OBJECT_ACL)
                    self.state = 9292
                    self.match(SnowflakeParser.EQ)
                    self.state = 9293
                    self.string()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9296
                self.match(SnowflakeParser.STORAGE_PROVIDER)
                self.state = 9297
                self.match(SnowflakeParser.EQ)
                self.state = 9298
                self.match(SnowflakeParser.GCS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9299
                self.match(SnowflakeParser.STORAGE_PROVIDER)
                self.state = 9300
                self.match(SnowflakeParser.EQ)
                self.state = 9301
                self.match(SnowflakeParser.AZURE)
                self.state = 9302
                self.match(SnowflakeParser.AZURE_TENANT_ID)
                self.state = 9303
                self.match(SnowflakeParser.EQ)
                self.state = 9304
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cloud_provider_params2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE_AWS_ROLE_ARN(self):
            return self.getToken(SnowflakeParser.STORAGE_AWS_ROLE_ARN, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def STORAGE_AWS_OBJECT_ACL(self):
            return self.getToken(SnowflakeParser.STORAGE_AWS_OBJECT_ACL, 0)

        def AZURE_TENANT_ID(self):
            return self.getToken(SnowflakeParser.AZURE_TENANT_ID, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_cloud_provider_params2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloud_provider_params2" ):
                listener.enterCloud_provider_params2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloud_provider_params2" ):
                listener.exitCloud_provider_params2(self)




    def cloud_provider_params2(self):

        localctx = SnowflakeParser.Cloud_provider_params2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_cloud_provider_params2)
        self._la = 0 # Token type
        try:
            self.state = 9318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [724]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9307
                self.match(SnowflakeParser.STORAGE_AWS_ROLE_ARN)
                self.state = 9308
                self.match(SnowflakeParser.EQ)
                self.state = 9309
                self.string()
                self.state = 9313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==723:
                    self.state = 9310
                    self.match(SnowflakeParser.STORAGE_AWS_OBJECT_ACL)
                    self.state = 9311
                    self.match(SnowflakeParser.EQ)
                    self.state = 9312
                    self.string()


                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9315
                self.match(SnowflakeParser.AZURE_TENANT_ID)
                self.state = 9316
                self.match(SnowflakeParser.EQ)
                self.state = 9317
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cloud_provider_params3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_cloud_provider_params3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloud_provider_params3" ):
                listener.enterCloud_provider_params3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloud_provider_params3" ):
                listener.exitCloud_provider_params3(self)




    def cloud_provider_params3(self):

        localctx = SnowflakeParser.Cloud_provider_params3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_cloud_provider_params3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9320
            self.match(SnowflakeParser.INTEGRATION)
            self.state = 9321
            self.match(SnowflakeParser.EQ)
            self.state = 9322
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_storage_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def STORAGE(self):
            return self.getToken(SnowflakeParser.STORAGE, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.EQ)
            else:
                return self.getToken(SnowflakeParser.EQ, i)

        def EXTERNAL_STAGE(self):
            return self.getToken(SnowflakeParser.EXTERNAL_STAGE, 0)

        def cloud_provider_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Cloud_provider_paramsContext,0)


        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def STORAGE_ALLOWED_LOCATIONS(self):
            return self.getToken(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def string_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.String_listContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.String_listContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def STORAGE_BLOCKED_LOCATIONS(self):
            return self.getToken(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS, 0)

        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_storage_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_storage_integration" ):
                listener.enterCreate_storage_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_storage_integration" ):
                listener.exitCreate_storage_integration(self)




    def create_storage_integration(self):

        localctx = SnowflakeParser.Create_storage_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_create_storage_integration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9324
            self.match(SnowflakeParser.CREATE)
            self.state = 9326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9325
                self.or_replace()


            self.state = 9328
            self.match(SnowflakeParser.STORAGE)
            self.state = 9329
            self.match(SnowflakeParser.INTEGRATION)
            self.state = 9331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1141,self._ctx)
            if la_ == 1:
                self.state = 9330
                self.if_not_exists()


            self.state = 9333
            self.id_()
            self.state = 9334
            self.match(SnowflakeParser.TYPE)
            self.state = 9335
            self.match(SnowflakeParser.EQ)
            self.state = 9336
            self.match(SnowflakeParser.EXTERNAL_STAGE)
            self.state = 9337
            self.cloud_provider_params()
            self.state = 9338
            self.match(SnowflakeParser.ENABLED)
            self.state = 9339
            self.match(SnowflakeParser.EQ)
            self.state = 9340
            self.true_false()
            self.state = 9341
            self.match(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS)
            self.state = 9342
            self.match(SnowflakeParser.EQ)
            self.state = 9343
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 9344
            self.string_list()
            self.state = 9345
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 9352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==725:
                self.state = 9346
                self.match(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS)
                self.state = 9347
                self.match(SnowflakeParser.EQ)
                self.state = 9348
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 9349
                self.string_list()
                self.state = 9350
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 9355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9354
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Copy_grantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(SnowflakeParser.COPY, 0)

        def GRANTS(self):
            return self.getToken(SnowflakeParser.GRANTS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_copy_grants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy_grants" ):
                listener.enterCopy_grants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy_grants" ):
                listener.exitCopy_grants(self)




    def copy_grants(self):

        localctx = SnowflakeParser.Copy_grantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_copy_grants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9357
            self.match(SnowflakeParser.COPY)
            self.state = 9358
            self.match(SnowflakeParser.GRANTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Append_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APPEND_ONLY(self):
            return self.getToken(SnowflakeParser.APPEND_ONLY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_append_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppend_only" ):
                listener.enterAppend_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppend_only" ):
                listener.exitAppend_only(self)




    def append_only(self):

        localctx = SnowflakeParser.Append_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_append_only)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9360
            self.match(SnowflakeParser.APPEND_ONLY)
            self.state = 9361
            self.match(SnowflakeParser.EQ)
            self.state = 9362
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT_ONLY(self):
            return self.getToken(SnowflakeParser.INSERT_ONLY, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def TRUE(self):
            return self.getToken(SnowflakeParser.TRUE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_insert_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_only" ):
                listener.enterInsert_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_only" ):
                listener.exitInsert_only(self)




    def insert_only(self):

        localctx = SnowflakeParser.Insert_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_insert_only)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9364
            self.match(SnowflakeParser.INSERT_ONLY)
            self.state = 9365
            self.match(SnowflakeParser.EQ)
            self.state = 9366
            self.match(SnowflakeParser.TRUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_initial_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_INITIAL_ROWS(self):
            return self.getToken(SnowflakeParser.SHOW_INITIAL_ROWS, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_initial_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_initial_rows" ):
                listener.enterShow_initial_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_initial_rows" ):
                listener.exitShow_initial_rows(self)




    def show_initial_rows(self):

        localctx = SnowflakeParser.Show_initial_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_show_initial_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9368
            self.match(SnowflakeParser.SHOW_INITIAL_ROWS)
            self.state = 9369
            self.match(SnowflakeParser.EQ)
            self.state = 9370
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stream_timeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def at_before1(self):
            return self.getTypedRuleContext(SnowflakeParser.At_before1Context,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def OFFSET(self):
            return self.getToken(SnowflakeParser.OFFSET, 0)

        def STATEMENT(self):
            return self.getToken(SnowflakeParser.STATEMENT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_stream_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStream_time" ):
                listener.enterStream_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStream_time" ):
                listener.exitStream_time(self)




    def stream_time(self):

        localctx = SnowflakeParser.Stream_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_stream_time)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9372
            self.at_before1()
            self.state = 9373
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 9386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [766]:
                self.state = 9374
                self.match(SnowflakeParser.TIMESTAMP)
                self.state = 9375
                self.match(SnowflakeParser.ASSOC)
                self.state = 9376
                self.string()
                pass
            elif token in [482]:
                self.state = 9377
                self.match(SnowflakeParser.OFFSET)
                self.state = 9378
                self.match(SnowflakeParser.ASSOC)
                self.state = 9379
                self.string()
                pass
            elif token in [716]:
                self.state = 9380
                self.match(SnowflakeParser.STATEMENT)
                self.state = 9381
                self.match(SnowflakeParser.ASSOC)
                self.state = 9382
                self.id_()
                pass
            elif token in [728]:
                self.state = 9383
                self.match(SnowflakeParser.STREAM)
                self.state = 9384
                self.match(SnowflakeParser.ASSOC)
                self.state = 9385
                self.string()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9388
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_streamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def stream_time(self):
            return self.getTypedRuleContext(SnowflakeParser.Stream_timeContext,0)


        def append_only(self):
            return self.getTypedRuleContext(SnowflakeParser.Append_onlyContext,0)


        def show_initial_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_initial_rowsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def insert_only(self):
            return self.getTypedRuleContext(SnowflakeParser.Insert_onlyContext,0)


        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_stream

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_stream" ):
                listener.enterCreate_stream(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_stream" ):
                listener.exitCreate_stream(self)




    def create_stream(self):

        localctx = SnowflakeParser.Create_streamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_create_stream)
        self._la = 0 # Token type
        try:
            self.state = 9469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9390
                self.match(SnowflakeParser.CREATE)
                self.state = 9392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 9391
                    self.or_replace()


                self.state = 9394
                self.match(SnowflakeParser.STREAM)
                self.state = 9396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1146,self._ctx)
                if la_ == 1:
                    self.state = 9395
                    self.if_not_exists()


                self.state = 9398
                self.object_name()
                self.state = 9400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 9399
                    self.with_tags()


                self.state = 9403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 9402
                    self.copy_grants()


                self.state = 9405
                self.match(SnowflakeParser.ON)
                self.state = 9406
                _la = self._input.LA(1)
                if not(_la==747 or _la==834):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9407
                self.object_name()
                self.state = 9409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48 or _la==83:
                    self.state = 9408
                    self.stream_time()


                self.state = 9412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 9411
                    self.append_only()


                self.state = 9415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==682:
                    self.state = 9414
                    self.show_initial_rows()


                self.state = 9418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9417
                    self.comment_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9420
                self.match(SnowflakeParser.CREATE)
                self.state = 9422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 9421
                    self.or_replace()


                self.state = 9424
                self.match(SnowflakeParser.STREAM)
                self.state = 9426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1154,self._ctx)
                if la_ == 1:
                    self.state = 9425
                    self.if_not_exists()


                self.state = 9428
                self.object_name()
                self.state = 9430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 9429
                    self.with_tags()


                self.state = 9433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 9432
                    self.copy_grants()


                self.state = 9435
                self.match(SnowflakeParser.ON)
                self.state = 9436
                self.match(SnowflakeParser.EXTERNAL)
                self.state = 9437
                self.match(SnowflakeParser.TABLE)
                self.state = 9438
                self.object_name()
                self.state = 9440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48 or _la==83:
                    self.state = 9439
                    self.stream_time()


                self.state = 9443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==352:
                    self.state = 9442
                    self.insert_only()


                self.state = 9446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9445
                    self.comment_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9448
                self.match(SnowflakeParser.CREATE)
                self.state = 9450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==497:
                    self.state = 9449
                    self.or_replace()


                self.state = 9452
                self.match(SnowflakeParser.STREAM)
                self.state = 9454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1161,self._ctx)
                if la_ == 1:
                    self.state = 9453
                    self.if_not_exists()


                self.state = 9456
                self.object_name()
                self.state = 9458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 9457
                    self.with_tags()


                self.state = 9461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 9460
                    self.copy_grants()


                self.state = 9463
                self.match(SnowflakeParser.ON)
                self.state = 9464
                self.match(SnowflakeParser.STAGE)
                self.state = 9465
                self.object_name()
                self.state = 9467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9466
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemporaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TEMP(self):
            return self.getToken(SnowflakeParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SnowflakeParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_temporary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporary" ):
                listener.enterTemporary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporary" ):
                listener.exitTemporary(self)




    def temporary(self):

        localctx = SnowflakeParser.TemporaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_temporary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9471
            _la = self._input.LA(1)
            if not(_la==759 or _la==760):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def temporary(self):
            return self.getTypedRuleContext(SnowflakeParser.TemporaryContext,0)


        def LOCAL(self):
            return self.getToken(SnowflakeParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(SnowflakeParser.GLOBAL, 0)

        def VOLATILE(self):
            return self.getToken(SnowflakeParser.VOLATILE, 0)

        def TRANSIENT(self):
            return self.getToken(SnowflakeParser.TRANSIENT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_table_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type" ):
                listener.enterTable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type" ):
                listener.exitTable_type(self)




    def table_type(self):

        localctx = SnowflakeParser.Table_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_table_type)
        self._la = 0 # Token type
        try:
            self.state = 9479
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [306, 390, 759, 760]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306 or _la==390:
                    self.state = 9473
                    _la = self._input.LA(1)
                    if not(_la==306 or _la==390):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 9476
                self.temporary()
                pass
            elif token in [837]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9477
                self.match(SnowflakeParser.VOLATILE)
                pass
            elif token in [793]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9478
                self.match(SnowflakeParser.TRANSIENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_tagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def tag_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Tag_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Tag_declContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_with_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_tags" ):
                listener.enterWith_tags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_tags" ):
                listener.exitWith_tags(self)




    def with_tags(self):

        localctx = SnowflakeParser.With_tagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_with_tags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==847:
                self.state = 9481
                self.match(SnowflakeParser.WITH)


            self.state = 9484
            self.match(SnowflakeParser.TAG)
            self.state = 9485
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 9486
            self.tag_decl()
            self.state = 9491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 9487
                self.match(SnowflakeParser.COMMA)
                self.state = 9488
                self.tag_decl()
                self.state = 9493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9494
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_row_access_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_with_row_access_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_row_access_policy" ):
                listener.enterWith_row_access_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_row_access_policy" ):
                listener.exitWith_row_access_policy(self)




    def with_row_access_policy(self):

        localctx = SnowflakeParser.With_row_access_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_with_row_access_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==847:
                self.state = 9496
                self.match(SnowflakeParser.WITH)


            self.state = 9499
            self.match(SnowflakeParser.ROW)
            self.state = 9500
            self.match(SnowflakeParser.ACCESS)
            self.state = 9501
            self.match(SnowflakeParser.POLICY)
            self.state = 9502
            self.id_()
            self.state = 9503
            self.match(SnowflakeParser.ON)
            self.state = 9504
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 9505
            self.column_name()
            self.state = 9510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 9506
                self.match(SnowflakeParser.COMMA)
                self.state = 9507
                self.column_name()
                self.state = 9512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9513
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cluster_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTER(self):
            return self.getToken(SnowflakeParser.CLUSTER, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def expr_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_list_in_parenthesesContext,0)


        def LINEAR(self):
            return self.getToken(SnowflakeParser.LINEAR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_cluster_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCluster_by" ):
                listener.enterCluster_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCluster_by" ):
                listener.exitCluster_by(self)




    def cluster_by(self):

        localctx = SnowflakeParser.Cluster_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_cluster_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9515
            self.match(SnowflakeParser.CLUSTER)
            self.state = 9516
            self.match(SnowflakeParser.BY)
            self.state = 9518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==387:
                self.state = 9517
                self.match(SnowflakeParser.LINEAR)


            self.state = 9520
            self.expr_list_in_parentheses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_trackingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(SnowflakeParser.CHANGE_TRACKING, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_change_tracking

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking" ):
                listener.enterChange_tracking(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking" ):
                listener.exitChange_tracking(self)




    def change_tracking(self):

        localctx = SnowflakeParser.Change_trackingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_change_tracking)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9522
            self.match(SnowflakeParser.CHANGE_TRACKING)
            self.state = 9523
            self.match(SnowflakeParser.EQ)
            self.state = 9524
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_masking_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def column_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_with_masking_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_masking_policy" ):
                listener.enterWith_masking_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_masking_policy" ):
                listener.exitWith_masking_policy(self)




    def with_masking_policy(self):

        localctx = SnowflakeParser.With_masking_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_with_masking_policy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==847:
                self.state = 9526
                self.match(SnowflakeParser.WITH)


            self.state = 9529
            self.match(SnowflakeParser.MASKING)
            self.state = 9530
            self.match(SnowflakeParser.POLICY)
            self.state = 9531
            self.id_()
            self.state = 9534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==825:
                self.state = 9532
                self.match(SnowflakeParser.USING)
                self.state = 9533
                self.column_list_in_parentheses()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLATE(self):
            return self.getToken(SnowflakeParser.COLLATE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_collate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollate" ):
                listener.enterCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollate" ):
                listener.exitCollate(self)




    def collate(self):

        localctx = SnowflakeParser.CollateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_collate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9536
            self.match(SnowflakeParser.COLLATE)
            self.state = 9537
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_noorderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SnowflakeParser.ORDER, 0)

        def NOORDER(self):
            return self.getToken(SnowflakeParser.NOORDER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_order_noorder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_noorder" ):
                listener.enterOrder_noorder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_noorder" ):
                listener.exitOrder_noorder(self)




    def order_noorder(self):

        localctx = SnowflakeParser.Order_noorderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_order_noorder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9539
            _la = self._input.LA(1)
            if not(_la==446 or _la==500):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def AUTOINCREMENT(self):
            return self.getToken(SnowflakeParser.AUTOINCREMENT, 0)

        def IDENTITY(self):
            return self.getToken(SnowflakeParser.IDENTITY, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def start_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Start_withContext,0)


        def increment_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Increment_byContext,0)


        def order_noorder(self):
            return self.getTypedRuleContext(SnowflakeParser.Order_noorderContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = SnowflakeParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_default_value)
        self._la = 0 # Token type
        try:
            self.state = 9560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [182]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9541
                self.match(SnowflakeParser.DEFAULT)
                self.state = 9542
                self.expr(0)
                pass
            elif token in [55, 326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9543
                _la = self._input.LA(1)
                if not(_la==55 or _la==326):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1175,self._ctx)
                if la_ == 1:
                    self.state = 9544
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 9545
                    self.num()
                    self.state = 9546
                    self.match(SnowflakeParser.COMMA)
                    self.state = 9547
                    self.num()
                    self.state = 9548
                    self.match(SnowflakeParser.RR_BRACKET)

                elif la_ == 2:
                    self.state = 9550
                    self.start_with()

                elif la_ == 3:
                    self.state = 9551
                    self.increment_by()

                elif la_ == 4:
                    self.state = 9552
                    self.start_with()
                    self.state = 9553
                    self.increment_by()


                self.state = 9558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==446 or _la==500:
                    self.state = 9557
                    self.order_noorder()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREIGN(self):
            return self.getToken(SnowflakeParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(SnowflakeParser.KEY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_foreign_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key" ):
                listener.enterForeign_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key" ):
                listener.exitForeign_key(self)




    def foreign_key(self):

        localctx = SnowflakeParser.Foreign_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_foreign_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9562
            self.match(SnowflakeParser.FOREIGN)
            self.state = 9563
            self.match(SnowflakeParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(SnowflakeParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(SnowflakeParser.KEY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_primary_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_key" ):
                listener.enterPrimary_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_key" ):
                listener.exitPrimary_key(self)




    def primary_key(self):

        localctx = SnowflakeParser.Primary_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_primary_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9565
            self.match(SnowflakeParser.PRIMARY)
            self.state = 9566
            self.match(SnowflakeParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Out_of_line_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list_in_parentheses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_list_in_parenthesesContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,i)


        def foreign_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Foreign_keyContext,0)


        def REFERENCES(self):
            return self.getToken(SnowflakeParser.REFERENCES, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def constraint_properties(self):
            return self.getTypedRuleContext(SnowflakeParser.Constraint_propertiesContext,0)


        def CONSTRAINT(self):
            return self.getToken(SnowflakeParser.CONSTRAINT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def inline_comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Inline_comment_clauseContext,0)


        def UNIQUE(self):
            return self.getToken(SnowflakeParser.UNIQUE, 0)

        def primary_key(self):
            return self.getTypedRuleContext(SnowflakeParser.Primary_keyContext,0)


        def common_constraint_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Common_constraint_propertiesContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Common_constraint_propertiesContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_out_of_line_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOut_of_line_constraint" ):
                listener.enterOut_of_line_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOut_of_line_constraint" ):
                listener.exitOut_of_line_constraint(self)




    def out_of_line_constraint(self):

        localctx = SnowflakeParser.Out_of_line_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_out_of_line_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148:
                self.state = 9568
                self.match(SnowflakeParser.CONSTRAINT)
                self.state = 9569
                self.id_()


            self.state = 9590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [551, 806]:
                self.state = 9574
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [806]:
                    self.state = 9572
                    self.match(SnowflakeParser.UNIQUE)
                    pass
                elif token in [551]:
                    self.state = 9573
                    self.primary_key()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9576
                self.column_list_in_parentheses()
                self.state = 9580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 187)) & ~0x3f) == 0 and ((1 << (_la - 187)) & 1100048506881) != 0) or _la==346 or _la==447 or _la==448 or _la==587:
                    self.state = 9577
                    self.common_constraint_properties()
                    self.state = 9582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [280]:
                self.state = 9583
                self.foreign_key()
                self.state = 9584
                self.column_list_in_parentheses()
                self.state = 9585
                self.match(SnowflakeParser.REFERENCES)
                self.state = 9586
                self.object_name()
                self.state = 9587
                self.column_list_in_parentheses()
                self.state = 9588
                self.constraint_properties()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9592
                self.inline_comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_col_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def col_decl(self):
            return self.getTypedRuleContext(SnowflakeParser.Col_declContext,0)


        def collate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.CollateContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.CollateContext,i)


        def inline_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Inline_constraintContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Inline_constraintContext,i)


        def null_not_null(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Null_not_nullContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Null_not_nullContext,i)


        def default_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Default_valueContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Default_valueContext,i)


        def with_masking_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_masking_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def inline_comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Inline_comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_full_col_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_col_decl" ):
                listener.enterFull_col_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_col_decl" ):
                listener.exitFull_col_decl(self)




    def full_col_decl(self):

        localctx = SnowflakeParser.Full_col_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_full_col_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9595
            self.col_decl()
            self.state = 9602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==55 or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 281474976727041) != 0) or _la==280 or _la==326 or _la==448 or _la==458 or _la==551 or _la==806:
                self.state = 9600
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [134]:
                    self.state = 9596
                    self.collate()
                    pass
                elif token in [148, 280, 551, 806]:
                    self.state = 9597
                    self.inline_constraint()
                    pass
                elif token in [448, 458]:
                    self.state = 9598
                    self.null_not_null()
                    pass
                elif token in [55, 182, 326]:
                    self.state = 9599
                    self.default_value()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1185,self._ctx)
            if la_ == 1:
                self.state = 9605
                self.with_masking_policy()


            self.state = 9609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 9608
                self.with_tags()


            self.state = 9612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9611
                self.inline_comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Materialized_col_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def with_masking_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_masking_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_materialized_col_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterialized_col_decl" ):
                listener.enterMaterialized_col_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterialized_col_decl" ):
                listener.exitMaterialized_col_decl(self)




    def materialized_col_decl(self):

        localctx = SnowflakeParser.Materialized_col_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_materialized_col_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9614
            self.column_name()
            self.state = 9616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                self.state = 9615
                self.data_type()


            self.state = 9619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1189,self._ctx)
            if la_ == 1:
                self.state = 9618
                self.with_masking_policy()


            self.state = 9622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 9621
                self.with_tags()


            self.state = 9626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9624
                self.match(SnowflakeParser.COMMENT)
                self.state = 9625
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Materialized_col_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def materialized_col_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Materialized_col_declContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Materialized_col_declContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_materialized_col_decl_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaterialized_col_decl_list" ):
                listener.enterMaterialized_col_decl_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaterialized_col_decl_list" ):
                listener.exitMaterialized_col_decl_list(self)




    def materialized_col_decl_list(self):

        localctx = SnowflakeParser.Materialized_col_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_materialized_col_decl_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9628
            self.materialized_col_decl()
            self.state = 9633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 9629
                self.match(SnowflakeParser.COMMA)
                self.state = 9630
                self.materialized_col_decl()
                self.state = 9635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_decl_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_col_decl(self):
            return self.getTypedRuleContext(SnowflakeParser.Full_col_declContext,0)


        def out_of_line_constraint(self):
            return self.getTypedRuleContext(SnowflakeParser.Out_of_line_constraintContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_decl_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_decl_item" ):
                listener.enterColumn_decl_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_decl_item" ):
                listener.exitColumn_decl_item(self)




    def column_decl_item(self):

        localctx = SnowflakeParser.Column_decl_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_column_decl_item)
        try:
            self.state = 9638
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 62, 108, 109, 113, 114, 115, 117, 131, 134, 135, 138, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 190, 194, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 381, 382, 384, 385, 390, 396, 397, 412, 416, 421, 427, 436, 438, 446, 456, 460, 461, 462, 477, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 653, 655, 657, 667, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 904, 905]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9636
                self.full_col_decl()
                pass
            elif token in [148, 280, 551, 806]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9637
                self.out_of_line_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_decl_item_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_decl_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_decl_itemContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_decl_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_decl_item_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_decl_item_list" ):
                listener.enterColumn_decl_item_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_decl_item_list" ):
                listener.exitColumn_decl_item_list(self)




    def column_decl_item_list(self):

        localctx = SnowflakeParser.Column_decl_item_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_column_decl_item_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9640
            self.column_decl_item()
            self.state = 9645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 9641
                self.match(SnowflakeParser.COMMA)
                self.state = 9642
                self.column_decl_item()
                self.state = 9647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def create_table_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Create_table_clauseContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def or_alter(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_alterContext,0)


        def table_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_typeContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = SnowflakeParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9648
            self.match(SnowflakeParser.CREATE)
            self.state = 9651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1195,self._ctx)
            if la_ == 1:
                self.state = 9649
                self.or_replace()

            elif la_ == 2:
                self.state = 9650
                self.or_alter()


            self.state = 9654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306 or _la==390 or ((((_la - 759)) & ~0x3f) == 0 and ((1 << (_la - 759)) & 17179869187) != 0) or _la==837:
                self.state = 9653
                self.table_type()


            self.state = 9656
            self.match(SnowflakeParser.TABLE)
            self.state = 9665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1199,self._ctx)
            if la_ == 1:
                self.state = 9658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1197,self._ctx)
                if la_ == 1:
                    self.state = 9657
                    self.if_not_exists()


                self.state = 9660
                self.object_name()
                pass

            elif la_ == 2:
                self.state = 9661
                self.object_name()
                self.state = 9663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 9662
                    self.if_not_exists()


                pass


            self.state = 9675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1202,self._ctx)
            if la_ == 1:
                self.state = 9668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1200,self._ctx)
                if la_ == 1:
                    self.state = 9667
                    self.comment_clause()


                self.state = 9670
                self.create_table_clause()
                pass

            elif la_ == 2:
                self.state = 9671
                self.create_table_clause()
                self.state = 9673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9672
                    self.comment_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_decl_item_list_parenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_decl_item_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_decl_item_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_decl_item_list_paren

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_decl_item_list_paren" ):
                listener.enterColumn_decl_item_list_paren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_decl_item_list_paren" ):
                listener.exitColumn_decl_item_list_paren(self)




    def column_decl_item_list_paren(self):

        localctx = SnowflakeParser.Column_decl_item_list_parenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_column_decl_item_list_paren)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9677
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 9678
            self.column_decl_item_list()
            self.state = 9679
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_decl_item_list_paren(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_decl_item_list_parenContext,0)


        def stage_file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.Stage_file_formatContext,0)


        def STAGE_COPY_OPTIONS(self):
            return self.getToken(SnowflakeParser.STAGE_COPY_OPTIONS, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def copy_options(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_optionsContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def set_data_retention_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_data_retention_paramsContext,0)


        def change_tracking(self):
            return self.getTypedRuleContext(SnowflakeParser.Change_trackingContext,0)


        def default_ddl_collation(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_ddl_collationContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def comment_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Comment_clauseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,i)


        def with_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_row_access_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def cluster_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Cluster_byContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_clause" ):
                listener.enterCreate_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_clause" ):
                listener.exitCreate_table_clause(self)




    def create_table_clause(self):

        localctx = SnowflakeParser.Create_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_create_table_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1206,self._ctx)
            if la_ == 1:
                self.state = 9681
                self.column_decl_item_list_paren()
                self.state = 9683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 9682
                    self.cluster_by()


                pass

            elif la_ == 2:
                self.state = 9686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==131:
                    self.state = 9685
                    self.cluster_by()


                self.state = 9689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 9688
                    self.comment_clause()


                self.state = 9691
                self.column_decl_item_list_paren()
                pass


            self.state = 9695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==709 or _la==803:
                self.state = 9694
                self.stage_file_format()


            self.state = 9703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==708:
                self.state = 9697
                self.match(SnowflakeParser.STAGE_COPY_OPTIONS)
                self.state = 9698
                self.match(SnowflakeParser.EQ)
                self.state = 9699
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 9700
                self.copy_options()
                self.state = 9701
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 9706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173 or _la==413:
                self.state = 9705
                self.set_data_retention_params()


            self.state = 9709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 9708
                self.change_tracking()


            self.state = 9712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==183:
                self.state = 9711
                self.default_ddl_collation()


            self.state = 9715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 9714
                self.copy_grants()


            self.state = 9718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1213,self._ctx)
            if la_ == 1:
                self.state = 9717
                self.comment_clause()


            self.state = 9721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1214,self._ctx)
            if la_ == 1:
                self.state = 9720
                self.with_row_access_policy()


            self.state = 9724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 9723
                self.with_tags()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_as_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def table_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_typeContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_decl_item_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_decl_item_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def cluster_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Cluster_byContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def with_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_row_access_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_table_as_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_as_select" ):
                listener.enterCreate_table_as_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_as_select" ):
                listener.exitCreate_table_as_select(self)




    def create_table_as_select(self):

        localctx = SnowflakeParser.Create_table_as_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_create_table_as_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9726
            self.match(SnowflakeParser.CREATE)
            self.state = 9728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9727
                self.or_replace()


            self.state = 9731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306 or _la==390 or ((((_la - 759)) & ~0x3f) == 0 and ((1 << (_la - 759)) & 17179869187) != 0) or _la==837:
                self.state = 9730
                self.table_type()


            self.state = 9733
            self.match(SnowflakeParser.TABLE)
            self.state = 9742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1220,self._ctx)
            if la_ == 1:
                self.state = 9735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1218,self._ctx)
                if la_ == 1:
                    self.state = 9734
                    self.if_not_exists()


                self.state = 9737
                self.object_name()
                pass

            elif la_ == 2:
                self.state = 9738
                self.object_name()
                self.state = 9740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==327:
                    self.state = 9739
                    self.if_not_exists()


                pass


            self.state = 9748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==931:
                self.state = 9744
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 9745
                self.column_decl_item_list()
                self.state = 9746
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 9751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 9750
                self.cluster_by()


            self.state = 9754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 9753
                self.copy_grants()


            self.state = 9757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1224,self._ctx)
            if la_ == 1:
                self.state = 9756
                self.with_row_access_policy()


            self.state = 9760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 9759
                self.with_tags()


            self.state = 9763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9762
                self.comment_clause()


            self.state = 9765
            self.match(SnowflakeParser.AS)
            self.state = 9766
            self.query_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_likeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def LIKE(self):
            return self.getToken(SnowflakeParser.LIKE, 0)

        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def TRANSIENT(self):
            return self.getToken(SnowflakeParser.TRANSIENT, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def cluster_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Cluster_byContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_table_like

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_like" ):
                listener.enterCreate_table_like(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_like" ):
                listener.exitCreate_table_like(self)




    def create_table_like(self):

        localctx = SnowflakeParser.Create_table_likeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_create_table_like)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9768
            self.match(SnowflakeParser.CREATE)
            self.state = 9770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9769
                self.or_replace()


            self.state = 9773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==793:
                self.state = 9772
                self.match(SnowflakeParser.TRANSIENT)


            self.state = 9775
            self.match(SnowflakeParser.TABLE)
            self.state = 9777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1229,self._ctx)
            if la_ == 1:
                self.state = 9776
                self.if_not_exists()


            self.state = 9779
            self.object_name()
            self.state = 9780
            self.match(SnowflakeParser.LIKE)
            self.state = 9781
            self.object_name()
            self.state = 9783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 9782
                self.cluster_by()


            self.state = 9786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 9785
                self.copy_grants()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def tag_allowed_values(self):
            return self.getTypedRuleContext(SnowflakeParser.Tag_allowed_valuesContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_tag" ):
                listener.enterCreate_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_tag" ):
                listener.exitCreate_tag(self)




    def create_tag(self):

        localctx = SnowflakeParser.Create_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_create_tag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9788
            self.match(SnowflakeParser.CREATE)
            self.state = 9790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9789
                self.or_replace()


            self.state = 9792
            self.match(SnowflakeParser.TAG)
            self.state = 9794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1233,self._ctx)
            if la_ == 1:
                self.state = 9793
                self.if_not_exists()


            self.state = 9796
            self.object_name()
            self.state = 9798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 9797
                self.tag_allowed_values()


            self.state = 9801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9800
                self.comment_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tag_allowed_valuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOWED_VALUES(self):
            return self.getToken(SnowflakeParser.ALLOWED_VALUES, 0)

        def string_list(self):
            return self.getTypedRuleContext(SnowflakeParser.String_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_tag_allowed_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag_allowed_values" ):
                listener.enterTag_allowed_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag_allowed_values" ):
                listener.exitTag_allowed_values(self)




    def tag_allowed_values(self):

        localctx = SnowflakeParser.Tag_allowed_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_tag_allowed_values)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9803
            self.match(SnowflakeParser.ALLOWED_VALUES)
            self.state = 9804
            self.string_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_DETACHED_QUERY(self):
            return self.getToken(SnowflakeParser.ABORT_DETACHED_QUERY, 0)

        def ALLOW_CLIENT_MFA_CACHING(self):
            return self.getToken(SnowflakeParser.ALLOW_CLIENT_MFA_CACHING, 0)

        def ALLOW_ID_TOKEN(self):
            return self.getToken(SnowflakeParser.ALLOW_ID_TOKEN, 0)

        def AUTOCOMMIT(self):
            return self.getToken(SnowflakeParser.AUTOCOMMIT, 0)

        def AUTOCOMMIT_API_SUPPORTED(self):
            return self.getToken(SnowflakeParser.AUTOCOMMIT_API_SUPPORTED, 0)

        def BINARY_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.BINARY_INPUT_FORMAT, 0)

        def BINARY_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.BINARY_OUTPUT_FORMAT, 0)

        def CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS(self):
            return self.getToken(SnowflakeParser.CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS, 0)

        def CLIENT_ENCRYPTION_KEY_SIZE(self):
            return self.getToken(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE, 0)

        def CLIENT_MEMORY_LIMIT(self):
            return self.getToken(SnowflakeParser.CLIENT_MEMORY_LIMIT, 0)

        def CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX(self):
            return self.getToken(SnowflakeParser.CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX, 0)

        def CLIENT_METADATA_USE_SESSION_DATABASE(self):
            return self.getToken(SnowflakeParser.CLIENT_METADATA_USE_SESSION_DATABASE, 0)

        def CLIENT_PREFETCH_THREADS(self):
            return self.getToken(SnowflakeParser.CLIENT_PREFETCH_THREADS, 0)

        def CLIENT_RESULT_CHUNK_SIZE(self):
            return self.getToken(SnowflakeParser.CLIENT_RESULT_CHUNK_SIZE, 0)

        def CLIENT_RESULT_COLUMN_CASE_INSENSITIVE(self):
            return self.getToken(SnowflakeParser.CLIENT_RESULT_COLUMN_CASE_INSENSITIVE, 0)

        def CLIENT_SESSION_KEEP_ALIVE(self):
            return self.getToken(SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE, 0)

        def CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY(self):
            return self.getToken(SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY, 0)

        def CLIENT_TIMESTAMP_TYPE_MAPPING(self):
            return self.getToken(SnowflakeParser.CLIENT_TIMESTAMP_TYPE_MAPPING, 0)

        def DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0)

        def DATE_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.DATE_INPUT_FORMAT, 0)

        def DATE_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.DATE_OUTPUT_FORMAT, 0)

        def DEFAULT_DDL_COLLATION_(self):
            return self.getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0)

        def ENABLE_INTERNAL_STAGES_PRIVATELINK(self):
            return self.getToken(SnowflakeParser.ENABLE_INTERNAL_STAGES_PRIVATELINK, 0)

        def ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION(self):
            return self.getToken(SnowflakeParser.ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION, 0)

        def ENFORCE_SESSION_POLICY(self):
            return self.getToken(SnowflakeParser.ENFORCE_SESSION_POLICY, 0)

        def ERROR_ON_NONDETERMINISTIC_MERGE(self):
            return self.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE, 0)

        def ERROR_ON_NONDETERMINISTIC_UPDATE(self):
            return self.getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE, 0)

        def EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST(self):
            return self.getToken(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0)

        def GEOGRAPHY_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.GEOGRAPHY_OUTPUT_FORMAT, 0)

        def GEOMETRY_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.GEOMETRY_OUTPUT_FORMAT, 0)

        def INITIAL_REPLICATION_SIZE_LIMIT_IN_TB(self):
            return self.getToken(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0)

        def JDBC_TREAT_DECIMAL_AS_INT(self):
            return self.getToken(SnowflakeParser.JDBC_TREAT_DECIMAL_AS_INT, 0)

        def JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC(self):
            return self.getToken(SnowflakeParser.JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC, 0)

        def JDBC_USE_SESSION_TIMEZONE(self):
            return self.getToken(SnowflakeParser.JDBC_USE_SESSION_TIMEZONE, 0)

        def JSON_INDENT(self):
            return self.getToken(SnowflakeParser.JSON_INDENT, 0)

        def JS_TREAT_INTEGER_AS_BIGINT(self):
            return self.getToken(SnowflakeParser.JS_TREAT_INTEGER_AS_BIGINT, 0)

        def LOCK_TIMEOUT(self):
            return self.getToken(SnowflakeParser.LOCK_TIMEOUT, 0)

        def MAX_CONCURRENCY_LEVEL(self):
            return self.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0)

        def MAX_DATA_EXTENSION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0)

        def MULTI_STATEMENT_COUNT(self):
            return self.getToken(SnowflakeParser.MULTI_STATEMENT_COUNT, 0)

        def MIN_DATA_RETENTION_TIME_IN_DAYS(self):
            return self.getToken(SnowflakeParser.MIN_DATA_RETENTION_TIME_IN_DAYS, 0)

        def NETWORK_POLICY(self):
            return self.getToken(SnowflakeParser.NETWORK_POLICY, 0)

        def SHARE_RESTRICTIONS(self):
            return self.getToken(SnowflakeParser.SHARE_RESTRICTIONS, 0)

        def PERIODIC_DATA_REKEYING(self):
            return self.getToken(SnowflakeParser.PERIODIC_DATA_REKEYING, 0)

        def PIPE_EXECUTION_PAUSED(self):
            return self.getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0)

        def PREVENT_UNLOAD_TO_INLINE_URL(self):
            return self.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL, 0)

        def PREVENT_UNLOAD_TO_INTERNAL_STAGES(self):
            return self.getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES, 0)

        def QUERY_TAG(self):
            return self.getToken(SnowflakeParser.QUERY_TAG, 0)

        def QUOTED_IDENTIFIERS_IGNORE_CASE(self):
            return self.getToken(SnowflakeParser.QUOTED_IDENTIFIERS_IGNORE_CASE, 0)

        def REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION(self):
            return self.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0)

        def REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION(self):
            return self.getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0)

        def ROWS_PER_RESULTSET(self):
            return self.getToken(SnowflakeParser.ROWS_PER_RESULTSET, 0)

        def SAML_IDENTITY_PROVIDER(self):
            return self.getToken(SnowflakeParser.SAML_IDENTITY_PROVIDER, 0)

        def SIMULATED_DATA_SHARING_CONSUMER(self):
            return self.getToken(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER, 0)

        def SSO_LOGIN_PAGE(self):
            return self.getToken(SnowflakeParser.SSO_LOGIN_PAGE, 0)

        def STATEMENT_QUEUED_TIMEOUT_IN_SECONDS(self):
            return self.getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0)

        def STATEMENT_TIMEOUT_IN_SECONDS(self):
            return self.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0)

        def STRICT_JSON_OUTPUT(self):
            return self.getToken(SnowflakeParser.STRICT_JSON_OUTPUT, 0)

        def SUSPEND_TASK_AFTER_NUM_FAILURES(self):
            return self.getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0)

        def TIMESTAMP_DAY_IS_ALWAYS_24H(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H, 0)

        def TIMESTAMP_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_INPUT_FORMAT, 0)

        def TIMESTAMP_LTZ_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT, 0)

        def TIMESTAMP_NTZ_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT, 0)

        def TIMESTAMP_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT, 0)

        def TIMESTAMP_TYPE_MAPPING(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_TYPE_MAPPING, 0)

        def TIMESTAMP_TZ_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT, 0)

        def TIMEZONE(self):
            return self.getToken(SnowflakeParser.TIMEZONE, 0)

        def TIME_INPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIME_INPUT_FORMAT, 0)

        def TIME_OUTPUT_FORMAT(self):
            return self.getToken(SnowflakeParser.TIME_OUTPUT_FORMAT, 0)

        def TRANSACTION_ABORT_ON_ERROR(self):
            return self.getToken(SnowflakeParser.TRANSACTION_ABORT_ON_ERROR, 0)

        def TRANSACTION_DEFAULT_ISOLATION_LEVEL(self):
            return self.getToken(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL, 0)

        def TWO_DIGIT_CENTURY_START(self):
            return self.getToken(SnowflakeParser.TWO_DIGIT_CENTURY_START, 0)

        def UNSUPPORTED_DDL_ACTION(self):
            return self.getToken(SnowflakeParser.UNSUPPORTED_DDL_ACTION, 0)

        def USE_CACHED_RESULT(self):
            return self.getToken(SnowflakeParser.USE_CACHED_RESULT, 0)

        def USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE(self):
            return self.getToken(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0)

        def USER_TASK_TIMEOUT_MS(self):
            return self.getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0)

        def WEEK_OF_YEAR_POLICY(self):
            return self.getToken(SnowflakeParser.WEEK_OF_YEAR_POLICY, 0)

        def WEEK_START(self):
            return self.getToken(SnowflakeParser.WEEK_START, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_session_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_parameter" ):
                listener.enterSession_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_parameter" ):
                listener.exitSession_parameter(self)




    def session_parameter(self):

        localctx = SnowflakeParser.Session_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_session_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9806
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 27021597848109064) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 1098974756867) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & -4538995105691859919) != 0) or ((((_la - 251)) & ~0x3f) == 0 and ((1 << (_la - 251)) & 1688849860263937) != 0) or ((((_la - 348)) & ~0x3f) == 0 and ((1 << (_la - 348)) & 35184375349249) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & 138428419) != 0) or ((((_la - 537)) & ~0x3f) == 0 and ((1 << (_la - 537)) & -4611685996952545263) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & 76561193669492737) != 0) or ((((_la - 705)) & ~0x3f) == 0 and ((1 << (_la - 705)) & 4611686087213985793) != 0) or ((((_la - 769)) & ~0x3f) == 0 and ((1 << (_la - 769)) & 49541803526875509) != 0) or _la==843 or _la==844):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_parameter_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def session_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Session_parameterContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Session_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_session_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_parameter_list" ):
                listener.enterSession_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_parameter_list" ):
                listener.exitSession_parameter_list(self)




    def session_parameter_list(self):

        localctx = SnowflakeParser.Session_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_session_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9808
            self.session_parameter()
            self.state = 9813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 9809
                self.match(SnowflakeParser.COMMA)
                self.state = 9810
                self.session_parameter()
                self.state = 9815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_params_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def session_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Session_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Session_paramsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_session_params_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_params_list" ):
                listener.enterSession_params_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_params_list" ):
                listener.exitSession_params_list(self)




    def session_params_list(self):

        localctx = SnowflakeParser.Session_params_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_session_params_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9816
            self.session_params()
            self.state = 9821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 9817
                self.match(SnowflakeParser.COMMA)
                self.state = 9818
                self.session_params()
                self.state = 9823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_taskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,i)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def sql(self):
            return self.getTypedRuleContext(SnowflakeParser.SqlContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def task_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Task_parametersContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Task_parametersContext,i)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def AFTER(self):
            return self.getToken(SnowflakeParser.AFTER, 0)

        def WHEN(self):
            return self.getToken(SnowflakeParser.WHEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_task" ):
                listener.enterCreate_task(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_task" ):
                listener.exitCreate_task(self)




    def create_task(self):

        localctx = SnowflakeParser.Create_taskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_create_task)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9824
            self.match(SnowflakeParser.CREATE)
            self.state = 9826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9825
                self.or_replace()


            self.state = 9828
            self.match(SnowflakeParser.TASK)
            self.state = 9830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1239,self._ctx)
            if la_ == 1:
                self.state = 9829
                self.if_not_exists()


            self.state = 9832
            self.object_name()
            self.state = 9836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9007199388958728) != 0) or _la==89 or _la==90 or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 936748722493063171) != 0) or _la==368 or _la==393 or _la==569 or _la==628 or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -9223372036317904895) != 0) or ((((_la - 731)) & ~0x3f) == 0 and ((1 << (_la - 731)) & 2313263956786938881) != 0) or ((((_la - 802)) & ~0x3f) == 0 and ((1 << (_la - 802)) & 6665795010817) != 0):
                self.state = 9833
                self.task_parameters()
                self.state = 9838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9839
                self.comment_clause()


            self.state = 9843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 9842
                self.copy_grants()


            self.state = 9854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 9845
                self.match(SnowflakeParser.AFTER)
                self.state = 9846
                self.object_name()
                self.state = 9851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 9847
                    self.match(SnowflakeParser.COMMA)
                    self.state = 9848
                    self.object_name()
                    self.state = 9853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 9858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==845:
                self.state = 9856
                self.match(SnowflakeParser.WHEN)
                self.state = 9857
                self.search_condition(0)


            self.state = 9860
            self.match(SnowflakeParser.AS)
            self.state = 9861
            self.sql()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Task_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def task_compute(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_computeContext,0)


        def task_schedule(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_scheduleContext,0)


        def task_overlap(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_overlapContext,0)


        def session_params_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_params_listContext,0)


        def task_timeout(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_timeoutContext,0)


        def task_suspend_after_failure_number(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_suspend_after_failure_numberContext,0)


        def task_error_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Task_error_integrationContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_task_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask_parameters" ):
                listener.enterTask_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask_parameters" ):
                listener.exitTask_parameters(self)




    def task_parameters(self):

        localctx = SnowflakeParser.Task_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_task_parameters)
        try:
            self.state = 9870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [821, 838]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9863
                self.task_compute()
                pass
            elif token in [655]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9864
                self.task_schedule()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9865
                self.task_overlap()
                pass
            elif token in [3, 53, 89, 90, 177, 178, 235, 236, 368, 393, 569, 628, 684, 718, 731, 767, 769, 771, 773, 774, 775, 777, 780, 782, 783, 792, 802, 810, 824, 843, 844]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9866
                self.session_params_list()
                pass
            elif token in [822]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9867
                self.task_timeout()
                pass
            elif token in [741]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9868
                self.task_suspend_after_failure_number()
                pass
            elif token in [233]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9869
                self.task_error_integration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Task_computeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE(self):
            return self.getToken(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0)

        def wh_common_size(self):
            return self.getTypedRuleContext(SnowflakeParser.Wh_common_sizeContext,0)


        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_task_compute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask_compute" ):
                listener.enterTask_compute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask_compute" ):
                listener.exitTask_compute(self)




    def task_compute(self):

        localctx = SnowflakeParser.Task_computeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_task_compute)
        try:
            self.state = 9881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [838]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9872
                self.match(SnowflakeParser.WAREHOUSE)
                self.state = 9873
                self.match(SnowflakeParser.EQ)
                self.state = 9874
                self.id_()
                pass
            elif token in [821]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9875
                self.match(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE)
                self.state = 9876
                self.match(SnowflakeParser.EQ)
                self.state = 9879
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [375, 416, 692, 854, 857, 858]:
                    self.state = 9877
                    self.wh_common_size()
                    pass
                elif token in [912]:
                    self.state = 9878
                    self.string()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Task_scheduleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEDULE(self):
            return self.getToken(SnowflakeParser.SCHEDULE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_task_schedule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask_schedule" ):
                listener.enterTask_schedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask_schedule" ):
                listener.exitTask_schedule(self)




    def task_schedule(self):

        localctx = SnowflakeParser.Task_scheduleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_task_schedule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9883
            self.match(SnowflakeParser.SCHEDULE)
            self.state = 9884
            self.match(SnowflakeParser.EQ)
            self.state = 9885
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Task_timeoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_TASK_TIMEOUT_MS(self):
            return self.getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_task_timeout

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask_timeout" ):
                listener.enterTask_timeout(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask_timeout" ):
                listener.exitTask_timeout(self)




    def task_timeout(self):

        localctx = SnowflakeParser.Task_timeoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_task_timeout)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9887
            self.match(SnowflakeParser.USER_TASK_TIMEOUT_MS)
            self.state = 9888
            self.match(SnowflakeParser.EQ)
            self.state = 9889
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Task_suspend_after_failure_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUSPEND_TASK_AFTER_NUM_FAILURES(self):
            return self.getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_task_suspend_after_failure_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask_suspend_after_failure_number" ):
                listener.enterTask_suspend_after_failure_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask_suspend_after_failure_number" ):
                listener.exitTask_suspend_after_failure_number(self)




    def task_suspend_after_failure_number(self):

        localctx = SnowflakeParser.Task_suspend_after_failure_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_task_suspend_after_failure_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9891
            self.match(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES)
            self.state = 9892
            self.match(SnowflakeParser.EQ)
            self.state = 9893
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Task_error_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_INTEGRATION(self):
            return self.getToken(SnowflakeParser.ERROR_INTEGRATION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_task_error_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask_error_integration" ):
                listener.enterTask_error_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask_error_integration" ):
                listener.exitTask_error_integration(self)




    def task_error_integration(self):

        localctx = SnowflakeParser.Task_error_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_task_error_integration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9895
            self.match(SnowflakeParser.ERROR_INTEGRATION)
            self.state = 9896
            self.match(SnowflakeParser.EQ)
            self.state = 9897
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Task_overlapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_OVERLAPPING_EXECUTION(self):
            return self.getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_task_overlap

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTask_overlap" ):
                listener.enterTask_overlap(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTask_overlap" ):
                listener.exitTask_overlap(self)




    def task_overlap(self):

        localctx = SnowflakeParser.Task_overlapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_task_overlap)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9899
            self.match(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION)
            self.state = 9900
            self.match(SnowflakeParser.EQ)
            self.state = 9901
            self.true_false()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(SnowflakeParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(SnowflakeParser.IMMEDIATE, 0)

        def DBL_DOLLAR(self):
            return self.getToken(SnowflakeParser.DBL_DOLLAR, 0)

        def sql_command(self):
            return self.getTypedRuleContext(SnowflakeParser.Sql_commandContext,0)


        def call(self):
            return self.getTypedRuleContext(SnowflakeParser.CallContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql" ):
                listener.enterSql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql" ):
                listener.exitSql(self)




    def sql(self):

        localctx = SnowflakeParser.SqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_sql)
        try:
            self.state = 9908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9903
                self.match(SnowflakeParser.EXECUTE)
                self.state = 9904
                self.match(SnowflakeParser.IMMEDIATE)
                self.state = 9905
                self.match(SnowflakeParser.DBL_DOLLAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9906
                self.sql_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9907
                self.call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(SnowflakeParser.CALL, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)




    def call(self):

        localctx = SnowflakeParser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9910
            self.match(SnowflakeParser.CALL)
            self.state = 9911
            self.object_name()
            self.state = 9912
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 9914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4616488687499322048) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -7809240960230883327) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 4697537411387758727) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & -8646908497033689899) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 2875618771622502513) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & 1011196433690609753) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & 2067176433418769) != 0) or ((((_la - 477)) & ~0x3f) == 0 and ((1 << (_la - 477)) & 252194986786406947) != 0) or ((((_la - 543)) & ~0x3f) == 0 and ((1 << (_la - 543)) & 6341352602797851655) != 0) or ((((_la - 607)) & ~0x3f) == 0 and ((1 << (_la - 607)) & -3457286770154575867) != 0) or ((((_la - 672)) & ~0x3f) == 0 and ((1 << (_la - 672)) & -9078823585765654527) != 0) or ((((_la - 736)) & ~0x3f) == 0 and ((1 << (_la - 736)) & -1725409633472069117) != 0) or ((((_la - 801)) & ~0x3f) == 0 and ((1 << (_la - 801)) & -3458692578755241979) != 0) or ((((_la - 865)) & ~0x3f) == 0 and ((1 << (_la - 865)) & 4613798938326073343) != 0) or ((((_la - 929)) & ~0x3f) == 0 and ((1 << (_la - 929)) & 98389) != 0):
                self.state = 9913
                self.expr_list()


            self.state = 9916
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_userContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def object_properties(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_propertiesContext,0)


        def object_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_paramsContext,0)


        def session_params(self):
            return self.getTypedRuleContext(SnowflakeParser.Session_paramsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user" ):
                listener.enterCreate_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user" ):
                listener.exitCreate_user(self)




    def create_user(self):

        localctx = SnowflakeParser.Create_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_create_user)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9918
            self.match(SnowflakeParser.CREATE)
            self.state = 9920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9919
                self.or_replace()


            self.state = 9922
            self.match(SnowflakeParser.USER)
            self.state = 9924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1252,self._ctx)
            if la_ == 1:
                self.state = 9923
                self.if_not_exists()


            self.state = 9926
            self.id_()
            self.state = 9928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & -9222870659552509951) != 0) or _la==204 or _la==213 or _la==275 or ((((_la - 377)) & ~0x3f) == 0 and ((1 << (_la - 377)) & 288344725361131521) != 0) or _la==520 or _la==630 or _la==631:
                self.state = 9927
                self.object_properties()


            self.state = 9931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1254,self._ctx)
            if la_ == 1:
                self.state = 9930
                self.object_params()


            self.state = 9934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3 or _la==53 or _la==89 or _la==90 or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 864691128455135235) != 0) or _la==368 or _la==393 or _la==569 or _la==628 or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & 140754668224513) != 0) or ((((_la - 767)) & ~0x3f) == 0 and ((1 << (_la - 767)) & 144124018562278869) != 0) or _la==843 or _la==844:
                self.state = 9933
                self.session_params()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_colContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def with_masking_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_masking_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_view_col

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_col" ):
                listener.enterView_col(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_col" ):
                listener.exitView_col(self)




    def view_col(self):

        localctx = SnowflakeParser.View_colContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_view_col)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9936
            self.column_name()
            self.state = 9937
            self.with_masking_policy()
            self.state = 9938
            self.with_tags()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def SECURE(self):
            return self.getToken(SnowflakeParser.SECURE, 0)

        def RECURSIVE(self):
            return self.getToken(SnowflakeParser.RECURSIVE, 0)

        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_list_with_comment(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_with_commentContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def view_col(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.View_colContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.View_colContext,i)


        def with_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.With_row_access_policyContext,0)


        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def copy_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Copy_grantsContext,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = SnowflakeParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9940
            self.match(SnowflakeParser.CREATE)
            self.state = 9942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9941
                self.or_replace()


            self.state = 9945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==665:
                self.state = 9944
                self.match(SnowflakeParser.SECURE)


            self.state = 9948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==578:
                self.state = 9947
                self.match(SnowflakeParser.RECURSIVE)


            self.state = 9950
            self.match(SnowflakeParser.VIEW)
            self.state = 9952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1259,self._ctx)
            if la_ == 1:
                self.state = 9951
                self.if_not_exists()


            self.state = 9954
            self.object_name()
            self.state = 9959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==931:
                self.state = 9955
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 9956
                self.column_list_with_comment()
                self.state = 9957
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 9964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1261,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9961
                    self.view_col() 
                self.state = 9966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1261,self._ctx)

            self.state = 9968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1262,self._ctx)
            if la_ == 1:
                self.state = 9967
                self.with_row_access_policy()


            self.state = 9971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==754 or _la==847:
                self.state = 9970
                self.with_tags()


            self.state = 9974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 9973
                self.copy_grants()


            self.state = 9977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 9976
                self.comment_clause()


            self.state = 9979
            self.match(SnowflakeParser.AS)
            self.state = 9980
            self.query_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_warehouseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SnowflakeParser.CREATE, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def id_fn(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_fnContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(SnowflakeParser.Or_replaceContext,0)


        def if_not_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_not_existsContext,0)


        def wh_params(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Wh_paramsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Wh_paramsContext,i)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def wh_properties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Wh_propertiesContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Wh_propertiesContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_create_warehouse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_warehouse" ):
                listener.enterCreate_warehouse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_warehouse" ):
                listener.exitCreate_warehouse(self)




    def create_warehouse(self):

        localctx = SnowflakeParser.Create_warehouseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_create_warehouse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9982
            self.match(SnowflakeParser.CREATE)
            self.state = 9984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==497:
                self.state = 9983
                self.or_replace()


            self.state = 9986
            self.match(SnowflakeParser.WAREHOUSE)
            self.state = 9988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1267,self._ctx)
            if la_ == 1:
                self.state = 9987
                self.if_not_exists()


            self.state = 9990
            self.id_fn()
            self.state = 9999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1270,self._ctx)
            if la_ == 1:
                self.state = 9992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==847:
                    self.state = 9991
                    self.match(SnowflakeParser.WITH)


                self.state = 9995 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9994
                        self.wh_properties()

                    else:
                        raise NoViableAltException(self)
                    self.state = 9997 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1269,self._ctx)



            self.state = 10004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==412 or _la==717 or _la==718:
                self.state = 10001
                self.wh_params()
                self.state = 10006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wh_common_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XSMALL(self):
            return self.getToken(SnowflakeParser.XSMALL, 0)

        def SMALL(self):
            return self.getToken(SnowflakeParser.SMALL, 0)

        def MEDIUM(self):
            return self.getToken(SnowflakeParser.MEDIUM, 0)

        def LARGE(self):
            return self.getToken(SnowflakeParser.LARGE, 0)

        def XLARGE(self):
            return self.getToken(SnowflakeParser.XLARGE, 0)

        def XXLARGE(self):
            return self.getToken(SnowflakeParser.XXLARGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_wh_common_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWh_common_size" ):
                listener.enterWh_common_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWh_common_size" ):
                listener.exitWh_common_size(self)




    def wh_common_size(self):

        localctx = SnowflakeParser.Wh_common_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_wh_common_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10007
            _la = self._input.LA(1)
            if not(_la==375 or _la==416 or _la==692 or ((((_la - 854)) & ~0x3f) == 0 and ((1 << (_la - 854)) & 25) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wh_extra_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XXXLARGE(self):
            return self.getToken(SnowflakeParser.XXXLARGE, 0)

        def X4LARGE(self):
            return self.getToken(SnowflakeParser.X4LARGE, 0)

        def X5LARGE(self):
            return self.getToken(SnowflakeParser.X5LARGE, 0)

        def X6LARGE(self):
            return self.getToken(SnowflakeParser.X6LARGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_wh_extra_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWh_extra_size" ):
                listener.enterWh_extra_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWh_extra_size" ):
                listener.exitWh_extra_size(self)




    def wh_extra_size(self):

        localctx = SnowflakeParser.Wh_extra_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_wh_extra_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10009
            _la = self._input.LA(1)
            if not(((((_la - 851)) & ~0x3f) == 0 and ((1 << (_la - 851)) & 263) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wh_propertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAREHOUSE_SIZE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE_SIZE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def wh_common_size(self):
            return self.getTypedRuleContext(SnowflakeParser.Wh_common_sizeContext,0)


        def wh_extra_size(self):
            return self.getTypedRuleContext(SnowflakeParser.Wh_extra_sizeContext,0)


        def ID2(self):
            return self.getToken(SnowflakeParser.ID2, 0)

        def WAREHOUSE_TYPE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE_TYPE, 0)

        def STANDARD(self):
            return self.getToken(SnowflakeParser.STANDARD, 0)

        def SNOWPARK_OPTIMIZED(self):
            return self.getToken(SnowflakeParser.SNOWPARK_OPTIMIZED, 0)

        def MAX_CLUSTER_COUNT(self):
            return self.getToken(SnowflakeParser.MAX_CLUSTER_COUNT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def MIN_CLUSTER_COUNT(self):
            return self.getToken(SnowflakeParser.MIN_CLUSTER_COUNT, 0)

        def SCALING_POLICY(self):
            return self.getToken(SnowflakeParser.SCALING_POLICY, 0)

        def ECONOMY(self):
            return self.getToken(SnowflakeParser.ECONOMY, 0)

        def AUTO_SUSPEND(self):
            return self.getToken(SnowflakeParser.AUTO_SUSPEND, 0)

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def AUTO_RESUME(self):
            return self.getToken(SnowflakeParser.AUTO_RESUME, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def INITIALLY_SUSPENDED(self):
            return self.getToken(SnowflakeParser.INITIALLY_SUSPENDED, 0)

        def RESOURCE_MONITOR(self):
            return self.getToken(SnowflakeParser.RESOURCE_MONITOR, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def comment_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Comment_clauseContext,0)


        def ENABLE_QUERY_ACCELERATION(self):
            return self.getToken(SnowflakeParser.ENABLE_QUERY_ACCELERATION, 0)

        def QUERY_ACCELERATION_MAX_SCALE_FACTOR(self):
            return self.getToken(SnowflakeParser.QUERY_ACCELERATION_MAX_SCALE_FACTOR, 0)

        def MAX_CONCURRENCY_LEVEL(self):
            return self.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_wh_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWh_properties" ):
                listener.enterWh_properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWh_properties" ):
                listener.exitWh_properties(self)




    def wh_properties(self):

        localctx = SnowflakeParser.Wh_propertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_wh_properties)
        self._la = 0 # Token type
        try:
            self.state = 10055
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [840]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10011
                self.match(SnowflakeParser.WAREHOUSE_SIZE)
                self.state = 10012
                self.match(SnowflakeParser.EQ)
                self.state = 10016
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [375, 416, 692, 854, 857, 858]:
                    self.state = 10013
                    self.wh_common_size()
                    pass
                elif token in [851, 852, 853, 859]:
                    self.state = 10014
                    self.wh_extra_size()
                    pass
                elif token in [905]:
                    self.state = 10015
                    self.match(SnowflakeParser.ID2)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [841]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10018
                self.match(SnowflakeParser.WAREHOUSE_TYPE)
                self.state = 10019
                self.match(SnowflakeParser.EQ)
                self.state = 10020
                _la = self._input.LA(1)
                if not(_la==697 or _la==710):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [411]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10021
                self.match(SnowflakeParser.MAX_CLUSTER_COUNT)
                self.state = 10022
                self.match(SnowflakeParser.EQ)
                self.state = 10023
                self.num()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10024
                self.match(SnowflakeParser.MIN_CLUSTER_COUNT)
                self.state = 10025
                self.match(SnowflakeParser.EQ)
                self.state = 10026
                self.num()
                pass
            elif token in [654]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10027
                self.match(SnowflakeParser.SCALING_POLICY)
                self.state = 10028
                self.match(SnowflakeParser.EQ)
                self.state = 10029
                _la = self._input.LA(1)
                if not(_la==210 or _la==710):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10030
                self.match(SnowflakeParser.AUTO_SUSPEND)
                self.state = 10034
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [921]:
                    self.state = 10031
                    self.match(SnowflakeParser.EQ)
                    self.state = 10032
                    self.num()
                    pass
                elif token in [458]:
                    self.state = 10033
                    self.match(SnowflakeParser.NULL_)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 7)
                self.state = 10036
                self.match(SnowflakeParser.AUTO_RESUME)
                self.state = 10037
                self.match(SnowflakeParser.EQ)
                self.state = 10038
                self.true_false()
                pass
            elif token in [347]:
                self.enterOuterAlt(localctx, 8)
                self.state = 10039
                self.match(SnowflakeParser.INITIALLY_SUSPENDED)
                self.state = 10040
                self.match(SnowflakeParser.EQ)
                self.state = 10041
                self.true_false()
                pass
            elif token in [604]:
                self.enterOuterAlt(localctx, 9)
                self.state = 10042
                self.match(SnowflakeParser.RESOURCE_MONITOR)
                self.state = 10043
                self.match(SnowflakeParser.EQ)
                self.state = 10044
                self.id_()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 10)
                self.state = 10045
                self.comment_clause()
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 11)
                self.state = 10046
                self.match(SnowflakeParser.ENABLE_QUERY_ACCELERATION)
                self.state = 10047
                self.match(SnowflakeParser.EQ)
                self.state = 10048
                self.true_false()
                pass
            elif token in [568]:
                self.enterOuterAlt(localctx, 12)
                self.state = 10049
                self.match(SnowflakeParser.QUERY_ACCELERATION_MAX_SCALE_FACTOR)
                self.state = 10050
                self.match(SnowflakeParser.EQ)
                self.state = 10051
                self.num()
                pass
            elif token in [412]:
                self.enterOuterAlt(localctx, 13)
                self.state = 10052
                self.match(SnowflakeParser.MAX_CONCURRENCY_LEVEL)
                self.state = 10053
                self.match(SnowflakeParser.EQ)
                self.state = 10054
                self.num()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wh_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_CONCURRENCY_LEVEL(self):
            return self.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def STATEMENT_QUEUED_TIMEOUT_IN_SECONDS(self):
            return self.getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0)

        def STATEMENT_TIMEOUT_IN_SECONDS(self):
            return self.getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0)

        def with_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.With_tagsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_wh_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWh_params" ):
                listener.enterWh_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWh_params" ):
                listener.exitWh_params(self)




    def wh_params(self):

        localctx = SnowflakeParser.Wh_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_wh_params)
        self._la = 0 # Token type
        try:
            self.state = 10069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [412]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10057
                self.match(SnowflakeParser.MAX_CONCURRENCY_LEVEL)
                self.state = 10058
                self.match(SnowflakeParser.EQ)
                self.state = 10059
                self.num()
                pass
            elif token in [717]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10060
                self.match(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS)
                self.state = 10061
                self.match(SnowflakeParser.EQ)
                self.state = 10062
                self.num()
                pass
            elif token in [718]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10063
                self.match(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS)
                self.state = 10064
                self.match(SnowflakeParser.EQ)
                self.state = 10065
                self.num()
                self.state = 10067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==754 or _la==847:
                    self.state = 10066
                    self.with_tags()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def PERCENT(self):
            return self.getToken(SnowflakeParser.PERCENT, 0)

        def DO(self):
            return self.getToken(SnowflakeParser.DO, 0)

        def SUSPEND(self):
            return self.getToken(SnowflakeParser.SUSPEND, 0)

        def SUSPEND_IMMEDIATE(self):
            return self.getToken(SnowflakeParser.SUSPEND_IMMEDIATE, 0)

        def NOTIFY(self):
            return self.getToken(SnowflakeParser.NOTIFY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_trigger_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_definition" ):
                listener.enterTrigger_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_definition" ):
                listener.exitTrigger_definition(self)




    def trigger_definition(self):

        localctx = SnowflakeParser.Trigger_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_trigger_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10071
            self.match(SnowflakeParser.ON)
            self.state = 10072
            self.num()
            self.state = 10073
            self.match(SnowflakeParser.PERCENT)
            self.state = 10074
            self.match(SnowflakeParser.DO)
            self.state = 10075
            _la = self._input.LA(1)
            if not(_la==452 or _la==738 or _la==740):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(SnowflakeParser.FORMAT, 0)

        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def PIPE(self):
            return self.getToken(SnowflakeParser.PIPE, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(SnowflakeParser.PROCEDURE, 0)

        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_name" ):
                listener.enterObject_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_name" ):
                listener.exitObject_type_name(self)




    def object_type_name(self):

        localctx = SnowflakeParser.Object_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_object_type_name)
        try:
            self.state = 10104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [620]:
                self.enterOuterAlt(localctx, 1)
                self.state = 10077
                self.match(SnowflakeParser.ROLE)
                pass
            elif token in [816]:
                self.enterOuterAlt(localctx, 2)
                self.state = 10078
                self.match(SnowflakeParser.USER)
                pass
            elif token in [838]:
                self.enterOuterAlt(localctx, 3)
                self.state = 10079
                self.match(SnowflakeParser.WAREHOUSE)
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 4)
                self.state = 10080
                self.match(SnowflakeParser.INTEGRATION)
                pass
            elif token in [438]:
                self.enterOuterAlt(localctx, 5)
                self.state = 10081
                self.match(SnowflakeParser.NETWORK)
                self.state = 10082
                self.match(SnowflakeParser.POLICY)
                pass
            elif token in [672]:
                self.enterOuterAlt(localctx, 6)
                self.state = 10083
                self.match(SnowflakeParser.SESSION)
                self.state = 10084
                self.match(SnowflakeParser.POLICY)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 7)
                self.state = 10085
                self.match(SnowflakeParser.DATABASE)
                pass
            elif token in [656]:
                self.enterOuterAlt(localctx, 8)
                self.state = 10086
                self.match(SnowflakeParser.SCHEMA)
                pass
            elif token in [747]:
                self.enterOuterAlt(localctx, 9)
                self.state = 10087
                self.match(SnowflakeParser.TABLE)
                pass
            elif token in [834]:
                self.enterOuterAlt(localctx, 10)
                self.state = 10088
                self.match(SnowflakeParser.VIEW)
                pass
            elif token in [706]:
                self.enterOuterAlt(localctx, 11)
                self.state = 10089
                self.match(SnowflakeParser.STAGE)
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 12)
                self.state = 10090
                self.match(SnowflakeParser.FILE)
                self.state = 10091
                self.match(SnowflakeParser.FORMAT)
                pass
            elif token in [728]:
                self.enterOuterAlt(localctx, 13)
                self.state = 10092
                self.match(SnowflakeParser.STREAM)
                pass
            elif token in [757]:
                self.enterOuterAlt(localctx, 14)
                self.state = 10093
                self.match(SnowflakeParser.TASK)
                pass
            elif token in [402]:
                self.enterOuterAlt(localctx, 15)
                self.state = 10094
                self.match(SnowflakeParser.MASKING)
                self.state = 10095
                self.match(SnowflakeParser.POLICY)
                pass
            elif token in [626]:
                self.enterOuterAlt(localctx, 16)
                self.state = 10096
                self.match(SnowflakeParser.ROW)
                self.state = 10097
                self.match(SnowflakeParser.ACCESS)
                self.state = 10098
                self.match(SnowflakeParser.POLICY)
                pass
            elif token in [754]:
                self.enterOuterAlt(localctx, 17)
                self.state = 10099
                self.match(SnowflakeParser.TAG)
                pass
            elif token in [539]:
                self.enterOuterAlt(localctx, 18)
                self.state = 10100
                self.match(SnowflakeParser.PIPE)
                pass
            elif token in [287]:
                self.enterOuterAlt(localctx, 19)
                self.state = 10101
                self.match(SnowflakeParser.FUNCTION)
                pass
            elif token in [555]:
                self.enterOuterAlt(localctx, 20)
                self.state = 10102
                self.match(SnowflakeParser.PROCEDURE)
                pass
            elif token in [670]:
                self.enterOuterAlt(localctx, 21)
                self.state = 10103
                self.match(SnowflakeParser.SEQUENCE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_pluralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALERTS(self):
            return self.getToken(SnowflakeParser.ALERTS, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def INTEGRATIONS(self):
            return self.getToken(SnowflakeParser.INTEGRATIONS, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def ROLES(self):
            return self.getToken(SnowflakeParser.ROLES, 0)

        def SCHEMAS(self):
            return self.getToken(SnowflakeParser.SCHEMAS, 0)

        def STAGES(self):
            return self.getToken(SnowflakeParser.STAGES, 0)

        def STREAMS(self):
            return self.getToken(SnowflakeParser.STREAMS, 0)

        def TABLES(self):
            return self.getToken(SnowflakeParser.TABLES, 0)

        def TAGS(self):
            return self.getToken(SnowflakeParser.TAGS, 0)

        def TASKS(self):
            return self.getToken(SnowflakeParser.TASKS, 0)

        def USERS(self):
            return self.getToken(SnowflakeParser.USERS, 0)

        def VIEWS(self):
            return self.getToken(SnowflakeParser.VIEWS, 0)

        def WAREHOUSES(self):
            return self.getToken(SnowflakeParser.WAREHOUSES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_type_plural

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_plural" ):
                listener.enterObject_type_plural(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_plural" ):
                listener.exitObject_type_plural(self)




    def object_type_plural(self):

        localctx = SnowflakeParser.Object_type_pluralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_object_type_plural)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10106
            _la = self._input.LA(1)
            if not(_la==16 or _la==170 or _la==355 or _la==543 or _la==621 or _la==657 or ((((_la - 707)) & ~0x3f) == 0 and ((1 << (_la - 707)) & 2542070887612417) != 0) or ((((_la - 818)) & ~0x3f) == 0 and ((1 << (_la - 818)) & 2228225) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_object(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_objectContext,0)


        def drop_alert(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_alertContext,0)


        def drop_connection(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_connectionContext,0)


        def drop_database(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_databaseContext,0)


        def drop_dynamic_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_dynamic_tableContext,0)


        def drop_external_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_external_tableContext,0)


        def drop_failover_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_failover_groupContext,0)


        def drop_file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_file_formatContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_functionContext,0)


        def drop_git_repository(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_git_repositoryContext,0)


        def drop_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_integrationContext,0)


        def drop_managed_account(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_managed_accountContext,0)


        def drop_masking_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_masking_policyContext,0)


        def drop_materialized_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_materialized_viewContext,0)


        def drop_network_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_network_policyContext,0)


        def drop_password_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_password_policyContext,0)


        def drop_pipe(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_pipeContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_procedureContext,0)


        def drop_replication_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_replication_groupContext,0)


        def drop_resource_monitor(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_resource_monitorContext,0)


        def drop_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_roleContext,0)


        def drop_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_row_access_policyContext,0)


        def drop_schema(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_schemaContext,0)


        def drop_secret(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_secretContext,0)


        def drop_sequence(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_sequenceContext,0)


        def drop_session_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_session_policyContext,0)


        def drop_share(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_shareContext,0)


        def drop_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_stageContext,0)


        def drop_stream(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_streamContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_tableContext,0)


        def drop_tag(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_tagContext,0)


        def drop_task(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_taskContext,0)


        def drop_user(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_userContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_viewContext,0)


        def drop_warehouse(self):
            return self.getTypedRuleContext(SnowflakeParser.Drop_warehouseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_command" ):
                listener.enterDrop_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_command" ):
                listener.exitDrop_command(self)




    def drop_command(self):

        localctx = SnowflakeParser.Drop_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_drop_command)
        try:
            self.state = 10143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10108
                self.drop_object()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10109
                self.drop_alert()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10110
                self.drop_connection()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10111
                self.drop_database()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10112
                self.drop_dynamic_table()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10113
                self.drop_external_table()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10114
                self.drop_failover_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10115
                self.drop_file_format()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10116
                self.drop_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10117
                self.drop_git_repository()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10118
                self.drop_integration()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 10119
                self.drop_managed_account()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 10120
                self.drop_masking_policy()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 10121
                self.drop_materialized_view()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 10122
                self.drop_network_policy()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 10123
                self.drop_password_policy()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 10124
                self.drop_pipe()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 10125
                self.drop_procedure()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 10126
                self.drop_replication_group()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 10127
                self.drop_resource_monitor()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 10128
                self.drop_role()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 10129
                self.drop_row_access_policy()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 10130
                self.drop_schema()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 10131
                self.drop_secret()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 10132
                self.drop_sequence()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 10133
                self.drop_session_policy()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 10134
                self.drop_share()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 10135
                self.drop_stage()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 10136
                self.drop_stream()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 10137
                self.drop_table()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 10138
                self.drop_tag()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 10139
                self.drop_task()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 10140
                self.drop_user()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 10141
                self.drop_view()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 10142
                self.drop_warehouse()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def object_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_typeContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_object" ):
                listener.enterDrop_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_object" ):
                listener.exitDrop_object(self)




    def drop_object(self):

        localctx = SnowflakeParser.Drop_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_drop_object)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10145
            self.match(SnowflakeParser.DROP)
            self.state = 10146
            self.object_type()
            self.state = 10147
            self.if_exists()
            self.state = 10148
            self.id_()
            self.state = 10150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==607:
                self.state = 10149
                self.cascade_restrict()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_alertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def ALERT(self):
            return self.getToken(SnowflakeParser.ALERT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_alert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_alert" ):
                listener.enterDrop_alert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_alert" ):
                listener.exitDrop_alert(self)




    def drop_alert(self):

        localctx = SnowflakeParser.Drop_alertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_drop_alert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10152
            self.match(SnowflakeParser.DROP)
            self.state = 10153
            self.match(SnowflakeParser.ALERT)
            self.state = 10154
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_connectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def CONNECTION(self):
            return self.getToken(SnowflakeParser.CONNECTION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_connection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_connection" ):
                listener.enterDrop_connection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_connection" ):
                listener.exitDrop_connection(self)




    def drop_connection(self):

        localctx = SnowflakeParser.Drop_connectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_drop_connection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10156
            self.match(SnowflakeParser.DROP)
            self.state = 10157
            self.match(SnowflakeParser.CONNECTION)
            self.state = 10159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1280,self._ctx)
            if la_ == 1:
                self.state = 10158
                self.if_exists()


            self.state = 10161
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database" ):
                listener.enterDrop_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database" ):
                listener.exitDrop_database(self)




    def drop_database(self):

        localctx = SnowflakeParser.Drop_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_drop_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10163
            self.match(SnowflakeParser.DROP)
            self.state = 10164
            self.match(SnowflakeParser.DATABASE)
            self.state = 10166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1281,self._ctx)
            if la_ == 1:
                self.state = 10165
                self.if_exists()


            self.state = 10168
            self.id_()
            self.state = 10170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==607:
                self.state = 10169
                self.cascade_restrict()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_dynamic_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def DYNAMIC(self):
            return self.getToken(SnowflakeParser.DYNAMIC, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_dynamic_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_dynamic_table" ):
                listener.enterDrop_dynamic_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_dynamic_table" ):
                listener.exitDrop_dynamic_table(self)




    def drop_dynamic_table(self):

        localctx = SnowflakeParser.Drop_dynamic_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_drop_dynamic_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10172
            self.match(SnowflakeParser.DROP)
            self.state = 10173
            self.match(SnowflakeParser.DYNAMIC)
            self.state = 10174
            self.match(SnowflakeParser.TABLE)
            self.state = 10175
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_external_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_external_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_external_table" ):
                listener.enterDrop_external_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_external_table" ):
                listener.exitDrop_external_table(self)




    def drop_external_table(self):

        localctx = SnowflakeParser.Drop_external_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_drop_external_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10177
            self.match(SnowflakeParser.DROP)
            self.state = 10178
            self.match(SnowflakeParser.EXTERNAL)
            self.state = 10179
            self.match(SnowflakeParser.TABLE)
            self.state = 10181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1283,self._ctx)
            if la_ == 1:
                self.state = 10180
                self.if_exists()


            self.state = 10183
            self.object_name()
            self.state = 10185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==607:
                self.state = 10184
                self.cascade_restrict()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_failover_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def FAILOVER(self):
            return self.getToken(SnowflakeParser.FAILOVER, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_failover_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_failover_group" ):
                listener.enterDrop_failover_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_failover_group" ):
                listener.exitDrop_failover_group(self)




    def drop_failover_group(self):

        localctx = SnowflakeParser.Drop_failover_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_drop_failover_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10187
            self.match(SnowflakeParser.DROP)
            self.state = 10188
            self.match(SnowflakeParser.FAILOVER)
            self.state = 10189
            self.match(SnowflakeParser.GROUP)
            self.state = 10191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1285,self._ctx)
            if la_ == 1:
                self.state = 10190
                self.if_exists()


            self.state = 10193
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_file_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(SnowflakeParser.FORMAT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_file_format" ):
                listener.enterDrop_file_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_file_format" ):
                listener.exitDrop_file_format(self)




    def drop_file_format(self):

        localctx = SnowflakeParser.Drop_file_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_drop_file_format)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10195
            self.match(SnowflakeParser.DROP)
            self.state = 10196
            self.match(SnowflakeParser.FILE)
            self.state = 10197
            self.match(SnowflakeParser.FORMAT)
            self.state = 10199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1286,self._ctx)
            if la_ == 1:
                self.state = 10198
                self.if_exists()


            self.state = 10201
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def arg_types(self):
            return self.getTypedRuleContext(SnowflakeParser.Arg_typesContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)




    def drop_function(self):

        localctx = SnowflakeParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_drop_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10203
            self.match(SnowflakeParser.DROP)
            self.state = 10204
            self.match(SnowflakeParser.FUNCTION)
            self.state = 10206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1287,self._ctx)
            if la_ == 1:
                self.state = 10205
                self.if_exists()


            self.state = 10208
            self.object_name()
            self.state = 10209
            self.arg_types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_git_repositoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None # Object_nameContext

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def GIT(self):
            return self.getToken(SnowflakeParser.GIT, 0)

        def REPOSITORY(self):
            return self.getToken(SnowflakeParser.REPOSITORY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_git_repository

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_git_repository" ):
                listener.enterDrop_git_repository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_git_repository" ):
                listener.exitDrop_git_repository(self)




    def drop_git_repository(self):

        localctx = SnowflakeParser.Drop_git_repositoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_drop_git_repository)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10211
            self.match(SnowflakeParser.DROP)
            self.state = 10212
            self.match(SnowflakeParser.GIT)
            self.state = 10213
            self.match(SnowflakeParser.REPOSITORY)
            self.state = 10215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1288,self._ctx)
            if la_ == 1:
                self.state = 10214
                self.if_exists()


            self.state = 10217
            localctx.r = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def API(self):
            return self.getToken(SnowflakeParser.API, 0)

        def NOTIFICATION(self):
            return self.getToken(SnowflakeParser.NOTIFICATION, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def STORAGE(self):
            return self.getToken(SnowflakeParser.STORAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_integration" ):
                listener.enterDrop_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_integration" ):
                listener.exitDrop_integration(self)




    def drop_integration(self):

        localctx = SnowflakeParser.Drop_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_drop_integration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10219
            self.match(SnowflakeParser.DROP)
            self.state = 10221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32 or _la==449 or _la==666 or _la==721:
                self.state = 10220
                _la = self._input.LA(1)
                if not(_la==32 or _la==449 or _la==666 or _la==721):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 10223
            self.match(SnowflakeParser.INTEGRATION)
            self.state = 10225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1290,self._ctx)
            if la_ == 1:
                self.state = 10224
                self.if_exists()


            self.state = 10227
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_managed_accountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def MANAGED(self):
            return self.getToken(SnowflakeParser.MANAGED, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_managed_account

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_managed_account" ):
                listener.enterDrop_managed_account(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_managed_account" ):
                listener.exitDrop_managed_account(self)




    def drop_managed_account(self):

        localctx = SnowflakeParser.Drop_managed_accountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_drop_managed_account)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10229
            self.match(SnowflakeParser.DROP)
            self.state = 10230
            self.match(SnowflakeParser.MANAGED)
            self.state = 10231
            self.match(SnowflakeParser.ACCOUNT)
            self.state = 10232
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_masking_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_masking_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_masking_policy" ):
                listener.enterDrop_masking_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_masking_policy" ):
                listener.exitDrop_masking_policy(self)




    def drop_masking_policy(self):

        localctx = SnowflakeParser.Drop_masking_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_drop_masking_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10234
            self.match(SnowflakeParser.DROP)
            self.state = 10235
            self.match(SnowflakeParser.MASKING)
            self.state = 10236
            self.match(SnowflakeParser.POLICY)
            self.state = 10237
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_materialized_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def MATERIALIZED(self):
            return self.getToken(SnowflakeParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_materialized_view" ):
                listener.enterDrop_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_materialized_view" ):
                listener.exitDrop_materialized_view(self)




    def drop_materialized_view(self):

        localctx = SnowflakeParser.Drop_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_drop_materialized_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10239
            self.match(SnowflakeParser.DROP)
            self.state = 10240
            self.match(SnowflakeParser.MATERIALIZED)
            self.state = 10241
            self.match(SnowflakeParser.VIEW)
            self.state = 10243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1291,self._ctx)
            if la_ == 1:
                self.state = 10242
                self.if_exists()


            self.state = 10245
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_network_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_network_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_network_policy" ):
                listener.enterDrop_network_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_network_policy" ):
                listener.exitDrop_network_policy(self)




    def drop_network_policy(self):

        localctx = SnowflakeParser.Drop_network_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_drop_network_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10247
            self.match(SnowflakeParser.DROP)
            self.state = 10248
            self.match(SnowflakeParser.NETWORK)
            self.state = 10249
            self.match(SnowflakeParser.POLICY)
            self.state = 10251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1292,self._ctx)
            if la_ == 1:
                self.state = 10250
                self.if_exists()


            self.state = 10253
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_pipeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def PIPE(self):
            return self.getToken(SnowflakeParser.PIPE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_pipe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_pipe" ):
                listener.enterDrop_pipe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_pipe" ):
                listener.exitDrop_pipe(self)




    def drop_pipe(self):

        localctx = SnowflakeParser.Drop_pipeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_drop_pipe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10255
            self.match(SnowflakeParser.DROP)
            self.state = 10256
            self.match(SnowflakeParser.PIPE)
            self.state = 10258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1293,self._ctx)
            if la_ == 1:
                self.state = 10257
                self.if_exists()


            self.state = 10260
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(SnowflakeParser.PROCEDURE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def arg_types(self):
            return self.getTypedRuleContext(SnowflakeParser.Arg_typesContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)




    def drop_procedure(self):

        localctx = SnowflakeParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_drop_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10262
            self.match(SnowflakeParser.DROP)
            self.state = 10263
            self.match(SnowflakeParser.PROCEDURE)
            self.state = 10265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1294,self._ctx)
            if la_ == 1:
                self.state = 10264
                self.if_exists()


            self.state = 10267
            self.object_name()
            self.state = 10268
            self.arg_types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_replication_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_replication_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_replication_group" ):
                listener.enterDrop_replication_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_replication_group" ):
                listener.exitDrop_replication_group(self)




    def drop_replication_group(self):

        localctx = SnowflakeParser.Drop_replication_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_drop_replication_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10270
            self.match(SnowflakeParser.DROP)
            self.state = 10271
            self.match(SnowflakeParser.REPLICATION)
            self.state = 10272
            self.match(SnowflakeParser.GROUP)
            self.state = 10274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1295,self._ctx)
            if la_ == 1:
                self.state = 10273
                self.if_exists()


            self.state = 10276
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_resource_monitorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def MONITOR(self):
            return self.getToken(SnowflakeParser.MONITOR, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_resource_monitor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_resource_monitor" ):
                listener.enterDrop_resource_monitor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_resource_monitor" ):
                listener.exitDrop_resource_monitor(self)




    def drop_resource_monitor(self):

        localctx = SnowflakeParser.Drop_resource_monitorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_drop_resource_monitor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10278
            self.match(SnowflakeParser.DROP)
            self.state = 10279
            self.match(SnowflakeParser.RESOURCE)
            self.state = 10280
            self.match(SnowflakeParser.MONITOR)
            self.state = 10281
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_role" ):
                listener.enterDrop_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_role" ):
                listener.exitDrop_role(self)




    def drop_role(self):

        localctx = SnowflakeParser.Drop_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_drop_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10283
            self.match(SnowflakeParser.DROP)
            self.state = 10284
            self.match(SnowflakeParser.ROLE)
            self.state = 10286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1296,self._ctx)
            if la_ == 1:
                self.state = 10285
                self.if_exists()


            self.state = 10288
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_row_access_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_row_access_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_row_access_policy" ):
                listener.enterDrop_row_access_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_row_access_policy" ):
                listener.exitDrop_row_access_policy(self)




    def drop_row_access_policy(self):

        localctx = SnowflakeParser.Drop_row_access_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_drop_row_access_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10290
            self.match(SnowflakeParser.DROP)
            self.state = 10291
            self.match(SnowflakeParser.ROW)
            self.state = 10292
            self.match(SnowflakeParser.ACCESS)
            self.state = 10293
            self.match(SnowflakeParser.POLICY)
            self.state = 10295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1297,self._ctx)
            if la_ == 1:
                self.state = 10294
                self.if_exists()


            self.state = 10297
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_schema" ):
                listener.enterDrop_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_schema" ):
                listener.exitDrop_schema(self)




    def drop_schema(self):

        localctx = SnowflakeParser.Drop_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_drop_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10299
            self.match(SnowflakeParser.DROP)
            self.state = 10300
            self.match(SnowflakeParser.SCHEMA)
            self.state = 10302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1298,self._ctx)
            if la_ == 1:
                self.state = 10301
                self.if_exists()


            self.state = 10304
            self.schema_name()
            self.state = 10306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==607:
                self.state = 10305
                self.cascade_restrict()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_secretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def SECRET(self):
            return self.getToken(SnowflakeParser.SECRET, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_secret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_secret" ):
                listener.enterDrop_secret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_secret" ):
                listener.exitDrop_secret(self)




    def drop_secret(self):

        localctx = SnowflakeParser.Drop_secretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_drop_secret)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10308
            self.match(SnowflakeParser.DROP)
            self.state = 10309
            self.match(SnowflakeParser.SECRET)
            self.state = 10311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1300,self._ctx)
            if la_ == 1:
                self.state = 10310
                self.if_exists()


            self.state = 10313
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_sequence" ):
                listener.enterDrop_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_sequence" ):
                listener.exitDrop_sequence(self)




    def drop_sequence(self):

        localctx = SnowflakeParser.Drop_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_drop_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10315
            self.match(SnowflakeParser.DROP)
            self.state = 10316
            self.match(SnowflakeParser.SEQUENCE)
            self.state = 10318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1301,self._ctx)
            if la_ == 1:
                self.state = 10317
                self.if_exists()


            self.state = 10320
            self.object_name()
            self.state = 10322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==607:
                self.state = 10321
                self.cascade_restrict()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_session_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_session_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_session_policy" ):
                listener.enterDrop_session_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_session_policy" ):
                listener.exitDrop_session_policy(self)




    def drop_session_policy(self):

        localctx = SnowflakeParser.Drop_session_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_drop_session_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10324
            self.match(SnowflakeParser.DROP)
            self.state = 10325
            self.match(SnowflakeParser.SESSION)
            self.state = 10326
            self.match(SnowflakeParser.POLICY)
            self.state = 10328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1303,self._ctx)
            if la_ == 1:
                self.state = 10327
                self.if_exists()


            self.state = 10330
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_password_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_password_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_password_policy" ):
                listener.enterDrop_password_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_password_policy" ):
                listener.exitDrop_password_policy(self)




    def drop_password_policy(self):

        localctx = SnowflakeParser.Drop_password_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_drop_password_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10332
            self.match(SnowflakeParser.DROP)
            self.state = 10333
            self.match(SnowflakeParser.PASSWORD)
            self.state = 10334
            self.match(SnowflakeParser.POLICY)
            self.state = 10336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1304,self._ctx)
            if la_ == 1:
                self.state = 10335
                self.if_exists()


            self.state = 10338
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_share" ):
                listener.enterDrop_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_share" ):
                listener.exitDrop_share(self)




    def drop_share(self):

        localctx = SnowflakeParser.Drop_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_drop_share)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10340
            self.match(SnowflakeParser.DROP)
            self.state = 10341
            self.match(SnowflakeParser.SHARE)
            self.state = 10342
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_streamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_stream

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stream" ):
                listener.enterDrop_stream(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stream" ):
                listener.exitDrop_stream(self)




    def drop_stream(self):

        localctx = SnowflakeParser.Drop_streamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_drop_stream)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10344
            self.match(SnowflakeParser.DROP)
            self.state = 10345
            self.match(SnowflakeParser.STREAM)
            self.state = 10347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1305,self._ctx)
            if la_ == 1:
                self.state = 10346
                self.if_exists()


            self.state = 10349
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def cascade_restrict(self):
            return self.getTypedRuleContext(SnowflakeParser.Cascade_restrictContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)




    def drop_table(self):

        localctx = SnowflakeParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10351
            self.match(SnowflakeParser.DROP)
            self.state = 10352
            self.match(SnowflakeParser.TABLE)
            self.state = 10354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1306,self._ctx)
            if la_ == 1:
                self.state = 10353
                self.if_exists()


            self.state = 10356
            self.object_name()
            self.state = 10358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==607:
                self.state = 10357
                self.cascade_restrict()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_tag" ):
                listener.enterDrop_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_tag" ):
                listener.exitDrop_tag(self)




    def drop_tag(self):

        localctx = SnowflakeParser.Drop_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_drop_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10360
            self.match(SnowflakeParser.DROP)
            self.state = 10361
            self.match(SnowflakeParser.TAG)
            self.state = 10363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1308,self._ctx)
            if la_ == 1:
                self.state = 10362
                self.if_exists()


            self.state = 10365
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_taskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_task" ):
                listener.enterDrop_task(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_task" ):
                listener.exitDrop_task(self)




    def drop_task(self):

        localctx = SnowflakeParser.Drop_taskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_drop_task)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10367
            self.match(SnowflakeParser.DROP)
            self.state = 10368
            self.match(SnowflakeParser.TASK)
            self.state = 10370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1309,self._ctx)
            if la_ == 1:
                self.state = 10369
                self.if_exists()


            self.state = 10372
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_userContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_user" ):
                listener.enterDrop_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_user" ):
                listener.exitDrop_user(self)




    def drop_user(self):

        localctx = SnowflakeParser.Drop_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_drop_user)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10374
            self.match(SnowflakeParser.DROP)
            self.state = 10375
            self.match(SnowflakeParser.USER)
            self.state = 10377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1310,self._ctx)
            if la_ == 1:
                self.state = 10376
                self.if_exists()


            self.state = 10379
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)




    def drop_view(self):

        localctx = SnowflakeParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_drop_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10381
            self.match(SnowflakeParser.DROP)
            self.state = 10382
            self.match(SnowflakeParser.VIEW)
            self.state = 10384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1311,self._ctx)
            if la_ == 1:
                self.state = 10383
                self.if_exists()


            self.state = 10386
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_warehouseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SnowflakeParser.DROP, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def id_fn(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_fnContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(SnowflakeParser.If_existsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_drop_warehouse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_warehouse" ):
                listener.enterDrop_warehouse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_warehouse" ):
                listener.exitDrop_warehouse(self)




    def drop_warehouse(self):

        localctx = SnowflakeParser.Drop_warehouseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_drop_warehouse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10388
            self.match(SnowflakeParser.DROP)
            self.state = 10389
            self.match(SnowflakeParser.WAREHOUSE)
            self.state = 10391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1312,self._ctx)
            if la_ == 1:
                self.state = 10390
                self.if_exists()


            self.state = 10393
            self.id_fn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cascade_restrictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASCADE(self):
            return self.getToken(SnowflakeParser.CASCADE, 0)

        def RESTRICT(self):
            return self.getToken(SnowflakeParser.RESTRICT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_cascade_restrict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCascade_restrict" ):
                listener.enterCascade_restrict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCascade_restrict" ):
                listener.exitCascade_restrict(self)




    def cascade_restrict(self):

        localctx = SnowflakeParser.Cascade_restrictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_cascade_restrict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10395
            _la = self._input.LA(1)
            if not(_la==104 or _la==607):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_typesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def data_type_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_type_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_arg_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_types" ):
                listener.enterArg_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_types" ):
                listener.exitArg_types(self)




    def arg_types(self):

        localctx = SnowflakeParser.Arg_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_arg_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10397
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 10399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113 or _la==114 or _la==353 or _la==460 or _la==477 or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 8841) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 4294934525) != 0):
                self.state = 10398
                self.data_type_list()


            self.state = 10401
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Undrop_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def undrop_database(self):
            return self.getTypedRuleContext(SnowflakeParser.Undrop_databaseContext,0)


        def undrop_schema(self):
            return self.getTypedRuleContext(SnowflakeParser.Undrop_schemaContext,0)


        def undrop_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Undrop_tableContext,0)


        def undrop_tag(self):
            return self.getTypedRuleContext(SnowflakeParser.Undrop_tagContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_undrop_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndrop_command" ):
                listener.enterUndrop_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndrop_command" ):
                listener.exitUndrop_command(self)




    def undrop_command(self):

        localctx = SnowflakeParser.Undrop_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_undrop_command)
        try:
            self.state = 10407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10403
                self.undrop_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10404
                self.undrop_schema()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10405
                self.undrop_table()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10406
                self.undrop_tag()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Undrop_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDROP(self):
            return self.getToken(SnowflakeParser.UNDROP, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_undrop_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndrop_database" ):
                listener.enterUndrop_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndrop_database" ):
                listener.exitUndrop_database(self)




    def undrop_database(self):

        localctx = SnowflakeParser.Undrop_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_undrop_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10409
            self.match(SnowflakeParser.UNDROP)
            self.state = 10410
            self.match(SnowflakeParser.DATABASE)
            self.state = 10411
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Undrop_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDROP(self):
            return self.getToken(SnowflakeParser.UNDROP, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_undrop_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndrop_schema" ):
                listener.enterUndrop_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndrop_schema" ):
                listener.exitUndrop_schema(self)




    def undrop_schema(self):

        localctx = SnowflakeParser.Undrop_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_undrop_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10413
            self.match(SnowflakeParser.UNDROP)
            self.state = 10414
            self.match(SnowflakeParser.SCHEMA)
            self.state = 10415
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Undrop_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDROP(self):
            return self.getToken(SnowflakeParser.UNDROP, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_undrop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndrop_table" ):
                listener.enterUndrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndrop_table" ):
                listener.exitUndrop_table(self)




    def undrop_table(self):

        localctx = SnowflakeParser.Undrop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_undrop_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10417
            self.match(SnowflakeParser.UNDROP)
            self.state = 10418
            self.match(SnowflakeParser.TABLE)
            self.state = 10419
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Undrop_tagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDROP(self):
            return self.getToken(SnowflakeParser.UNDROP, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_undrop_tag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndrop_tag" ):
                listener.enterUndrop_tag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndrop_tag" ):
                listener.exitUndrop_tag(self)




    def undrop_tag(self):

        localctx = SnowflakeParser.Undrop_tagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_undrop_tag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10421
            self.match(SnowflakeParser.UNDROP)
            self.state = 10422
            self.match(SnowflakeParser.TAG)
            self.state = 10423
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def use_database(self):
            return self.getTypedRuleContext(SnowflakeParser.Use_databaseContext,0)


        def use_role(self):
            return self.getTypedRuleContext(SnowflakeParser.Use_roleContext,0)


        def use_schema(self):
            return self.getTypedRuleContext(SnowflakeParser.Use_schemaContext,0)


        def use_secondary_roles(self):
            return self.getTypedRuleContext(SnowflakeParser.Use_secondary_rolesContext,0)


        def use_warehouse(self):
            return self.getTypedRuleContext(SnowflakeParser.Use_warehouseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_use_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_command" ):
                listener.enterUse_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_command" ):
                listener.exitUse_command(self)




    def use_command(self):

        localctx = SnowflakeParser.Use_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_use_command)
        try:
            self.state = 10430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10425
                self.use_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10426
                self.use_role()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10427
                self.use_schema()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10428
                self.use_secondary_roles()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10429
                self.use_warehouse()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SnowflakeParser.USE, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_use_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_database" ):
                listener.enterUse_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_database" ):
                listener.exitUse_database(self)




    def use_database(self):

        localctx = SnowflakeParser.Use_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_use_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10432
            self.match(SnowflakeParser.USE)
            self.state = 10433
            self.match(SnowflakeParser.DATABASE)
            self.state = 10434
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_roleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SnowflakeParser.USE, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_use_role

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_role" ):
                listener.enterUse_role(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_role" ):
                listener.exitUse_role(self)




    def use_role(self):

        localctx = SnowflakeParser.Use_roleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_use_role)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10436
            self.match(SnowflakeParser.USE)
            self.state = 10437
            self.match(SnowflakeParser.ROLE)
            self.state = 10438
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SnowflakeParser.USE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_use_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_schema" ):
                listener.enterUse_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_schema" ):
                listener.exitUse_schema(self)




    def use_schema(self):

        localctx = SnowflakeParser.Use_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_use_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10440
            self.match(SnowflakeParser.USE)
            self.state = 10442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==656:
                self.state = 10441
                self.match(SnowflakeParser.SCHEMA)


            self.state = 10447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1317,self._ctx)
            if la_ == 1:
                self.state = 10444
                self.id_()
                self.state = 10445
                self.match(SnowflakeParser.DOT)


            self.state = 10449
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_secondary_rolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SnowflakeParser.USE, 0)

        def SECONDARY(self):
            return self.getToken(SnowflakeParser.SECONDARY, 0)

        def ROLES(self):
            return self.getToken(SnowflakeParser.ROLES, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def NONE(self):
            return self.getToken(SnowflakeParser.NONE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_use_secondary_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_secondary_roles" ):
                listener.enterUse_secondary_roles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_secondary_roles" ):
                listener.exitUse_secondary_roles(self)




    def use_secondary_roles(self):

        localctx = SnowflakeParser.Use_secondary_rolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_use_secondary_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10451
            self.match(SnowflakeParser.USE)
            self.state = 10452
            self.match(SnowflakeParser.SECONDARY)
            self.state = 10453
            self.match(SnowflakeParser.ROLES)
            self.state = 10454
            _la = self._input.LA(1)
            if not(_la==17 or _la==444):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_warehouseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SnowflakeParser.USE, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def id_fn(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_fnContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_use_warehouse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_warehouse" ):
                listener.enterUse_warehouse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_warehouse" ):
                listener.exitUse_warehouse(self)




    def use_warehouse(self):

        localctx = SnowflakeParser.Use_warehouseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_use_warehouse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10456
            self.match(SnowflakeParser.USE)
            self.state = 10457
            self.match(SnowflakeParser.WAREHOUSE)
            self.state = 10458
            self.id_fn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_comment_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_clause" ):
                listener.enterComment_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_clause" ):
                listener.exitComment_clause(self)




    def comment_clause(self):

        localctx = SnowflakeParser.Comment_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_comment_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10460
            self.match(SnowflakeParser.COMMENT)
            self.state = 10461
            self.match(SnowflakeParser.EQ)
            self.state = 10462
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_comment_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_inline_comment_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_comment_clause" ):
                listener.enterInline_comment_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_comment_clause" ):
                listener.exitInline_comment_clause(self)




    def inline_comment_clause(self):

        localctx = SnowflakeParser.Inline_comment_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_inline_comment_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10464
            self.match(SnowflakeParser.COMMENT)
            self.state = 10465
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_suspendedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SnowflakeParser.IF, 0)

        def SUSPENDED(self):
            return self.getToken(SnowflakeParser.SUSPENDED, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_if_suspended

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_suspended" ):
                listener.enterIf_suspended(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_suspended" ):
                listener.exitIf_suspended(self)




    def if_suspended(self):

        localctx = SnowflakeParser.If_suspendedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_if_suspended)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10467
            self.match(SnowflakeParser.IF)
            self.state = 10468
            self.match(SnowflakeParser.SUSPENDED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_existsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SnowflakeParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SnowflakeParser.EXISTS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_if_exists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_exists" ):
                listener.enterIf_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_exists" ):
                listener.exitIf_exists(self)




    def if_exists(self):

        localctx = SnowflakeParser.If_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_if_exists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10470
            self.match(SnowflakeParser.IF)
            self.state = 10471
            self.match(SnowflakeParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_not_existsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SnowflakeParser.IF, 0)

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SnowflakeParser.EXISTS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_if_not_exists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_not_exists" ):
                listener.enterIf_not_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_not_exists" ):
                listener.exitIf_not_exists(self)




    def if_not_exists(self):

        localctx = SnowflakeParser.If_not_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_if_not_exists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10473
            self.match(SnowflakeParser.IF)
            self.state = 10474
            self.match(SnowflakeParser.NOT)
            self.state = 10475
            self.match(SnowflakeParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_replaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SnowflakeParser.OR, 0)

        def REPLACE(self):
            return self.getToken(SnowflakeParser.REPLACE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_or_replace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_replace" ):
                listener.enterOr_replace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_replace" ):
                listener.exitOr_replace(self)




    def or_replace(self):

        localctx = SnowflakeParser.Or_replaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_or_replace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10477
            self.match(SnowflakeParser.OR)
            self.state = 10478
            self.match(SnowflakeParser.REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_alterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(SnowflakeParser.OR, 0)

        def ALTER(self):
            return self.getToken(SnowflakeParser.ALTER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_or_alter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_alter" ):
                listener.enterOr_alter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_alter" ):
                listener.exitOr_alter(self)




    def or_alter(self):

        localctx = SnowflakeParser.Or_alterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_or_alter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10480
            self.match(SnowflakeParser.OR)
            self.state = 10481
            self.match(SnowflakeParser.ALTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESC(self):
            return self.getToken(SnowflakeParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(SnowflakeParser.DESCRIBE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe" ):
                listener.enterDescribe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe" ):
                listener.exitDescribe(self)




    def describe(self):

        localctx = SnowflakeParser.DescribeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_describe)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10483
            _la = self._input.LA(1)
            if not(_la==196 or _la==197):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe_alert(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_alertContext,0)


        def describe_database(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_databaseContext,0)


        def describe_dynamic_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_dynamic_tableContext,0)


        def describe_event_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_event_tableContext,0)


        def describe_external_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_external_tableContext,0)


        def describe_file_format(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_file_formatContext,0)


        def describe_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_functionContext,0)


        def describe_git_repository(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_git_repositoryContext,0)


        def describe_integration(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_integrationContext,0)


        def describe_masking_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_masking_policyContext,0)


        def describe_materialized_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_materialized_viewContext,0)


        def describe_network_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_network_policyContext,0)


        def describe_password_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_password_policyContext,0)


        def describe_pipe(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_pipeContext,0)


        def describe_procedure(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_procedureContext,0)


        def describe_result(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_resultContext,0)


        def describe_row_access_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_row_access_policyContext,0)


        def describe_schema(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_schemaContext,0)


        def describe_search_optimization(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_search_optimizationContext,0)


        def describe_sequence(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_sequenceContext,0)


        def describe_session_policy(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_session_policyContext,0)


        def describe_share(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_shareContext,0)


        def describe_stage(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_stageContext,0)


        def describe_stream(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_streamContext,0)


        def describe_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_tableContext,0)


        def describe_task(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_taskContext,0)


        def describe_transaction(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_transactionContext,0)


        def describe_user(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_userContext,0)


        def describe_view(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_viewContext,0)


        def describe_warehouse(self):
            return self.getTypedRuleContext(SnowflakeParser.Describe_warehouseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_command" ):
                listener.enterDescribe_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_command" ):
                listener.exitDescribe_command(self)




    def describe_command(self):

        localctx = SnowflakeParser.Describe_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_describe_command)
        try:
            self.state = 10515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10485
                self.describe_alert()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10486
                self.describe_database()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10487
                self.describe_dynamic_table()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10488
                self.describe_event_table()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10489
                self.describe_external_table()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10490
                self.describe_file_format()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10491
                self.describe_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10492
                self.describe_git_repository()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10493
                self.describe_integration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10494
                self.describe_masking_policy()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10495
                self.describe_materialized_view()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 10496
                self.describe_network_policy()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 10497
                self.describe_password_policy()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 10498
                self.describe_pipe()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 10499
                self.describe_procedure()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 10500
                self.describe_result()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 10501
                self.describe_row_access_policy()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 10502
                self.describe_schema()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 10503
                self.describe_search_optimization()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 10504
                self.describe_sequence()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 10505
                self.describe_session_policy()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 10506
                self.describe_share()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 10507
                self.describe_stage()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 10508
                self.describe_stream()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 10509
                self.describe_table()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 10510
                self.describe_task()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 10511
                self.describe_transaction()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 10512
                self.describe_user()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 10513
                self.describe_view()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 10514
                self.describe_warehouse()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_alertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def ALERT(self):
            return self.getToken(SnowflakeParser.ALERT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_alert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_alert" ):
                listener.enterDescribe_alert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_alert" ):
                listener.exitDescribe_alert(self)




    def describe_alert(self):

        localctx = SnowflakeParser.Describe_alertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_describe_alert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10517
            self.describe()
            self.state = 10518
            self.match(SnowflakeParser.ALERT)
            self.state = 10519
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_databaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_database" ):
                listener.enterDescribe_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_database" ):
                listener.exitDescribe_database(self)




    def describe_database(self):

        localctx = SnowflakeParser.Describe_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_describe_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10521
            self.describe()
            self.state = 10522
            self.match(SnowflakeParser.DATABASE)
            self.state = 10523
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_dynamic_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def DYNAMIC(self):
            return self.getToken(SnowflakeParser.DYNAMIC, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_dynamic_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_dynamic_table" ):
                listener.enterDescribe_dynamic_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_dynamic_table" ):
                listener.exitDescribe_dynamic_table(self)




    def describe_dynamic_table(self):

        localctx = SnowflakeParser.Describe_dynamic_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_describe_dynamic_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10525
            self.describe()
            self.state = 10526
            self.match(SnowflakeParser.DYNAMIC)
            self.state = 10527
            self.match(SnowflakeParser.TABLE)
            self.state = 10528
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_event_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def EVENT(self):
            return self.getToken(SnowflakeParser.EVENT, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_event_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_event_table" ):
                listener.enterDescribe_event_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_event_table" ):
                listener.exitDescribe_event_table(self)




    def describe_event_table(self):

        localctx = SnowflakeParser.Describe_event_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_describe_event_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10530
            self.describe()
            self.state = 10531
            self.match(SnowflakeParser.EVENT)
            self.state = 10532
            self.match(SnowflakeParser.TABLE)
            self.state = 10533
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_external_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def COLUMNS(self):
            return self.getToken(SnowflakeParser.COLUMNS, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_external_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_external_table" ):
                listener.enterDescribe_external_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_external_table" ):
                listener.exitDescribe_external_table(self)




    def describe_external_table(self):

        localctx = SnowflakeParser.Describe_external_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_describe_external_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10535
            self.describe()
            self.state = 10537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==249:
                self.state = 10536
                self.match(SnowflakeParser.EXTERNAL)


            self.state = 10539
            self.match(SnowflakeParser.TABLE)
            self.state = 10540
            self.object_name()
            self.state = 10544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==803:
                self.state = 10541
                self.match(SnowflakeParser.TYPE)
                self.state = 10542
                self.match(SnowflakeParser.EQ)
                self.state = 10543
                _la = self._input.LA(1)
                if not(_la==137 or _la==706):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_file_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMAT(self):
            return self.getToken(SnowflakeParser.FORMAT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_file_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_file_format" ):
                listener.enterDescribe_file_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_file_format" ):
                listener.exitDescribe_file_format(self)




    def describe_file_format(self):

        localctx = SnowflakeParser.Describe_file_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_describe_file_format)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10546
            self.describe()
            self.state = 10547
            self.match(SnowflakeParser.FILE)
            self.state = 10548
            self.match(SnowflakeParser.FORMAT)
            self.state = 10549
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def arg_types(self):
            return self.getTypedRuleContext(SnowflakeParser.Arg_typesContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_function" ):
                listener.enterDescribe_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_function" ):
                listener.exitDescribe_function(self)




    def describe_function(self):

        localctx = SnowflakeParser.Describe_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_describe_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10551
            self.describe()
            self.state = 10552
            self.match(SnowflakeParser.FUNCTION)
            self.state = 10553
            self.object_name()
            self.state = 10554
            self.arg_types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_git_repositoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None # Object_nameContext

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def GIT(self):
            return self.getToken(SnowflakeParser.GIT, 0)

        def REPOSITORY(self):
            return self.getToken(SnowflakeParser.REPOSITORY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_git_repository

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_git_repository" ):
                listener.enterDescribe_git_repository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_git_repository" ):
                listener.exitDescribe_git_repository(self)




    def describe_git_repository(self):

        localctx = SnowflakeParser.Describe_git_repositoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_describe_git_repository)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10556
            self.describe()
            self.state = 10557
            self.match(SnowflakeParser.GIT)
            self.state = 10558
            self.match(SnowflakeParser.REPOSITORY)
            self.state = 10559
            localctx.r = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_integrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def API(self):
            return self.getToken(SnowflakeParser.API, 0)

        def NOTIFICATION(self):
            return self.getToken(SnowflakeParser.NOTIFICATION, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def STORAGE(self):
            return self.getToken(SnowflakeParser.STORAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_integration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_integration" ):
                listener.enterDescribe_integration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_integration" ):
                listener.exitDescribe_integration(self)




    def describe_integration(self):

        localctx = SnowflakeParser.Describe_integrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_describe_integration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10561
            self.describe()
            self.state = 10563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32 or _la==449 or _la==666 or _la==721:
                self.state = 10562
                _la = self._input.LA(1)
                if not(_la==32 or _la==449 or _la==666 or _la==721):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 10565
            self.match(SnowflakeParser.INTEGRATION)
            self.state = 10566
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_masking_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_masking_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_masking_policy" ):
                listener.enterDescribe_masking_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_masking_policy" ):
                listener.exitDescribe_masking_policy(self)




    def describe_masking_policy(self):

        localctx = SnowflakeParser.Describe_masking_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_describe_masking_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10568
            self.describe()
            self.state = 10569
            self.match(SnowflakeParser.MASKING)
            self.state = 10570
            self.match(SnowflakeParser.POLICY)
            self.state = 10571
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_materialized_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def MATERIALIZED(self):
            return self.getToken(SnowflakeParser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_materialized_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_materialized_view" ):
                listener.enterDescribe_materialized_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_materialized_view" ):
                listener.exitDescribe_materialized_view(self)




    def describe_materialized_view(self):

        localctx = SnowflakeParser.Describe_materialized_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_describe_materialized_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10573
            self.describe()
            self.state = 10574
            self.match(SnowflakeParser.MATERIALIZED)
            self.state = 10575
            self.match(SnowflakeParser.VIEW)
            self.state = 10576
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_network_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_network_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_network_policy" ):
                listener.enterDescribe_network_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_network_policy" ):
                listener.exitDescribe_network_policy(self)




    def describe_network_policy(self):

        localctx = SnowflakeParser.Describe_network_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_describe_network_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10578
            self.describe()
            self.state = 10579
            self.match(SnowflakeParser.NETWORK)
            self.state = 10580
            self.match(SnowflakeParser.POLICY)
            self.state = 10581
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_pipeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def PIPE(self):
            return self.getToken(SnowflakeParser.PIPE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_pipe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_pipe" ):
                listener.enterDescribe_pipe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_pipe" ):
                listener.exitDescribe_pipe(self)




    def describe_pipe(self):

        localctx = SnowflakeParser.Describe_pipeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_describe_pipe)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10583
            self.describe()
            self.state = 10584
            self.match(SnowflakeParser.PIPE)
            self.state = 10585
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_procedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def PROCEDURE(self):
            return self.getToken(SnowflakeParser.PROCEDURE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def arg_types(self):
            return self.getTypedRuleContext(SnowflakeParser.Arg_typesContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_procedure" ):
                listener.enterDescribe_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_procedure" ):
                listener.exitDescribe_procedure(self)




    def describe_procedure(self):

        localctx = SnowflakeParser.Describe_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_describe_procedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10587
            self.describe()
            self.state = 10588
            self.match(SnowflakeParser.PROCEDURE)
            self.state = 10589
            self.object_name()
            self.state = 10590
            self.arg_types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_resultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def RESULT(self):
            return self.getToken(SnowflakeParser.RESULT, 0)

        def STRING(self):
            return self.getToken(SnowflakeParser.STRING, 0)

        def LAST_QUERY_ID(self):
            return self.getToken(SnowflakeParser.LAST_QUERY_ID, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_result" ):
                listener.enterDescribe_result(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_result" ):
                listener.exitDescribe_result(self)




    def describe_result(self):

        localctx = SnowflakeParser.Describe_resultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_describe_result)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10592
            self.describe()
            self.state = 10593
            self.match(SnowflakeParser.RESULT)
            self.state = 10598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [912]:
                self.state = 10594
                self.match(SnowflakeParser.STRING)
                pass
            elif token in [378]:
                self.state = 10595
                self.match(SnowflakeParser.LAST_QUERY_ID)
                self.state = 10596
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 10597
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_row_access_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_row_access_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_row_access_policy" ):
                listener.enterDescribe_row_access_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_row_access_policy" ):
                listener.exitDescribe_row_access_policy(self)




    def describe_row_access_policy(self):

        localctx = SnowflakeParser.Describe_row_access_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_describe_row_access_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10600
            self.describe()
            self.state = 10601
            self.match(SnowflakeParser.ROW)
            self.state = 10602
            self.match(SnowflakeParser.ACCESS)
            self.state = 10603
            self.match(SnowflakeParser.POLICY)
            self.state = 10604
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_schema" ):
                listener.enterDescribe_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_schema" ):
                listener.exitDescribe_schema(self)




    def describe_schema(self):

        localctx = SnowflakeParser.Describe_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_describe_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10606
            self.describe()
            self.state = 10607
            self.match(SnowflakeParser.SCHEMA)
            self.state = 10608
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_search_optimizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def SEARCH(self):
            return self.getToken(SnowflakeParser.SEARCH, 0)

        def OPTIMIZATION(self):
            return self.getToken(SnowflakeParser.OPTIMIZATION, 0)

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_search_optimization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_search_optimization" ):
                listener.enterDescribe_search_optimization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_search_optimization" ):
                listener.exitDescribe_search_optimization(self)




    def describe_search_optimization(self):

        localctx = SnowflakeParser.Describe_search_optimizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_describe_search_optimization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10610
            self.describe()
            self.state = 10611
            self.match(SnowflakeParser.SEARCH)
            self.state = 10612
            self.match(SnowflakeParser.OPTIMIZATION)
            self.state = 10613
            self.match(SnowflakeParser.ON)
            self.state = 10614
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_sequence" ):
                listener.enterDescribe_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_sequence" ):
                listener.exitDescribe_sequence(self)




    def describe_sequence(self):

        localctx = SnowflakeParser.Describe_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_describe_sequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10616
            self.describe()
            self.state = 10617
            self.match(SnowflakeParser.SEQUENCE)
            self.state = 10618
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_session_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_session_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_session_policy" ):
                listener.enterDescribe_session_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_session_policy" ):
                listener.exitDescribe_session_policy(self)




    def describe_session_policy(self):

        localctx = SnowflakeParser.Describe_session_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_describe_session_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10620
            self.describe()
            self.state = 10621
            self.match(SnowflakeParser.SESSION)
            self.state = 10622
            self.match(SnowflakeParser.POLICY)
            self.state = 10623
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_password_policyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_password_policy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_password_policy" ):
                listener.enterDescribe_password_policy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_password_policy" ):
                listener.exitDescribe_password_policy(self)




    def describe_password_policy(self):

        localctx = SnowflakeParser.Describe_password_policyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_describe_password_policy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10625
            self.describe()
            self.state = 10626
            self.match(SnowflakeParser.PASSWORD)
            self.state = 10627
            self.match(SnowflakeParser.POLICY)
            self.state = 10628
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_shareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_share

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_share" ):
                listener.enterDescribe_share(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_share" ):
                listener.exitDescribe_share(self)




    def describe_share(self):

        localctx = SnowflakeParser.Describe_shareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_describe_share)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10630
            self.describe()
            self.state = 10631
            self.match(SnowflakeParser.SHARE)
            self.state = 10632
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_streamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_stream

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_stream" ):
                listener.enterDescribe_stream(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_stream" ):
                listener.exitDescribe_stream(self)




    def describe_stream(self):

        localctx = SnowflakeParser.Describe_streamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_describe_stream)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10634
            self.describe()
            self.state = 10635
            self.match(SnowflakeParser.STREAM)
            self.state = 10636
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def COLUMNS(self):
            return self.getToken(SnowflakeParser.COLUMNS, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_table" ):
                listener.enterDescribe_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_table" ):
                listener.exitDescribe_table(self)




    def describe_table(self):

        localctx = SnowflakeParser.Describe_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_describe_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10638
            self.describe()
            self.state = 10639
            self.match(SnowflakeParser.TABLE)
            self.state = 10640
            self.object_name()
            self.state = 10644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==803:
                self.state = 10641
                self.match(SnowflakeParser.TYPE)
                self.state = 10642
                self.match(SnowflakeParser.EQ)
                self.state = 10643
                _la = self._input.LA(1)
                if not(_la==137 or _la==706):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_taskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_task

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_task" ):
                listener.enterDescribe_task(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_task" ):
                listener.exitDescribe_task(self)




    def describe_task(self):

        localctx = SnowflakeParser.Describe_taskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_describe_task)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10646
            self.describe()
            self.state = 10647
            self.match(SnowflakeParser.TASK)
            self.state = 10648
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_transactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def TRANSACTION(self):
            return self.getToken(SnowflakeParser.TRANSACTION, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_transaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_transaction" ):
                listener.enterDescribe_transaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_transaction" ):
                listener.exitDescribe_transaction(self)




    def describe_transaction(self):

        localctx = SnowflakeParser.Describe_transactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_describe_transaction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10650
            self.describe()
            self.state = 10651
            self.match(SnowflakeParser.TRANSACTION)
            self.state = 10652
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_userContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_user

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_user" ):
                listener.enterDescribe_user(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_user" ):
                listener.exitDescribe_user(self)




    def describe_user(self):

        localctx = SnowflakeParser.Describe_userContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_describe_user)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10654
            self.describe()
            self.state = 10655
            self.match(SnowflakeParser.USER)
            self.state = 10656
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_view" ):
                listener.enterDescribe_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_view" ):
                listener.exitDescribe_view(self)




    def describe_view(self):

        localctx = SnowflakeParser.Describe_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_describe_view)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10658
            self.describe()
            self.state = 10659
            self.match(SnowflakeParser.VIEW)
            self.state = 10660
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_warehouseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def describe(self):
            return self.getTypedRuleContext(SnowflakeParser.DescribeContext,0)


        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_describe_warehouse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_warehouse" ):
                listener.enterDescribe_warehouse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_warehouse" ):
                listener.exitDescribe_warehouse(self)




    def describe_warehouse(self):

        localctx = SnowflakeParser.Describe_warehouseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_describe_warehouse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10662
            self.describe()
            self.state = 10663
            self.match(SnowflakeParser.WAREHOUSE)
            self.state = 10664
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def show_alerts(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_alertsContext,0)


        def show_channels(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_channelsContext,0)


        def show_columns(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_columnsContext,0)


        def show_connections(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_connectionsContext,0)


        def show_databases(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_databasesContext,0)


        def show_databases_in_failover_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_databases_in_failover_groupContext,0)


        def show_databases_in_replication_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_databases_in_replication_groupContext,0)


        def show_datasets(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_datasetsContext,0)


        def show_delegated_authorizations(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_delegated_authorizationsContext,0)


        def show_dynamic_tables(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_dynamic_tablesContext,0)


        def show_event_tables(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_event_tablesContext,0)


        def show_external_functions(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_external_functionsContext,0)


        def show_external_tables(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_external_tablesContext,0)


        def show_failover_groups(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_failover_groupsContext,0)


        def show_file_formats(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_file_formatsContext,0)


        def show_functions(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_functionsContext,0)


        def show_git_branches(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_git_branchesContext,0)


        def show_git_repositories(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_git_repositoriesContext,0)


        def show_git_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_git_tagsContext,0)


        def show_global_accounts(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_global_accountsContext,0)


        def show_grants(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_grantsContext,0)


        def show_integrations(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_integrationsContext,0)


        def show_locks(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_locksContext,0)


        def show_managed_accounts(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_managed_accountsContext,0)


        def show_masking_policies(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_masking_policiesContext,0)


        def show_materialized_views(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_materialized_viewsContext,0)


        def show_network_policies(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_network_policiesContext,0)


        def show_objects(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_objectsContext,0)


        def show_organization_accounts(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_organization_accountsContext,0)


        def show_parameters(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_parametersContext,0)


        def show_password_policies(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_password_policiesContext,0)


        def show_pipes(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_pipesContext,0)


        def show_primary_keys(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_primary_keysContext,0)


        def show_procedures(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_proceduresContext,0)


        def show_regions(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_regionsContext,0)


        def show_replication_accounts(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_replication_accountsContext,0)


        def show_replication_databases(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_replication_databasesContext,0)


        def show_replication_groups(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_replication_groupsContext,0)


        def show_resource_monitors(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_resource_monitorsContext,0)


        def show_roles(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_rolesContext,0)


        def show_row_access_policies(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_row_access_policiesContext,0)


        def show_schemas(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_schemasContext,0)


        def show_secrets(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_secretsContext,0)


        def show_sequences(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_sequencesContext,0)


        def show_session_policies(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_session_policiesContext,0)


        def show_shares(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_sharesContext,0)


        def show_shares_in_failover_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_shares_in_failover_groupContext,0)


        def show_shares_in_replication_group(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_shares_in_replication_groupContext,0)


        def show_stages(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_stagesContext,0)


        def show_streams(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_streamsContext,0)


        def show_tables(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_tablesContext,0)


        def show_tags(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_tagsContext,0)


        def show_tasks(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_tasksContext,0)


        def show_transactions(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_transactionsContext,0)


        def show_user_functions(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_user_functionsContext,0)


        def show_users(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_usersContext,0)


        def show_variables(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_variablesContext,0)


        def show_versions_in_dataset(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_versions_in_datasetContext,0)


        def show_views(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_viewsContext,0)


        def show_warehouses(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_warehousesContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_command" ):
                listener.enterShow_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_command" ):
                listener.exitShow_command(self)




    def show_command(self):

        localctx = SnowflakeParser.Show_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_show_command)
        try:
            self.state = 10726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10666
                self.show_alerts()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10667
                self.show_channels()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10668
                self.show_columns()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10669
                self.show_connections()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10670
                self.show_databases()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10671
                self.show_databases_in_failover_group()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10672
                self.show_databases_in_replication_group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10673
                self.show_datasets()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10674
                self.show_delegated_authorizations()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10675
                self.show_dynamic_tables()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10676
                self.show_event_tables()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 10677
                self.show_external_functions()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 10678
                self.show_external_tables()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 10679
                self.show_failover_groups()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 10680
                self.show_file_formats()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 10681
                self.show_functions()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 10682
                self.show_git_branches()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 10683
                self.show_git_repositories()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 10684
                self.show_git_tags()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 10685
                self.show_global_accounts()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 10686
                self.show_grants()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 10687
                self.show_integrations()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 10688
                self.show_locks()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 10689
                self.show_managed_accounts()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 10690
                self.show_masking_policies()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 10691
                self.show_materialized_views()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 10692
                self.show_network_policies()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 10693
                self.show_objects()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 10694
                self.show_organization_accounts()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 10695
                self.show_parameters()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 10696
                self.show_password_policies()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 10697
                self.show_pipes()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 10698
                self.show_primary_keys()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 10699
                self.show_procedures()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 10700
                self.show_regions()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 10701
                self.show_replication_accounts()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 10702
                self.show_replication_databases()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 10703
                self.show_replication_groups()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 10704
                self.show_resource_monitors()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 10705
                self.show_roles()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 10706
                self.show_row_access_policies()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 10707
                self.show_schemas()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 10708
                self.show_secrets()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 10709
                self.show_sequences()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 10710
                self.show_session_policies()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 10711
                self.show_shares()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 10712
                self.show_shares_in_failover_group()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 10713
                self.show_shares_in_replication_group()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 10714
                self.show_stages()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 10715
                self.show_streams()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 10716
                self.show_tables()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 10717
                self.show_tags()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 10718
                self.show_tasks()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 10719
                self.show_transactions()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 10720
                self.show_user_functions()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 10721
                self.show_users()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 10722
                self.show_variables()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 10723
                self.show_versions_in_dataset()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 10724
                self.show_views()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 10725
                self.show_warehouses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_alertsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def ALERTS(self):
            return self.getToken(SnowflakeParser.ALERTS, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_alerts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_alerts" ):
                listener.enterShow_alerts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_alerts" ):
                listener.exitShow_alerts(self)




    def show_alerts(self):

        localctx = SnowflakeParser.Show_alertsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_show_alerts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10728
            self.match(SnowflakeParser.SHOW)
            self.state = 10730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 10729
                self.match(SnowflakeParser.TERSE)


            self.state = 10732
            self.match(SnowflakeParser.ALERTS)
            self.state = 10734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10733
                self.like_pattern()


            self.state = 10748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 10736
                self.match(SnowflakeParser.IN)
                self.state = 10746
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6]:
                    self.state = 10737
                    self.match(SnowflakeParser.ACCOUNT)
                    pass
                elif token in [169]:
                    self.state = 10738
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 10740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10739
                        self.id_()


                    pass
                elif token in [656]:
                    self.state = 10742
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 10744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10743
                        self.schema_name()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 10751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 10750
                self.starts_with()


            self.state = 10754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 10753
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_channelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def CHANNELS(self):
            return self.getToken(SnowflakeParser.CHANNELS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_channels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_channels" ):
                listener.enterShow_channels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_channels" ):
                listener.exitShow_channels(self)




    def show_channels(self):

        localctx = SnowflakeParser.Show_channelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_show_channels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10756
            self.match(SnowflakeParser.SHOW)
            self.state = 10757
            self.match(SnowflakeParser.CHANNELS)
            self.state = 10759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10758
                self.like_pattern()


            self.state = 10778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 10761
                self.match(SnowflakeParser.IN)
                self.state = 10776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1337,self._ctx)
                if la_ == 1:
                    self.state = 10762
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 10763
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 10765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10764
                        self.id_()


                    pass

                elif la_ == 3:
                    self.state = 10767
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 10769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10768
                        self.schema_name()


                    pass

                elif la_ == 4:
                    self.state = 10771
                    self.match(SnowflakeParser.TABLE)
                    pass

                elif la_ == 5:
                    self.state = 10773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==747:
                        self.state = 10772
                        self.match(SnowflakeParser.TABLE)


                    self.state = 10775
                    self.object_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def COLUMNS(self):
            return self.getToken(SnowflakeParser.COLUMNS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def VIEW(self):
            return self.getToken(SnowflakeParser.VIEW, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_columns" ):
                listener.enterShow_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_columns" ):
                listener.exitShow_columns(self)




    def show_columns(self):

        localctx = SnowflakeParser.Show_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_show_columns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10780
            self.match(SnowflakeParser.SHOW)
            self.state = 10781
            self.match(SnowflakeParser.COLUMNS)
            self.state = 10783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10782
                self.like_pattern()


            self.state = 10807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 10785
                self.match(SnowflakeParser.IN)
                self.state = 10805
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1344,self._ctx)
                if la_ == 1:
                    self.state = 10786
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 10787
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 10789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10788
                        self.id_()


                    pass

                elif la_ == 3:
                    self.state = 10791
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 10793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10792
                        self.schema_name()


                    pass

                elif la_ == 4:
                    self.state = 10795
                    self.match(SnowflakeParser.TABLE)
                    pass

                elif la_ == 5:
                    self.state = 10797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==747:
                        self.state = 10796
                        self.match(SnowflakeParser.TABLE)


                    self.state = 10799
                    self.object_name()
                    pass

                elif la_ == 6:
                    self.state = 10800
                    self.match(SnowflakeParser.VIEW)
                    pass

                elif la_ == 7:
                    self.state = 10802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==834:
                        self.state = 10801
                        self.match(SnowflakeParser.VIEW)


                    self.state = 10804
                    self.object_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_connectionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def CONNECTIONS(self):
            return self.getToken(SnowflakeParser.CONNECTIONS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_connections

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_connections" ):
                listener.enterShow_connections(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_connections" ):
                listener.exitShow_connections(self)




    def show_connections(self):

        localctx = SnowflakeParser.Show_connectionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_show_connections)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10809
            self.match(SnowflakeParser.SHOW)
            self.state = 10810
            self.match(SnowflakeParser.CONNECTIONS)
            self.state = 10812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10811
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Starts_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STARTS(self):
            return self.getToken(SnowflakeParser.STARTS, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_starts_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarts_with" ):
                listener.enterStarts_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarts_with" ):
                listener.exitStarts_with(self)




    def starts_with(self):

        localctx = SnowflakeParser.Starts_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_starts_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10814
            self.match(SnowflakeParser.STARTS)
            self.state = 10815
            self.match(SnowflakeParser.WITH)
            self.state = 10816
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SnowflakeParser.LIMIT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_limit_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_rows" ):
                listener.enterLimit_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_rows" ):
                listener.exitLimit_rows(self)




    def limit_rows(self):

        localctx = SnowflakeParser.Limit_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_limit_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10818
            self.match(SnowflakeParser.LIMIT)
            self.state = 10819
            self.num()
            self.state = 10822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==285:
                self.state = 10820
                self.match(SnowflakeParser.FROM)
                self.state = 10821
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_databasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def HISTORY(self):
            return self.getToken(SnowflakeParser.HISTORY, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_databases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_databases" ):
                listener.enterShow_databases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_databases" ):
                listener.exitShow_databases(self)




    def show_databases(self):

        localctx = SnowflakeParser.Show_databasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_show_databases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10824
            self.match(SnowflakeParser.SHOW)
            self.state = 10826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 10825
                self.match(SnowflakeParser.TERSE)


            self.state = 10828
            self.match(SnowflakeParser.DATABASES)
            self.state = 10830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 10829
                self.match(SnowflakeParser.HISTORY)


            self.state = 10833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10832
                self.like_pattern()


            self.state = 10836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 10835
                self.starts_with()


            self.state = 10839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 10838
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_databases_in_failover_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def FAILOVER(self):
            return self.getToken(SnowflakeParser.FAILOVER, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_databases_in_failover_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_databases_in_failover_group" ):
                listener.enterShow_databases_in_failover_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_databases_in_failover_group" ):
                listener.exitShow_databases_in_failover_group(self)




    def show_databases_in_failover_group(self):

        localctx = SnowflakeParser.Show_databases_in_failover_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_show_databases_in_failover_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10841
            self.match(SnowflakeParser.SHOW)
            self.state = 10842
            self.match(SnowflakeParser.DATABASES)
            self.state = 10843
            self.match(SnowflakeParser.IN)
            self.state = 10844
            self.match(SnowflakeParser.FAILOVER)
            self.state = 10845
            self.match(SnowflakeParser.GROUP)
            self.state = 10846
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_databases_in_replication_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_databases_in_replication_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_databases_in_replication_group" ):
                listener.enterShow_databases_in_replication_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_databases_in_replication_group" ):
                listener.exitShow_databases_in_replication_group(self)




    def show_databases_in_replication_group(self):

        localctx = SnowflakeParser.Show_databases_in_replication_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_show_databases_in_replication_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10848
            self.match(SnowflakeParser.SHOW)
            self.state = 10849
            self.match(SnowflakeParser.DATABASES)
            self.state = 10850
            self.match(SnowflakeParser.IN)
            self.state = 10851
            self.match(SnowflakeParser.REPLICATION)
            self.state = 10852
            self.match(SnowflakeParser.GROUP)
            self.state = 10853
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_datasetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.s = None # Schema_nameContext
            self.d = None # Id_Context
            self.sw = None # StringContext
            self.f = None # StringContext

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def DATASETS(self):
            return self.getToken(SnowflakeParser.DATASETS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def STARTS(self):
            return self.getToken(SnowflakeParser.STARTS, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def LIMIT(self):
            return self.getToken(SnowflakeParser.LIMIT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_datasets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_datasets" ):
                listener.enterShow_datasets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_datasets" ):
                listener.exitShow_datasets(self)




    def show_datasets(self):

        localctx = SnowflakeParser.Show_datasetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_show_datasets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10855
            self.match(SnowflakeParser.SHOW)
            self.state = 10856
            self.match(SnowflakeParser.DATASETS)
            self.state = 10858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10857
                self.like_pattern()


            self.state = 10868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 10860
                self.match(SnowflakeParser.IN)
                self.state = 10866
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [656]:
                    self.state = 10861
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 10862
                    localctx.s = self.schema_name()
                    pass
                elif token in [169]:
                    self.state = 10863
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 10864
                    localctx.d = self.id_()
                    pass
                elif token in [6]:
                    self.state = 10865
                    self.match(SnowflakeParser.ACCOUNT)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 10873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 10870
                self.match(SnowflakeParser.STARTS)
                self.state = 10871
                self.match(SnowflakeParser.WITH)
                self.state = 10872
                localctx.sw = self.string()


            self.state = 10881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 10875
                self.match(SnowflakeParser.LIMIT)
                self.state = 10876
                self.num()
                self.state = 10879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==285:
                    self.state = 10877
                    self.match(SnowflakeParser.FROM)
                    self.state = 10878
                    localctx.f = self.string()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_delegated_authorizationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def DELEGATED(self):
            return self.getToken(SnowflakeParser.DELEGATED, 0)

        def AUTHORIZATIONS(self):
            return self.getToken(SnowflakeParser.AUTHORIZATIONS, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def INTEGRATION(self):
            return self.getToken(SnowflakeParser.INTEGRATION, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_delegated_authorizations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_delegated_authorizations" ):
                listener.enterShow_delegated_authorizations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_delegated_authorizations" ):
                listener.exitShow_delegated_authorizations(self)




    def show_delegated_authorizations(self):

        localctx = SnowflakeParser.Show_delegated_authorizationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_show_delegated_authorizations)
        try:
            self.state = 10899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1359,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10883
                self.match(SnowflakeParser.SHOW)
                self.state = 10884
                self.match(SnowflakeParser.DELEGATED)
                self.state = 10885
                self.match(SnowflakeParser.AUTHORIZATIONS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10886
                self.match(SnowflakeParser.SHOW)
                self.state = 10887
                self.match(SnowflakeParser.DELEGATED)
                self.state = 10888
                self.match(SnowflakeParser.AUTHORIZATIONS)
                self.state = 10889
                self.match(SnowflakeParser.BY)
                self.state = 10890
                self.match(SnowflakeParser.USER)
                self.state = 10891
                self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10892
                self.match(SnowflakeParser.SHOW)
                self.state = 10893
                self.match(SnowflakeParser.DELEGATED)
                self.state = 10894
                self.match(SnowflakeParser.AUTHORIZATIONS)
                self.state = 10895
                self.match(SnowflakeParser.TO)
                self.state = 10896
                self.match(SnowflakeParser.SECURITY)
                self.state = 10897
                self.match(SnowflakeParser.INTEGRATION)
                self.state = 10898
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_dynamic_tablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def DYNAMIC(self):
            return self.getToken(SnowflakeParser.DYNAMIC, 0)

        def TABLES(self):
            return self.getToken(SnowflakeParser.TABLES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_dynamic_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_dynamic_tables" ):
                listener.enterShow_dynamic_tables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_dynamic_tables" ):
                listener.exitShow_dynamic_tables(self)




    def show_dynamic_tables(self):

        localctx = SnowflakeParser.Show_dynamic_tablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_show_dynamic_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10901
            self.match(SnowflakeParser.SHOW)
            self.state = 10902
            self.match(SnowflakeParser.DYNAMIC)
            self.state = 10903
            self.match(SnowflakeParser.TABLES)
            self.state = 10905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10904
                self.like_pattern()


            self.state = 10921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 10907
                self.match(SnowflakeParser.IN)
                self.state = 10919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1364,self._ctx)
                if la_ == 1:
                    self.state = 10908
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 10909
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 10911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10910
                        self.id_()


                    pass

                elif la_ == 3:
                    self.state = 10914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==656:
                        self.state = 10913
                        self.match(SnowflakeParser.SCHEMA)


                    self.state = 10917
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10916
                        self.schema_name()


                    pass




            self.state = 10924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 10923
                self.starts_with()


            self.state = 10927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 10926
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_event_tablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def EVENT(self):
            return self.getToken(SnowflakeParser.EVENT, 0)

        def TABLES(self):
            return self.getToken(SnowflakeParser.TABLES, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_event_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_event_tables" ):
                listener.enterShow_event_tables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_event_tables" ):
                listener.exitShow_event_tables(self)




    def show_event_tables(self):

        localctx = SnowflakeParser.Show_event_tablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_show_event_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10929
            self.match(SnowflakeParser.SHOW)
            self.state = 10931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 10930
                self.match(SnowflakeParser.TERSE)


            self.state = 10933
            self.match(SnowflakeParser.EVENT)
            self.state = 10934
            self.match(SnowflakeParser.TABLES)
            self.state = 10936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10935
                self.like_pattern()


            self.state = 10952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 10938
                self.match(SnowflakeParser.IN)
                self.state = 10950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1373,self._ctx)
                if la_ == 1:
                    self.state = 10939
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 10940
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 10942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10941
                        self.id_()


                    pass

                elif la_ == 3:
                    self.state = 10945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==656:
                        self.state = 10944
                        self.match(SnowflakeParser.SCHEMA)


                    self.state = 10948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10947
                        self.schema_name()


                    pass




            self.state = 10955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 10954
                self.starts_with()


            self.state = 10958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 10957
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_external_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def FUNCTIONS(self):
            return self.getToken(SnowflakeParser.FUNCTIONS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_external_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_external_functions" ):
                listener.enterShow_external_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_external_functions" ):
                listener.exitShow_external_functions(self)




    def show_external_functions(self):

        localctx = SnowflakeParser.Show_external_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_show_external_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10960
            self.match(SnowflakeParser.SHOW)
            self.state = 10961
            self.match(SnowflakeParser.EXTERNAL)
            self.state = 10962
            self.match(SnowflakeParser.FUNCTIONS)
            self.state = 10964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10963
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_external_tablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def EXTERNAL(self):
            return self.getToken(SnowflakeParser.EXTERNAL, 0)

        def TABLES(self):
            return self.getToken(SnowflakeParser.TABLES, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_external_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_external_tables" ):
                listener.enterShow_external_tables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_external_tables" ):
                listener.exitShow_external_tables(self)




    def show_external_tables(self):

        localctx = SnowflakeParser.Show_external_tablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_show_external_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10966
            self.match(SnowflakeParser.SHOW)
            self.state = 10968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 10967
                self.match(SnowflakeParser.TERSE)


            self.state = 10970
            self.match(SnowflakeParser.EXTERNAL)
            self.state = 10971
            self.match(SnowflakeParser.TABLES)
            self.state = 10973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 10972
                self.like_pattern()


            self.state = 10989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 10975
                self.match(SnowflakeParser.IN)
                self.state = 10987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1383,self._ctx)
                if la_ == 1:
                    self.state = 10976
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 10977
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 10979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10978
                        self.id_()


                    pass

                elif la_ == 3:
                    self.state = 10982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==656:
                        self.state = 10981
                        self.match(SnowflakeParser.SCHEMA)


                    self.state = 10985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 10984
                        self.schema_name()


                    pass




            self.state = 10992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 10991
                self.starts_with()


            self.state = 10995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 10994
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_failover_groupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def FAILOVER(self):
            return self.getToken(SnowflakeParser.FAILOVER, 0)

        def GROUPS(self):
            return self.getToken(SnowflakeParser.GROUPS, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_failover_groups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_failover_groups" ):
                listener.enterShow_failover_groups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_failover_groups" ):
                listener.exitShow_failover_groups(self)




    def show_failover_groups(self):

        localctx = SnowflakeParser.Show_failover_groupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_show_failover_groups)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10997
            self.match(SnowflakeParser.SHOW)
            self.state = 10998
            self.match(SnowflakeParser.FAILOVER)
            self.state = 10999
            self.match(SnowflakeParser.GROUPS)
            self.state = 11003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11000
                self.match(SnowflakeParser.IN)
                self.state = 11001
                self.match(SnowflakeParser.ACCOUNT)
                self.state = 11002
                self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_file_formatsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FORMATS(self):
            return self.getToken(SnowflakeParser.FORMATS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_file_formats

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_file_formats" ):
                listener.enterShow_file_formats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_file_formats" ):
                listener.exitShow_file_formats(self)




    def show_file_formats(self):

        localctx = SnowflakeParser.Show_file_formatsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_show_file_formats)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11005
            self.match(SnowflakeParser.SHOW)
            self.state = 11006
            self.match(SnowflakeParser.FILE)
            self.state = 11007
            self.match(SnowflakeParser.FORMATS)
            self.state = 11009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11008
                self.like_pattern()


            self.state = 11022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11011
                self.match(SnowflakeParser.IN)
                self.state = 11020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1389,self._ctx)
                if la_ == 1:
                    self.state = 11012
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 11013
                    self.match(SnowflakeParser.DATABASE)
                    pass

                elif la_ == 3:
                    self.state = 11014
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 11015
                    self.id_()
                    pass

                elif la_ == 4:
                    self.state = 11016
                    self.match(SnowflakeParser.SCHEMA)
                    pass

                elif la_ == 5:
                    self.state = 11017
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 11018
                    self.schema_name()
                    pass

                elif la_ == 6:
                    self.state = 11019
                    self.schema_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def FUNCTIONS(self):
            return self.getToken(SnowflakeParser.FUNCTIONS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_functions" ):
                listener.enterShow_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_functions" ):
                listener.exitShow_functions(self)




    def show_functions(self):

        localctx = SnowflakeParser.Show_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_show_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11024
            self.match(SnowflakeParser.SHOW)
            self.state = 11025
            self.match(SnowflakeParser.FUNCTIONS)
            self.state = 11027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11026
                self.like_pattern()


            self.state = 11040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11029
                self.match(SnowflakeParser.IN)
                self.state = 11038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1392,self._ctx)
                if la_ == 1:
                    self.state = 11030
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 11031
                    self.match(SnowflakeParser.DATABASE)
                    pass

                elif la_ == 3:
                    self.state = 11032
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 11033
                    self.id_()
                    pass

                elif la_ == 4:
                    self.state = 11034
                    self.match(SnowflakeParser.SCHEMA)
                    pass

                elif la_ == 5:
                    self.state = 11035
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 11036
                    self.id_()
                    pass

                elif la_ == 6:
                    self.state = 11037
                    self.id_()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_git_branchesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None # Object_nameContext

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def GIT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.GIT)
            else:
                return self.getToken(SnowflakeParser.GIT, i)

        def BRANCHES(self):
            return self.getToken(SnowflakeParser.BRANCHES, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def REPOSITORY(self):
            return self.getToken(SnowflakeParser.REPOSITORY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_git_branches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_git_branches" ):
                listener.enterShow_git_branches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_git_branches" ):
                listener.exitShow_git_branches(self)




    def show_git_branches(self):

        localctx = SnowflakeParser.Show_git_branchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_show_git_branches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11042
            self.match(SnowflakeParser.SHOW)
            self.state = 11043
            self.match(SnowflakeParser.GIT)
            self.state = 11044
            self.match(SnowflakeParser.BRANCHES)
            self.state = 11046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11045
                self.like_pattern()


            self.state = 11048
            self.match(SnowflakeParser.IN)
            self.state = 11051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==304:
                self.state = 11049
                self.match(SnowflakeParser.GIT)
                self.state = 11050
                self.match(SnowflakeParser.REPOSITORY)


            self.state = 11053
            localctx.r = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_git_repositoriesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None # Id_Context
            self.s = None # Schema_nameContext

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def GIT(self):
            return self.getToken(SnowflakeParser.GIT, 0)

        def REPOSITORIES(self):
            return self.getToken(SnowflakeParser.REPOSITORIES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_git_repositories

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_git_repositories" ):
                listener.enterShow_git_repositories(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_git_repositories" ):
                listener.exitShow_git_repositories(self)




    def show_git_repositories(self):

        localctx = SnowflakeParser.Show_git_repositoriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_show_git_repositories)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11055
            self.match(SnowflakeParser.SHOW)
            self.state = 11056
            self.match(SnowflakeParser.GIT)
            self.state = 11057
            self.match(SnowflakeParser.REPOSITORIES)
            self.state = 11059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11058
                self.like_pattern()


            self.state = 11074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11061
                self.match(SnowflakeParser.IN)
                self.state = 11072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1399,self._ctx)
                if la_ == 1:
                    self.state = 11062
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 11063
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 11065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11064
                        localctx.d = self.id_()


                    pass

                elif la_ == 3:
                    self.state = 11067
                    self.match(SnowflakeParser.SCHEMA)
                    self.state = 11069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11068
                        localctx.s = self.schema_name()


                    pass

                elif la_ == 4:
                    self.state = 11071
                    self.schema_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_git_tagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r = None # Object_nameContext

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def GIT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.GIT)
            else:
                return self.getToken(SnowflakeParser.GIT, i)

        def TAGS(self):
            return self.getToken(SnowflakeParser.TAGS, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def REPOSITORY(self):
            return self.getToken(SnowflakeParser.REPOSITORY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_git_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_git_tags" ):
                listener.enterShow_git_tags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_git_tags" ):
                listener.exitShow_git_tags(self)




    def show_git_tags(self):

        localctx = SnowflakeParser.Show_git_tagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_show_git_tags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11076
            self.match(SnowflakeParser.SHOW)
            self.state = 11077
            self.match(SnowflakeParser.GIT)
            self.state = 11078
            self.match(SnowflakeParser.TAGS)
            self.state = 11080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11079
                self.like_pattern()


            self.state = 11082
            self.match(SnowflakeParser.IN)
            self.state = 11085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==304:
                self.state = 11083
                self.match(SnowflakeParser.GIT)
                self.state = 11084
                self.match(SnowflakeParser.REPOSITORY)


            self.state = 11087
            localctx.r = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_global_accountsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def GLOBAL(self):
            return self.getToken(SnowflakeParser.GLOBAL, 0)

        def ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ACCOUNTS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_global_accounts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_global_accounts" ):
                listener.enterShow_global_accounts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_global_accounts" ):
                listener.exitShow_global_accounts(self)




    def show_global_accounts(self):

        localctx = SnowflakeParser.Show_global_accountsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_show_global_accounts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11089
            self.match(SnowflakeParser.SHOW)
            self.state = 11090
            self.match(SnowflakeParser.GLOBAL)
            self.state = 11091
            self.match(SnowflakeParser.ACCOUNTS)
            self.state = 11093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11092
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_grantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def GRANTS(self):
            return self.getToken(SnowflakeParser.GRANTS, 0)

        def show_grants_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Show_grants_optsContext,0)


        def FUTURE(self):
            return self.getToken(SnowflakeParser.FUTURE, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_grants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_grants" ):
                listener.enterShow_grants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_grants" ):
                listener.exitShow_grants(self)




    def show_grants(self):

        localctx = SnowflakeParser.Show_grantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_show_grants)
        self._la = 0 # Token type
        try:
            self.state = 11112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1405,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11095
                self.match(SnowflakeParser.SHOW)
                self.state = 11096
                self.match(SnowflakeParser.GRANTS)
                self.state = 11098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==481 or _la==488 or _la==784:
                    self.state = 11097
                    self.show_grants_opts()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11100
                self.match(SnowflakeParser.SHOW)
                self.state = 11101
                self.match(SnowflakeParser.FUTURE)
                self.state = 11102
                self.match(SnowflakeParser.GRANTS)
                self.state = 11103
                self.match(SnowflakeParser.IN)
                self.state = 11104
                self.match(SnowflakeParser.SCHEMA)
                self.state = 11105
                self.schema_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11106
                self.match(SnowflakeParser.SHOW)
                self.state = 11107
                self.match(SnowflakeParser.FUTURE)
                self.state = 11108
                self.match(SnowflakeParser.GRANTS)
                self.state = 11109
                self.match(SnowflakeParser.IN)
                self.state = 11110
                self.match(SnowflakeParser.DATABASE)
                self.state = 11111
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_grants_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def object_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_typeContext,0)


        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def SHARE(self):
            return self.getToken(SnowflakeParser.SHARE, 0)

        def OF(self):
            return self.getToken(SnowflakeParser.OF, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_grants_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_grants_opts" ):
                listener.enterShow_grants_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_grants_opts" ):
                listener.exitShow_grants_opts(self)




    def show_grants_opts(self):

        localctx = SnowflakeParser.Show_grants_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_show_grants_opts)
        try:
            self.state = 11135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1407,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11114
                self.match(SnowflakeParser.ON)
                self.state = 11115
                self.match(SnowflakeParser.ACCOUNT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11116
                self.match(SnowflakeParser.ON)
                self.state = 11117
                self.object_type()
                self.state = 11118
                self.object_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11120
                self.match(SnowflakeParser.TO)
                self.state = 11127
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [620]:
                    self.state = 11121
                    self.match(SnowflakeParser.ROLE)
                    self.state = 11122
                    self.id_()
                    pass
                elif token in [816]:
                    self.state = 11123
                    self.match(SnowflakeParser.USER)
                    self.state = 11124
                    self.id_()
                    pass
                elif token in [678]:
                    self.state = 11125
                    self.match(SnowflakeParser.SHARE)
                    self.state = 11126
                    self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11129
                self.match(SnowflakeParser.OF)
                self.state = 11130
                self.match(SnowflakeParser.ROLE)
                self.state = 11131
                self.id_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11132
                self.match(SnowflakeParser.OF)
                self.state = 11133
                self.match(SnowflakeParser.SHARE)
                self.state = 11134
                self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_integrationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def INTEGRATIONS(self):
            return self.getToken(SnowflakeParser.INTEGRATIONS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def API(self):
            return self.getToken(SnowflakeParser.API, 0)

        def NOTIFICATION(self):
            return self.getToken(SnowflakeParser.NOTIFICATION, 0)

        def SECURITY(self):
            return self.getToken(SnowflakeParser.SECURITY, 0)

        def STORAGE(self):
            return self.getToken(SnowflakeParser.STORAGE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_integrations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_integrations" ):
                listener.enterShow_integrations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_integrations" ):
                listener.exitShow_integrations(self)




    def show_integrations(self):

        localctx = SnowflakeParser.Show_integrationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_show_integrations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11137
            self.match(SnowflakeParser.SHOW)
            self.state = 11139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32 or _la==449 or _la==666 or _la==721:
                self.state = 11138
                _la = self._input.LA(1)
                if not(_la==32 or _la==449 or _la==666 or _la==721):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 11141
            self.match(SnowflakeParser.INTEGRATIONS)
            self.state = 11143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11142
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_locksContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def LOCKS(self):
            return self.getToken(SnowflakeParser.LOCKS, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_locks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_locks" ):
                listener.enterShow_locks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_locks" ):
                listener.exitShow_locks(self)




    def show_locks(self):

        localctx = SnowflakeParser.Show_locksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_show_locks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11145
            self.match(SnowflakeParser.SHOW)
            self.state = 11146
            self.match(SnowflakeParser.LOCKS)
            self.state = 11149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11147
                self.match(SnowflakeParser.IN)
                self.state = 11148
                self.match(SnowflakeParser.ACCOUNT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_managed_accountsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def MANAGED(self):
            return self.getToken(SnowflakeParser.MANAGED, 0)

        def ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ACCOUNTS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_managed_accounts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_managed_accounts" ):
                listener.enterShow_managed_accounts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_managed_accounts" ):
                listener.exitShow_managed_accounts(self)




    def show_managed_accounts(self):

        localctx = SnowflakeParser.Show_managed_accountsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_show_managed_accounts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11151
            self.match(SnowflakeParser.SHOW)
            self.state = 11152
            self.match(SnowflakeParser.MANAGED)
            self.state = 11153
            self.match(SnowflakeParser.ACCOUNTS)
            self.state = 11155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11154
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_masking_policiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def MASKING(self):
            return self.getToken(SnowflakeParser.MASKING, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_masking_policies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_masking_policies" ):
                listener.enterShow_masking_policies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_masking_policies" ):
                listener.exitShow_masking_policies(self)




    def show_masking_policies(self):

        localctx = SnowflakeParser.Show_masking_policiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_show_masking_policies)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11157
            self.match(SnowflakeParser.SHOW)
            self.state = 11158
            self.match(SnowflakeParser.MASKING)
            self.state = 11159
            self.match(SnowflakeParser.POLICIES)
            self.state = 11161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11160
                self.like_pattern()


            self.state = 11164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11163
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_objContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_in_obj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_obj" ):
                listener.enterIn_obj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_obj" ):
                listener.exitIn_obj(self)




    def in_obj(self):

        localctx = SnowflakeParser.In_objContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_in_obj)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11166
            self.match(SnowflakeParser.IN)
            self.state = 11175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1414,self._ctx)
            if la_ == 1:
                self.state = 11167
                self.match(SnowflakeParser.ACCOUNT)
                pass

            elif la_ == 2:
                self.state = 11168
                self.match(SnowflakeParser.DATABASE)
                pass

            elif la_ == 3:
                self.state = 11169
                self.match(SnowflakeParser.DATABASE)
                self.state = 11170
                self.id_()
                pass

            elif la_ == 4:
                self.state = 11171
                self.match(SnowflakeParser.SCHEMA)
                pass

            elif la_ == 5:
                self.state = 11172
                self.match(SnowflakeParser.SCHEMA)
                self.state = 11173
                self.schema_name()
                pass

            elif la_ == 6:
                self.state = 11174
                self.schema_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_obj_2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_in_obj_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_obj_2" ):
                listener.enterIn_obj_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_obj_2" ):
                listener.exitIn_obj_2(self)




    def in_obj_2(self):

        localctx = SnowflakeParser.In_obj_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_in_obj_2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11177
            self.match(SnowflakeParser.IN)
            self.state = 11190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1417,self._ctx)
            if la_ == 1:
                self.state = 11178
                self.match(SnowflakeParser.ACCOUNT)
                pass

            elif la_ == 2:
                self.state = 11179
                self.match(SnowflakeParser.DATABASE)
                self.state = 11181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 11180
                    self.id_()


                pass

            elif la_ == 3:
                self.state = 11183
                self.match(SnowflakeParser.SCHEMA)
                self.state = 11185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 11184
                    self.schema_name()


                pass

            elif la_ == 4:
                self.state = 11187
                self.match(SnowflakeParser.TABLE)
                pass

            elif la_ == 5:
                self.state = 11188
                self.match(SnowflakeParser.TABLE)
                self.state = 11189
                self.object_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_materialized_viewsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def MATERIALIZED(self):
            return self.getToken(SnowflakeParser.MATERIALIZED, 0)

        def VIEWS(self):
            return self.getToken(SnowflakeParser.VIEWS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_materialized_views

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_materialized_views" ):
                listener.enterShow_materialized_views(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_materialized_views" ):
                listener.exitShow_materialized_views(self)




    def show_materialized_views(self):

        localctx = SnowflakeParser.Show_materialized_viewsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_show_materialized_views)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11192
            self.match(SnowflakeParser.SHOW)
            self.state = 11193
            self.match(SnowflakeParser.MATERIALIZED)
            self.state = 11194
            self.match(SnowflakeParser.VIEWS)
            self.state = 11196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11195
                self.like_pattern()


            self.state = 11199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11198
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_network_policiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_network_policies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_network_policies" ):
                listener.enterShow_network_policies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_network_policies" ):
                listener.exitShow_network_policies(self)




    def show_network_policies(self):

        localctx = SnowflakeParser.Show_network_policiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_show_network_policies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11201
            self.match(SnowflakeParser.SHOW)
            self.state = 11202
            self.match(SnowflakeParser.NETWORK)
            self.state = 11203
            self.match(SnowflakeParser.POLICIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_objectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def OBJECTS(self):
            return self.getToken(SnowflakeParser.OBJECTS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_objects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_objects" ):
                listener.enterShow_objects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_objects" ):
                listener.exitShow_objects(self)




    def show_objects(self):

        localctx = SnowflakeParser.Show_objectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_show_objects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11205
            self.match(SnowflakeParser.SHOW)
            self.state = 11206
            self.match(SnowflakeParser.OBJECTS)
            self.state = 11208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11207
                self.like_pattern()


            self.state = 11211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11210
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_organization_accountsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def ORGANIZATION(self):
            return self.getToken(SnowflakeParser.ORGANIZATION, 0)

        def ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ACCOUNTS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_organization_accounts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_organization_accounts" ):
                listener.enterShow_organization_accounts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_organization_accounts" ):
                listener.exitShow_organization_accounts(self)




    def show_organization_accounts(self):

        localctx = SnowflakeParser.Show_organization_accountsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_show_organization_accounts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11213
            self.match(SnowflakeParser.SHOW)
            self.state = 11214
            self.match(SnowflakeParser.ORGANIZATION)
            self.state = 11215
            self.match(SnowflakeParser.ACCOUNTS)
            self.state = 11217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11216
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def FOR(self):
            return self.getToken(SnowflakeParser.FOR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_in_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_for" ):
                listener.enterIn_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_for" ):
                listener.exitIn_for(self)




    def in_for(self):

        localctx = SnowflakeParser.In_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_in_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11219
            _la = self._input.LA(1)
            if not(_la==278 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def PARAMETERS(self):
            return self.getToken(SnowflakeParser.PARAMETERS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_for(self):
            return self.getTypedRuleContext(SnowflakeParser.In_forContext,0)


        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def TASK(self):
            return self.getToken(SnowflakeParser.TASK, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_parameters" ):
                listener.enterShow_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_parameters" ):
                listener.exitShow_parameters(self)




    def show_parameters(self):

        localctx = SnowflakeParser.Show_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_show_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11221
            self.match(SnowflakeParser.SHOW)
            self.state = 11222
            self.match(SnowflakeParser.PARAMETERS)
            self.state = 11224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11223
                self.like_pattern()


            self.state = 11241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278 or _la==340:
                self.state = 11226
                self.in_for()
                self.state = 11239
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [672]:
                    self.state = 11227
                    self.match(SnowflakeParser.SESSION)
                    pass
                elif token in [6]:
                    self.state = 11228
                    self.match(SnowflakeParser.ACCOUNT)
                    pass
                elif token in [816]:
                    self.state = 11229
                    self.match(SnowflakeParser.USER)
                    self.state = 11231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11230
                        self.id_()


                    pass
                elif token in [169, 656, 757, 838]:
                    self.state = 11233
                    _la = self._input.LA(1)
                    if not(_la==169 or _la==656 or _la==757 or _la==838):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 11235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11234
                        self.id_()


                    pass
                elif token in [747]:
                    self.state = 11237
                    self.match(SnowflakeParser.TABLE)
                    self.state = 11238
                    self.object_name()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_pipesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def PIPES(self):
            return self.getToken(SnowflakeParser.PIPES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_pipes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_pipes" ):
                listener.enterShow_pipes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_pipes" ):
                listener.exitShow_pipes(self)




    def show_pipes(self):

        localctx = SnowflakeParser.Show_pipesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_show_pipes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11243
            self.match(SnowflakeParser.SHOW)
            self.state = 11244
            self.match(SnowflakeParser.PIPES)
            self.state = 11246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11245
                self.like_pattern()


            self.state = 11249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11248
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_primary_keysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def PRIMARY(self):
            return self.getToken(SnowflakeParser.PRIMARY, 0)

        def KEYS(self):
            return self.getToken(SnowflakeParser.KEYS, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def in_obj_2(self):
            return self.getTypedRuleContext(SnowflakeParser.In_obj_2Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_primary_keys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_primary_keys" ):
                listener.enterShow_primary_keys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_primary_keys" ):
                listener.exitShow_primary_keys(self)




    def show_primary_keys(self):

        localctx = SnowflakeParser.Show_primary_keysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_show_primary_keys)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11251
            self.match(SnowflakeParser.SHOW)
            self.state = 11253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 11252
                self.match(SnowflakeParser.TERSE)


            self.state = 11255
            self.match(SnowflakeParser.PRIMARY)
            self.state = 11256
            self.match(SnowflakeParser.KEYS)
            self.state = 11258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11257
                self.in_obj_2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_proceduresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def PROCEDURES(self):
            return self.getToken(SnowflakeParser.PROCEDURES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_procedures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_procedures" ):
                listener.enterShow_procedures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_procedures" ):
                listener.exitShow_procedures(self)




    def show_procedures(self):

        localctx = SnowflakeParser.Show_proceduresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_show_procedures)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11260
            self.match(SnowflakeParser.SHOW)
            self.state = 11261
            self.match(SnowflakeParser.PROCEDURES)
            self.state = 11263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11262
                self.like_pattern()


            self.state = 11266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11265
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_regionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def REGIONS(self):
            return self.getToken(SnowflakeParser.REGIONS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_regions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_regions" ):
                listener.enterShow_regions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_regions" ):
                listener.exitShow_regions(self)




    def show_regions(self):

        localctx = SnowflakeParser.Show_regionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_show_regions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11268
            self.match(SnowflakeParser.SHOW)
            self.state = 11269
            self.match(SnowflakeParser.REGIONS)
            self.state = 11271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11270
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_replication_accountsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def ACCOUNTS(self):
            return self.getToken(SnowflakeParser.ACCOUNTS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_replication_accounts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_replication_accounts" ):
                listener.enterShow_replication_accounts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_replication_accounts" ):
                listener.exitShow_replication_accounts(self)




    def show_replication_accounts(self):

        localctx = SnowflakeParser.Show_replication_accountsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_show_replication_accounts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11273
            self.match(SnowflakeParser.SHOW)
            self.state = 11274
            self.match(SnowflakeParser.REPLICATION)
            self.state = 11275
            self.match(SnowflakeParser.ACCOUNTS)
            self.state = 11277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11276
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_replication_databasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def PRIMARY(self):
            return self.getToken(SnowflakeParser.PRIMARY, 0)

        def account_identifier(self):
            return self.getTypedRuleContext(SnowflakeParser.Account_identifierContext,0)


        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_replication_databases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_replication_databases" ):
                listener.enterShow_replication_databases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_replication_databases" ):
                listener.exitShow_replication_databases(self)




    def show_replication_databases(self):

        localctx = SnowflakeParser.Show_replication_databasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_show_replication_databases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11279
            self.match(SnowflakeParser.SHOW)
            self.state = 11280
            self.match(SnowflakeParser.REPLICATION)
            self.state = 11281
            self.match(SnowflakeParser.DATABASES)
            self.state = 11283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11282
                self.like_pattern()


            self.state = 11291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==847:
                self.state = 11285
                self.match(SnowflakeParser.WITH)
                self.state = 11286
                self.match(SnowflakeParser.PRIMARY)
                self.state = 11287
                self.account_identifier()
                self.state = 11288
                self.match(SnowflakeParser.DOT)
                self.state = 11289
                self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_replication_groupsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def GROUPS(self):
            return self.getToken(SnowflakeParser.GROUPS, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_replication_groups

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_replication_groups" ):
                listener.enterShow_replication_groups(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_replication_groups" ):
                listener.exitShow_replication_groups(self)




    def show_replication_groups(self):

        localctx = SnowflakeParser.Show_replication_groupsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_show_replication_groups)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11293
            self.match(SnowflakeParser.SHOW)
            self.state = 11294
            self.match(SnowflakeParser.REPLICATION)
            self.state = 11295
            self.match(SnowflakeParser.GROUPS)
            self.state = 11299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11296
                self.match(SnowflakeParser.IN)
                self.state = 11297
                self.match(SnowflakeParser.ACCOUNT)
                self.state = 11298
                self.id_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_resource_monitorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def MONITORS(self):
            return self.getToken(SnowflakeParser.MONITORS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_resource_monitors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_resource_monitors" ):
                listener.enterShow_resource_monitors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_resource_monitors" ):
                listener.exitShow_resource_monitors(self)




    def show_resource_monitors(self):

        localctx = SnowflakeParser.Show_resource_monitorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_show_resource_monitors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11301
            self.match(SnowflakeParser.SHOW)
            self.state = 11302
            self.match(SnowflakeParser.RESOURCE)
            self.state = 11303
            self.match(SnowflakeParser.MONITORS)
            self.state = 11305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11304
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_rolesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def ROLES(self):
            return self.getToken(SnowflakeParser.ROLES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_roles" ):
                listener.enterShow_roles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_roles" ):
                listener.exitShow_roles(self)




    def show_roles(self):

        localctx = SnowflakeParser.Show_rolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_show_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11307
            self.match(SnowflakeParser.SHOW)
            self.state = 11308
            self.match(SnowflakeParser.ROLES)
            self.state = 11310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11309
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_row_access_policiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ACCESS(self):
            return self.getToken(SnowflakeParser.ACCESS, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_row_access_policies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_row_access_policies" ):
                listener.enterShow_row_access_policies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_row_access_policies" ):
                listener.exitShow_row_access_policies(self)




    def show_row_access_policies(self):

        localctx = SnowflakeParser.Show_row_access_policiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_show_row_access_policies)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11312
            self.match(SnowflakeParser.SHOW)
            self.state = 11313
            self.match(SnowflakeParser.ROW)
            self.state = 11314
            self.match(SnowflakeParser.ACCESS)
            self.state = 11315
            self.match(SnowflakeParser.POLICIES)
            self.state = 11317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11316
                self.like_pattern()


            self.state = 11320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11319
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_schemasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def SCHEMAS(self):
            return self.getToken(SnowflakeParser.SCHEMAS, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def HISTORY(self):
            return self.getToken(SnowflakeParser.HISTORY, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_schemas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_schemas" ):
                listener.enterShow_schemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_schemas" ):
                listener.exitShow_schemas(self)




    def show_schemas(self):

        localctx = SnowflakeParser.Show_schemasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_show_schemas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11322
            self.match(SnowflakeParser.SHOW)
            self.state = 11324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 11323
                self.match(SnowflakeParser.TERSE)


            self.state = 11326
            self.match(SnowflakeParser.SCHEMAS)
            self.state = 11328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==323:
                self.state = 11327
                self.match(SnowflakeParser.HISTORY)


            self.state = 11331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11330
                self.like_pattern()


            self.state = 11341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11333
                self.match(SnowflakeParser.IN)
                self.state = 11339
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6]:
                    self.state = 11334
                    self.match(SnowflakeParser.ACCOUNT)
                    pass
                elif token in [169]:
                    self.state = 11335
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 11337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11336
                        self.id_()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 11344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 11343
                self.starts_with()


            self.state = 11347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 11346
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_secretsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None # Id_Context
            self.s = None # Schema_nameContext
            self.a = None # Id_Context
            self.p = None # Id_Context

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def SECRETS(self):
            return self.getToken(SnowflakeParser.SECRETS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def APPLICATION(self):
            return self.getToken(SnowflakeParser.APPLICATION, 0)

        def PACKAGE(self):
            return self.getToken(SnowflakeParser.PACKAGE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_secrets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_secrets" ):
                listener.enterShow_secrets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_secrets" ):
                listener.exitShow_secrets(self)




    def show_secrets(self):

        localctx = SnowflakeParser.Show_secretsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_show_secrets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11349
            self.match(SnowflakeParser.SHOW)
            self.state = 11350
            self.match(SnowflakeParser.SECRETS)
            self.state = 11352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11351
                self.like_pattern()


            self.state = 11371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11354
                self.match(SnowflakeParser.IN)
                self.state = 11369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1454,self._ctx)
                if la_ == 1:
                    self.state = 11355
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 11357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==169:
                        self.state = 11356
                        self.match(SnowflakeParser.DATABASE)


                    self.state = 11359
                    localctx.d = self.id_()
                    pass

                elif la_ == 3:
                    self.state = 11361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==656:
                        self.state = 11360
                        self.match(SnowflakeParser.SCHEMA)


                    self.state = 11363
                    localctx.s = self.schema_name()
                    pass

                elif la_ == 4:
                    self.state = 11364
                    self.match(SnowflakeParser.APPLICATION)
                    self.state = 11365
                    localctx.a = self.id_()
                    pass

                elif la_ == 5:
                    self.state = 11366
                    self.match(SnowflakeParser.APPLICATION)
                    self.state = 11367
                    self.match(SnowflakeParser.PACKAGE)
                    self.state = 11368
                    localctx.p = self.id_()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_sequencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def SEQUENCES(self):
            return self.getToken(SnowflakeParser.SEQUENCES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_sequences

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_sequences" ):
                listener.enterShow_sequences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_sequences" ):
                listener.exitShow_sequences(self)




    def show_sequences(self):

        localctx = SnowflakeParser.Show_sequencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_show_sequences)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11373
            self.match(SnowflakeParser.SHOW)
            self.state = 11374
            self.match(SnowflakeParser.SEQUENCES)
            self.state = 11376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11375
                self.like_pattern()


            self.state = 11379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11378
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_session_policiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_session_policies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_session_policies" ):
                listener.enterShow_session_policies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_session_policies" ):
                listener.exitShow_session_policies(self)




    def show_session_policies(self):

        localctx = SnowflakeParser.Show_session_policiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_show_session_policies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11381
            self.match(SnowflakeParser.SHOW)
            self.state = 11382
            self.match(SnowflakeParser.SESSION)
            self.state = 11383
            self.match(SnowflakeParser.POLICIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_password_policiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_password_policies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_password_policies" ):
                listener.enterShow_password_policies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_password_policies" ):
                listener.exitShow_password_policies(self)




    def show_password_policies(self):

        localctx = SnowflakeParser.Show_password_policiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_show_password_policies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11385
            self.match(SnowflakeParser.SHOW)
            self.state = 11386
            self.match(SnowflakeParser.PASSWORD)
            self.state = 11387
            self.match(SnowflakeParser.POLICIES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_sharesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def SHARES(self):
            return self.getToken(SnowflakeParser.SHARES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_shares

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_shares" ):
                listener.enterShow_shares(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_shares" ):
                listener.exitShow_shares(self)




    def show_shares(self):

        localctx = SnowflakeParser.Show_sharesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_show_shares)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11389
            self.match(SnowflakeParser.SHOW)
            self.state = 11390
            self.match(SnowflakeParser.SHARES)
            self.state = 11392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11391
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_shares_in_failover_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def SHARES(self):
            return self.getToken(SnowflakeParser.SHARES, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def FAILOVER(self):
            return self.getToken(SnowflakeParser.FAILOVER, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_shares_in_failover_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_shares_in_failover_group" ):
                listener.enterShow_shares_in_failover_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_shares_in_failover_group" ):
                listener.exitShow_shares_in_failover_group(self)




    def show_shares_in_failover_group(self):

        localctx = SnowflakeParser.Show_shares_in_failover_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_show_shares_in_failover_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11394
            self.match(SnowflakeParser.SHOW)
            self.state = 11395
            self.match(SnowflakeParser.SHARES)
            self.state = 11396
            self.match(SnowflakeParser.IN)
            self.state = 11397
            self.match(SnowflakeParser.FAILOVER)
            self.state = 11398
            self.match(SnowflakeParser.GROUP)
            self.state = 11399
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_shares_in_replication_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def SHARES(self):
            return self.getToken(SnowflakeParser.SHARES, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def REPLICATION(self):
            return self.getToken(SnowflakeParser.REPLICATION, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_shares_in_replication_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_shares_in_replication_group" ):
                listener.enterShow_shares_in_replication_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_shares_in_replication_group" ):
                listener.exitShow_shares_in_replication_group(self)




    def show_shares_in_replication_group(self):

        localctx = SnowflakeParser.Show_shares_in_replication_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_show_shares_in_replication_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11401
            self.match(SnowflakeParser.SHOW)
            self.state = 11402
            self.match(SnowflakeParser.SHARES)
            self.state = 11403
            self.match(SnowflakeParser.IN)
            self.state = 11404
            self.match(SnowflakeParser.REPLICATION)
            self.state = 11405
            self.match(SnowflakeParser.GROUP)
            self.state = 11406
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_streamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def STREAMS(self):
            return self.getToken(SnowflakeParser.STREAMS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_streams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_streams" ):
                listener.enterShow_streams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_streams" ):
                listener.exitShow_streams(self)




    def show_streams(self):

        localctx = SnowflakeParser.Show_streamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_show_streams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11408
            self.match(SnowflakeParser.SHOW)
            self.state = 11409
            self.match(SnowflakeParser.STREAMS)
            self.state = 11411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11410
                self.like_pattern()


            self.state = 11414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11413
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_tablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(SnowflakeParser.TABLES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_tables" ):
                listener.enterShow_tables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_tables" ):
                listener.exitShow_tables(self)




    def show_tables(self):

        localctx = SnowflakeParser.Show_tablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_show_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11416
            self.match(SnowflakeParser.SHOW)
            self.state = 11417
            self.match(SnowflakeParser.TABLES)
            self.state = 11419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11418
                self.like_pattern()


            self.state = 11422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11421
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_tagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def TAGS(self):
            return self.getToken(SnowflakeParser.TAGS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_tags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_tags" ):
                listener.enterShow_tags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_tags" ):
                listener.exitShow_tags(self)




    def show_tags(self):

        localctx = SnowflakeParser.Show_tagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_show_tags)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11424
            self.match(SnowflakeParser.SHOW)
            self.state = 11425
            self.match(SnowflakeParser.TAGS)
            self.state = 11427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1463,self._ctx)
            if la_ == 1:
                self.state = 11426
                self.like_pattern()


            self.state = 11438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1464,self._ctx)
            if la_ == 1:
                self.state = 11429
                self.match(SnowflakeParser.IN)
                self.state = 11430
                self.match(SnowflakeParser.ACCOUNT)

            elif la_ == 2:
                self.state = 11431
                self.match(SnowflakeParser.DATABASE)

            elif la_ == 3:
                self.state = 11432
                self.match(SnowflakeParser.DATABASE)
                self.state = 11433
                self.id_()

            elif la_ == 4:
                self.state = 11434
                self.match(SnowflakeParser.SCHEMA)

            elif la_ == 5:
                self.state = 11435
                self.match(SnowflakeParser.SCHEMA)
                self.state = 11436
                self.schema_name()

            elif la_ == 6:
                self.state = 11437
                self.schema_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_tasksContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def TASKS(self):
            return self.getToken(SnowflakeParser.TASKS, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_tasks

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_tasks" ):
                listener.enterShow_tasks(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_tasks" ):
                listener.exitShow_tasks(self)




    def show_tasks(self):

        localctx = SnowflakeParser.Show_tasksContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_show_tasks)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11440
            self.match(SnowflakeParser.SHOW)
            self.state = 11442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 11441
                self.match(SnowflakeParser.TERSE)


            self.state = 11444
            self.match(SnowflakeParser.TASKS)
            self.state = 11446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11445
                self.like_pattern()


            self.state = 11462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11448
                self.match(SnowflakeParser.IN)
                self.state = 11460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1470,self._ctx)
                if la_ == 1:
                    self.state = 11449
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 11450
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 11452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11451
                        self.id_()


                    pass

                elif la_ == 3:
                    self.state = 11455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==656:
                        self.state = 11454
                        self.match(SnowflakeParser.SCHEMA)


                    self.state = 11458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11457
                        self.schema_name()


                    pass




            self.state = 11465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 11464
                self.starts_with()


            self.state = 11468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 11467
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_transactionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def TRANSACTIONS(self):
            return self.getToken(SnowflakeParser.TRANSACTIONS, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_transactions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_transactions" ):
                listener.enterShow_transactions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_transactions" ):
                listener.exitShow_transactions(self)




    def show_transactions(self):

        localctx = SnowflakeParser.Show_transactionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_show_transactions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11470
            self.match(SnowflakeParser.SHOW)
            self.state = 11471
            self.match(SnowflakeParser.TRANSACTIONS)
            self.state = 11474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11472
                self.match(SnowflakeParser.IN)
                self.state = 11473
                self.match(SnowflakeParser.ACCOUNT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_user_functionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def FUNCTIONS(self):
            return self.getToken(SnowflakeParser.FUNCTIONS, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def in_obj(self):
            return self.getTypedRuleContext(SnowflakeParser.In_objContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_user_functions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_user_functions" ):
                listener.enterShow_user_functions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_user_functions" ):
                listener.exitShow_user_functions(self)




    def show_user_functions(self):

        localctx = SnowflakeParser.Show_user_functionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_show_user_functions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11476
            self.match(SnowflakeParser.SHOW)
            self.state = 11477
            self.match(SnowflakeParser.USER)
            self.state = 11478
            self.match(SnowflakeParser.FUNCTIONS)
            self.state = 11480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11479
                self.like_pattern()


            self.state = 11483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11482
                self.in_obj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_usersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def USERS(self):
            return self.getToken(SnowflakeParser.USERS, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def STARTS(self):
            return self.getToken(SnowflakeParser.STARTS, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def LIMIT(self):
            return self.getToken(SnowflakeParser.LIMIT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_users

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_users" ):
                listener.enterShow_users(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_users" ):
                listener.exitShow_users(self)




    def show_users(self):

        localctx = SnowflakeParser.Show_usersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_show_users)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11485
            self.match(SnowflakeParser.SHOW)
            self.state = 11487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 11486
                self.match(SnowflakeParser.TERSE)


            self.state = 11489
            self.match(SnowflakeParser.USERS)
            self.state = 11491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11490
                self.like_pattern()


            self.state = 11496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 11493
                self.match(SnowflakeParser.STARTS)
                self.state = 11494
                self.match(SnowflakeParser.WITH)
                self.state = 11495
                self.string()


            self.state = 11500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 11498
                self.match(SnowflakeParser.LIMIT)
                self.state = 11499
                self.num()


            self.state = 11504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==285:
                self.state = 11502
                self.match(SnowflakeParser.FROM)
                self.state = 11503
                self.string()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_variablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def VARIABLES(self):
            return self.getToken(SnowflakeParser.VARIABLES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_variables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_variables" ):
                listener.enterShow_variables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_variables" ):
                listener.exitShow_variables(self)




    def show_variables(self):

        localctx = SnowflakeParser.Show_variablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_show_variables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11506
            self.match(SnowflakeParser.SHOW)
            self.state = 11507
            self.match(SnowflakeParser.VARIABLES)
            self.state = 11509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11508
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_versions_in_datasetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ds = None # Object_nameContext

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def VERSIONS(self):
            return self.getToken(SnowflakeParser.VERSIONS, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def DATASET(self):
            return self.getToken(SnowflakeParser.DATASET, 0)

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def LIMIT(self):
            return self.getToken(SnowflakeParser.LIMIT, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_versions_in_dataset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_versions_in_dataset" ):
                listener.enterShow_versions_in_dataset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_versions_in_dataset" ):
                listener.exitShow_versions_in_dataset(self)




    def show_versions_in_dataset(self):

        localctx = SnowflakeParser.Show_versions_in_datasetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_show_versions_in_dataset)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11511
            self.match(SnowflakeParser.SHOW)
            self.state = 11512
            self.match(SnowflakeParser.VERSIONS)
            self.state = 11514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11513
                self.like_pattern()


            self.state = 11516
            self.match(SnowflakeParser.IN)
            self.state = 11517
            self.match(SnowflakeParser.DATASET)
            self.state = 11518
            localctx.ds = self.object_name()
            self.state = 11521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 11519
                self.match(SnowflakeParser.LIMIT)
                self.state = 11520
                self.num()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_viewsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def VIEWS(self):
            return self.getToken(SnowflakeParser.VIEWS, 0)

        def TERSE(self):
            return self.getToken(SnowflakeParser.TERSE, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def starts_with(self):
            return self.getTypedRuleContext(SnowflakeParser.Starts_withContext,0)


        def limit_rows(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_rowsContext,0)


        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def DATABASE(self):
            return self.getToken(SnowflakeParser.DATABASE, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def SCHEMA(self):
            return self.getToken(SnowflakeParser.SCHEMA, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_views

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_views" ):
                listener.enterShow_views(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_views" ):
                listener.exitShow_views(self)




    def show_views(self):

        localctx = SnowflakeParser.Show_viewsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_show_views)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11523
            self.match(SnowflakeParser.SHOW)
            self.state = 11525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==761:
                self.state = 11524
                self.match(SnowflakeParser.TERSE)


            self.state = 11527
            self.match(SnowflakeParser.VIEWS)
            self.state = 11529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11528
                self.like_pattern()


            self.state = 11545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==340:
                self.state = 11531
                self.match(SnowflakeParser.IN)
                self.state = 11543
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1490,self._ctx)
                if la_ == 1:
                    self.state = 11532
                    self.match(SnowflakeParser.ACCOUNT)
                    pass

                elif la_ == 2:
                    self.state = 11533
                    self.match(SnowflakeParser.DATABASE)
                    self.state = 11535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11534
                        self.id_()


                    pass

                elif la_ == 3:
                    self.state = 11538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==656:
                        self.state = 11537
                        self.match(SnowflakeParser.SCHEMA)


                    self.state = 11541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                        self.state = 11540
                        self.schema_name()


                    pass




            self.state = 11548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==712:
                self.state = 11547
                self.starts_with()


            self.state = 11551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 11550
                self.limit_rows()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_warehousesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def WAREHOUSES(self):
            return self.getToken(SnowflakeParser.WAREHOUSES, 0)

        def like_pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.Like_patternContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_show_warehouses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_warehouses" ):
                listener.enterShow_warehouses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_warehouses" ):
                listener.exitShow_warehouses(self)




    def show_warehouses(self):

        localctx = SnowflakeParser.Show_warehousesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_show_warehouses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11553
            self.match(SnowflakeParser.SHOW)
            self.state = 11554
            self.match(SnowflakeParser.WAREHOUSES)
            self.state = 11556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==385:
                self.state = 11555
                self.like_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(SnowflakeParser.LIKE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_like_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_pattern" ):
                listener.enterLike_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_pattern" ):
                listener.exitLike_pattern(self)




    def like_pattern(self):

        localctx = SnowflakeParser.Like_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_like_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11558
            self.match(SnowflakeParser.LIKE)
            self.state = 11559
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Account_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_account_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccount_identifier" ):
                listener.enterAccount_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccount_identifier" ):
                listener.exitAccount_identifier(self)




    def account_identifier(self):

        localctx = SnowflakeParser.Account_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_account_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11561
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None # Id_Context
            self.s = None # Id_Context

        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SnowflakeParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_schema_name)
        try:
            self.state = 11568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1495,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11563
                localctx.d = self.id_()
                self.state = 11564
                self.match(SnowflakeParser.DOT)
                self.state = 11565
                localctx.s = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11567
                localctx.s = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def PARAMETERS(self):
            return self.getToken(SnowflakeParser.PARAMETERS, 0)

        def DATABASES(self):
            return self.getToken(SnowflakeParser.DATABASES, 0)

        def INTEGRATIONS(self):
            return self.getToken(SnowflakeParser.INTEGRATIONS, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def POLICIES(self):
            return self.getToken(SnowflakeParser.POLICIES, 0)

        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def MONITORS(self):
            return self.getToken(SnowflakeParser.MONITORS, 0)

        def ROLES(self):
            return self.getToken(SnowflakeParser.ROLES, 0)

        def SHARES(self):
            return self.getToken(SnowflakeParser.SHARES, 0)

        def USERS(self):
            return self.getToken(SnowflakeParser.USERS, 0)

        def WAREHOUSES(self):
            return self.getToken(SnowflakeParser.WAREHOUSES, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type" ):
                listener.enterObject_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type" ):
                listener.exitObject_type(self)




    def object_type(self):

        localctx = SnowflakeParser.Object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_object_type)
        try:
            self.state = 11582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11570
                self.match(SnowflakeParser.ACCOUNT)
                self.state = 11571
                self.match(SnowflakeParser.PARAMETERS)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11572
                self.match(SnowflakeParser.DATABASES)
                pass
            elif token in [355]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11573
                self.match(SnowflakeParser.INTEGRATIONS)
                pass
            elif token in [438]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11574
                self.match(SnowflakeParser.NETWORK)
                self.state = 11575
                self.match(SnowflakeParser.POLICIES)
                pass
            elif token in [602]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11576
                self.match(SnowflakeParser.RESOURCE)
                self.state = 11577
                self.match(SnowflakeParser.MONITORS)
                pass
            elif token in [621]:
                self.enterOuterAlt(localctx, 6)
                self.state = 11578
                self.match(SnowflakeParser.ROLES)
                pass
            elif token in [679]:
                self.enterOuterAlt(localctx, 7)
                self.state = 11579
                self.match(SnowflakeParser.SHARES)
                pass
            elif token in [818]:
                self.enterOuterAlt(localctx, 8)
                self.state = 11580
                self.match(SnowflakeParser.USERS)
                pass
            elif token in [839]:
                self.enterOuterAlt(localctx, 9)
                self.state = 11581
                self.match(SnowflakeParser.WAREHOUSES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_type_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Object_typeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Object_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_type_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type_list" ):
                listener.enterObject_type_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type_list" ):
                listener.exitObject_type_list(self)




    def object_type_list(self):

        localctx = SnowflakeParser.Object_type_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_object_type_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11584
            self.object_type()
            self.state = 11589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 11585
                self.match(SnowflakeParser.COMMA)
                self.state = 11586
                self.object_type()
                self.state = 11591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tag_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_tag_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTag_value" ):
                listener.enterTag_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTag_value" ):
                listener.exitTag_value(self)




    def tag_value(self):

        localctx = SnowflakeParser.Tag_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_tag_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11592
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_arg_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_data_type" ):
                listener.enterArg_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_data_type" ):
                listener.exitArg_data_type(self)




    def arg_data_type(self):

        localctx = SnowflakeParser.Arg_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_arg_data_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11594
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_arg_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_name" ):
                listener.enterArg_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_name" ):
                listener.exitArg_name(self)




    def arg_name(self):

        localctx = SnowflakeParser.Arg_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_arg_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11596
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_param_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_name" ):
                listener.enterParam_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_name" ):
                listener.exitParam_name(self)




    def param_name(self):

        localctx = SnowflakeParser.Param_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_param_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11598
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Region_group_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_region_group_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegion_group_id" ):
                listener.enterRegion_group_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegion_group_id" ):
                listener.exitRegion_group_id(self)




    def region_group_id(self):

        localctx = SnowflakeParser.Region_group_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_region_group_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11600
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Snowflake_region_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_snowflake_region_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnowflake_region_id" ):
                listener.enterSnowflake_region_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnowflake_region_id" ):
                listener.exitSnowflake_region_id(self)




    def snowflake_region_id(self):

        localctx = SnowflakeParser.Snowflake_region_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_snowflake_region_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11602
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SnowflakeParser.STRING, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = SnowflakeParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11604
            self.match(SnowflakeParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_string_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_list" ):
                listener.enterString_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_list" ):
                listener.exitString_list(self)




    def string_list(self):

        localctx = SnowflakeParser.String_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_string_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11606
            self.string()
            self.state = 11611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 11607
                self.match(SnowflakeParser.COMMA)
                self.state = 11608
                self.string()
                self.state = 11613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_fnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def IDENTIFIER(self):
            return self.getToken(SnowflakeParser.IDENTIFIER, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_id_fn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_fn" ):
                listener.enterId_fn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_fn" ):
                listener.exitId_fn(self)




    def id_fn(self):

        localctx = SnowflakeParser.Id_fnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_id_fn)
        try:
            self.state = 11620
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1499,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11614
                self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11615
                self.match(SnowflakeParser.IDENTIFIER)
                self.state = 11616
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 11617
                self.id_()
                self.state = 11618
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(SnowflakeParser.ID, 0)

        def ID2(self):
            return self.getToken(SnowflakeParser.ID2, 0)

        def DOUBLE_QUOTE_ID(self):
            return self.getToken(SnowflakeParser.DOUBLE_QUOTE_ID, 0)

        def DOUBLE_QUOTE_BLANK(self):
            return self.getToken(SnowflakeParser.DOUBLE_QUOTE_BLANK, 0)

        def keyword(self):
            return self.getTypedRuleContext(SnowflakeParser.KeywordContext,0)


        def non_reserved_words(self):
            return self.getTypedRuleContext(SnowflakeParser.Non_reserved_wordsContext,0)


        def object_type_plural(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_type_pluralContext,0)


        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Builtin_functionContext,0)


        def unary_or_binary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Unary_or_binary_builtin_functionContext,0)


        def binary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Binary_builtin_functionContext,0)


        def binary_or_ternary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Binary_or_ternary_builtin_functionContext,0)


        def ternary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Ternary_builtin_functionContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_id_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_" ):
                listener.enterId_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_" ):
                listener.exitId_(self)




    def id_(self):

        localctx = SnowflakeParser.Id_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_id_)
        try:
            self.state = 11635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11622
                self.match(SnowflakeParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11623
                self.match(SnowflakeParser.ID2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11624
                self.match(SnowflakeParser.DOUBLE_QUOTE_ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11625
                self.match(SnowflakeParser.DOUBLE_QUOTE_BLANK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11626
                self.keyword()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11627
                self.non_reserved_words()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11628
                self.object_type_plural()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11629
                self.data_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11630
                self.builtin_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11631
                self.unary_or_binary_builtin_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 11632
                self.binary_builtin_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 11633
                self.binary_or_ternary_builtin_function()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 11634
                self.ternary_builtin_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(SnowflakeParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(SnowflakeParser.ACTION, 0)

        def ALERT(self):
            return self.getToken(SnowflakeParser.ALERT, 0)

        def AT_KEYWORD(self):
            return self.getToken(SnowflakeParser.AT_KEYWORD, 0)

        def CLUSTER(self):
            return self.getToken(SnowflakeParser.CLUSTER, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def CONDITION(self):
            return self.getToken(SnowflakeParser.CONDITION, 0)

        def COPY_OPTIONS_(self):
            return self.getToken(SnowflakeParser.COPY_OPTIONS_, 0)

        def DIRECTION(self):
            return self.getToken(SnowflakeParser.DIRECTION, 0)

        def EMAIL(self):
            return self.getToken(SnowflakeParser.EMAIL, 0)

        def FIRST_VALUE(self):
            return self.getToken(SnowflakeParser.FIRST_VALUE, 0)

        def FLATTEN(self):
            return self.getToken(SnowflakeParser.FLATTEN, 0)

        def FUNCTION(self):
            return self.getToken(SnowflakeParser.FUNCTION, 0)

        def IF(self):
            return self.getToken(SnowflakeParser.IF, 0)

        def JOIN(self):
            return self.getToken(SnowflakeParser.JOIN, 0)

        def KEY(self):
            return self.getToken(SnowflakeParser.KEY, 0)

        def LAG(self):
            return self.getToken(SnowflakeParser.LAG, 0)

        def LANGUAGE(self):
            return self.getToken(SnowflakeParser.LANGUAGE, 0)

        def LENGTH(self):
            return self.getToken(SnowflakeParser.LENGTH, 0)

        def MAX_CONCURRENCY_LEVEL(self):
            return self.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0)

        def MODE(self):
            return self.getToken(SnowflakeParser.MODE, 0)

        def NOORDER(self):
            return self.getToken(SnowflakeParser.NOORDER, 0)

        def ORDER(self):
            return self.getToken(SnowflakeParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SnowflakeParser.OUTER, 0)

        def POLICY(self):
            return self.getToken(SnowflakeParser.POLICY, 0)

        def RECURSIVE(self):
            return self.getToken(SnowflakeParser.RECURSIVE, 0)

        def REGION(self):
            return self.getToken(SnowflakeParser.REGION, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def ROLLUP(self):
            return self.getToken(SnowflakeParser.ROLLUP, 0)

        def ROW_NUMBER(self):
            return self.getToken(SnowflakeParser.ROW_NUMBER, 0)

        def SEQUENCE(self):
            return self.getToken(SnowflakeParser.SEQUENCE, 0)

        def SESSION(self):
            return self.getToken(SnowflakeParser.SESSION, 0)

        def STAGE(self):
            return self.getToken(SnowflakeParser.STAGE, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def TARGET_LAG(self):
            return self.getToken(SnowflakeParser.TARGET_LAG, 0)

        def TEMP(self):
            return self.getToken(SnowflakeParser.TEMP, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def TYPE(self):
            return self.getToken(SnowflakeParser.TYPE, 0)

        def USER(self):
            return self.getToken(SnowflakeParser.USER, 0)

        def VALUE(self):
            return self.getToken(SnowflakeParser.VALUE, 0)

        def VALUES(self):
            return self.getToken(SnowflakeParser.VALUES, 0)

        def WAREHOUSE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE, 0)

        def WAREHOUSE_TYPE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE_TYPE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SnowflakeParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11637
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 281474976744000) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4198529) != 0) or _la==198 or _la==213 or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & 2251799813687299) != 0) or ((((_la - 365)) & ~0x3f) == 0 and ((1 << (_la - 365)) & 4611826755916268321) != 0) or ((((_la - 446)) & ~0x3f) == 0 and ((1 << (_la - 446)) & 594475150812905473) != 0) or ((((_la - 544)) & ~0x3f) == 0 and ((1 << (_la - 544)) & 1116691496961) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & 5629499534213641) != 0) or ((((_la - 706)) & ~0x3f) == 0 and ((1 << (_la - 706)) & 1163336078745141249) != 0) or ((((_la - 803)) & ~0x3f) == 0 and ((1 << (_la - 803)) & 309438980097) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_reserved_wordsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNTADMIN(self):
            return self.getToken(SnowflakeParser.ACCOUNTADMIN, 0)

        def AES(self):
            return self.getToken(SnowflakeParser.AES, 0)

        def ALLOW_OVERLAPPING_EXECUTION(self):
            return self.getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0)

        def ARRAY_AGG(self):
            return self.getToken(SnowflakeParser.ARRAY_AGG, 0)

        def CHECKSUM(self):
            return self.getToken(SnowflakeParser.CHECKSUM, 0)

        def COLLECTION(self):
            return self.getToken(SnowflakeParser.COLLECTION, 0)

        def COMMENT(self):
            return self.getToken(SnowflakeParser.COMMENT, 0)

        def CONFIGURATION(self):
            return self.getToken(SnowflakeParser.CONFIGURATION, 0)

        def DATA(self):
            return self.getToken(SnowflakeParser.DATA, 0)

        def DAYS(self):
            return self.getToken(SnowflakeParser.DAYS, 0)

        def DEFINITION(self):
            return self.getToken(SnowflakeParser.DEFINITION, 0)

        def DELTA(self):
            return self.getToken(SnowflakeParser.DELTA, 0)

        def DISPLAY_NAME(self):
            return self.getToken(SnowflakeParser.DISPLAY_NAME, 0)

        def DOWNSTREAM(self):
            return self.getToken(SnowflakeParser.DOWNSTREAM, 0)

        def DYNAMIC(self):
            return self.getToken(SnowflakeParser.DYNAMIC, 0)

        def EDITION(self):
            return self.getToken(SnowflakeParser.EDITION, 0)

        def EMAIL(self):
            return self.getToken(SnowflakeParser.EMAIL, 0)

        def EMPTY_(self):
            return self.getToken(SnowflakeParser.EMPTY_, 0)

        def ENABLED(self):
            return self.getToken(SnowflakeParser.ENABLED, 0)

        def ERROR_INTEGRATION(self):
            return self.getToken(SnowflakeParser.ERROR_INTEGRATION, 0)

        def EVENT(self):
            return self.getToken(SnowflakeParser.EVENT, 0)

        def EXCHANGE(self):
            return self.getToken(SnowflakeParser.EXCHANGE, 0)

        def EXPIRY_DATE(self):
            return self.getToken(SnowflakeParser.EXPIRY_DATE, 0)

        def EXPR(self):
            return self.getToken(SnowflakeParser.EXPR, 0)

        def FILE(self):
            return self.getToken(SnowflakeParser.FILE, 0)

        def FILES(self):
            return self.getToken(SnowflakeParser.FILES, 0)

        def FIRST_NAME(self):
            return self.getToken(SnowflakeParser.FIRST_NAME, 0)

        def FIRST_VALUE(self):
            return self.getToken(SnowflakeParser.FIRST_VALUE, 0)

        def FREQUENCY(self):
            return self.getToken(SnowflakeParser.FREQUENCY, 0)

        def GLOBAL(self):
            return self.getToken(SnowflakeParser.GLOBAL, 0)

        def HIGH(self):
            return self.getToken(SnowflakeParser.HIGH, 0)

        def HOURS(self):
            return self.getToken(SnowflakeParser.HOURS, 0)

        def IDENTIFIER(self):
            return self.getToken(SnowflakeParser.IDENTIFIER, 0)

        def IDENTITY(self):
            return self.getToken(SnowflakeParser.IDENTITY, 0)

        def INCREMENTAL(self):
            return self.getToken(SnowflakeParser.INCREMENTAL, 0)

        def IMPORTED(self):
            return self.getToken(SnowflakeParser.IMPORTED, 0)

        def INDEX(self):
            return self.getToken(SnowflakeParser.INDEX, 0)

        def INITIALIZE(self):
            return self.getToken(SnowflakeParser.INITIALIZE, 0)

        def INPUT(self):
            return self.getToken(SnowflakeParser.INPUT, 0)

        def INTERVAL(self):
            return self.getToken(SnowflakeParser.INTERVAL, 0)

        def JAVASCRIPT(self):
            return self.getToken(SnowflakeParser.JAVASCRIPT, 0)

        def LAST_NAME(self):
            return self.getToken(SnowflakeParser.LAST_NAME, 0)

        def LAST_QUERY_ID(self):
            return self.getToken(SnowflakeParser.LAST_QUERY_ID, 0)

        def LEAD(self):
            return self.getToken(SnowflakeParser.LEAD, 0)

        def LOCAL(self):
            return self.getToken(SnowflakeParser.LOCAL, 0)

        def LOW(self):
            return self.getToken(SnowflakeParser.LOW, 0)

        def MAX_CONCURRENCY_LEVEL(self):
            return self.getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0)

        def MEDIUM(self):
            return self.getToken(SnowflakeParser.MEDIUM, 0)

        def MODE(self):
            return self.getToken(SnowflakeParser.MODE, 0)

        def NAME(self):
            return self.getToken(SnowflakeParser.NAME, 0)

        def NETWORK(self):
            return self.getToken(SnowflakeParser.NETWORK, 0)

        def NULLIF(self):
            return self.getToken(SnowflakeParser.NULLIF, 0)

        def NVL(self):
            return self.getToken(SnowflakeParser.NVL, 0)

        def OFFSET(self):
            return self.getToken(SnowflakeParser.OFFSET, 0)

        def OLD(self):
            return self.getToken(SnowflakeParser.OLD, 0)

        def ON_CREATE(self):
            return self.getToken(SnowflakeParser.ON_CREATE, 0)

        def ON_ERROR(self):
            return self.getToken(SnowflakeParser.ON_ERROR, 0)

        def ON_SCHEDULE(self):
            return self.getToken(SnowflakeParser.ON_SCHEDULE, 0)

        def OPTION(self):
            return self.getToken(SnowflakeParser.OPTION, 0)

        def ORGADMIN(self):
            return self.getToken(SnowflakeParser.ORGADMIN, 0)

        def OUTBOUND(self):
            return self.getToken(SnowflakeParser.OUTBOUND, 0)

        def OUTER(self):
            return self.getToken(SnowflakeParser.OUTER, 0)

        def OWNER(self):
            return self.getToken(SnowflakeParser.OWNER, 0)

        def PARTITION(self):
            return self.getToken(SnowflakeParser.PARTITION, 0)

        def PASSWORD(self):
            return self.getToken(SnowflakeParser.PASSWORD, 0)

        def PASSWORD_HISTORY(self):
            return self.getToken(SnowflakeParser.PASSWORD_HISTORY, 0)

        def PASSWORD_LOCKOUT_TIME_MINS(self):
            return self.getToken(SnowflakeParser.PASSWORD_LOCKOUT_TIME_MINS, 0)

        def PASSWORD_MAX_AGE_DAYS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MAX_AGE_DAYS, 0)

        def PASSWORD_MAX_LENGTH(self):
            return self.getToken(SnowflakeParser.PASSWORD_MAX_LENGTH, 0)

        def PASSWORD_MAX_RETRIES(self):
            return self.getToken(SnowflakeParser.PASSWORD_MAX_RETRIES, 0)

        def PASSWORD_MIN_AGE_DAYS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_AGE_DAYS, 0)

        def PASSWORD_MIN_LENGTH(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_LENGTH, 0)

        def PASSWORD_MIN_LOWER_CASE_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_LOWER_CASE_CHARS, 0)

        def PASSWORD_MIN_NUMERIC_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_NUMERIC_CHARS, 0)

        def PASSWORD_MIN_SPECIAL_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_SPECIAL_CHARS, 0)

        def PASSWORD_MIN_UPPER_CASE_CHARS(self):
            return self.getToken(SnowflakeParser.PASSWORD_MIN_UPPER_CASE_CHARS, 0)

        def PATH_(self):
            return self.getToken(SnowflakeParser.PATH_, 0)

        def PATTERN(self):
            return self.getToken(SnowflakeParser.PATTERN, 0)

        def PORT(self):
            return self.getToken(SnowflakeParser.PORT, 0)

        def PRIORITY(self):
            return self.getToken(SnowflakeParser.PRIORITY, 0)

        def PROCEDURE_NAME(self):
            return self.getToken(SnowflakeParser.PROCEDURE_NAME, 0)

        def PROPERTY(self):
            return self.getToken(SnowflakeParser.PROPERTY, 0)

        def PROVIDER(self):
            return self.getToken(SnowflakeParser.PROVIDER, 0)

        def PUBLIC(self):
            return self.getToken(SnowflakeParser.PUBLIC, 0)

        def QUARTER(self):
            return self.getToken(SnowflakeParser.QUARTER, 0)

        def QUERY(self):
            return self.getToken(SnowflakeParser.QUERY, 0)

        def QUERY_TAG(self):
            return self.getToken(SnowflakeParser.QUERY_TAG, 0)

        def RANK(self):
            return self.getToken(SnowflakeParser.RANK, 0)

        def RECURSIVE(self):
            return self.getToken(SnowflakeParser.RECURSIVE, 0)

        def REFERENCES(self):
            return self.getToken(SnowflakeParser.REFERENCES, 0)

        def REFRESH_MODE(self):
            return self.getToken(SnowflakeParser.REFRESH_MODE, 0)

        def RESOURCE(self):
            return self.getToken(SnowflakeParser.RESOURCE, 0)

        def RESOURCES(self):
            return self.getToken(SnowflakeParser.RESOURCES, 0)

        def RESPECT(self):
            return self.getToken(SnowflakeParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(SnowflakeParser.RESTRICT, 0)

        def RESULT(self):
            return self.getToken(SnowflakeParser.RESULT, 0)

        def ROLE(self):
            return self.getToken(SnowflakeParser.ROLE, 0)

        def ROUNDING_MODE(self):
            return self.getToken(SnowflakeParser.ROUNDING_MODE, 0)

        def ROW_NUMBER(self):
            return self.getToken(SnowflakeParser.ROW_NUMBER, 0)

        def SCALE(self):
            return self.getToken(SnowflakeParser.SCALE, 0)

        def SCHEDULE(self):
            return self.getToken(SnowflakeParser.SCHEDULE, 0)

        def SECURITYADMIN(self):
            return self.getToken(SnowflakeParser.SECURITYADMIN, 0)

        def SOURCE(self):
            return self.getToken(SnowflakeParser.SOURCE, 0)

        def START_DATE(self):
            return self.getToken(SnowflakeParser.START_DATE, 0)

        def STATE(self):
            return self.getToken(SnowflakeParser.STATE, 0)

        def STATS(self):
            return self.getToken(SnowflakeParser.STATS, 0)

        def STATUS(self):
            return self.getToken(SnowflakeParser.STATUS, 0)

        def SYSADMIN(self):
            return self.getToken(SnowflakeParser.SYSADMIN, 0)

        def TAG(self):
            return self.getToken(SnowflakeParser.TAG, 0)

        def TAGS(self):
            return self.getToken(SnowflakeParser.TAGS, 0)

        def TARGET_LAG(self):
            return self.getToken(SnowflakeParser.TARGET_LAG, 0)

        def TIMEZONE(self):
            return self.getToken(SnowflakeParser.TIMEZONE, 0)

        def URL(self):
            return self.getToken(SnowflakeParser.URL, 0)

        def USERADMIN(self):
            return self.getToken(SnowflakeParser.USERADMIN, 0)

        def VALUE(self):
            return self.getToken(SnowflakeParser.VALUE, 0)

        def VALUES(self):
            return self.getToken(SnowflakeParser.VALUES, 0)

        def VERSION(self):
            return self.getToken(SnowflakeParser.VERSION, 0)

        def VISIBILITY(self):
            return self.getToken(SnowflakeParser.VISIBILITY, 0)

        def WAREHOUSE_TYPE(self):
            return self.getToken(SnowflakeParser.WAREHOUSE_TYPE, 0)

        def YEAR(self):
            return self.getToken(SnowflakeParser.YEAR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_non_reserved_words

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_reserved_words" ):
                listener.enterNon_reserved_words(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_reserved_words" ):
                listener.exitNon_reserved_words(self)




    def non_reserved_words(self):

        localctx = SnowflakeParser.Non_reserved_wordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_non_reserved_words)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11639
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 17592320270464) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & -9221120236904513535) != 0) or ((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & 365363316025606161) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & 130604457913237603) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & 146372210574231641) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & 580542223384593) != 0) or ((((_la - 482)) & ~0x3f) == 0 and ((1 << (_la - 482)) & -9215490943517962735) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & 96264442673189105) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & 140780438028833) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 252271947880153089) != 0) or ((((_la - 780)) & ~0x3f) == 0 and ((1 << (_la - 780)) & 2384093198768144385) != 0) or _la==861):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(SnowflakeParser.SUM, 0)

        def AVG(self):
            return self.getToken(SnowflakeParser.AVG, 0)

        def MIN(self):
            return self.getToken(SnowflakeParser.MIN, 0)

        def COUNT(self):
            return self.getToken(SnowflakeParser.COUNT, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SnowflakeParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_TIME(self):
            return self.getToken(SnowflakeParser.CURRENT_TIME, 0)

        def CURRENT_DATE(self):
            return self.getToken(SnowflakeParser.CURRENT_DATE, 0)

        def UPPER(self):
            return self.getToken(SnowflakeParser.UPPER, 0)

        def LOWER(self):
            return self.getToken(SnowflakeParser.LOWER, 0)

        def TO_BOOLEAN(self):
            return self.getToken(SnowflakeParser.TO_BOOLEAN, 0)

        def IDENTIFIER(self):
            return self.getToken(SnowflakeParser.IDENTIFIER, 0)

        def FLATTEN(self):
            return self.getToken(SnowflakeParser.FLATTEN, 0)

        def SPLIT_TO_TABLE(self):
            return self.getToken(SnowflakeParser.SPLIT_TO_TABLE, 0)

        def CAST(self):
            return self.getToken(SnowflakeParser.CAST, 0)

        def TRY_CAST(self):
            return self.getToken(SnowflakeParser.TRY_CAST, 0)

        def ANY_VALUE(self):
            return self.getToken(SnowflakeParser.ANY_VALUE, 0)

        def GETDATE(self):
            return self.getToken(SnowflakeParser.GETDATE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_function" ):
                listener.enterBuiltin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_function" ):
                listener.exitBuiltin_function(self)




    def builtin_function(self):

        localctx = SnowflakeParser.Builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_builtin_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11641
            _la = self._input.LA(1)
            if not(_la==31 or _la==62 or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 252271947876925441) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 281475043819521) != 0) or _la==397 or _la==421 or _la==703 or _la==737 or ((((_la - 785)) & ~0x3f) == 0 and ((1 << (_la - 785)) & 134283265) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_or_binary_builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOOR(self):
            return self.getToken(SnowflakeParser.FLOOR, 0)

        def TRUNCATE(self):
            return self.getToken(SnowflakeParser.TRUNCATE, 0)

        def TRUNC(self):
            return self.getToken(SnowflakeParser.TRUNC, 0)

        def CEIL(self):
            return self.getToken(SnowflakeParser.CEIL, 0)

        def ROUND(self):
            return self.getToken(SnowflakeParser.ROUND, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_unary_or_binary_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_or_binary_builtin_function" ):
                listener.enterUnary_or_binary_builtin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_or_binary_builtin_function" ):
                listener.exitUnary_or_binary_builtin_function(self)




    def unary_or_binary_builtin_function(self):

        localctx = SnowflakeParser.Unary_or_binary_builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_unary_or_binary_builtin_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11643
            _la = self._input.LA(1)
            if not(_la==109 or _la==624 or _la==798 or _la==799 or _la==878):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ifnull = None # Token
            self.to_date = None # Token

        def IFNULL(self):
            return self.getToken(SnowflakeParser.IFNULL, 0)

        def NVL(self):
            return self.getToken(SnowflakeParser.NVL, 0)

        def GET(self):
            return self.getToken(SnowflakeParser.GET, 0)

        def LEFT(self):
            return self.getToken(SnowflakeParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SnowflakeParser.RIGHT, 0)

        def DATE_PART(self):
            return self.getToken(SnowflakeParser.DATE_PART, 0)

        def TO_DATE(self):
            return self.getToken(SnowflakeParser.TO_DATE, 0)

        def DATE(self):
            return self.getToken(SnowflakeParser.DATE, 0)

        def SPLIT(self):
            return self.getToken(SnowflakeParser.SPLIT, 0)

        def NULLIF(self):
            return self.getToken(SnowflakeParser.NULLIF, 0)

        def EQUAL_NULL(self):
            return self.getToken(SnowflakeParser.EQUAL_NULL, 0)

        def CONTAINS(self):
            return self.getToken(SnowflakeParser.CONTAINS, 0)

        def COLLATE(self):
            return self.getToken(SnowflakeParser.COLLATE, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TO_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_binary_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_builtin_function" ):
                listener.enterBinary_builtin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_builtin_function" ):
                listener.exitBinary_builtin_function(self)




    def binary_builtin_function(self):

        localctx = SnowflakeParser.Binary_builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_binary_builtin_function)
        self._la = 0 # Token type
        try:
            self.state = 11657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [329, 461]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11645
                localctx.ifnull = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==329 or _la==461):
                    localctx.ifnull = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [302]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11646
                self.match(SnowflakeParser.GET)
                pass
            elif token in [382]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11647
                self.match(SnowflakeParser.LEFT)
                pass
            elif token in [618]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11648
                self.match(SnowflakeParser.RIGHT)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11649
                self.match(SnowflakeParser.DATE_PART)
                pass
            elif token in [786, 870]:
                self.enterOuterAlt(localctx, 6)
                self.state = 11650
                localctx.to_date = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==786 or _la==870):
                    localctx.to_date = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [701]:
                self.enterOuterAlt(localctx, 7)
                self.state = 11651
                self.match(SnowflakeParser.SPLIT)
                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 8)
                self.state = 11652
                self.match(SnowflakeParser.NULLIF)
                pass
            elif token in [231]:
                self.enterOuterAlt(localctx, 9)
                self.state = 11653
                self.match(SnowflakeParser.EQUAL_NULL)
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 10)
                self.state = 11654
                self.match(SnowflakeParser.CONTAINS)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 11)
                self.state = 11655
                self.match(SnowflakeParser.COLLATE)
                pass
            elif token in [787]:
                self.enterOuterAlt(localctx, 12)
                self.state = 11656
                self.match(SnowflakeParser.TO_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_or_ternary_builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.substring = None # Token

        def CHARINDEX(self):
            return self.getToken(SnowflakeParser.CHARINDEX, 0)

        def REPLACE(self):
            return self.getToken(SnowflakeParser.REPLACE, 0)

        def SUBSTRING(self):
            return self.getToken(SnowflakeParser.SUBSTRING, 0)

        def SUBSTR(self):
            return self.getToken(SnowflakeParser.SUBSTR, 0)

        def LIKE(self):
            return self.getToken(SnowflakeParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SnowflakeParser.ILIKE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_binary_or_ternary_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_or_ternary_builtin_function" ):
                listener.enterBinary_or_ternary_builtin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_or_ternary_builtin_function" ):
                listener.exitBinary_or_ternary_builtin_function(self)




    def binary_or_ternary_builtin_function(self):

        localctx = SnowflakeParser.Binary_or_ternary_builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_binary_or_ternary_builtin_function)
        self._la = 0 # Token type
        try:
            self.state = 11664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11659
                self.match(SnowflakeParser.CHARINDEX)
                pass
            elif token in [591]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11660
                self.match(SnowflakeParser.REPLACE)
                pass
            elif token in [735, 736]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11661
                localctx.substring = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==735 or _la==736):
                    localctx.substring = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [385]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11662
                self.match(SnowflakeParser.LIKE)
                pass
            elif token in [332]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11663
                self.match(SnowflakeParser.ILIKE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ternary_builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dateadd = None # Token
            self.datefiff = None # Token

        def DATEADD(self):
            return self.getToken(SnowflakeParser.DATEADD, 0)

        def TIMEADD(self):
            return self.getToken(SnowflakeParser.TIMEADD, 0)

        def TIMESTAMPADD(self):
            return self.getToken(SnowflakeParser.TIMESTAMPADD, 0)

        def DATEDIFF(self):
            return self.getToken(SnowflakeParser.DATEDIFF, 0)

        def TIMEDIFF(self):
            return self.getToken(SnowflakeParser.TIMEDIFF, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(SnowflakeParser.TIMESTAMPDIFF, 0)

        def SPLIT_PART(self):
            return self.getToken(SnowflakeParser.SPLIT_PART, 0)

        def NVL2(self):
            return self.getToken(SnowflakeParser.NVL2, 0)

        def IFF(self):
            return self.getToken(SnowflakeParser.IFF, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_ternary_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernary_builtin_function" ):
                listener.enterTernary_builtin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernary_builtin_function" ):
                listener.exitTernary_builtin_function(self)




    def ternary_builtin_function(self):

        localctx = SnowflakeParser.Ternary_builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_ternary_builtin_function)
        self._la = 0 # Token type
        try:
            self.state = 11671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [174, 764, 778]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11666
                localctx.dateadd = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==174 or _la==764 or _la==778):
                    localctx.dateadd = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [175, 765, 779]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11667
                localctx.datefiff = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==175 or _la==765 or _la==779):
                    localctx.datefiff = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [702]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11668
                self.match(SnowflakeParser.SPLIT_PART)
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11669
                self.match(SnowflakeParser.NVL2)
                pass
            elif token in [328]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11670
                self.match(SnowflakeParser.IFF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCAT(self):
            return self.getToken(SnowflakeParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(SnowflakeParser.CONCAT_WS, 0)

        def COALESCE(self):
            return self.getToken(SnowflakeParser.COALESCE, 0)

        def HASH(self):
            return self.getToken(SnowflakeParser.HASH, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_list_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_function" ):
                listener.enterList_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_function" ):
                listener.exitList_function(self)




    def list_function(self):

        localctx = SnowflakeParser.List_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_list_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11673
            _la = self._input.LA(1)
            if not(((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 769) != 0) or _la==317):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATTERN(self):
            return self.getToken(SnowflakeParser.PATTERN, 0)

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = SnowflakeParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11675
            self.match(SnowflakeParser.PATTERN)
            self.state = 11676
            self.match(SnowflakeParser.EQ)
            self.state = 11677
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SnowflakeParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1504,self._ctx)
            if la_ == 1:
                self.state = 11679
                self.id_()
                self.state = 11680
                self.match(SnowflakeParser.DOT)


            self.state = 11684
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = SnowflakeParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11686
            self.column_name()
            self.state = 11691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 11687
                self.match(SnowflakeParser.COMMA)
                self.state = 11688
                self.column_name()
                self.state = 11693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_list_with_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,i)


        def COMMENT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMENT)
            else:
                return self.getToken(SnowflakeParser.COMMENT, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_list_with_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list_with_comment" ):
                listener.enterColumn_list_with_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list_with_comment" ):
                listener.exitColumn_list_with_comment(self)




    def column_list_with_comment(self):

        localctx = SnowflakeParser.Column_list_with_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_column_list_with_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11694
            self.column_name()
            self.state = 11697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 11695
                self.match(SnowflakeParser.COMMENT)
                self.state = 11696
                self.string()


            self.state = 11707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 11699
                self.match(SnowflakeParser.COMMA)
                self.state = 11700
                self.column_name()
                self.state = 11703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 11701
                    self.match(SnowflakeParser.COMMENT)
                    self.state = 11702
                    self.string()


                self.state = 11709
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.d = None # Id_Context
            self.s = None # Id_Context
            self.o = None # Id_Context

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DOT)
            else:
                return self.getToken(SnowflakeParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name" ):
                listener.enterObject_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name" ):
                listener.exitObject_name(self)




    def object_name(self):

        localctx = SnowflakeParser.Object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_object_name)
        try:
            self.state = 11721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1509,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11710
                localctx.d = self.id_()
                self.state = 11711
                self.match(SnowflakeParser.DOT)
                self.state = 11712
                localctx.s = self.id_()
                self.state = 11713
                self.match(SnowflakeParser.DOT)
                self.state = 11714
                localctx.o = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11716
                localctx.s = self.id_()
                self.state = 11717
                self.match(SnowflakeParser.DOT)
                self.state = 11718
                localctx.o = self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11720
                localctx.o = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_name_or_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def IDENTIFIER(self):
            return self.getToken(SnowflakeParser.IDENTIFIER, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_name_or_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name_or_identifier" ):
                listener.enterObject_name_or_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name_or_identifier" ):
                listener.exitObject_name_or_identifier(self)




    def object_name_or_identifier(self):

        localctx = SnowflakeParser.Object_name_or_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_object_name_or_identifier)
        try:
            self.state = 11729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1510,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11723
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11724
                self.match(SnowflakeParser.IDENTIFIER)
                self.state = 11725
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 11726
                self.string()
                self.state = 11727
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(SnowflakeParser.DECIMAL, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)




    def num(self):

        localctx = SnowflakeParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_num)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11731
            self.match(SnowflakeParser.DECIMAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = SnowflakeParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11733
            self.expr(0)
            self.state = 11738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 11734
                self.match(SnowflakeParser.COMMA)
                self.state = 11735
                self.expr(0)
                self.state = 11740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_list_sortedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_expr_list_sorted

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list_sorted" ):
                listener.enterExpr_list_sorted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list_sorted" ):
                listener.exitExpr_list_sorted(self)




    def expr_list_sorted(self):

        localctx = SnowflakeParser.Expr_list_sortedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_expr_list_sorted)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11741
            self.expr(0)
            self.state = 11743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46 or _la==196:
                self.state = 11742
                self.asc_desc()


            self.state = 11752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 11745
                self.match(SnowflakeParser.COMMA)
                self.state = 11746
                self.expr(0)
                self.state = 11748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46 or _la==196:
                    self.state = 11747
                    self.asc_desc()


                self.state = 11754
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.l = None # ExprContext
            self.op = None # Token
            self.r = None # ExprContext

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def NEXTVAL(self):
            return self.getToken(SnowflakeParser.NEXTVAL, 0)

        def case_expression(self):
            return self.getTypedRuleContext(SnowflakeParser.Case_expressionContext,0)


        def iff_expr(self):
            return self.getTypedRuleContext(SnowflakeParser.Iff_exprContext,0)


        def bracket_expression(self):
            return self.getTypedRuleContext(SnowflakeParser.Bracket_expressionContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def PLUS(self):
            return self.getToken(SnowflakeParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SnowflakeParser.MINUS, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.NOT)
            else:
                return self.getToken(SnowflakeParser.NOT, i)

        def arr_literal(self):
            return self.getTypedRuleContext(SnowflakeParser.Arr_literalContext,0)


        def cast_expr(self):
            return self.getTypedRuleContext(SnowflakeParser.Cast_exprContext,0)


        def try_cast_expr(self):
            return self.getTypedRuleContext(SnowflakeParser.Try_cast_exprContext,0)


        def json_literal(self):
            return self.getTypedRuleContext(SnowflakeParser.Json_literalContext,0)


        def trim_expression(self):
            return self.getTypedRuleContext(SnowflakeParser.Trim_expressionContext,0)


        def function_call(self):
            return self.getTypedRuleContext(SnowflakeParser.Function_callContext,0)


        def subquery(self):
            return self.getTypedRuleContext(SnowflakeParser.SubqueryContext,0)


        def primitive_expression(self):
            return self.getTypedRuleContext(SnowflakeParser.Primitive_expressionContext,0)


        def COLON(self):
            return self.getToken(SnowflakeParser.COLON, 0)

        def STAR(self):
            return self.getToken(SnowflakeParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(SnowflakeParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(SnowflakeParser.MODULE, 0)

        def PIPE_PIPE(self):
            return self.getToken(SnowflakeParser.PIPE_PIPE, 0)

        def comparison_operator(self):
            return self.getTypedRuleContext(SnowflakeParser.Comparison_operatorContext,0)


        def AND(self):
            return self.getToken(SnowflakeParser.AND, 0)

        def OR(self):
            return self.getToken(SnowflakeParser.OR, 0)

        def RLIKE(self):
            return self.getToken(SnowflakeParser.RLIKE, 0)

        def LSB(self):
            return self.getToken(SnowflakeParser.LSB, 0)

        def RSB(self):
            return self.getToken(SnowflakeParser.RSB, 0)

        def VALUE(self):
            return self.getToken(SnowflakeParser.VALUE, 0)

        def COLLATE(self):
            return self.getToken(SnowflakeParser.COLLATE, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Over_clauseContext,0)


        def COLON_COLON(self):
            return self.getToken(SnowflakeParser.COLON_COLON, 0)

        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def IS(self):
            return self.getToken(SnowflakeParser.IS, 0)

        def null_not_null(self):
            return self.getTypedRuleContext(SnowflakeParser.Null_not_nullContext,0)


        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def LIKE(self):
            return self.getToken(SnowflakeParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SnowflakeParser.ILIKE, 0)

        def ESCAPE(self):
            return self.getToken(SnowflakeParser.ESCAPE, 0)

        def ANY(self):
            return self.getToken(SnowflakeParser.ANY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SnowflakeParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1066
        self.enterRecursionRule(localctx, 1066, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1516,self._ctx)
            if la_ == 1:
                self.state = 11756
                self.object_name()
                self.state = 11757
                self.match(SnowflakeParser.DOT)
                self.state = 11758
                self.match(SnowflakeParser.NEXTVAL)
                pass

            elif la_ == 2:
                self.state = 11760
                self.case_expression()
                pass

            elif la_ == 3:
                self.state = 11761
                self.iff_expr()
                pass

            elif la_ == 4:
                self.state = 11762
                self.bracket_expression()
                pass

            elif la_ == 5:
                self.state = 11763
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==944 or _la==945):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11764
                self.expr(22)
                pass

            elif la_ == 6:
                self.state = 11766 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 11765
                        localctx.op = self.match(SnowflakeParser.NOT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 11768 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1515,self._ctx)

                self.state = 11770
                self.expr(18)
                pass

            elif la_ == 7:
                self.state = 11771
                self.arr_literal()
                pass

            elif la_ == 8:
                self.state = 11772
                self.cast_expr()
                pass

            elif la_ == 9:
                self.state = 11773
                self.try_cast_expr()
                pass

            elif la_ == 10:
                self.state = 11774
                self.json_literal()
                pass

            elif la_ == 11:
                self.state = 11775
                self.trim_expression()
                pass

            elif la_ == 12:
                self.state = 11776
                self.function_call()
                pass

            elif la_ == 13:
                self.state = 11777
                self.subquery()
                pass

            elif la_ == 14:
                self.state = 11778
                self.primitive_expression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 11872
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1527,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 11870
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1526,self._ctx)
                    if la_ == 1:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11781
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 11782
                        self.match(SnowflakeParser.COLON)
                        self.state = 11783
                        self.expr(29)
                        pass

                    elif la_ == 2:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11784
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 11785
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 941)) & ~0x3f) == 0 and ((1 << (_la - 941)) & 7) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 11786
                        self.expr(22)
                        pass

                    elif la_ == 3:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11787
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 11788
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 926)) & ~0x3f) == 0 and ((1 << (_la - 926)) & 786433) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 11789
                        self.expr(21)
                        pass

                    elif la_ == 4:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        localctx.l = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11790
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 11791
                        self.comparison_operator()
                        self.state = 11792
                        localctx.r = self.expr(20)
                        pass

                    elif la_ == 5:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11794
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 11795
                        self.match(SnowflakeParser.AND)
                        self.state = 11796
                        self.expr(18)
                        pass

                    elif la_ == 6:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11797
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 11798
                        self.match(SnowflakeParser.OR)
                        self.state = 11799
                        self.expr(17)
                        pass

                    elif la_ == 7:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11800
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 11802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==448:
                            self.state = 11801
                            self.match(SnowflakeParser.NOT)


                        self.state = 11804
                        self.match(SnowflakeParser.RLIKE)
                        self.state = 11805
                        self.expr(4)
                        pass

                    elif la_ == 8:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11806
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 11807
                        self.match(SnowflakeParser.LSB)
                        self.state = 11808
                        self.expr(0)
                        self.state = 11809
                        self.match(SnowflakeParser.RSB)
                        pass

                    elif la_ == 9:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11811
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 11812
                        self.match(SnowflakeParser.DOT)
                        self.state = 11815
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1518,self._ctx)
                        if la_ == 1:
                            self.state = 11813
                            self.match(SnowflakeParser.VALUE)
                            pass

                        elif la_ == 2:
                            self.state = 11814
                            self.expr(0)
                            pass


                        pass

                    elif la_ == 10:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11817
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 11818
                        self.match(SnowflakeParser.COLLATE)
                        self.state = 11819
                        self.string()
                        pass

                    elif la_ == 11:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11820
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 11821
                        self.over_clause()
                        pass

                    elif la_ == 12:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11822
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 11823
                        self.match(SnowflakeParser.COLON_COLON)
                        self.state = 11824
                        self.data_type()
                        pass

                    elif la_ == 13:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11825
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 11826
                        self.match(SnowflakeParser.IS)
                        self.state = 11827
                        self.null_not_null()
                        pass

                    elif la_ == 14:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11828
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 11830
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==448:
                            self.state = 11829
                            self.match(SnowflakeParser.NOT)


                        self.state = 11832
                        self.match(SnowflakeParser.IN)
                        self.state = 11833
                        self.match(SnowflakeParser.LR_BRACKET)
                        self.state = 11836
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1520,self._ctx)
                        if la_ == 1:
                            self.state = 11834
                            self.subquery()
                            pass

                        elif la_ == 2:
                            self.state = 11835
                            self.expr_list()
                            pass


                        self.state = 11838
                        self.match(SnowflakeParser.RR_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11840
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 11842
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==448:
                            self.state = 11841
                            self.match(SnowflakeParser.NOT)


                        self.state = 11844
                        _la = self._input.LA(1)
                        if not(_la==332 or _la==385):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 11845
                        self.expr(0)
                        self.state = 11848
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1522,self._ctx)
                        if la_ == 1:
                            self.state = 11846
                            self.match(SnowflakeParser.ESCAPE)
                            self.state = 11847
                            self.expr(0)


                        pass

                    elif la_ == 16:
                        localctx = SnowflakeParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 11850
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 11852
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==448:
                            self.state = 11851
                            self.match(SnowflakeParser.NOT)


                        self.state = 11854
                        _la = self._input.LA(1)
                        if not(_la==332 or _la==385):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 11855
                        self.match(SnowflakeParser.ANY)
                        self.state = 11856
                        self.match(SnowflakeParser.LR_BRACKET)
                        self.state = 11857
                        self.expr(0)
                        self.state = 11862
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==937:
                            self.state = 11858
                            self.match(SnowflakeParser.COMMA)
                            self.state = 11859
                            self.expr(0)
                            self.state = 11864
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 11865
                        self.match(SnowflakeParser.RR_BRACKET)
                        self.state = 11868
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1525,self._ctx)
                        if la_ == 1:
                            self.state = 11866
                            self.match(SnowflakeParser.ESCAPE)
                            self.state = 11867
                            self.expr(0)


                        pass

             
                self.state = 11874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1527,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Iff_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IFF(self):
            return self.getToken(SnowflakeParser.IFF, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_iff_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIff_expr" ):
                listener.enterIff_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIff_expr" ):
                listener.exitIff_expr(self)




    def iff_expr(self):

        localctx = SnowflakeParser.Iff_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_iff_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11875
            self.match(SnowflakeParser.IFF)
            self.state = 11876
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 11877
            self.search_condition(0)
            self.state = 11878
            self.match(SnowflakeParser.COMMA)
            self.state = 11879
            self.expr(0)
            self.state = 11880
            self.match(SnowflakeParser.COMMA)
            self.state = 11881
            self.expr(0)
            self.state = 11882
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trim_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def TRIM(self):
            return self.getToken(SnowflakeParser.TRIM, 0)

        def LTRIM(self):
            return self.getToken(SnowflakeParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(SnowflakeParser.RTRIM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.StringContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.StringContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_trim_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim_expression" ):
                listener.enterTrim_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim_expression" ):
                listener.exitTrim_expression(self)




    def trim_expression(self):

        localctx = SnowflakeParser.Trim_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_trim_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11884
            _la = self._input.LA(1)
            if not(_la==398 or _la==632 or _la==795):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 11885
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 11886
            self.expr(0)
            self.state = 11891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 11887
                self.match(SnowflakeParser.COMMA)
                self.state = 11888
                self.string()
                self.state = 11893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 11894
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_cast_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY_CAST(self):
            return self.getToken(SnowflakeParser.TRY_CAST, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_try_cast_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_cast_expr" ):
                listener.enterTry_cast_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_cast_expr" ):
                listener.exitTry_cast_expr(self)




    def try_cast_expr(self):

        localctx = SnowflakeParser.Try_cast_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_try_cast_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11896
            self.match(SnowflakeParser.TRY_CAST)
            self.state = 11897
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 11898
            self.expr(0)
            self.state = 11899
            self.match(SnowflakeParser.AS)
            self.state = 11900
            self.data_type()
            self.state = 11901
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(SnowflakeParser.CAST, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_typeContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def DATE(self):
            return self.getToken(SnowflakeParser.DATE, 0)

        def TIME(self):
            return self.getToken(SnowflakeParser.TIME, 0)

        def INTERVAL(self):
            return self.getToken(SnowflakeParser.INTERVAL, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_cast_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_expr" ):
                listener.enterCast_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_expr" ):
                listener.exitCast_expr(self)




    def cast_expr(self):

        localctx = SnowflakeParser.Cast_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_cast_expr)
        self._la = 0 # Token type
        try:
            self.state = 11912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11903
                self.match(SnowflakeParser.CAST)
                self.state = 11904
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 11905
                self.expr(0)
                self.state = 11906
                self.match(SnowflakeParser.AS)
                self.state = 11907
                self.data_type()
                self.state = 11908
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            elif token in [357, 763, 766, 870]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11910
                _la = self._input.LA(1)
                if not(_la==357 or _la==763 or _la==766 or _la==870):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11911
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCB(self):
            return self.getToken(SnowflakeParser.LCB, 0)

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Kv_pairContext,i)


        def RCB(self):
            return self.getToken(SnowflakeParser.RCB, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_json_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_literal" ):
                listener.enterJson_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_literal" ):
                listener.exitJson_literal(self)




    def json_literal(self):

        localctx = SnowflakeParser.Json_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_json_literal)
        self._la = 0 # Token type
        try:
            self.state = 11927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1531,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11914
                self.match(SnowflakeParser.LCB)
                self.state = 11915
                self.kv_pair()
                self.state = 11920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 11916
                    self.match(SnowflakeParser.COMMA)
                    self.state = 11917
                    self.kv_pair()
                    self.state = 11922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11923
                self.match(SnowflakeParser.RCB)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11925
                self.match(SnowflakeParser.LCB)
                self.state = 11926
                self.match(SnowflakeParser.RCB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # Token

        def COLON(self):
            return self.getToken(SnowflakeParser.COLON, 0)

        def value(self):
            return self.getTypedRuleContext(SnowflakeParser.ValueContext,0)


        def STRING(self):
            return self.getToken(SnowflakeParser.STRING, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_kv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKv_pair" ):
                listener.enterKv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKv_pair" ):
                listener.exitKv_pair(self)




    def kv_pair(self):

        localctx = SnowflakeParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11929
            localctx.key = self.match(SnowflakeParser.STRING)
            self.state = 11930
            self.match(SnowflakeParser.COLON)
            self.state = 11931
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = SnowflakeParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11933
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSB(self):
            return self.getToken(SnowflakeParser.LSB, 0)

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ValueContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ValueContext,i)


        def RSB(self):
            return self.getToken(SnowflakeParser.RSB, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_arr_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArr_literal" ):
                listener.enterArr_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArr_literal" ):
                listener.exitArr_literal(self)




    def arr_literal(self):

        localctx = SnowflakeParser.Arr_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_arr_literal)
        self._la = 0 # Token type
        try:
            self.state = 11948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1533,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11935
                self.match(SnowflakeParser.LSB)
                self.state = 11936
                self.value()
                self.state = 11941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 11937
                    self.match(SnowflakeParser.COMMA)
                    self.state = 11938
                    self.value()
                    self.state = 11943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11944
                self.match(SnowflakeParser.RSB)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11946
                self.match(SnowflakeParser.LSB)
                self.state = 11947
                self.match(SnowflakeParser.RSB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_data_type_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_size" ):
                listener.enterData_type_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_size" ):
                listener.exitData_type_size(self)




    def data_type_size(self):

        localctx = SnowflakeParser.Data_type_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_data_type_size)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11950
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 11951
            self.num()
            self.state = 11952
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.int_alias = None # Token
            self.number_alias = None # Token
            self.float_alias = None # Token
            self.char_alias = None # Token
            self.varchar_alias = None # Token
            self.binary_alias = None # Token

        def INT(self):
            return self.getToken(SnowflakeParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SnowflakeParser.INTEGER, 0)

        def SMALLINT(self):
            return self.getToken(SnowflakeParser.SMALLINT, 0)

        def TINYINT(self):
            return self.getToken(SnowflakeParser.TINYINT, 0)

        def BYTEINT(self):
            return self.getToken(SnowflakeParser.BYTEINT, 0)

        def BIGINT(self):
            return self.getToken(SnowflakeParser.BIGINT, 0)

        def NUMBER(self):
            return self.getToken(SnowflakeParser.NUMBER, 0)

        def NUMERIC(self):
            return self.getToken(SnowflakeParser.NUMERIC, 0)

        def DECIMAL_(self):
            return self.getToken(SnowflakeParser.DECIMAL_, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def FLOAT_(self):
            return self.getToken(SnowflakeParser.FLOAT_, 0)

        def FLOAT4(self):
            return self.getToken(SnowflakeParser.FLOAT4, 0)

        def FLOAT8(self):
            return self.getToken(SnowflakeParser.FLOAT8, 0)

        def DOUBLE(self):
            return self.getToken(SnowflakeParser.DOUBLE, 0)

        def DOUBLE_PRECISION(self):
            return self.getToken(SnowflakeParser.DOUBLE_PRECISION, 0)

        def REAL_(self):
            return self.getToken(SnowflakeParser.REAL_, 0)

        def BOOLEAN(self):
            return self.getToken(SnowflakeParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(SnowflakeParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(SnowflakeParser.DATETIME, 0)

        def data_type_size(self):
            return self.getTypedRuleContext(SnowflakeParser.Data_type_sizeContext,0)


        def TIME(self):
            return self.getToken(SnowflakeParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def TIMESTAMP_LTZ(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_LTZ, 0)

        def TIMESTAMP_NTZ(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_NTZ, 0)

        def TIMESTAMP_TZ(self):
            return self.getToken(SnowflakeParser.TIMESTAMP_TZ, 0)

        def CHAR(self):
            return self.getToken(SnowflakeParser.CHAR, 0)

        def NCHAR(self):
            return self.getToken(SnowflakeParser.NCHAR, 0)

        def CHARACTER(self):
            return self.getToken(SnowflakeParser.CHARACTER, 0)

        def CHAR_VARYING(self):
            return self.getToken(SnowflakeParser.CHAR_VARYING, 0)

        def NCHAR_VARYING(self):
            return self.getToken(SnowflakeParser.NCHAR_VARYING, 0)

        def NVARCHAR2(self):
            return self.getToken(SnowflakeParser.NVARCHAR2, 0)

        def NVARCHAR(self):
            return self.getToken(SnowflakeParser.NVARCHAR, 0)

        def STRING_(self):
            return self.getToken(SnowflakeParser.STRING_, 0)

        def TEXT(self):
            return self.getToken(SnowflakeParser.TEXT, 0)

        def VARCHAR(self):
            return self.getToken(SnowflakeParser.VARCHAR, 0)

        def BINARY(self):
            return self.getToken(SnowflakeParser.BINARY, 0)

        def VARBINARY(self):
            return self.getToken(SnowflakeParser.VARBINARY, 0)

        def VARIANT(self):
            return self.getToken(SnowflakeParser.VARIANT, 0)

        def OBJECT(self):
            return self.getToken(SnowflakeParser.OBJECT, 0)

        def ARRAY(self):
            return self.getToken(SnowflakeParser.ARRAY, 0)

        def GEOGRAPHY(self):
            return self.getToken(SnowflakeParser.GEOGRAPHY, 0)

        def GEOMETRY(self):
            return self.getToken(SnowflakeParser.GEOMETRY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = SnowflakeParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 12010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [353, 865, 868, 881, 888, 891]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11954
                localctx.int_alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==353 or ((((_la - 865)) & ~0x3f) == 0 and ((1 << (_la - 865)) & 75563017) != 0)):
                    localctx.int_alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [460, 872, 884]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11955
                localctx.number_alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==460 or _la==872 or _la==884):
                    localctx.number_alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1535,self._ctx)
                if la_ == 1:
                    self.state = 11956
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 11957
                    self.num()
                    self.state = 11960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==937:
                        self.state = 11958
                        self.match(SnowflakeParser.COMMA)
                        self.state = 11959
                        self.num()


                    self.state = 11962
                    self.match(SnowflakeParser.RR_BRACKET)


                pass
            elif token in [873, 874, 875, 876, 877, 887]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11966
                localctx.float_alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & 16415) != 0)):
                    localctx.float_alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [867]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11967
                self.match(SnowflakeParser.BOOLEAN)
                pass
            elif token in [870]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11968
                self.match(SnowflakeParser.DATE)
                pass
            elif token in [871]:
                self.enterOuterAlt(localctx, 6)
                self.state = 11969
                self.match(SnowflakeParser.DATETIME)
                self.state = 11971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1536,self._ctx)
                if la_ == 1:
                    self.state = 11970
                    self.data_type_size()


                pass
            elif token in [763]:
                self.enterOuterAlt(localctx, 7)
                self.state = 11973
                self.match(SnowflakeParser.TIME)
                self.state = 11975
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1537,self._ctx)
                if la_ == 1:
                    self.state = 11974
                    self.data_type_size()


                pass
            elif token in [766]:
                self.enterOuterAlt(localctx, 8)
                self.state = 11977
                self.match(SnowflakeParser.TIMESTAMP)
                self.state = 11979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1538,self._ctx)
                if la_ == 1:
                    self.state = 11978
                    self.data_type_size()


                pass
            elif token in [770]:
                self.enterOuterAlt(localctx, 9)
                self.state = 11981
                self.match(SnowflakeParser.TIMESTAMP_LTZ)
                self.state = 11983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1539,self._ctx)
                if la_ == 1:
                    self.state = 11982
                    self.data_type_size()


                pass
            elif token in [772]:
                self.enterOuterAlt(localctx, 10)
                self.state = 11985
                self.match(SnowflakeParser.TIMESTAMP_NTZ)
                self.state = 11987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1540,self._ctx)
                if la_ == 1:
                    self.state = 11986
                    self.data_type_size()


                pass
            elif token in [776]:
                self.enterOuterAlt(localctx, 11)
                self.state = 11989
                self.match(SnowflakeParser.TIMESTAMP_TZ)
                self.state = 11991
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1541,self._ctx)
                if la_ == 1:
                    self.state = 11990
                    self.data_type_size()


                pass
            elif token in [113, 114, 882]:
                self.enterOuterAlt(localctx, 12)
                self.state = 11993
                localctx.char_alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==113 or _la==114 or _la==882):
                    localctx.char_alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1542,self._ctx)
                if la_ == 1:
                    self.state = 11994
                    self.data_type_size()


                pass
            elif token in [869, 883, 885, 886, 889, 890, 893]:
                self.enterOuterAlt(localctx, 13)
                self.state = 11997
                localctx.varchar_alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 869)) & ~0x3f) == 0 and ((1 << (_la - 869)) & 20135937) != 0)):
                    localctx.varchar_alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1543,self._ctx)
                if la_ == 1:
                    self.state = 11998
                    self.data_type_size()


                pass
            elif token in [866, 892]:
                self.enterOuterAlt(localctx, 14)
                self.state = 12001
                localctx.binary_alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==866 or _la==892):
                    localctx.binary_alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1544,self._ctx)
                if la_ == 1:
                    self.state = 12002
                    self.data_type_size()


                pass
            elif token in [894]:
                self.enterOuterAlt(localctx, 15)
                self.state = 12005
                self.match(SnowflakeParser.VARIANT)
                pass
            elif token in [477]:
                self.enterOuterAlt(localctx, 16)
                self.state = 12006
                self.match(SnowflakeParser.OBJECT)
                pass
            elif token in [863]:
                self.enterOuterAlt(localctx, 17)
                self.state = 12007
                self.match(SnowflakeParser.ARRAY)
                pass
            elif token in [879]:
                self.enterOuterAlt(localctx, 18)
                self.state = 12008
                self.match(SnowflakeParser.GEOGRAPHY)
                pass
            elif token in [880]:
                self.enterOuterAlt(localctx, 19)
                self.state = 12009
                self.match(SnowflakeParser.GEOMETRY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DOT)
            else:
                return self.getToken(SnowflakeParser.DOT, i)

        def STAR(self):
            return self.getToken(SnowflakeParser.STAR, 0)

        def full_column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Full_column_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(SnowflakeParser.LiteralContext,0)


        def ARRAY_Q(self):
            return self.getToken(SnowflakeParser.ARRAY_Q, 0)

        def AUTO_Q(self):
            return self.getToken(SnowflakeParser.AUTO_Q, 0)

        def AZURE_Q(self):
            return self.getToken(SnowflakeParser.AZURE_Q, 0)

        def BOTH_Q(self):
            return self.getToken(SnowflakeParser.BOTH_Q, 0)

        def NONE_Q(self):
            return self.getToken(SnowflakeParser.NONE_Q, 0)

        def OBJECT_Q(self):
            return self.getToken(SnowflakeParser.OBJECT_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_primitive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)




    def primitive_expression(self):

        localctx = SnowflakeParser.Primitive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_primitive_expression)
        try:
            self.state = 12034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1547,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12012
                self.match(SnowflakeParser.DEFAULT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12013
                self.match(SnowflakeParser.NULL_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12014
                self.id_()
                self.state = 12019
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1546,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 12015
                        self.match(SnowflakeParser.DOT)
                        self.state = 12016
                        self.id_() 
                    self.state = 12021
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1546,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12022
                self.id_()
                self.state = 12023
                self.match(SnowflakeParser.DOT)
                self.state = 12024
                self.match(SnowflakeParser.STAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12026
                self.full_column_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12027
                self.literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12028
                self.match(SnowflakeParser.ARRAY_Q)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12029
                self.match(SnowflakeParser.AUTO_Q)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12030
                self.match(SnowflakeParser.AZURE_Q)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12031
                self.match(SnowflakeParser.BOTH_Q)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12032
                self.match(SnowflakeParser.NONE_Q)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 12033
                self.match(SnowflakeParser.OBJECT_Q)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SnowflakeParser.ORDER, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def expr_list_sorted(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_list_sortedContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = SnowflakeParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_order_by_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12036
            self.match(SnowflakeParser.ORDER)
            self.state = 12037
            self.match(SnowflakeParser.BY)
            self.state = 12038
            self.expr_list_sorted()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(SnowflakeParser.ASC, 0)

        def DESC(self):
            return self.getToken(SnowflakeParser.DESC, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = SnowflakeParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12040
            _la = self._input.LA(1)
            if not(_la==46 or _la==196):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(SnowflakeParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Partition_byContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SnowflakeParser.Order_by_exprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SnowflakeParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.state = 12058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1549,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12042
                self.match(SnowflakeParser.OVER)
                self.state = 12043
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12044
                self.partition_by()
                self.state = 12046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==500:
                    self.state = 12045
                    self.order_by_expr()


                self.state = 12048
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12050
                self.match(SnowflakeParser.OVER)
                self.state = 12051
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12052
                self.order_by_expr()
                self.state = 12053
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12055
                self.match(SnowflakeParser.OVER)
                self.state = 12056
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12057
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.to_date = None # Token
            self.length = None # Token

        def round_expr(self):
            return self.getTypedRuleContext(SnowflakeParser.Round_exprContext,0)


        def unary_or_binary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Unary_or_binary_builtin_functionContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def binary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Binary_builtin_functionContext,0)


        def binary_or_ternary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Binary_or_ternary_builtin_functionContext,0)


        def ternary_builtin_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Ternary_builtin_functionContext,0)


        def ranking_windowed_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Ranking_windowed_functionContext,0)


        def aggregate_function(self):
            return self.getTypedRuleContext(SnowflakeParser.Aggregate_functionContext,0)


        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def param_assoc_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Param_assoc_listContext,0)


        def list_function(self):
            return self.getTypedRuleContext(SnowflakeParser.List_functionContext,0)


        def TO_DATE(self):
            return self.getToken(SnowflakeParser.TO_DATE, 0)

        def DATE(self):
            return self.getToken(SnowflakeParser.DATE, 0)

        def LENGTH(self):
            return self.getToken(SnowflakeParser.LENGTH, 0)

        def LEN(self):
            return self.getToken(SnowflakeParser.LEN, 0)

        def TO_BOOLEAN(self):
            return self.getToken(SnowflakeParser.TO_BOOLEAN, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = SnowflakeParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 12137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1553,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12060
                self.round_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12061
                self.unary_or_binary_builtin_function()
                self.state = 12062
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12063
                self.expr(0)
                self.state = 12068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 12064
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12065
                    self.expr(0)
                    self.state = 12070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12071
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12073
                self.binary_builtin_function()
                self.state = 12074
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12075
                self.expr(0)
                self.state = 12076
                self.match(SnowflakeParser.COMMA)
                self.state = 12077
                self.expr(0)
                self.state = 12078
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12080
                self.binary_or_ternary_builtin_function()
                self.state = 12081
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12082
                self.expr(0)
                self.state = 12083
                self.match(SnowflakeParser.COMMA)
                self.state = 12084
                self.expr(0)
                self.state = 12089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 12085
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12086
                    self.expr(0)
                    self.state = 12091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12092
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12094
                self.ternary_builtin_function()
                self.state = 12095
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12096
                self.expr(0)
                self.state = 12097
                self.match(SnowflakeParser.COMMA)
                self.state = 12098
                self.expr(0)
                self.state = 12099
                self.match(SnowflakeParser.COMMA)
                self.state = 12100
                self.expr(0)
                self.state = 12101
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12103
                self.ranking_windowed_function()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12104
                self.aggregate_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12105
                self.object_name()
                self.state = 12106
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4616488687499322048) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & -7809240960230883327) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 4697537411387758727) != 0) or ((((_la - 207)) & ~0x3f) == 0 and ((1 << (_la - 207)) & -8646908497033689899) != 0) or ((((_la - 271)) & ~0x3f) == 0 and ((1 << (_la - 271)) & 2875618771622502513) != 0) or ((((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & 1011196433690609753) != 0) or ((((_la - 412)) & ~0x3f) == 0 and ((1 << (_la - 412)) & 2067176433418769) != 0) or ((((_la - 477)) & ~0x3f) == 0 and ((1 << (_la - 477)) & 252194986786406947) != 0) or ((((_la - 543)) & ~0x3f) == 0 and ((1 << (_la - 543)) & 6341352602797851655) != 0) or ((((_la - 607)) & ~0x3f) == 0 and ((1 << (_la - 607)) & -3457286770154575867) != 0) or ((((_la - 672)) & ~0x3f) == 0 and ((1 << (_la - 672)) & -9078823585765654527) != 0) or ((((_la - 736)) & ~0x3f) == 0 and ((1 << (_la - 736)) & -1725409633472069117) != 0) or ((((_la - 801)) & ~0x3f) == 0 and ((1 << (_la - 801)) & -3458692578755241979) != 0) or ((((_la - 865)) & ~0x3f) == 0 and ((1 << (_la - 865)) & 4613798938326073343) != 0) or ((((_la - 929)) & ~0x3f) == 0 and ((1 << (_la - 929)) & 98389) != 0):
                    self.state = 12107
                    self.expr_list()


                self.state = 12110
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12112
                self.object_name()
                self.state = 12113
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12114
                self.param_assoc_list()
                self.state = 12115
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12117
                self.list_function()
                self.state = 12118
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12119
                self.expr_list()
                self.state = 12120
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12122
                localctx.to_date = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==786 or _la==870):
                    localctx.to_date = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12123
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12124
                self.expr(0)
                self.state = 12125
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 12127
                localctx.length = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==383 or _la==384):
                    localctx.length = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12128
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12129
                self.expr(0)
                self.state = 12130
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 12132
                self.match(SnowflakeParser.TO_BOOLEAN)
                self.state = 12133
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12134
                self.expr(0)
                self.state = 12135
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_assoc_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_assoc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Param_assocContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Param_assocContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_param_assoc_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_assoc_list" ):
                listener.enterParam_assoc_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_assoc_list" ):
                listener.exitParam_assoc_list(self)




    def param_assoc_list(self):

        localctx = SnowflakeParser.Param_assoc_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_param_assoc_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12139
            self.param_assoc()
            self.state = 12144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 12140
                self.match(SnowflakeParser.COMMA)
                self.state = 12141
                self.param_assoc()
                self.state = 12146
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_assocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_param_assoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_assoc" ):
                listener.enterParam_assoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_assoc" ):
                listener.exitParam_assoc(self)




    def param_assoc(self):

        localctx = SnowflakeParser.Param_assocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_param_assoc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12147
            self.id_()
            self.state = 12148
            self.match(SnowflakeParser.ASSOC)
            self.state = 12149
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_or_repect_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(SnowflakeParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(SnowflakeParser.IGNORE, 0)

        def RESPECT(self):
            return self.getToken(SnowflakeParser.RESPECT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_ignore_or_repect_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_or_repect_nulls" ):
                listener.enterIgnore_or_repect_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_or_repect_nulls" ):
                listener.exitIgnore_or_repect_nulls(self)




    def ignore_or_repect_nulls(self):

        localctx = SnowflakeParser.Ignore_or_repect_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_ignore_or_repect_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12151
            _la = self._input.LA(1)
            if not(_la==330 or _la==605):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 12152
            self.match(SnowflakeParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ranking_windowed_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def over_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(SnowflakeParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(SnowflakeParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SnowflakeParser.ROW_NUMBER, 0)

        def NTILE(self):
            return self.getToken(SnowflakeParser.NTILE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def LEAD(self):
            return self.getToken(SnowflakeParser.LEAD, 0)

        def LAG(self):
            return self.getToken(SnowflakeParser.LAG, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def ignore_or_repect_nulls(self):
            return self.getTypedRuleContext(SnowflakeParser.Ignore_or_repect_nullsContext,0)


        def FIRST_VALUE(self):
            return self.getToken(SnowflakeParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(SnowflakeParser.LAST_VALUE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)




    def ranking_windowed_function(self):

        localctx = SnowflakeParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 12189
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195, 572, 629]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12154
                _la = self._input.LA(1)
                if not(_la==195 or _la==572 or _la==629):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12155
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12156
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12157
                self.over_clause()
                pass
            elif token in [455]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12158
                self.match(SnowflakeParser.NTILE)
                self.state = 12159
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12160
                self.expr(0)
                self.state = 12161
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12162
                self.over_clause()
                pass
            elif token in [373, 381]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12164
                _la = self._input.LA(1)
                if not(_la==373 or _la==381):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12165
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12166
                self.expr(0)
                self.state = 12172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==937:
                    self.state = 12167
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12168
                    self.expr(0)
                    self.state = 12169
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12170
                    self.expr(0)


                self.state = 12174
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330 or _la==605:
                    self.state = 12175
                    self.ignore_or_repect_nulls()


                self.state = 12178
                self.over_clause()
                pass
            elif token in [276, 379]:
                self.enterOuterAlt(localctx, 4)
                self.state = 12180
                _la = self._input.LA(1)
                if not(_la==276 or _la==379):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12181
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12182
                self.expr(0)
                self.state = 12183
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==330 or _la==605:
                    self.state = 12184
                    self.ignore_or_repect_nulls()


                self.state = 12187
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def DISTINCT(self):
            return self.getToken(SnowflakeParser.DISTINCT, 0)

        def STAR(self):
            return self.getToken(SnowflakeParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def LISTAGG(self):
            return self.getToken(SnowflakeParser.LISTAGG, 0)

        def ARRAY_AGG(self):
            return self.getToken(SnowflakeParser.ARRAY_AGG, 0)

        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def WITHIN(self):
            return self.getToken(SnowflakeParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_aggregate_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function" ):
                listener.enterAggregate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function" ):
                listener.exitAggregate_function(self)




    def aggregate_function(self):

        localctx = SnowflakeParser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.state = 12223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1563,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12191
                self.id_()
                self.state = 12192
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 12193
                    self.match(SnowflakeParser.DISTINCT)


                self.state = 12196
                self.expr_list()
                self.state = 12197
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12199
                self.id_()
                self.state = 12200
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12201
                self.match(SnowflakeParser.STAR)
                self.state = 12202
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12204
                _la = self._input.LA(1)
                if not(_la==44 or _la==895):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12205
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 12206
                    self.match(SnowflakeParser.DISTINCT)


                self.state = 12209
                self.expr(0)
                self.state = 12212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==937:
                    self.state = 12210
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12211
                    self.string()


                self.state = 12214
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1562,self._ctx)
                if la_ == 1:
                    self.state = 12215
                    self.match(SnowflakeParser.WITHIN)
                    self.state = 12216
                    self.match(SnowflakeParser.GROUP)
                    self.state = 12217
                    self.match(SnowflakeParser.LR_BRACKET)
                    self.state = 12218
                    self.order_by_clause()
                    self.state = 12219
                    self.match(SnowflakeParser.RR_BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SnowflakeParser.STRING, 0)

        def DECIMAL(self):
            return self.getToken(SnowflakeParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(SnowflakeParser.SignContext,0)


        def REAL(self):
            return self.getToken(SnowflakeParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(SnowflakeParser.FLOAT, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def AT_Q(self):
            return self.getToken(SnowflakeParser.AT_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = SnowflakeParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 12237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1566,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12225
                self.match(SnowflakeParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==944 or _la==945:
                    self.state = 12226
                    self.sign()


                self.state = 12229
                self.match(SnowflakeParser.DECIMAL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==944 or _la==945:
                    self.state = 12230
                    self.sign()


                self.state = 12233
                _la = self._input.LA(1)
                if not(_la==914 or _la==915):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12234
                self.true_false()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12235
                self.match(SnowflakeParser.NULL_)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12236
                self.match(SnowflakeParser.AT_Q)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(SnowflakeParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SnowflakeParser.MINUS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)




    def sign(self):

        localctx = SnowflakeParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12239
            _la = self._input.LA(1)
            if not(_la==944 or _la==945):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Full_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db_name = None # Id_Context
            self.schema = None # Id_Context
            self.tab_name = None # Id_Context
            self.col_name = None # Id_Context

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.DOT)
            else:
                return self.getToken(SnowflakeParser.DOT, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)




    def full_column_name(self):

        localctx = SnowflakeParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_full_column_name)
        self._la = 0 # Token type
        try:
            self.state = 12269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1573,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 12241
                    localctx.db_name = self.id_()


                self.state = 12244
                self.match(SnowflakeParser.DOT)
                self.state = 12246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 12245
                    localctx.schema = self.id_()


                self.state = 12248
                self.match(SnowflakeParser.DOT)
                self.state = 12250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 12249
                    localctx.tab_name = self.id_()


                self.state = 12252
                self.match(SnowflakeParser.DOT)
                self.state = 12253
                localctx.col_name = self.id_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 12254
                    localctx.schema = self.id_()


                self.state = 12257
                self.match(SnowflakeParser.DOT)
                self.state = 12259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 12258
                    localctx.tab_name = self.id_()


                self.state = 12261
                self.match(SnowflakeParser.DOT)
                self.state = 12262
                localctx.col_name = self.id_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 12263
                    localctx.tab_name = self.id_()


                self.state = 12266
                self.match(SnowflakeParser.DOT)
                self.state = 12267
                localctx.col_name = self.id_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12268
                localctx.col_name = self.id_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bracket_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(SnowflakeParser.SubqueryContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_bracket_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)




    def bracket_expression(self):

        localctx = SnowflakeParser.Bracket_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_bracket_expression)
        try:
            self.state = 12279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1574,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12271
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12272
                self.expr_list()
                self.state = 12273
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12275
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12276
                self.subquery()
                self.state = 12277
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(SnowflakeParser.CASE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def END(self):
            return self.getToken(SnowflakeParser.END, 0)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Switch_sectionContext,i)


        def ELSE(self):
            return self.getToken(SnowflakeParser.ELSE, 0)

        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Switch_search_condition_sectionContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_case_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)




    def case_expression(self):

        localctx = SnowflakeParser.Case_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_case_expression)
        self._la = 0 # Token type
        try:
            self.state = 12306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1579,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12281
                self.match(SnowflakeParser.CASE)
                self.state = 12282
                self.expr(0)
                self.state = 12284 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 12283
                    self.switch_section()
                    self.state = 12286 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==845):
                        break

                self.state = 12290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 12288
                    self.match(SnowflakeParser.ELSE)
                    self.state = 12289
                    self.expr(0)


                self.state = 12292
                self.match(SnowflakeParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12294
                self.match(SnowflakeParser.CASE)
                self.state = 12296 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 12295
                    self.switch_search_condition_section()
                    self.state = 12298 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==845):
                        break

                self.state = 12302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 12300
                    self.match(SnowflakeParser.ELSE)
                    self.state = 12301
                    self.expr(0)


                self.state = 12304
                self.match(SnowflakeParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_search_condition_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(SnowflakeParser.WHEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def THEN(self):
            return self.getToken(SnowflakeParser.THEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)




    def switch_search_condition_section(self):

        localctx = SnowflakeParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12308
            self.match(SnowflakeParser.WHEN)
            self.state = 12309
            self.search_condition(0)
            self.state = 12310
            self.match(SnowflakeParser.THEN)
            self.state = 12311
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(SnowflakeParser.WHEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def THEN(self):
            return self.getToken(SnowflakeParser.THEN, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)




    def switch_section(self):

        localctx = SnowflakeParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12313
            self.match(SnowflakeParser.WHEN)
            self.state = 12314
            self.expr(0)
            self.state = 12315
            self.match(SnowflakeParser.THEN)
            self.state = 12316
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_statement_in_parenthesesContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(SnowflakeParser.With_expressionContext,0)


        def set_operators(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Set_operatorsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Set_operatorsContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_query_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_statement" ):
                listener.enterQuery_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_statement" ):
                listener.exitQuery_statement(self)




    def query_statement(self):

        localctx = SnowflakeParser.Query_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_query_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1580,self._ctx)
            if la_ == 1:
                self.state = 12318
                self.with_expression()


            self.state = 12321
            self.select_statement_in_parentheses(0)
            self.state = 12325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1581,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12322
                    self.set_operators() 
                self.state = 12327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1581,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Common_table_expressionContext,i)


        def RECURSIVE(self):
            return self.getToken(SnowflakeParser.RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)




    def with_expression(self):

        localctx = SnowflakeParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_with_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12328
            self.match(SnowflakeParser.WITH)
            self.state = 12330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1582,self._ctx)
            if la_ == 1:
                self.state = 12329
                self.match(SnowflakeParser.RECURSIVE)


            self.state = 12332
            self.common_table_expression()
            self.state = 12337
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1583,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12333
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12334
                    self.common_table_expression() 
                self.state = 12339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1583,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # Column_listContext

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def select_statement_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_statement_in_parenthesesContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SnowflakeParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12340
            self.id_()
            self.state = 12345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==931:
                self.state = 12341
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12342
                localctx.columns = self.column_list()
                self.state = 12343
                self.match(SnowflakeParser.RR_BRACKET)


            self.state = 12347
            self.match(SnowflakeParser.AS)
            self.state = 12348
            self.select_statement_in_parentheses(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_clauseContext,0)


        def select_optional_clauses(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_optional_clausesContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Limit_clauseContext,0)


        def select_top_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_top_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)




    def select_statement(self):

        localctx = SnowflakeParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_select_statement)
        try:
            self.state = 12358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1586,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12350
                self.select_clause()
                self.state = 12351
                self.select_optional_clauses()
                self.state = 12353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1585,self._ctx)
                if la_ == 1:
                    self.state = 12352
                    self.limit_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12355
                self.select_top_clause()
                self.state = 12356
                self.select_optional_clauses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_operatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_statement_in_parenthesesContext,0)


        def UNION(self):
            return self.getToken(SnowflakeParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(SnowflakeParser.EXCEPT, 0)

        def MINUS_(self):
            return self.getToken(SnowflakeParser.MINUS_, 0)

        def INTERSECT(self):
            return self.getToken(SnowflakeParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_set_operators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_operators" ):
                listener.enterSet_operators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_operators" ):
                listener.exitSet_operators(self)




    def set_operators(self):

        localctx = SnowflakeParser.Set_operatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_set_operators)
        self._la = 0 # Token type
        try:
            self.state = 12371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [240, 356, 424, 805]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12367
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [805]:
                    self.state = 12360
                    self.match(SnowflakeParser.UNION)
                    self.state = 12362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==17:
                        self.state = 12361
                        self.match(SnowflakeParser.ALL)


                    pass
                elif token in [240]:
                    self.state = 12364
                    self.match(SnowflakeParser.EXCEPT)
                    pass
                elif token in [424]:
                    self.state = 12365
                    self.match(SnowflakeParser.MINUS_)
                    pass
                elif token in [356]:
                    self.state = 12366
                    self.match(SnowflakeParser.INTERSECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12369
                self.select_statement_in_parentheses(0)
                pass
            elif token in [669, 847, 931]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12370
                self.select_statement_in_parentheses(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statement_in_parenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def select_statement_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_statement_in_parenthesesContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def select_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_statementContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(SnowflakeParser.With_expressionContext,0)


        def set_operators(self):
            return self.getTypedRuleContext(SnowflakeParser.Set_operatorsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_statement_in_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement_in_parentheses" ):
                listener.enterSelect_statement_in_parentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement_in_parentheses" ):
                listener.exitSelect_statement_in_parentheses(self)



    def select_statement_in_parentheses(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SnowflakeParser.Select_statement_in_parenthesesContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1132
        self.enterRecursionRule(localctx, 1132, self.RULE_select_statement_in_parentheses, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [931]:
                self.state = 12374
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12375
                self.select_statement_in_parentheses(0)
                self.state = 12376
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            elif token in [669]:
                self.state = 12378
                self.select_statement()
                pass
            elif token in [847]:
                self.state = 12379
                self.with_expression()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 12386
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1591,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SnowflakeParser.Select_statement_in_parenthesesContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_select_statement_in_parentheses)
                    self.state = 12382
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 12383
                    self.set_operators() 
                self.state = 12388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1591,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Select_optional_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def into_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Into_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Where_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Group_by_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Having_clauseContext,0)


        def qualify_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Qualify_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Order_by_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_optional_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_optional_clauses" ):
                listener.enterSelect_optional_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_optional_clauses" ):
                listener.exitSelect_optional_clauses(self)




    def select_optional_clauses(self):

        localctx = SnowflakeParser.Select_optional_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_select_optional_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1592,self._ctx)
            if la_ == 1:
                self.state = 12389
                self.into_clause()


            self.state = 12393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1593,self._ctx)
            if la_ == 1:
                self.state = 12392
                self.from_clause()


            self.state = 12396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1594,self._ctx)
            if la_ == 1:
                self.state = 12395
                self.where_clause()


            self.state = 12403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1596,self._ctx)
            if la_ == 1:
                self.state = 12398
                self.group_by_clause()
                self.state = 12400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1595,self._ctx)
                if la_ == 1:
                    self.state = 12399
                    self.having_clause()



            elif la_ == 2:
                self.state = 12402
                self.having_clause()


            self.state = 12406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1597,self._ctx)
            if la_ == 1:
                self.state = 12405
                self.qualify_clause()


            self.state = 12409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1598,self._ctx)
            if la_ == 1:
                self.state = 12408
                self.order_by_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SnowflakeParser.SELECT, 0)

        def select_list_no_top(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_list_no_topContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_clause" ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_clause" ):
                listener.exitSelect_clause(self)




    def select_clause(self):

        localctx = SnowflakeParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_select_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12411
            self.match(SnowflakeParser.SELECT)
            self.state = 12412
            self.select_list_no_top()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_top_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SnowflakeParser.SELECT, 0)

        def select_list_top(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_list_topContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_top_clause" ):
                listener.enterSelect_top_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_top_clause" ):
                listener.exitSelect_top_clause(self)




    def select_top_clause(self):

        localctx = SnowflakeParser.Select_top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_select_top_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12414
            self.match(SnowflakeParser.SELECT)
            self.state = 12415
            self.select_list_top()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_no_topContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_listContext,0)


        def all_distinct(self):
            return self.getTypedRuleContext(SnowflakeParser.All_distinctContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_list_no_top

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_no_top" ):
                listener.enterSelect_list_no_top(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_no_top" ):
                listener.exitSelect_list_no_top(self)




    def select_list_no_top(self):

        localctx = SnowflakeParser.Select_list_no_topContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_select_list_no_top)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==205:
                self.state = 12417
                self.all_distinct()


            self.state = 12420
            self.select_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_topContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Select_listContext,0)


        def all_distinct(self):
            return self.getTypedRuleContext(SnowflakeParser.All_distinctContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Top_clauseContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_list_top

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_top" ):
                listener.enterSelect_list_top(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_top" ):
                listener.exitSelect_list_top(self)




    def select_list_top(self):

        localctx = SnowflakeParser.Select_list_topContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_select_list_top)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==205:
                self.state = 12422
                self.all_distinct()


            self.state = 12426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==788:
                self.state = 12425
                self.top_clause()


            self.state = 12428
            self.select_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Select_list_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = SnowflakeParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12430
            self.select_list_elem()
            self.state = 12435
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1602,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12431
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12432
                    self.select_list_elem() 
                self.state = 12437
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1602,self._ctx)

            self.state = 12439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1603,self._ctx)
            if la_ == 1:
                self.state = 12438
                self.match(SnowflakeParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_list_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_elem(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_elemContext,0)


        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def column_elem_star(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_elem_starContext,0)


        def exclude_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Exclude_clauseContext,0)


        def expression_elem(self):
            return self.getTypedRuleContext(SnowflakeParser.Expression_elemContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)




    def select_list_elem(self):

        localctx = SnowflakeParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_select_list_elem)
        try:
            self.state = 12453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1607,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12441
                self.column_elem()
                self.state = 12443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1604,self._ctx)
                if la_ == 1:
                    self.state = 12442
                    self.as_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12445
                self.column_elem_star()
                self.state = 12447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1605,self._ctx)
                if la_ == 1:
                    self.state = 12446
                    self.exclude_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12449
                self.expression_elem()
                self.state = 12451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1606,self._ctx)
                if la_ == 1:
                    self.state = 12450
                    self.as_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_elem_starContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SnowflakeParser.STAR, 0)

        def object_name_or_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_name_or_aliasContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_elem_star

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_elem_star" ):
                listener.enterColumn_elem_star(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_elem_star" ):
                listener.exitColumn_elem_star(self)




    def column_elem_star(self):

        localctx = SnowflakeParser.Column_elem_starContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_column_elem_star)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                self.state = 12455
                self.object_name_or_alias()


            self.state = 12458
            self.match(SnowflakeParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def object_name_or_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_name_or_aliasContext,0)


        def DOLLAR(self):
            return self.getToken(SnowflakeParser.DOLLAR, 0)

        def column_position(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_positionContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_elem" ):
                listener.enterColumn_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_elem" ):
                listener.exitColumn_elem(self)




    def column_elem(self):

        localctx = SnowflakeParser.Column_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_column_elem)
        self._la = 0 # Token type
        try:
            self.state = 12469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1611,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1609,self._ctx)
                if la_ == 1:
                    self.state = 12460
                    self.object_name_or_alias()


                self.state = 12463
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611985087871951552) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & 6016916958669177571) != 0) or ((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & 720586567220002915) != 0) or ((((_la - 239)) & ~0x3f) == 0 and ((1 << (_la - 239)) & -9223054890027187575) != 0) or ((((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & 4923707146814095369) != 0) or ((((_la - 370)) & ~0x3f) == 0 and ((1 << (_la - 370)) & 146441754882660761) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & 1406321551532360709) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & 2170796623107719731) != 0) or ((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & 2134729725502447765) != 0) or ((((_la - 629)) & ~0x3f) == 0 and ((1 << (_la - 629)) & 11270346506241) != 0) or ((((_la - 699)) & ~0x3f) == 0 and ((1 << (_la - 699)) & 1983906486714188189) != 0) or ((((_la - 763)) & ~0x3f) == 0 and ((1 << (_la - 763)) & 64740722141799055) != 0) or ((((_la - 829)) & ~0x3f) == 0 and ((1 << (_la - 829)) & -47244634421) != 0) or ((((_la - 893)) & ~0x3f) == 0 and ((1 << (_la - 893)) & 6915) != 0):
                    self.state = 12464
                    self.object_name_or_alias()


                self.state = 12467
                self.match(SnowflakeParser.DOLLAR)
                self.state = 12468
                self.column_position()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_name_or_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def alias(self):
            return self.getTypedRuleContext(SnowflakeParser.AliasContext,0)


        def DOT(self):
            return self.getToken(SnowflakeParser.DOT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_name_or_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name_or_alias" ):
                listener.enterObject_name_or_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name_or_alias" ):
                listener.exitObject_name_or_alias(self)




    def object_name_or_alias(self):

        localctx = SnowflakeParser.Object_name_or_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_object_name_or_alias)
        try:
            self.state = 12475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1612,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12471
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12472
                self.alias()
                self.state = 12473
                self.match(SnowflakeParser.DOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exclude_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLUDE(self):
            return self.getToken(SnowflakeParser.EXCLUDE, 0)

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def column_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_exclude_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclude_clause" ):
                listener.enterExclude_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclude_clause" ):
                listener.exitExclude_clause(self)




    def exclude_clause(self):

        localctx = SnowflakeParser.Exclude_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_exclude_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12477
            self.match(SnowflakeParser.EXCLUDE)
            self.state = 12480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 7, 9, 13, 15, 16, 27, 31, 44, 48, 62, 108, 109, 113, 114, 115, 117, 131, 134, 135, 138, 143, 144, 149, 153, 154, 163, 164, 165, 168, 170, 174, 175, 179, 180, 190, 194, 198, 204, 207, 209, 211, 213, 214, 217, 231, 233, 239, 242, 246, 248, 270, 271, 275, 276, 277, 284, 287, 302, 303, 306, 322, 324, 325, 326, 327, 328, 329, 332, 339, 342, 343, 345, 350, 353, 355, 357, 361, 365, 370, 373, 374, 377, 378, 381, 382, 384, 385, 390, 396, 397, 412, 416, 421, 427, 436, 438, 446, 456, 460, 461, 462, 477, 482, 486, 491, 492, 493, 496, 500, 501, 504, 505, 509, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 543, 544, 545, 553, 557, 558, 559, 560, 565, 567, 569, 572, 578, 579, 582, 584, 591, 602, 603, 605, 607, 609, 618, 620, 621, 623, 624, 625, 629, 653, 655, 657, 667, 670, 672, 699, 701, 702, 703, 706, 707, 713, 715, 719, 720, 729, 735, 736, 737, 745, 750, 754, 755, 756, 758, 759, 763, 764, 765, 766, 770, 772, 776, 778, 779, 780, 785, 786, 787, 798, 799, 801, 803, 812, 813, 816, 817, 818, 829, 830, 832, 835, 836, 838, 839, 841, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 901, 902, 904, 905]:
                self.state = 12478
                self.column_name()
                pass
            elif token in [931]:
                self.state = 12479
                self.column_list_in_parentheses()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias(self):
            return self.getTypedRuleContext(SnowflakeParser.AliasContext,0)


        def AS(self):
            return self.getToken(SnowflakeParser.AS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_as_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_alias" ):
                listener.enterAs_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_alias" ):
                listener.exitAs_alias(self)




    def as_alias(self):

        localctx = SnowflakeParser.As_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_as_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 12482
                self.match(SnowflakeParser.AS)


            self.state = 12485
            self.alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def predicate(self):
            return self.getTypedRuleContext(SnowflakeParser.PredicateContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_expression_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_elem" ):
                listener.enterExpression_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_elem" ):
                listener.exitExpression_elem(self)




    def expression_elem(self):

        localctx = SnowflakeParser.Expression_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_expression_elem)
        try:
            self.state = 12489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1615,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12487
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12488
                self.predicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_positionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_position" ):
                listener.enterColumn_position(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_position" ):
                listener.exitColumn_position(self)




    def column_position(self):

        localctx = SnowflakeParser.Column_positionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_column_position)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12491
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_distinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(SnowflakeParser.DISTINCT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_all_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct" ):
                listener.enterAll_distinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct" ):
                listener.exitAll_distinct(self)




    def all_distinct(self):

        localctx = SnowflakeParser.All_distinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_all_distinct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12493
            _la = self._input.LA(1)
            if not(_la==17 or _la==205):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(SnowflakeParser.TOP, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)




    def top_clause(self):

        localctx = SnowflakeParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_top_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12495
            self.match(SnowflakeParser.TOP)
            self.state = 12496
            self.num()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(SnowflakeParser.INTO, 0)

        def var_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Var_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = SnowflakeParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12498
            self.match(SnowflakeParser.INTO)
            self.state = 12499
            self.var_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.VarContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.VarContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_var_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_list" ):
                listener.enterVar_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_list" ):
                listener.exitVar_list(self)




    def var_list(self):

        localctx = SnowflakeParser.Var_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_var_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12501
            self.var()
            self.state = 12506
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1616,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12502
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12503
                    self.var() 
                self.state = 12508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1616,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(SnowflakeParser.COLON, 0)

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_var

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar" ):
                listener.enterVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar" ):
                listener.exitVar(self)




    def var(self):

        localctx = SnowflakeParser.VarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_var)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12509
            self.match(SnowflakeParser.COLON)
            self.state = 12510
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(SnowflakeParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_sourcesContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = SnowflakeParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12512
            self.match(SnowflakeParser.FROM)
            self.state = 12513
            self.table_sources()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Table_sourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)




    def table_sources(self):

        localctx = SnowflakeParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12515
            self.table_source()
            self.state = 12520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1617,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12516
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12517
                    self.table_source() 
                self.state = 12522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1617,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item_joined(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_source_item_joinedContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_table_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source" ):
                listener.enterTable_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source" ):
                listener.exitTable_source(self)




    def table_source(self):

        localctx = SnowflakeParser.Table_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_table_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12523
            self.table_source_item_joined()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_source_item_joinedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_ref(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_refContext,0)


        def join_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Join_clauseContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Join_clauseContext,i)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def table_source_item_joined(self):
            return self.getTypedRuleContext(SnowflakeParser.Table_source_item_joinedContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_table_source_item_joined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_joined" ):
                listener.enterTable_source_item_joined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_joined" ):
                listener.exitTable_source_item_joined(self)




    def table_source_item_joined(self):

        localctx = SnowflakeParser.Table_source_item_joinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_table_source_item_joined)
        try:
            self.state = 12541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1620,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12525
                self.object_ref()
                self.state = 12529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1618,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 12526
                        self.join_clause() 
                    self.state = 12531
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1618,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12532
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12533
                self.table_source_item_joined()
                self.state = 12534
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12538
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1619,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 12535
                        self.join_clause() 
                    self.state = 12540
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1619,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_nameContext,0)


        def at_before(self):
            return self.getTypedRuleContext(SnowflakeParser.At_beforeContext,0)


        def changes(self):
            return self.getTypedRuleContext(SnowflakeParser.ChangesContext,0)


        def match_recognize(self):
            return self.getTypedRuleContext(SnowflakeParser.Match_recognizeContext,0)


        def pivot_unpivot(self):
            return self.getTypedRuleContext(SnowflakeParser.Pivot_unpivotContext,0)


        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def column_list_in_parentheses(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_list_in_parenthesesContext,0)


        def sample(self):
            return self.getTypedRuleContext(SnowflakeParser.SampleContext,0)


        def START(self):
            return self.getToken(SnowflakeParser.START, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def predicate(self):
            return self.getTypedRuleContext(SnowflakeParser.PredicateContext,0)


        def CONNECT(self):
            return self.getToken(SnowflakeParser.CONNECT, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def prior_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Prior_listContext,0)


        def TABLE(self):
            return self.getToken(SnowflakeParser.TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def function_call(self):
            return self.getTypedRuleContext(SnowflakeParser.Function_callContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def values_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Values_tableContext,0)


        def subquery(self):
            return self.getTypedRuleContext(SnowflakeParser.SubqueryContext,0)


        def LATERAL(self):
            return self.getToken(SnowflakeParser.LATERAL, 0)

        def flatten_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Flatten_tableContext,0)


        def splited_table(self):
            return self.getTypedRuleContext(SnowflakeParser.Splited_tableContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_object_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_ref" ):
                listener.enterObject_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_ref" ):
                listener.exitObject_ref(self)




    def object_ref(self):

        localctx = SnowflakeParser.Object_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_object_ref)
        self._la = 0 # Token type
        try:
            self.state = 12614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1639,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12543
                self.object_name()
                self.state = 12545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1621,self._ctx)
                if la_ == 1:
                    self.state = 12544
                    self.at_before()


                self.state = 12548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1622,self._ctx)
                if la_ == 1:
                    self.state = 12547
                    self.changes()


                self.state = 12551
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1623,self._ctx)
                if la_ == 1:
                    self.state = 12550
                    self.match_recognize()


                self.state = 12554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1624,self._ctx)
                if la_ == 1:
                    self.state = 12553
                    self.pivot_unpivot()


                self.state = 12557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1625,self._ctx)
                if la_ == 1:
                    self.state = 12556
                    self.as_alias()


                self.state = 12560
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1626,self._ctx)
                if la_ == 1:
                    self.state = 12559
                    self.column_list_in_parentheses()


                self.state = 12563
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1627,self._ctx)
                if la_ == 1:
                    self.state = 12562
                    self.sample()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12565
                self.object_name()
                self.state = 12566
                self.match(SnowflakeParser.START)
                self.state = 12567
                self.match(SnowflakeParser.WITH)
                self.state = 12568
                self.predicate()
                self.state = 12569
                self.match(SnowflakeParser.CONNECT)
                self.state = 12570
                self.match(SnowflakeParser.BY)
                self.state = 12572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1628,self._ctx)
                if la_ == 1:
                    self.state = 12571
                    self.prior_list()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12574
                self.match(SnowflakeParser.TABLE)
                self.state = 12575
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12576
                self.function_call()
                self.state = 12577
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1629,self._ctx)
                if la_ == 1:
                    self.state = 12578
                    self.pivot_unpivot()


                self.state = 12582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1630,self._ctx)
                if la_ == 1:
                    self.state = 12581
                    self.as_alias()


                self.state = 12585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1631,self._ctx)
                if la_ == 1:
                    self.state = 12584
                    self.sample()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12587
                self.values_table()
                self.state = 12589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1632,self._ctx)
                if la_ == 1:
                    self.state = 12588
                    self.sample()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==380:
                    self.state = 12591
                    self.match(SnowflakeParser.LATERAL)


                self.state = 12594
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12595
                self.subquery()
                self.state = 12596
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12598
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1634,self._ctx)
                if la_ == 1:
                    self.state = 12597
                    self.pivot_unpivot()


                self.state = 12601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1635,self._ctx)
                if la_ == 1:
                    self.state = 12600
                    self.as_alias()


                self.state = 12604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1636,self._ctx)
                if la_ == 1:
                    self.state = 12603
                    self.column_list_in_parentheses()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12606
                self.match(SnowflakeParser.LATERAL)
                self.state = 12609
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [277]:
                    self.state = 12607
                    self.flatten_table()
                    pass
                elif token in [703]:
                    self.state = 12608
                    self.splited_table()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1638,self._ctx)
                if la_ == 1:
                    self.state = 12611
                    self.as_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flatten_table_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_(self):
            return self.getToken(SnowflakeParser.PATH_, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def OUTER(self):
            return self.getToken(SnowflakeParser.OUTER, 0)

        def true_false(self):
            return self.getTypedRuleContext(SnowflakeParser.True_falseContext,0)


        def RECURSIVE(self):
            return self.getToken(SnowflakeParser.RECURSIVE, 0)

        def MODE(self):
            return self.getToken(SnowflakeParser.MODE, 0)

        def ARRAY_Q(self):
            return self.getToken(SnowflakeParser.ARRAY_Q, 0)

        def OBJECT_Q(self):
            return self.getToken(SnowflakeParser.OBJECT_Q, 0)

        def BOTH_Q(self):
            return self.getToken(SnowflakeParser.BOTH_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_flatten_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlatten_table_option" ):
                listener.enterFlatten_table_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlatten_table_option" ):
                listener.exitFlatten_table_option(self)




    def flatten_table_option(self):

        localctx = SnowflakeParser.Flatten_table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_flatten_table_option)
        self._la = 0 # Token type
        try:
            self.state = 12628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [533]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12616
                self.match(SnowflakeParser.PATH_)
                self.state = 12617
                self.match(SnowflakeParser.ASSOC)
                self.state = 12618
                self.string()
                pass
            elif token in [505]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12619
                self.match(SnowflakeParser.OUTER)
                self.state = 12620
                self.match(SnowflakeParser.ASSOC)
                self.state = 12621
                self.true_false()
                pass
            elif token in [578]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12622
                self.match(SnowflakeParser.RECURSIVE)
                self.state = 12623
                self.match(SnowflakeParser.ASSOC)
                self.state = 12624
                self.true_false()
                pass
            elif token in [427]:
                self.enterOuterAlt(localctx, 4)
                self.state = 12625
                self.match(SnowflakeParser.MODE)
                self.state = 12626
                self.match(SnowflakeParser.ASSOC)
                self.state = 12627
                _la = self._input.LA(1)
                if not(_la==95 or _la==478 or _la==864):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flatten_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLATTEN(self):
            return self.getToken(SnowflakeParser.FLATTEN, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def INPUT(self):
            return self.getToken(SnowflakeParser.INPUT, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def flatten_table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Flatten_table_optionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Flatten_table_optionContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_flatten_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlatten_table" ):
                listener.enterFlatten_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlatten_table" ):
                listener.exitFlatten_table(self)




    def flatten_table(self):

        localctx = SnowflakeParser.Flatten_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_flatten_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12630
            self.match(SnowflakeParser.FLATTEN)
            self.state = 12631
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1641,self._ctx)
            if la_ == 1:
                self.state = 12632
                self.match(SnowflakeParser.INPUT)
                self.state = 12633
                self.match(SnowflakeParser.ASSOC)


            self.state = 12636
            self.expr(0)
            self.state = 12641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 12637
                self.match(SnowflakeParser.COMMA)
                self.state = 12638
                self.flatten_table_option()
                self.state = 12643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12644
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Splited_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPLIT_TO_TABLE(self):
            return self.getToken(SnowflakeParser.SPLIT_TO_TABLE, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def COMMA(self):
            return self.getToken(SnowflakeParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_splited_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSplited_table" ):
                listener.enterSplited_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSplited_table" ):
                listener.exitSplited_table(self)




    def splited_table(self):

        localctx = SnowflakeParser.Splited_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_splited_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12646
            self.match(SnowflakeParser.SPLIT_TO_TABLE)
            self.state = 12647
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12648
            self.expr(0)
            self.state = 12649
            self.match(SnowflakeParser.COMMA)
            self.state = 12650
            self.expr(0)
            self.state = 12651
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prior_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prior_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Prior_itemContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Prior_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_prior_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrior_list" ):
                listener.enterPrior_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrior_list" ):
                listener.exitPrior_list(self)




    def prior_list(self):

        localctx = SnowflakeParser.Prior_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_prior_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12653
            self.prior_item()
            self.state = 12658
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1643,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12654
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12655
                    self.prior_item() 
                self.state = 12660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1643,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prior_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def PRIOR(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.PRIOR)
            else:
                return self.getToken(SnowflakeParser.PRIOR, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_prior_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrior_item" ):
                listener.enterPrior_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrior_item" ):
                listener.exitPrior_item(self)




    def prior_item(self):

        localctx = SnowflakeParser.Prior_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_prior_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==552:
                self.state = 12661
                self.match(SnowflakeParser.PRIOR)


            self.state = 12664
            self.id_()
            self.state = 12665
            self.match(SnowflakeParser.EQ)
            self.state = 12667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==552:
                self.state = 12666
                self.match(SnowflakeParser.PRIOR)


            self.state = 12669
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Outer_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(SnowflakeParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(SnowflakeParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SnowflakeParser.FULL, 0)

        def OUTER(self):
            return self.getToken(SnowflakeParser.OUTER, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_outer_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join" ):
                listener.enterOuter_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join" ):
                listener.exitOuter_join(self)




    def outer_join(self):

        localctx = SnowflakeParser.Outer_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_outer_join)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12671
            _la = self._input.LA(1)
            if not(_la==286 or _la==382 or _la==618):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 12673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==505:
                self.state = 12672
                self.match(SnowflakeParser.OUTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SnowflakeParser.INNER, 0)

        def outer_join(self):
            return self.getTypedRuleContext(SnowflakeParser.Outer_joinContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)




    def join_type(self):

        localctx = SnowflakeParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_join_type)
        try:
            self.state = 12677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [349]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12675
                self.match(SnowflakeParser.INNER)
                pass
            elif token in [286, 382, 618]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12676
                self.outer_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(SnowflakeParser.JOIN, 0)

        def object_ref(self):
            return self.getTypedRuleContext(SnowflakeParser.Object_refContext,0)


        def join_type(self):
            return self.getTypedRuleContext(SnowflakeParser.Join_typeContext,0)


        def ON(self):
            return self.getToken(SnowflakeParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def USING(self):
            return self.getToken(SnowflakeParser.USING, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def NATURAL(self):
            return self.getToken(SnowflakeParser.NATURAL, 0)

        def outer_join(self):
            return self.getTypedRuleContext(SnowflakeParser.Outer_joinContext,0)


        def CROSS(self):
            return self.getToken(SnowflakeParser.CROSS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SnowflakeParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 12706
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [286, 349, 365, 382, 618]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286 or _la==349 or _la==382 or _la==618:
                    self.state = 12679
                    self.join_type()


                self.state = 12682
                self.match(SnowflakeParser.JOIN)
                self.state = 12683
                self.object_ref()
                self.state = 12695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1651,self._ctx)
                if la_ == 1:
                    self.state = 12686
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1649,self._ctx)
                    if la_ == 1:
                        self.state = 12684
                        self.match(SnowflakeParser.ON)
                        self.state = 12685
                        self.search_condition(0)


                    pass

                elif la_ == 2:
                    self.state = 12693
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1650,self._ctx)
                    if la_ == 1:
                        self.state = 12688
                        self.match(SnowflakeParser.USING)
                        self.state = 12689
                        self.match(SnowflakeParser.LR_BRACKET)
                        self.state = 12690
                        self.column_list()
                        self.state = 12691
                        self.match(SnowflakeParser.RR_BRACKET)


                    pass


                pass
            elif token in [437]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12697
                self.match(SnowflakeParser.NATURAL)
                self.state = 12699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286 or _la==382 or _la==618:
                    self.state = 12698
                    self.outer_join()


                self.state = 12701
                self.match(SnowflakeParser.JOIN)
                self.state = 12702
                self.object_ref()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12703
                self.match(SnowflakeParser.CROSS)
                self.state = 12704
                self.match(SnowflakeParser.JOIN)
                self.state = 12705
                self.object_ref()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_beforeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_KEYWORD(self):
            return self.getToken(SnowflakeParser.AT_KEYWORD, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def OFFSET(self):
            return self.getToken(SnowflakeParser.OFFSET, 0)

        def STATEMENT(self):
            return self.getToken(SnowflakeParser.STATEMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def STREAM(self):
            return self.getToken(SnowflakeParser.STREAM, 0)

        def BEFORE(self):
            return self.getToken(SnowflakeParser.BEFORE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_at_before

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_before" ):
                listener.enterAt_before(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_before" ):
                listener.exitAt_before(self)




    def at_before(self):

        localctx = SnowflakeParser.At_beforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_at_before)
        try:
            self.state = 12733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12708
                self.match(SnowflakeParser.AT_KEYWORD)
                self.state = 12709
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12722
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [766]:
                    self.state = 12710
                    self.match(SnowflakeParser.TIMESTAMP)
                    self.state = 12711
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 12712
                    self.expr(0)
                    pass
                elif token in [482]:
                    self.state = 12713
                    self.match(SnowflakeParser.OFFSET)
                    self.state = 12714
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 12715
                    self.expr(0)
                    pass
                elif token in [716]:
                    self.state = 12716
                    self.match(SnowflakeParser.STATEMENT)
                    self.state = 12717
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 12718
                    self.string()
                    pass
                elif token in [728]:
                    self.state = 12719
                    self.match(SnowflakeParser.STREAM)
                    self.state = 12720
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 12721
                    self.string()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12724
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12726
                self.match(SnowflakeParser.BEFORE)
                self.state = 12727
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12728
                self.match(SnowflakeParser.STATEMENT)
                self.state = 12729
                self.match(SnowflakeParser.ASSOC)
                self.state = 12730
                self.string()
                self.state = 12731
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(SnowflakeParser.END, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def TIMESTAMP(self):
            return self.getToken(SnowflakeParser.TIMESTAMP, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def OFFSET(self):
            return self.getToken(SnowflakeParser.OFFSET, 0)

        def STATEMENT(self):
            return self.getToken(SnowflakeParser.STATEMENT, 0)

        def string(self):
            return self.getTypedRuleContext(SnowflakeParser.StringContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_end

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd" ):
                listener.enterEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd" ):
                listener.exitEnd(self)




    def end(self):

        localctx = SnowflakeParser.EndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_end)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12735
            self.match(SnowflakeParser.END)
            self.state = 12736
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [766]:
                self.state = 12737
                self.match(SnowflakeParser.TIMESTAMP)
                self.state = 12738
                self.match(SnowflakeParser.ASSOC)
                self.state = 12739
                self.expr(0)
                pass
            elif token in [482]:
                self.state = 12740
                self.match(SnowflakeParser.OFFSET)
                self.state = 12741
                self.match(SnowflakeParser.ASSOC)
                self.state = 12742
                self.expr(0)
                pass
            elif token in [716]:
                self.state = 12743
                self.match(SnowflakeParser.STATEMENT)
                self.state = 12744
                self.match(SnowflakeParser.ASSOC)
                self.state = 12745
                self.string()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 12748
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGES(self):
            return self.getToken(SnowflakeParser.CHANGES, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def INFORMATION(self):
            return self.getToken(SnowflakeParser.INFORMATION, 0)

        def ASSOC(self):
            return self.getToken(SnowflakeParser.ASSOC, 0)

        def default_append_only(self):
            return self.getTypedRuleContext(SnowflakeParser.Default_append_onlyContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def at_before(self):
            return self.getTypedRuleContext(SnowflakeParser.At_beforeContext,0)


        def end(self):
            return self.getTypedRuleContext(SnowflakeParser.EndContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_changes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChanges" ):
                listener.enterChanges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChanges" ):
                listener.exitChanges(self)




    def changes(self):

        localctx = SnowflakeParser.ChangesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_changes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12750
            self.match(SnowflakeParser.CHANGES)
            self.state = 12751
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12752
            self.match(SnowflakeParser.INFORMATION)
            self.state = 12753
            self.match(SnowflakeParser.ASSOC)
            self.state = 12754
            self.default_append_only()
            self.state = 12755
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 12756
            self.at_before()
            self.state = 12758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1657,self._ctx)
            if la_ == 1:
                self.state = 12757
                self.end()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_append_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(SnowflakeParser.DEFAULT, 0)

        def APPEND_ONLY(self):
            return self.getToken(SnowflakeParser.APPEND_ONLY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_default_append_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_append_only" ):
                listener.enterDefault_append_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_append_only" ):
                listener.exitDefault_append_only(self)




    def default_append_only(self):

        localctx = SnowflakeParser.Default_append_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_default_append_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12760
            _la = self._input.LA(1)
            if not(_la==41 or _la==182):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SnowflakeParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = SnowflakeParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12762
            self.match(SnowflakeParser.PARTITION)
            self.state = 12763
            self.match(SnowflakeParser.BY)
            self.state = 12764
            self.expr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SnowflakeParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12766
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_alias_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.AliasContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.AliasContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.AS)
            else:
                return self.getToken(SnowflakeParser.AS, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_expr_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_alias_list" ):
                listener.enterExpr_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_alias_list" ):
                listener.exitExpr_alias_list(self)




    def expr_alias_list(self):

        localctx = SnowflakeParser.Expr_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_expr_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12768
            self.expr(0)
            self.state = 12770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 12769
                self.match(SnowflakeParser.AS)


            self.state = 12772
            self.alias()
            self.state = 12782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 12773
                self.match(SnowflakeParser.COMMA)
                self.state = 12774
                self.expr(0)
                self.state = 12776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 12775
                    self.match(SnowflakeParser.AS)


                self.state = 12778
                self.alias()
                self.state = 12784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeasuresContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEASURES(self):
            return self.getToken(SnowflakeParser.MEASURES, 0)

        def expr_alias_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_alias_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_measures

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeasures" ):
                listener.enterMeasures(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeasures" ):
                listener.exitMeasures(self)




    def measures(self):

        localctx = SnowflakeParser.MeasuresContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_measures)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12785
            self.match(SnowflakeParser.MEASURES)
            self.state = 12786
            self.expr_alias_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(SnowflakeParser.SHOW, 0)

        def EMPTY_(self):
            return self.getToken(SnowflakeParser.EMPTY_, 0)

        def MATCHES(self):
            return self.getToken(SnowflakeParser.MATCHES, 0)

        def OMIT(self):
            return self.getToken(SnowflakeParser.OMIT, 0)

        def WITH(self):
            return self.getToken(SnowflakeParser.WITH, 0)

        def UNMATCHED(self):
            return self.getToken(SnowflakeParser.UNMATCHED, 0)

        def ROWS(self):
            return self.getToken(SnowflakeParser.ROWS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_match_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_opts" ):
                listener.enterMatch_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_opts" ):
                listener.exitMatch_opts(self)




    def match_opts(self):

        localctx = SnowflakeParser.Match_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_match_opts)
        try:
            self.state = 12797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [681]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12788
                self.match(SnowflakeParser.SHOW)
                self.state = 12789
                self.match(SnowflakeParser.EMPTY_)
                self.state = 12790
                self.match(SnowflakeParser.MATCHES)
                pass
            elif token in [487]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12791
                self.match(SnowflakeParser.OMIT)
                self.state = 12792
                self.match(SnowflakeParser.EMPTY_)
                self.state = 12793
                self.match(SnowflakeParser.MATCHES)
                pass
            elif token in [847]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12794
                self.match(SnowflakeParser.WITH)
                self.state = 12795
                self.match(SnowflakeParser.UNMATCHED)
                self.state = 12796
                self.match(SnowflakeParser.ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONE(self):
            return self.getToken(SnowflakeParser.ONE, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def PER(self):
            return self.getToken(SnowflakeParser.PER, 0)

        def MATCH(self):
            return self.getToken(SnowflakeParser.MATCH, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def ROWS(self):
            return self.getToken(SnowflakeParser.ROWS, 0)

        def match_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Match_optsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_row_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_match" ):
                listener.enterRow_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_match" ):
                listener.exitRow_match(self)




    def row_match(self):

        localctx = SnowflakeParser.Row_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_row_match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12807
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [489]:
                self.state = 12799
                self.match(SnowflakeParser.ONE)
                self.state = 12800
                self.match(SnowflakeParser.ROW)
                self.state = 12801
                self.match(SnowflakeParser.PER)
                self.state = 12802
                self.match(SnowflakeParser.MATCH)
                pass
            elif token in [17]:
                self.state = 12803
                self.match(SnowflakeParser.ALL)
                self.state = 12804
                self.match(SnowflakeParser.ROWS)
                self.state = 12805
                self.match(SnowflakeParser.PER)
                self.state = 12806
                self.match(SnowflakeParser.MATCH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 12810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==487 or _la==681 or _la==847:
                self.state = 12809
                self.match_opts()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class First_lastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(SnowflakeParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SnowflakeParser.LAST, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_first_last

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst_last" ):
                listener.enterFirst_last(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst_last" ):
                listener.exitFirst_last(self)




    def first_last(self):

        localctx = SnowflakeParser.First_lastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_first_last)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12812
            _la = self._input.LA(1)
            if not(_la==274 or _la==376):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DUMMY(self):
            return self.getToken(SnowflakeParser.DUMMY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)




    def symbol(self):

        localctx = SnowflakeParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_symbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12814
            self.match(SnowflakeParser.DUMMY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class After_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(SnowflakeParser.AFTER, 0)

        def MATCH(self):
            return self.getToken(SnowflakeParser.MATCH, 0)

        def SKIP_(self):
            return self.getToken(SnowflakeParser.SKIP_, 0)

        def PAST(self):
            return self.getToken(SnowflakeParser.PAST, 0)

        def LAST(self):
            return self.getToken(SnowflakeParser.LAST, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def TO(self):
            return self.getToken(SnowflakeParser.TO, 0)

        def NEXT(self):
            return self.getToken(SnowflakeParser.NEXT, 0)

        def symbol(self):
            return self.getTypedRuleContext(SnowflakeParser.SymbolContext,0)


        def first_last(self):
            return self.getTypedRuleContext(SnowflakeParser.First_lastContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_after_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAfter_match" ):
                listener.enterAfter_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAfter_match" ):
                listener.exitAfter_match(self)




    def after_match(self):

        localctx = SnowflakeParser.After_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1222, self.RULE_after_match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12816
            self.match(SnowflakeParser.AFTER)
            self.state = 12817
            self.match(SnowflakeParser.MATCH)
            self.state = 12818
            self.match(SnowflakeParser.SKIP_)
            self.state = 12830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1665,self._ctx)
            if la_ == 1:
                self.state = 12819
                self.match(SnowflakeParser.PAST)
                self.state = 12820
                self.match(SnowflakeParser.LAST)
                self.state = 12821
                self.match(SnowflakeParser.ROW)
                pass

            elif la_ == 2:
                self.state = 12822
                self.match(SnowflakeParser.TO)
                self.state = 12823
                self.match(SnowflakeParser.NEXT)
                self.state = 12824
                self.match(SnowflakeParser.ROW)
                pass

            elif la_ == 3:
                self.state = 12825
                self.match(SnowflakeParser.TO)
                self.state = 12827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==376:
                    self.state = 12826
                    self.first_last()


                self.state = 12829
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Symbol_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.SymbolContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.SymbolContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.AS)
            else:
                return self.getToken(SnowflakeParser.AS, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_symbol_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol_list" ):
                listener.enterSymbol_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol_list" ):
                listener.exitSymbol_list(self)




    def symbol_list(self):

        localctx = SnowflakeParser.Symbol_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1224, self.RULE_symbol_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12832
            self.symbol()
            self.state = 12833
            self.match(SnowflakeParser.AS)
            self.state = 12834
            self.expr(0)
            self.state = 12842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 12835
                self.match(SnowflakeParser.COMMA)
                self.state = 12836
                self.symbol()
                self.state = 12837
                self.match(SnowflakeParser.AS)
                self.state = 12838
                self.expr(0)
                self.state = 12844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINE(self):
            return self.getToken(SnowflakeParser.DEFINE, 0)

        def symbol_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Symbol_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_define

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefine" ):
                listener.enterDefine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefine" ):
                listener.exitDefine(self)




    def define(self):

        localctx = SnowflakeParser.DefineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1226, self.RULE_define)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12845
            self.match(SnowflakeParser.DEFINE)
            self.state = 12846
            self.symbol_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_recognizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH_RECOGNIZE(self):
            return self.getToken(SnowflakeParser.MATCH_RECOGNIZE, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SnowflakeParser.Partition_byContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Order_by_clauseContext,0)


        def measures(self):
            return self.getTypedRuleContext(SnowflakeParser.MeasuresContext,0)


        def row_match(self):
            return self.getTypedRuleContext(SnowflakeParser.Row_matchContext,0)


        def after_match(self):
            return self.getTypedRuleContext(SnowflakeParser.After_matchContext,0)


        def pattern(self):
            return self.getTypedRuleContext(SnowflakeParser.PatternContext,0)


        def define(self):
            return self.getTypedRuleContext(SnowflakeParser.DefineContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_match_recognize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_recognize" ):
                listener.enterMatch_recognize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_recognize" ):
                listener.exitMatch_recognize(self)




    def match_recognize(self):

        localctx = SnowflakeParser.Match_recognizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1228, self.RULE_match_recognize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12848
            self.match(SnowflakeParser.MATCH_RECOGNIZE)
            self.state = 12849
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==518:
                self.state = 12850
                self.partition_by()


            self.state = 12854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==500:
                self.state = 12853
                self.order_by_clause()


            self.state = 12857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==415:
                self.state = 12856
                self.measures()


            self.state = 12860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==489:
                self.state = 12859
                self.row_match()


            self.state = 12863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 12862
                self.after_match()


            self.state = 12866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==534:
                self.state = 12865
                self.pattern()


            self.state = 12869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 12868
                self.define()


            self.state = 12871
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_unpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(SnowflakeParser.PIVOT, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.LR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.LR_BRACKET, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.RR_BRACKET)
            else:
                return self.getToken(SnowflakeParser.RR_BRACKET, i)

        def FOR(self):
            return self.getToken(SnowflakeParser.FOR, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.LiteralContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.LiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def column_alias_list_in_brackets(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_alias_list_in_bracketsContext,0)


        def UNPIVOT(self):
            return self.getToken(SnowflakeParser.UNPIVOT, 0)

        def column_name(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_listContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_pivot_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_unpivot" ):
                listener.enterPivot_unpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_unpivot" ):
                listener.exitPivot_unpivot(self)




    def pivot_unpivot(self):

        localctx = SnowflakeParser.Pivot_unpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1230, self.RULE_pivot_unpivot)
        self._la = 0 # Token type
        try:
            self.state = 12910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [542]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12873
                self.match(SnowflakeParser.PIVOT)
                self.state = 12874
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12875
                self.id_()
                self.state = 12876
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12877
                self.id_()
                self.state = 12878
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12879
                self.match(SnowflakeParser.FOR)
                self.state = 12880
                self.id_()
                self.state = 12881
                self.match(SnowflakeParser.IN)
                self.state = 12882
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12883
                self.literal()
                self.state = 12888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 12884
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12885
                    self.literal()
                    self.state = 12890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12891
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12892
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1676,self._ctx)
                if la_ == 1:
                    self.state = 12893
                    self.as_alias()
                    self.state = 12895
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1675,self._ctx)
                    if la_ == 1:
                        self.state = 12894
                        self.column_alias_list_in_brackets()




                pass
            elif token in [808]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12899
                self.match(SnowflakeParser.UNPIVOT)
                self.state = 12900
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12901
                self.id_()
                self.state = 12902
                self.match(SnowflakeParser.FOR)
                self.state = 12903
                self.column_name()
                self.state = 12904
                self.match(SnowflakeParser.IN)
                self.state = 12905
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12906
                self.column_list()
                self.state = 12907
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12908
                self.match(SnowflakeParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_alias_list_in_bracketsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Id_Context)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Id_Context,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_column_alias_list_in_brackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list_in_brackets" ):
                listener.enterColumn_alias_list_in_brackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list_in_brackets" ):
                listener.exitColumn_alias_list_in_brackets(self)




    def column_alias_list_in_brackets(self):

        localctx = SnowflakeParser.Column_alias_list_in_bracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1232, self.RULE_column_alias_list_in_brackets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12912
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12913
            self.id_()
            self.state = 12918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==937:
                self.state = 12914
                self.match(SnowflakeParser.COMMA)
                self.state = 12915
                self.id_()
                self.state = 12920
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12921
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_list_in_parenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_expr_list_in_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list_in_parentheses" ):
                listener.enterExpr_list_in_parentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list_in_parentheses" ):
                listener.exitExpr_list_in_parentheses(self)




    def expr_list_in_parentheses(self):

        localctx = SnowflakeParser.Expr_list_in_parenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1234, self.RULE_expr_list_in_parentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12923
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12924
            self.expr_list()
            self.state = 12925
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def values_table_body(self):
            return self.getTypedRuleContext(SnowflakeParser.Values_table_bodyContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def as_alias(self):
            return self.getTypedRuleContext(SnowflakeParser.As_aliasContext,0)


        def column_alias_list_in_brackets(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_alias_list_in_bracketsContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_values_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_table" ):
                listener.enterValues_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_table" ):
                listener.exitValues_table(self)




    def values_table(self):

        localctx = SnowflakeParser.Values_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1236, self.RULE_values_table)
        try:
            self.state = 12943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [931]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12927
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12928
                self.values_table_body()
                self.state = 12929
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 12934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1680,self._ctx)
                if la_ == 1:
                    self.state = 12930
                    self.as_alias()
                    self.state = 12932
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1679,self._ctx)
                    if la_ == 1:
                        self.state = 12931
                        self.column_alias_list_in_brackets()




                pass
            elif token in [830]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12936
                self.values_table_body()
                self.state = 12941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1682,self._ctx)
                if la_ == 1:
                    self.state = 12937
                    self.as_alias()
                    self.state = 12939
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1681,self._ctx)
                    if la_ == 1:
                        self.state = 12938
                        self.column_alias_list_in_brackets()




                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Values_table_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(SnowflakeParser.VALUES, 0)

        def expr_list_in_parentheses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Expr_list_in_parenthesesContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Expr_list_in_parenthesesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_values_table_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues_table_body" ):
                listener.enterValues_table_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues_table_body" ):
                listener.exitValues_table_body(self)




    def values_table_body(self):

        localctx = SnowflakeParser.Values_table_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1238, self.RULE_values_table_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12945
            self.match(SnowflakeParser.VALUES)
            self.state = 12946
            self.expr_list_in_parentheses()
            self.state = 12951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1684,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12947
                    self.match(SnowflakeParser.COMMA)
                    self.state = 12948
                    self.expr_list_in_parentheses() 
                self.state = 12953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1684,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_methodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_sampling = None # Token
            self.block_sampling = None # Token

        def BERNOULLI(self):
            return self.getToken(SnowflakeParser.BERNOULLI, 0)

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def SYSTEM(self):
            return self.getToken(SnowflakeParser.SYSTEM, 0)

        def BLOCK(self):
            return self.getToken(SnowflakeParser.BLOCK, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_sample_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_method" ):
                listener.enterSample_method(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_method" ):
                listener.exitSample_method(self)




    def sample_method(self):

        localctx = SnowflakeParser.Sample_methodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1240, self.RULE_sample_method)
        self._la = 0 # Token type
        try:
            self.state = 12956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85, 626]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12954
                localctx.row_sampling = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==85 or _la==626):
                    localctx.row_sampling = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [91, 746]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12955
                localctx.block_sampling = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==91 or _la==746):
                    localctx.block_sampling = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeatable_seedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def REPEATABLE(self):
            return self.getToken(SnowflakeParser.REPEATABLE, 0)

        def SEED(self):
            return self.getToken(SnowflakeParser.SEED, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_repeatable_seed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatable_seed" ):
                listener.enterRepeatable_seed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatable_seed" ):
                listener.exitRepeatable_seed(self)




    def repeatable_seed(self):

        localctx = SnowflakeParser.Repeatable_seedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1242, self.RULE_repeatable_seed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12958
            _la = self._input.LA(1)
            if not(_la==590 or _la==668):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 12959
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12960
            self.num()
            self.state = 12961
            self.match(SnowflakeParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_optsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def ROWS(self):
            return self.getToken(SnowflakeParser.ROWS, 0)

        def repeatable_seed(self):
            return self.getTypedRuleContext(SnowflakeParser.Repeatable_seedContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_sample_opts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_opts" ):
                listener.enterSample_opts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_opts" ):
                listener.exitSample_opts(self)




    def sample_opts(self):

        localctx = SnowflakeParser.Sample_optsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1244, self.RULE_sample_opts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12963
            self.match(SnowflakeParser.LR_BRACKET)
            self.state = 12964
            self.num()
            self.state = 12966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==627:
                self.state = 12965
                self.match(SnowflakeParser.ROWS)


            self.state = 12968
            self.match(SnowflakeParser.RR_BRACKET)
            self.state = 12970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1687,self._ctx)
            if la_ == 1:
                self.state = 12969
                self.repeatable_seed()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sample_opts(self):
            return self.getTypedRuleContext(SnowflakeParser.Sample_optsContext,0)


        def SAMPLE(self):
            return self.getToken(SnowflakeParser.SAMPLE, 0)

        def TABLESAMPLE(self):
            return self.getToken(SnowflakeParser.TABLESAMPLE, 0)

        def sample_method(self):
            return self.getTypedRuleContext(SnowflakeParser.Sample_methodContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_sample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample" ):
                listener.enterSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample" ):
                listener.exitSample(self)




    def sample(self):

        localctx = SnowflakeParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1246, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12972
            _la = self._input.LA(1)
            if not(_la==651 or _la==751):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 12974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85 or _la==91 or _la==626 or _la==746:
                self.state = 12973
                self.sample_method()


            self.state = 12976
            self.sample_opts()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(SnowflakeParser.PredicateContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,i)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.NOT)
            else:
                return self.getToken(SnowflakeParser.NOT, i)

        def AND(self):
            return self.getToken(SnowflakeParser.AND, 0)

        def OR(self):
            return self.getToken(SnowflakeParser.OR, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SnowflakeParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1248
        self.enterRecursionRule(localctx, 1248, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1689,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12979
                    self.match(SnowflakeParser.NOT) 
                self.state = 12984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1689,self._ctx)

            self.state = 12990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1690,self._ctx)
            if la_ == 1:
                self.state = 12985
                self.predicate()
                pass

            elif la_ == 2:
                self.state = 12986
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 12987
                self.search_condition(0)
                self.state = 12988
                self.match(SnowflakeParser.RR_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 13000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1692,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 12998
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1691,self._ctx)
                    if la_ == 1:
                        localctx = SnowflakeParser.Search_conditionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 12992
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 12993
                        self.match(SnowflakeParser.AND)
                        self.state = 12994
                        self.search_condition(3)
                        pass

                    elif la_ == 2:
                        localctx = SnowflakeParser.Search_conditionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                        self.state = 12995
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 12996
                        self.match(SnowflakeParser.OR)
                        self.state = 12997
                        self.search_condition(2)
                        pass

             
                self.state = 13002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1692,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SnowflakeParser.EQ, 0)

        def GT(self):
            return self.getToken(SnowflakeParser.GT, 0)

        def LT(self):
            return self.getToken(SnowflakeParser.LT, 0)

        def LE(self):
            return self.getToken(SnowflakeParser.LE, 0)

        def GE(self):
            return self.getToken(SnowflakeParser.GE, 0)

        def LTGT(self):
            return self.getToken(SnowflakeParser.LTGT, 0)

        def NE(self):
            return self.getToken(SnowflakeParser.NE, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = SnowflakeParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1250, self.RULE_comparison_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13003
            _la = self._input.LA(1)
            if not(((((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_not_nullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(SnowflakeParser.NULL_, 0)

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_null_not_null

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_not_null" ):
                listener.enterNull_not_null(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_not_null" ):
                listener.exitNull_not_null(self)




    def null_not_null(self):

        localctx = SnowflakeParser.Null_not_nullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1252, self.RULE_null_not_null)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448:
                self.state = 13005
                self.match(SnowflakeParser.NOT)


            self.state = 13008
            self.match(SnowflakeParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_statement(self):
            return self.getTypedRuleContext(SnowflakeParser.Query_statementContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = SnowflakeParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1254, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13010
            self.query_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(SnowflakeParser.EXISTS, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def subquery(self):
            return self.getTypedRuleContext(SnowflakeParser.SubqueryContext,0)


        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def comparison_operator(self):
            return self.getTypedRuleContext(SnowflakeParser.Comparison_operatorContext,0)


        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def SOME(self):
            return self.getToken(SnowflakeParser.SOME, 0)

        def ANY(self):
            return self.getToken(SnowflakeParser.ANY, 0)

        def BETWEEN(self):
            return self.getToken(SnowflakeParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SnowflakeParser.AND, 0)

        def NOT(self):
            return self.getToken(SnowflakeParser.NOT, 0)

        def IN(self):
            return self.getToken(SnowflakeParser.IN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Expr_listContext,0)


        def LIKE(self):
            return self.getToken(SnowflakeParser.LIKE, 0)

        def ILIKE(self):
            return self.getToken(SnowflakeParser.ILIKE, 0)

        def ESCAPE(self):
            return self.getToken(SnowflakeParser.ESCAPE, 0)

        def RLIKE(self):
            return self.getToken(SnowflakeParser.RLIKE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def IS(self):
            return self.getToken(SnowflakeParser.IS, 0)

        def null_not_null(self):
            return self.getTypedRuleContext(SnowflakeParser.Null_not_nullContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = SnowflakeParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1256, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 13087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1703,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13012
                self.match(SnowflakeParser.EXISTS)
                self.state = 13013
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 13014
                self.subquery()
                self.state = 13015
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13017
                self.expr(0)
                self.state = 13018
                self.comparison_operator()
                self.state = 13019
                _la = self._input.LA(1)
                if not(_la==17 or _la==30 or _la==698):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13020
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 13021
                self.subquery()
                self.state = 13022
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13024
                self.expr(0)
                self.state = 13026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 13025
                    self.match(SnowflakeParser.NOT)


                self.state = 13028
                self.match(SnowflakeParser.BETWEEN)
                self.state = 13029
                self.expr(0)
                self.state = 13030
                self.match(SnowflakeParser.AND)
                self.state = 13031
                self.expr(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13033
                self.expr(0)
                self.state = 13035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 13034
                    self.match(SnowflakeParser.NOT)


                self.state = 13037
                self.match(SnowflakeParser.IN)
                self.state = 13038
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 13041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1696,self._ctx)
                if la_ == 1:
                    self.state = 13039
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 13040
                    self.expr_list()
                    pass


                self.state = 13043
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 13045
                self.expr(0)
                self.state = 13047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 13046
                    self.match(SnowflakeParser.NOT)


                self.state = 13049
                _la = self._input.LA(1)
                if not(_la==332 or _la==385):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13050
                self.expr(0)
                self.state = 13053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1698,self._ctx)
                if la_ == 1:
                    self.state = 13051
                    self.match(SnowflakeParser.ESCAPE)
                    self.state = 13052
                    self.expr(0)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 13055
                self.expr(0)
                self.state = 13057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 13056
                    self.match(SnowflakeParser.NOT)


                self.state = 13059
                self.match(SnowflakeParser.RLIKE)
                self.state = 13060
                self.expr(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 13062
                self.expr(0)
                self.state = 13064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 13063
                    self.match(SnowflakeParser.NOT)


                self.state = 13066
                _la = self._input.LA(1)
                if not(_la==332 or _la==385):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13067
                self.match(SnowflakeParser.ANY)
                self.state = 13068
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 13069
                self.expr(0)
                self.state = 13074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 13070
                    self.match(SnowflakeParser.COMMA)
                    self.state = 13071
                    self.expr(0)
                    self.state = 13076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13077
                self.match(SnowflakeParser.RR_BRACKET)
                self.state = 13080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1702,self._ctx)
                if la_ == 1:
                    self.state = 13078
                    self.match(SnowflakeParser.ESCAPE)
                    self.state = 13079
                    self.expr(0)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 13082
                self.expr(0)
                self.state = 13083
                self.match(SnowflakeParser.IS)
                self.state = 13084
                self.null_not_null()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 13086
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(SnowflakeParser.WHERE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = SnowflakeParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1258, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13089
            self.match(SnowflakeParser.WHERE)
            self.state = 13090
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_elem(self):
            return self.getTypedRuleContext(SnowflakeParser.Column_elemContext,0)


        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def expression_elem(self):
            return self.getTypedRuleContext(SnowflakeParser.Expression_elemContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_group_by_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_elem" ):
                listener.enterGroup_by_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_elem" ):
                listener.exitGroup_by_elem(self)




    def group_by_elem(self):

        localctx = SnowflakeParser.Group_by_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1260, self.RULE_group_by_elem)
        try:
            self.state = 13095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1704,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13092
                self.column_elem()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13093
                self.num()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13094
                self.expression_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_by_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Group_by_elemContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Group_by_elemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_group_by_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_list" ):
                listener.enterGroup_by_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_list" ):
                listener.exitGroup_by_list(self)




    def group_by_list(self):

        localctx = SnowflakeParser.Group_by_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1262, self.RULE_group_by_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13097
            self.group_by_elem()
            self.state = 13102
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1705,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 13098
                    self.match(SnowflakeParser.COMMA)
                    self.state = 13099
                    self.group_by_elem() 
                self.state = 13104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1705,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(SnowflakeParser.GROUP, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def group_by_list(self):
            return self.getTypedRuleContext(SnowflakeParser.Group_by_listContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(SnowflakeParser.Having_clauseContext,0)


        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def CUBE(self):
            return self.getToken(SnowflakeParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(SnowflakeParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(SnowflakeParser.SETS, 0)

        def ROLLUP(self):
            return self.getToken(SnowflakeParser.ROLLUP, 0)

        def ALL(self):
            return self.getToken(SnowflakeParser.ALL, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = SnowflakeParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1264, self.RULE_group_by_clause)
        try:
            self.state = 13126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1708,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13105
                self.match(SnowflakeParser.GROUP)
                self.state = 13106
                self.match(SnowflakeParser.BY)
                self.state = 13107
                self.group_by_list()
                self.state = 13109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1706,self._ctx)
                if la_ == 1:
                    self.state = 13108
                    self.having_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13111
                self.match(SnowflakeParser.GROUP)
                self.state = 13112
                self.match(SnowflakeParser.BY)
                self.state = 13117
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161]:
                    self.state = 13113
                    self.match(SnowflakeParser.CUBE)
                    pass
                elif token in [311]:
                    self.state = 13114
                    self.match(SnowflakeParser.GROUPING)
                    self.state = 13115
                    self.match(SnowflakeParser.SETS)
                    pass
                elif token in [623]:
                    self.state = 13116
                    self.match(SnowflakeParser.ROLLUP)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 13119
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 13120
                self.group_by_list()
                self.state = 13121
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13123
                self.match(SnowflakeParser.GROUP)
                self.state = 13124
                self.match(SnowflakeParser.BY)
                self.state = 13125
                self.match(SnowflakeParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(SnowflakeParser.HAVING, 0)

        def search_condition(self):
            return self.getTypedRuleContext(SnowflakeParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = SnowflakeParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1266, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13128
            self.match(SnowflakeParser.HAVING)
            self.state = 13129
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualify_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(SnowflakeParser.QUALIFY, 0)

        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_qualify_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualify_clause" ):
                listener.enterQualify_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualify_clause" ):
                listener.exitQualify_clause(self)




    def qualify_clause(self):

        localctx = SnowflakeParser.Qualify_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1268, self.RULE_qualify_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13131
            self.match(SnowflakeParser.QUALIFY)
            self.state = 13132
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(SnowflakeParser.Id_Context,0)


        def num(self):
            return self.getTypedRuleContext(SnowflakeParser.NumContext,0)


        def expr(self):
            return self.getTypedRuleContext(SnowflakeParser.ExprContext,0)


        def NULLS(self):
            return self.getToken(SnowflakeParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SnowflakeParser.ASC, 0)

        def DESC(self):
            return self.getToken(SnowflakeParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SnowflakeParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SnowflakeParser.LAST, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_order_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_item" ):
                listener.enterOrder_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_item" ):
                listener.exitOrder_item(self)




    def order_item(self):

        localctx = SnowflakeParser.Order_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1270, self.RULE_order_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1709,self._ctx)
            if la_ == 1:
                self.state = 13134
                self.id_()
                pass

            elif la_ == 2:
                self.state = 13135
                self.num()
                pass

            elif la_ == 3:
                self.state = 13136
                self.expr(0)
                pass


            self.state = 13140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1710,self._ctx)
            if la_ == 1:
                self.state = 13139
                _la = self._input.LA(1)
                if not(_la==46 or _la==196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 13144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1711,self._ctx)
            if la_ == 1:
                self.state = 13142
                self.match(SnowflakeParser.NULLS)
                self.state = 13143
                _la = self._input.LA(1)
                if not(_la==274 or _la==376):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SnowflakeParser.ORDER, 0)

        def BY(self):
            return self.getToken(SnowflakeParser.BY, 0)

        def order_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Order_itemContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Order_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = SnowflakeParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1272, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13146
            self.match(SnowflakeParser.ORDER)
            self.state = 13147
            self.match(SnowflakeParser.BY)
            self.state = 13148
            self.order_item()
            self.state = 13153
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1712,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 13149
                    self.match(SnowflakeParser.COMMA)
                    self.state = 13150
                    self.order_item() 
                self.state = 13155
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1712,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROW(self):
            return self.getToken(SnowflakeParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SnowflakeParser.ROWS, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_row_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_rows" ):
                listener.enterRow_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_rows" ):
                listener.exitRow_rows(self)




    def row_rows(self):

        localctx = SnowflakeParser.Row_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1274, self.RULE_row_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13156
            _la = self._input.LA(1)
            if not(_la==626 or _la==627):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class First_nextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(SnowflakeParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SnowflakeParser.NEXT, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_first_next

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirst_next" ):
                listener.enterFirst_next(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirst_next" ):
                listener.exitFirst_next(self)




    def first_next(self):

        localctx = SnowflakeParser.First_nextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1276, self.RULE_first_next)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13158
            _la = self._input.LA(1)
            if not(_la==274 or _la==441):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SnowflakeParser.LIMIT, 0)

        def num(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.NumContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.NumContext,i)


        def OFFSET(self):
            return self.getToken(SnowflakeParser.OFFSET, 0)

        def FETCH(self):
            return self.getToken(SnowflakeParser.FETCH, 0)

        def row_rows(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Row_rowsContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Row_rowsContext,i)


        def first_next(self):
            return self.getTypedRuleContext(SnowflakeParser.First_nextContext,0)


        def ONLY(self):
            return self.getToken(SnowflakeParser.ONLY, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = SnowflakeParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1278, self.RULE_limit_clause)
        self._la = 0 # Token type
        try:
            self.state = 13184
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [386]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13160
                self.match(SnowflakeParser.LIMIT)
                self.state = 13161
                self.num()
                self.state = 13164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1713,self._ctx)
                if la_ == 1:
                    self.state = 13162
                    self.match(SnowflakeParser.OFFSET)
                    self.state = 13163
                    self.num()


                pass
            elif token in [267, 482, 626, 627]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==482:
                    self.state = 13166
                    self.match(SnowflakeParser.OFFSET)
                    self.state = 13167
                    self.num()


                self.state = 13171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==626 or _la==627:
                    self.state = 13170
                    self.row_rows()


                self.state = 13173
                self.match(SnowflakeParser.FETCH)
                self.state = 13175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==441:
                    self.state = 13174
                    self.first_next()


                self.state = 13177
                self.num()
                self.state = 13179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1717,self._ctx)
                if la_ == 1:
                    self.state = 13178
                    self.row_rows()


                self.state = 13182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1718,self._ctx)
                if la_ == 1:
                    self.state = 13181
                    self.match(SnowflakeParser.ONLY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Round_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HALF_AWAY_FROM_ZERO_Q(self):
            return self.getToken(SnowflakeParser.HALF_AWAY_FROM_ZERO_Q, 0)

        def HALF_TO_EVEN_Q(self):
            return self.getToken(SnowflakeParser.HALF_TO_EVEN_Q, 0)

        def getRuleIndex(self):
            return SnowflakeParser.RULE_round_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRound_mode" ):
                listener.enterRound_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRound_mode" ):
                listener.exitRound_mode(self)




    def round_mode(self):

        localctx = SnowflakeParser.Round_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1280, self.RULE_round_mode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13186
            _la = self._input.LA(1)
            if not(_la==314 or _la==315):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Round_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROUND(self):
            return self.getToken(SnowflakeParser.ROUND, 0)

        def LR_BRACKET(self):
            return self.getToken(SnowflakeParser.LR_BRACKET, 0)

        def EXPR(self):
            return self.getToken(SnowflakeParser.EXPR, 0)

        def ASSOC(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ASSOC)
            else:
                return self.getToken(SnowflakeParser.ASSOC, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.ExprContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.COMMA)
            else:
                return self.getToken(SnowflakeParser.COMMA, i)

        def SCALE(self):
            return self.getToken(SnowflakeParser.SCALE, 0)

        def RR_BRACKET(self):
            return self.getToken(SnowflakeParser.RR_BRACKET, 0)

        def ROUNDING_MODE(self, i:int=None):
            if i is None:
                return self.getTokens(SnowflakeParser.ROUNDING_MODE)
            else:
                return self.getToken(SnowflakeParser.ROUNDING_MODE, i)

        def round_mode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SnowflakeParser.Round_modeContext)
            else:
                return self.getTypedRuleContext(SnowflakeParser.Round_modeContext,i)


        def getRuleIndex(self):
            return SnowflakeParser.RULE_round_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRound_expr" ):
                listener.enterRound_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRound_expr" ):
                listener.exitRound_expr(self)




    def round_expr(self):

        localctx = SnowflakeParser.Round_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1282, self.RULE_round_expr)
        self._la = 0 # Token type
        try:
            self.state = 13222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1722,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13188
                self.match(SnowflakeParser.ROUND)
                self.state = 13189
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 13190
                self.match(SnowflakeParser.EXPR)
                self.state = 13191
                self.match(SnowflakeParser.ASSOC)
                self.state = 13192
                self.expr(0)
                self.state = 13193
                self.match(SnowflakeParser.COMMA)
                self.state = 13194
                self.match(SnowflakeParser.SCALE)
                self.state = 13195
                self.match(SnowflakeParser.ASSOC)
                self.state = 13196
                self.expr(0)
                self.state = 13203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 13197
                    self.match(SnowflakeParser.COMMA)
                    self.state = 13198
                    self.match(SnowflakeParser.ROUNDING_MODE)
                    self.state = 13199
                    self.match(SnowflakeParser.ASSOC)
                    self.state = 13200
                    self.round_mode()
                    self.state = 13205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13206
                self.match(SnowflakeParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13208
                self.match(SnowflakeParser.ROUND)
                self.state = 13209
                self.match(SnowflakeParser.LR_BRACKET)
                self.state = 13210
                self.expr(0)
                self.state = 13211
                self.match(SnowflakeParser.COMMA)
                self.state = 13212
                self.expr(0)
                self.state = 13217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==937:
                    self.state = 13213
                    self.match(SnowflakeParser.COMMA)
                    self.state = 13214
                    self.round_mode()
                    self.state = 13219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13220
                self.match(SnowflakeParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[533] = self.expr_sempred
        self._predicates[566] = self.select_statement_in_parentheses_sempred
        self._predicates[624] = self.search_condition_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 2)
         

    def select_statement_in_parentheses_sempred(self, localctx:Select_statement_in_parenthesesContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         




