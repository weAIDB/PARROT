# Generated from ClickHouseParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,230,2012,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,1,0,1,0,1,0,1,0,3,0,247,8,0,1,0,1,0,3,0,251,8,0,1,0,3,0,254,
        8,0,1,0,3,0,257,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,278,8,1,1,1,3,1,281,8,1,1,2,
        1,2,1,2,1,2,5,2,287,8,2,10,2,12,2,290,9,2,1,3,1,3,3,3,294,8,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,305,8,4,10,4,12,4,308,9,4,
        1,4,1,4,1,5,1,5,1,5,1,5,3,5,316,8,5,1,5,1,5,1,5,5,5,321,8,5,10,5,
        12,5,324,9,5,1,6,1,6,1,6,1,6,1,6,3,6,331,8,6,1,6,1,6,1,6,3,6,336,
        8,6,1,6,1,6,1,6,1,6,1,6,3,6,343,8,6,1,6,1,6,1,6,3,6,348,8,6,1,6,
        1,6,1,6,1,6,1,6,3,6,355,8,6,1,6,1,6,1,6,3,6,360,8,6,1,6,1,6,1,6,
        1,6,3,6,366,8,6,1,6,1,6,1,6,1,6,3,6,372,8,6,1,6,1,6,1,6,3,6,377,
        8,6,1,6,1,6,1,6,1,6,3,6,383,8,6,1,6,1,6,1,6,3,6,388,8,6,1,6,1,6,
        1,6,1,6,3,6,394,8,6,1,6,1,6,1,6,3,6,399,8,6,1,6,1,6,1,6,1,6,3,6,
        405,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,419,
        8,6,1,6,1,6,1,6,1,6,1,6,3,6,426,8,6,1,6,1,6,1,6,1,6,1,6,3,6,433,
        8,6,1,6,1,6,1,6,1,6,1,6,3,6,440,8,6,1,6,1,6,1,6,1,6,3,6,446,8,6,
        1,6,1,6,1,6,3,6,451,8,6,1,6,1,6,1,6,1,6,3,6,457,8,6,1,6,1,6,1,6,
        3,6,462,8,6,1,6,1,6,1,6,1,6,3,6,468,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,3,6,477,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,487,8,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,497,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,517,8,6,1,6,
        1,6,1,6,1,6,1,6,1,6,3,6,525,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,3,6,540,8,6,1,7,1,7,1,7,5,7,545,8,7,10,7,12,
        7,548,9,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,
        561,8,10,1,11,1,11,1,11,1,11,3,11,567,8,11,1,12,1,12,1,12,1,12,3,
        12,573,8,12,1,13,1,13,1,13,1,13,1,13,3,13,580,8,13,1,13,1,13,3,13,
        584,8,13,1,13,3,13,587,8,13,1,13,1,13,1,13,1,13,3,13,593,8,13,1,
        13,3,13,596,8,13,1,13,1,13,1,13,1,13,3,13,602,8,13,1,13,1,13,3,13,
        606,8,13,1,13,3,13,609,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,3,13,620,8,13,1,13,1,13,3,13,624,8,13,1,13,3,13,627,8,13,
        1,13,1,13,1,13,3,13,632,8,13,3,13,634,8,13,1,13,3,13,637,8,13,1,
        13,3,13,640,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,650,
        8,13,1,13,1,13,3,13,654,8,13,1,13,3,13,657,8,13,1,13,3,13,660,8,
        13,1,13,1,13,1,13,3,13,665,8,13,3,13,667,8,13,1,13,1,13,1,13,1,13,
        1,13,1,13,3,13,675,8,13,1,13,3,13,678,8,13,1,13,3,13,681,8,13,1,
        13,1,13,1,13,1,13,3,13,687,8,13,1,13,1,13,3,13,691,8,13,1,13,3,13,
        694,8,13,1,13,3,13,697,8,13,1,13,3,13,700,8,13,1,13,3,13,703,8,13,
        1,13,1,13,1,13,3,13,708,8,13,1,13,1,13,1,13,1,13,3,13,714,8,13,1,
        13,1,13,3,13,718,8,13,1,13,3,13,721,8,13,1,13,3,13,724,8,13,1,13,
        1,13,3,13,728,8,13,1,14,1,14,1,14,1,14,5,14,734,8,14,10,14,12,14,
        737,9,14,1,14,1,14,1,15,1,15,1,15,1,16,3,16,745,8,16,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,3,18,755,8,18,1,18,3,18,758,8,18,1,19,
        1,19,1,19,1,19,1,19,5,19,765,8,19,10,19,12,19,768,9,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        784,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,5,21,793,8,21,10,21,
        12,21,796,9,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,3,22,813,8,22,1,22,1,22,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,3,24,826,8,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,841,8,28,10,28,
        12,28,844,9,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,852,8,28,1,29,
        1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,33,5,33,872,8,33,10,33,12,33,875,9,33,1,34,1,34,
        3,34,879,8,34,1,34,1,34,1,34,3,34,884,8,34,1,34,3,34,887,8,34,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,899,8,35,1,
        36,1,36,1,36,3,36,904,8,36,1,36,1,36,3,36,908,8,36,1,36,3,36,911,
        8,36,1,36,1,36,3,36,915,8,36,1,36,1,36,3,36,919,8,36,1,36,1,36,1,
        36,3,36,924,8,36,1,36,3,36,927,8,36,1,36,1,36,3,36,931,8,36,3,36,
        933,8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,5,40,953,8,40,10,40,12,40,956,
        9,40,1,40,1,40,1,41,1,41,1,41,3,41,963,8,41,1,41,3,41,966,8,41,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,976,8,42,1,43,1,43,3,
        43,980,8,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,988,8,44,1,44,1,44,
        3,44,992,8,44,1,44,1,44,1,44,3,44,997,8,44,1,44,1,44,3,44,1001,8,
        44,1,44,1,44,3,44,1005,8,44,1,44,1,44,3,44,1009,8,44,1,44,1,44,3,
        44,1013,8,44,3,44,1015,8,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1023,
        8,45,1,45,1,45,3,45,1027,8,45,1,45,3,45,1030,8,45,1,46,1,46,1,46,
        1,46,1,46,1,46,3,46,1038,8,46,1,47,1,47,1,47,3,47,1043,8,47,1,47,
        1,47,1,47,3,47,1048,8,47,1,47,3,47,1051,8,47,1,47,1,47,1,48,1,48,
        1,48,1,48,5,48,1059,8,48,10,48,12,48,1062,9,48,1,48,1,48,1,49,1,
        49,1,49,1,49,1,49,1,49,5,49,1072,8,49,10,49,12,49,1075,9,49,1,49,
        1,49,3,49,1079,8,49,1,49,1,49,3,49,1083,8,49,1,50,1,50,1,50,1,50,
        5,50,1089,8,50,10,50,12,50,1092,9,50,1,50,1,50,1,50,1,50,3,50,1098,
        8,50,1,51,1,51,1,52,1,52,1,52,3,52,1105,8,52,1,52,1,52,3,52,1109,
        8,52,1,53,1,53,1,53,1,53,3,53,1115,8,53,1,53,3,53,1118,8,53,1,53,
        3,53,1121,8,53,1,53,3,53,1124,8,53,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,5,54,1136,8,54,10,54,12,54,1139,9,54,1,54,3,
        54,1142,8,54,1,55,1,55,3,55,1146,8,55,1,55,1,55,1,55,3,55,1151,8,
        55,1,55,3,55,1154,8,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,1162,8,
        56,10,56,12,56,1165,9,56,1,57,1,57,1,57,1,57,1,57,3,57,1172,8,57,
        1,58,3,58,1175,8,58,1,58,1,58,3,58,1179,8,58,1,58,3,58,1182,8,58,
        1,58,1,58,3,58,1186,8,58,1,58,3,58,1189,8,58,1,58,3,58,1192,8,58,
        1,58,3,58,1195,8,58,1,58,3,58,1198,8,58,1,58,3,58,1201,8,58,1,58,
        1,58,3,58,1205,8,58,1,58,1,58,3,58,1209,8,58,1,58,3,58,1212,8,58,
        1,58,3,58,1215,8,58,1,58,3,58,1218,8,58,1,58,3,58,1221,8,58,1,58,
        3,58,1224,8,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,3,60,1233,8,60,
        1,61,1,61,1,61,1,62,3,62,1239,8,62,1,62,1,62,1,62,1,62,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,3,66,1266,8,66,1,67,1,67,1,67,1,68,
        1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,71,
        1,71,1,71,1,71,3,71,1288,8,71,1,72,1,72,1,72,1,73,1,73,1,73,3,73,
        1296,8,73,1,73,3,73,1299,8,73,1,73,1,73,1,73,1,73,3,73,1305,8,73,
        1,73,1,73,1,73,1,73,1,73,1,73,3,73,1313,8,73,1,73,3,73,1316,8,73,
        1,73,1,73,1,73,1,73,5,73,1322,8,73,10,73,12,73,1325,9,73,1,74,3,
        74,1328,8,74,1,74,1,74,1,74,3,74,1333,8,74,1,74,3,74,1336,8,74,1,
        74,3,74,1339,8,74,1,74,1,74,3,74,1343,8,74,1,74,1,74,3,74,1347,8,
        74,1,74,3,74,1350,8,74,3,74,1352,8,74,1,74,3,74,1355,8,74,1,74,1,
        74,3,74,1359,8,74,1,74,1,74,3,74,1363,8,74,1,74,3,74,1366,8,74,3,
        74,1368,8,74,3,74,1370,8,74,1,75,3,75,1373,8,75,1,75,1,75,1,75,3,
        75,1378,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1389,
        8,76,1,77,1,77,1,77,1,77,3,77,1395,8,77,1,78,1,78,1,78,3,78,1400,
        8,78,1,79,1,79,1,79,5,79,1405,8,79,10,79,12,79,1408,9,79,1,80,1,
        80,3,80,1412,8,80,1,80,1,80,3,80,1416,8,80,1,80,1,80,3,80,1420,8,
        80,1,81,1,81,1,81,3,81,1425,8,81,1,82,1,82,1,82,5,82,1430,8,82,10,
        82,12,82,1433,9,82,1,83,1,83,1,83,1,83,1,84,3,84,1440,8,84,1,84,
        3,84,1443,8,84,1,84,3,84,1446,8,84,1,85,1,85,1,85,1,85,1,86,1,86,
        1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1465,
        8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        3,89,1479,8,89,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,3,91,1495,8,91,1,91,3,91,1498,8,91,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,3,91,1507,8,91,1,91,1,91,3,91,1511,8,91,
        1,91,1,91,1,91,3,91,1516,8,91,1,91,1,91,1,91,3,91,1521,8,91,1,91,
        3,91,1524,8,91,3,91,1526,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        3,92,1548,8,92,1,92,3,92,1551,8,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,3,92,1562,8,92,1,93,1,93,3,93,1566,8,93,1,93,3,93,
        1569,8,93,1,93,1,93,3,93,1573,8,93,1,93,1,93,3,93,1577,8,93,1,94,
        1,94,1,94,1,95,1,95,1,95,3,95,1585,8,95,1,95,1,95,3,95,1589,8,95,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1600,8,96,10,96,
        12,96,1603,9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1612,8,96,
        10,96,12,96,1615,9,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1624,
        8,96,10,96,12,96,1627,9,96,1,96,1,96,1,96,1,96,1,96,3,96,1634,8,
        96,1,96,1,96,3,96,1638,8,96,1,97,1,97,1,97,5,97,1643,8,97,10,97,
        12,97,1646,9,97,1,98,1,98,1,98,3,98,1651,8,98,1,98,1,98,1,98,1,98,
        1,98,1,98,3,98,1659,8,98,1,99,1,99,1,99,3,99,1664,8,99,1,99,1,99,
        1,99,1,99,1,99,4,99,1671,8,99,11,99,12,99,1672,1,99,1,99,3,99,1677,
        8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,3,99,1708,8,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1725,8,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1737,8,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1747,8,99,1,99,3,99,1750,
        8,99,1,99,1,99,3,99,1754,8,99,1,99,3,99,1757,8,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1769,8,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,
        1786,8,99,1,99,1,99,3,99,1790,8,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1807,8,99,1,99,
        3,99,1810,8,99,1,99,1,99,3,99,1814,8,99,1,99,3,99,1817,8,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1828,8,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1852,8,99,1,99,1,99,1,99,
        1,99,1,99,3,99,1859,8,99,5,99,1861,8,99,10,99,12,99,1864,9,99,1,
        100,1,100,1,100,5,100,1869,8,100,10,100,12,100,1872,9,100,1,101,
        1,101,3,101,1876,8,101,1,102,1,102,1,102,1,102,5,102,1882,8,102,
        10,102,12,102,1885,9,102,1,102,1,102,1,102,1,102,1,102,5,102,1892,
        8,102,10,102,12,102,1895,9,102,3,102,1897,8,102,1,102,1,102,1,102,
        1,103,1,103,1,103,3,103,1905,8,103,1,103,1,103,1,104,1,104,1,104,
        3,104,1912,8,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,
        1921,8,105,1,105,1,105,1,105,1,105,3,105,1927,8,105,5,105,1929,8,
        105,10,105,12,105,1932,9,105,1,106,1,106,1,106,3,106,1937,8,106,
        1,106,1,106,1,107,1,107,1,107,3,107,1944,8,107,1,107,1,107,1,108,
        1,108,1,108,5,108,1951,8,108,10,108,12,108,1954,9,108,1,109,1,109,
        1,109,3,109,1959,8,109,1,110,1,110,1,111,1,111,1,111,1,111,1,111,
        1,111,3,111,1969,8,111,3,111,1971,8,111,1,112,3,112,1974,8,112,1,
        112,1,112,1,112,1,112,1,112,1,112,3,112,1982,8,112,1,113,1,113,1,
        113,3,113,1987,8,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,1,
        117,3,117,1997,8,117,1,118,1,118,1,118,3,118,2002,8,118,1,119,1,
        119,3,119,2006,8,119,1,120,1,120,1,120,1,120,1,120,0,3,146,198,210,
        121,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,0,28,6,0,3,3,24,24,27,
        27,38,38,103,103,172,172,2,0,15,15,29,29,3,0,3,3,38,38,103,103,2,
        0,41,41,43,43,2,0,44,44,50,50,3,0,14,14,155,155,161,161,2,0,31,31,
        140,140,2,0,83,83,95,95,2,0,70,70,100,100,3,0,4,4,8,8,12,12,4,0,
        4,4,7,8,12,12,146,146,2,0,95,95,139,139,2,0,4,4,8,8,2,0,117,117,
        203,203,2,0,11,11,41,42,2,0,61,61,92,92,2,0,132,132,142,142,2,0,
        67,67,79,79,1,0,152,153,3,0,17,17,94,94,169,169,3,0,199,199,217,
        217,226,226,2,0,204,205,218,218,2,0,78,78,97,97,1,0,194,195,2,0,
        205,205,218,218,8,0,36,36,75,75,107,107,109,109,131,131,144,144,
        184,184,189,189,12,0,2,35,37,74,76,80,82,106,108,108,110,111,113,
        114,116,129,132,143,145,183,185,188,190,191,4,0,35,35,61,61,76,76,
        90,90,2284,0,256,1,0,0,0,2,280,1,0,0,0,4,282,1,0,0,0,6,291,1,0,0,
        0,8,300,1,0,0,0,10,311,1,0,0,0,12,539,1,0,0,0,14,541,1,0,0,0,16,
        549,1,0,0,0,18,553,1,0,0,0,20,560,1,0,0,0,22,562,1,0,0,0,24,568,
        1,0,0,0,26,727,1,0,0,0,28,729,1,0,0,0,30,740,1,0,0,0,32,744,1,0,
        0,0,34,746,1,0,0,0,36,750,1,0,0,0,38,759,1,0,0,0,40,772,1,0,0,0,
        42,787,1,0,0,0,44,800,1,0,0,0,46,816,1,0,0,0,48,821,1,0,0,0,50,827,
        1,0,0,0,52,830,1,0,0,0,54,833,1,0,0,0,56,851,1,0,0,0,58,853,1,0,
        0,0,60,855,1,0,0,0,62,859,1,0,0,0,64,863,1,0,0,0,66,867,1,0,0,0,
        68,876,1,0,0,0,70,898,1,0,0,0,72,932,1,0,0,0,74,934,1,0,0,0,76,937,
        1,0,0,0,78,944,1,0,0,0,80,947,1,0,0,0,82,959,1,0,0,0,84,967,1,0,
        0,0,86,977,1,0,0,0,88,1014,1,0,0,0,90,1029,1,0,0,0,92,1037,1,0,0,
        0,94,1039,1,0,0,0,96,1054,1,0,0,0,98,1082,1,0,0,0,100,1097,1,0,0,
        0,102,1099,1,0,0,0,104,1101,1,0,0,0,106,1110,1,0,0,0,108,1125,1,
        0,0,0,110,1143,1,0,0,0,112,1157,1,0,0,0,114,1171,1,0,0,0,116,1174,
        1,0,0,0,118,1225,1,0,0,0,120,1228,1,0,0,0,122,1234,1,0,0,0,124,1238,
        1,0,0,0,126,1244,1,0,0,0,128,1251,1,0,0,0,130,1254,1,0,0,0,132,1257,
        1,0,0,0,134,1267,1,0,0,0,136,1270,1,0,0,0,138,1274,1,0,0,0,140,1278,
        1,0,0,0,142,1283,1,0,0,0,144,1289,1,0,0,0,146,1304,1,0,0,0,148,1369,
        1,0,0,0,150,1377,1,0,0,0,152,1388,1,0,0,0,154,1390,1,0,0,0,156,1396,
        1,0,0,0,158,1401,1,0,0,0,160,1409,1,0,0,0,162,1421,1,0,0,0,164,1426,
        1,0,0,0,166,1434,1,0,0,0,168,1439,1,0,0,0,170,1447,1,0,0,0,172,1451,
        1,0,0,0,174,1455,1,0,0,0,176,1464,1,0,0,0,178,1478,1,0,0,0,180,1480,
        1,0,0,0,182,1525,1,0,0,0,184,1561,1,0,0,0,186,1563,1,0,0,0,188,1578,
        1,0,0,0,190,1581,1,0,0,0,192,1637,1,0,0,0,194,1639,1,0,0,0,196,1658,
        1,0,0,0,198,1789,1,0,0,0,200,1865,1,0,0,0,202,1875,1,0,0,0,204,1896,
        1,0,0,0,206,1904,1,0,0,0,208,1908,1,0,0,0,210,1920,1,0,0,0,212,1933,
        1,0,0,0,214,1943,1,0,0,0,216,1947,1,0,0,0,218,1958,1,0,0,0,220,1960,
        1,0,0,0,222,1970,1,0,0,0,224,1973,1,0,0,0,226,1986,1,0,0,0,228,1988,
        1,0,0,0,230,1990,1,0,0,0,232,1992,1,0,0,0,234,1996,1,0,0,0,236,2001,
        1,0,0,0,238,2005,1,0,0,0,240,2007,1,0,0,0,242,246,3,2,1,0,243,244,
        5,86,0,0,244,245,5,123,0,0,245,247,5,197,0,0,246,243,1,0,0,0,246,
        247,1,0,0,0,247,250,1,0,0,0,248,249,5,65,0,0,249,251,3,238,119,0,
        250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,254,5,225,0,
        0,253,252,1,0,0,0,253,254,1,0,0,0,254,257,1,0,0,0,255,257,3,94,47,
        0,256,242,1,0,0,0,256,255,1,0,0,0,257,1,1,0,0,0,258,281,3,10,5,0,
        259,281,3,22,11,0,260,281,3,24,12,0,261,281,3,26,13,0,262,281,3,
        86,43,0,263,281,3,88,44,0,264,281,3,90,45,0,265,281,3,92,46,0,266,
        281,3,104,52,0,267,281,3,106,53,0,268,281,3,108,54,0,269,281,3,112,
        56,0,270,281,3,180,90,0,271,281,3,182,91,0,272,281,3,184,92,0,273,
        281,3,186,93,0,274,281,3,188,94,0,275,281,3,190,95,0,276,278,3,4,
        2,0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,281,3,116,
        58,0,280,258,1,0,0,0,280,259,1,0,0,0,280,260,1,0,0,0,280,261,1,0,
        0,0,280,262,1,0,0,0,280,263,1,0,0,0,280,264,1,0,0,0,280,265,1,0,
        0,0,280,266,1,0,0,0,280,267,1,0,0,0,280,268,1,0,0,0,280,269,1,0,
        0,0,280,270,1,0,0,0,280,271,1,0,0,0,280,272,1,0,0,0,280,273,1,0,
        0,0,280,274,1,0,0,0,280,275,1,0,0,0,280,277,1,0,0,0,281,3,1,0,0,
        0,282,283,5,188,0,0,283,288,3,6,3,0,284,285,5,203,0,0,285,287,3,
        6,3,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,
        0,0,0,289,5,1,0,0,0,290,288,1,0,0,0,291,293,3,236,118,0,292,294,
        3,8,4,0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,
        5,10,0,0,296,297,5,214,0,0,297,298,3,2,1,0,298,299,5,224,0,0,299,
        7,1,0,0,0,300,301,5,214,0,0,301,306,3,236,118,0,302,303,5,203,0,
        0,303,305,3,236,118,0,304,302,1,0,0,0,305,308,1,0,0,0,306,304,1,
        0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,310,5,
        224,0,0,310,9,1,0,0,0,311,312,5,5,0,0,312,313,5,158,0,0,313,315,
        3,214,107,0,314,316,3,48,24,0,315,314,1,0,0,0,315,316,1,0,0,0,316,
        317,1,0,0,0,317,322,3,12,6,0,318,319,5,203,0,0,319,321,3,12,6,0,
        320,318,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,
        323,11,1,0,0,0,324,322,1,0,0,0,325,326,5,1,0,0,326,330,5,26,0,0,
        327,328,5,77,0,0,328,329,5,114,0,0,329,331,5,55,0,0,330,327,1,0,
        0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,335,3,72,36,0,333,334,5,
        2,0,0,334,336,3,208,104,0,335,333,1,0,0,0,335,336,1,0,0,0,336,540,
        1,0,0,0,337,338,5,1,0,0,338,342,5,80,0,0,339,340,5,77,0,0,340,341,
        5,114,0,0,341,343,5,55,0,0,342,339,1,0,0,0,342,343,1,0,0,0,343,344,
        1,0,0,0,344,347,3,76,38,0,345,346,5,2,0,0,346,348,3,208,104,0,347,
        345,1,0,0,0,347,348,1,0,0,0,348,540,1,0,0,0,349,350,5,1,0,0,350,
        354,5,130,0,0,351,352,5,77,0,0,352,353,5,114,0,0,353,355,5,55,0,
        0,354,351,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,359,3,78,39,
        0,357,358,5,2,0,0,358,360,3,208,104,0,359,357,1,0,0,0,359,360,1,
        0,0,0,360,540,1,0,0,0,361,362,5,15,0,0,362,365,3,20,10,0,363,364,
        5,67,0,0,364,366,3,214,107,0,365,363,1,0,0,0,365,366,1,0,0,0,366,
        540,1,0,0,0,367,368,5,22,0,0,368,371,5,26,0,0,369,370,5,77,0,0,370,
        372,5,55,0,0,371,369,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,
        376,3,208,104,0,374,375,5,79,0,0,375,377,3,20,10,0,376,374,1,0,0,
        0,376,377,1,0,0,0,377,540,1,0,0,0,378,379,5,22,0,0,379,382,5,80,
        0,0,380,381,5,77,0,0,381,383,5,55,0,0,382,380,1,0,0,0,382,383,1,
        0,0,0,383,384,1,0,0,0,384,387,3,208,104,0,385,386,5,79,0,0,386,388,
        3,20,10,0,387,385,1,0,0,0,387,388,1,0,0,0,388,540,1,0,0,0,389,390,
        5,22,0,0,390,393,5,130,0,0,391,392,5,77,0,0,392,394,5,55,0,0,393,
        391,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,398,3,208,104,0,
        396,397,5,79,0,0,397,399,3,20,10,0,398,396,1,0,0,0,398,399,1,0,0,
        0,399,540,1,0,0,0,400,401,5,27,0,0,401,404,5,26,0,0,402,403,5,77,
        0,0,403,405,5,55,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,
        0,0,406,407,3,208,104,0,407,408,5,197,0,0,408,540,1,0,0,0,409,410,
        5,40,0,0,410,411,5,186,0,0,411,540,3,198,99,0,412,413,5,44,0,0,413,
        540,3,20,10,0,414,415,5,50,0,0,415,418,5,26,0,0,416,417,5,77,0,0,
        417,419,5,55,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,
        420,540,3,208,104,0,421,422,5,50,0,0,422,425,5,80,0,0,423,424,5,
        77,0,0,424,426,5,55,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,427,
        1,0,0,0,427,540,3,208,104,0,428,429,5,50,0,0,429,432,5,130,0,0,430,
        431,5,77,0,0,431,433,5,55,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,
        434,1,0,0,0,434,540,3,208,104,0,435,436,5,50,0,0,436,540,3,20,10,
        0,437,439,5,66,0,0,438,440,3,20,10,0,439,438,1,0,0,0,439,440,1,0,
        0,0,440,540,1,0,0,0,441,442,5,102,0,0,442,445,5,80,0,0,443,444,5,
        77,0,0,444,446,5,55,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,447,
        1,0,0,0,447,450,3,208,104,0,448,449,5,79,0,0,449,451,3,20,10,0,450,
        448,1,0,0,0,450,451,1,0,0,0,451,540,1,0,0,0,452,453,5,102,0,0,453,
        456,5,130,0,0,454,455,5,77,0,0,455,457,5,55,0,0,456,454,1,0,0,0,
        456,457,1,0,0,0,457,458,1,0,0,0,458,461,3,208,104,0,459,460,5,79,
        0,0,460,462,3,20,10,0,461,459,1,0,0,0,461,462,1,0,0,0,462,540,1,
        0,0,0,463,464,5,108,0,0,464,467,5,26,0,0,465,466,5,77,0,0,466,468,
        5,55,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,470,
        3,208,104,0,470,471,3,80,40,0,471,540,1,0,0,0,472,473,5,108,0,0,
        473,476,5,26,0,0,474,475,5,77,0,0,475,477,5,55,0,0,476,474,1,0,0,
        0,476,477,1,0,0,0,477,478,1,0,0,0,478,479,3,208,104,0,479,480,5,
        27,0,0,480,481,5,197,0,0,481,540,1,0,0,0,482,483,5,108,0,0,483,486,
        5,26,0,0,484,485,5,77,0,0,485,487,5,55,0,0,486,484,1,0,0,0,486,487,
        1,0,0,0,487,488,1,0,0,0,488,489,3,208,104,0,489,490,5,134,0,0,490,
        491,3,18,9,0,491,540,1,0,0,0,492,493,5,108,0,0,493,496,5,26,0,0,
        494,495,5,77,0,0,495,497,5,55,0,0,496,494,1,0,0,0,496,497,1,0,0,
        0,497,498,1,0,0,0,498,540,3,72,36,0,499,500,5,108,0,0,500,501,5,
        121,0,0,501,502,5,18,0,0,502,540,3,198,99,0,503,504,5,108,0,0,504,
        540,3,66,33,0,505,506,5,110,0,0,506,516,3,20,10,0,507,508,5,166,
        0,0,508,509,5,47,0,0,509,517,5,197,0,0,510,511,5,166,0,0,511,512,
        5,182,0,0,512,517,5,197,0,0,513,514,5,166,0,0,514,515,5,158,0,0,
        515,517,3,214,107,0,516,507,1,0,0,0,516,510,1,0,0,0,516,513,1,0,
        0,0,517,540,1,0,0,0,518,519,5,134,0,0,519,540,5,172,0,0,520,521,
        5,135,0,0,521,524,5,26,0,0,522,523,5,77,0,0,523,525,5,55,0,0,524,
        522,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,3,208,104,0,
        527,528,5,166,0,0,528,529,3,208,104,0,529,540,1,0,0,0,530,531,5,
        136,0,0,531,532,3,20,10,0,532,533,5,67,0,0,533,534,3,214,107,0,534,
        540,1,0,0,0,535,536,5,176,0,0,536,537,3,14,7,0,537,538,3,130,65,
        0,538,540,1,0,0,0,539,325,1,0,0,0,539,337,1,0,0,0,539,349,1,0,0,
        0,539,361,1,0,0,0,539,367,1,0,0,0,539,378,1,0,0,0,539,389,1,0,0,
        0,539,400,1,0,0,0,539,409,1,0,0,0,539,412,1,0,0,0,539,414,1,0,0,
        0,539,421,1,0,0,0,539,428,1,0,0,0,539,435,1,0,0,0,539,437,1,0,0,
        0,539,441,1,0,0,0,539,452,1,0,0,0,539,463,1,0,0,0,539,472,1,0,0,
        0,539,482,1,0,0,0,539,492,1,0,0,0,539,499,1,0,0,0,539,503,1,0,0,
        0,539,505,1,0,0,0,539,518,1,0,0,0,539,520,1,0,0,0,539,530,1,0,0,
        0,539,535,1,0,0,0,540,13,1,0,0,0,541,546,3,16,8,0,542,543,5,203,
        0,0,543,545,3,16,8,0,544,542,1,0,0,0,545,548,1,0,0,0,546,544,1,0,
        0,0,546,547,1,0,0,0,547,15,1,0,0,0,548,546,1,0,0,0,549,550,3,208,
        104,0,550,551,5,208,0,0,551,552,3,198,99,0,552,17,1,0,0,0,553,554,
        7,0,0,0,554,19,1,0,0,0,555,556,5,125,0,0,556,561,3,198,99,0,557,
        558,5,125,0,0,558,559,5,76,0,0,559,561,5,197,0,0,560,555,1,0,0,0,
        560,557,1,0,0,0,561,21,1,0,0,0,562,563,5,15,0,0,563,564,5,46,0,0,
        564,566,3,214,107,0,565,567,3,48,24,0,566,565,1,0,0,0,566,567,1,
        0,0,0,567,23,1,0,0,0,568,569,5,21,0,0,569,570,5,158,0,0,570,572,
        3,214,107,0,571,573,3,20,10,0,572,571,1,0,0,0,572,573,1,0,0,0,573,
        25,1,0,0,0,574,575,7,1,0,0,575,579,5,33,0,0,576,577,5,77,0,0,577,
        578,5,114,0,0,578,580,5,55,0,0,579,576,1,0,0,0,579,580,1,0,0,0,580,
        581,1,0,0,0,581,583,3,220,110,0,582,584,3,48,24,0,583,582,1,0,0,
        0,583,584,1,0,0,0,584,586,1,0,0,0,585,587,3,68,34,0,586,585,1,0,
        0,0,586,587,1,0,0,0,587,728,1,0,0,0,588,596,5,15,0,0,589,592,5,29,
        0,0,590,591,5,120,0,0,591,593,5,136,0,0,592,590,1,0,0,0,592,593,
        1,0,0,0,593,596,1,0,0,0,594,596,5,136,0,0,595,588,1,0,0,0,595,589,
        1,0,0,0,595,594,1,0,0,0,596,597,1,0,0,0,597,601,5,46,0,0,598,599,
        5,77,0,0,599,600,5,114,0,0,600,602,5,55,0,0,601,598,1,0,0,0,601,
        602,1,0,0,0,602,603,1,0,0,0,603,605,3,214,107,0,604,606,3,50,25,
        0,605,604,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,609,3,48,24,
        0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,3,28,14,
        0,611,612,3,32,16,0,612,728,1,0,0,0,613,614,7,1,0,0,614,615,5,99,
        0,0,615,619,5,181,0,0,616,617,5,77,0,0,617,618,5,114,0,0,618,620,
        5,55,0,0,619,616,1,0,0,0,619,620,1,0,0,0,620,621,1,0,0,0,621,623,
        3,214,107,0,622,624,3,50,25,0,623,622,1,0,0,0,623,624,1,0,0,0,624,
        626,1,0,0,0,625,627,3,48,24,0,626,625,1,0,0,0,626,627,1,0,0,0,627,
        633,1,0,0,0,628,629,5,188,0,0,629,631,5,164,0,0,630,632,5,195,0,
        0,631,630,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,628,1,0,0,
        0,633,634,1,0,0,0,634,636,1,0,0,0,635,637,3,52,26,0,636,635,1,0,
        0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,56,28,0,639,638,1,
        0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,642,3,54,27,0,642,728,
        1,0,0,0,643,644,7,1,0,0,644,645,5,103,0,0,645,649,5,181,0,0,646,
        647,5,77,0,0,647,648,5,114,0,0,648,650,5,55,0,0,649,646,1,0,0,0,
        649,650,1,0,0,0,650,651,1,0,0,0,651,653,3,214,107,0,652,654,3,50,
        25,0,653,652,1,0,0,0,653,654,1,0,0,0,654,656,1,0,0,0,655,657,3,48,
        24,0,656,655,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,660,3,56,
        28,0,659,658,1,0,0,0,659,660,1,0,0,0,660,666,1,0,0,0,661,667,3,52,
        26,0,662,664,3,58,29,0,663,665,5,126,0,0,664,663,1,0,0,0,664,665,
        1,0,0,0,665,667,1,0,0,0,666,661,1,0,0,0,666,662,1,0,0,0,667,668,
        1,0,0,0,668,669,3,54,27,0,669,728,1,0,0,0,670,678,5,15,0,0,671,674,
        5,29,0,0,672,673,5,120,0,0,673,675,5,136,0,0,674,672,1,0,0,0,674,
        675,1,0,0,0,675,678,1,0,0,0,676,678,5,136,0,0,677,670,1,0,0,0,677,
        671,1,0,0,0,677,676,1,0,0,0,678,680,1,0,0,0,679,681,5,160,0,0,680,
        679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,686,5,158,0,0,683,
        684,5,77,0,0,684,685,5,114,0,0,685,687,5,55,0,0,686,683,1,0,0,0,
        686,687,1,0,0,0,687,688,1,0,0,0,688,690,3,214,107,0,689,691,3,50,
        25,0,690,689,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,694,3,48,
        24,0,693,692,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,697,3,56,
        28,0,696,695,1,0,0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,700,3,58,
        29,0,699,698,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,703,3,54,
        27,0,702,701,1,0,0,0,702,703,1,0,0,0,703,728,1,0,0,0,704,707,7,1,
        0,0,705,706,5,120,0,0,706,708,5,136,0,0,707,705,1,0,0,0,707,708,
        1,0,0,0,708,709,1,0,0,0,709,713,5,181,0,0,710,711,5,77,0,0,711,712,
        5,114,0,0,712,714,5,55,0,0,713,710,1,0,0,0,713,714,1,0,0,0,714,715,
        1,0,0,0,715,717,3,214,107,0,716,718,3,50,25,0,717,716,1,0,0,0,717,
        718,1,0,0,0,718,720,1,0,0,0,719,721,3,48,24,0,720,719,1,0,0,0,720,
        721,1,0,0,0,721,723,1,0,0,0,722,724,3,56,28,0,723,722,1,0,0,0,723,
        724,1,0,0,0,724,725,1,0,0,0,725,726,3,54,27,0,726,728,1,0,0,0,727,
        574,1,0,0,0,727,595,1,0,0,0,727,613,1,0,0,0,727,643,1,0,0,0,727,
        677,1,0,0,0,727,704,1,0,0,0,728,27,1,0,0,0,729,730,5,214,0,0,730,
        735,3,30,15,0,731,732,5,203,0,0,732,734,3,30,15,0,733,731,1,0,0,
        0,734,737,1,0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,
        0,737,735,1,0,0,0,738,739,5,224,0,0,739,29,1,0,0,0,740,741,3,236,
        118,0,741,742,3,192,96,0,742,31,1,0,0,0,743,745,3,34,17,0,744,743,
        1,0,0,0,744,745,1,0,0,0,745,33,1,0,0,0,746,747,5,129,0,0,747,748,
        5,90,0,0,748,749,3,194,97,0,749,35,1,0,0,0,750,757,3,236,118,0,751,
        754,3,236,118,0,752,753,5,214,0,0,753,755,5,224,0,0,754,752,1,0,
        0,0,754,755,1,0,0,0,755,758,1,0,0,0,756,758,3,226,113,0,757,751,
        1,0,0,0,757,756,1,0,0,0,758,37,1,0,0,0,759,760,5,151,0,0,760,761,
        5,214,0,0,761,762,3,236,118,0,762,766,5,214,0,0,763,765,3,36,18,
        0,764,763,1,0,0,0,765,768,1,0,0,0,766,764,1,0,0,0,766,767,1,0,0,
        0,767,769,1,0,0,0,768,766,1,0,0,0,769,770,5,224,0,0,770,771,5,224,
        0,0,771,39,1,0,0,0,772,773,5,96,0,0,773,783,5,214,0,0,774,784,5,
        195,0,0,775,776,5,106,0,0,776,777,5,195,0,0,777,778,5,104,0,0,778,
        784,5,195,0,0,779,780,5,104,0,0,780,781,5,195,0,0,781,782,5,106,
        0,0,782,784,5,195,0,0,783,774,1,0,0,0,783,775,1,0,0,0,783,779,1,
        0,0,0,784,785,1,0,0,0,785,786,5,224,0,0,786,41,1,0,0,0,787,788,5,
        93,0,0,788,789,5,214,0,0,789,790,3,236,118,0,790,794,5,214,0,0,791,
        793,3,36,18,0,792,791,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,
        795,1,0,0,0,795,797,1,0,0,0,796,794,1,0,0,0,797,798,5,224,0,0,798,
        799,5,224,0,0,799,43,1,0,0,0,800,801,5,132,0,0,801,812,5,214,0,0,
        802,803,5,106,0,0,803,804,3,236,118,0,804,805,5,104,0,0,805,806,
        3,236,118,0,806,813,1,0,0,0,807,808,5,104,0,0,808,809,3,236,118,
        0,809,810,5,106,0,0,810,811,3,236,118,0,811,813,1,0,0,0,812,802,
        1,0,0,0,812,807,1,0,0,0,813,814,1,0,0,0,814,815,5,224,0,0,815,45,
        1,0,0,0,816,817,5,149,0,0,817,818,5,214,0,0,818,819,3,164,82,0,819,
        820,5,224,0,0,820,47,1,0,0,0,821,822,5,118,0,0,822,825,5,23,0,0,
        823,826,3,236,118,0,824,826,5,197,0,0,825,823,1,0,0,0,825,824,1,
        0,0,0,826,49,1,0,0,0,827,828,5,179,0,0,828,829,5,197,0,0,829,51,
        1,0,0,0,830,831,5,166,0,0,831,832,3,214,107,0,832,53,1,0,0,0,833,
        834,5,10,0,0,834,835,3,112,56,0,835,55,1,0,0,0,836,837,5,214,0,0,
        837,842,3,70,35,0,838,839,5,203,0,0,839,841,3,70,35,0,840,838,1,
        0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,1,
        0,0,0,844,842,1,0,0,0,845,846,5,224,0,0,846,852,1,0,0,0,847,848,
        5,10,0,0,848,852,3,214,107,0,849,850,5,10,0,0,850,852,3,212,106,
        0,851,836,1,0,0,0,851,847,1,0,0,0,851,849,1,0,0,0,852,57,1,0,0,0,
        853,854,3,68,34,0,854,59,1,0,0,0,855,856,5,125,0,0,856,857,5,18,
        0,0,857,858,3,198,99,0,858,61,1,0,0,0,859,860,5,129,0,0,860,861,
        5,90,0,0,861,862,3,198,99,0,862,63,1,0,0,0,863,864,5,143,0,0,864,
        865,5,18,0,0,865,866,3,198,99,0,866,65,1,0,0,0,867,868,5,172,0,0,
        868,873,3,84,42,0,869,870,5,203,0,0,870,872,3,84,42,0,871,869,1,
        0,0,0,872,875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,67,1,0,
        0,0,875,873,1,0,0,0,876,878,5,53,0,0,877,879,5,208,0,0,878,877,1,
        0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,886,3,238,119,0,881,883,
        5,214,0,0,882,884,3,194,97,0,883,882,1,0,0,0,883,884,1,0,0,0,884,
        885,1,0,0,0,885,887,5,224,0,0,886,881,1,0,0,0,886,887,1,0,0,0,887,
        69,1,0,0,0,888,899,3,72,36,0,889,890,5,28,0,0,890,891,3,236,118,
        0,891,892,5,21,0,0,892,893,3,198,99,0,893,899,1,0,0,0,894,895,5,
        80,0,0,895,899,3,76,38,0,896,897,5,130,0,0,897,899,3,78,39,0,898,
        888,1,0,0,0,898,889,1,0,0,0,898,894,1,0,0,0,898,896,1,0,0,0,899,
        71,1,0,0,0,900,901,3,208,104,0,901,903,3,192,96,0,902,904,3,74,37,
        0,903,902,1,0,0,0,903,904,1,0,0,0,904,907,1,0,0,0,905,906,5,27,0,
        0,906,908,5,197,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,910,1,0,
        0,0,909,911,3,80,40,0,910,909,1,0,0,0,910,911,1,0,0,0,911,914,1,
        0,0,0,912,913,5,172,0,0,913,915,3,198,99,0,914,912,1,0,0,0,914,915,
        1,0,0,0,915,933,1,0,0,0,916,918,3,208,104,0,917,919,3,192,96,0,918,
        917,1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,923,3,74,37,0,921,
        922,5,27,0,0,922,924,5,197,0,0,923,921,1,0,0,0,923,924,1,0,0,0,924,
        926,1,0,0,0,925,927,3,80,40,0,926,925,1,0,0,0,926,927,1,0,0,0,927,
        930,1,0,0,0,928,929,5,172,0,0,929,931,3,198,99,0,930,928,1,0,0,0,
        930,931,1,0,0,0,931,933,1,0,0,0,932,900,1,0,0,0,932,916,1,0,0,0,
        933,73,1,0,0,0,934,935,7,2,0,0,935,936,3,198,99,0,936,75,1,0,0,0,
        937,938,3,208,104,0,938,939,3,198,99,0,939,940,5,173,0,0,940,941,
        3,192,96,0,941,942,5,71,0,0,942,943,5,195,0,0,943,77,1,0,0,0,944,
        945,3,208,104,0,945,946,3,110,55,0,946,79,1,0,0,0,947,948,5,24,0,
        0,948,949,5,214,0,0,949,954,3,82,41,0,950,951,5,203,0,0,951,953,
        3,82,41,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,
        1,0,0,0,955,957,1,0,0,0,956,954,1,0,0,0,957,958,5,224,0,0,958,81,
        1,0,0,0,959,965,3,236,118,0,960,962,5,214,0,0,961,963,3,194,97,0,
        962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,966,5,224,0,
        0,965,960,1,0,0,0,965,966,1,0,0,0,966,83,1,0,0,0,967,975,3,198,99,
        0,968,976,5,40,0,0,969,970,5,166,0,0,970,971,5,47,0,0,971,976,5,
        197,0,0,972,973,5,166,0,0,973,974,5,182,0,0,974,976,5,197,0,0,975,
        968,1,0,0,0,975,969,1,0,0,0,975,972,1,0,0,0,975,976,1,0,0,0,976,
        85,1,0,0,0,977,979,7,3,0,0,978,980,5,158,0,0,979,978,1,0,0,0,979,
        980,1,0,0,0,980,981,1,0,0,0,981,982,3,210,105,0,982,87,1,0,0,0,983,
        984,7,4,0,0,984,987,5,33,0,0,985,986,5,77,0,0,986,988,5,55,0,0,987,
        985,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,991,3,220,110,0,
        990,992,3,48,24,0,991,990,1,0,0,0,991,992,1,0,0,0,992,1015,1,0,0,
        0,993,1000,7,4,0,0,994,1001,5,46,0,0,995,997,5,160,0,0,996,995,1,
        0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,1001,5,158,0,0,999,1001,
        5,181,0,0,1000,994,1,0,0,0,1000,996,1,0,0,0,1000,999,1,0,0,0,1001,
        1004,1,0,0,0,1002,1003,5,77,0,0,1003,1005,5,55,0,0,1004,1002,1,0,
        0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1008,3,214,107,0,1007,
        1009,3,48,24,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1012,1,0,
        0,0,1010,1011,5,113,0,0,1011,1013,5,39,0,0,1012,1010,1,0,0,0,1012,
        1013,1,0,0,0,1013,1015,1,0,0,0,1014,983,1,0,0,0,1014,993,1,0,0,0,
        1015,89,1,0,0,0,1016,1017,5,55,0,0,1017,1018,5,33,0,0,1018,1030,
        3,220,110,0,1019,1026,5,55,0,0,1020,1027,5,46,0,0,1021,1023,5,160,
        0,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,1024,1,0,0,0,1024,1027,
        5,158,0,0,1025,1027,5,181,0,0,1026,1020,1,0,0,0,1026,1022,1,0,0,
        0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1030,
        3,214,107,0,1029,1016,1,0,0,0,1029,1019,1,0,0,0,1030,91,1,0,0,0,
        1031,1032,5,56,0,0,1032,1033,5,13,0,0,1033,1038,3,2,1,0,1034,1035,
        5,56,0,0,1035,1036,5,156,0,0,1036,1038,3,2,1,0,1037,1031,1,0,0,0,
        1037,1034,1,0,0,0,1038,93,1,0,0,0,1039,1040,5,84,0,0,1040,1042,5,
        86,0,0,1041,1043,5,158,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,
        1047,1,0,0,0,1044,1048,3,214,107,0,1045,1046,5,69,0,0,1046,1048,
        3,212,106,0,1047,1044,1,0,0,0,1047,1045,1,0,0,0,1048,1050,1,0,0,
        0,1049,1051,3,96,48,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,1052,
        1,0,0,0,1052,1053,3,98,49,0,1053,95,1,0,0,0,1054,1055,5,214,0,0,
        1055,1060,3,208,104,0,1056,1057,5,203,0,0,1057,1059,3,208,104,0,
        1058,1056,1,0,0,0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,
        1,0,0,0,1061,1063,1,0,0,0,1062,1060,1,0,0,0,1063,1064,5,224,0,0,
        1064,97,1,0,0,0,1065,1066,5,65,0,0,1066,1083,3,236,118,0,1067,1068,
        5,180,0,0,1068,1073,3,100,50,0,1069,1070,5,203,0,0,1070,1072,3,100,
        50,0,1071,1069,1,0,0,0,1072,1075,1,0,0,0,1073,1071,1,0,0,0,1073,
        1074,1,0,0,0,1074,1083,1,0,0,0,1075,1073,1,0,0,0,1076,1078,3,112,
        56,0,1077,1079,5,225,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,0,1079,
        1080,1,0,0,0,1080,1081,5,0,0,1,1081,1083,1,0,0,0,1082,1065,1,0,0,
        0,1082,1067,1,0,0,0,1082,1076,1,0,0,0,1083,99,1,0,0,0,1084,1085,
        5,214,0,0,1085,1090,3,102,51,0,1086,1087,5,203,0,0,1087,1089,3,102,
        51,0,1088,1086,1,0,0,0,1089,1092,1,0,0,0,1090,1088,1,0,0,0,1090,
        1091,1,0,0,0,1091,1093,1,0,0,0,1092,1090,1,0,0,0,1093,1094,5,224,
        0,0,1094,1098,1,0,0,0,1095,1096,5,214,0,0,1096,1098,5,224,0,0,1097,
        1084,1,0,0,0,1097,1095,1,0,0,0,1098,101,1,0,0,0,1099,1100,3,226,
        113,0,1100,103,1,0,0,0,1101,1102,5,91,0,0,1102,1104,5,111,0,0,1103,
        1105,3,48,24,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,
        0,0,1106,1108,3,130,65,0,1107,1109,7,5,0,0,1108,1107,1,0,0,0,1108,
        1109,1,0,0,0,1109,105,1,0,0,0,1110,1111,5,119,0,0,1111,1112,5,158,
        0,0,1112,1114,3,214,107,0,1113,1115,3,48,24,0,1114,1113,1,0,0,0,
        1114,1115,1,0,0,0,1115,1117,1,0,0,0,1116,1118,3,20,10,0,1117,1116,
        1,0,0,0,1117,1118,1,0,0,0,1118,1120,1,0,0,0,1119,1121,5,60,0,0,1120,
        1119,1,0,0,0,1120,1121,1,0,0,0,1121,1123,1,0,0,0,1122,1124,5,37,
        0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,107,1,0,0,0,1125,1126,
        5,135,0,0,1126,1127,5,158,0,0,1127,1128,3,214,107,0,1128,1129,5,
        166,0,0,1129,1137,3,214,107,0,1130,1131,5,203,0,0,1131,1132,3,214,
        107,0,1132,1133,5,166,0,0,1133,1134,3,214,107,0,1134,1136,1,0,0,
        0,1135,1130,1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,1137,1138,
        1,0,0,0,1138,1141,1,0,0,0,1139,1137,1,0,0,0,1140,1142,3,48,24,0,
        1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,109,1,0,0,0,1143,1145,5,
        214,0,0,1144,1146,3,118,59,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,
        1146,1147,1,0,0,0,1147,1148,5,145,0,0,1148,1150,3,194,97,0,1149,
        1151,3,132,66,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,1153,1,
        0,0,0,1152,1154,3,138,69,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,
        1155,1,0,0,0,1155,1156,5,224,0,0,1156,111,1,0,0,0,1157,1163,3,114,
        57,0,1158,1159,5,175,0,0,1159,1160,5,4,0,0,1160,1162,3,114,57,0,
        1161,1158,1,0,0,0,1162,1165,1,0,0,0,1163,1161,1,0,0,0,1163,1164,
        1,0,0,0,1164,113,1,0,0,0,1165,1163,1,0,0,0,1166,1172,3,116,58,0,
        1167,1168,5,214,0,0,1168,1169,3,112,56,0,1169,1170,5,224,0,0,1170,
        1172,1,0,0,0,1171,1166,1,0,0,0,1171,1167,1,0,0,0,1172,115,1,0,0,
        0,1173,1175,3,118,59,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,
        1176,1,0,0,0,1176,1178,5,145,0,0,1177,1179,5,48,0,0,1178,1177,1,
        0,0,0,1178,1179,1,0,0,0,1179,1181,1,0,0,0,1180,1182,3,120,60,0,1181,
        1180,1,0,0,0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,3,194,
        97,0,1184,1186,3,122,61,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,
        1188,1,0,0,0,1187,1189,3,124,62,0,1188,1187,1,0,0,0,1188,1189,1,
        0,0,0,1189,1191,1,0,0,0,1190,1192,3,126,63,0,1191,1190,1,0,0,0,1191,
        1192,1,0,0,0,1192,1194,1,0,0,0,1193,1195,3,128,64,0,1194,1193,1,
        0,0,0,1194,1195,1,0,0,0,1195,1197,1,0,0,0,1196,1198,3,130,65,0,1197,
        1196,1,0,0,0,1197,1198,1,0,0,0,1198,1200,1,0,0,0,1199,1201,3,132,
        66,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1204,1,0,0,0,1202,
        1203,5,188,0,0,1203,1205,7,6,0,0,1204,1202,1,0,0,0,1204,1205,1,0,
        0,0,1205,1208,1,0,0,0,1206,1207,5,188,0,0,1207,1209,5,168,0,0,1208,
        1206,1,0,0,0,1208,1209,1,0,0,0,1209,1211,1,0,0,0,1210,1212,3,134,
        67,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1214,1,0,0,0,1213,
        1215,3,136,68,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1217,1,
        0,0,0,1216,1218,3,140,70,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,
        1220,1,0,0,0,1219,1221,3,142,71,0,1220,1219,1,0,0,0,1220,1221,1,
        0,0,0,1221,1223,1,0,0,0,1222,1224,3,144,72,0,1223,1222,1,0,0,0,1223,
        1224,1,0,0,0,1224,117,1,0,0,0,1225,1226,5,188,0,0,1226,1227,3,194,
        97,0,1227,119,1,0,0,0,1228,1229,5,167,0,0,1229,1232,5,195,0,0,1230,
        1231,5,188,0,0,1231,1233,5,163,0,0,1232,1230,1,0,0,0,1232,1233,1,
        0,0,0,1233,121,1,0,0,0,1234,1235,5,67,0,0,1235,1236,3,146,73,0,1236,
        123,1,0,0,0,1237,1239,7,7,0,0,1238,1237,1,0,0,0,1238,1239,1,0,0,
        0,1239,1240,1,0,0,0,1240,1241,5,9,0,0,1241,1242,5,89,0,0,1242,1243,
        3,194,97,0,1243,125,1,0,0,0,1244,1245,5,187,0,0,1245,1246,3,236,
        118,0,1246,1247,5,10,0,0,1247,1248,5,214,0,0,1248,1249,3,168,84,
        0,1249,1250,5,224,0,0,1250,127,1,0,0,0,1251,1252,5,128,0,0,1252,
        1253,3,198,99,0,1253,129,1,0,0,0,1254,1255,5,186,0,0,1255,1256,3,
        198,99,0,1256,131,1,0,0,0,1257,1258,5,72,0,0,1258,1265,5,18,0,0,
        1259,1260,7,6,0,0,1260,1261,5,214,0,0,1261,1262,3,194,97,0,1262,
        1263,5,224,0,0,1263,1266,1,0,0,0,1264,1266,3,194,97,0,1265,1259,
        1,0,0,0,1265,1264,1,0,0,0,1266,133,1,0,0,0,1267,1268,5,73,0,0,1268,
        1269,3,198,99,0,1269,135,1,0,0,0,1270,1271,5,121,0,0,1271,1272,5,
        18,0,0,1272,1273,3,158,79,0,1273,137,1,0,0,0,1274,1275,5,121,0,0,
        1275,1276,5,18,0,0,1276,1277,3,194,97,0,1277,139,1,0,0,0,1278,1279,
        5,98,0,0,1279,1280,3,156,78,0,1280,1281,5,18,0,0,1281,1282,3,194,
        97,0,1282,141,1,0,0,0,1283,1284,5,98,0,0,1284,1287,3,156,78,0,1285,
        1286,5,188,0,0,1286,1288,5,163,0,0,1287,1285,1,0,0,0,1287,1288,1,
        0,0,0,1288,143,1,0,0,0,1289,1290,5,149,0,0,1290,1291,3,164,82,0,
        1291,145,1,0,0,0,1292,1293,6,73,-1,0,1293,1295,3,210,105,0,1294,
        1296,5,60,0,0,1295,1294,1,0,0,0,1295,1296,1,0,0,0,1296,1298,1,0,
        0,0,1297,1299,3,154,77,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,
        1305,1,0,0,0,1300,1301,5,214,0,0,1301,1302,3,146,73,0,1302,1303,
        5,224,0,0,1303,1305,1,0,0,0,1304,1292,1,0,0,0,1304,1300,1,0,0,0,
        1305,1323,1,0,0,0,1306,1307,10,3,0,0,1307,1308,3,150,75,0,1308,1309,
        3,146,73,4,1309,1322,1,0,0,0,1310,1312,10,4,0,0,1311,1313,7,8,0,
        0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,1316,
        3,148,74,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,
        1317,1318,5,89,0,0,1318,1319,3,146,73,0,1319,1320,3,152,76,0,1320,
        1322,1,0,0,0,1321,1306,1,0,0,0,1321,1310,1,0,0,0,1322,1325,1,0,0,
        0,1323,1321,1,0,0,0,1323,1324,1,0,0,0,1324,147,1,0,0,0,1325,1323,
        1,0,0,0,1326,1328,7,9,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,
        1329,1,0,0,0,1329,1336,5,83,0,0,1330,1332,5,83,0,0,1331,1333,7,9,
        0,0,1332,1331,1,0,0,0,1332,1333,1,0,0,0,1333,1336,1,0,0,0,1334,1336,
        7,9,0,0,1335,1327,1,0,0,0,1335,1330,1,0,0,0,1335,1334,1,0,0,0,1336,
        1370,1,0,0,0,1337,1339,7,10,0,0,1338,1337,1,0,0,0,1338,1339,1,0,
        0,0,1339,1340,1,0,0,0,1340,1342,7,11,0,0,1341,1343,5,122,0,0,1342,
        1341,1,0,0,0,1342,1343,1,0,0,0,1343,1352,1,0,0,0,1344,1346,7,11,
        0,0,1345,1347,5,122,0,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,
        1349,1,0,0,0,1348,1350,7,10,0,0,1349,1348,1,0,0,0,1349,1350,1,0,
        0,0,1350,1352,1,0,0,0,1351,1338,1,0,0,0,1351,1344,1,0,0,0,1352,1370,
        1,0,0,0,1353,1355,7,12,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,
        1356,1,0,0,0,1356,1358,5,68,0,0,1357,1359,5,122,0,0,1358,1357,1,
        0,0,0,1358,1359,1,0,0,0,1359,1368,1,0,0,0,1360,1362,5,68,0,0,1361,
        1363,5,122,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1365,1,0,
        0,0,1364,1366,7,12,0,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,
        1368,1,0,0,0,1367,1354,1,0,0,0,1367,1360,1,0,0,0,1368,1370,1,0,0,
        0,1369,1335,1,0,0,0,1369,1351,1,0,0,0,1369,1367,1,0,0,0,1370,149,
        1,0,0,0,1371,1373,7,8,0,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,
        1374,1,0,0,0,1374,1375,5,30,0,0,1375,1378,5,89,0,0,1376,1378,5,203,
        0,0,1377,1372,1,0,0,0,1377,1376,1,0,0,0,1378,151,1,0,0,0,1379,1380,
        5,118,0,0,1380,1389,3,194,97,0,1381,1382,5,178,0,0,1382,1383,5,214,
        0,0,1383,1384,3,194,97,0,1384,1385,5,224,0,0,1385,1389,1,0,0,0,1386,
        1387,5,178,0,0,1387,1389,3,194,97,0,1388,1379,1,0,0,0,1388,1381,
        1,0,0,0,1388,1386,1,0,0,0,1389,153,1,0,0,0,1390,1391,5,143,0,0,1391,
        1394,3,162,81,0,1392,1393,5,117,0,0,1393,1395,3,162,81,0,1394,1392,
        1,0,0,0,1394,1395,1,0,0,0,1395,155,1,0,0,0,1396,1399,3,198,99,0,
        1397,1398,7,13,0,0,1398,1400,3,198,99,0,1399,1397,1,0,0,0,1399,1400,
        1,0,0,0,1400,157,1,0,0,0,1401,1406,3,160,80,0,1402,1403,5,203,0,
        0,1403,1405,3,160,80,0,1404,1402,1,0,0,0,1405,1408,1,0,0,0,1406,
        1404,1,0,0,0,1406,1407,1,0,0,0,1407,159,1,0,0,0,1408,1406,1,0,0,
        0,1409,1411,3,198,99,0,1410,1412,7,14,0,0,1411,1410,1,0,0,0,1411,
        1412,1,0,0,0,1412,1415,1,0,0,0,1413,1414,5,116,0,0,1414,1416,7,15,
        0,0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1419,1,0,0,0,1417,1418,
        5,25,0,0,1418,1420,5,197,0,0,1419,1417,1,0,0,0,1419,1420,1,0,0,0,
        1420,161,1,0,0,0,1421,1424,3,224,112,0,1422,1423,5,226,0,0,1423,
        1425,3,224,112,0,1424,1422,1,0,0,0,1424,1425,1,0,0,0,1425,163,1,
        0,0,0,1426,1431,3,166,83,0,1427,1428,5,203,0,0,1428,1430,3,166,83,
        0,1429,1427,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,1432,
        1,0,0,0,1432,165,1,0,0,0,1433,1431,1,0,0,0,1434,1435,3,236,118,0,
        1435,1436,5,208,0,0,1436,1437,3,226,113,0,1437,167,1,0,0,0,1438,
        1440,3,170,85,0,1439,1438,1,0,0,0,1439,1440,1,0,0,0,1440,1442,1,
        0,0,0,1441,1443,3,172,86,0,1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,
        1445,1,0,0,0,1444,1446,3,174,87,0,1445,1444,1,0,0,0,1445,1446,1,
        0,0,0,1446,169,1,0,0,0,1447,1448,5,125,0,0,1448,1449,5,18,0,0,1449,
        1450,3,194,97,0,1450,171,1,0,0,0,1451,1452,5,121,0,0,1452,1453,5,
        18,0,0,1453,1454,3,158,79,0,1454,173,1,0,0,0,1455,1456,7,16,0,0,
        1456,1457,3,176,88,0,1457,175,1,0,0,0,1458,1465,3,178,89,0,1459,
        1460,5,16,0,0,1460,1461,3,178,89,0,1461,1462,5,6,0,0,1462,1463,3,
        178,89,0,1463,1465,1,0,0,0,1464,1458,1,0,0,0,1464,1459,1,0,0,0,1465,
        177,1,0,0,0,1466,1467,5,32,0,0,1467,1479,5,141,0,0,1468,1469,5,174,
        0,0,1469,1479,5,127,0,0,1470,1471,5,174,0,0,1471,1479,5,63,0,0,1472,
        1473,3,224,112,0,1473,1474,5,127,0,0,1474,1479,1,0,0,0,1475,1476,
        3,224,112,0,1476,1477,5,63,0,0,1477,1479,1,0,0,0,1478,1466,1,0,0,
        0,1478,1468,1,0,0,0,1478,1470,1,0,0,0,1478,1472,1,0,0,0,1478,1475,
        1,0,0,0,1479,179,1,0,0,0,1480,1481,5,148,0,0,1481,1482,3,164,82,
        0,1482,181,1,0,0,0,1483,1484,5,150,0,0,1484,1485,5,29,0,0,1485,1486,
        5,33,0,0,1486,1526,3,220,110,0,1487,1488,5,150,0,0,1488,1489,5,29,
        0,0,1489,1490,5,46,0,0,1490,1526,3,214,107,0,1491,1492,5,150,0,0,
        1492,1494,5,29,0,0,1493,1495,5,160,0,0,1494,1493,1,0,0,0,1494,1495,
        1,0,0,0,1495,1497,1,0,0,0,1496,1498,5,158,0,0,1497,1496,1,0,0,0,
        1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1526,3,214,107,0,1500,1501,
        5,150,0,0,1501,1526,5,34,0,0,1502,1503,5,150,0,0,1503,1506,5,45,
        0,0,1504,1505,5,67,0,0,1505,1507,3,220,110,0,1506,1504,1,0,0,0,1506,
        1507,1,0,0,0,1507,1526,1,0,0,0,1508,1510,5,150,0,0,1509,1511,5,160,
        0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1512,1,0,0,0,1512,1515,
        5,159,0,0,1513,1514,7,17,0,0,1514,1516,3,220,110,0,1515,1513,1,0,
        0,0,1515,1516,1,0,0,0,1516,1520,1,0,0,0,1517,1518,5,97,0,0,1518,
        1521,5,197,0,0,1519,1521,3,130,65,0,1520,1517,1,0,0,0,1520,1519,
        1,0,0,0,1520,1521,1,0,0,0,1521,1523,1,0,0,0,1522,1524,3,142,71,0,
        1523,1522,1,0,0,0,1523,1524,1,0,0,0,1524,1526,1,0,0,0,1525,1483,
        1,0,0,0,1525,1487,1,0,0,0,1525,1491,1,0,0,0,1525,1500,1,0,0,0,1525,
        1502,1,0,0,0,1525,1508,1,0,0,0,1526,183,1,0,0,0,1527,1528,5,157,
        0,0,1528,1529,5,62,0,0,1529,1530,5,49,0,0,1530,1562,3,214,107,0,
        1531,1532,5,157,0,0,1532,1533,5,62,0,0,1533,1562,5,101,0,0,1534,
        1535,5,157,0,0,1535,1536,5,133,0,0,1536,1562,5,45,0,0,1537,1538,
        5,157,0,0,1538,1539,5,133,0,0,1539,1540,5,46,0,0,1540,1562,3,214,
        107,0,1541,1542,5,157,0,0,1542,1550,7,18,0,0,1543,1544,5,49,0,0,
        1544,1551,5,147,0,0,1545,1551,5,59,0,0,1546,1548,5,172,0,0,1547,
        1546,1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1551,5,105,
        0,0,1550,1543,1,0,0,0,1550,1545,1,0,0,0,1550,1547,1,0,0,0,1551,1552,
        1,0,0,0,1552,1562,3,214,107,0,1553,1554,5,157,0,0,1554,1555,7,18,
        0,0,1555,1556,5,138,0,0,1556,1562,5,147,0,0,1557,1558,5,157,0,0,
        1558,1559,5,155,0,0,1559,1560,5,137,0,0,1560,1562,3,214,107,0,1561,
        1527,1,0,0,0,1561,1531,1,0,0,0,1561,1534,1,0,0,0,1561,1537,1,0,0,
        0,1561,1541,1,0,0,0,1561,1553,1,0,0,0,1561,1557,1,0,0,0,1562,185,
        1,0,0,0,1563,1565,5,171,0,0,1564,1566,5,160,0,0,1565,1564,1,0,0,
        0,1565,1566,1,0,0,0,1566,1568,1,0,0,0,1567,1569,5,158,0,0,1568,1567,
        1,0,0,0,1568,1569,1,0,0,0,1569,1572,1,0,0,0,1570,1571,5,77,0,0,1571,
        1573,5,55,0,0,1572,1570,1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,
        0,0,1574,1576,3,214,107,0,1575,1577,3,48,24,0,1576,1575,1,0,0,0,
        1576,1577,1,0,0,0,1577,187,1,0,0,0,1578,1579,5,177,0,0,1579,1580,
        3,220,110,0,1580,189,1,0,0,0,1581,1582,5,183,0,0,1582,1584,3,214,
        107,0,1583,1585,5,54,0,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,
        1588,1,0,0,0,1586,1587,5,98,0,0,1587,1589,5,195,0,0,1588,1586,1,
        0,0,0,1588,1589,1,0,0,0,1589,191,1,0,0,0,1590,1638,3,236,118,0,1591,
        1592,3,236,118,0,1592,1593,5,214,0,0,1593,1594,3,236,118,0,1594,
        1601,3,192,96,0,1595,1596,5,203,0,0,1596,1597,3,236,118,0,1597,1598,
        3,192,96,0,1598,1600,1,0,0,0,1599,1595,1,0,0,0,1600,1603,1,0,0,0,
        1601,1599,1,0,0,0,1601,1602,1,0,0,0,1602,1604,1,0,0,0,1603,1601,
        1,0,0,0,1604,1605,5,224,0,0,1605,1638,1,0,0,0,1606,1607,3,236,118,
        0,1607,1608,5,214,0,0,1608,1613,3,240,120,0,1609,1610,5,203,0,0,
        1610,1612,3,240,120,0,1611,1609,1,0,0,0,1612,1615,1,0,0,0,1613,1611,
        1,0,0,0,1613,1614,1,0,0,0,1614,1616,1,0,0,0,1615,1613,1,0,0,0,1616,
        1617,5,224,0,0,1617,1638,1,0,0,0,1618,1619,3,236,118,0,1619,1620,
        5,214,0,0,1620,1625,3,192,96,0,1621,1622,5,203,0,0,1622,1624,3,192,
        96,0,1623,1621,1,0,0,0,1624,1627,1,0,0,0,1625,1623,1,0,0,0,1625,
        1626,1,0,0,0,1626,1628,1,0,0,0,1627,1625,1,0,0,0,1628,1629,5,224,
        0,0,1629,1638,1,0,0,0,1630,1631,3,236,118,0,1631,1633,5,214,0,0,
        1632,1634,3,194,97,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1635,
        1,0,0,0,1635,1636,5,224,0,0,1636,1638,1,0,0,0,1637,1590,1,0,0,0,
        1637,1591,1,0,0,0,1637,1606,1,0,0,0,1637,1618,1,0,0,0,1637,1630,
        1,0,0,0,1638,193,1,0,0,0,1639,1644,3,196,98,0,1640,1641,5,203,0,
        0,1641,1643,3,196,98,0,1642,1640,1,0,0,0,1643,1646,1,0,0,0,1644,
        1642,1,0,0,0,1644,1645,1,0,0,0,1645,195,1,0,0,0,1646,1644,1,0,0,
        0,1647,1648,3,214,107,0,1648,1649,5,206,0,0,1649,1651,1,0,0,0,1650,
        1647,1,0,0,0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,1659,5,199,
        0,0,1653,1654,5,214,0,0,1654,1655,3,112,56,0,1655,1656,5,224,0,0,
        1656,1659,1,0,0,0,1657,1659,3,198,99,0,1658,1650,1,0,0,0,1658,1653,
        1,0,0,0,1658,1657,1,0,0,0,1659,197,1,0,0,0,1660,1661,6,99,-1,0,1661,
        1663,5,19,0,0,1662,1664,3,198,99,0,1663,1662,1,0,0,0,1663,1664,1,
        0,0,0,1664,1670,1,0,0,0,1665,1666,5,185,0,0,1666,1667,3,198,99,0,
        1667,1668,5,162,0,0,1668,1669,3,198,99,0,1669,1671,1,0,0,0,1670,
        1665,1,0,0,0,1671,1672,1,0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,
        0,1673,1676,1,0,0,0,1674,1675,5,51,0,0,1675,1677,3,198,99,0,1676,
        1674,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,0,0,1678,1679,5,52,
        0,0,1679,1790,1,0,0,0,1680,1681,5,20,0,0,1681,1682,5,214,0,0,1682,
        1683,3,198,99,0,1683,1684,5,10,0,0,1684,1685,3,192,96,0,1685,1686,
        5,224,0,0,1686,1790,1,0,0,0,1687,1688,5,35,0,0,1688,1790,5,197,0,
        0,1689,1690,5,58,0,0,1690,1691,5,214,0,0,1691,1692,3,228,114,0,1692,
        1693,5,67,0,0,1693,1694,3,198,99,0,1694,1695,5,224,0,0,1695,1790,
        1,0,0,0,1696,1697,5,85,0,0,1697,1698,3,198,99,0,1698,1699,3,228,
        114,0,1699,1790,1,0,0,0,1700,1701,5,154,0,0,1701,1702,5,214,0,0,
        1702,1703,3,198,99,0,1703,1704,5,67,0,0,1704,1707,3,198,99,0,1705,
        1706,5,64,0,0,1706,1708,3,198,99,0,1707,1705,1,0,0,0,1707,1708,1,
        0,0,0,1708,1709,1,0,0,0,1709,1710,5,224,0,0,1710,1790,1,0,0,0,1711,
        1712,5,165,0,0,1712,1790,5,197,0,0,1713,1714,5,170,0,0,1714,1715,
        5,214,0,0,1715,1716,7,19,0,0,1716,1717,5,197,0,0,1717,1718,5,67,
        0,0,1718,1719,3,198,99,0,1719,1720,5,224,0,0,1720,1790,1,0,0,0,1721,
        1722,3,236,118,0,1722,1724,5,214,0,0,1723,1725,3,194,97,0,1724,1723,
        1,0,0,0,1724,1725,1,0,0,0,1725,1726,1,0,0,0,1726,1727,5,224,0,0,
        1727,1728,1,0,0,0,1728,1729,5,124,0,0,1729,1730,5,214,0,0,1730,1731,
        3,168,84,0,1731,1732,5,224,0,0,1732,1790,1,0,0,0,1733,1734,3,236,
        118,0,1734,1736,5,214,0,0,1735,1737,3,194,97,0,1736,1735,1,0,0,0,
        1736,1737,1,0,0,0,1737,1738,1,0,0,0,1738,1739,5,224,0,0,1739,1740,
        1,0,0,0,1740,1741,5,124,0,0,1741,1742,3,236,118,0,1742,1790,1,0,
        0,0,1743,1749,3,236,118,0,1744,1746,5,214,0,0,1745,1747,3,194,97,
        0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1748,1,0,0,0,1748,1750,
        5,224,0,0,1749,1744,1,0,0,0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,
        1751,1753,5,214,0,0,1752,1754,5,48,0,0,1753,1752,1,0,0,0,1753,1754,
        1,0,0,0,1754,1756,1,0,0,0,1755,1757,3,200,100,0,1756,1755,1,0,0,
        0,1756,1757,1,0,0,0,1757,1758,1,0,0,0,1758,1759,5,224,0,0,1759,1790,
        1,0,0,0,1760,1790,3,226,113,0,1761,1762,5,205,0,0,1762,1790,3,198,
        99,17,1763,1764,5,114,0,0,1764,1790,3,198,99,12,1765,1766,3,214,
        107,0,1766,1767,5,206,0,0,1767,1769,1,0,0,0,1768,1765,1,0,0,0,1768,
        1769,1,0,0,0,1769,1770,1,0,0,0,1770,1790,5,199,0,0,1771,1772,5,214,
        0,0,1772,1773,3,112,56,0,1773,1774,5,224,0,0,1774,1790,1,0,0,0,1775,
        1776,5,214,0,0,1776,1777,3,198,99,0,1777,1778,5,224,0,0,1778,1790,
        1,0,0,0,1779,1780,5,214,0,0,1780,1781,3,194,97,0,1781,1782,5,224,
        0,0,1782,1790,1,0,0,0,1783,1785,5,212,0,0,1784,1786,3,194,97,0,1785,
        1784,1,0,0,0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1790,5,223,
        0,0,1788,1790,3,206,103,0,1789,1660,1,0,0,0,1789,1680,1,0,0,0,1789,
        1687,1,0,0,0,1789,1689,1,0,0,0,1789,1696,1,0,0,0,1789,1700,1,0,0,
        0,1789,1711,1,0,0,0,1789,1713,1,0,0,0,1789,1721,1,0,0,0,1789,1733,
        1,0,0,0,1789,1743,1,0,0,0,1789,1760,1,0,0,0,1789,1761,1,0,0,0,1789,
        1763,1,0,0,0,1789,1768,1,0,0,0,1789,1771,1,0,0,0,1789,1775,1,0,0,
        0,1789,1779,1,0,0,0,1789,1783,1,0,0,0,1789,1788,1,0,0,0,1790,1862,
        1,0,0,0,1791,1792,10,16,0,0,1792,1793,7,20,0,0,1793,1861,3,198,99,
        17,1794,1795,10,15,0,0,1795,1796,7,21,0,0,1796,1861,3,198,99,16,
        1797,1816,10,14,0,0,1798,1817,5,207,0,0,1799,1817,5,208,0,0,1800,
        1817,5,216,0,0,1801,1817,5,213,0,0,1802,1817,5,209,0,0,1803,1817,
        5,215,0,0,1804,1817,5,210,0,0,1805,1807,5,70,0,0,1806,1805,1,0,0,
        0,1806,1807,1,0,0,0,1807,1809,1,0,0,0,1808,1810,5,114,0,0,1809,1808,
        1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1817,5,79,0,0,1812,
        1814,5,114,0,0,1813,1812,1,0,0,0,1813,1814,1,0,0,0,1814,1815,1,0,
        0,0,1815,1817,7,22,0,0,1816,1798,1,0,0,0,1816,1799,1,0,0,0,1816,
        1800,1,0,0,0,1816,1801,1,0,0,0,1816,1802,1,0,0,0,1816,1803,1,0,0,
        0,1816,1804,1,0,0,0,1816,1806,1,0,0,0,1816,1813,1,0,0,0,1817,1818,
        1,0,0,0,1818,1861,3,198,99,15,1819,1820,10,11,0,0,1820,1821,5,6,
        0,0,1821,1861,3,198,99,12,1822,1823,10,10,0,0,1823,1824,5,120,0,
        0,1824,1861,3,198,99,11,1825,1827,10,9,0,0,1826,1828,5,114,0,0,1827,
        1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1830,5,16,
        0,0,1830,1831,3,198,99,0,1831,1832,5,6,0,0,1832,1833,3,198,99,10,
        1833,1861,1,0,0,0,1834,1835,10,8,0,0,1835,1836,5,219,0,0,1836,1837,
        3,198,99,0,1837,1838,5,202,0,0,1838,1839,3,198,99,8,1839,1861,1,
        0,0,0,1840,1841,10,19,0,0,1841,1842,5,212,0,0,1842,1843,3,198,99,
        0,1843,1844,5,223,0,0,1844,1861,1,0,0,0,1845,1846,10,18,0,0,1846,
        1847,5,206,0,0,1847,1861,5,195,0,0,1848,1849,10,13,0,0,1849,1851,
        5,87,0,0,1850,1852,5,114,0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,
        1852,1853,1,0,0,0,1853,1861,5,115,0,0,1854,1858,10,7,0,0,1855,1859,
        3,234,117,0,1856,1857,5,10,0,0,1857,1859,3,236,118,0,1858,1855,1,
        0,0,0,1858,1856,1,0,0,0,1859,1861,1,0,0,0,1860,1791,1,0,0,0,1860,
        1794,1,0,0,0,1860,1797,1,0,0,0,1860,1819,1,0,0,0,1860,1822,1,0,0,
        0,1860,1825,1,0,0,0,1860,1834,1,0,0,0,1860,1840,1,0,0,0,1860,1845,
        1,0,0,0,1860,1848,1,0,0,0,1860,1854,1,0,0,0,1861,1864,1,0,0,0,1862,
        1860,1,0,0,0,1862,1863,1,0,0,0,1863,199,1,0,0,0,1864,1862,1,0,0,
        0,1865,1870,3,202,101,0,1866,1867,5,203,0,0,1867,1869,3,202,101,
        0,1868,1866,1,0,0,0,1869,1872,1,0,0,0,1870,1868,1,0,0,0,1870,1871,
        1,0,0,0,1871,201,1,0,0,0,1872,1870,1,0,0,0,1873,1876,3,204,102,0,
        1874,1876,3,198,99,0,1875,1873,1,0,0,0,1875,1874,1,0,0,0,1876,203,
        1,0,0,0,1877,1878,5,214,0,0,1878,1883,3,236,118,0,1879,1880,5,203,
        0,0,1880,1882,3,236,118,0,1881,1879,1,0,0,0,1882,1885,1,0,0,0,1883,
        1881,1,0,0,0,1883,1884,1,0,0,0,1884,1886,1,0,0,0,1885,1883,1,0,0,
        0,1886,1887,5,224,0,0,1887,1897,1,0,0,0,1888,1893,3,236,118,0,1889,
        1890,5,203,0,0,1890,1892,3,236,118,0,1891,1889,1,0,0,0,1892,1895,
        1,0,0,0,1893,1891,1,0,0,0,1893,1894,1,0,0,0,1894,1897,1,0,0,0,1895,
        1893,1,0,0,0,1896,1877,1,0,0,0,1896,1888,1,0,0,0,1897,1898,1,0,0,
        0,1898,1899,5,198,0,0,1899,1900,3,198,99,0,1900,205,1,0,0,0,1901,
        1902,3,214,107,0,1902,1903,5,206,0,0,1903,1905,1,0,0,0,1904,1901,
        1,0,0,0,1904,1905,1,0,0,0,1905,1906,1,0,0,0,1906,1907,3,208,104,
        0,1907,207,1,0,0,0,1908,1911,3,236,118,0,1909,1910,5,206,0,0,1910,
        1912,3,236,118,0,1911,1909,1,0,0,0,1911,1912,1,0,0,0,1912,209,1,
        0,0,0,1913,1914,6,105,-1,0,1914,1921,3,214,107,0,1915,1921,3,212,
        106,0,1916,1917,5,214,0,0,1917,1918,3,112,56,0,1918,1919,5,224,0,
        0,1919,1921,1,0,0,0,1920,1913,1,0,0,0,1920,1915,1,0,0,0,1920,1916,
        1,0,0,0,1921,1930,1,0,0,0,1922,1926,10,1,0,0,1923,1927,3,234,117,
        0,1924,1925,5,10,0,0,1925,1927,3,236,118,0,1926,1923,1,0,0,0,1926,
        1924,1,0,0,0,1927,1929,1,0,0,0,1928,1922,1,0,0,0,1929,1932,1,0,0,
        0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,211,1,0,0,0,1932,1930,
        1,0,0,0,1933,1934,3,236,118,0,1934,1936,5,214,0,0,1935,1937,3,216,
        108,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,
        1939,5,224,0,0,1939,213,1,0,0,0,1940,1941,3,220,110,0,1941,1942,
        5,206,0,0,1942,1944,1,0,0,0,1943,1940,1,0,0,0,1943,1944,1,0,0,0,
        1944,1945,1,0,0,0,1945,1946,3,236,118,0,1946,215,1,0,0,0,1947,1952,
        3,218,109,0,1948,1949,5,203,0,0,1949,1951,3,218,109,0,1950,1948,
        1,0,0,0,1951,1954,1,0,0,0,1952,1950,1,0,0,0,1952,1953,1,0,0,0,1953,
        217,1,0,0,0,1954,1952,1,0,0,0,1955,1959,3,208,104,0,1956,1959,3,
        212,106,0,1957,1959,3,226,113,0,1958,1955,1,0,0,0,1958,1956,1,0,
        0,0,1958,1957,1,0,0,0,1959,219,1,0,0,0,1960,1961,3,236,118,0,1961,
        221,1,0,0,0,1962,1971,5,193,0,0,1963,1964,5,206,0,0,1964,1971,7,
        23,0,0,1965,1966,5,195,0,0,1966,1968,5,206,0,0,1967,1969,7,23,0,
        0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1971,1,0,0,0,1970,1962,
        1,0,0,0,1970,1963,1,0,0,0,1970,1965,1,0,0,0,1971,223,1,0,0,0,1972,
        1974,7,24,0,0,1973,1972,1,0,0,0,1973,1974,1,0,0,0,1974,1981,1,0,
        0,0,1975,1982,3,222,111,0,1976,1982,5,194,0,0,1977,1982,5,195,0,
        0,1978,1982,5,196,0,0,1979,1982,5,81,0,0,1980,1982,5,112,0,0,1981,
        1975,1,0,0,0,1981,1976,1,0,0,0,1981,1977,1,0,0,0,1981,1978,1,0,0,
        0,1981,1979,1,0,0,0,1981,1980,1,0,0,0,1982,225,1,0,0,0,1983,1987,
        3,224,112,0,1984,1987,5,197,0,0,1985,1987,5,115,0,0,1986,1983,1,
        0,0,0,1986,1984,1,0,0,0,1986,1985,1,0,0,0,1987,227,1,0,0,0,1988,
        1989,7,25,0,0,1989,229,1,0,0,0,1990,1991,7,26,0,0,1991,231,1,0,0,
        0,1992,1993,7,27,0,0,1993,233,1,0,0,0,1994,1997,5,192,0,0,1995,1997,
        3,232,116,0,1996,1994,1,0,0,0,1996,1995,1,0,0,0,1997,235,1,0,0,0,
        1998,2002,5,192,0,0,1999,2002,3,228,114,0,2000,2002,3,230,115,0,
        2001,1998,1,0,0,0,2001,1999,1,0,0,0,2001,2000,1,0,0,0,2002,237,1,
        0,0,0,2003,2006,3,236,118,0,2004,2006,5,115,0,0,2005,2003,1,0,0,
        0,2005,2004,1,0,0,0,2006,239,1,0,0,0,2007,2008,5,197,0,0,2008,2009,
        5,208,0,0,2009,2010,3,224,112,0,2010,241,1,0,0,0,270,246,250,253,
        256,277,280,288,293,306,315,322,330,335,342,347,354,359,365,371,
        376,382,387,393,398,404,418,425,432,439,445,450,456,461,467,476,
        486,496,516,524,539,546,560,566,572,579,583,586,592,595,601,605,
        608,619,623,626,631,633,636,639,649,653,656,659,664,666,674,677,
        680,686,690,693,696,699,702,707,713,717,720,723,727,735,744,754,
        757,766,783,794,812,825,842,851,873,878,883,886,898,903,907,910,
        914,918,923,926,930,932,954,962,965,975,979,987,991,996,1000,1004,
        1008,1012,1014,1022,1026,1029,1037,1042,1047,1050,1060,1073,1078,
        1082,1090,1097,1104,1108,1114,1117,1120,1123,1137,1141,1145,1150,
        1153,1163,1171,1174,1178,1181,1185,1188,1191,1194,1197,1200,1204,
        1208,1211,1214,1217,1220,1223,1232,1238,1265,1287,1295,1298,1304,
        1312,1315,1321,1323,1327,1332,1335,1338,1342,1346,1349,1351,1354,
        1358,1362,1365,1367,1369,1372,1377,1388,1394,1399,1406,1411,1415,
        1419,1424,1431,1439,1442,1445,1464,1478,1494,1497,1506,1510,1515,
        1520,1523,1525,1547,1550,1561,1565,1568,1572,1576,1584,1588,1601,
        1613,1625,1633,1637,1644,1650,1658,1663,1672,1676,1707,1724,1736,
        1746,1749,1753,1756,1768,1785,1789,1806,1809,1813,1816,1827,1851,
        1858,1860,1862,1870,1875,1883,1893,1896,1904,1911,1920,1926,1930,
        1936,1943,1952,1958,1968,1970,1973,1981,1986,1996,2001,2005
    ]

class ClickHouseParser ( Parser ):

    grammarFileName = "ClickHouseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'false'", "'true'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'->'", "'*'", "'`'", "'\\'", "':'", "','", 
                     "'||'", "'-'", "'.'", "'=='", "'='", "'>='", "'>'", 
                     "'{'", "'['", "'<='", "'('", "'<'", "<INVALID>", "'%'", 
                     "'+'", "'?'", "'\"'", "'''", "'}'", "']'", "')'", "';'", 
                     "'/'", "'_'" ]

    symbolicNames = [ "<INVALID>", "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                      "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                      "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", 
                      "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
                      "CODEC", "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", 
                      "CREATE", "CROSS", "CUBE", "CURRENT", "DATABASE", 
                      "DATABASES", "DATE", "DAY", "DEDUPLICATE", "DEFAULT", 
                      "DELAY", "DELETE", "DESC", "DESCENDING", "DESCRIBE", 
                      "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", 
                      "DISTRIBUTED", "DROP", "ELSE", "END", "ENGINE", "EVENTS", 
                      "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", 
                      "FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT", 
                      "FREEZE", "FROM", "FULL", "FUNCTION", "GLOBAL", "GRANULARITY", 
                      "GROUP", "HAVING", "HIERARCHICAL", "HOUR", "ID", "IF", 
                      "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", "INNER", 
                      "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", 
                      "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING", 
                      "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", "LOCAL", 
                      "LOGS", "MATERIALIZE", "MATERIALIZED", "MAX", "MERGES", 
                      "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
                      "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", 
                      "ON", "OPTIMIZE", "OR", "ORDER", "OUTER", "OUTFILE", 
                      "OVER", "PARTITION", "POPULATE", "PRECEDING", "PREWHERE", 
                      "PRIMARY", "PROJECTION", "QUARTER", "RANGE", "RELOAD", 
                      "REMOVE", "RENAME", "REPLACE", "REPLICA", "REPLICATED", 
                      "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", 
                      "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
                      "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", 
                      "SYSTEM", "TABLE", "TABLES", "TEMPORARY", "TEST", 
                      "THEN", "TIES", "TIMEOUT", "TIMESTAMP", "TO", "TOP", 
                      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TTL", "TYPE", 
                      "UNBOUNDED", "UNION", "UPDATE", "USE", "USING", "UUID", 
                      "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
                      "WHERE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", "JSON_TRUE", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", 
                      "COMMA", "CONCAT", "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE", 
                      "GE", "GT", "LBRACE", "LBRACKET", "LE", "LPAREN", 
                      "LT", "NOT_EQ", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", 
                      "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE" ]

    RULE_queryStmt = 0
    RULE_query = 1
    RULE_ctes = 2
    RULE_namedQuery = 3
    RULE_columnAliases = 4
    RULE_alterStmt = 5
    RULE_alterTableClause = 6
    RULE_assignmentExprList = 7
    RULE_assignmentExpr = 8
    RULE_tableColumnPropertyType = 9
    RULE_partitionClause = 10
    RULE_attachStmt = 11
    RULE_checkStmt = 12
    RULE_createStmt = 13
    RULE_dictionarySchemaClause = 14
    RULE_dictionaryAttrDfnt = 15
    RULE_dictionaryEngineClause = 16
    RULE_dictionaryPrimaryKeyClause = 17
    RULE_dictionaryArgExpr = 18
    RULE_sourceClause = 19
    RULE_lifetimeClause = 20
    RULE_layoutClause = 21
    RULE_rangeClause = 22
    RULE_dictionarySettingsClause = 23
    RULE_clusterClause = 24
    RULE_uuidClause = 25
    RULE_destinationClause = 26
    RULE_subqueryClause = 27
    RULE_tableSchemaClause = 28
    RULE_engineClause = 29
    RULE_partitionByClause = 30
    RULE_primaryKeyClause = 31
    RULE_sampleByClause = 32
    RULE_ttlClause = 33
    RULE_engineExpr = 34
    RULE_tableElementExpr = 35
    RULE_tableColumnDfnt = 36
    RULE_tableColumnPropertyExpr = 37
    RULE_tableIndexDfnt = 38
    RULE_tableProjectionDfnt = 39
    RULE_codecExpr = 40
    RULE_codecArgExpr = 41
    RULE_ttlExpr = 42
    RULE_describeStmt = 43
    RULE_dropStmt = 44
    RULE_existsStmt = 45
    RULE_explainStmt = 46
    RULE_insertStmt = 47
    RULE_columnsClause = 48
    RULE_dataClause = 49
    RULE_assignmentValues = 50
    RULE_assignmentValue = 51
    RULE_killStmt = 52
    RULE_optimizeStmt = 53
    RULE_renameStmt = 54
    RULE_projectionSelectStmt = 55
    RULE_selectUnionStmt = 56
    RULE_selectStmtWithParens = 57
    RULE_selectStmt = 58
    RULE_withClause = 59
    RULE_topClause = 60
    RULE_fromClause = 61
    RULE_arrayJoinClause = 62
    RULE_windowClause = 63
    RULE_prewhereClause = 64
    RULE_whereClause = 65
    RULE_groupByClause = 66
    RULE_havingClause = 67
    RULE_orderByClause = 68
    RULE_projectionOrderByClause = 69
    RULE_limitByClause = 70
    RULE_limitClause = 71
    RULE_settingsClause = 72
    RULE_joinExpr = 73
    RULE_joinOp = 74
    RULE_joinOpCross = 75
    RULE_joinConstraintClause = 76
    RULE_sampleClause = 77
    RULE_limitExpr = 78
    RULE_orderExprList = 79
    RULE_orderExpr = 80
    RULE_ratioExpr = 81
    RULE_settingExprList = 82
    RULE_settingExpr = 83
    RULE_windowExpr = 84
    RULE_winPartitionByClause = 85
    RULE_winOrderByClause = 86
    RULE_winFrameClause = 87
    RULE_winFrameExtend = 88
    RULE_winFrameBound = 89
    RULE_setStmt = 90
    RULE_showStmt = 91
    RULE_systemStmt = 92
    RULE_truncateStmt = 93
    RULE_useStmt = 94
    RULE_watchStmt = 95
    RULE_columnTypeExpr = 96
    RULE_columnExprList = 97
    RULE_columnsExpr = 98
    RULE_columnExpr = 99
    RULE_columnArgList = 100
    RULE_columnArgExpr = 101
    RULE_columnLambdaExpr = 102
    RULE_columnIdentifier = 103
    RULE_nestedIdentifier = 104
    RULE_tableExpr = 105
    RULE_tableFunctionExpr = 106
    RULE_tableIdentifier = 107
    RULE_tableArgList = 108
    RULE_tableArgExpr = 109
    RULE_databaseIdentifier = 110
    RULE_floatingLiteral = 111
    RULE_numberLiteral = 112
    RULE_literal = 113
    RULE_interval = 114
    RULE_keyword = 115
    RULE_keywordForAlias = 116
    RULE_alias = 117
    RULE_identifier = 118
    RULE_identifierOrNull = 119
    RULE_enumValue = 120

    ruleNames =  [ "queryStmt", "query", "ctes", "namedQuery", "columnAliases", 
                   "alterStmt", "alterTableClause", "assignmentExprList", 
                   "assignmentExpr", "tableColumnPropertyType", "partitionClause", 
                   "attachStmt", "checkStmt", "createStmt", "dictionarySchemaClause", 
                   "dictionaryAttrDfnt", "dictionaryEngineClause", "dictionaryPrimaryKeyClause", 
                   "dictionaryArgExpr", "sourceClause", "lifetimeClause", 
                   "layoutClause", "rangeClause", "dictionarySettingsClause", 
                   "clusterClause", "uuidClause", "destinationClause", "subqueryClause", 
                   "tableSchemaClause", "engineClause", "partitionByClause", 
                   "primaryKeyClause", "sampleByClause", "ttlClause", "engineExpr", 
                   "tableElementExpr", "tableColumnDfnt", "tableColumnPropertyExpr", 
                   "tableIndexDfnt", "tableProjectionDfnt", "codecExpr", 
                   "codecArgExpr", "ttlExpr", "describeStmt", "dropStmt", 
                   "existsStmt", "explainStmt", "insertStmt", "columnsClause", 
                   "dataClause", "assignmentValues", "assignmentValue", 
                   "killStmt", "optimizeStmt", "renameStmt", "projectionSelectStmt", 
                   "selectUnionStmt", "selectStmtWithParens", "selectStmt", 
                   "withClause", "topClause", "fromClause", "arrayJoinClause", 
                   "windowClause", "prewhereClause", "whereClause", "groupByClause", 
                   "havingClause", "orderByClause", "projectionOrderByClause", 
                   "limitByClause", "limitClause", "settingsClause", "joinExpr", 
                   "joinOp", "joinOpCross", "joinConstraintClause", "sampleClause", 
                   "limitExpr", "orderExprList", "orderExpr", "ratioExpr", 
                   "settingExprList", "settingExpr", "windowExpr", "winPartitionByClause", 
                   "winOrderByClause", "winFrameClause", "winFrameExtend", 
                   "winFrameBound", "setStmt", "showStmt", "systemStmt", 
                   "truncateStmt", "useStmt", "watchStmt", "columnTypeExpr", 
                   "columnExprList", "columnsExpr", "columnExpr", "columnArgList", 
                   "columnArgExpr", "columnLambdaExpr", "columnIdentifier", 
                   "nestedIdentifier", "tableExpr", "tableFunctionExpr", 
                   "tableIdentifier", "tableArgList", "tableArgExpr", "databaseIdentifier", 
                   "floatingLiteral", "numberLiteral", "literal", "interval", 
                   "keyword", "keywordForAlias", "alias", "identifier", 
                   "identifierOrNull", "enumValue" ]

    EOF = Token.EOF
    ADD=1
    AFTER=2
    ALIAS=3
    ALL=4
    ALTER=5
    AND=6
    ANTI=7
    ANY=8
    ARRAY=9
    AS=10
    ASCENDING=11
    ASOF=12
    AST=13
    ASYNC=14
    ATTACH=15
    BETWEEN=16
    BOTH=17
    BY=18
    CASE=19
    CAST=20
    CHECK=21
    CLEAR=22
    CLUSTER=23
    CODEC=24
    COLLATE=25
    COLUMN=26
    COMMENT=27
    CONSTRAINT=28
    CREATE=29
    CROSS=30
    CUBE=31
    CURRENT=32
    DATABASE=33
    DATABASES=34
    DATE=35
    DAY=36
    DEDUPLICATE=37
    DEFAULT=38
    DELAY=39
    DELETE=40
    DESC=41
    DESCENDING=42
    DESCRIBE=43
    DETACH=44
    DICTIONARIES=45
    DICTIONARY=46
    DISK=47
    DISTINCT=48
    DISTRIBUTED=49
    DROP=50
    ELSE=51
    END=52
    ENGINE=53
    EVENTS=54
    EXISTS=55
    EXPLAIN=56
    EXPRESSION=57
    EXTRACT=58
    FETCHES=59
    FINAL=60
    FIRST=61
    FLUSH=62
    FOLLOWING=63
    FOR=64
    FORMAT=65
    FREEZE=66
    FROM=67
    FULL=68
    FUNCTION=69
    GLOBAL=70
    GRANULARITY=71
    GROUP=72
    HAVING=73
    HIERARCHICAL=74
    HOUR=75
    ID=76
    IF=77
    ILIKE=78
    IN=79
    INDEX=80
    INF=81
    INJECTIVE=82
    INNER=83
    INSERT=84
    INTERVAL=85
    INTO=86
    IS=87
    IS_OBJECT_ID=88
    JOIN=89
    KEY=90
    KILL=91
    LAST=92
    LAYOUT=93
    LEADING=94
    LEFT=95
    LIFETIME=96
    LIKE=97
    LIMIT=98
    LIVE=99
    LOCAL=100
    LOGS=101
    MATERIALIZE=102
    MATERIALIZED=103
    MAX=104
    MERGES=105
    MIN=106
    MINUTE=107
    MODIFY=108
    MONTH=109
    MOVE=110
    MUTATION=111
    NAN_SQL=112
    NO=113
    NOT=114
    NULL_SQL=115
    NULLS=116
    OFFSET=117
    ON=118
    OPTIMIZE=119
    OR=120
    ORDER=121
    OUTER=122
    OUTFILE=123
    OVER=124
    PARTITION=125
    POPULATE=126
    PRECEDING=127
    PREWHERE=128
    PRIMARY=129
    PROJECTION=130
    QUARTER=131
    RANGE=132
    RELOAD=133
    REMOVE=134
    RENAME=135
    REPLACE=136
    REPLICA=137
    REPLICATED=138
    RIGHT=139
    ROLLUP=140
    ROW=141
    ROWS=142
    SAMPLE=143
    SECOND=144
    SELECT=145
    SEMI=146
    SENDS=147
    SET=148
    SETTINGS=149
    SHOW=150
    SOURCE=151
    START=152
    STOP=153
    SUBSTRING=154
    SYNC=155
    SYNTAX=156
    SYSTEM=157
    TABLE=158
    TABLES=159
    TEMPORARY=160
    TEST=161
    THEN=162
    TIES=163
    TIMEOUT=164
    TIMESTAMP=165
    TO=166
    TOP=167
    TOTALS=168
    TRAILING=169
    TRIM=170
    TRUNCATE=171
    TTL=172
    TYPE=173
    UNBOUNDED=174
    UNION=175
    UPDATE=176
    USE=177
    USING=178
    UUID=179
    VALUES=180
    VIEW=181
    VOLUME=182
    WATCH=183
    WEEK=184
    WHEN=185
    WHERE=186
    WINDOW=187
    WITH=188
    YEAR=189
    JSON_FALSE=190
    JSON_TRUE=191
    IDENTIFIER=192
    FLOATING_LITERAL=193
    OCTAL_LITERAL=194
    DECIMAL_LITERAL=195
    HEXADECIMAL_LITERAL=196
    STRING_LITERAL=197
    ARROW=198
    ASTERISK=199
    BACKQUOTE=200
    BACKSLASH=201
    COLON=202
    COMMA=203
    CONCAT=204
    DASH=205
    DOT=206
    EQ_DOUBLE=207
    EQ_SINGLE=208
    GE=209
    GT=210
    LBRACE=211
    LBRACKET=212
    LE=213
    LPAREN=214
    LT=215
    NOT_EQ=216
    PERCENT=217
    PLUS=218
    QUERY=219
    QUOTE_DOUBLE=220
    QUOTE_SINGLE=221
    RBRACE=222
    RBRACKET=223
    RPAREN=224
    SEMICOLON=225
    SLASH=226
    UNDERSCORE=227
    MULTI_LINE_COMMENT=228
    SINGLE_LINE_COMMENT=229
    WHITESPACE=230

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class QueryStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(ClickHouseParser.QueryContext,0)


        def INTO(self):
            return self.getToken(ClickHouseParser.INTO, 0)

        def OUTFILE(self):
            return self.getToken(ClickHouseParser.OUTFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def FORMAT(self):
            return self.getToken(ClickHouseParser.FORMAT, 0)

        def identifierOrNull(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierOrNullContext,0)


        def SEMICOLON(self):
            return self.getToken(ClickHouseParser.SEMICOLON, 0)

        def insertStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.InsertStmtContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_queryStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryStmt" ):
                listener.enterQueryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryStmt" ):
                listener.exitQueryStmt(self)




    def queryStmt(self):

        localctx = ClickHouseParser.QueryStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_queryStmt)
        self._la = 0 # Token type
        try:
            self.state = 256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 15, 21, 29, 41, 43, 44, 50, 55, 56, 91, 119, 135, 136, 145, 148, 150, 157, 171, 177, 183, 188, 214]:
                self.enterOuterAlt(localctx, 1)
                self.state = 242
                self.query()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 243
                    self.match(ClickHouseParser.INTO)
                    self.state = 244
                    self.match(ClickHouseParser.OUTFILE)
                    self.state = 245
                    self.match(ClickHouseParser.STRING_LITERAL)


                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 248
                    self.match(ClickHouseParser.FORMAT)
                    self.state = 249
                    self.identifierOrNull()


                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 252
                    self.match(ClickHouseParser.SEMICOLON)


                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 255
                self.insertStmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.AlterStmtContext,0)


        def attachStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.AttachStmtContext,0)


        def checkStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.CheckStmtContext,0)


        def createStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.CreateStmtContext,0)


        def describeStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.DescribeStmtContext,0)


        def dropStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.DropStmtContext,0)


        def existsStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ExistsStmtContext,0)


        def explainStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ExplainStmtContext,0)


        def killStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.KillStmtContext,0)


        def optimizeStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.OptimizeStmtContext,0)


        def renameStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.RenameStmtContext,0)


        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def setStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SetStmtContext,0)


        def showStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ShowStmtContext,0)


        def systemStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SystemStmtContext,0)


        def truncateStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.TruncateStmtContext,0)


        def useStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.UseStmtContext,0)


        def watchStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.WatchStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectStmtContext,0)


        def ctes(self):
            return self.getTypedRuleContext(ClickHouseParser.CtesContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = ClickHouseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query)
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 258
                self.alterStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 259
                self.attachStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 260
                self.checkStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 261
                self.createStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 262
                self.describeStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 263
                self.dropStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 264
                self.existsStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 265
                self.explainStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 266
                self.killStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 267
                self.optimizeStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 268
                self.renameStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 269
                self.selectUnionStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 270
                self.setStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 271
                self.showStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 272
                self.systemStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 273
                self.truncateStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 274
                self.useStmt()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 275
                self.watchStmt()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 276
                    self.ctes()


                self.state = 279
                self.selectStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.NamedQueryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_ctes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtes" ):
                listener.enterCtes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtes" ):
                listener.exitCtes(self)




    def ctes(self):

        localctx = ClickHouseParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(ClickHouseParser.WITH)
            self.state = 283
            self.namedQuery()
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 284
                self.match(ClickHouseParser.COMMA)
                self.state = 285
                self.namedQuery()
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def query(self):
            return self.getTypedRuleContext(ClickHouseParser.QueryContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = ClickHouseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            localctx.name = self.identifier()
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 292
                self.columnAliases()


            self.state = 295
            self.match(ClickHouseParser.AS)
            self.state = 296
            self.match(ClickHouseParser.LPAREN)
            self.state = 297
            self.query()
            self.state = 298
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)




    def columnAliases(self):

        localctx = ClickHouseParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(ClickHouseParser.LPAREN)
            self.state = 301
            self.identifier()
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 302
                self.match(ClickHouseParser.COMMA)
                self.state = 303
                self.identifier()
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 309
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_alterStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterTableStmtContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(ClickHouseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def alterTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.AlterTableClauseContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.AlterTableClauseContext,i)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableStmt" ):
                listener.enterAlterTableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableStmt" ):
                listener.exitAlterTableStmt(self)



    def alterStmt(self):

        localctx = ClickHouseParser.AlterStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alterStmt)
        self._la = 0 # Token type
        try:
            localctx = ClickHouseParser.AlterTableStmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(ClickHouseParser.ALTER)
            self.state = 312
            self.match(ClickHouseParser.TABLE)
            self.state = 313
            self.tableIdentifier()
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 314
                self.clusterClause()


            self.state = 317
            self.alterTableClause()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 318
                self.match(ClickHouseParser.COMMA)
                self.state = 319
                self.alterTableClause()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_alterTableClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterTableClauseReplaceContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseReplace" ):
                listener.enterAlterTableClauseReplace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseReplace" ):
                listener.exitAlterTableClauseReplace(self)


    class AlterTableClauseModifyOrderByContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)
        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseModifyOrderBy" ):
                listener.enterAlterTableClauseModifyOrderBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseModifyOrderBy" ):
                listener.exitAlterTableClauseModifyOrderBy(self)


    class AlterTableClauseUpdateContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(ClickHouseParser.UPDATE, 0)
        def assignmentExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.AssignmentExprListContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseUpdate" ):
                listener.enterAlterTableClauseUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseUpdate" ):
                listener.exitAlterTableClauseUpdate(self)


    class AlterTableClauseClearProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseClearProjection" ):
                listener.enterAlterTableClauseClearProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseClearProjection" ):
                listener.exitAlterTableClauseClearProjection(self)


    class AlterTableClauseModifyRemoveContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def REMOVE(self):
            return self.getToken(ClickHouseParser.REMOVE, 0)
        def tableColumnPropertyType(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnPropertyTypeContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseModifyRemove" ):
                listener.enterAlterTableClauseModifyRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseModifyRemove" ):
                listener.exitAlterTableClauseModifyRemove(self)


    class AlterTableClauseDeleteContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(ClickHouseParser.DELETE, 0)
        def WHERE(self):
            return self.getToken(ClickHouseParser.WHERE, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseDelete" ):
                listener.enterAlterTableClauseDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseDelete" ):
                listener.exitAlterTableClauseDelete(self)


    class AlterTableClauseCommentContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseComment" ):
                listener.enterAlterTableClauseComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseComment" ):
                listener.exitAlterTableClauseComment(self)


    class AlterTableClauseDropColumnContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseDropColumn" ):
                listener.enterAlterTableClauseDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseDropColumn" ):
                listener.exitAlterTableClauseDropColumn(self)


    class AlterTableClauseDetachContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseDetach" ):
                listener.enterAlterTableClauseDetach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseDetach" ):
                listener.exitAlterTableClauseDetach(self)


    class AlterTableClauseAddIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(ClickHouseParser.ADD, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def tableIndexDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIndexDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseAddIndex" ):
                listener.enterAlterTableClauseAddIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseAddIndex" ):
                listener.exitAlterTableClauseAddIndex(self)


    class AlterTableClauseDropPartitionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseDropPartition" ):
                listener.enterAlterTableClauseDropPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseDropPartition" ):
                listener.exitAlterTableClauseDropPartition(self)


    class AlterTableClauseMaterializeIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATERIALIZE(self):
            return self.getToken(ClickHouseParser.MATERIALIZE, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseMaterializeIndex" ):
                listener.enterAlterTableClauseMaterializeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseMaterializeIndex" ):
                listener.exitAlterTableClauseMaterializeIndex(self)


    class AlterTableClauseMaterializeProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATERIALIZE(self):
            return self.getToken(ClickHouseParser.MATERIALIZE, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseMaterializeProjection" ):
                listener.enterAlterTableClauseMaterializeProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseMaterializeProjection" ):
                listener.exitAlterTableClauseMaterializeProjection(self)


    class AlterTableClauseMovePartitionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MOVE(self):
            return self.getToken(ClickHouseParser.MOVE, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)
        def DISK(self):
            return self.getToken(ClickHouseParser.DISK, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def VOLUME(self):
            return self.getToken(ClickHouseParser.VOLUME, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseMovePartition" ):
                listener.enterAlterTableClauseMovePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseMovePartition" ):
                listener.exitAlterTableClauseMovePartition(self)


    class AlterTableClauseRenameContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(ClickHouseParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.NestedIdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,i)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseRename" ):
                listener.enterAlterTableClauseRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseRename" ):
                listener.exitAlterTableClauseRename(self)


    class AlterTableClauseFreezePartitionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FREEZE(self):
            return self.getToken(ClickHouseParser.FREEZE, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseFreezePartition" ):
                listener.enterAlterTableClauseFreezePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseFreezePartition" ):
                listener.exitAlterTableClauseFreezePartition(self)


    class AlterTableClauseClearColumnContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseClearColumn" ):
                listener.enterAlterTableClauseClearColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseClearColumn" ):
                listener.exitAlterTableClauseClearColumn(self)


    class AlterTableClauseModifyContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def tableColumnDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseModify" ):
                listener.enterAlterTableClauseModify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseModify" ):
                listener.exitAlterTableClauseModify(self)


    class AlterTableClauseClearIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseClearIndex" ):
                listener.enterAlterTableClauseClearIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseClearIndex" ):
                listener.exitAlterTableClauseClearIndex(self)


    class AlterTableClauseRemoveTTLContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(ClickHouseParser.REMOVE, 0)
        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseRemoveTTL" ):
                listener.enterAlterTableClauseRemoveTTL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseRemoveTTL" ):
                listener.exitAlterTableClauseRemoveTTL(self)


    class AlterTableClauseModifyCodecContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def codecExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.CodecExprContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseModifyCodec" ):
                listener.enterAlterTableClauseModifyCodec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseModifyCodec" ):
                listener.exitAlterTableClauseModifyCodec(self)


    class AlterTableClauseAttachContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseAttach" ):
                listener.enterAlterTableClauseAttach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseAttach" ):
                listener.exitAlterTableClauseAttach(self)


    class AlterTableClauseDropProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseDropProjection" ):
                listener.enterAlterTableClauseDropProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseDropProjection" ):
                listener.exitAlterTableClauseDropProjection(self)


    class AlterTableClauseDropIndexContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseDropIndex" ):
                listener.enterAlterTableClauseDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseDropIndex" ):
                listener.exitAlterTableClauseDropIndex(self)


    class AlterTableClauseModifyCommentContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseModifyComment" ):
                listener.enterAlterTableClauseModifyComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseModifyComment" ):
                listener.exitAlterTableClauseModifyComment(self)


    class AlterTableClauseModifyTTLContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)
        def ttlClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TtlClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseModifyTTL" ):
                listener.enterAlterTableClauseModifyTTL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseModifyTTL" ):
                listener.exitAlterTableClauseModifyTTL(self)


    class AlterTableClauseAddProjectionContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(ClickHouseParser.ADD, 0)
        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def tableProjectionDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableProjectionDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseAddProjection" ):
                listener.enterAlterTableClauseAddProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseAddProjection" ):
                listener.exitAlterTableClauseAddProjection(self)


    class AlterTableClauseAddColumnContext(AlterTableClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AlterTableClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(ClickHouseParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)
        def tableColumnDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnDfntContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)
        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableClauseAddColumn" ):
                listener.enterAlterTableClauseAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableClauseAddColumn" ):
                listener.exitAlterTableClauseAddColumn(self)



    def alterTableClause(self):

        localctx = ClickHouseParser.AlterTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alterTableClause)
        self._la = 0 # Token type
        try:
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.AlterTableClauseAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.match(ClickHouseParser.ADD)
                self.state = 326
                self.match(ClickHouseParser.COLUMN)
                self.state = 330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 327
                    self.match(ClickHouseParser.IF)
                    self.state = 328
                    self.match(ClickHouseParser.NOT)
                    self.state = 329
                    self.match(ClickHouseParser.EXISTS)


                self.state = 332
                self.tableColumnDfnt()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 333
                    self.match(ClickHouseParser.AFTER)
                    self.state = 334
                    self.nestedIdentifier()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.AlterTableClauseAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.match(ClickHouseParser.ADD)
                self.state = 338
                self.match(ClickHouseParser.INDEX)
                self.state = 342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 339
                    self.match(ClickHouseParser.IF)
                    self.state = 340
                    self.match(ClickHouseParser.NOT)
                    self.state = 341
                    self.match(ClickHouseParser.EXISTS)


                self.state = 344
                self.tableIndexDfnt()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 345
                    self.match(ClickHouseParser.AFTER)
                    self.state = 346
                    self.nestedIdentifier()


                pass

            elif la_ == 3:
                localctx = ClickHouseParser.AlterTableClauseAddProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 349
                self.match(ClickHouseParser.ADD)
                self.state = 350
                self.match(ClickHouseParser.PROJECTION)
                self.state = 354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 351
                    self.match(ClickHouseParser.IF)
                    self.state = 352
                    self.match(ClickHouseParser.NOT)
                    self.state = 353
                    self.match(ClickHouseParser.EXISTS)


                self.state = 356
                self.tableProjectionDfnt()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2:
                    self.state = 357
                    self.match(ClickHouseParser.AFTER)
                    self.state = 358
                    self.nestedIdentifier()


                pass

            elif la_ == 4:
                localctx = ClickHouseParser.AlterTableClauseAttachContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 361
                self.match(ClickHouseParser.ATTACH)
                self.state = 362
                self.partitionClause()
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 363
                    self.match(ClickHouseParser.FROM)
                    self.state = 364
                    self.tableIdentifier()


                pass

            elif la_ == 5:
                localctx = ClickHouseParser.AlterTableClauseClearColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 367
                self.match(ClickHouseParser.CLEAR)
                self.state = 368
                self.match(ClickHouseParser.COLUMN)
                self.state = 371
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 369
                    self.match(ClickHouseParser.IF)
                    self.state = 370
                    self.match(ClickHouseParser.EXISTS)


                self.state = 373
                self.nestedIdentifier()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 374
                    self.match(ClickHouseParser.IN)
                    self.state = 375
                    self.partitionClause()


                pass

            elif la_ == 6:
                localctx = ClickHouseParser.AlterTableClauseClearIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 378
                self.match(ClickHouseParser.CLEAR)
                self.state = 379
                self.match(ClickHouseParser.INDEX)
                self.state = 382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 380
                    self.match(ClickHouseParser.IF)
                    self.state = 381
                    self.match(ClickHouseParser.EXISTS)


                self.state = 384
                self.nestedIdentifier()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 385
                    self.match(ClickHouseParser.IN)
                    self.state = 386
                    self.partitionClause()


                pass

            elif la_ == 7:
                localctx = ClickHouseParser.AlterTableClauseClearProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 389
                self.match(ClickHouseParser.CLEAR)
                self.state = 390
                self.match(ClickHouseParser.PROJECTION)
                self.state = 393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 391
                    self.match(ClickHouseParser.IF)
                    self.state = 392
                    self.match(ClickHouseParser.EXISTS)


                self.state = 395
                self.nestedIdentifier()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 396
                    self.match(ClickHouseParser.IN)
                    self.state = 397
                    self.partitionClause()


                pass

            elif la_ == 8:
                localctx = ClickHouseParser.AlterTableClauseCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 400
                self.match(ClickHouseParser.COMMENT)
                self.state = 401
                self.match(ClickHouseParser.COLUMN)
                self.state = 404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 402
                    self.match(ClickHouseParser.IF)
                    self.state = 403
                    self.match(ClickHouseParser.EXISTS)


                self.state = 406
                self.nestedIdentifier()
                self.state = 407
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 9:
                localctx = ClickHouseParser.AlterTableClauseDeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 409
                self.match(ClickHouseParser.DELETE)
                self.state = 410
                self.match(ClickHouseParser.WHERE)
                self.state = 411
                self.columnExpr(0)
                pass

            elif la_ == 10:
                localctx = ClickHouseParser.AlterTableClauseDetachContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 412
                self.match(ClickHouseParser.DETACH)
                self.state = 413
                self.partitionClause()
                pass

            elif la_ == 11:
                localctx = ClickHouseParser.AlterTableClauseDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 414
                self.match(ClickHouseParser.DROP)
                self.state = 415
                self.match(ClickHouseParser.COLUMN)
                self.state = 418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 416
                    self.match(ClickHouseParser.IF)
                    self.state = 417
                    self.match(ClickHouseParser.EXISTS)


                self.state = 420
                self.nestedIdentifier()
                pass

            elif la_ == 12:
                localctx = ClickHouseParser.AlterTableClauseDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 421
                self.match(ClickHouseParser.DROP)
                self.state = 422
                self.match(ClickHouseParser.INDEX)
                self.state = 425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 423
                    self.match(ClickHouseParser.IF)
                    self.state = 424
                    self.match(ClickHouseParser.EXISTS)


                self.state = 427
                self.nestedIdentifier()
                pass

            elif la_ == 13:
                localctx = ClickHouseParser.AlterTableClauseDropProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 428
                self.match(ClickHouseParser.DROP)
                self.state = 429
                self.match(ClickHouseParser.PROJECTION)
                self.state = 432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 430
                    self.match(ClickHouseParser.IF)
                    self.state = 431
                    self.match(ClickHouseParser.EXISTS)


                self.state = 434
                self.nestedIdentifier()
                pass

            elif la_ == 14:
                localctx = ClickHouseParser.AlterTableClauseDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 435
                self.match(ClickHouseParser.DROP)
                self.state = 436
                self.partitionClause()
                pass

            elif la_ == 15:
                localctx = ClickHouseParser.AlterTableClauseFreezePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 437
                self.match(ClickHouseParser.FREEZE)
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 438
                    self.partitionClause()


                pass

            elif la_ == 16:
                localctx = ClickHouseParser.AlterTableClauseMaterializeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 441
                self.match(ClickHouseParser.MATERIALIZE)
                self.state = 442
                self.match(ClickHouseParser.INDEX)
                self.state = 445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 443
                    self.match(ClickHouseParser.IF)
                    self.state = 444
                    self.match(ClickHouseParser.EXISTS)


                self.state = 447
                self.nestedIdentifier()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 448
                    self.match(ClickHouseParser.IN)
                    self.state = 449
                    self.partitionClause()


                pass

            elif la_ == 17:
                localctx = ClickHouseParser.AlterTableClauseMaterializeProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 452
                self.match(ClickHouseParser.MATERIALIZE)
                self.state = 453
                self.match(ClickHouseParser.PROJECTION)
                self.state = 456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 454
                    self.match(ClickHouseParser.IF)
                    self.state = 455
                    self.match(ClickHouseParser.EXISTS)


                self.state = 458
                self.nestedIdentifier()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 459
                    self.match(ClickHouseParser.IN)
                    self.state = 460
                    self.partitionClause()


                pass

            elif la_ == 18:
                localctx = ClickHouseParser.AlterTableClauseModifyCodecContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 463
                self.match(ClickHouseParser.MODIFY)
                self.state = 464
                self.match(ClickHouseParser.COLUMN)
                self.state = 467
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 465
                    self.match(ClickHouseParser.IF)
                    self.state = 466
                    self.match(ClickHouseParser.EXISTS)


                self.state = 469
                self.nestedIdentifier()
                self.state = 470
                self.codecExpr()
                pass

            elif la_ == 19:
                localctx = ClickHouseParser.AlterTableClauseModifyCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 472
                self.match(ClickHouseParser.MODIFY)
                self.state = 473
                self.match(ClickHouseParser.COLUMN)
                self.state = 476
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 474
                    self.match(ClickHouseParser.IF)
                    self.state = 475
                    self.match(ClickHouseParser.EXISTS)


                self.state = 478
                self.nestedIdentifier()
                self.state = 479
                self.match(ClickHouseParser.COMMENT)
                self.state = 480
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 20:
                localctx = ClickHouseParser.AlterTableClauseModifyRemoveContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 482
                self.match(ClickHouseParser.MODIFY)
                self.state = 483
                self.match(ClickHouseParser.COLUMN)
                self.state = 486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 484
                    self.match(ClickHouseParser.IF)
                    self.state = 485
                    self.match(ClickHouseParser.EXISTS)


                self.state = 488
                self.nestedIdentifier()
                self.state = 489
                self.match(ClickHouseParser.REMOVE)
                self.state = 490
                self.tableColumnPropertyType()
                pass

            elif la_ == 21:
                localctx = ClickHouseParser.AlterTableClauseModifyContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 492
                self.match(ClickHouseParser.MODIFY)
                self.state = 493
                self.match(ClickHouseParser.COLUMN)
                self.state = 496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 494
                    self.match(ClickHouseParser.IF)
                    self.state = 495
                    self.match(ClickHouseParser.EXISTS)


                self.state = 498
                self.tableColumnDfnt()
                pass

            elif la_ == 22:
                localctx = ClickHouseParser.AlterTableClauseModifyOrderByContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 499
                self.match(ClickHouseParser.MODIFY)
                self.state = 500
                self.match(ClickHouseParser.ORDER)
                self.state = 501
                self.match(ClickHouseParser.BY)
                self.state = 502
                self.columnExpr(0)
                pass

            elif la_ == 23:
                localctx = ClickHouseParser.AlterTableClauseModifyTTLContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 503
                self.match(ClickHouseParser.MODIFY)
                self.state = 504
                self.ttlClause()
                pass

            elif la_ == 24:
                localctx = ClickHouseParser.AlterTableClauseMovePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 505
                self.match(ClickHouseParser.MOVE)
                self.state = 506
                self.partitionClause()
                self.state = 516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.match(ClickHouseParser.TO)
                    self.state = 508
                    self.match(ClickHouseParser.DISK)
                    self.state = 509
                    self.match(ClickHouseParser.STRING_LITERAL)
                    pass

                elif la_ == 2:
                    self.state = 510
                    self.match(ClickHouseParser.TO)
                    self.state = 511
                    self.match(ClickHouseParser.VOLUME)
                    self.state = 512
                    self.match(ClickHouseParser.STRING_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 513
                    self.match(ClickHouseParser.TO)
                    self.state = 514
                    self.match(ClickHouseParser.TABLE)
                    self.state = 515
                    self.tableIdentifier()
                    pass


                pass

            elif la_ == 25:
                localctx = ClickHouseParser.AlterTableClauseRemoveTTLContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 518
                self.match(ClickHouseParser.REMOVE)
                self.state = 519
                self.match(ClickHouseParser.TTL)
                pass

            elif la_ == 26:
                localctx = ClickHouseParser.AlterTableClauseRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 520
                self.match(ClickHouseParser.RENAME)
                self.state = 521
                self.match(ClickHouseParser.COLUMN)
                self.state = 524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 522
                    self.match(ClickHouseParser.IF)
                    self.state = 523
                    self.match(ClickHouseParser.EXISTS)


                self.state = 526
                self.nestedIdentifier()
                self.state = 527
                self.match(ClickHouseParser.TO)
                self.state = 528
                self.nestedIdentifier()
                pass

            elif la_ == 27:
                localctx = ClickHouseParser.AlterTableClauseReplaceContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 530
                self.match(ClickHouseParser.REPLACE)
                self.state = 531
                self.partitionClause()
                self.state = 532
                self.match(ClickHouseParser.FROM)
                self.state = 533
                self.tableIdentifier()
                pass

            elif la_ == 28:
                localctx = ClickHouseParser.AlterTableClauseUpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 535
                self.match(ClickHouseParser.UPDATE)
                self.state = 536
                self.assignmentExprList()
                self.state = 537
                self.whereClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.AssignmentExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.AssignmentExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_assignmentExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExprList" ):
                listener.enterAssignmentExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExprList" ):
                listener.exitAssignmentExprList(self)




    def assignmentExprList(self):

        localctx = ClickHouseParser.AssignmentExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_assignmentExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.assignmentExpr()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 542
                self.match(ClickHouseParser.COMMA)
                self.state = 543
                self.assignmentExpr()
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_assignmentExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpr" ):
                listener.enterAssignmentExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpr" ):
                listener.exitAssignmentExpr(self)




    def assignmentExpr(self):

        localctx = ClickHouseParser.AssignmentExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_assignmentExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.nestedIdentifier()
            self.state = 550
            self.match(ClickHouseParser.EQ_SINGLE)
            self.state = 551
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableColumnPropertyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(ClickHouseParser.ALIAS, 0)

        def CODEC(self):
            return self.getToken(ClickHouseParser.CODEC, 0)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)

        def DEFAULT(self):
            return self.getToken(ClickHouseParser.DEFAULT, 0)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableColumnPropertyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableColumnPropertyType" ):
                listener.enterTableColumnPropertyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableColumnPropertyType" ):
                listener.exitTableColumnPropertyType(self)




    def tableColumnPropertyType(self):

        localctx = ClickHouseParser.TableColumnPropertyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tableColumnPropertyType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 275028901896) != 0) or _la==103 or _la==172):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def ID(self):
            return self.getToken(ClickHouseParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_partitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionClause" ):
                listener.enterPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionClause" ):
                listener.exitPartitionClause(self)




    def partitionClause(self):

        localctx = ClickHouseParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_partitionClause)
        try:
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self.match(ClickHouseParser.PARTITION)
                self.state = 556
                self.columnExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 557
                self.match(ClickHouseParser.PARTITION)
                self.state = 558
                self.match(ClickHouseParser.ID)
                self.state = 559
                self.match(ClickHouseParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttachStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_attachStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AttachDictionaryStmtContext(AttachStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.AttachStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttachDictionaryStmt" ):
                listener.enterAttachDictionaryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttachDictionaryStmt" ):
                listener.exitAttachDictionaryStmt(self)



    def attachStmt(self):

        localctx = ClickHouseParser.AttachStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attachStmt)
        self._la = 0 # Token type
        try:
            localctx = ClickHouseParser.AttachDictionaryStmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(ClickHouseParser.ATTACH)
            self.state = 563
            self.match(ClickHouseParser.DICTIONARY)
            self.state = 564
            self.tableIdentifier()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 565
                self.clusterClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(ClickHouseParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_checkStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckStmt" ):
                listener.enterCheckStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckStmt" ):
                listener.exitCheckStmt(self)




    def checkStmt(self):

        localctx = ClickHouseParser.CheckStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_checkStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(ClickHouseParser.CHECK)
            self.state = 569
            self.match(ClickHouseParser.TABLE)
            self.state = 570
            self.tableIdentifier()
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 571
                self.partitionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_createStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateViewStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateViewStmt" ):
                listener.enterCreateViewStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateViewStmt" ):
                listener.exitCreateViewStmt(self)


    class CreateDictionaryStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def dictionarySchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DictionarySchemaClauseContext,0)

        def dictionaryEngineClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DictionaryEngineClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDictionaryStmt" ):
                listener.enterCreateDictionaryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDictionaryStmt" ):
                listener.exitCreateDictionaryStmt(self)


    class CreateDatabaseStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def engineExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseStmt" ):
                listener.enterCreateDatabaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseStmt" ):
                listener.exitCreateDatabaseStmt(self)


    class CreateLiveViewStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIVE(self):
            return self.getToken(ClickHouseParser.LIVE, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)
        def TIMEOUT(self):
            return self.getToken(ClickHouseParser.TIMEOUT, 0)
        def destinationClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DestinationClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLiveViewStmt" ):
                listener.enterCreateLiveViewStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLiveViewStmt" ):
                listener.exitCreateLiveViewStmt(self)


    class CreateMaterializedViewStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def destinationClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DestinationClauseContext,0)

        def engineClause(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineClauseContext,0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)

        def POPULATE(self):
            return self.getToken(ClickHouseParser.POPULATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedViewStmt" ):
                listener.enterCreateMaterializedViewStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedViewStmt" ):
                listener.exitCreateMaterializedViewStmt(self)


    class CreateTableStmtContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def uuidClause(self):
            return self.getTypedRuleContext(ClickHouseParser.UuidClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def tableSchemaClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TableSchemaClauseContext,0)

        def engineClause(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineClauseContext,0)

        def subqueryClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SubqueryClauseContext,0)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableStmt" ):
                listener.enterCreateTableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableStmt" ):
                listener.exitCreateTableStmt(self)



    def createStmt(self):

        localctx = ClickHouseParser.CreateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createStmt)
        self._la = 0 # Token type
        try:
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.CreateDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                _la = self._input.LA(1)
                if not(_la==15 or _la==29):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 575
                self.match(ClickHouseParser.DATABASE)
                self.state = 579
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 576
                    self.match(ClickHouseParser.IF)
                    self.state = 577
                    self.match(ClickHouseParser.NOT)
                    self.state = 578
                    self.match(ClickHouseParser.EXISTS)


                self.state = 581
                self.databaseIdentifier()
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 582
                    self.clusterClause()


                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 585
                    self.engineExpr()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.CreateDictionaryStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 588
                    self.match(ClickHouseParser.ATTACH)
                    pass
                elif token in [29]:
                    self.state = 589
                    self.match(ClickHouseParser.CREATE)
                    self.state = 592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==120:
                        self.state = 590
                        self.match(ClickHouseParser.OR)
                        self.state = 591
                        self.match(ClickHouseParser.REPLACE)


                    pass
                elif token in [136]:
                    self.state = 594
                    self.match(ClickHouseParser.REPLACE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 597
                self.match(ClickHouseParser.DICTIONARY)
                self.state = 601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 598
                    self.match(ClickHouseParser.IF)
                    self.state = 599
                    self.match(ClickHouseParser.NOT)
                    self.state = 600
                    self.match(ClickHouseParser.EXISTS)


                self.state = 603
                self.tableIdentifier()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 604
                    self.uuidClause()


                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 607
                    self.clusterClause()


                self.state = 610
                self.dictionarySchemaClause()
                self.state = 611
                self.dictionaryEngineClause()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.CreateLiveViewStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 613
                _la = self._input.LA(1)
                if not(_la==15 or _la==29):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 614
                self.match(ClickHouseParser.LIVE)
                self.state = 615
                self.match(ClickHouseParser.VIEW)
                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 616
                    self.match(ClickHouseParser.IF)
                    self.state = 617
                    self.match(ClickHouseParser.NOT)
                    self.state = 618
                    self.match(ClickHouseParser.EXISTS)


                self.state = 621
                self.tableIdentifier()
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 622
                    self.uuidClause()


                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 625
                    self.clusterClause()


                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 628
                    self.match(ClickHouseParser.WITH)
                    self.state = 629
                    self.match(ClickHouseParser.TIMEOUT)
                    self.state = 631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==195:
                        self.state = 630
                        self.match(ClickHouseParser.DECIMAL_LITERAL)




                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 635
                    self.destinationClause()


                self.state = 639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self.tableSchemaClause()


                self.state = 641
                self.subqueryClause()
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.CreateMaterializedViewStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 643
                _la = self._input.LA(1)
                if not(_la==15 or _la==29):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 644
                self.match(ClickHouseParser.MATERIALIZED)
                self.state = 645
                self.match(ClickHouseParser.VIEW)
                self.state = 649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 646
                    self.match(ClickHouseParser.IF)
                    self.state = 647
                    self.match(ClickHouseParser.NOT)
                    self.state = 648
                    self.match(ClickHouseParser.EXISTS)


                self.state = 651
                self.tableIdentifier()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 652
                    self.uuidClause()


                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 655
                    self.clusterClause()


                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==214:
                    self.state = 658
                    self.tableSchemaClause()


                self.state = 666
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [166]:
                    self.state = 661
                    self.destinationClause()
                    pass
                elif token in [53]:
                    self.state = 662
                    self.engineClause()
                    self.state = 664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==126:
                        self.state = 663
                        self.match(ClickHouseParser.POPULATE)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 668
                self.subqueryClause()
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.CreateTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 677
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 670
                    self.match(ClickHouseParser.ATTACH)
                    pass
                elif token in [29]:
                    self.state = 671
                    self.match(ClickHouseParser.CREATE)
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==120:
                        self.state = 672
                        self.match(ClickHouseParser.OR)
                        self.state = 673
                        self.match(ClickHouseParser.REPLACE)


                    pass
                elif token in [136]:
                    self.state = 676
                    self.match(ClickHouseParser.REPLACE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==160:
                    self.state = 679
                    self.match(ClickHouseParser.TEMPORARY)


                self.state = 682
                self.match(ClickHouseParser.TABLE)
                self.state = 686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 683
                    self.match(ClickHouseParser.IF)
                    self.state = 684
                    self.match(ClickHouseParser.NOT)
                    self.state = 685
                    self.match(ClickHouseParser.EXISTS)


                self.state = 688
                self.tableIdentifier()
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 689
                    self.uuidClause()


                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 692
                    self.clusterClause()


                self.state = 696
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 695
                    self.tableSchemaClause()


                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 698
                    self.engineClause()


                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 701
                    self.subqueryClause()


                pass

            elif la_ == 6:
                localctx = ClickHouseParser.CreateViewStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 704
                _la = self._input.LA(1)
                if not(_la==15 or _la==29):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 705
                    self.match(ClickHouseParser.OR)
                    self.state = 706
                    self.match(ClickHouseParser.REPLACE)


                self.state = 709
                self.match(ClickHouseParser.VIEW)
                self.state = 713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 710
                    self.match(ClickHouseParser.IF)
                    self.state = 711
                    self.match(ClickHouseParser.NOT)
                    self.state = 712
                    self.match(ClickHouseParser.EXISTS)


                self.state = 715
                self.tableIdentifier()
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 716
                    self.uuidClause()


                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 719
                    self.clusterClause()


                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 722
                    self.tableSchemaClause()


                self.state = 725
                self.subqueryClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionarySchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def dictionaryAttrDfnt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.DictionaryAttrDfntContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.DictionaryAttrDfntContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionarySchemaClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionarySchemaClause" ):
                listener.enterDictionarySchemaClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionarySchemaClause" ):
                listener.exitDictionarySchemaClause(self)




    def dictionarySchemaClause(self):

        localctx = ClickHouseParser.DictionarySchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_dictionarySchemaClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(ClickHouseParser.LPAREN)
            self.state = 730
            self.dictionaryAttrDfnt()
            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 731
                self.match(ClickHouseParser.COMMA)
                self.state = 732
                self.dictionaryAttrDfnt()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 738
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryAttrDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryAttrDfnt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryAttrDfnt" ):
                listener.enterDictionaryAttrDfnt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryAttrDfnt" ):
                listener.exitDictionaryAttrDfnt(self)




    def dictionaryAttrDfnt(self):

        localctx = ClickHouseParser.DictionaryAttrDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_dictionaryAttrDfnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.identifier()
            self.state = 741
            self.columnTypeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryEngineClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dictionaryPrimaryKeyClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DictionaryPrimaryKeyClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryEngineClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryEngineClause" ):
                listener.enterDictionaryEngineClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryEngineClause" ):
                listener.exitDictionaryEngineClause(self)




    def dictionaryEngineClause(self):

        localctx = ClickHouseParser.DictionaryEngineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dictionaryEngineClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 743
                self.dictionaryPrimaryKeyClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryPrimaryKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(ClickHouseParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryPrimaryKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryPrimaryKeyClause" ):
                listener.enterDictionaryPrimaryKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryPrimaryKeyClause" ):
                listener.exitDictionaryPrimaryKeyClause(self)




    def dictionaryPrimaryKeyClause(self):

        localctx = ClickHouseParser.DictionaryPrimaryKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dictionaryPrimaryKeyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(ClickHouseParser.PRIMARY)
            self.state = 747
            self.match(ClickHouseParser.KEY)
            self.state = 748
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionaryArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionaryArgExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionaryArgExpr" ):
                listener.enterDictionaryArgExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionaryArgExpr" ):
                listener.exitDictionaryArgExpr(self)




    def dictionaryArgExpr(self):

        localctx = ClickHouseParser.DictionaryArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dictionaryArgExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.identifier()
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192]:
                self.state = 751
                self.identifier()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==214:
                    self.state = 752
                    self.match(ClickHouseParser.LPAREN)
                    self.state = 753
                    self.match(ClickHouseParser.RPAREN)


                pass
            elif token in [81, 112, 115, 193, 194, 195, 196, 197, 205, 206, 218]:
                self.state = 756
                self.literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SOURCE(self):
            return self.getToken(ClickHouseParser.SOURCE, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)

        def dictionaryArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.DictionaryArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.DictionaryArgExprContext,i)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_sourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceClause" ):
                listener.enterSourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceClause" ):
                listener.exitSourceClause(self)




    def sourceClause(self):

        localctx = ClickHouseParser.SourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_sourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(ClickHouseParser.SOURCE)
            self.state = 760
            self.match(ClickHouseParser.LPAREN)
            self.state = 761
            self.identifier()
            self.state = 762
            self.match(ClickHouseParser.LPAREN)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4611686018427387903) != 0):
                self.state = 763
                self.dictionaryArgExpr()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.match(ClickHouseParser.RPAREN)
            self.state = 770
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LifetimeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIFETIME(self):
            return self.getToken(ClickHouseParser.LIFETIME, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.DECIMAL_LITERAL)
            else:
                return self.getToken(ClickHouseParser.DECIMAL_LITERAL, i)

        def MIN(self):
            return self.getToken(ClickHouseParser.MIN, 0)

        def MAX(self):
            return self.getToken(ClickHouseParser.MAX, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_lifetimeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLifetimeClause" ):
                listener.enterLifetimeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLifetimeClause" ):
                listener.exitLifetimeClause(self)




    def lifetimeClause(self):

        localctx = ClickHouseParser.LifetimeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_lifetimeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(ClickHouseParser.LIFETIME)
            self.state = 773
            self.match(ClickHouseParser.LPAREN)
            self.state = 783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.state = 774
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass
            elif token in [106]:
                self.state = 775
                self.match(ClickHouseParser.MIN)
                self.state = 776
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                self.state = 777
                self.match(ClickHouseParser.MAX)
                self.state = 778
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass
            elif token in [104]:
                self.state = 779
                self.match(ClickHouseParser.MAX)
                self.state = 780
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                self.state = 781
                self.match(ClickHouseParser.MIN)
                self.state = 782
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 785
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LayoutClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAYOUT(self):
            return self.getToken(ClickHouseParser.LAYOUT, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)

        def dictionaryArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.DictionaryArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.DictionaryArgExprContext,i)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_layoutClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayoutClause" ):
                listener.enterLayoutClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayoutClause" ):
                listener.exitLayoutClause(self)




    def layoutClause(self):

        localctx = ClickHouseParser.LayoutClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_layoutClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(ClickHouseParser.LAYOUT)
            self.state = 788
            self.match(ClickHouseParser.LPAREN)
            self.state = 789
            self.identifier()
            self.state = 790
            self.match(ClickHouseParser.LPAREN)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4611686018427387903) != 0):
                self.state = 791
                self.dictionaryArgExpr()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 797
            self.match(ClickHouseParser.RPAREN)
            self.state = 798
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(ClickHouseParser.RANGE, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def MIN(self):
            return self.getToken(ClickHouseParser.MIN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def MAX(self):
            return self.getToken(ClickHouseParser.MAX, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_rangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeClause" ):
                listener.enterRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeClause" ):
                listener.exitRangeClause(self)




    def rangeClause(self):

        localctx = ClickHouseParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(ClickHouseParser.RANGE)
            self.state = 801
            self.match(ClickHouseParser.LPAREN)
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [106]:
                self.state = 802
                self.match(ClickHouseParser.MIN)
                self.state = 803
                self.identifier()
                self.state = 804
                self.match(ClickHouseParser.MAX)
                self.state = 805
                self.identifier()
                pass
            elif token in [104]:
                self.state = 807
                self.match(ClickHouseParser.MAX)
                self.state = 808
                self.identifier()
                self.state = 809
                self.match(ClickHouseParser.MIN)
                self.state = 810
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 814
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictionarySettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(ClickHouseParser.SETTINGS, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingExprListContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_dictionarySettingsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictionarySettingsClause" ):
                listener.enterDictionarySettingsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictionarySettingsClause" ):
                listener.exitDictionarySettingsClause(self)




    def dictionarySettingsClause(self):

        localctx = ClickHouseParser.DictionarySettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_dictionarySettingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(ClickHouseParser.SETTINGS)
            self.state = 817
            self.match(ClickHouseParser.LPAREN)
            self.state = 818
            self.settingExprList()
            self.state = 819
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusterClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(ClickHouseParser.ON, 0)

        def CLUSTER(self):
            return self.getToken(ClickHouseParser.CLUSTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_clusterClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusterClause" ):
                listener.enterClusterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusterClause" ):
                listener.exitClusterClause(self)




    def clusterClause(self):

        localctx = ClickHouseParser.ClusterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_clusterClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(ClickHouseParser.ON)
            self.state = 822
            self.match(ClickHouseParser.CLUSTER)
            self.state = 825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192]:
                self.state = 823
                self.identifier()
                pass
            elif token in [197]:
                self.state = 824
                self.match(ClickHouseParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UUID(self):
            return self.getToken(ClickHouseParser.UUID, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_uuidClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidClause" ):
                listener.enterUuidClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidClause" ):
                listener.exitUuidClause(self)




    def uuidClause(self):

        localctx = ClickHouseParser.UuidClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_uuidClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(ClickHouseParser.UUID)
            self.state = 828
            self.match(ClickHouseParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DestinationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_destinationClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestinationClause" ):
                listener.enterDestinationClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestinationClause" ):
                listener.exitDestinationClause(self)




    def destinationClause(self):

        localctx = ClickHouseParser.DestinationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_destinationClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.match(ClickHouseParser.TO)
            self.state = 831
            self.tableIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_subqueryClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryClause" ):
                listener.enterSubqueryClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryClause" ):
                listener.exitSubqueryClause(self)




    def subqueryClause(self):

        localctx = ClickHouseParser.SubqueryClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_subqueryClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(ClickHouseParser.AS)
            self.state = 834
            self.selectUnionStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSchemaClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableSchemaClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SchemaAsTableClauseContext(TableSchemaClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableSchemaClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaAsTableClause" ):
                listener.enterSchemaAsTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaAsTableClause" ):
                listener.exitSchemaAsTableClause(self)


    class SchemaAsFunctionClauseContext(TableSchemaClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableSchemaClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaAsFunctionClause" ):
                listener.enterSchemaAsFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaAsFunctionClause" ):
                listener.exitSchemaAsFunctionClause(self)


    class SchemaDescriptionClauseContext(TableSchemaClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableSchemaClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def tableElementExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TableElementExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TableElementExprContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaDescriptionClause" ):
                listener.enterSchemaDescriptionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaDescriptionClause" ):
                listener.exitSchemaDescriptionClause(self)



    def tableSchemaClause(self):

        localctx = ClickHouseParser.TableSchemaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_tableSchemaClause)
        self._la = 0 # Token type
        try:
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.SchemaDescriptionClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 836
                self.match(ClickHouseParser.LPAREN)
                self.state = 837
                self.tableElementExpr()
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 838
                    self.match(ClickHouseParser.COMMA)
                    self.state = 839
                    self.tableElementExpr()
                    self.state = 844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 845
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.SchemaAsTableClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.match(ClickHouseParser.AS)
                self.state = 848
                self.tableIdentifier()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.SchemaAsFunctionClauseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 849
                self.match(ClickHouseParser.AS)
                self.state = 850
                self.tableFunctionExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def engineExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.EngineExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_engineClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineClause" ):
                listener.enterEngineClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineClause" ):
                listener.exitEngineClause(self)




    def engineClause(self):

        localctx = ClickHouseParser.EngineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_engineClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.engineExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_partitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionByClause" ):
                listener.enterPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionByClause" ):
                listener.exitPartitionByClause(self)




    def partitionByClause(self):

        localctx = ClickHouseParser.PartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_partitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(ClickHouseParser.PARTITION)
            self.state = 856
            self.match(ClickHouseParser.BY)
            self.state = 857
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryKeyClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRIMARY(self):
            return self.getToken(ClickHouseParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_primaryKeyClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyClause" ):
                listener.enterPrimaryKeyClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyClause" ):
                listener.exitPrimaryKeyClause(self)




    def primaryKeyClause(self):

        localctx = ClickHouseParser.PrimaryKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_primaryKeyClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(ClickHouseParser.PRIMARY)
            self.state = 860
            self.match(ClickHouseParser.KEY)
            self.state = 861
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(ClickHouseParser.SAMPLE, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_sampleByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleByClause" ):
                listener.enterSampleByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleByClause" ):
                listener.exitSampleByClause(self)




    def sampleByClause(self):

        localctx = ClickHouseParser.SampleByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sampleByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(ClickHouseParser.SAMPLE)
            self.state = 864
            self.match(ClickHouseParser.BY)
            self.state = 865
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TtlClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def ttlExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TtlExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TtlExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_ttlClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTtlClause" ):
                listener.enterTtlClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTtlClause" ):
                listener.exitTtlClause(self)




    def ttlClause(self):

        localctx = ClickHouseParser.TtlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ttlClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(ClickHouseParser.TTL)
            self.state = 868
            self.ttlExpr()
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 869
                    self.match(ClickHouseParser.COMMA)
                    self.state = 870
                    self.ttlExpr() 
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINE(self):
            return self.getToken(ClickHouseParser.ENGINE, 0)

        def identifierOrNull(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierOrNullContext,0)


        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_engineExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineExpr" ):
                listener.enterEngineExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineExpr" ):
                listener.exitEngineExpr(self)




    def engineExpr(self):

        localctx = ClickHouseParser.EngineExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_engineExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(ClickHouseParser.ENGINE)
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208:
                self.state = 877
                self.match(ClickHouseParser.EQ_SINGLE)


            self.state = 880
            self.identifierOrNull()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 881
                self.match(ClickHouseParser.LPAREN)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                    self.state = 882
                    self.columnExprList()


                self.state = 885
                self.match(ClickHouseParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableElementExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableElementExprProjectionContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROJECTION(self):
            return self.getToken(ClickHouseParser.PROJECTION, 0)
        def tableProjectionDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableProjectionDfntContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElementExprProjection" ):
                listener.enterTableElementExprProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElementExprProjection" ):
                listener.exitTableElementExprProjection(self)


    class TableElementExprConstraintContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONSTRAINT(self):
            return self.getToken(ClickHouseParser.CONSTRAINT, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def CHECK(self):
            return self.getToken(ClickHouseParser.CHECK, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElementExprConstraint" ):
                listener.enterTableElementExprConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElementExprConstraint" ):
                listener.exitTableElementExprConstraint(self)


    class TableElementExprColumnContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableColumnDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnDfntContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElementExprColumn" ):
                listener.enterTableElementExprColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElementExprColumn" ):
                listener.exitTableElementExprColumn(self)


    class TableElementExprIndexContext(TableElementExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableElementExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)
        def tableIndexDfnt(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIndexDfntContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElementExprIndex" ):
                listener.enterTableElementExprIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElementExprIndex" ):
                listener.exitTableElementExprIndex(self)



    def tableElementExpr(self):

        localctx = ClickHouseParser.TableElementExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tableElementExpr)
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.TableElementExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.tableColumnDfnt()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.TableElementExprConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.match(ClickHouseParser.CONSTRAINT)
                self.state = 890
                self.identifier()
                self.state = 891
                self.match(ClickHouseParser.CHECK)
                self.state = 892
                self.columnExpr(0)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.TableElementExprIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.match(ClickHouseParser.INDEX)
                self.state = 895
                self.tableIndexDfnt()
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.TableElementExprProjectionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 896
                self.match(ClickHouseParser.PROJECTION)
                self.state = 897
                self.tableProjectionDfnt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableColumnDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)


        def tableColumnPropertyExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableColumnPropertyExprContext,0)


        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def codecExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.CodecExprContext,0)


        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableColumnDfnt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableColumnDfnt" ):
                listener.enterTableColumnDfnt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableColumnDfnt" ):
                listener.exitTableColumnDfnt(self)




    def tableColumnDfnt(self):

        localctx = ClickHouseParser.TableColumnDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_tableColumnDfnt)
        self._la = 0 # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.nestedIdentifier()
                self.state = 901
                self.columnTypeExpr()
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==38 or _la==103:
                    self.state = 902
                    self.tableColumnPropertyExpr()


                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 905
                    self.match(ClickHouseParser.COMMENT)
                    self.state = 906
                    self.match(ClickHouseParser.STRING_LITERAL)


                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 909
                    self.codecExpr()


                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 912
                    self.match(ClickHouseParser.TTL)
                    self.state = 913
                    self.columnExpr(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.nestedIdentifier()
                self.state = 918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 917
                    self.columnTypeExpr()


                self.state = 920
                self.tableColumnPropertyExpr()
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 921
                    self.match(ClickHouseParser.COMMENT)
                    self.state = 922
                    self.match(ClickHouseParser.STRING_LITERAL)


                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 925
                    self.codecExpr()


                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 928
                    self.match(ClickHouseParser.TTL)
                    self.state = 929
                    self.columnExpr(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableColumnPropertyExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def DEFAULT(self):
            return self.getToken(ClickHouseParser.DEFAULT, 0)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)

        def ALIAS(self):
            return self.getToken(ClickHouseParser.ALIAS, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableColumnPropertyExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableColumnPropertyExpr" ):
                listener.enterTableColumnPropertyExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableColumnPropertyExpr" ):
                listener.exitTableColumnPropertyExpr(self)




    def tableColumnPropertyExpr(self):

        localctx = ClickHouseParser.TableColumnPropertyExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tableColumnPropertyExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            _la = self._input.LA(1)
            if not(_la==3 or _la==38 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 935
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def TYPE(self):
            return self.getToken(ClickHouseParser.TYPE, 0)

        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)


        def GRANULARITY(self):
            return self.getToken(ClickHouseParser.GRANULARITY, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableIndexDfnt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndexDfnt" ):
                listener.enterTableIndexDfnt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndexDfnt" ):
                listener.exitTableIndexDfnt(self)




    def tableIndexDfnt(self):

        localctx = ClickHouseParser.TableIndexDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tableIndexDfnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.nestedIdentifier()
            self.state = 938
            self.columnExpr(0)
            self.state = 939
            self.match(ClickHouseParser.TYPE)
            self.state = 940
            self.columnTypeExpr()
            self.state = 941
            self.match(ClickHouseParser.GRANULARITY)
            self.state = 942
            self.match(ClickHouseParser.DECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProjectionDfntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def projectionSelectStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.ProjectionSelectStmtContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableProjectionDfnt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableProjectionDfnt" ):
                listener.enterTableProjectionDfnt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableProjectionDfnt" ):
                listener.exitTableProjectionDfnt(self)




    def tableProjectionDfnt(self):

        localctx = ClickHouseParser.TableProjectionDfntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tableProjectionDfnt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.nestedIdentifier()
            self.state = 945
            self.projectionSelectStmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodecExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CODEC(self):
            return self.getToken(ClickHouseParser.CODEC, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def codecArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.CodecArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.CodecArgExprContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_codecExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodecExpr" ):
                listener.enterCodecExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodecExpr" ):
                listener.exitCodecExpr(self)




    def codecExpr(self):

        localctx = ClickHouseParser.CodecExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_codecExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(ClickHouseParser.CODEC)
            self.state = 948
            self.match(ClickHouseParser.LPAREN)
            self.state = 949
            self.codecArgExpr()
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 950
                self.match(ClickHouseParser.COMMA)
                self.state = 951
                self.codecArgExpr()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 957
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CodecArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_codecArgExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodecArgExpr" ):
                listener.enterCodecArgExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodecArgExpr" ):
                listener.exitCodecArgExpr(self)




    def codecArgExpr(self):

        localctx = ClickHouseParser.CodecArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_codecArgExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.identifier()
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==214:
                self.state = 960
                self.match(ClickHouseParser.LPAREN)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                    self.state = 961
                    self.columnExprList()


                self.state = 964
                self.match(ClickHouseParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TtlExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def DELETE(self):
            return self.getToken(ClickHouseParser.DELETE, 0)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)

        def DISK(self):
            return self.getToken(ClickHouseParser.DISK, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def VOLUME(self):
            return self.getToken(ClickHouseParser.VOLUME, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_ttlExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTtlExpr" ):
                listener.enterTtlExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTtlExpr" ):
                listener.exitTtlExpr(self)




    def ttlExpr(self):

        localctx = ClickHouseParser.TtlExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_ttlExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.columnExpr(0)
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 968
                self.match(ClickHouseParser.DELETE)

            elif la_ == 2:
                self.state = 969
                self.match(ClickHouseParser.TO)
                self.state = 970
                self.match(ClickHouseParser.DISK)
                self.state = 971
                self.match(ClickHouseParser.STRING_LITERAL)

            elif la_ == 3:
                self.state = 972
                self.match(ClickHouseParser.TO)
                self.state = 973
                self.match(ClickHouseParser.VOLUME)
                self.state = 974
                self.match(ClickHouseParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableExprContext,0)


        def DESCRIBE(self):
            return self.getToken(ClickHouseParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(ClickHouseParser.DESC, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_describeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStmt" ):
                listener.enterDescribeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStmt" ):
                listener.exitDescribeStmt(self)




    def describeStmt(self):

        localctx = ClickHouseParser.DescribeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_describeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            _la = self._input.LA(1)
            if not(_la==41 or _la==43):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 979
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 978
                self.match(ClickHouseParser.TABLE)


            self.state = 981
            self.tableExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dropStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DropDatabaseStmtContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)
        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabaseStmt" ):
                listener.enterDropDatabaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabaseStmt" ):
                listener.exitDropDatabaseStmt(self)


    class DropTableStmtContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)
        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)
        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def NO(self):
            return self.getToken(ClickHouseParser.NO, 0)
        def DELAY(self):
            return self.getToken(ClickHouseParser.DELAY, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTableStmt" ):
                listener.enterDropTableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTableStmt" ):
                listener.exitDropTableStmt(self)



    def dropStmt(self):

        localctx = ClickHouseParser.DropStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_dropStmt)
        self._la = 0 # Token type
        try:
            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.DropDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                _la = self._input.LA(1)
                if not(_la==44 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 984
                self.match(ClickHouseParser.DATABASE)
                self.state = 987
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 985
                    self.match(ClickHouseParser.IF)
                    self.state = 986
                    self.match(ClickHouseParser.EXISTS)


                self.state = 989
                self.databaseIdentifier()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 990
                    self.clusterClause()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.DropTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 993
                _la = self._input.LA(1)
                if not(_la==44 or _la==50):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1000
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [46]:
                    self.state = 994
                    self.match(ClickHouseParser.DICTIONARY)
                    pass
                elif token in [158, 160]:
                    self.state = 996
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==160:
                        self.state = 995
                        self.match(ClickHouseParser.TEMPORARY)


                    self.state = 998
                    self.match(ClickHouseParser.TABLE)
                    pass
                elif token in [181]:
                    self.state = 999
                    self.match(ClickHouseParser.VIEW)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1004
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1002
                    self.match(ClickHouseParser.IF)
                    self.state = 1003
                    self.match(ClickHouseParser.EXISTS)


                self.state = 1006
                self.tableIdentifier()
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1007
                    self.clusterClause()


                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 1010
                    self.match(ClickHouseParser.NO)
                    self.state = 1011
                    self.match(ClickHouseParser.DELAY)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistsStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_existsStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExistsTableStmtContext(ExistsStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExistsStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsTableStmt" ):
                listener.enterExistsTableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsTableStmt" ):
                listener.exitExistsTableStmt(self)


    class ExistsDatabaseStmtContext(ExistsStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExistsStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)
        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsDatabaseStmt" ):
                listener.enterExistsDatabaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsDatabaseStmt" ):
                listener.exitExistsDatabaseStmt(self)



    def existsStmt(self):

        localctx = ClickHouseParser.ExistsStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_existsStmt)
        self._la = 0 # Token type
        try:
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ExistsDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.match(ClickHouseParser.EXISTS)
                self.state = 1017
                self.match(ClickHouseParser.DATABASE)
                self.state = 1018
                self.databaseIdentifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ExistsTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1019
                self.match(ClickHouseParser.EXISTS)
                self.state = 1026
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1020
                    self.match(ClickHouseParser.DICTIONARY)

                elif la_ == 2:
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==160:
                        self.state = 1021
                        self.match(ClickHouseParser.TEMPORARY)


                    self.state = 1024
                    self.match(ClickHouseParser.TABLE)

                elif la_ == 3:
                    self.state = 1025
                    self.match(ClickHouseParser.VIEW)


                self.state = 1028
                self.tableIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_explainStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainSyntaxStmtContext(ExplainStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExplainStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(ClickHouseParser.EXPLAIN, 0)
        def SYNTAX(self):
            return self.getToken(ClickHouseParser.SYNTAX, 0)
        def query(self):
            return self.getTypedRuleContext(ClickHouseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainSyntaxStmt" ):
                listener.enterExplainSyntaxStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainSyntaxStmt" ):
                listener.exitExplainSyntaxStmt(self)


    class ExplainASTStmtContext(ExplainStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ExplainStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(ClickHouseParser.EXPLAIN, 0)
        def AST(self):
            return self.getToken(ClickHouseParser.AST, 0)
        def query(self):
            return self.getTypedRuleContext(ClickHouseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainASTStmt" ):
                listener.enterExplainASTStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainASTStmt" ):
                listener.exitExplainASTStmt(self)



    def explainStmt(self):

        localctx = ClickHouseParser.ExplainStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_explainStmt)
        try:
            self.state = 1037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ExplainASTStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.match(ClickHouseParser.EXPLAIN)
                self.state = 1032
                self.match(ClickHouseParser.AST)
                self.state = 1033
                self.query()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ExplainSyntaxStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.match(ClickHouseParser.EXPLAIN)
                self.state = 1035
                self.match(ClickHouseParser.SYNTAX)
                self.state = 1036
                self.query()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(ClickHouseParser.INSERT, 0)

        def INTO(self):
            return self.getToken(ClickHouseParser.INTO, 0)

        def dataClause(self):
            return self.getTypedRuleContext(ClickHouseParser.DataClauseContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def FUNCTION(self):
            return self.getToken(ClickHouseParser.FUNCTION, 0)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def columnsClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnsClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_insertStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStmt" ):
                listener.enterInsertStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStmt" ):
                listener.exitInsertStmt(self)




    def insertStmt(self):

        localctx = ClickHouseParser.InsertStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_insertStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(ClickHouseParser.INSERT)
            self.state = 1040
            self.match(ClickHouseParser.INTO)
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1041
                self.match(ClickHouseParser.TABLE)


            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1044
                self.tableIdentifier()
                pass

            elif la_ == 2:
                self.state = 1045
                self.match(ClickHouseParser.FUNCTION)
                self.state = 1046
                self.tableFunctionExpr()
                pass


            self.state = 1050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1049
                self.columnsClause()


            self.state = 1052
            self.dataClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def nestedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.NestedIdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsClause" ):
                listener.enterColumnsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsClause" ):
                listener.exitColumnsClause(self)




    def columnsClause(self):

        localctx = ClickHouseParser.ColumnsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_columnsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(ClickHouseParser.LPAREN)
            self.state = 1055
            self.nestedIdentifier()
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 1056
                self.match(ClickHouseParser.COMMA)
                self.state = 1057
                self.nestedIdentifier()
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1063
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_dataClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DataClauseValuesContext(DataClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DataClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(ClickHouseParser.VALUES, 0)
        def assignmentValues(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.AssignmentValuesContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.AssignmentValuesContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataClauseValues" ):
                listener.enterDataClauseValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataClauseValues" ):
                listener.exitDataClauseValues(self)


    class DataClauseFormatContext(DataClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DataClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(ClickHouseParser.FORMAT, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataClauseFormat" ):
                listener.enterDataClauseFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataClauseFormat" ):
                listener.exitDataClauseFormat(self)


    class DataClauseSelectContext(DataClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.DataClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)

        def EOF(self):
            return self.getToken(ClickHouseParser.EOF, 0)
        def SEMICOLON(self):
            return self.getToken(ClickHouseParser.SEMICOLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataClauseSelect" ):
                listener.enterDataClauseSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataClauseSelect" ):
                listener.exitDataClauseSelect(self)



    def dataClause(self):

        localctx = ClickHouseParser.DataClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dataClause)
        self._la = 0 # Token type
        try:
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                localctx = ClickHouseParser.DataClauseFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1065
                self.match(ClickHouseParser.FORMAT)
                self.state = 1066
                self.identifier()
                pass
            elif token in [180]:
                localctx = ClickHouseParser.DataClauseValuesContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.match(ClickHouseParser.VALUES)
                self.state = 1068
                self.assignmentValues()
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 1069
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1070
                    self.assignmentValues()
                    self.state = 1075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [145, 188, 214]:
                localctx = ClickHouseParser.DataClauseSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1076
                self.selectUnionStmt()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225:
                    self.state = 1077
                    self.match(ClickHouseParser.SEMICOLON)


                self.state = 1080
                self.match(ClickHouseParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def assignmentValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.AssignmentValueContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.AssignmentValueContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_assignmentValues

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentValues" ):
                listener.enterAssignmentValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentValues" ):
                listener.exitAssignmentValues(self)




    def assignmentValues(self):

        localctx = ClickHouseParser.AssignmentValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_assignmentValues)
        self._la = 0 # Token type
        try:
            self.state = 1097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1084
                self.match(ClickHouseParser.LPAREN)
                self.state = 1085
                self.assignmentValue()
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 1086
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1087
                    self.assignmentValue()
                    self.state = 1092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1093
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.match(ClickHouseParser.LPAREN)
                self.state = 1096
                self.match(ClickHouseParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_assignmentValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentValue" ):
                listener.enterAssignmentValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentValue" ):
                listener.exitAssignmentValue(self)




    def assignmentValue(self):

        localctx = ClickHouseParser.AssignmentValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_assignmentValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_killStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class KillMutationStmtContext(KillStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.KillStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KILL(self):
            return self.getToken(ClickHouseParser.KILL, 0)
        def MUTATION(self):
            return self.getToken(ClickHouseParser.MUTATION, 0)
        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)

        def SYNC(self):
            return self.getToken(ClickHouseParser.SYNC, 0)
        def ASYNC(self):
            return self.getToken(ClickHouseParser.ASYNC, 0)
        def TEST(self):
            return self.getToken(ClickHouseParser.TEST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillMutationStmt" ):
                listener.enterKillMutationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillMutationStmt" ):
                listener.exitKillMutationStmt(self)



    def killStmt(self):

        localctx = ClickHouseParser.KillStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_killStmt)
        self._la = 0 # Token type
        try:
            localctx = ClickHouseParser.KillMutationStmtContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(ClickHouseParser.KILL)
            self.state = 1102
            self.match(ClickHouseParser.MUTATION)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1103
                self.clusterClause()


            self.state = 1106
            self.whereClause()
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==155 or _la==161:
                self.state = 1107
                _la = self._input.LA(1)
                if not(_la==14 or _la==155 or _la==161):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIMIZE(self):
            return self.getToken(ClickHouseParser.OPTIMIZE, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PartitionClauseContext,0)


        def FINAL(self):
            return self.getToken(ClickHouseParser.FINAL, 0)

        def DEDUPLICATE(self):
            return self.getToken(ClickHouseParser.DEDUPLICATE, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_optimizeStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeStmt" ):
                listener.enterOptimizeStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeStmt" ):
                listener.exitOptimizeStmt(self)




    def optimizeStmt(self):

        localctx = ClickHouseParser.OptimizeStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_optimizeStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(ClickHouseParser.OPTIMIZE)
            self.state = 1111
            self.match(ClickHouseParser.TABLE)
            self.state = 1112
            self.tableIdentifier()
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1113
                self.clusterClause()


            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1116
                self.partitionClause()


            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1119
                self.match(ClickHouseParser.FINAL)


            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1122
                self.match(ClickHouseParser.DEDUPLICATE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(ClickHouseParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,i)


        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.TO)
            else:
                return self.getToken(ClickHouseParser.TO, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_renameStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameStmt" ):
                listener.enterRenameStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameStmt" ):
                listener.exitRenameStmt(self)




    def renameStmt(self):

        localctx = ClickHouseParser.RenameStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_renameStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(ClickHouseParser.RENAME)
            self.state = 1126
            self.match(ClickHouseParser.TABLE)
            self.state = 1127
            self.tableIdentifier()
            self.state = 1128
            self.match(ClickHouseParser.TO)
            self.state = 1129
            self.tableIdentifier()
            self.state = 1137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 1130
                self.match(ClickHouseParser.COMMA)
                self.state = 1131
                self.tableIdentifier()
                self.state = 1132
                self.match(ClickHouseParser.TO)
                self.state = 1133
                self.tableIdentifier()
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1140
                self.clusterClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionSelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def SELECT(self):
            return self.getToken(ClickHouseParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def withClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WithClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.GroupByClauseContext,0)


        def projectionOrderByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ProjectionOrderByClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_projectionSelectStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectionSelectStmt" ):
                listener.enterProjectionSelectStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectionSelectStmt" ):
                listener.exitProjectionSelectStmt(self)




    def projectionSelectStmt(self):

        localctx = ClickHouseParser.ProjectionSelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_projectionSelectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(ClickHouseParser.LPAREN)
            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 1144
                self.withClause()


            self.state = 1147
            self.match(ClickHouseParser.SELECT)
            self.state = 1148
            self.columnExprList()
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 1149
                self.groupByClause()


            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1152
                self.projectionOrderByClause()


            self.state = 1155
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectUnionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmtWithParens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.SelectStmtWithParensContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.SelectStmtWithParensContext,i)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.UNION)
            else:
                return self.getToken(ClickHouseParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.ALL)
            else:
                return self.getToken(ClickHouseParser.ALL, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_selectUnionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectUnionStmt" ):
                listener.enterSelectUnionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectUnionStmt" ):
                listener.exitSelectUnionStmt(self)




    def selectUnionStmt(self):

        localctx = ClickHouseParser.SelectUnionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_selectUnionStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.selectStmtWithParens()
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==175:
                self.state = 1158
                self.match(ClickHouseParser.UNION)
                self.state = 1159
                self.match(ClickHouseParser.ALL)
                self.state = 1160
                self.selectStmtWithParens()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtWithParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectStmtContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_selectStmtWithParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStmtWithParens" ):
                listener.enterSelectStmtWithParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStmtWithParens" ):
                listener.exitSelectStmtWithParens(self)




    def selectStmtWithParens(self):

        localctx = ClickHouseParser.SelectStmtWithParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_selectStmtWithParens)
        try:
            self.state = 1171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [145, 188]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self.selectStmt()
                pass
            elif token in [214]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.match(ClickHouseParser.LPAREN)
                self.state = 1168
                self.selectUnionStmt()
                self.state = 1169
                self.match(ClickHouseParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ClickHouseParser.SELECT, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def withClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WithClauseContext,0)


        def DISTINCT(self):
            return self.getToken(ClickHouseParser.DISTINCT, 0)

        def topClause(self):
            return self.getTypedRuleContext(ClickHouseParser.TopClauseContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(ClickHouseParser.FromClauseContext,0)


        def arrayJoinClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ArrayJoinClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WindowClauseContext,0)


        def prewhereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.PrewhereClauseContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.GroupByClauseContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.WITH)
            else:
                return self.getToken(ClickHouseParser.WITH, i)

        def TOTALS(self):
            return self.getToken(ClickHouseParser.TOTALS, 0)

        def havingClause(self):
            return self.getTypedRuleContext(ClickHouseParser.HavingClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.OrderByClauseContext,0)


        def limitByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitClauseContext,0)


        def settingsClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingsClauseContext,0)


        def CUBE(self):
            return self.getToken(ClickHouseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(ClickHouseParser.ROLLUP, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_selectStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStmt" ):
                listener.enterSelectStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStmt" ):
                listener.exitSelectStmt(self)




    def selectStmt(self):

        localctx = ClickHouseParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 1173
                self.withClause()


            self.state = 1176
            self.match(ClickHouseParser.SELECT)
            self.state = 1178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1177
                self.match(ClickHouseParser.DISTINCT)


            self.state = 1181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1180
                self.topClause()


            self.state = 1183
            self.columnExprList()
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1184
                self.fromClause()


            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==83 or _la==95:
                self.state = 1187
                self.arrayJoinClause()


            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==187:
                self.state = 1190
                self.windowClause()


            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 1193
                self.prewhereClause()


            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==186:
                self.state = 1196
                self.whereClause()


            self.state = 1200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 1199
                self.groupByClause()


            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1202
                self.match(ClickHouseParser.WITH)
                self.state = 1203
                _la = self._input.LA(1)
                if not(_la==31 or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 1206
                self.match(ClickHouseParser.WITH)
                self.state = 1207
                self.match(ClickHouseParser.TOTALS)


            self.state = 1211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1210
                self.havingClause()


            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1213
                self.orderByClause()


            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1216
                self.limitByClause()


            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1219
                self.limitClause()


            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1222
                self.settingsClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = ClickHouseParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(ClickHouseParser.WITH)
            self.state = 1226
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(ClickHouseParser.TOP, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def TIES(self):
            return self.getToken(ClickHouseParser.TIES, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_topClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopClause" ):
                listener.enterTopClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopClause" ):
                listener.exitTopClause(self)




    def topClause(self):

        localctx = ClickHouseParser.TopClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_topClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(ClickHouseParser.TOP)
            self.state = 1229
            self.match(ClickHouseParser.DECIMAL_LITERAL)
            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1230
                self.match(ClickHouseParser.WITH)
                self.state = 1231
                self.match(ClickHouseParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)

        def joinExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = ClickHouseParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(ClickHouseParser.FROM)
            self.state = 1235
            self.joinExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayJoinClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(ClickHouseParser.ARRAY, 0)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def LEFT(self):
            return self.getToken(ClickHouseParser.LEFT, 0)

        def INNER(self):
            return self.getToken(ClickHouseParser.INNER, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_arrayJoinClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayJoinClause" ):
                listener.enterArrayJoinClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayJoinClause" ):
                listener.exitArrayJoinClause(self)




    def arrayJoinClause(self):

        localctx = ClickHouseParser.ArrayJoinClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arrayJoinClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83 or _la==95:
                self.state = 1237
                _la = self._input.LA(1)
                if not(_la==83 or _la==95):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1240
            self.match(ClickHouseParser.ARRAY)
            self.state = 1241
            self.match(ClickHouseParser.JOIN)
            self.state = 1242
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(ClickHouseParser.WINDOW, 0)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def windowExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.WindowExprContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = ClickHouseParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(ClickHouseParser.WINDOW)
            self.state = 1245
            self.identifier()
            self.state = 1246
            self.match(ClickHouseParser.AS)
            self.state = 1247
            self.match(ClickHouseParser.LPAREN)
            self.state = 1248
            self.windowExpr()
            self.state = 1249
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrewhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREWHERE(self):
            return self.getToken(ClickHouseParser.PREWHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_prewhereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrewhereClause" ):
                listener.enterPrewhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrewhereClause" ):
                listener.exitPrewhereClause(self)




    def prewhereClause(self):

        localctx = ClickHouseParser.PrewhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_prewhereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(ClickHouseParser.PREWHERE)
            self.state = 1252
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(ClickHouseParser.WHERE, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)




    def whereClause(self):

        localctx = ClickHouseParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(ClickHouseParser.WHERE)
            self.state = 1255
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ClickHouseParser.GROUP, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def CUBE(self):
            return self.getToken(ClickHouseParser.CUBE, 0)

        def ROLLUP(self):
            return self.getToken(ClickHouseParser.ROLLUP, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = ClickHouseParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_groupByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.match(ClickHouseParser.GROUP)
            self.state = 1258
            self.match(ClickHouseParser.BY)
            self.state = 1265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.state = 1259
                _la = self._input.LA(1)
                if not(_la==31 or _la==140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1260
                self.match(ClickHouseParser.LPAREN)
                self.state = 1261
                self.columnExprList()
                self.state = 1262
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 2:
                self.state = 1264
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(ClickHouseParser.HAVING, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = ClickHouseParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(ClickHouseParser.HAVING)
            self.state = 1268
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = ClickHouseParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(ClickHouseParser.ORDER)
            self.state = 1271
            self.match(ClickHouseParser.BY)
            self.state = 1272
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProjectionOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_projectionOrderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProjectionOrderByClause" ):
                listener.enterProjectionOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProjectionOrderByClause" ):
                listener.exitProjectionOrderByClause(self)




    def projectionOrderByClause(self):

        localctx = ClickHouseParser.ProjectionOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_projectionOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self.match(ClickHouseParser.ORDER)
            self.state = 1275
            self.match(ClickHouseParser.BY)
            self.state = 1276
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitExprContext,0)


        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_limitByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitByClause" ):
                listener.enterLimitByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitByClause" ):
                listener.exitLimitByClause(self)




    def limitByClause(self):

        localctx = ClickHouseParser.LimitByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_limitByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(ClickHouseParser.LIMIT)
            self.state = 1279
            self.limitExpr()
            self.state = 1280
            self.match(ClickHouseParser.BY)
            self.state = 1281
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def limitExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitExprContext,0)


        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def TIES(self):
            return self.getToken(ClickHouseParser.TIES, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = ClickHouseParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_limitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(ClickHouseParser.LIMIT)
            self.state = 1284
            self.limitExpr()
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 1285
                self.match(ClickHouseParser.WITH)
                self.state = 1286
                self.match(ClickHouseParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTINGS(self):
            return self.getToken(ClickHouseParser.SETTINGS, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_settingsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettingsClause" ):
                listener.enterSettingsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettingsClause" ):
                listener.exitSettingsClause(self)




    def settingsClause(self):

        localctx = ClickHouseParser.SettingsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_settingsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(ClickHouseParser.SETTINGS)
            self.state = 1290
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JoinExprOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,i)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)
        def joinConstraintClause(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinConstraintClauseContext,0)

        def joinOp(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinOpContext,0)

        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)
        def LOCAL(self):
            return self.getToken(ClickHouseParser.LOCAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExprOp" ):
                listener.enterJoinExprOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExprOp" ):
                listener.exitJoinExprOp(self)


    class JoinExprTableContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableExprContext,0)

        def FINAL(self):
            return self.getToken(ClickHouseParser.FINAL, 0)
        def sampleClause(self):
            return self.getTypedRuleContext(ClickHouseParser.SampleClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExprTable" ):
                listener.enterJoinExprTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExprTable" ):
                listener.exitJoinExprTable(self)


    class JoinExprParensContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def joinExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExprParens" ):
                listener.enterJoinExprParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExprParens" ):
                listener.exitJoinExprParens(self)


    class JoinExprCrossOpContext(JoinExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def joinExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.JoinExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.JoinExprContext,i)

        def joinOpCross(self):
            return self.getTypedRuleContext(ClickHouseParser.JoinOpCrossContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinExprCrossOp" ):
                listener.enterJoinExprCrossOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinExprCrossOp" ):
                listener.exitJoinExprCrossOp(self)



    def joinExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClickHouseParser.JoinExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 146
        self.enterRecursionRule(localctx, 146, self.RULE_joinExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.JoinExprTableContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1293
                self.tableExpr(0)
                self.state = 1295
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1294
                    self.match(ClickHouseParser.FINAL)


                self.state = 1298
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1297
                    self.sampleClause()


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.JoinExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1300
                self.match(ClickHouseParser.LPAREN)
                self.state = 1301
                self.joinExpr(0)
                self.state = 1302
                self.match(ClickHouseParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1321
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        localctx = ClickHouseParser.JoinExprCrossOpContext(self, ClickHouseParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 1306
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1307
                        self.joinOpCross()
                        self.state = 1308
                        self.joinExpr(4)
                        pass

                    elif la_ == 2:
                        localctx = ClickHouseParser.JoinExprOpContext(self, ClickHouseParser.JoinExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_joinExpr)
                        self.state = 1310
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1312
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==70 or _la==100:
                            self.state = 1311
                            _la = self._input.LA(1)
                            if not(_la==70 or _la==100):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()


                        self.state = 1315
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 134250497) != 0) or _la==139 or _la==146:
                            self.state = 1314
                            self.joinOp()


                        self.state = 1317
                        self.match(ClickHouseParser.JOIN)
                        self.state = 1318
                        self.joinExpr(0)
                        self.state = 1319
                        self.joinConstraintClause()
                        pass

             
                self.state = 1325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinOp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class JoinOpFullContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FULL(self):
            return self.getToken(ClickHouseParser.FULL, 0)
        def OUTER(self):
            return self.getToken(ClickHouseParser.OUTER, 0)
        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)
        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOpFull" ):
                listener.enterJoinOpFull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOpFull" ):
                listener.exitJoinOpFull(self)


    class JoinOpInnerContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INNER(self):
            return self.getToken(ClickHouseParser.INNER, 0)
        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)
        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)
        def ASOF(self):
            return self.getToken(ClickHouseParser.ASOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOpInner" ):
                listener.enterJoinOpInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOpInner" ):
                listener.exitJoinOpInner(self)


    class JoinOpLeftRightContext(JoinOpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.JoinOpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(ClickHouseParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(ClickHouseParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(ClickHouseParser.OUTER, 0)
        def SEMI(self):
            return self.getToken(ClickHouseParser.SEMI, 0)
        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)
        def ANTI(self):
            return self.getToken(ClickHouseParser.ANTI, 0)
        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)
        def ASOF(self):
            return self.getToken(ClickHouseParser.ASOF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOpLeftRight" ):
                listener.enterJoinOpLeftRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOpLeftRight" ):
                listener.exitJoinOpLeftRight(self)



    def joinOp(self):

        localctx = ClickHouseParser.JoinOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_joinOp)
        self._la = 0 # Token type
        try:
            self.state = 1369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.JoinOpInnerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 1326
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1329
                    self.match(ClickHouseParser.INNER)
                    pass

                elif la_ == 2:
                    self.state = 1330
                    self.match(ClickHouseParser.INNER)
                    self.state = 1332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0):
                        self.state = 1331
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass

                elif la_ == 3:
                    self.state = 1334
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4368) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                pass

            elif la_ == 2:
                localctx = ClickHouseParser.JoinOpLeftRightContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146:
                        self.state = 1337
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1340
                    _la = self._input.LA(1)
                    if not(_la==95 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 1341
                        self.match(ClickHouseParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 1344
                    _la = self._input.LA(1)
                    if not(_la==95 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 1345
                        self.match(ClickHouseParser.OUTER)


                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146:
                        self.state = 1348
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4496) != 0) or _la==146):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass

            elif la_ == 3:
                localctx = ClickHouseParser.JoinOpFullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 1353
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1356
                    self.match(ClickHouseParser.FULL)
                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 1357
                        self.match(ClickHouseParser.OUTER)


                    pass

                elif la_ == 2:
                    self.state = 1360
                    self.match(ClickHouseParser.FULL)
                    self.state = 1362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==122:
                        self.state = 1361
                        self.match(ClickHouseParser.OUTER)


                    self.state = 1365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==4 or _la==8:
                        self.state = 1364
                        _la = self._input.LA(1)
                        if not(_la==4 or _la==8):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    pass


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinOpCrossContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(ClickHouseParser.CROSS, 0)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)

        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)

        def LOCAL(self):
            return self.getToken(ClickHouseParser.LOCAL, 0)

        def COMMA(self):
            return self.getToken(ClickHouseParser.COMMA, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinOpCross

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinOpCross" ):
                listener.enterJoinOpCross(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinOpCross" ):
                listener.exitJoinOpCross(self)




    def joinOpCross(self):

        localctx = ClickHouseParser.JoinOpCrossContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_joinOpCross)
        self._la = 0 # Token type
        try:
            self.state = 1377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 70, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70 or _la==100:
                    self.state = 1371
                    _la = self._input.LA(1)
                    if not(_la==70 or _la==100):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1374
                self.match(ClickHouseParser.CROSS)
                self.state = 1375
                self.match(ClickHouseParser.JOIN)
                pass
            elif token in [203]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1376
                self.match(ClickHouseParser.COMMA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinConstraintClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(ClickHouseParser.ON, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def USING(self):
            return self.getToken(ClickHouseParser.USING, 0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_joinConstraintClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinConstraintClause" ):
                listener.enterJoinConstraintClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinConstraintClause" ):
                listener.exitJoinConstraintClause(self)




    def joinConstraintClause(self):

        localctx = ClickHouseParser.JoinConstraintClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_joinConstraintClause)
        try:
            self.state = 1388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1379
                self.match(ClickHouseParser.ON)
                self.state = 1380
                self.columnExprList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1381
                self.match(ClickHouseParser.USING)
                self.state = 1382
                self.match(ClickHouseParser.LPAREN)
                self.state = 1383
                self.columnExprList()
                self.state = 1384
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1386
                self.match(ClickHouseParser.USING)
                self.state = 1387
                self.columnExprList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(ClickHouseParser.SAMPLE, 0)

        def ratioExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.RatioExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.RatioExprContext,i)


        def OFFSET(self):
            return self.getToken(ClickHouseParser.OFFSET, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_sampleClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleClause" ):
                listener.enterSampleClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleClause" ):
                listener.exitSampleClause(self)




    def sampleClause(self):

        localctx = ClickHouseParser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            self.match(ClickHouseParser.SAMPLE)
            self.state = 1391
            self.ratioExpr()
            self.state = 1394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1392
                self.match(ClickHouseParser.OFFSET)
                self.state = 1393
                self.ratioExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)


        def COMMA(self):
            return self.getToken(ClickHouseParser.COMMA, 0)

        def OFFSET(self):
            return self.getToken(ClickHouseParser.OFFSET, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_limitExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitExpr" ):
                listener.enterLimitExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitExpr" ):
                listener.exitLimitExpr(self)




    def limitExpr(self):

        localctx = ClickHouseParser.LimitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_limitExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            self.columnExpr(0)
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117 or _la==203:
                self.state = 1397
                _la = self._input.LA(1)
                if not(_la==117 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1398
                self.columnExpr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.OrderExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.OrderExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_orderExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderExprList" ):
                listener.enterOrderExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderExprList" ):
                listener.exitOrderExprList(self)




    def orderExprList(self):

        localctx = ClickHouseParser.OrderExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_orderExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.orderExpr()
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 1402
                self.match(ClickHouseParser.COMMA)
                self.state = 1403
                self.orderExpr()
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def NULLS(self):
            return self.getToken(ClickHouseParser.NULLS, 0)

        def COLLATE(self):
            return self.getToken(ClickHouseParser.COLLATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def ASCENDING(self):
            return self.getToken(ClickHouseParser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(ClickHouseParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(ClickHouseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(ClickHouseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(ClickHouseParser.LAST, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_orderExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderExpr" ):
                listener.enterOrderExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderExpr" ):
                listener.exitOrderExpr(self)




    def orderExpr(self):

        localctx = ClickHouseParser.OrderExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_orderExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.columnExpr(0)
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6597069768704) != 0):
                self.state = 1410
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6597069768704) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 1413
                self.match(ClickHouseParser.NULLS)
                self.state = 1414
                _la = self._input.LA(1)
                if not(_la==61 or _la==92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 1417
                self.match(ClickHouseParser.COLLATE)
                self.state = 1418
                self.match(ClickHouseParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RatioExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,i)


        def SLASH(self):
            return self.getToken(ClickHouseParser.SLASH, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_ratioExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatioExpr" ):
                listener.enterRatioExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatioExpr" ):
                listener.exitRatioExpr(self)




    def ratioExpr(self):

        localctx = ClickHouseParser.RatioExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_ratioExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.numberLiteral()
            self.state = 1424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1422
                self.match(ClickHouseParser.SLASH)
                self.state = 1423
                self.numberLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def settingExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.SettingExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.SettingExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_settingExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettingExprList" ):
                listener.enterSettingExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettingExprList" ):
                listener.exitSettingExprList(self)




    def settingExprList(self):

        localctx = ClickHouseParser.SettingExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_settingExprList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.settingExpr()
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 1427
                self.match(ClickHouseParser.COMMA)
                self.state = 1428
                self.settingExpr()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_settingExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettingExpr" ):
                listener.enterSettingExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettingExpr" ):
                listener.exitSettingExpr(self)




    def settingExpr(self):

        localctx = ClickHouseParser.SettingExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_settingExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.identifier()
            self.state = 1435
            self.match(ClickHouseParser.EQ_SINGLE)
            self.state = 1436
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winPartitionByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WinPartitionByClauseContext,0)


        def winOrderByClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WinOrderByClauseContext,0)


        def winFrameClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WinFrameClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_windowExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowExpr" ):
                listener.enterWindowExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowExpr" ):
                listener.exitWindowExpr(self)




    def windowExpr(self):

        localctx = ClickHouseParser.WindowExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_windowExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1438
                self.winPartitionByClause()


            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1441
                self.winOrderByClause()


            self.state = 1445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==142:
                self.state = 1444
                self.winFrameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinPartitionByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winPartitionByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWinPartitionByClause" ):
                listener.enterWinPartitionByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWinPartitionByClause" ):
                listener.exitWinPartitionByClause(self)




    def winPartitionByClause(self):

        localctx = ClickHouseParser.WinPartitionByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_winPartitionByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(ClickHouseParser.PARTITION)
            self.state = 1448
            self.match(ClickHouseParser.BY)
            self.state = 1449
            self.columnExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinOrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def orderExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.OrderExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winOrderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWinOrderByClause" ):
                listener.enterWinOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWinOrderByClause" ):
                listener.exitWinOrderByClause(self)




    def winOrderByClause(self):

        localctx = ClickHouseParser.WinOrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_winOrderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(ClickHouseParser.ORDER)
            self.state = 1452
            self.match(ClickHouseParser.BY)
            self.state = 1453
            self.orderExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def winFrameExtend(self):
            return self.getTypedRuleContext(ClickHouseParser.WinFrameExtendContext,0)


        def ROWS(self):
            return self.getToken(ClickHouseParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(ClickHouseParser.RANGE, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_winFrameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWinFrameClause" ):
                listener.enterWinFrameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWinFrameClause" ):
                listener.exitWinFrameClause(self)




    def winFrameClause(self):

        localctx = ClickHouseParser.WinFrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_winFrameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            _la = self._input.LA(1)
            if not(_la==132 or _la==142):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1456
            self.winFrameExtend()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameExtendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winFrameExtend

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FrameStartContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def winFrameBound(self):
            return self.getTypedRuleContext(ClickHouseParser.WinFrameBoundContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameStart" ):
                listener.enterFrameStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameStart" ):
                listener.exitFrameStart(self)


    class FrameBetweenContext(WinFrameExtendContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.WinFrameExtendContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(ClickHouseParser.BETWEEN, 0)
        def winFrameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.WinFrameBoundContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.WinFrameBoundContext,i)

        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBetween" ):
                listener.enterFrameBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBetween" ):
                listener.exitFrameBetween(self)



    def winFrameExtend(self):

        localctx = ClickHouseParser.WinFrameExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_winFrameExtend)
        try:
            self.state = 1464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 81, 112, 174, 193, 194, 195, 196, 205, 206, 218]:
                localctx = ClickHouseParser.FrameStartContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1458
                self.winFrameBound()
                pass
            elif token in [16]:
                localctx = ClickHouseParser.FrameBetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self.match(ClickHouseParser.BETWEEN)
                self.state = 1460
                self.winFrameBound()
                self.state = 1461
                self.match(ClickHouseParser.AND)
                self.state = 1462
                self.winFrameBound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WinFrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(ClickHouseParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(ClickHouseParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(ClickHouseParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(ClickHouseParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(ClickHouseParser.FOLLOWING, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_winFrameBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWinFrameBound" ):
                listener.enterWinFrameBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWinFrameBound" ):
                listener.exitWinFrameBound(self)




    def winFrameBound(self):

        localctx = ClickHouseParser.WinFrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_winFrameBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1466
                self.match(ClickHouseParser.CURRENT)
                self.state = 1467
                self.match(ClickHouseParser.ROW)
                pass

            elif la_ == 2:
                self.state = 1468
                self.match(ClickHouseParser.UNBOUNDED)
                self.state = 1469
                self.match(ClickHouseParser.PRECEDING)
                pass

            elif la_ == 3:
                self.state = 1470
                self.match(ClickHouseParser.UNBOUNDED)
                self.state = 1471
                self.match(ClickHouseParser.FOLLOWING)
                pass

            elif la_ == 4:
                self.state = 1472
                self.numberLiteral()
                self.state = 1473
                self.match(ClickHouseParser.PRECEDING)
                pass

            elif la_ == 5:
                self.state = 1475
                self.numberLiteral()
                self.state = 1476
                self.match(ClickHouseParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(ClickHouseParser.SET, 0)

        def settingExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.SettingExprListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_setStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetStmt" ):
                listener.enterSetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetStmt" ):
                listener.exitSetStmt(self)




    def setStmt(self):

        localctx = ClickHouseParser.SetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_setStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(ClickHouseParser.SET)
            self.state = 1481
            self.settingExprList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_showStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowCreateDatabaseStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDatabaseStmt" ):
                listener.enterShowCreateDatabaseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDatabaseStmt" ):
                listener.exitShowCreateDatabaseStmt(self)


    class ShowDatabasesStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(ClickHouseParser.DATABASES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDatabasesStmt" ):
                listener.enterShowDatabasesStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDatabasesStmt" ):
                listener.exitShowDatabasesStmt(self)


    class ShowCreateTableStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)
        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTableStmt" ):
                listener.enterShowCreateTableStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTableStmt" ):
                listener.exitShowCreateTableStmt(self)


    class ShowTablesStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(ClickHouseParser.TABLES, 0)
        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)

        def LIKE(self):
            return self.getToken(ClickHouseParser.LIKE, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def whereClause(self):
            return self.getTypedRuleContext(ClickHouseParser.WhereClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(ClickHouseParser.LimitClauseContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTablesStmt" ):
                listener.enterShowTablesStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTablesStmt" ):
                listener.exitShowTablesStmt(self)


    class ShowDictionariesStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def DICTIONARIES(self):
            return self.getToken(ClickHouseParser.DICTIONARIES, 0)
        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowDictionariesStmt" ):
                listener.enterShowDictionariesStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowDictionariesStmt" ):
                listener.exitShowDictionariesStmt(self)


    class ShowCreateDictionaryStmtContext(ShowStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ShowStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)
        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDictionaryStmt" ):
                listener.enterShowCreateDictionaryStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDictionaryStmt" ):
                listener.exitShowCreateDictionaryStmt(self)



    def showStmt(self):

        localctx = ClickHouseParser.ShowStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_showStmt)
        self._la = 0 # Token type
        try:
            self.state = 1525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ShowCreateDatabaseStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1483
                self.match(ClickHouseParser.SHOW)
                self.state = 1484
                self.match(ClickHouseParser.CREATE)
                self.state = 1485
                self.match(ClickHouseParser.DATABASE)
                self.state = 1486
                self.databaseIdentifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ShowCreateDictionaryStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1487
                self.match(ClickHouseParser.SHOW)
                self.state = 1488
                self.match(ClickHouseParser.CREATE)
                self.state = 1489
                self.match(ClickHouseParser.DICTIONARY)
                self.state = 1490
                self.tableIdentifier()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ShowCreateTableStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1491
                self.match(ClickHouseParser.SHOW)
                self.state = 1492
                self.match(ClickHouseParser.CREATE)
                self.state = 1494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1493
                    self.match(ClickHouseParser.TEMPORARY)


                self.state = 1497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                if la_ == 1:
                    self.state = 1496
                    self.match(ClickHouseParser.TABLE)


                self.state = 1499
                self.tableIdentifier()
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.ShowDatabasesStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1500
                self.match(ClickHouseParser.SHOW)
                self.state = 1501
                self.match(ClickHouseParser.DATABASES)
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.ShowDictionariesStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1502
                self.match(ClickHouseParser.SHOW)
                self.state = 1503
                self.match(ClickHouseParser.DICTIONARIES)
                self.state = 1506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 1504
                    self.match(ClickHouseParser.FROM)
                    self.state = 1505
                    self.databaseIdentifier()


                pass

            elif la_ == 6:
                localctx = ClickHouseParser.ShowTablesStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1508
                self.match(ClickHouseParser.SHOW)
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==160:
                    self.state = 1509
                    self.match(ClickHouseParser.TEMPORARY)


                self.state = 1512
                self.match(ClickHouseParser.TABLES)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==79:
                    self.state = 1513
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==79):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1514
                    self.databaseIdentifier()


                self.state = 1520
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [97]:
                    self.state = 1517
                    self.match(ClickHouseParser.LIKE)
                    self.state = 1518
                    self.match(ClickHouseParser.STRING_LITERAL)
                    pass
                elif token in [186]:
                    self.state = 1519
                    self.whereClause()
                    pass
                elif token in [-1, 65, 86, 98, 224, 225]:
                    pass
                else:
                    pass
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 1522
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SystemStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSTEM(self):
            return self.getToken(ClickHouseParser.SYSTEM, 0)

        def FLUSH(self):
            return self.getToken(ClickHouseParser.FLUSH, 0)

        def DISTRIBUTED(self):
            return self.getToken(ClickHouseParser.DISTRIBUTED, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def LOGS(self):
            return self.getToken(ClickHouseParser.LOGS, 0)

        def RELOAD(self):
            return self.getToken(ClickHouseParser.RELOAD, 0)

        def DICTIONARIES(self):
            return self.getToken(ClickHouseParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)

        def START(self):
            return self.getToken(ClickHouseParser.START, 0)

        def STOP(self):
            return self.getToken(ClickHouseParser.STOP, 0)

        def SENDS(self):
            return self.getToken(ClickHouseParser.SENDS, 0)

        def FETCHES(self):
            return self.getToken(ClickHouseParser.FETCHES, 0)

        def MERGES(self):
            return self.getToken(ClickHouseParser.MERGES, 0)

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def REPLICATED(self):
            return self.getToken(ClickHouseParser.REPLICATED, 0)

        def SYNC(self):
            return self.getToken(ClickHouseParser.SYNC, 0)

        def REPLICA(self):
            return self.getToken(ClickHouseParser.REPLICA, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_systemStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystemStmt" ):
                listener.enterSystemStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystemStmt" ):
                listener.exitSystemStmt(self)




    def systemStmt(self):

        localctx = ClickHouseParser.SystemStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_systemStmt)
        self._la = 0 # Token type
        try:
            self.state = 1561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1527
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1528
                self.match(ClickHouseParser.FLUSH)
                self.state = 1529
                self.match(ClickHouseParser.DISTRIBUTED)
                self.state = 1530
                self.tableIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1531
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1532
                self.match(ClickHouseParser.FLUSH)
                self.state = 1533
                self.match(ClickHouseParser.LOGS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1534
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1535
                self.match(ClickHouseParser.RELOAD)
                self.state = 1536
                self.match(ClickHouseParser.DICTIONARIES)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1537
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1538
                self.match(ClickHouseParser.RELOAD)
                self.state = 1539
                self.match(ClickHouseParser.DICTIONARY)
                self.state = 1540
                self.tableIdentifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1541
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1542
                _la = self._input.LA(1)
                if not(_la==152 or _la==153):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1550
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [49]:
                    self.state = 1543
                    self.match(ClickHouseParser.DISTRIBUTED)
                    self.state = 1544
                    self.match(ClickHouseParser.SENDS)
                    pass
                elif token in [59]:
                    self.state = 1545
                    self.match(ClickHouseParser.FETCHES)
                    pass
                elif token in [105, 172]:
                    self.state = 1547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==172:
                        self.state = 1546
                        self.match(ClickHouseParser.TTL)


                    self.state = 1549
                    self.match(ClickHouseParser.MERGES)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1552
                self.tableIdentifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1553
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1554
                _la = self._input.LA(1)
                if not(_la==152 or _la==153):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1555
                self.match(ClickHouseParser.REPLICATED)
                self.state = 1556
                self.match(ClickHouseParser.SENDS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1557
                self.match(ClickHouseParser.SYSTEM)
                self.state = 1558
                self.match(ClickHouseParser.SYNC)
                self.state = 1559
                self.match(ClickHouseParser.REPLICA)
                self.state = 1560
                self.tableIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(ClickHouseParser.TRUNCATE, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def clusterClause(self):
            return self.getTypedRuleContext(ClickHouseParser.ClusterClauseContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_truncateStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateStmt" ):
                listener.enterTruncateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateStmt" ):
                listener.exitTruncateStmt(self)




    def truncateStmt(self):

        localctx = ClickHouseParser.TruncateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_truncateStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(ClickHouseParser.TRUNCATE)
            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1564
                self.match(ClickHouseParser.TEMPORARY)


            self.state = 1568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.state = 1567
                self.match(ClickHouseParser.TABLE)


            self.state = 1572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1570
                self.match(ClickHouseParser.IF)
                self.state = 1571
                self.match(ClickHouseParser.EXISTS)


            self.state = 1574
            self.tableIdentifier()
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1575
                self.clusterClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(ClickHouseParser.USE, 0)

        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_useStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStmt" ):
                listener.enterUseStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStmt" ):
                listener.exitUseStmt(self)




    def useStmt(self):

        localctx = ClickHouseParser.UseStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_useStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.match(ClickHouseParser.USE)
            self.state = 1579
            self.databaseIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WATCH(self):
            return self.getToken(ClickHouseParser.WATCH, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def EVENTS(self):
            return self.getToken(ClickHouseParser.EVENTS, 0)

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_watchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWatchStmt" ):
                listener.enterWatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWatchStmt" ):
                listener.exitWatchStmt(self)




    def watchStmt(self):

        localctx = ClickHouseParser.WatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_watchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(ClickHouseParser.WATCH)
            self.state = 1582
            self.tableIdentifier()
            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1583
                self.match(ClickHouseParser.EVENTS)


            self.state = 1588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 1586
                self.match(ClickHouseParser.LIMIT)
                self.state = 1587
                self.match(ClickHouseParser.DECIMAL_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnTypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnTypeExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnTypeExprNestedContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnTypeExprNested" ):
                listener.enterColumnTypeExprNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnTypeExprNested" ):
                listener.exitColumnTypeExprNested(self)


    class ColumnTypeExprParamContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnTypeExprParam" ):
                listener.enterColumnTypeExprParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnTypeExprParam" ):
                listener.exitColumnTypeExprParam(self)


    class ColumnTypeExprSimpleContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnTypeExprSimple" ):
                listener.enterColumnTypeExprSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnTypeExprSimple" ):
                listener.exitColumnTypeExprSimple(self)


    class ColumnTypeExprComplexContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnTypeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnTypeExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnTypeExprComplex" ):
                listener.enterColumnTypeExprComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnTypeExprComplex" ):
                listener.exitColumnTypeExprComplex(self)


    class ColumnTypeExprEnumContext(ColumnTypeExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnTypeExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.EnumValueContext,i)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnTypeExprEnum" ):
                listener.enterColumnTypeExprEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnTypeExprEnum" ):
                listener.exitColumnTypeExprEnum(self)



    def columnTypeExpr(self):

        localctx = ClickHouseParser.ColumnTypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_columnTypeExpr)
        self._la = 0 # Token type
        try:
            self.state = 1637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ColumnTypeExprSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1590
                self.identifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ColumnTypeExprNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1591
                self.identifier()
                self.state = 1592
                self.match(ClickHouseParser.LPAREN)
                self.state = 1593
                self.identifier()
                self.state = 1594
                self.columnTypeExpr()
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 1595
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1596
                    self.identifier()
                    self.state = 1597
                    self.columnTypeExpr()
                    self.state = 1603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1604
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ColumnTypeExprEnumContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1606
                self.identifier()
                self.state = 1607
                self.match(ClickHouseParser.LPAREN)
                self.state = 1608
                self.enumValue()
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 1609
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1610
                    self.enumValue()
                    self.state = 1615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1616
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.ColumnTypeExprComplexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1618
                self.identifier()
                self.state = 1619
                self.match(ClickHouseParser.LPAREN)
                self.state = 1620
                self.columnTypeExpr()
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 1621
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1622
                    self.columnTypeExpr()
                    self.state = 1627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1628
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.ColumnTypeExprParamContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1630
                self.identifier()
                self.state = 1631
                self.match(ClickHouseParser.LPAREN)
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                    self.state = 1632
                    self.columnExprList()


                self.state = 1635
                self.match(ClickHouseParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnsExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnsExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnsExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnExprList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprList" ):
                listener.enterColumnExprList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprList" ):
                listener.exitColumnExprList(self)




    def columnExprList(self):

        localctx = ClickHouseParser.ColumnExprListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_columnExprList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.columnsExpr()
            self.state = 1644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1640
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1641
                    self.columnsExpr() 
                self.state = 1646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnsExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnsExprColumnContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsExprColumn" ):
                listener.enterColumnsExprColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsExprColumn" ):
                listener.exitColumnsExprColumn(self)


    class ColumnsExprAsteriskContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(ClickHouseParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsExprAsterisk" ):
                listener.enterColumnsExprAsterisk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsExprAsterisk" ):
                listener.exitColumnsExprAsterisk(self)


    class ColumnsExprSubqueryContext(ColumnsExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnsExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnsExprSubquery" ):
                listener.enterColumnsExprSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnsExprSubquery" ):
                listener.exitColumnsExprSubquery(self)



    def columnsExpr(self):

        localctx = ClickHouseParser.ColumnsExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_columnsExpr)
        self._la = 0 # Token type
        try:
            self.state = 1658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ColumnsExprAsteriskContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4611686018427387903) != 0):
                    self.state = 1647
                    self.tableIdentifier()
                    self.state = 1648
                    self.match(ClickHouseParser.DOT)


                self.state = 1652
                self.match(ClickHouseParser.ASTERISK)
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ColumnsExprSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1653
                self.match(ClickHouseParser.LPAREN)
                self.state = 1654
                self.selectUnionStmt()
                self.state = 1655
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ColumnsExprColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1657
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ColumnExprTernaryOpContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def QUERY(self):
            return self.getToken(ClickHouseParser.QUERY, 0)
        def COLON(self):
            return self.getToken(ClickHouseParser.COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprTernaryOp" ):
                listener.enterColumnExprTernaryOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprTernaryOp" ):
                listener.exitColumnExprTernaryOp(self)


    class ColumnExprAliasContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(ClickHouseParser.AliasContext,0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprAlias" ):
                listener.enterColumnExprAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprAlias" ):
                listener.exitColumnExprAlias(self)


    class ColumnExprExtractContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(ClickHouseParser.EXTRACT, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def interval(self):
            return self.getTypedRuleContext(ClickHouseParser.IntervalContext,0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprExtract" ):
                listener.enterColumnExprExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprExtract" ):
                listener.exitColumnExprExtract(self)


    class ColumnExprNegateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DASH(self):
            return self.getToken(ClickHouseParser.DASH, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprNegate" ):
                listener.enterColumnExprNegate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprNegate" ):
                listener.exitColumnExprNegate(self)


    class ColumnExprSubqueryContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprSubquery" ):
                listener.enterColumnExprSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprSubquery" ):
                listener.exitColumnExprSubquery(self)


    class ColumnExprLiteralContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprLiteral" ):
                listener.enterColumnExprLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprLiteral" ):
                listener.exitColumnExprLiteral(self)


    class ColumnExprArrayContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LBRACKET(self):
            return self.getToken(ClickHouseParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(ClickHouseParser.RBRACKET, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprArray" ):
                listener.enterColumnExprArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprArray" ):
                listener.exitColumnExprArray(self)


    class ColumnExprSubstringContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(ClickHouseParser.SUBSTRING, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def FOR(self):
            return self.getToken(ClickHouseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprSubstring" ):
                listener.enterColumnExprSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprSubstring" ):
                listener.exitColumnExprSubstring(self)


    class ColumnExprCastContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(ClickHouseParser.CAST, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def columnTypeExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnTypeExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprCast" ):
                listener.enterColumnExprCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprCast" ):
                listener.exitColumnExprCast(self)


    class ColumnExprOrContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprOr" ):
                listener.enterColumnExprOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprOr" ):
                listener.exitColumnExprOr(self)


    class ColumnExprPrecedence1Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def ASTERISK(self):
            return self.getToken(ClickHouseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(ClickHouseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(ClickHouseParser.PERCENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprPrecedence1" ):
                listener.enterColumnExprPrecedence1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprPrecedence1" ):
                listener.exitColumnExprPrecedence1(self)


    class ColumnExprPrecedence2Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def PLUS(self):
            return self.getToken(ClickHouseParser.PLUS, 0)
        def DASH(self):
            return self.getToken(ClickHouseParser.DASH, 0)
        def CONCAT(self):
            return self.getToken(ClickHouseParser.CONCAT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprPrecedence2" ):
                listener.enterColumnExprPrecedence2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprPrecedence2" ):
                listener.exitColumnExprPrecedence2(self)


    class ColumnExprPrecedence3Context(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def EQ_DOUBLE(self):
            return self.getToken(ClickHouseParser.EQ_DOUBLE, 0)
        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)
        def NOT_EQ(self):
            return self.getToken(ClickHouseParser.NOT_EQ, 0)
        def LE(self):
            return self.getToken(ClickHouseParser.LE, 0)
        def GE(self):
            return self.getToken(ClickHouseParser.GE, 0)
        def LT(self):
            return self.getToken(ClickHouseParser.LT, 0)
        def GT(self):
            return self.getToken(ClickHouseParser.GT, 0)
        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)
        def LIKE(self):
            return self.getToken(ClickHouseParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(ClickHouseParser.ILIKE, 0)
        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprPrecedence3" ):
                listener.enterColumnExprPrecedence3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprPrecedence3" ):
                listener.exitColumnExprPrecedence3(self)


    class ColumnExprIntervalContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(ClickHouseParser.INTERVAL, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def interval(self):
            return self.getTypedRuleContext(ClickHouseParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprInterval" ):
                listener.enterColumnExprInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprInterval" ):
                listener.exitColumnExprInterval(self)


    class ColumnExprIsNullContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def IS(self):
            return self.getToken(ClickHouseParser.IS, 0)
        def NULL_SQL(self):
            return self.getToken(ClickHouseParser.NULL_SQL, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprIsNull" ):
                listener.enterColumnExprIsNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprIsNull" ):
                listener.exitColumnExprIsNull(self)


    class ColumnExprWinFunctionTargetContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)

        def OVER(self):
            return self.getToken(ClickHouseParser.OVER, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprWinFunctionTarget" ):
                listener.enterColumnExprWinFunctionTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprWinFunctionTarget" ):
                listener.exitColumnExprWinFunctionTarget(self)


    class ColumnExprTrimContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(ClickHouseParser.TRIM, 0)
        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)
        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)
        def BOTH(self):
            return self.getToken(ClickHouseParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(ClickHouseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(ClickHouseParser.TRAILING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprTrim" ):
                listener.enterColumnExprTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprTrim" ):
                listener.exitColumnExprTrim(self)


    class ColumnExprTupleContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprTuple" ):
                listener.enterColumnExprTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprTuple" ):
                listener.exitColumnExprTuple(self)


    class ColumnExprArrayAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def LBRACKET(self):
            return self.getToken(ClickHouseParser.LBRACKET, 0)
        def RBRACKET(self):
            return self.getToken(ClickHouseParser.RBRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprArrayAccess" ):
                listener.enterColumnExprArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprArrayAccess" ):
                listener.exitColumnExprArrayAccess(self)


    class ColumnExprBetweenContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def BETWEEN(self):
            return self.getToken(ClickHouseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)
        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprBetween" ):
                listener.enterColumnExprBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprBetween" ):
                listener.exitColumnExprBetween(self)


    class ColumnExprParensContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprParens" ):
                listener.enterColumnExprParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprParens" ):
                listener.exitColumnExprParens(self)


    class ColumnExprTimestampContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIMESTAMP(self):
            return self.getToken(ClickHouseParser.TIMESTAMP, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprTimestamp" ):
                listener.enterColumnExprTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprTimestamp" ):
                listener.exitColumnExprTimestamp(self)


    class ColumnExprAndContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprAnd" ):
                listener.enterColumnExprAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprAnd" ):
                listener.exitColumnExprAnd(self)


    class ColumnExprTupleAccessContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)
        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprTupleAccess" ):
                listener.enterColumnExprTupleAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprTupleAccess" ):
                listener.exitColumnExprTupleAccess(self)


    class ColumnExprCaseContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(ClickHouseParser.CASE, 0)
        def END(self):
            return self.getToken(ClickHouseParser.END, 0)
        def columnExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,i)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.WHEN)
            else:
                return self.getToken(ClickHouseParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.THEN)
            else:
                return self.getToken(ClickHouseParser.THEN, i)
        def ELSE(self):
            return self.getToken(ClickHouseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprCase" ):
                listener.enterColumnExprCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprCase" ):
                listener.exitColumnExprCase(self)


    class ColumnExprDateContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(ClickHouseParser.DATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprDate" ):
                listener.enterColumnExprDate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprDate" ):
                listener.exitColumnExprDate(self)


    class ColumnExprNotContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)
        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprNot" ):
                listener.enterColumnExprNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprNot" ):
                listener.exitColumnExprNot(self)


    class ColumnExprWinFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def OVER(self):
            return self.getToken(ClickHouseParser.OVER, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)
        def windowExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.WindowExprContext,0)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)
        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprWinFunction" ):
                listener.enterColumnExprWinFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprWinFunction" ):
                listener.exitColumnExprWinFunction(self)


    class ColumnExprIdentifierContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprIdentifier" ):
                listener.enterColumnExprIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprIdentifier" ):
                listener.exitColumnExprIdentifier(self)


    class ColumnExprFunctionContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.LPAREN)
            else:
                return self.getToken(ClickHouseParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.RPAREN)
            else:
                return self.getToken(ClickHouseParser.RPAREN, i)
        def DISTINCT(self):
            return self.getToken(ClickHouseParser.DISTINCT, 0)
        def columnArgList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnArgListContext,0)

        def columnExprList(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprFunction" ):
                listener.enterColumnExprFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprFunction" ):
                listener.exitColumnExprFunction(self)


    class ColumnExprAsteriskContext(ColumnExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.ColumnExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(ClickHouseParser.ASTERISK, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnExprAsterisk" ):
                listener.enterColumnExprAsterisk(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnExprAsterisk" ):
                listener.exitColumnExprAsterisk(self)



    def columnExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClickHouseParser.ColumnExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_columnExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.ColumnExprCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1661
                self.match(ClickHouseParser.CASE)
                self.state = 1663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1662
                    self.columnExpr(0)


                self.state = 1670 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1665
                    self.match(ClickHouseParser.WHEN)
                    self.state = 1666
                    self.columnExpr(0)
                    self.state = 1667
                    self.match(ClickHouseParser.THEN)
                    self.state = 1668
                    self.columnExpr(0)
                    self.state = 1672 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==185):
                        break

                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1674
                    self.match(ClickHouseParser.ELSE)
                    self.state = 1675
                    self.columnExpr(0)


                self.state = 1678
                self.match(ClickHouseParser.END)
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.ColumnExprCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1680
                self.match(ClickHouseParser.CAST)
                self.state = 1681
                self.match(ClickHouseParser.LPAREN)
                self.state = 1682
                self.columnExpr(0)
                self.state = 1683
                self.match(ClickHouseParser.AS)
                self.state = 1684
                self.columnTypeExpr()
                self.state = 1685
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.ColumnExprDateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1687
                self.match(ClickHouseParser.DATE)
                self.state = 1688
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                localctx = ClickHouseParser.ColumnExprExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1689
                self.match(ClickHouseParser.EXTRACT)
                self.state = 1690
                self.match(ClickHouseParser.LPAREN)
                self.state = 1691
                self.interval()
                self.state = 1692
                self.match(ClickHouseParser.FROM)
                self.state = 1693
                self.columnExpr(0)
                self.state = 1694
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 5:
                localctx = ClickHouseParser.ColumnExprIntervalContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1696
                self.match(ClickHouseParser.INTERVAL)
                self.state = 1697
                self.columnExpr(0)
                self.state = 1698
                self.interval()
                pass

            elif la_ == 6:
                localctx = ClickHouseParser.ColumnExprSubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1700
                self.match(ClickHouseParser.SUBSTRING)
                self.state = 1701
                self.match(ClickHouseParser.LPAREN)
                self.state = 1702
                self.columnExpr(0)
                self.state = 1703
                self.match(ClickHouseParser.FROM)
                self.state = 1704
                self.columnExpr(0)
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 1705
                    self.match(ClickHouseParser.FOR)
                    self.state = 1706
                    self.columnExpr(0)


                self.state = 1709
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 7:
                localctx = ClickHouseParser.ColumnExprTimestampContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1711
                self.match(ClickHouseParser.TIMESTAMP)
                self.state = 1712
                self.match(ClickHouseParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = ClickHouseParser.ColumnExprTrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1713
                self.match(ClickHouseParser.TRIM)
                self.state = 1714
                self.match(ClickHouseParser.LPAREN)
                self.state = 1715
                _la = self._input.LA(1)
                if not(_la==17 or _la==94 or _la==169):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1716
                self.match(ClickHouseParser.STRING_LITERAL)
                self.state = 1717
                self.match(ClickHouseParser.FROM)
                self.state = 1718
                self.columnExpr(0)
                self.state = 1719
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 9:
                localctx = ClickHouseParser.ColumnExprWinFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1721
                self.identifier()

                self.state = 1722
                self.match(ClickHouseParser.LPAREN)
                self.state = 1724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                    self.state = 1723
                    self.columnExprList()


                self.state = 1726
                self.match(ClickHouseParser.RPAREN)
                self.state = 1728
                self.match(ClickHouseParser.OVER)
                self.state = 1729
                self.match(ClickHouseParser.LPAREN)
                self.state = 1730
                self.windowExpr()
                self.state = 1731
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 10:
                localctx = ClickHouseParser.ColumnExprWinFunctionTargetContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1733
                self.identifier()

                self.state = 1734
                self.match(ClickHouseParser.LPAREN)
                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                    self.state = 1735
                    self.columnExprList()


                self.state = 1738
                self.match(ClickHouseParser.RPAREN)
                self.state = 1740
                self.match(ClickHouseParser.OVER)
                self.state = 1741
                self.identifier()
                pass

            elif la_ == 11:
                localctx = ClickHouseParser.ColumnExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1743
                self.identifier()
                self.state = 1749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1744
                    self.match(ClickHouseParser.LPAREN)
                    self.state = 1746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                        self.state = 1745
                        self.columnExprList()


                    self.state = 1748
                    self.match(ClickHouseParser.RPAREN)


                self.state = 1751
                self.match(ClickHouseParser.LPAREN)
                self.state = 1753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1752
                    self.match(ClickHouseParser.DISTINCT)


                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                    self.state = 1755
                    self.columnArgList()


                self.state = 1758
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 12:
                localctx = ClickHouseParser.ColumnExprLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1760
                self.literal()
                pass

            elif la_ == 13:
                localctx = ClickHouseParser.ColumnExprNegateContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1761
                self.match(ClickHouseParser.DASH)
                self.state = 1762
                self.columnExpr(17)
                pass

            elif la_ == 14:
                localctx = ClickHouseParser.ColumnExprNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1763
                self.match(ClickHouseParser.NOT)
                self.state = 1764
                self.columnExpr(12)
                pass

            elif la_ == 15:
                localctx = ClickHouseParser.ColumnExprAsteriskContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -1) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -633318697631745) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 4611686018427387903) != 0):
                    self.state = 1765
                    self.tableIdentifier()
                    self.state = 1766
                    self.match(ClickHouseParser.DOT)


                self.state = 1770
                self.match(ClickHouseParser.ASTERISK)
                pass

            elif la_ == 16:
                localctx = ClickHouseParser.ColumnExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1771
                self.match(ClickHouseParser.LPAREN)
                self.state = 1772
                self.selectUnionStmt()
                self.state = 1773
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = ClickHouseParser.ColumnExprParensContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1775
                self.match(ClickHouseParser.LPAREN)
                self.state = 1776
                self.columnExpr(0)
                self.state = 1777
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 18:
                localctx = ClickHouseParser.ColumnExprTupleContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1779
                self.match(ClickHouseParser.LPAREN)
                self.state = 1780
                self.columnExprList()
                self.state = 1781
                self.match(ClickHouseParser.RPAREN)
                pass

            elif la_ == 19:
                localctx = ClickHouseParser.ColumnExprArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1783
                self.match(ClickHouseParser.LBRACKET)
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 72376511) != 0):
                    self.state = 1784
                    self.columnExprList()


                self.state = 1787
                self.match(ClickHouseParser.RBRACKET)
                pass

            elif la_ == 20:
                localctx = ClickHouseParser.ColumnExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1788
                self.columnIdentifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1862
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1860
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                    if la_ == 1:
                        localctx = ClickHouseParser.ColumnExprPrecedence1Context(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1791
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1792
                        _la = self._input.LA(1)
                        if not(((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & 134479873) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1793
                        self.columnExpr(17)
                        pass

                    elif la_ == 2:
                        localctx = ClickHouseParser.ColumnExprPrecedence2Context(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1794
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1795
                        _la = self._input.LA(1)
                        if not(((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 16387) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1796
                        self.columnExpr(16)
                        pass

                    elif la_ == 3:
                        localctx = ClickHouseParser.ColumnExprPrecedence3Context(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1797
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1816
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                        if la_ == 1:
                            self.state = 1798
                            self.match(ClickHouseParser.EQ_DOUBLE)
                            pass

                        elif la_ == 2:
                            self.state = 1799
                            self.match(ClickHouseParser.EQ_SINGLE)
                            pass

                        elif la_ == 3:
                            self.state = 1800
                            self.match(ClickHouseParser.NOT_EQ)
                            pass

                        elif la_ == 4:
                            self.state = 1801
                            self.match(ClickHouseParser.LE)
                            pass

                        elif la_ == 5:
                            self.state = 1802
                            self.match(ClickHouseParser.GE)
                            pass

                        elif la_ == 6:
                            self.state = 1803
                            self.match(ClickHouseParser.LT)
                            pass

                        elif la_ == 7:
                            self.state = 1804
                            self.match(ClickHouseParser.GT)
                            pass

                        elif la_ == 8:
                            self.state = 1806
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==70:
                                self.state = 1805
                                self.match(ClickHouseParser.GLOBAL)


                            self.state = 1809
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==114:
                                self.state = 1808
                                self.match(ClickHouseParser.NOT)


                            self.state = 1811
                            self.match(ClickHouseParser.IN)
                            pass

                        elif la_ == 9:
                            self.state = 1813
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==114:
                                self.state = 1812
                                self.match(ClickHouseParser.NOT)


                            self.state = 1815
                            _la = self._input.LA(1)
                            if not(_la==78 or _la==97):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass


                        self.state = 1818
                        self.columnExpr(15)
                        pass

                    elif la_ == 4:
                        localctx = ClickHouseParser.ColumnExprAndContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1819
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1820
                        self.match(ClickHouseParser.AND)
                        self.state = 1821
                        self.columnExpr(12)
                        pass

                    elif la_ == 5:
                        localctx = ClickHouseParser.ColumnExprOrContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1822
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1823
                        self.match(ClickHouseParser.OR)
                        self.state = 1824
                        self.columnExpr(11)
                        pass

                    elif la_ == 6:
                        localctx = ClickHouseParser.ColumnExprBetweenContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1825
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1827
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==114:
                            self.state = 1826
                            self.match(ClickHouseParser.NOT)


                        self.state = 1829
                        self.match(ClickHouseParser.BETWEEN)
                        self.state = 1830
                        self.columnExpr(0)
                        self.state = 1831
                        self.match(ClickHouseParser.AND)
                        self.state = 1832
                        self.columnExpr(10)
                        pass

                    elif la_ == 7:
                        localctx = ClickHouseParser.ColumnExprTernaryOpContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1834
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1835
                        self.match(ClickHouseParser.QUERY)
                        self.state = 1836
                        self.columnExpr(0)
                        self.state = 1837
                        self.match(ClickHouseParser.COLON)
                        self.state = 1838
                        self.columnExpr(8)
                        pass

                    elif la_ == 8:
                        localctx = ClickHouseParser.ColumnExprArrayAccessContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1840
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1841
                        self.match(ClickHouseParser.LBRACKET)
                        self.state = 1842
                        self.columnExpr(0)
                        self.state = 1843
                        self.match(ClickHouseParser.RBRACKET)
                        pass

                    elif la_ == 9:
                        localctx = ClickHouseParser.ColumnExprTupleAccessContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1845
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1846
                        self.match(ClickHouseParser.DOT)
                        self.state = 1847
                        self.match(ClickHouseParser.DECIMAL_LITERAL)
                        pass

                    elif la_ == 10:
                        localctx = ClickHouseParser.ColumnExprIsNullContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1848
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1849
                        self.match(ClickHouseParser.IS)
                        self.state = 1851
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==114:
                            self.state = 1850
                            self.match(ClickHouseParser.NOT)


                        self.state = 1853
                        self.match(ClickHouseParser.NULL_SQL)
                        pass

                    elif la_ == 11:
                        localctx = ClickHouseParser.ColumnExprAliasContext(self, ClickHouseParser.ColumnExprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_columnExpr)
                        self.state = 1854
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1858
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [35, 61, 76, 90, 192]:
                            self.state = 1855
                            self.alias()
                            pass
                        elif token in [10]:
                            self.state = 1856
                            self.match(ClickHouseParser.AS)
                            self.state = 1857
                            self.identifier()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 1864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,247,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ColumnArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.ColumnArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.ColumnArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnArgList" ):
                listener.enterColumnArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnArgList" ):
                listener.exitColumnArgList(self)




    def columnArgList(self):

        localctx = ClickHouseParser.ColumnArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_columnArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1865
            self.columnArgExpr()
            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 1866
                self.match(ClickHouseParser.COMMA)
                self.state = 1867
                self.columnArgExpr()
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnLambdaExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnLambdaExprContext,0)


        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnArgExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnArgExpr" ):
                listener.enterColumnArgExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnArgExpr" ):
                listener.exitColumnArgExpr(self)




    def columnArgExpr(self):

        localctx = ClickHouseParser.ColumnArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_columnArgExpr)
        try:
            self.state = 1875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1873
                self.columnLambdaExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                self.columnExpr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnLambdaExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(ClickHouseParser.ARROW, 0)

        def columnExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.ColumnExprContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnLambdaExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnLambdaExpr" ):
                listener.enterColumnLambdaExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnLambdaExpr" ):
                listener.exitColumnLambdaExpr(self)




    def columnLambdaExpr(self):

        localctx = ClickHouseParser.ColumnLambdaExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_columnLambdaExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1896
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [214]:
                self.state = 1877
                self.match(ClickHouseParser.LPAREN)
                self.state = 1878
                self.identifier()
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 1879
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1880
                    self.identifier()
                    self.state = 1885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1886
                self.match(ClickHouseParser.RPAREN)
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192]:
                self.state = 1888
                self.identifier()
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==203:
                    self.state = 1889
                    self.match(ClickHouseParser.COMMA)
                    self.state = 1890
                    self.identifier()
                    self.state = 1895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1898
            self.match(ClickHouseParser.ARROW)
            self.state = 1899
            self.columnExpr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_columnIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnIdentifier" ):
                listener.enterColumnIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnIdentifier" ):
                listener.exitColumnIdentifier(self)




    def columnIdentifier(self):

        localctx = ClickHouseParser.ColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_columnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
            if la_ == 1:
                self.state = 1901
                self.tableIdentifier()
                self.state = 1902
                self.match(ClickHouseParser.DOT)


            self.state = 1906
            self.nestedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,i)


        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_nestedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedIdentifier" ):
                listener.enterNestedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedIdentifier" ):
                listener.exitNestedIdentifier(self)




    def nestedIdentifier(self):

        localctx = ClickHouseParser.NestedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_nestedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            self.identifier()
            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 1909
                self.match(ClickHouseParser.DOT)
                self.state = 1910
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TableExprIdentifierContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.TableIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExprIdentifier" ):
                listener.enterTableExprIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExprIdentifier" ):
                listener.exitTableExprIdentifier(self)


    class TableExprSubqueryContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)
        def selectUnionStmt(self):
            return self.getTypedRuleContext(ClickHouseParser.SelectUnionStmtContext,0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExprSubquery" ):
                listener.enterTableExprSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExprSubquery" ):
                listener.exitTableExprSubquery(self)


    class TableExprAliasContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableExprContext,0)

        def alias(self):
            return self.getTypedRuleContext(ClickHouseParser.AliasContext,0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)
        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExprAlias" ):
                listener.enterTableExprAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExprAlias" ):
                listener.exitTableExprAlias(self)


    class TableExprFunctionContext(TableExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a ClickHouseParser.TableExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableExprFunction" ):
                listener.enterTableExprFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableExprFunction" ):
                listener.exitTableExprFunction(self)



    def tableExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ClickHouseParser.TableExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 210
        self.enterRecursionRule(localctx, 210, self.RULE_tableExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                localctx = ClickHouseParser.TableExprIdentifierContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1914
                self.tableIdentifier()
                pass

            elif la_ == 2:
                localctx = ClickHouseParser.TableExprFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1915
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                localctx = ClickHouseParser.TableExprSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1916
                self.match(ClickHouseParser.LPAREN)
                self.state = 1917
                self.selectUnionStmt()
                self.state = 1918
                self.match(ClickHouseParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,257,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ClickHouseParser.TableExprAliasContext(self, ClickHouseParser.TableExprContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_tableExpr)
                    self.state = 1922
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1926
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [35, 61, 76, 90, 192]:
                        self.state = 1923
                        self.alias()
                        pass
                    elif token in [10]:
                        self.state = 1924
                        self.match(ClickHouseParser.AS)
                        self.state = 1925
                        self.identifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TableFunctionExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(ClickHouseParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ClickHouseParser.RPAREN, 0)

        def tableArgList(self):
            return self.getTypedRuleContext(ClickHouseParser.TableArgListContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableFunctionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunctionExpr" ):
                listener.enterTableFunctionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunctionExpr" ):
                listener.exitTableFunctionExpr(self)




    def tableFunctionExpr(self):

        localctx = ClickHouseParser.TableFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tableFunctionExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1933
            self.identifier()
            self.state = 1934
            self.match(ClickHouseParser.LPAREN)
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -5) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 67133503) != 0):
                self.state = 1935
                self.tableArgList()


            self.state = 1938
            self.match(ClickHouseParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def databaseIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.DatabaseIdentifierContext,0)


        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIdentifier" ):
                listener.enterTableIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIdentifier" ):
                listener.exitTableIdentifier(self)




    def tableIdentifier(self):

        localctx = ClickHouseParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1940
                self.databaseIdentifier()
                self.state = 1941
                self.match(ClickHouseParser.DOT)


            self.state = 1945
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableArgExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ClickHouseParser.TableArgExprContext)
            else:
                return self.getTypedRuleContext(ClickHouseParser.TableArgExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.COMMA)
            else:
                return self.getToken(ClickHouseParser.COMMA, i)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgList" ):
                listener.enterTableArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgList" ):
                listener.exitTableArgList(self)




    def tableArgList(self):

        localctx = ClickHouseParser.TableArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tableArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.tableArgExpr()
            self.state = 1952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==203:
                self.state = 1948
                self.match(ClickHouseParser.COMMA)
                self.state = 1949
                self.tableArgExpr()
                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableArgExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestedIdentifier(self):
            return self.getTypedRuleContext(ClickHouseParser.NestedIdentifierContext,0)


        def tableFunctionExpr(self):
            return self.getTypedRuleContext(ClickHouseParser.TableFunctionExprContext,0)


        def literal(self):
            return self.getTypedRuleContext(ClickHouseParser.LiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_tableArgExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableArgExpr" ):
                listener.enterTableArgExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableArgExpr" ):
                listener.exitTableArgExpr(self)




    def tableArgExpr(self):

        localctx = ClickHouseParser.TableArgExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_tableArgExpr)
        try:
            self.state = 1958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1955
                self.nestedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1956
                self.tableFunctionExpr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1957
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatabaseIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_databaseIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabaseIdentifier" ):
                listener.enterDatabaseIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabaseIdentifier" ):
                listener.exitDatabaseIdentifier(self)




    def databaseIdentifier(self):

        localctx = ClickHouseParser.DatabaseIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_databaseIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1960
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOATING_LITERAL(self):
            return self.getToken(ClickHouseParser.FLOATING_LITERAL, 0)

        def DOT(self):
            return self.getToken(ClickHouseParser.DOT, 0)

        def DECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(ClickHouseParser.DECIMAL_LITERAL)
            else:
                return self.getToken(ClickHouseParser.DECIMAL_LITERAL, i)

        def OCTAL_LITERAL(self):
            return self.getToken(ClickHouseParser.OCTAL_LITERAL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_floatingLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatingLiteral" ):
                listener.enterFloatingLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatingLiteral" ):
                listener.exitFloatingLiteral(self)




    def floatingLiteral(self):

        localctx = ClickHouseParser.FloatingLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_floatingLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1962
                self.match(ClickHouseParser.FLOATING_LITERAL)
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1963
                self.match(ClickHouseParser.DOT)
                self.state = 1964
                _la = self._input.LA(1)
                if not(_la==194 or _la==195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1965
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                self.state = 1966
                self.match(ClickHouseParser.DOT)
                self.state = 1968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1967
                    _la = self._input.LA(1)
                    if not(_la==194 or _la==195):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatingLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.FloatingLiteralContext,0)


        def OCTAL_LITERAL(self):
            return self.getToken(ClickHouseParser.OCTAL_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0)

        def INF(self):
            return self.getToken(ClickHouseParser.INF, 0)

        def NAN_SQL(self):
            return self.getToken(ClickHouseParser.NAN_SQL, 0)

        def PLUS(self):
            return self.getToken(ClickHouseParser.PLUS, 0)

        def DASH(self):
            return self.getToken(ClickHouseParser.DASH, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)




    def numberLiteral(self):

        localctx = ClickHouseParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==205 or _la==218:
                self.state = 1972
                _la = self._input.LA(1)
                if not(_la==205 or _la==218):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 1975
                self.floatingLiteral()
                pass

            elif la_ == 2:
                self.state = 1976
                self.match(ClickHouseParser.OCTAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 1977
                self.match(ClickHouseParser.DECIMAL_LITERAL)
                pass

            elif la_ == 4:
                self.state = 1978
                self.match(ClickHouseParser.HEXADECIMAL_LITERAL)
                pass

            elif la_ == 5:
                self.state = 1979
                self.match(ClickHouseParser.INF)
                pass

            elif la_ == 6:
                self.state = 1980
                self.match(ClickHouseParser.NAN_SQL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,0)


        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def NULL_SQL(self):
            return self.getToken(ClickHouseParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = ClickHouseParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_literal)
        try:
            self.state = 1986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81, 112, 193, 194, 195, 196, 205, 206, 218]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1983
                self.numberLiteral()
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1984
                self.match(ClickHouseParser.STRING_LITERAL)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1985
                self.match(ClickHouseParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECOND(self):
            return self.getToken(ClickHouseParser.SECOND, 0)

        def MINUTE(self):
            return self.getToken(ClickHouseParser.MINUTE, 0)

        def HOUR(self):
            return self.getToken(ClickHouseParser.HOUR, 0)

        def DAY(self):
            return self.getToken(ClickHouseParser.DAY, 0)

        def WEEK(self):
            return self.getToken(ClickHouseParser.WEEK, 0)

        def MONTH(self):
            return self.getToken(ClickHouseParser.MONTH, 0)

        def QUARTER(self):
            return self.getToken(ClickHouseParser.QUARTER, 0)

        def YEAR(self):
            return self.getToken(ClickHouseParser.YEAR, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = ClickHouseParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            _la = self._input.LA(1)
            if not(_la==36 or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 72057615512764417) != 0) or ((((_la - 144)) & ~0x3f) == 0 and ((1 << (_la - 144)) & 36283883716609) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(ClickHouseParser.AFTER, 0)

        def ALIAS(self):
            return self.getToken(ClickHouseParser.ALIAS, 0)

        def ALL(self):
            return self.getToken(ClickHouseParser.ALL, 0)

        def ALTER(self):
            return self.getToken(ClickHouseParser.ALTER, 0)

        def AND(self):
            return self.getToken(ClickHouseParser.AND, 0)

        def ANTI(self):
            return self.getToken(ClickHouseParser.ANTI, 0)

        def ANY(self):
            return self.getToken(ClickHouseParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(ClickHouseParser.ARRAY, 0)

        def AS(self):
            return self.getToken(ClickHouseParser.AS, 0)

        def ASCENDING(self):
            return self.getToken(ClickHouseParser.ASCENDING, 0)

        def ASOF(self):
            return self.getToken(ClickHouseParser.ASOF, 0)

        def AST(self):
            return self.getToken(ClickHouseParser.AST, 0)

        def ASYNC(self):
            return self.getToken(ClickHouseParser.ASYNC, 0)

        def ATTACH(self):
            return self.getToken(ClickHouseParser.ATTACH, 0)

        def BETWEEN(self):
            return self.getToken(ClickHouseParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(ClickHouseParser.BOTH, 0)

        def BY(self):
            return self.getToken(ClickHouseParser.BY, 0)

        def CASE(self):
            return self.getToken(ClickHouseParser.CASE, 0)

        def CAST(self):
            return self.getToken(ClickHouseParser.CAST, 0)

        def CHECK(self):
            return self.getToken(ClickHouseParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(ClickHouseParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(ClickHouseParser.CLUSTER, 0)

        def CODEC(self):
            return self.getToken(ClickHouseParser.CODEC, 0)

        def COLLATE(self):
            return self.getToken(ClickHouseParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(ClickHouseParser.COLUMN, 0)

        def COMMENT(self):
            return self.getToken(ClickHouseParser.COMMENT, 0)

        def CONSTRAINT(self):
            return self.getToken(ClickHouseParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(ClickHouseParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(ClickHouseParser.CROSS, 0)

        def CUBE(self):
            return self.getToken(ClickHouseParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(ClickHouseParser.CURRENT, 0)

        def DATABASE(self):
            return self.getToken(ClickHouseParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(ClickHouseParser.DATABASES, 0)

        def DATE(self):
            return self.getToken(ClickHouseParser.DATE, 0)

        def DEDUPLICATE(self):
            return self.getToken(ClickHouseParser.DEDUPLICATE, 0)

        def DEFAULT(self):
            return self.getToken(ClickHouseParser.DEFAULT, 0)

        def DELAY(self):
            return self.getToken(ClickHouseParser.DELAY, 0)

        def DELETE(self):
            return self.getToken(ClickHouseParser.DELETE, 0)

        def DESCRIBE(self):
            return self.getToken(ClickHouseParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(ClickHouseParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(ClickHouseParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(ClickHouseParser.DETACH, 0)

        def DICTIONARIES(self):
            return self.getToken(ClickHouseParser.DICTIONARIES, 0)

        def DICTIONARY(self):
            return self.getToken(ClickHouseParser.DICTIONARY, 0)

        def DISK(self):
            return self.getToken(ClickHouseParser.DISK, 0)

        def DISTINCT(self):
            return self.getToken(ClickHouseParser.DISTINCT, 0)

        def DISTRIBUTED(self):
            return self.getToken(ClickHouseParser.DISTRIBUTED, 0)

        def DROP(self):
            return self.getToken(ClickHouseParser.DROP, 0)

        def ELSE(self):
            return self.getToken(ClickHouseParser.ELSE, 0)

        def END(self):
            return self.getToken(ClickHouseParser.END, 0)

        def ENGINE(self):
            return self.getToken(ClickHouseParser.ENGINE, 0)

        def EVENTS(self):
            return self.getToken(ClickHouseParser.EVENTS, 0)

        def EXISTS(self):
            return self.getToken(ClickHouseParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(ClickHouseParser.EXPLAIN, 0)

        def EXPRESSION(self):
            return self.getToken(ClickHouseParser.EXPRESSION, 0)

        def EXTRACT(self):
            return self.getToken(ClickHouseParser.EXTRACT, 0)

        def FETCHES(self):
            return self.getToken(ClickHouseParser.FETCHES, 0)

        def FINAL(self):
            return self.getToken(ClickHouseParser.FINAL, 0)

        def FIRST(self):
            return self.getToken(ClickHouseParser.FIRST, 0)

        def FLUSH(self):
            return self.getToken(ClickHouseParser.FLUSH, 0)

        def FOR(self):
            return self.getToken(ClickHouseParser.FOR, 0)

        def FOLLOWING(self):
            return self.getToken(ClickHouseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(ClickHouseParser.FORMAT, 0)

        def FREEZE(self):
            return self.getToken(ClickHouseParser.FREEZE, 0)

        def FROM(self):
            return self.getToken(ClickHouseParser.FROM, 0)

        def FULL(self):
            return self.getToken(ClickHouseParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(ClickHouseParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(ClickHouseParser.GLOBAL, 0)

        def GRANULARITY(self):
            return self.getToken(ClickHouseParser.GRANULARITY, 0)

        def GROUP(self):
            return self.getToken(ClickHouseParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(ClickHouseParser.HAVING, 0)

        def HIERARCHICAL(self):
            return self.getToken(ClickHouseParser.HIERARCHICAL, 0)

        def ID(self):
            return self.getToken(ClickHouseParser.ID, 0)

        def IF(self):
            return self.getToken(ClickHouseParser.IF, 0)

        def ILIKE(self):
            return self.getToken(ClickHouseParser.ILIKE, 0)

        def IN(self):
            return self.getToken(ClickHouseParser.IN, 0)

        def INDEX(self):
            return self.getToken(ClickHouseParser.INDEX, 0)

        def INJECTIVE(self):
            return self.getToken(ClickHouseParser.INJECTIVE, 0)

        def INNER(self):
            return self.getToken(ClickHouseParser.INNER, 0)

        def INSERT(self):
            return self.getToken(ClickHouseParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(ClickHouseParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(ClickHouseParser.INTO, 0)

        def IS(self):
            return self.getToken(ClickHouseParser.IS, 0)

        def IS_OBJECT_ID(self):
            return self.getToken(ClickHouseParser.IS_OBJECT_ID, 0)

        def JOIN(self):
            return self.getToken(ClickHouseParser.JOIN, 0)

        def JSON_FALSE(self):
            return self.getToken(ClickHouseParser.JSON_FALSE, 0)

        def JSON_TRUE(self):
            return self.getToken(ClickHouseParser.JSON_TRUE, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def KILL(self):
            return self.getToken(ClickHouseParser.KILL, 0)

        def LAST(self):
            return self.getToken(ClickHouseParser.LAST, 0)

        def LAYOUT(self):
            return self.getToken(ClickHouseParser.LAYOUT, 0)

        def LEADING(self):
            return self.getToken(ClickHouseParser.LEADING, 0)

        def LEFT(self):
            return self.getToken(ClickHouseParser.LEFT, 0)

        def LIFETIME(self):
            return self.getToken(ClickHouseParser.LIFETIME, 0)

        def LIKE(self):
            return self.getToken(ClickHouseParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(ClickHouseParser.LIMIT, 0)

        def LIVE(self):
            return self.getToken(ClickHouseParser.LIVE, 0)

        def LOCAL(self):
            return self.getToken(ClickHouseParser.LOCAL, 0)

        def LOGS(self):
            return self.getToken(ClickHouseParser.LOGS, 0)

        def MATERIALIZE(self):
            return self.getToken(ClickHouseParser.MATERIALIZE, 0)

        def MATERIALIZED(self):
            return self.getToken(ClickHouseParser.MATERIALIZED, 0)

        def MAX(self):
            return self.getToken(ClickHouseParser.MAX, 0)

        def MERGES(self):
            return self.getToken(ClickHouseParser.MERGES, 0)

        def MIN(self):
            return self.getToken(ClickHouseParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(ClickHouseParser.MODIFY, 0)

        def MOVE(self):
            return self.getToken(ClickHouseParser.MOVE, 0)

        def MUTATION(self):
            return self.getToken(ClickHouseParser.MUTATION, 0)

        def NO(self):
            return self.getToken(ClickHouseParser.NO, 0)

        def NOT(self):
            return self.getToken(ClickHouseParser.NOT, 0)

        def NULLS(self):
            return self.getToken(ClickHouseParser.NULLS, 0)

        def OFFSET(self):
            return self.getToken(ClickHouseParser.OFFSET, 0)

        def ON(self):
            return self.getToken(ClickHouseParser.ON, 0)

        def OPTIMIZE(self):
            return self.getToken(ClickHouseParser.OPTIMIZE, 0)

        def OR(self):
            return self.getToken(ClickHouseParser.OR, 0)

        def ORDER(self):
            return self.getToken(ClickHouseParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(ClickHouseParser.OUTER, 0)

        def OUTFILE(self):
            return self.getToken(ClickHouseParser.OUTFILE, 0)

        def OVER(self):
            return self.getToken(ClickHouseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(ClickHouseParser.PARTITION, 0)

        def POPULATE(self):
            return self.getToken(ClickHouseParser.POPULATE, 0)

        def PRECEDING(self):
            return self.getToken(ClickHouseParser.PRECEDING, 0)

        def PREWHERE(self):
            return self.getToken(ClickHouseParser.PREWHERE, 0)

        def PRIMARY(self):
            return self.getToken(ClickHouseParser.PRIMARY, 0)

        def RANGE(self):
            return self.getToken(ClickHouseParser.RANGE, 0)

        def RELOAD(self):
            return self.getToken(ClickHouseParser.RELOAD, 0)

        def REMOVE(self):
            return self.getToken(ClickHouseParser.REMOVE, 0)

        def RENAME(self):
            return self.getToken(ClickHouseParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(ClickHouseParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(ClickHouseParser.REPLICA, 0)

        def REPLICATED(self):
            return self.getToken(ClickHouseParser.REPLICATED, 0)

        def RIGHT(self):
            return self.getToken(ClickHouseParser.RIGHT, 0)

        def ROLLUP(self):
            return self.getToken(ClickHouseParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(ClickHouseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(ClickHouseParser.ROWS, 0)

        def SAMPLE(self):
            return self.getToken(ClickHouseParser.SAMPLE, 0)

        def SELECT(self):
            return self.getToken(ClickHouseParser.SELECT, 0)

        def SEMI(self):
            return self.getToken(ClickHouseParser.SEMI, 0)

        def SENDS(self):
            return self.getToken(ClickHouseParser.SENDS, 0)

        def SET(self):
            return self.getToken(ClickHouseParser.SET, 0)

        def SETTINGS(self):
            return self.getToken(ClickHouseParser.SETTINGS, 0)

        def SHOW(self):
            return self.getToken(ClickHouseParser.SHOW, 0)

        def SOURCE(self):
            return self.getToken(ClickHouseParser.SOURCE, 0)

        def START(self):
            return self.getToken(ClickHouseParser.START, 0)

        def STOP(self):
            return self.getToken(ClickHouseParser.STOP, 0)

        def SUBSTRING(self):
            return self.getToken(ClickHouseParser.SUBSTRING, 0)

        def SYNC(self):
            return self.getToken(ClickHouseParser.SYNC, 0)

        def SYNTAX(self):
            return self.getToken(ClickHouseParser.SYNTAX, 0)

        def SYSTEM(self):
            return self.getToken(ClickHouseParser.SYSTEM, 0)

        def TABLE(self):
            return self.getToken(ClickHouseParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(ClickHouseParser.TABLES, 0)

        def TEMPORARY(self):
            return self.getToken(ClickHouseParser.TEMPORARY, 0)

        def TEST(self):
            return self.getToken(ClickHouseParser.TEST, 0)

        def THEN(self):
            return self.getToken(ClickHouseParser.THEN, 0)

        def TIES(self):
            return self.getToken(ClickHouseParser.TIES, 0)

        def TIMEOUT(self):
            return self.getToken(ClickHouseParser.TIMEOUT, 0)

        def TIMESTAMP(self):
            return self.getToken(ClickHouseParser.TIMESTAMP, 0)

        def TOTALS(self):
            return self.getToken(ClickHouseParser.TOTALS, 0)

        def TRAILING(self):
            return self.getToken(ClickHouseParser.TRAILING, 0)

        def TRIM(self):
            return self.getToken(ClickHouseParser.TRIM, 0)

        def TRUNCATE(self):
            return self.getToken(ClickHouseParser.TRUNCATE, 0)

        def TO(self):
            return self.getToken(ClickHouseParser.TO, 0)

        def TOP(self):
            return self.getToken(ClickHouseParser.TOP, 0)

        def TTL(self):
            return self.getToken(ClickHouseParser.TTL, 0)

        def TYPE(self):
            return self.getToken(ClickHouseParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(ClickHouseParser.UNBOUNDED, 0)

        def UNION(self):
            return self.getToken(ClickHouseParser.UNION, 0)

        def UPDATE(self):
            return self.getToken(ClickHouseParser.UPDATE, 0)

        def USE(self):
            return self.getToken(ClickHouseParser.USE, 0)

        def USING(self):
            return self.getToken(ClickHouseParser.USING, 0)

        def UUID(self):
            return self.getToken(ClickHouseParser.UUID, 0)

        def VALUES(self):
            return self.getToken(ClickHouseParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(ClickHouseParser.VIEW, 0)

        def VOLUME(self):
            return self.getToken(ClickHouseParser.VOLUME, 0)

        def WATCH(self):
            return self.getToken(ClickHouseParser.WATCH, 0)

        def WHEN(self):
            return self.getToken(ClickHouseParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(ClickHouseParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(ClickHouseParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(ClickHouseParser.WITH, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = ClickHouseParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -68719476740) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2577255255640065) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -2377900603251687437) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordForAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(ClickHouseParser.DATE, 0)

        def FIRST(self):
            return self.getToken(ClickHouseParser.FIRST, 0)

        def ID(self):
            return self.getToken(ClickHouseParser.ID, 0)

        def KEY(self):
            return self.getToken(ClickHouseParser.KEY, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_keywordForAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordForAlias" ):
                listener.enterKeywordForAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordForAlias" ):
                listener.exitKeywordForAlias(self)




    def keywordForAlias(self):

        localctx = ClickHouseParser.KeywordForAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_keywordForAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 36030996109328385) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClickHouseParser.IDENTIFIER, 0)

        def keywordForAlias(self):
            return self.getTypedRuleContext(ClickHouseParser.KeywordForAliasContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = ClickHouseParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_alias)
        try:
            self.state = 1996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.match(ClickHouseParser.IDENTIFIER)
                pass
            elif token in [35, 61, 76, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1995
                self.keywordForAlias()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ClickHouseParser.IDENTIFIER, 0)

        def interval(self):
            return self.getTypedRuleContext(ClickHouseParser.IntervalContext,0)


        def keyword(self):
            return self.getTypedRuleContext(ClickHouseParser.KeywordContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = ClickHouseParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_identifier)
        try:
            self.state = 2001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1998
                self.match(ClickHouseParser.IDENTIFIER)
                pass
            elif token in [36, 75, 107, 109, 131, 144, 184, 189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1999
                self.interval()
                pass
            elif token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2000
                self.keyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierOrNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ClickHouseParser.IdentifierContext,0)


        def NULL_SQL(self):
            return self.getToken(ClickHouseParser.NULL_SQL, 0)

        def getRuleIndex(self):
            return ClickHouseParser.RULE_identifierOrNull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrNull" ):
                listener.enterIdentifierOrNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrNull" ):
                listener.exitIdentifierOrNull(self)




    def identifierOrNull(self):

        localctx = ClickHouseParser.IdentifierOrNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_identifierOrNull)
        try:
            self.state = 2005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2003
                self.identifier()
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2004
                self.match(ClickHouseParser.NULL_SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(ClickHouseParser.STRING_LITERAL, 0)

        def EQ_SINGLE(self):
            return self.getToken(ClickHouseParser.EQ_SINGLE, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(ClickHouseParser.NumberLiteralContext,0)


        def getRuleIndex(self):
            return ClickHouseParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)




    def enumValue(self):

        localctx = ClickHouseParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.match(ClickHouseParser.STRING_LITERAL)
            self.state = 2008
            self.match(ClickHouseParser.EQ_SINGLE)
            self.state = 2009
            self.numberLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[73] = self.joinExpr_sempred
        self._predicates[99] = self.columnExpr_sempred
        self._predicates[105] = self.tableExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def joinExpr_sempred(self, localctx:JoinExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

    def columnExpr_sempred(self, localctx:ColumnExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

    def tableExpr_sempred(self, localctx:TableExprContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




