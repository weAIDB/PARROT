# Generated from sql/teradata/TeradataSQLDCLParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1233,6860,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,1,0,1,0,1,0,3,0,
        604,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
        619,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,629,8,3,10,3,12,3,632,
        9,3,3,3,634,8,3,1,3,1,3,1,3,5,3,639,8,3,10,3,12,3,642,9,3,3,3,644,
        8,3,1,3,1,3,1,3,1,3,5,3,650,8,3,10,3,12,3,653,9,3,1,3,3,3,656,8,
        3,1,3,3,3,659,8,3,1,3,1,3,1,3,5,3,664,8,3,10,3,12,3,667,9,3,3,3,
        669,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,680,8,4,10,4,12,
        4,683,9,4,1,4,3,4,686,8,4,1,5,1,5,1,5,3,5,691,8,5,1,5,1,5,3,5,695,
        8,5,1,5,1,5,1,5,5,5,700,8,5,10,5,12,5,703,9,5,1,5,3,5,706,8,5,1,
        5,1,5,1,5,1,5,1,5,5,5,713,8,5,10,5,12,5,716,9,5,1,5,1,5,1,5,5,5,
        721,8,5,10,5,12,5,724,9,5,1,5,1,5,1,5,5,5,729,8,5,10,5,12,5,732,
        9,5,1,5,1,5,1,5,5,5,737,8,5,10,5,12,5,740,9,5,1,5,1,5,1,5,1,5,3,
        5,746,8,5,1,5,1,5,1,5,1,5,5,5,752,8,5,10,5,12,5,755,9,5,1,5,3,5,
        758,8,5,1,5,1,5,3,5,762,8,5,1,5,1,5,1,5,5,5,767,8,5,10,5,12,5,770,
        9,5,3,5,772,8,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,780,8,6,1,6,1,6,1,6,
        1,6,5,6,786,8,6,10,6,12,6,789,9,6,1,6,1,6,1,6,1,6,1,6,5,6,796,8,
        6,10,6,12,6,799,9,6,1,6,1,6,1,6,3,6,804,8,6,1,6,1,6,1,6,3,6,809,
        8,6,1,6,1,6,1,6,1,6,5,6,815,8,6,10,6,12,6,818,9,6,1,6,1,6,1,6,1,
        6,1,6,5,6,825,8,6,10,6,12,6,828,9,6,1,6,1,6,3,6,832,8,6,3,6,834,
        8,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,842,8,7,10,7,12,7,845,9,7,1,7,3,
        7,848,8,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,856,8,7,10,7,12,7,859,9,7,
        3,7,861,8,7,1,7,1,7,1,7,3,7,866,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        5,8,875,8,8,10,8,12,8,878,9,8,1,8,3,8,881,8,8,1,8,3,8,884,8,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,893,8,9,10,9,12,9,896,9,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,5,10,905,8,10,10,10,12,10,908,9,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,918,8,11,1,12,1,12,3,12,
        922,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,931,8,12,10,12,
        12,12,934,9,12,3,12,936,8,12,1,12,1,12,1,12,5,12,941,8,12,10,12,
        12,12,944,9,12,3,12,946,8,12,1,12,1,12,1,12,1,12,5,12,952,8,12,10,
        12,12,12,955,9,12,1,12,3,12,958,8,12,1,13,1,13,1,13,1,13,3,13,964,
        8,13,1,13,1,13,1,13,5,13,969,8,13,10,13,12,13,972,9,13,1,13,1,13,
        1,13,1,13,5,13,978,8,13,10,13,12,13,981,9,13,1,14,1,14,3,14,985,
        8,14,1,14,1,14,3,14,989,8,14,1,14,1,14,3,14,993,8,14,1,14,1,14,1,
        14,5,14,998,8,14,10,14,12,14,1001,9,14,3,14,1003,8,14,1,14,1,14,
        1,14,1,14,1,14,5,14,1010,8,14,10,14,12,14,1013,9,14,1,14,1,14,1,
        14,5,14,1018,8,14,10,14,12,14,1021,9,14,1,14,1,14,1,14,5,14,1026,
        8,14,10,14,12,14,1029,9,14,1,14,1,14,1,14,5,14,1034,8,14,10,14,12,
        14,1037,9,14,3,14,1039,8,14,1,14,1,14,1,14,1,14,5,14,1045,8,14,10,
        14,12,14,1048,9,14,1,14,1,14,1,14,1,14,5,14,1054,8,14,10,14,12,14,
        1057,9,14,3,14,1059,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        5,15,1069,8,15,10,15,12,15,1072,9,15,1,15,1,15,1,15,1,15,1,15,5,
        15,1079,8,15,10,15,12,15,1082,9,15,1,15,1,15,1,15,3,15,1087,8,15,
        1,15,1,15,1,15,3,15,1092,8,15,1,15,1,15,1,15,1,15,5,15,1098,8,15,
        10,15,12,15,1101,9,15,1,15,1,15,1,15,1,15,1,15,5,15,1108,8,15,10,
        15,12,15,1111,9,15,3,15,1113,8,15,3,15,1115,8,15,1,15,1,15,1,15,
        3,15,1120,8,15,1,16,1,16,1,16,1,16,1,16,1,16,5,16,1128,8,16,10,16,
        12,16,1131,9,16,1,16,3,16,1134,8,16,1,16,1,16,1,16,1,16,1,16,1,16,
        5,16,1142,8,16,10,16,12,16,1145,9,16,3,16,1147,8,16,1,17,1,17,3,
        17,1151,8,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,1159,8,17,10,17,
        12,17,1162,9,17,1,17,3,17,1165,8,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,5,18,1174,8,18,10,18,12,18,1177,9,18,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,5,19,1186,8,19,10,19,12,19,1189,9,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,3,20,1317,8,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,3,21,1326,8,21,1,21,1,21,1,21,1,21,1,21,5,21,1333,
        8,21,10,21,12,21,1336,9,21,3,21,1338,8,21,1,21,1,21,1,21,1,21,3,
        21,1344,8,21,1,21,3,21,1347,8,21,1,22,1,22,1,22,1,22,1,22,3,22,1354,
        8,22,1,23,1,23,1,23,1,23,1,23,3,23,1361,8,23,1,24,1,24,1,24,1,24,
        1,24,3,24,1368,8,24,1,25,1,25,1,25,1,25,1,25,3,25,1375,8,25,1,26,
        1,26,1,27,3,27,1380,8,27,1,27,1,27,1,28,3,28,1385,8,28,1,28,1,28,
        1,29,3,29,1390,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,1412,
        8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,1421,8,34,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1433,8,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,3,36,1443,8,36,1,36,1,36,3,36,1447,
        8,36,1,36,3,36,1450,8,36,1,36,1,36,1,36,1,36,1,36,3,36,1457,8,36,
        1,36,1,36,1,36,3,36,1462,8,36,1,36,1,36,1,36,1,36,3,36,1468,8,36,
        1,36,1,36,3,36,1472,8,36,1,36,3,36,1475,8,36,3,36,1477,8,36,1,37,
        1,37,3,37,1481,8,37,1,37,3,37,1484,8,37,1,37,1,37,3,37,1488,8,37,
        1,37,1,37,1,37,1,37,1,37,3,37,1495,8,37,1,37,1,37,3,37,1499,8,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,1511,8,37,
        1,37,3,37,1514,8,37,1,37,3,37,1517,8,37,3,37,1519,8,37,1,38,1,38,
        3,38,1523,8,38,1,38,1,38,3,38,1527,8,38,3,38,1529,8,38,1,39,1,39,
        1,39,1,39,3,39,1535,8,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1543,
        8,39,1,39,1,39,3,39,1547,8,39,1,40,1,40,3,40,1551,8,40,1,40,1,40,
        1,40,1,40,1,40,1,40,3,40,1559,8,40,1,40,3,40,1562,8,40,3,40,1564,
        8,40,1,41,1,41,1,41,3,41,1569,8,41,1,41,3,41,1572,8,41,1,41,1,41,
        3,41,1576,8,41,1,41,3,41,1579,8,41,1,41,1,41,3,41,1583,8,41,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1593,8,42,1,42,3,42,1596,
        8,42,1,42,1,42,1,42,1,42,1,42,3,42,1603,8,42,1,42,3,42,1606,8,42,
        1,42,3,42,1609,8,42,1,43,3,43,1612,8,43,1,43,1,43,3,43,1616,8,43,
        1,43,3,43,1619,8,43,1,43,3,43,1622,8,43,1,43,1,43,3,43,1626,8,43,
        1,43,3,43,1629,8,43,1,43,1,43,3,43,1633,8,43,1,43,3,43,1636,8,43,
        1,43,1,43,3,43,1640,8,43,1,43,3,43,1643,8,43,1,43,3,43,1646,8,43,
        1,43,1,43,3,43,1650,8,43,1,43,3,43,1653,8,43,1,43,1,43,3,43,1657,
        8,43,1,43,3,43,1660,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        3,44,1670,8,44,1,45,3,45,1673,8,45,1,45,1,45,1,45,1,45,1,45,3,45,
        1680,8,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1688,8,46,1,47,1,47,
        3,47,1692,8,47,1,48,1,48,1,48,1,49,1,49,3,49,1699,8,49,1,49,1,49,
        3,49,1703,8,49,1,49,1,49,3,49,1707,8,49,1,49,1,49,3,49,1711,8,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,1720,8,49,3,49,1722,8,49,
        1,49,1,49,3,49,1726,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1733,8,49,
        3,49,1735,8,49,1,49,1,49,3,49,1739,8,49,1,49,1,49,1,49,3,49,1744,
        8,49,3,49,1746,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1753,8,49,1,49,
        1,49,3,49,1757,8,49,3,49,1759,8,49,1,50,1,50,1,50,1,50,1,51,1,51,
        1,51,3,51,1768,8,51,1,51,1,51,1,52,1,52,1,52,3,52,1775,8,52,1,52,
        1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,55,3,55,1786,8,55,1,55,1,55,
        1,56,1,56,1,56,1,56,3,56,1794,8,56,1,57,1,57,1,57,1,58,1,58,1,58,
        1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,
        1,62,1,62,1,62,3,62,1818,8,62,1,63,1,63,1,63,3,63,1823,8,63,3,63,
        1825,8,63,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1848,8,66,
        1,67,1,67,1,68,3,68,1853,8,68,1,68,4,68,1856,8,68,11,68,12,68,1857,
        1,69,3,69,1861,8,69,1,69,1,69,5,69,1865,8,69,10,69,12,69,1868,9,
        69,1,69,1,69,1,69,1,70,3,70,1874,8,70,1,70,1,70,1,71,1,71,1,72,1,
        72,1,73,1,73,1,74,1,74,1,75,3,75,1887,8,75,1,75,1,75,1,76,3,76,1892,
        8,76,1,76,1,76,1,77,3,77,1897,8,77,1,77,1,77,1,78,1,78,3,78,1903,
        8,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,3,79,1935,8,79,1,80,1,80,1,80,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1951,8,81,1,82,
        1,82,1,82,1,82,3,82,1957,8,82,1,83,1,83,3,83,1961,8,83,1,84,1,84,
        1,84,3,84,1966,8,84,1,84,1,84,3,84,1970,8,84,1,85,1,85,1,85,3,85,
        1975,8,85,1,85,1,85,3,85,1979,8,85,1,86,1,86,1,86,3,86,1984,8,86,
        1,86,1,86,3,86,1988,8,86,1,87,1,87,1,87,3,87,1993,8,87,1,87,1,87,
        3,87,1997,8,87,1,88,1,88,1,88,3,88,2002,8,88,1,88,1,88,3,88,2006,
        8,88,1,89,1,89,3,89,2010,8,89,1,90,1,90,3,90,2014,8,90,1,91,1,91,
        1,91,3,91,2019,8,91,1,92,1,92,3,92,2023,8,92,1,93,1,93,3,93,2027,
        8,93,1,94,1,94,3,94,2031,8,94,1,95,1,95,3,95,2035,8,95,1,96,1,96,
        3,96,2039,8,96,1,97,1,97,3,97,2043,8,97,1,98,1,98,3,98,2047,8,98,
        1,99,1,99,3,99,2051,8,99,1,100,1,100,3,100,2055,8,100,1,101,1,101,
        3,101,2059,8,101,1,102,1,102,3,102,2063,8,102,1,103,1,103,3,103,
        2067,8,103,1,104,1,104,1,105,1,105,1,106,1,106,1,106,1,106,1,106,
        1,106,3,106,2079,8,106,1,106,1,106,1,106,3,106,2084,8,106,1,106,
        5,106,2087,8,106,10,106,12,106,2090,9,106,1,107,1,107,3,107,2094,
        8,107,1,107,3,107,2097,8,107,1,107,1,107,1,107,5,107,2102,8,107,
        10,107,12,107,2105,9,107,1,107,1,107,1,107,1,107,1,107,3,107,2112,
        8,107,1,107,1,107,5,107,2116,8,107,10,107,12,107,2119,9,107,1,107,
        1,107,5,107,2123,8,107,10,107,12,107,2126,9,107,1,107,5,107,2129,
        8,107,10,107,12,107,2132,9,107,1,107,3,107,2135,8,107,1,108,1,108,
        1,108,1,108,1,109,1,109,1,109,1,110,1,110,1,110,1,110,3,110,2148,
        8,110,1,110,3,110,2151,8,110,1,110,1,110,3,110,2155,8,110,1,111,
        1,111,1,111,1,111,3,111,2161,8,111,1,111,3,111,2164,8,111,1,111,
        1,111,3,111,2168,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,3,112,2179,8,112,3,112,2181,8,112,1,113,1,113,1,113,
        1,113,1,113,1,113,3,113,2189,8,113,1,113,1,113,1,113,1,114,1,114,
        1,114,1,114,5,114,2198,8,114,10,114,12,114,2201,9,114,3,114,2203,
        8,114,1,115,1,115,3,115,2207,8,115,1,115,3,115,2210,8,115,1,115,
        1,115,1,115,1,115,3,115,2216,8,115,1,116,1,116,1,116,3,116,2221,
        8,116,1,116,1,116,1,116,3,116,2226,8,116,5,116,2228,8,116,10,116,
        12,116,2231,9,116,1,117,1,117,1,117,1,118,1,118,5,118,2238,8,118,
        10,118,12,118,2241,9,118,1,118,1,118,5,118,2245,8,118,10,118,12,
        118,2248,9,118,1,118,1,118,5,118,2252,8,118,10,118,12,118,2255,9,
        118,1,118,1,118,1,118,1,118,5,118,2261,8,118,10,118,12,118,2264,
        9,118,3,118,2266,8,118,1,119,1,119,1,119,1,119,1,119,1,119,3,119,
        2274,8,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
        3,120,2285,8,120,1,121,1,121,3,121,2289,8,121,1,121,1,121,1,122,
        1,122,3,122,2295,8,122,1,122,1,122,1,123,1,123,1,123,3,123,2302,
        8,123,3,123,2304,8,123,1,123,3,123,2307,8,123,1,123,3,123,2310,8,
        123,1,124,1,124,1,124,3,124,2315,8,124,3,124,2317,8,124,1,124,1,
        124,1,124,5,124,2322,8,124,10,124,12,124,2325,9,124,1,124,1,124,
        1,124,3,124,2330,8,124,3,124,2332,8,124,1,124,1,124,1,124,1,124,
        1,124,5,124,2339,8,124,10,124,12,124,2342,9,124,1,124,1,124,1,124,
        1,124,5,124,2348,8,124,10,124,12,124,2351,9,124,1,124,1,124,1,124,
        1,124,1,124,1,124,5,124,2359,8,124,10,124,12,124,2362,9,124,3,124,
        2364,8,124,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,4,126,
        2374,8,126,11,126,12,126,2375,3,126,2378,8,126,1,126,1,126,1,126,
        1,126,1,126,1,126,1,126,5,126,2387,8,126,10,126,12,126,2390,9,126,
        1,126,1,126,3,126,2394,8,126,1,126,3,126,2397,8,126,1,126,1,126,
        1,127,1,127,1,127,1,127,4,127,2405,8,127,11,127,12,127,2406,1,127,
        1,127,3,127,2411,8,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,
        5,128,2420,8,128,10,128,12,128,2423,9,128,1,128,1,128,5,128,2427,
        8,128,10,128,12,128,2430,9,128,1,128,3,128,2433,8,128,1,128,3,128,
        2436,8,128,1,128,1,128,1,129,1,129,1,129,3,129,2443,8,129,1,129,
        1,129,3,129,2447,8,129,1,130,1,130,4,130,2451,8,130,11,130,12,130,
        2452,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,
        5,132,2465,8,132,10,132,12,132,2468,9,132,1,132,1,132,1,133,1,133,
        1,133,1,134,1,134,1,134,1,134,3,134,2479,8,134,1,134,1,134,3,134,
        2483,8,134,1,134,1,134,3,134,2487,8,134,1,135,1,135,1,135,1,135,
        3,135,2493,8,135,1,135,3,135,2496,8,135,1,135,1,135,5,135,2500,8,
        135,10,135,12,135,2503,9,135,1,136,3,136,2506,8,136,1,136,1,136,
        1,136,1,136,1,136,3,136,2513,8,136,1,136,1,136,1,136,1,136,3,136,
        2519,8,136,1,137,1,137,1,137,1,137,1,137,1,137,5,137,2527,8,137,
        10,137,12,137,2530,9,137,1,137,1,137,3,137,2534,8,137,1,138,1,138,
        1,138,1,138,1,138,1,138,5,138,2542,8,138,10,138,12,138,2545,9,138,
        1,139,1,139,1,139,1,139,1,139,5,139,2552,8,139,10,139,12,139,2555,
        9,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        3,140,2567,8,140,1,140,3,140,2570,8,140,1,140,1,140,3,140,2574,8,
        140,1,141,1,141,1,141,3,141,2579,8,141,1,141,1,141,3,141,2583,8,
        141,1,141,3,141,2586,8,141,1,141,1,141,1,142,3,142,2591,8,142,1,
        142,1,142,1,142,1,142,1,142,3,142,2598,8,142,1,142,1,142,1,142,1,
        142,1,142,5,142,2605,8,142,10,142,12,142,2608,9,142,3,142,2610,8,
        142,1,142,1,142,1,142,1,142,1,142,1,142,5,142,2618,8,142,10,142,
        12,142,2621,9,142,3,142,2623,8,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,3,142,2635,8,142,1,142,1,142,1,142,
        1,142,1,142,3,142,2642,8,142,1,142,1,142,1,142,1,142,1,142,3,142,
        2649,8,142,1,143,1,143,1,143,1,143,1,143,3,143,2656,8,143,1,143,
        1,143,1,143,1,143,5,143,2662,8,143,10,143,12,143,2665,9,143,1,143,
        1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
        5,144,2679,8,144,10,144,12,144,2682,9,144,3,144,2684,8,144,1,144,
        3,144,2687,8,144,1,144,1,144,1,144,1,144,1,144,3,144,2694,8,144,
        1,144,1,144,1,144,1,144,1,144,3,144,2701,8,144,1,144,1,144,1,144,
        1,144,1,144,3,144,2708,8,144,1,144,1,144,1,144,1,144,1,144,3,144,
        2715,8,144,1,144,1,144,1,145,3,145,2720,8,145,1,145,1,145,1,145,
        1,145,1,145,3,145,2727,8,145,1,145,1,145,1,145,1,145,1,145,1,145,
        5,145,2735,8,145,10,145,12,145,2738,9,145,1,145,1,145,1,145,1,145,
        1,145,1,145,1,145,1,145,1,145,1,145,5,145,2750,8,145,10,145,12,145,
        2753,9,145,1,145,1,145,1,145,1,145,1,145,1,145,5,145,2761,8,145,
        10,145,12,145,2764,9,145,1,145,1,145,1,145,1,145,1,145,1,145,3,145,
        2772,8,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,5,146,2781,
        8,146,10,146,12,146,2784,9,146,1,146,1,146,1,146,1,147,3,147,2790,
        8,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,1,147,
        1,147,1,147,1,147,1,147,1,147,1,148,3,148,2808,8,148,1,148,1,148,
        1,148,1,148,1,148,1,148,4,148,2816,8,148,11,148,12,148,2817,3,148,
        2820,8,148,1,148,1,148,1,149,3,149,2825,8,149,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,
        5,149,2841,8,149,10,149,12,149,2844,9,149,1,149,1,149,1,149,1,149,
        1,149,1,149,5,149,2852,8,149,10,149,12,149,2855,9,149,1,149,1,149,
        1,149,1,149,1,149,1,149,3,149,2863,8,149,1,149,1,149,1,149,1,149,
        1,149,3,149,2870,8,149,1,149,1,149,1,150,1,150,1,150,5,150,2877,
        8,150,10,150,12,150,2880,9,150,1,150,3,150,2883,8,150,1,150,5,150,
        2886,8,150,10,150,12,150,2889,9,150,1,150,3,150,2892,8,150,1,150,
        1,150,1,151,1,151,1,151,3,151,2899,8,151,1,151,1,151,3,151,2903,
        8,151,1,151,1,151,3,151,2907,8,151,1,151,3,151,2910,8,151,1,151,
        1,151,1,151,1,151,1,151,5,151,2917,8,151,10,151,12,151,2920,9,151,
        3,151,2922,8,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
        3,152,2932,8,152,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,154,
        1,154,4,154,2943,8,154,11,154,12,154,2944,1,155,1,155,1,155,3,155,
        2950,8,155,1,156,1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,
        1,157,5,157,2962,8,157,10,157,12,157,2965,9,157,1,157,1,157,1,157,
        3,157,2970,8,157,1,158,1,158,3,158,2974,8,158,1,158,1,158,3,158,
        2978,8,158,1,159,1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,160,
        3,160,2989,8,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,
        1,160,3,160,3033,8,160,1,161,1,161,1,161,1,161,3,161,3039,8,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,161,1,161,3,161,3088,8,161,1,162,1,162,1,162,3,162,3093,
        8,162,1,162,1,162,1,162,3,162,3098,8,162,5,162,3100,8,162,10,162,
        12,162,3103,9,162,1,162,3,162,3106,8,162,1,163,1,163,1,163,1,163,
        5,163,3112,8,163,10,163,12,163,3115,9,163,1,164,1,164,1,164,1,164,
        1,164,1,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,4,166,3133,8,166,11,166,12,166,3134,3,166,3137,8,166,1,167,
        1,167,1,167,1,167,3,167,3143,8,167,1,168,1,168,3,168,3147,8,168,
        1,168,1,168,1,168,3,168,3152,8,168,5,168,3154,8,168,10,168,12,168,
        3157,9,168,1,169,1,169,1,169,1,169,4,169,3163,8,169,11,169,12,169,
        3164,1,169,1,169,1,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,
        1,172,1,172,1,172,1,172,1,172,1,173,1,173,1,173,1,173,1,173,1,173,
        5,173,3188,8,173,10,173,12,173,3191,9,173,1,173,1,173,1,174,1,174,
        1,174,1,174,1,174,3,174,3200,8,174,1,175,1,175,1,175,1,176,1,176,
        1,176,1,177,1,177,1,177,3,177,3211,8,177,1,177,1,177,3,177,3215,
        8,177,1,177,1,177,1,177,3,177,3220,8,177,1,178,1,178,1,178,5,178,
        3225,8,178,10,178,12,178,3228,9,178,1,179,1,179,1,179,5,179,3233,
        8,179,10,179,12,179,3236,9,179,1,180,1,180,1,180,1,180,1,180,3,180,
        3243,8,180,4,180,3245,8,180,11,180,12,180,3246,1,180,1,180,1,180,
        3,180,3252,8,180,3,180,3254,8,180,1,180,1,180,1,181,1,181,1,181,
        1,181,3,181,3262,8,181,1,181,1,181,1,181,1,181,1,181,3,181,3269,
        8,181,1,181,1,181,1,181,3,181,3274,8,181,3,181,3276,8,181,3,181,
        3278,8,181,1,181,1,181,3,181,3282,8,181,1,182,1,182,1,182,1,182,
        1,182,5,182,3289,8,182,10,182,12,182,3292,9,182,1,183,1,183,3,183,
        3296,8,183,1,183,1,183,3,183,3300,8,183,1,184,1,184,3,184,3304,8,
        184,1,185,1,185,1,185,1,185,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,5,186,3320,8,186,10,186,12,186,3323,9,186,
        1,186,1,186,1,186,1,186,1,186,5,186,3330,8,186,10,186,12,186,3333,
        9,186,1,186,1,186,3,186,3337,8,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,3,186,3346,8,186,1,186,3,186,3349,8,186,1,186,1,186,
        3,186,3353,8,186,1,186,1,186,5,186,3357,8,186,10,186,12,186,3360,
        9,186,1,186,1,186,3,186,3364,8,186,1,186,3,186,3367,8,186,1,186,
        1,186,3,186,3371,8,186,1,186,1,186,5,186,3375,8,186,10,186,12,186,
        3378,9,186,1,186,1,186,3,186,3382,8,186,1,186,3,186,3385,8,186,1,
        186,1,186,3,186,3389,8,186,1,186,1,186,5,186,3393,8,186,10,186,12,
        186,3396,9,186,1,186,1,186,3,186,3400,8,186,1,186,3,186,3403,8,186,
        1,186,1,186,3,186,3407,8,186,1,186,1,186,5,186,3411,8,186,10,186,
        12,186,3414,9,186,1,186,1,186,3,186,3418,8,186,1,186,1,186,1,186,
        1,186,3,186,3424,8,186,1,186,1,186,3,186,3428,8,186,1,186,1,186,
        1,186,1,186,5,186,3434,8,186,10,186,12,186,3437,9,186,1,186,1,186,
        3,186,3441,8,186,1,186,5,186,3444,8,186,10,186,12,186,3447,9,186,
        1,186,1,186,3,186,3451,8,186,1,186,1,186,1,186,1,186,5,186,3457,
        8,186,10,186,12,186,3460,9,186,1,186,1,186,3,186,3464,8,186,1,186,
        5,186,3467,8,186,10,186,12,186,3470,9,186,1,186,3,186,3473,8,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,3482,8,186,1,186,
        1,186,1,186,1,186,3,186,3488,8,186,1,186,1,186,1,186,1,186,1,186,
        3,186,3495,8,186,1,186,1,186,1,186,1,186,1,186,3,186,3502,8,186,
        1,186,1,186,1,186,1,186,1,186,3,186,3509,8,186,1,186,1,186,1,186,
        1,186,1,186,3,186,3516,8,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,3,186,3539,8,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,3,186,3550,8,186,1,186,1,186,1,186,
        1,186,3,186,3556,8,186,1,186,1,186,1,186,1,186,1,186,1,186,5,186,
        3564,8,186,10,186,12,186,3567,9,186,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3582,8,187,
        1,187,1,187,1,187,1,187,1,187,5,187,3589,8,187,10,187,12,187,3592,
        9,187,3,187,3594,8,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,3,187,3604,8,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        3,187,3613,8,187,1,187,3,187,3616,8,187,1,187,1,187,1,187,3,187,
        3621,8,187,1,187,3,187,3624,8,187,5,187,3626,8,187,10,187,12,187,
        3629,9,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,3,187,3645,8,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,4,187,3677,8,187,11,187,12,187,3678,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,3,187,3698,8,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3732,8,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3741,8,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,3,187,3756,8,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,3,187,3826,8,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,3,187,3866,8,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,5,187,3887,8,187,10,187,12,187,3890,9,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,3,187,3899,8,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,3,187,3909,8,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3920,8,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3931,8,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3940,8,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3950,8,187,3,187,
        3952,8,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,3971,8,187,
        3,187,3973,8,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,3,187,3985,8,187,3,187,3987,8,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,4001,
        8,187,3,187,4003,8,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,3,187,4029,8,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,5,187,4039,8,187,10,187,12,187,
        4042,9,187,3,187,4044,8,187,1,187,1,187,1,187,1,187,5,187,4050,8,
        187,10,187,12,187,4053,9,187,1,188,1,188,1,188,1,188,4,188,4059,
        8,188,11,188,12,188,4060,1,188,1,188,1,189,1,189,3,189,4067,8,189,
        1,189,3,189,4070,8,189,1,189,1,189,1,189,3,189,4075,8,189,1,189,
        1,189,1,189,3,189,4080,8,189,1,190,1,190,1,190,1,190,3,190,4086,
        8,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,4,191,4095,8,191,
        11,191,12,191,4096,1,191,1,191,3,191,4101,8,191,1,191,1,191,1,192,
        1,192,1,192,1,192,1,192,1,192,4,192,4111,8,192,11,192,12,192,4112,
        1,192,1,192,3,192,4117,8,192,1,192,1,192,1,193,1,193,1,193,1,194,
        1,194,1,194,1,194,1,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,
        1,195,1,195,1,195,1,195,1,195,3,195,4141,8,195,1,196,1,196,1,196,
        1,196,1,196,1,197,1,197,1,197,1,197,1,197,3,197,4153,8,197,1,197,
        1,197,3,197,4157,8,197,1,197,1,197,1,197,1,197,1,197,1,197,3,197,
        4165,8,197,3,197,4167,8,197,1,198,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,1,198,1,198,3,198,4191,8,198,1,199,1,199,1,199,
        3,199,4196,8,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,3,199,4212,8,199,1,199,3,199,
        4215,8,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,3,199,4228,8,199,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,3,200,4248,8,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        4,200,4257,8,200,11,200,12,200,4258,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,3,200,4271,8,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,3,200,4280,8,200,1,200,1,200,1,200,1,200,
        3,200,4286,8,200,3,200,4288,8,200,1,200,1,200,3,200,4292,8,200,1,
        200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,4,200,4303,8,
        200,11,200,12,200,4304,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,5,200,
        4335,8,200,10,200,12,200,4338,9,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,4,200,4347,8,200,11,200,12,200,4348,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,5,200,4362,8,200,
        10,200,12,200,4365,9,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,3,200,4379,8,200,1,201,1,201,1,201,
        1,201,1,201,1,201,3,201,4387,8,201,1,201,1,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,4402,8,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,4412,8,201,
        1,201,1,201,1,201,1,201,1,201,3,201,4419,8,201,1,201,1,201,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        3,201,4435,8,201,1,202,3,202,4438,8,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,3,202,4447,8,202,3,202,4449,8,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,5,202,4460,8,202,10,202,
        12,202,4463,9,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,5,202,4474,8,202,10,202,12,202,4477,9,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,5,202,4488,8,202,10,202,12,202,
        4491,9,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        5,202,4502,8,202,10,202,12,202,4505,9,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,5,202,4514,8,202,10,202,12,202,4517,9,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,5,202,4526,8,202,10,202,12,202,
        4529,9,202,1,202,1,202,1,202,1,202,4,202,4535,8,202,11,202,12,202,
        4536,3,202,4539,8,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,4,202,4557,
        8,202,11,202,12,202,4558,1,202,1,202,1,202,3,202,4564,8,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,4,202,4575,8,202,
        11,202,12,202,4576,1,202,1,202,3,202,4581,8,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,4,202,4594,8,202,
        11,202,12,202,4595,1,202,1,202,3,202,4600,8,202,1,202,1,202,1,202,
        3,202,4605,8,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        3,202,4615,8,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,4623,
        8,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,4632,8,202,
        3,202,4634,8,202,1,202,1,202,1,202,3,202,4639,8,202,1,202,1,202,
        1,202,1,202,1,202,3,202,4646,8,202,1,202,1,202,3,202,4650,8,202,
        1,203,1,203,1,203,1,203,1,203,3,203,4657,8,203,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,203,3,203,4676,8,203,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,1,203,3,203,4688,8,203,1,203,1,203,3,203,
        4692,8,203,1,204,3,204,4695,8,204,1,204,1,204,1,204,1,204,1,204,
        1,204,3,204,4703,8,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,3,204,4713,8,204,1,204,1,204,1,204,1,204,1,204,3,204,4720,
        8,204,1,204,1,204,1,204,3,204,4725,8,204,1,204,1,204,1,204,1,204,
        1,204,1,204,1,204,3,204,4734,8,204,1,204,1,204,1,204,3,204,4739,
        8,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        3,204,4751,8,204,1,204,1,204,1,204,1,204,1,204,3,204,4758,8,204,
        1,205,1,205,1,205,1,205,3,205,4764,8,205,1,205,1,205,1,205,3,205,
        4769,8,205,1,205,3,205,4772,8,205,1,205,1,205,1,205,3,205,4777,8,
        205,1,205,1,205,1,205,3,205,4782,8,205,1,205,3,205,4785,8,205,1,
        205,1,205,3,205,4789,8,205,1,205,3,205,4792,8,205,1,205,1,205,1,
        205,1,205,3,205,4798,8,205,1,205,1,205,1,205,1,205,1,205,1,205,1,
        205,1,205,1,205,3,205,4809,8,205,1,205,1,205,3,205,4813,8,205,1,
        205,3,205,4816,8,205,1,206,3,206,4819,8,206,1,206,1,206,1,206,1,
        206,1,206,1,206,3,206,4827,8,206,1,206,1,206,1,206,1,206,3,206,4833,
        8,206,1,206,1,206,3,206,4837,8,206,1,206,1,206,3,206,4841,8,206,
        1,207,3,207,4844,8,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
        1,207,1,207,1,207,1,207,1,207,3,207,4858,8,207,1,207,1,207,1,207,
        1,207,1,207,4,207,4865,8,207,11,207,12,207,4866,1,207,1,207,3,207,
        4871,8,207,1,208,3,208,4874,8,208,1,208,1,208,1,208,1,208,1,208,
        1,209,1,209,1,209,1,209,1,209,1,209,5,209,4887,8,209,10,209,12,209,
        4890,9,209,1,209,4,209,4893,8,209,11,209,12,209,4894,3,209,4897,
        8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        3,209,4909,8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        3,209,4919,8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        3,209,4929,8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        3,209,4939,8,209,3,209,4941,8,209,3,209,4943,8,209,1,209,1,209,1,
        209,3,209,4948,8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,
        209,3,209,4958,8,209,3,209,4960,8,209,3,209,4962,8,209,1,209,1,209,
        1,209,3,209,4967,8,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,
        4975,8,209,1,209,1,209,1,209,3,209,4980,8,209,1,209,1,209,1,209,
        1,209,1,209,1,209,3,209,4988,8,209,3,209,4990,8,209,1,209,1,209,
        1,209,3,209,4995,8,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,
        5003,8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,5012,
        8,209,1,210,1,210,1,210,1,210,1,210,1,210,3,210,5020,8,210,1,210,
        1,210,1,210,1,210,1,210,1,210,3,210,5028,8,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,3,210,5038,8,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,3,210,5048,8,210,1,210,1,210,1,210,
        1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,1,210,
        3,210,5064,8,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,5,211,5087,8,211,10,211,12,211,5090,9,211,1,211,1,211,
        3,211,5094,8,211,1,212,3,212,5097,8,212,1,212,1,212,1,212,1,212,
        1,213,3,213,5104,8,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,
        5112,8,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,5130,8,213,1,213,
        1,213,1,213,1,213,1,213,1,213,1,213,3,213,5139,8,213,1,214,3,214,
        5142,8,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,
        5152,8,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
        3,214,5163,8,214,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,5181,8,215,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
        1,215,3,215,5206,8,215,1,216,3,216,5209,8,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,5223,
        8,216,1,216,1,216,1,216,3,216,5228,8,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,
        5244,8,216,1,216,1,216,1,216,3,216,5249,8,216,1,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        3,216,5265,8,216,1,216,1,216,1,216,3,216,5270,8,216,1,216,1,216,
        1,216,1,216,1,216,1,216,1,216,3,216,5279,8,216,1,216,1,216,1,216,
        3,216,5284,8,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,1,216,1,216,3,216,5297,8,216,1,217,3,217,5300,8,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,5,217,5319,8,217,10,217,12,217,5322,
        9,217,1,217,1,217,1,217,3,217,5327,8,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,5,217,5338,8,217,10,217,12,217,5341,
        9,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5351,
        8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        3,217,5363,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,3,217,5379,8,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5391,8,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5402,
        8,217,3,217,5404,8,217,1,217,1,217,1,217,3,217,5409,8,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,3,217,5425,8,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,3,217,5435,8,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,3,217,5444,8,217,1,217,1,217,1,217,3,217,5449,8,217,1,217,
        1,217,1,217,1,217,1,217,3,217,5456,8,217,1,217,1,217,1,217,3,217,
        5461,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        3,217,5472,8,217,1,217,1,217,1,217,3,217,5477,8,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5490,
        8,217,3,217,5492,8,217,3,217,5494,8,217,1,217,1,217,1,217,3,217,
        5499,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,3,217,5508,
        8,217,1,217,1,217,1,217,3,217,5513,8,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,3,217,5532,8,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,3,217,5541,8,217,3,217,5543,8,217,1,217,1,217,1,217,3,217,
        5548,8,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,3,217,5574,8,217,1,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,3,217,5585,8,217,1,217,1,217,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,3,217,5596,8,217,1,217,1,217,
        1,217,1,217,1,217,1,217,3,217,5604,8,217,1,217,3,217,5607,8,217,
        1,217,1,217,1,217,3,217,5612,8,217,1,218,3,218,5615,8,218,1,218,
        1,218,1,218,1,218,1,218,3,218,5622,8,218,1,218,3,218,5625,8,218,
        1,218,1,218,1,218,1,218,1,218,3,218,5632,8,218,1,218,1,218,1,218,
        3,218,5637,8,218,1,218,1,218,1,218,1,218,1,218,1,218,3,218,5645,
        8,218,1,218,1,218,1,218,1,218,1,218,3,218,5652,8,218,1,218,1,218,
        3,218,5656,8,218,1,218,3,218,5659,8,218,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,3,218,5669,8,218,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,1,218,3,218,5691,8,218,1,218,1,218,1,218,
        1,218,1,218,1,218,1,218,1,218,1,218,3,218,5702,8,218,3,218,5704,
        8,218,1,218,1,218,1,218,1,218,1,218,1,218,1,218,5,218,5713,8,218,
        10,218,12,218,5716,9,218,1,218,1,218,3,218,5720,8,218,1,218,1,218,
        1,218,1,218,1,218,5,218,5727,8,218,10,218,12,218,5730,9,218,1,218,
        1,218,3,218,5734,8,218,3,218,5736,8,218,1,219,1,219,1,219,1,219,
        1,219,1,219,3,219,5744,8,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,3,219,5755,8,219,1,219,3,219,5758,8,219,1,219,
        3,219,5761,8,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        3,219,5771,8,219,1,219,3,219,5774,8,219,1,219,1,219,3,219,5778,8,
        219,1,219,3,219,5781,8,219,1,219,1,219,3,219,5785,8,219,1,219,1,
        219,3,219,5789,8,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,5797,
        8,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,5805,8,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,5815,8,219,1,219,
        1,219,3,219,5819,8,219,1,219,1,219,3,219,5823,8,219,1,219,3,219,
        5826,8,219,1,219,1,219,1,219,1,219,1,219,3,219,5833,8,219,1,219,
        1,219,1,219,5,219,5838,8,219,10,219,12,219,5841,9,219,3,219,5843,
        8,219,1,219,3,219,5846,8,219,1,219,3,219,5849,8,219,1,219,1,219,
        1,219,1,219,1,219,1,219,5,219,5857,8,219,10,219,12,219,5860,9,219,
        1,219,3,219,5863,8,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,
        5871,8,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,3,219,
        5881,8,219,1,219,3,219,5884,8,219,1,219,1,219,1,219,1,219,1,219,
        1,219,3,219,5892,8,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,3,219,5917,8,219,1,219,1,219,3,219,
        5921,8,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,5,219,5933,8,219,10,219,12,219,5936,9,219,3,219,5938,8,219,
        1,219,3,219,5941,8,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,5,219,5956,8,219,10,219,12,219,
        5959,9,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,3,219,5985,8,219,1,220,1,220,1,220,1,220,
        1,220,5,220,5992,8,220,10,220,12,220,5995,9,220,1,220,1,220,1,220,
        3,220,6000,8,220,1,220,1,220,1,220,1,220,1,220,3,220,6007,8,220,
        3,220,6009,8,220,1,221,1,221,1,221,1,221,1,221,5,221,6016,8,221,
        10,221,12,221,6019,9,221,1,221,1,221,3,221,6023,8,221,1,221,1,221,
        1,221,1,221,1,221,1,221,1,221,1,221,1,221,3,221,6034,8,221,1,221,
        1,221,3,221,6038,8,221,1,222,1,222,1,222,1,223,1,223,1,223,1,224,
        1,224,1,224,1,225,1,225,1,225,1,226,1,226,1,227,1,227,1,227,1,227,
        5,227,6058,8,227,10,227,12,227,6061,9,227,1,227,1,227,1,228,1,228,
        1,228,1,228,1,228,3,228,6070,8,228,1,229,1,229,1,229,1,229,3,229,
        6076,8,229,1,230,1,230,1,230,1,230,5,230,6082,8,230,10,230,12,230,
        6085,9,230,1,230,1,230,1,230,1,230,3,230,6091,8,230,5,230,6093,8,
        230,10,230,12,230,6096,9,230,1,230,1,230,1,231,1,231,1,231,3,231,
        6103,8,231,1,232,1,232,1,232,1,232,3,232,6109,8,232,1,232,3,232,
        6112,8,232,1,233,1,233,1,233,3,233,6117,8,233,1,234,1,234,1,234,
        1,234,3,234,6123,8,234,3,234,6125,8,234,1,234,1,234,5,234,6129,8,
        234,10,234,12,234,6132,9,234,1,234,1,234,1,234,1,235,1,235,1,235,
        1,235,3,235,6141,8,235,1,235,1,235,3,235,6145,8,235,1,236,1,236,
        1,236,1,236,3,236,6151,8,236,1,237,1,237,1,237,1,237,1,237,1,237,
        3,237,6159,8,237,1,238,1,238,1,238,1,238,3,238,6165,8,238,1,238,
        3,238,6168,8,238,1,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
        1,239,3,239,6179,8,239,1,239,1,239,1,239,1,239,1,239,1,239,1,239,
        1,239,3,239,6189,8,239,1,240,1,240,1,240,3,240,6194,8,240,1,240,
        3,240,6197,8,240,1,240,3,240,6200,8,240,1,240,1,240,1,241,1,241,
        1,241,3,241,6207,8,241,1,241,1,241,1,241,1,242,1,242,1,242,3,242,
        6215,8,242,1,242,1,242,3,242,6219,8,242,1,242,1,242,1,243,1,243,
        1,243,1,243,1,243,5,243,6228,8,243,10,243,12,243,6231,9,243,1,244,
        1,244,1,244,1,244,1,244,5,244,6238,8,244,10,244,12,244,6241,9,244,
        1,244,1,244,1,244,3,244,6246,8,244,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,
        1,245,3,245,6331,8,245,3,245,6333,8,245,1,246,1,246,1,246,1,246,
        1,246,3,246,6340,8,246,1,246,1,246,3,246,6344,8,246,1,247,1,247,
        1,247,3,247,6349,8,247,1,247,1,247,1,247,1,247,5,247,6355,8,247,
        10,247,12,247,6358,9,247,3,247,6360,8,247,1,248,1,248,1,248,1,248,
        1,249,1,249,1,249,1,249,1,249,5,249,6371,8,249,10,249,12,249,6374,
        9,249,1,249,1,249,1,250,1,250,1,250,3,250,6381,8,250,1,251,1,251,
        1,251,3,251,6386,8,251,1,252,1,252,3,252,6390,8,252,1,253,1,253,
        1,253,1,253,1,253,5,253,6397,8,253,10,253,12,253,6400,9,253,1,253,
        1,253,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,6412,
        8,254,1,255,1,255,1,255,1,255,1,255,1,255,3,255,6420,8,255,1,255,
        1,255,1,255,1,255,1,255,1,255,3,255,6428,8,255,5,255,6430,8,255,
        10,255,12,255,6433,9,255,1,256,1,256,1,256,1,256,3,256,6439,8,256,
        1,256,1,256,3,256,6443,8,256,1,257,1,257,1,257,1,258,1,258,1,258,
        1,258,1,259,1,259,1,259,1,260,1,260,1,260,1,260,1,260,1,260,1,260,
        1,260,3,260,6463,8,260,1,261,1,261,1,261,1,262,1,262,1,263,1,263,
        1,263,1,263,1,264,1,264,1,264,1,264,1,264,3,264,6479,8,264,1,264,
        3,264,6482,8,264,1,264,1,264,3,264,6486,8,264,1,265,1,265,1,265,
        5,265,6491,8,265,10,265,12,265,6494,9,265,1,265,1,265,1,265,1,266,
        1,266,1,266,1,266,5,266,6503,8,266,10,266,12,266,6506,9,266,1,267,
        1,267,3,267,6510,8,267,1,267,3,267,6513,8,267,1,268,1,268,1,268,
        1,268,1,268,1,268,5,268,6521,8,268,10,268,12,268,6524,9,268,1,268,
        1,268,1,268,1,268,1,268,1,268,1,268,1,268,5,268,6534,8,268,10,268,
        12,268,6537,9,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,1,268,
        5,268,6547,8,268,10,268,12,268,6550,9,268,1,268,1,268,1,268,1,268,
        1,268,1,268,3,268,6558,8,268,1,269,1,269,3,269,6562,8,269,1,269,
        1,269,1,270,1,270,3,270,6568,8,270,1,270,3,270,6571,8,270,1,271,
        1,271,3,271,6575,8,271,1,271,1,271,1,272,1,272,1,272,3,272,6582,
        8,272,1,272,1,272,1,272,1,272,3,272,6588,8,272,1,272,1,272,3,272,
        6592,8,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,5,273,
        6602,8,273,10,273,12,273,6605,9,273,1,273,1,273,1,273,1,273,1,273,
        1,273,1,273,1,273,1,273,1,273,5,273,6617,8,273,10,273,12,273,6620,
        9,273,1,273,1,273,3,273,6624,8,273,1,274,1,274,3,274,6628,8,274,
        1,274,3,274,6631,8,274,1,275,1,275,3,275,6635,8,275,1,275,3,275,
        6638,8,275,1,276,1,276,1,276,1,276,3,276,6644,8,276,1,276,3,276,
        6647,8,276,1,277,1,277,3,277,6651,8,277,1,278,1,278,1,278,1,278,
        5,278,6657,8,278,10,278,12,278,6660,9,278,1,278,1,278,1,279,1,279,
        1,279,1,279,5,279,6668,8,279,10,279,12,279,6671,9,279,1,279,1,279,
        1,280,1,280,1,280,1,280,5,280,6679,8,280,10,280,12,280,6682,9,280,
        1,280,1,280,1,281,1,281,3,281,6688,8,281,1,281,1,281,1,281,1,282,
        1,282,1,282,1,283,1,283,1,283,1,284,1,284,1,284,1,284,1,285,1,285,
        1,285,1,286,1,286,1,286,1,286,1,287,1,287,1,287,1,287,1,287,1,287,
        1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,1,287,
        3,287,6727,8,287,1,288,1,288,1,289,1,289,1,289,1,289,3,289,6735,
        8,289,1,290,4,290,6738,8,290,11,290,12,290,6739,1,291,1,291,3,291,
        6744,8,291,1,291,1,291,3,291,6748,8,291,1,291,1,291,3,291,6752,8,
        291,1,291,1,291,3,291,6756,8,291,1,291,3,291,6759,8,291,1,291,1,
        291,3,291,6763,8,291,1,291,3,291,6766,8,291,1,292,1,292,1,292,1,
        292,1,292,3,292,6773,8,292,1,292,1,292,1,292,1,292,3,292,6779,8,
        292,1,293,1,293,1,293,1,293,5,293,6785,8,293,10,293,12,293,6788,
        9,293,1,294,1,294,3,294,6792,8,294,1,295,1,295,3,295,6796,8,295,
        1,295,1,295,1,295,1,296,1,296,1,296,3,296,6804,8,296,1,296,1,296,
        1,296,1,296,1,296,1,296,4,296,6812,8,296,11,296,12,296,6813,1,296,
        1,296,1,297,1,297,1,297,1,297,1,297,5,297,6823,8,297,10,297,12,297,
        6826,9,297,1,297,1,297,1,298,1,298,1,298,5,298,6833,8,298,10,298,
        12,298,6836,9,298,1,298,1,298,1,298,1,298,3,298,6842,8,298,1,298,
        3,298,6845,8,298,3,298,6847,8,298,1,299,3,299,6850,8,299,1,299,1,
        299,1,299,1,299,3,299,6856,8,299,3,299,6858,8,299,1,299,1,2375,3,
        212,372,374,300,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
        150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
        182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
        214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,
        246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,
        278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,
        310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,
        342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,
        374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,
        406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,
        438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,
        470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,
        502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,
        534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,
        566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,
        598,0,96,2,0,164,164,426,426,4,0,2,2,256,257,373,373,375,375,2,0,
        108,109,278,278,2,0,52,52,55,55,2,0,1042,1042,1059,1059,1,0,1221,
        1222,3,0,681,681,723,723,752,752,2,0,723,723,752,752,4,0,173,173,
        725,725,735,735,1015,1015,2,0,438,438,455,455,2,0,272,272,1211,1211,
        2,0,49,49,88,88,2,0,735,735,1015,1015,2,0,556,556,1010,1010,1,0,
        1069,1072,2,0,1198,1200,1203,1203,12,0,106,106,506,509,678,678,774,
        774,778,779,863,864,904,904,949,949,985,985,1009,1009,1026,1028,
        1061,1062,1,0,488,1192,4,0,142,142,204,204,247,247,447,447,1,0,369,
        370,3,0,165,165,219,219,355,355,1,0,1185,1186,2,0,178,178,840,840,
        2,0,21,21,116,116,2,0,156,156,731,731,4,0,556,556,735,735,1010,1010,
        1015,1015,1,0,1219,1220,1,0,1217,1218,2,0,736,736,876,876,3,0,520,
        521,523,525,530,530,4,0,513,513,519,519,528,529,531,531,3,0,515,
        515,526,527,532,532,3,0,817,817,823,823,825,825,3,0,815,816,819,
        820,822,822,6,0,106,106,185,185,248,248,258,258,368,368,478,478,
        4,0,185,185,248,248,258,258,368,368,9,0,30,32,213,213,238,239,244,
        244,246,246,380,380,396,397,403,403,461,462,2,0,13,13,121,121,3,
        0,80,80,84,85,327,335,3,0,13,13,121,121,448,448,7,0,30,32,238,239,
        244,244,246,246,396,397,403,403,461,462,3,0,301,301,603,603,630,
        630,2,0,673,673,734,734,2,0,730,730,737,737,3,0,237,237,241,241,
        260,260,1,0,851,852,16,0,3,3,6,7,22,23,25,25,27,27,81,82,113,113,
        147,147,222,222,228,228,276,276,318,318,378,379,390,390,407,408,
        479,479,3,0,565,566,674,674,926,926,3,0,26,26,251,251,319,319,2,
        0,894,894,1006,1006,2,0,815,816,819,820,2,0,43,43,45,45,3,0,52,53,
        55,58,240,240,3,0,161,161,425,425,437,437,5,0,547,547,549,550,682,
        682,892,893,924,925,3,0,957,960,966,970,972,976,5,0,612,616,783,
        785,867,868,1033,1036,1064,1064,2,0,689,689,738,738,6,0,561,562,
        620,621,748,751,964,965,1003,1004,1141,1144,1,0,997,998,2,0,995,
        995,999,999,1,0,808,809,7,0,185,185,248,248,258,258,368,368,478,
        478,1076,1076,1099,1099,2,0,9,9,814,814,7,0,106,106,185,185,248,
        248,258,258,368,368,423,424,478,478,1,0,179,180,1,0,650,651,1,0,
        450,451,5,0,535,535,572,572,708,708,739,739,1084,1084,4,0,54,54,
        383,383,399,399,465,465,2,0,219,219,355,355,3,0,233,233,454,454,
        1011,1011,2,0,746,746,898,898,2,0,747,747,899,899,2,0,159,159,1208,
        1208,1,0,401,402,1,0,433,434,3,0,39,39,217,217,429,429,2,0,593,593,
        636,636,2,0,661,661,701,701,2,0,307,307,942,942,3,0,593,593,636,
        636,914,914,1,0,1104,1107,2,0,290,290,1208,1208,2,0,274,274,649,
        649,2,0,593,593,914,914,4,0,274,274,489,489,649,649,794,794,2,0,
        697,697,885,885,4,0,32,32,629,629,690,690,745,745,2,0,660,660,700,
        700,2,0,1207,1207,1210,1210,3,0,13,13,18,18,382,382,1,0,226,227,
        2,0,159,159,190,190,2,0,659,659,662,662,2,0,128,128,938,938,7910,
        0,603,1,0,0,0,2,605,1,0,0,0,4,618,1,0,0,0,6,620,1,0,0,0,8,670,1,
        0,0,0,10,687,1,0,0,0,12,773,1,0,0,0,14,835,1,0,0,0,16,867,1,0,0,
        0,18,885,1,0,0,0,20,897,1,0,0,0,22,917,1,0,0,0,24,919,1,0,0,0,26,
        959,1,0,0,0,28,982,1,0,0,0,30,1060,1,0,0,0,32,1121,1,0,0,0,34,1148,
        1,0,0,0,36,1166,1,0,0,0,38,1178,1,0,0,0,40,1316,1,0,0,0,42,1346,
        1,0,0,0,44,1353,1,0,0,0,46,1360,1,0,0,0,48,1367,1,0,0,0,50,1374,
        1,0,0,0,52,1376,1,0,0,0,54,1379,1,0,0,0,56,1384,1,0,0,0,58,1389,
        1,0,0,0,60,1393,1,0,0,0,62,1397,1,0,0,0,64,1401,1,0,0,0,66,1411,
        1,0,0,0,68,1420,1,0,0,0,70,1432,1,0,0,0,72,1476,1,0,0,0,74,1518,
        1,0,0,0,76,1528,1,0,0,0,78,1546,1,0,0,0,80,1563,1,0,0,0,82,1582,
        1,0,0,0,84,1608,1,0,0,0,86,1659,1,0,0,0,88,1669,1,0,0,0,90,1679,
        1,0,0,0,92,1687,1,0,0,0,94,1691,1,0,0,0,96,1693,1,0,0,0,98,1758,
        1,0,0,0,100,1760,1,0,0,0,102,1764,1,0,0,0,104,1771,1,0,0,0,106,1778,
        1,0,0,0,108,1782,1,0,0,0,110,1785,1,0,0,0,112,1789,1,0,0,0,114,1795,
        1,0,0,0,116,1798,1,0,0,0,118,1801,1,0,0,0,120,1805,1,0,0,0,122,1809,
        1,0,0,0,124,1813,1,0,0,0,126,1824,1,0,0,0,128,1826,1,0,0,0,130,1830,
        1,0,0,0,132,1847,1,0,0,0,134,1849,1,0,0,0,136,1852,1,0,0,0,138,1860,
        1,0,0,0,140,1873,1,0,0,0,142,1877,1,0,0,0,144,1879,1,0,0,0,146,1881,
        1,0,0,0,148,1883,1,0,0,0,150,1886,1,0,0,0,152,1891,1,0,0,0,154,1896,
        1,0,0,0,156,1900,1,0,0,0,158,1934,1,0,0,0,160,1936,1,0,0,0,162,1950,
        1,0,0,0,164,1956,1,0,0,0,166,1960,1,0,0,0,168,1965,1,0,0,0,170,1974,
        1,0,0,0,172,1983,1,0,0,0,174,1992,1,0,0,0,176,2001,1,0,0,0,178,2009,
        1,0,0,0,180,2013,1,0,0,0,182,2018,1,0,0,0,184,2022,1,0,0,0,186,2026,
        1,0,0,0,188,2030,1,0,0,0,190,2034,1,0,0,0,192,2038,1,0,0,0,194,2042,
        1,0,0,0,196,2046,1,0,0,0,198,2050,1,0,0,0,200,2054,1,0,0,0,202,2058,
        1,0,0,0,204,2062,1,0,0,0,206,2066,1,0,0,0,208,2068,1,0,0,0,210,2070,
        1,0,0,0,212,2078,1,0,0,0,214,2091,1,0,0,0,216,2136,1,0,0,0,218,2140,
        1,0,0,0,220,2154,1,0,0,0,222,2156,1,0,0,0,224,2169,1,0,0,0,226,2188,
        1,0,0,0,228,2202,1,0,0,0,230,2215,1,0,0,0,232,2217,1,0,0,0,234,2232,
        1,0,0,0,236,2265,1,0,0,0,238,2273,1,0,0,0,240,2284,1,0,0,0,242,2288,
        1,0,0,0,244,2294,1,0,0,0,246,2298,1,0,0,0,248,2363,1,0,0,0,250,2365,
        1,0,0,0,252,2368,1,0,0,0,254,2400,1,0,0,0,256,2414,1,0,0,0,258,2446,
        1,0,0,0,260,2448,1,0,0,0,262,2454,1,0,0,0,264,2459,1,0,0,0,266,2471,
        1,0,0,0,268,2474,1,0,0,0,270,2488,1,0,0,0,272,2505,1,0,0,0,274,2520,
        1,0,0,0,276,2535,1,0,0,0,278,2546,1,0,0,0,280,2566,1,0,0,0,282,2575,
        1,0,0,0,284,2590,1,0,0,0,286,2650,1,0,0,0,288,2669,1,0,0,0,290,2719,
        1,0,0,0,292,2773,1,0,0,0,294,2789,1,0,0,0,296,2807,1,0,0,0,298,2824,
        1,0,0,0,300,2873,1,0,0,0,302,2895,1,0,0,0,304,2923,1,0,0,0,306,2933,
        1,0,0,0,308,2940,1,0,0,0,310,2946,1,0,0,0,312,2951,1,0,0,0,314,2969,
        1,0,0,0,316,2971,1,0,0,0,318,2979,1,0,0,0,320,3032,1,0,0,0,322,3087,
        1,0,0,0,324,3089,1,0,0,0,326,3107,1,0,0,0,328,3116,1,0,0,0,330,3121,
        1,0,0,0,332,3136,1,0,0,0,334,3142,1,0,0,0,336,3146,1,0,0,0,338,3158,
        1,0,0,0,340,3168,1,0,0,0,342,3171,1,0,0,0,344,3176,1,0,0,0,346,3181,
        1,0,0,0,348,3199,1,0,0,0,350,3201,1,0,0,0,352,3204,1,0,0,0,354,3207,
        1,0,0,0,356,3221,1,0,0,0,358,3229,1,0,0,0,360,3244,1,0,0,0,362,3257,
        1,0,0,0,364,3283,1,0,0,0,366,3293,1,0,0,0,368,3301,1,0,0,0,370,3305,
        1,0,0,0,372,3555,1,0,0,0,374,3644,1,0,0,0,376,4054,1,0,0,0,378,4079,
        1,0,0,0,380,4085,1,0,0,0,382,4087,1,0,0,0,384,4104,1,0,0,0,386,4120,
        1,0,0,0,388,4123,1,0,0,0,390,4140,1,0,0,0,392,4142,1,0,0,0,394,4147,
        1,0,0,0,396,4190,1,0,0,0,398,4227,1,0,0,0,400,4378,1,0,0,0,402,4434,
        1,0,0,0,404,4649,1,0,0,0,406,4691,1,0,0,0,408,4757,1,0,0,0,410,4815,
        1,0,0,0,412,4840,1,0,0,0,414,4870,1,0,0,0,416,4873,1,0,0,0,418,5011,
        1,0,0,0,420,5063,1,0,0,0,422,5093,1,0,0,0,424,5096,1,0,0,0,426,5138,
        1,0,0,0,428,5162,1,0,0,0,430,5205,1,0,0,0,432,5296,1,0,0,0,434,5611,
        1,0,0,0,436,5735,1,0,0,0,438,5984,1,0,0,0,440,6008,1,0,0,0,442,6037,
        1,0,0,0,444,6039,1,0,0,0,446,6042,1,0,0,0,448,6045,1,0,0,0,450,6048,
        1,0,0,0,452,6051,1,0,0,0,454,6053,1,0,0,0,456,6069,1,0,0,0,458,6075,
        1,0,0,0,460,6077,1,0,0,0,462,6102,1,0,0,0,464,6111,1,0,0,0,466,6116,
        1,0,0,0,468,6124,1,0,0,0,470,6136,1,0,0,0,472,6146,1,0,0,0,474,6152,
        1,0,0,0,476,6167,1,0,0,0,478,6188,1,0,0,0,480,6190,1,0,0,0,482,6203,
        1,0,0,0,484,6211,1,0,0,0,486,6222,1,0,0,0,488,6232,1,0,0,0,490,6247,
        1,0,0,0,492,6334,1,0,0,0,494,6345,1,0,0,0,496,6361,1,0,0,0,498,6365,
        1,0,0,0,500,6377,1,0,0,0,502,6382,1,0,0,0,504,6387,1,0,0,0,506,6391,
        1,0,0,0,508,6411,1,0,0,0,510,6413,1,0,0,0,512,6434,1,0,0,0,514,6444,
        1,0,0,0,516,6447,1,0,0,0,518,6451,1,0,0,0,520,6454,1,0,0,0,522,6464,
        1,0,0,0,524,6467,1,0,0,0,526,6469,1,0,0,0,528,6473,1,0,0,0,530,6487,
        1,0,0,0,532,6498,1,0,0,0,534,6507,1,0,0,0,536,6557,1,0,0,0,538,6559,
        1,0,0,0,540,6565,1,0,0,0,542,6572,1,0,0,0,544,6578,1,0,0,0,546,6623,
        1,0,0,0,548,6625,1,0,0,0,550,6632,1,0,0,0,552,6639,1,0,0,0,554,6650,
        1,0,0,0,556,6652,1,0,0,0,558,6663,1,0,0,0,560,6674,1,0,0,0,562,6685,
        1,0,0,0,564,6692,1,0,0,0,566,6695,1,0,0,0,568,6698,1,0,0,0,570,6702,
        1,0,0,0,572,6705,1,0,0,0,574,6726,1,0,0,0,576,6728,1,0,0,0,578,6734,
        1,0,0,0,580,6737,1,0,0,0,582,6741,1,0,0,0,584,6778,1,0,0,0,586,6780,
        1,0,0,0,588,6791,1,0,0,0,590,6793,1,0,0,0,592,6800,1,0,0,0,594,6817,
        1,0,0,0,596,6829,1,0,0,0,598,6849,1,0,0,0,600,604,3,2,1,0,601,604,
        3,4,2,0,602,604,3,22,11,0,603,600,1,0,0,0,603,601,1,0,0,0,603,602,
        1,0,0,0,604,1,1,0,0,0,605,606,5,171,0,0,606,607,3,178,89,0,607,608,
        5,426,0,0,608,609,3,178,89,0,609,3,1,0,0,0,610,619,3,8,4,0,611,619,
        3,6,3,0,612,619,3,10,5,0,613,619,3,12,6,0,614,619,3,14,7,0,615,619,
        3,16,8,0,616,619,3,18,9,0,617,619,3,20,10,0,618,610,1,0,0,0,618,
        611,1,0,0,0,618,612,1,0,0,0,618,613,1,0,0,0,618,614,1,0,0,0,618,
        615,1,0,0,0,618,616,1,0,0,0,618,617,1,0,0,0,619,5,1,0,0,0,620,643,
        5,172,0,0,621,633,5,255,0,0,622,634,5,309,0,0,623,624,5,41,0,0,624,
        625,5,272,0,0,625,630,3,52,26,0,626,627,5,1208,0,0,627,629,3,52,
        26,0,628,626,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,631,1,0,
        0,0,631,634,1,0,0,0,632,630,1,0,0,0,633,622,1,0,0,0,633,623,1,0,
        0,0,633,634,1,0,0,0,634,644,1,0,0,0,635,640,3,52,26,0,636,637,5,
        1208,0,0,637,639,3,52,26,0,638,636,1,0,0,0,639,642,1,0,0,0,640,638,
        1,0,0,0,640,641,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,643,621,
        1,0,0,0,643,635,1,0,0,0,644,645,1,0,0,0,645,668,5,426,0,0,646,651,
        3,54,27,0,647,648,5,1208,0,0,648,650,3,54,27,0,649,647,1,0,0,0,650,
        653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,656,1,0,0,0,653,
        651,1,0,0,0,654,656,5,313,0,0,655,646,1,0,0,0,655,654,1,0,0,0,656,
        658,1,0,0,0,657,659,3,62,31,0,658,657,1,0,0,0,658,659,1,0,0,0,659,
        669,1,0,0,0,660,665,3,182,91,0,661,662,5,1208,0,0,662,664,3,182,
        91,0,663,661,1,0,0,0,664,667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,
        0,0,666,669,1,0,0,0,667,665,1,0,0,0,668,655,1,0,0,0,668,660,1,0,
        0,0,669,7,1,0,0,0,670,671,5,172,0,0,671,672,3,182,91,0,672,673,5,
        1208,0,0,673,674,3,182,91,0,674,675,1,0,0,0,675,676,5,426,0,0,676,
        681,3,182,91,0,677,678,5,1208,0,0,678,680,3,182,91,0,679,677,1,0,
        0,0,680,683,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,685,1,0,
        0,0,683,681,1,0,0,0,684,686,3,60,30,0,685,684,1,0,0,0,685,686,1,
        0,0,0,686,9,1,0,0,0,687,745,5,172,0,0,688,690,5,13,0,0,689,691,5,
        309,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,706,1,0,0,0,692,693,
        5,13,0,0,693,695,5,41,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,696,
        1,0,0,0,696,701,3,40,20,0,697,698,5,1208,0,0,698,700,3,40,20,0,699,
        697,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,
        706,1,0,0,0,703,701,1,0,0,0,704,706,5,91,0,0,705,688,1,0,0,0,705,
        694,1,0,0,0,705,704,1,0,0,0,706,707,1,0,0,0,707,708,5,286,0,0,708,
        746,3,42,21,0,709,714,3,44,22,0,710,711,5,1208,0,0,711,713,3,44,
        22,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,0,0,0,714,715,1,0,
        0,0,715,746,1,0,0,0,716,714,1,0,0,0,717,722,3,46,23,0,718,719,5,
        1208,0,0,719,721,3,46,23,0,720,718,1,0,0,0,721,724,1,0,0,0,722,720,
        1,0,0,0,722,723,1,0,0,0,723,746,1,0,0,0,724,722,1,0,0,0,725,730,
        3,48,24,0,726,727,5,1208,0,0,727,729,3,46,23,0,728,726,1,0,0,0,729,
        732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,746,1,0,0,0,732,
        730,1,0,0,0,733,738,3,50,25,0,734,735,5,1208,0,0,735,737,3,50,25,
        0,736,734,1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,738,739,1,0,0,
        0,739,746,1,0,0,0,740,738,1,0,0,0,741,742,5,74,0,0,742,746,5,536,
        0,0,743,744,5,74,0,0,744,746,5,1078,0,0,745,705,1,0,0,0,745,709,
        1,0,0,0,745,717,1,0,0,0,745,725,1,0,0,0,745,733,1,0,0,0,745,741,
        1,0,0,0,745,743,1,0,0,0,746,747,1,0,0,0,747,771,5,426,0,0,748,753,
        3,54,27,0,749,750,5,1208,0,0,750,752,3,54,27,0,751,749,1,0,0,0,752,
        755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,757,1,0,0,0,755,
        753,1,0,0,0,756,758,3,62,31,0,757,756,1,0,0,0,757,758,1,0,0,0,758,
        772,1,0,0,0,759,761,5,313,0,0,760,762,3,62,31,0,761,760,1,0,0,0,
        761,762,1,0,0,0,762,772,1,0,0,0,763,768,3,182,91,0,764,765,5,1208,
        0,0,765,767,3,182,91,0,766,764,1,0,0,0,767,770,1,0,0,0,768,766,1,
        0,0,0,768,769,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,771,748,1,
        0,0,0,771,759,1,0,0,0,771,763,1,0,0,0,772,11,1,0,0,0,773,774,5,172,
        0,0,774,775,5,73,0,0,775,776,5,984,0,0,776,779,3,180,90,0,777,778,
        5,474,0,0,778,780,5,1007,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,
        781,1,0,0,0,781,833,5,426,0,0,782,787,3,180,90,0,783,784,5,1208,
        0,0,784,786,3,180,90,0,785,783,1,0,0,0,786,789,1,0,0,0,787,785,1,
        0,0,0,787,788,1,0,0,0,788,808,1,0,0,0,789,787,1,0,0,0,790,791,5,
        474,0,0,791,792,5,357,0,0,792,797,3,182,91,0,793,794,5,1208,0,0,
        794,796,3,182,91,0,795,793,1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,
        0,797,798,1,0,0,0,798,803,1,0,0,0,799,797,1,0,0,0,800,801,5,474,
        0,0,801,802,5,311,0,0,802,804,3,184,92,0,803,800,1,0,0,0,803,804,
        1,0,0,0,804,809,1,0,0,0,805,806,5,474,0,0,806,807,5,311,0,0,807,
        809,3,184,92,0,808,790,1,0,0,0,808,805,1,0,0,0,809,834,1,0,0,0,810,
        811,5,303,0,0,811,816,3,180,90,0,812,813,5,1208,0,0,813,815,3,180,
        90,0,814,812,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,
        0,0,817,831,1,0,0,0,818,816,1,0,0,0,819,820,5,474,0,0,820,821,5,
        357,0,0,821,826,3,182,91,0,822,823,5,1208,0,0,823,825,3,182,91,0,
        824,822,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,1,0,0,0,
        827,832,1,0,0,0,828,826,1,0,0,0,829,830,5,475,0,0,830,832,5,357,
        0,0,831,819,1,0,0,0,831,829,1,0,0,0,832,834,1,0,0,0,833,782,1,0,
        0,0,833,810,1,0,0,0,834,13,1,0,0,0,835,836,5,172,0,0,836,837,5,230,
        0,0,837,847,5,286,0,0,838,843,3,142,71,0,839,840,5,1208,0,0,840,
        842,3,142,71,0,841,839,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,
        844,1,0,0,0,844,848,1,0,0,0,845,843,1,0,0,0,846,848,5,13,0,0,847,
        838,1,0,0,0,847,846,1,0,0,0,848,860,1,0,0,0,849,850,5,20,0,0,850,
        861,5,111,0,0,851,852,7,0,0,0,852,857,3,180,90,0,853,854,5,1208,
        0,0,854,856,3,180,90,0,855,853,1,0,0,0,856,859,1,0,0,0,857,855,1,
        0,0,0,857,858,1,0,0,0,858,861,1,0,0,0,859,857,1,0,0,0,860,849,1,
        0,0,0,860,851,1,0,0,0,861,865,1,0,0,0,862,863,5,474,0,0,863,864,
        5,274,0,0,864,866,5,299,0,0,865,862,1,0,0,0,865,866,1,0,0,0,866,
        15,1,0,0,0,867,868,5,172,0,0,868,869,5,236,0,0,869,870,3,166,83,
        0,870,883,5,426,0,0,871,876,3,182,91,0,872,873,5,1208,0,0,873,875,
        3,182,91,0,874,872,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,
        1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,879,881,3,62,31,0,880,879,
        1,0,0,0,880,881,1,0,0,0,881,884,1,0,0,0,882,884,5,313,0,0,883,871,
        1,0,0,0,883,882,1,0,0,0,884,17,1,0,0,0,885,886,5,172,0,0,886,887,
        5,480,0,0,887,888,3,166,83,0,888,889,5,426,0,0,889,894,3,182,91,
        0,890,891,5,1208,0,0,891,893,3,182,91,0,892,890,1,0,0,0,893,896,
        1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,19,1,0,0,0,896,894,1,
        0,0,0,897,898,5,172,0,0,898,899,5,480,0,0,899,900,5,297,0,0,900,
        901,5,426,0,0,901,906,3,180,90,0,902,903,5,1208,0,0,903,905,3,180,
        90,0,904,902,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,907,1,0,
        0,0,907,21,1,0,0,0,908,906,1,0,0,0,909,918,3,24,12,0,910,918,3,26,
        13,0,911,918,3,28,14,0,912,918,3,30,15,0,913,918,3,32,16,0,914,918,
        3,34,17,0,915,918,3,36,18,0,916,918,3,38,19,0,917,909,1,0,0,0,917,
        910,1,0,0,0,917,911,1,0,0,0,917,912,1,0,0,0,917,913,1,0,0,0,917,
        914,1,0,0,0,917,915,1,0,0,0,917,916,1,0,0,0,918,23,1,0,0,0,919,921,
        5,354,0,0,920,922,3,64,32,0,921,920,1,0,0,0,921,922,1,0,0,0,922,
        945,1,0,0,0,923,935,5,255,0,0,924,936,5,309,0,0,925,926,5,41,0,0,
        926,927,5,272,0,0,927,932,3,52,26,0,928,929,5,1208,0,0,929,931,3,
        52,26,0,930,928,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,
        1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,935,924,1,0,0,0,935,925,
        1,0,0,0,935,936,1,0,0,0,936,946,1,0,0,0,937,942,3,52,26,0,938,939,
        5,1208,0,0,939,941,3,52,26,0,940,938,1,0,0,0,941,944,1,0,0,0,942,
        940,1,0,0,0,942,943,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,945,
        923,1,0,0,0,945,937,1,0,0,0,946,947,1,0,0,0,947,957,7,0,0,0,948,
        953,3,56,28,0,949,950,5,1208,0,0,950,952,3,56,28,0,951,949,1,0,0,
        0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,958,1,0,0,
        0,955,953,1,0,0,0,956,958,5,313,0,0,957,948,1,0,0,0,957,956,1,0,
        0,0,958,25,1,0,0,0,959,963,5,354,0,0,960,961,5,10,0,0,961,962,5,
        289,0,0,962,964,5,159,0,0,963,960,1,0,0,0,963,964,1,0,0,0,964,965,
        1,0,0,0,965,970,3,182,91,0,966,967,5,1208,0,0,967,969,3,182,91,0,
        968,966,1,0,0,0,969,972,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,
        971,973,1,0,0,0,972,970,1,0,0,0,973,974,7,0,0,0,974,979,3,182,91,
        0,975,976,5,1208,0,0,976,978,3,182,91,0,977,975,1,0,0,0,978,981,
        1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,27,1,0,0,0,981,979,1,
        0,0,0,982,984,5,354,0,0,983,985,3,64,32,0,984,983,1,0,0,0,984,985,
        1,0,0,0,985,1038,1,0,0,0,986,988,5,13,0,0,987,989,5,309,0,0,988,
        987,1,0,0,0,988,989,1,0,0,0,989,1003,1,0,0,0,990,991,5,13,0,0,991,
        993,5,41,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,
        999,3,40,20,0,995,996,5,1208,0,0,996,998,3,40,20,0,997,995,1,0,0,
        0,998,1001,1,0,0,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,1003,1,
        0,0,0,1001,999,1,0,0,0,1002,986,1,0,0,0,1002,992,1,0,0,0,1003,1004,
        1,0,0,0,1004,1005,5,286,0,0,1005,1039,3,42,21,0,1006,1011,3,44,22,
        0,1007,1008,5,1208,0,0,1008,1010,3,44,22,0,1009,1007,1,0,0,0,1010,
        1013,1,0,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,1039,1,0,0,
        0,1013,1011,1,0,0,0,1014,1019,3,46,23,0,1015,1016,5,1208,0,0,1016,
        1018,3,46,23,0,1017,1015,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,
        0,0,1019,1020,1,0,0,0,1020,1039,1,0,0,0,1021,1019,1,0,0,0,1022,1027,
        3,48,24,0,1023,1024,5,1208,0,0,1024,1026,3,46,23,0,1025,1023,1,0,
        0,0,1026,1029,1,0,0,0,1027,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1039,
        1,0,0,0,1029,1027,1,0,0,0,1030,1035,3,50,25,0,1031,1032,5,1208,0,
        0,1032,1034,3,50,25,0,1033,1031,1,0,0,0,1034,1037,1,0,0,0,1035,1033,
        1,0,0,0,1035,1036,1,0,0,0,1036,1039,1,0,0,0,1037,1035,1,0,0,0,1038,
        1002,1,0,0,0,1038,1006,1,0,0,0,1038,1014,1,0,0,0,1038,1022,1,0,0,
        0,1038,1030,1,0,0,0,1039,1040,1,0,0,0,1040,1058,7,0,0,0,1041,1046,
        3,56,28,0,1042,1043,5,1208,0,0,1043,1045,3,56,28,0,1044,1042,1,0,
        0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1059,
        1,0,0,0,1048,1046,1,0,0,0,1049,1059,5,313,0,0,1050,1055,3,182,91,
        0,1051,1052,5,1208,0,0,1052,1054,3,182,91,0,1053,1051,1,0,0,0,1054,
        1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1059,1,0,0,
        0,1057,1055,1,0,0,0,1058,1041,1,0,0,0,1058,1049,1,0,0,0,1058,1050,
        1,0,0,0,1059,29,1,0,0,0,1060,1061,5,354,0,0,1061,1062,5,73,0,0,1062,
        1063,5,984,0,0,1063,1119,3,180,90,0,1064,1114,7,0,0,0,1065,1070,
        3,180,90,0,1066,1067,5,1208,0,0,1067,1069,3,180,90,0,1068,1066,1,
        0,0,0,1069,1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,
        1091,1,0,0,0,1072,1070,1,0,0,0,1073,1074,5,474,0,0,1074,1075,5,357,
        0,0,1075,1080,3,182,91,0,1076,1077,5,1208,0,0,1077,1079,3,182,91,
        0,1078,1076,1,0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,1081,
        1,0,0,0,1081,1086,1,0,0,0,1082,1080,1,0,0,0,1083,1084,5,474,0,0,
        1084,1085,5,311,0,0,1085,1087,3,184,92,0,1086,1083,1,0,0,0,1086,
        1087,1,0,0,0,1087,1092,1,0,0,0,1088,1089,5,474,0,0,1089,1090,5,311,
        0,0,1090,1092,3,184,92,0,1091,1073,1,0,0,0,1091,1088,1,0,0,0,1092,
        1115,1,0,0,0,1093,1094,5,303,0,0,1094,1099,3,180,90,0,1095,1096,
        5,1208,0,0,1096,1098,3,180,90,0,1097,1095,1,0,0,0,1098,1101,1,0,
        0,0,1099,1097,1,0,0,0,1099,1100,1,0,0,0,1100,1112,1,0,0,0,1101,1099,
        1,0,0,0,1102,1103,5,474,0,0,1103,1104,5,357,0,0,1104,1109,3,182,
        91,0,1105,1106,5,1208,0,0,1106,1108,3,182,91,0,1107,1105,1,0,0,0,
        1108,1111,1,0,0,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,1113,
        1,0,0,0,1111,1109,1,0,0,0,1112,1102,1,0,0,0,1112,1113,1,0,0,0,1113,
        1115,1,0,0,0,1114,1065,1,0,0,0,1114,1093,1,0,0,0,1115,1120,1,0,0,
        0,1116,1117,5,474,0,0,1117,1118,5,1094,0,0,1118,1120,5,287,0,0,1119,
        1064,1,0,0,0,1119,1116,1,0,0,0,1120,31,1,0,0,0,1121,1122,5,354,0,
        0,1122,1123,5,230,0,0,1123,1133,5,286,0,0,1124,1129,3,142,71,0,1125,
        1126,5,1208,0,0,1126,1128,3,142,71,0,1127,1125,1,0,0,0,1128,1131,
        1,0,0,0,1129,1127,1,0,0,0,1129,1130,1,0,0,0,1130,1134,1,0,0,0,1131,
        1129,1,0,0,0,1132,1134,5,13,0,0,1133,1124,1,0,0,0,1133,1132,1,0,
        0,0,1134,1146,1,0,0,0,1135,1136,5,20,0,0,1136,1147,5,111,0,0,1137,
        1138,7,0,0,0,1138,1143,3,180,90,0,1139,1140,5,1208,0,0,1140,1142,
        3,180,90,0,1141,1139,1,0,0,0,1142,1145,1,0,0,0,1143,1141,1,0,0,0,
        1143,1144,1,0,0,0,1144,1147,1,0,0,0,1145,1143,1,0,0,0,1146,1135,
        1,0,0,0,1146,1137,1,0,0,0,1147,33,1,0,0,0,1148,1150,5,354,0,0,1149,
        1151,3,64,32,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,
        0,0,1152,1153,5,236,0,0,1153,1154,3,166,83,0,1154,1164,7,0,0,0,1155,
        1160,3,182,91,0,1156,1157,5,1208,0,0,1157,1159,3,182,91,0,1158,1156,
        1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,
        1165,1,0,0,0,1162,1160,1,0,0,0,1163,1165,5,313,0,0,1164,1155,1,0,
        0,0,1164,1163,1,0,0,0,1165,35,1,0,0,0,1166,1167,5,354,0,0,1167,1168,
        5,480,0,0,1168,1169,3,166,83,0,1169,1170,7,0,0,0,1170,1175,3,182,
        91,0,1171,1172,5,1208,0,0,1172,1174,3,182,91,0,1173,1171,1,0,0,0,
        1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,37,1,
        0,0,0,1177,1175,1,0,0,0,1178,1179,5,354,0,0,1179,1180,5,480,0,0,
        1180,1181,5,297,0,0,1181,1182,7,0,0,0,1182,1187,3,180,90,0,1183,
        1184,5,1208,0,0,1184,1186,3,180,90,0,1185,1183,1,0,0,0,1186,1189,
        1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,39,1,0,0,0,1189,
        1187,1,0,0,0,1190,1191,5,14,0,0,1191,1192,5,151,0,0,1192,1317,5,
        310,0,0,1193,1194,5,14,0,0,1194,1317,5,166,0,0,1195,1196,5,14,0,
        0,1196,1317,5,310,0,0,1197,1317,5,18,0,0,1198,1317,5,60,0,0,1199,
        1200,5,86,0,0,1200,1317,5,29,0,0,1201,1202,5,86,0,0,1202,1317,5,
        102,0,0,1203,1204,5,86,0,0,1204,1205,5,607,0,0,1205,1317,5,905,0,
        0,1206,1207,5,86,0,0,1207,1208,5,151,0,0,1208,1317,5,310,0,0,1209,
        1210,5,86,0,0,1210,1317,5,166,0,0,1211,1212,5,86,0,0,1212,1317,5,
        688,0,0,1213,1214,5,86,0,0,1214,1317,5,235,0,0,1215,1216,5,86,0,
        0,1216,1217,5,834,0,0,1217,1317,5,310,0,0,1218,1219,5,86,0,0,1219,
        1317,5,310,0,0,1220,1221,5,86,0,0,1221,1317,5,917,0,0,1222,1223,
        5,86,0,0,1223,1317,5,406,0,0,1224,1225,5,86,0,0,1225,1317,5,435,
        0,0,1226,1227,5,86,0,0,1227,1317,5,456,0,0,1228,1229,5,86,0,0,1229,
        1317,5,468,0,0,1230,1317,5,102,0,0,1231,1317,5,115,0,0,1232,1233,
        5,125,0,0,1233,1317,5,29,0,0,1234,1235,5,125,0,0,1235,1317,5,102,
        0,0,1236,1237,5,125,0,0,1237,1238,5,607,0,0,1238,1317,5,905,0,0,
        1239,1240,5,125,0,0,1240,1317,5,166,0,0,1241,1242,5,125,0,0,1242,
        1317,5,688,0,0,1243,1244,5,125,0,0,1244,1317,5,235,0,0,1245,1246,
        5,125,0,0,1246,1317,5,310,0,0,1247,1248,5,125,0,0,1248,1317,5,917,
        0,0,1249,1250,5,125,0,0,1250,1317,5,406,0,0,1251,1252,5,125,0,0,
        1252,1317,5,435,0,0,1253,1254,5,125,0,0,1254,1317,5,456,0,0,1255,
        1256,5,125,0,0,1256,1317,5,468,0,0,1257,1317,5,127,0,0,1258,1317,
        5,144,0,0,1259,1260,5,144,0,0,1260,1317,5,166,0,0,1261,1262,5,144,
        0,0,1262,1317,5,310,0,0,1263,1317,5,166,0,0,1264,1317,5,688,0,0,
        1265,1266,5,688,0,0,1266,1317,5,766,0,0,1267,1317,5,192,0,0,1268,
        1317,5,198,0,0,1269,1270,5,198,0,0,1270,1317,3,560,280,0,1271,1317,
        5,235,0,0,1272,1317,5,270,0,0,1273,1317,5,297,0,0,1274,1275,5,297,
        0,0,1275,1317,5,115,0,0,1276,1277,5,297,0,0,1277,1317,5,127,0,0,
        1278,1279,5,297,0,0,1279,1317,5,198,0,0,1280,1281,5,297,0,0,1281,
        1317,5,346,0,0,1282,1283,5,297,0,0,1283,1317,5,370,0,0,1284,1285,
        5,297,0,0,1285,1317,5,453,0,0,1286,1317,5,310,0,0,1287,1317,5,325,
        0,0,1288,1289,5,325,0,0,1289,1317,3,560,280,0,1290,1317,5,346,0,
        0,1291,1317,5,350,0,0,1292,1317,5,370,0,0,1293,1294,5,370,0,0,1294,
        1317,3,560,280,0,1295,1317,5,376,0,0,1296,1317,5,395,0,0,1297,1317,
        5,406,0,0,1298,1317,5,435,0,0,1299,1300,5,1096,0,0,1300,1317,5,243,
        0,0,1301,1317,5,441,0,0,1302,1303,5,1096,0,0,1303,1317,5,437,0,0,
        1304,1317,5,442,0,0,1305,1306,5,1096,0,0,1306,1317,5,1097,0,0,1307,
        1317,5,443,0,0,1308,1317,5,453,0,0,1309,1310,5,453,0,0,1310,1317,
        3,560,280,0,1311,1317,5,456,0,0,1312,1317,5,468,0,0,1313,1314,5,
        474,0,0,1314,1315,5,607,0,0,1315,1317,5,905,0,0,1316,1190,1,0,0,
        0,1316,1193,1,0,0,0,1316,1195,1,0,0,0,1316,1197,1,0,0,0,1316,1198,
        1,0,0,0,1316,1199,1,0,0,0,1316,1201,1,0,0,0,1316,1203,1,0,0,0,1316,
        1206,1,0,0,0,1316,1209,1,0,0,0,1316,1211,1,0,0,0,1316,1213,1,0,0,
        0,1316,1215,1,0,0,0,1316,1218,1,0,0,0,1316,1220,1,0,0,0,1316,1222,
        1,0,0,0,1316,1224,1,0,0,0,1316,1226,1,0,0,0,1316,1228,1,0,0,0,1316,
        1230,1,0,0,0,1316,1231,1,0,0,0,1316,1232,1,0,0,0,1316,1234,1,0,0,
        0,1316,1236,1,0,0,0,1316,1239,1,0,0,0,1316,1241,1,0,0,0,1316,1243,
        1,0,0,0,1316,1245,1,0,0,0,1316,1247,1,0,0,0,1316,1249,1,0,0,0,1316,
        1251,1,0,0,0,1316,1253,1,0,0,0,1316,1255,1,0,0,0,1316,1257,1,0,0,
        0,1316,1258,1,0,0,0,1316,1259,1,0,0,0,1316,1261,1,0,0,0,1316,1263,
        1,0,0,0,1316,1264,1,0,0,0,1316,1265,1,0,0,0,1316,1267,1,0,0,0,1316,
        1268,1,0,0,0,1316,1269,1,0,0,0,1316,1271,1,0,0,0,1316,1272,1,0,0,
        0,1316,1273,1,0,0,0,1316,1274,1,0,0,0,1316,1276,1,0,0,0,1316,1278,
        1,0,0,0,1316,1280,1,0,0,0,1316,1282,1,0,0,0,1316,1284,1,0,0,0,1316,
        1286,1,0,0,0,1316,1287,1,0,0,0,1316,1288,1,0,0,0,1316,1290,1,0,0,
        0,1316,1291,1,0,0,0,1316,1292,1,0,0,0,1316,1293,1,0,0,0,1316,1295,
        1,0,0,0,1316,1296,1,0,0,0,1316,1297,1,0,0,0,1316,1298,1,0,0,0,1316,
        1299,1,0,0,0,1316,1301,1,0,0,0,1316,1302,1,0,0,0,1316,1304,1,0,0,
        0,1316,1305,1,0,0,0,1316,1307,1,0,0,0,1316,1308,1,0,0,0,1316,1309,
        1,0,0,0,1316,1311,1,0,0,0,1316,1312,1,0,0,0,1316,1313,1,0,0,0,1317,
        41,1,0,0,0,1318,1347,3,168,84,0,1319,1320,5,310,0,0,1320,1347,3,
        172,86,0,1321,1322,5,384,0,0,1322,1323,5,166,0,0,1323,1347,3,174,
        87,0,1324,1326,5,166,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,
        1327,1,0,0,0,1327,1328,3,174,87,0,1328,1337,5,1213,0,0,1329,1334,
        3,58,29,0,1330,1331,5,1208,0,0,1331,1333,3,58,29,0,1332,1330,1,0,
        0,0,1333,1336,1,0,0,0,1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,1338,
        1,0,0,0,1336,1334,1,0,0,0,1337,1329,1,0,0,0,1337,1338,1,0,0,0,1338,
        1339,1,0,0,0,1339,1340,5,1214,0,0,1340,1347,1,0,0,0,1341,1343,5,
        437,0,0,1342,1344,3,96,48,0,1343,1342,1,0,0,0,1343,1344,1,0,0,0,
        1344,1345,1,0,0,0,1345,1347,3,202,101,0,1346,1318,1,0,0,0,1346,1319,
        1,0,0,0,1346,1321,1,0,0,0,1346,1325,1,0,0,0,1346,1341,1,0,0,0,1347,
        43,1,0,0,0,1348,1349,5,86,0,0,1349,1354,5,236,0,0,1350,1351,5,125,
        0,0,1351,1354,5,236,0,0,1352,1354,5,236,0,0,1353,1348,1,0,0,0,1353,
        1350,1,0,0,0,1353,1352,1,0,0,0,1354,45,1,0,0,0,1355,1356,5,86,0,
        0,1356,1361,5,357,0,0,1357,1358,5,125,0,0,1358,1361,5,357,0,0,1359,
        1361,5,357,0,0,1360,1355,1,0,0,0,1360,1357,1,0,0,0,1360,1359,1,0,
        0,0,1361,47,1,0,0,0,1362,1363,5,86,0,0,1363,1368,5,311,0,0,1364,
        1365,5,125,0,0,1365,1368,5,311,0,0,1366,1368,5,311,0,0,1367,1362,
        1,0,0,0,1367,1364,1,0,0,0,1367,1366,1,0,0,0,1368,49,1,0,0,0,1369,
        1370,5,86,0,0,1370,1375,5,480,0,0,1371,1372,5,125,0,0,1372,1375,
        5,480,0,0,1373,1375,5,480,0,0,1374,1369,1,0,0,0,1374,1371,1,0,0,
        0,1374,1373,1,0,0,0,1375,51,1,0,0,0,1376,1377,7,1,0,0,1377,53,1,
        0,0,0,1378,1380,5,13,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,
        1381,1,0,0,0,1381,1382,3,178,89,0,1382,55,1,0,0,0,1383,1385,5,13,
        0,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1387,
        3,178,89,0,1387,57,1,0,0,0,1388,1390,3,190,95,0,1389,1388,1,0,0,
        0,1389,1390,1,0,0,0,1390,1391,1,0,0,0,1391,1392,3,66,33,0,1392,59,
        1,0,0,0,1393,1394,5,474,0,0,1394,1395,5,10,0,0,1395,1396,5,289,0,
        0,1396,61,1,0,0,0,1397,1398,5,474,0,0,1398,1399,5,172,0,0,1399,1400,
        5,289,0,0,1400,63,1,0,0,0,1401,1402,5,172,0,0,1402,1403,5,289,0,
        0,1403,1404,5,159,0,0,1404,65,1,0,0,0,1405,1412,3,72,36,0,1406,1412,
        3,74,37,0,1407,1412,3,80,40,0,1408,1412,3,82,41,0,1409,1412,3,84,
        42,0,1410,1412,3,86,43,0,1411,1405,1,0,0,0,1411,1406,1,0,0,0,1411,
        1407,1,0,0,0,1411,1408,1,0,0,0,1411,1409,1,0,0,0,1411,1410,1,0,0,
        0,1412,67,1,0,0,0,1413,1421,3,72,36,0,1414,1421,3,74,37,0,1415,1421,
        3,76,38,0,1416,1421,3,80,40,0,1417,1421,3,82,41,0,1418,1421,3,84,
        42,0,1419,1421,3,86,43,0,1420,1413,1,0,0,0,1420,1414,1,0,0,0,1420,
        1415,1,0,0,0,1420,1416,1,0,0,0,1420,1417,1,0,0,0,1420,1418,1,0,0,
        0,1420,1419,1,0,0,0,1421,69,1,0,0,0,1422,1433,3,72,36,0,1423,1433,
        3,74,37,0,1424,1433,3,76,38,0,1425,1433,3,78,39,0,1426,1433,3,80,
        40,0,1427,1433,3,82,41,0,1428,1433,3,84,42,0,1429,1433,3,86,43,0,
        1430,1433,5,410,0,0,1431,1433,5,466,0,0,1432,1422,1,0,0,0,1432,1423,
        1,0,0,0,1432,1424,1,0,0,0,1432,1425,1,0,0,0,1432,1426,1,0,0,0,1432,
        1427,1,0,0,0,1432,1428,1,0,0,0,1432,1429,1,0,0,0,1432,1430,1,0,0,
        0,1432,1431,1,0,0,0,1433,71,1,0,0,0,1434,1477,5,44,0,0,1435,1477,
        5,381,0,0,1436,1477,5,202,0,0,1437,1477,5,201,0,0,1438,1477,5,36,
        0,0,1439,1449,7,2,0,0,1440,1442,5,1213,0,0,1441,1443,3,142,71,0,
        1442,1441,1,0,0,0,1442,1443,1,0,0,0,1443,1446,1,0,0,0,1444,1445,
        5,1208,0,0,1445,1447,3,142,71,0,1446,1444,1,0,0,0,1446,1447,1,0,
        0,0,1447,1448,1,0,0,0,1448,1450,5,1214,0,0,1449,1440,1,0,0,0,1449,
        1450,1,0,0,0,1450,1477,1,0,0,0,1451,1456,5,157,0,0,1452,1453,5,1213,
        0,0,1453,1454,3,142,71,0,1454,1455,5,1214,0,0,1455,1457,1,0,0,0,
        1456,1452,1,0,0,0,1456,1457,1,0,0,0,1457,1462,1,0,0,0,1458,1462,
        5,323,0,0,1459,1460,5,124,0,0,1460,1462,5,305,0,0,1461,1451,1,0,
        0,0,1461,1458,1,0,0,0,1461,1459,1,0,0,0,1462,1477,1,0,0,0,1463,1474,
        5,277,0,0,1464,1467,5,1213,0,0,1465,1468,3,142,71,0,1466,1468,5,
        1219,0,0,1467,1465,1,0,0,0,1467,1466,1,0,0,0,1468,1471,1,0,0,0,1469,
        1470,5,1208,0,0,1470,1472,3,142,71,0,1471,1469,1,0,0,0,1471,1472,
        1,0,0,0,1472,1473,1,0,0,0,1473,1475,5,1214,0,0,1474,1464,1,0,0,0,
        1474,1475,1,0,0,0,1475,1477,1,0,0,0,1476,1434,1,0,0,0,1476,1435,
        1,0,0,0,1476,1436,1,0,0,0,1476,1437,1,0,0,0,1476,1438,1,0,0,0,1476,
        1439,1,0,0,0,1476,1461,1,0,0,0,1476,1463,1,0,0,0,1477,73,1,0,0,0,
        1478,1480,7,3,0,0,1479,1481,3,100,50,0,1480,1479,1,0,0,0,1480,1481,
        1,0,0,0,1481,1483,1,0,0,0,1482,1484,3,106,53,0,1483,1482,1,0,0,0,
        1483,1484,1,0,0,0,1484,1519,1,0,0,0,1485,1487,5,173,0,0,1486,1488,
        3,100,50,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1519,1,0,0,0,
        1489,1495,5,464,0,0,1490,1491,5,55,0,0,1491,1495,5,467,0,0,1492,
        1493,5,52,0,0,1493,1495,5,467,0,0,1494,1489,1,0,0,0,1494,1490,1,
        0,0,0,1494,1492,1,0,0,0,1495,1496,1,0,0,0,1496,1498,3,100,50,0,1497,
        1499,3,106,53,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1519,1,
        0,0,0,1500,1501,5,231,0,0,1501,1519,5,464,0,0,1502,1503,5,465,0,
        0,1503,1519,3,100,50,0,1504,1505,5,231,0,0,1505,1519,5,465,0,0,1506,
        1511,5,62,0,0,1507,1508,5,55,0,0,1508,1509,5,215,0,0,1509,1511,5,
        279,0,0,1510,1506,1,0,0,0,1510,1507,1,0,0,0,1511,1513,1,0,0,0,1512,
        1514,3,102,51,0,1513,1512,1,0,0,0,1513,1514,1,0,0,0,1514,1516,1,
        0,0,0,1515,1517,3,118,59,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,
        1519,1,0,0,0,1518,1478,1,0,0,0,1518,1485,1,0,0,0,1518,1494,1,0,0,
        0,1518,1500,1,0,0,0,1518,1502,1,0,0,0,1518,1504,1,0,0,0,1518,1510,
        1,0,0,0,1519,75,1,0,0,0,1520,1522,5,464,0,0,1521,1523,3,106,53,0,
        1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1529,1,0,0,0,1524,1526,
        5,465,0,0,1525,1527,3,106,53,0,1526,1525,1,0,0,0,1526,1527,1,0,0,
        0,1527,1529,1,0,0,0,1528,1520,1,0,0,0,1528,1524,1,0,0,0,1529,77,
        1,0,0,0,1530,1535,5,62,0,0,1531,1532,5,55,0,0,1532,1533,5,215,0,
        0,1533,1535,5,279,0,0,1534,1530,1,0,0,0,1534,1531,1,0,0,0,1535,1536,
        1,0,0,0,1536,1537,5,20,0,0,1537,1547,5,225,0,0,1538,1543,5,38,0,
        0,1539,1540,5,37,0,0,1540,1541,5,215,0,0,1541,1543,5,279,0,0,1542,
        1538,1,0,0,0,1542,1539,1,0,0,0,1543,1544,1,0,0,0,1544,1545,5,20,
        0,0,1545,1547,5,225,0,0,1546,1534,1,0,0,0,1546,1542,1,0,0,0,1547,
        79,1,0,0,0,1548,1550,5,43,0,0,1549,1551,3,100,50,0,1550,1549,1,0,
        0,0,1550,1551,1,0,0,0,1551,1564,1,0,0,0,1552,1553,5,463,0,0,1553,
        1564,3,100,50,0,1554,1559,5,38,0,0,1555,1556,5,37,0,0,1556,1557,
        5,215,0,0,1557,1559,5,279,0,0,1558,1554,1,0,0,0,1558,1555,1,0,0,
        0,1559,1561,1,0,0,0,1560,1562,3,102,51,0,1561,1560,1,0,0,0,1561,
        1562,1,0,0,0,1562,1564,1,0,0,0,1563,1548,1,0,0,0,1563,1552,1,0,0,
        0,1563,1558,1,0,0,0,1564,81,1,0,0,0,1565,1583,5,104,0,0,1566,1568,
        5,421,0,0,1567,1569,3,100,50,0,1568,1567,1,0,0,0,1568,1569,1,0,0,
        0,1569,1571,1,0,0,0,1570,1572,3,130,65,0,1571,1570,1,0,0,0,1571,
        1572,1,0,0,0,1572,1583,1,0,0,0,1573,1575,5,422,0,0,1574,1576,3,100,
        50,0,1575,1574,1,0,0,0,1575,1576,1,0,0,0,1576,1578,1,0,0,0,1577,
        1579,3,130,65,0,1578,1577,1,0,0,0,1578,1579,1,0,0,0,1579,1583,1,
        0,0,0,1580,1581,5,205,0,0,1581,1583,3,98,49,0,1582,1565,1,0,0,0,
        1582,1566,1,0,0,0,1582,1573,1,0,0,0,1582,1580,1,0,0,0,1583,83,1,
        0,0,0,1584,1585,5,853,0,0,1585,1586,5,1213,0,0,1586,1587,5,104,0,
        0,1587,1609,5,1214,0,0,1588,1589,5,853,0,0,1589,1590,5,1213,0,0,
        1590,1592,5,421,0,0,1591,1593,3,100,50,0,1592,1591,1,0,0,0,1592,
        1593,1,0,0,0,1593,1595,1,0,0,0,1594,1596,3,130,65,0,1595,1594,1,
        0,0,0,1595,1596,1,0,0,0,1596,1597,1,0,0,0,1597,1609,5,1214,0,0,1598,
        1599,5,853,0,0,1599,1600,5,1213,0,0,1600,1602,5,422,0,0,1601,1603,
        3,100,50,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1605,1,0,0,0,
        1604,1606,3,130,65,0,1605,1604,1,0,0,0,1605,1606,1,0,0,0,1606,1607,
        1,0,0,0,1607,1609,5,1214,0,0,1608,1584,1,0,0,0,1608,1588,1,0,0,0,
        1608,1598,1,0,0,0,1609,85,1,0,0,0,1610,1612,3,96,48,0,1611,1610,
        1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1615,7,4,0,0,1614,
        1616,3,102,51,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1618,1,
        0,0,0,1617,1619,3,120,60,0,1618,1617,1,0,0,0,1618,1619,1,0,0,0,1619,
        1660,1,0,0,0,1620,1622,3,96,48,0,1621,1620,1,0,0,0,1621,1622,1,0,
        0,0,1622,1623,1,0,0,0,1623,1625,5,720,0,0,1624,1626,3,104,52,0,1625,
        1624,1,0,0,0,1625,1626,1,0,0,0,1626,1628,1,0,0,0,1627,1629,3,120,
        60,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1632,1,0,0,0,1630,
        1633,3,118,59,0,1631,1633,3,122,61,0,1632,1630,1,0,0,0,1632,1631,
        1,0,0,0,1632,1633,1,0,0,0,1633,1660,1,0,0,0,1634,1636,3,96,48,0,
        1635,1634,1,0,0,0,1635,1636,1,0,0,0,1636,1637,1,0,0,0,1637,1639,
        5,936,0,0,1638,1640,3,104,52,0,1639,1638,1,0,0,0,1639,1640,1,0,0,
        0,1640,1642,1,0,0,0,1641,1643,3,120,60,0,1642,1641,1,0,0,0,1642,
        1643,1,0,0,0,1643,1660,1,0,0,0,1644,1646,3,96,48,0,1645,1644,1,0,
        0,0,1645,1646,1,0,0,0,1646,1647,1,0,0,0,1647,1649,5,607,0,0,1648,
        1650,3,104,52,0,1649,1648,1,0,0,0,1649,1650,1,0,0,0,1650,1652,1,
        0,0,0,1651,1653,3,120,60,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,
        1654,1,0,0,0,1654,1660,3,124,62,0,1655,1657,3,96,48,0,1656,1655,
        1,0,0,0,1656,1657,1,0,0,0,1657,1658,1,0,0,0,1658,1660,3,166,83,0,
        1659,1611,1,0,0,0,1659,1621,1,0,0,0,1659,1635,1,0,0,0,1659,1645,
        1,0,0,0,1659,1656,1,0,0,0,1660,87,1,0,0,0,1661,1670,3,108,54,0,1662,
        1670,3,110,55,0,1663,1670,3,112,56,0,1664,1670,3,94,47,0,1665,1670,
        3,130,65,0,1666,1670,3,552,276,0,1667,1670,3,106,53,0,1668,1670,
        3,90,45,0,1669,1661,1,0,0,0,1669,1662,1,0,0,0,1669,1663,1,0,0,0,
        1669,1664,1,0,0,0,1669,1665,1,0,0,0,1669,1666,1,0,0,0,1669,1667,
        1,0,0,0,1669,1668,1,0,0,0,1670,89,1,0,0,0,1671,1673,5,272,0,0,1672,
        1671,1,0,0,0,1672,1673,1,0,0,0,1673,1674,1,0,0,0,1674,1680,5,274,
        0,0,1675,1676,5,111,0,0,1676,1680,3,92,46,0,1677,1678,5,474,0,0,
        1678,1680,5,111,0,0,1679,1672,1,0,0,0,1679,1675,1,0,0,0,1679,1677,
        1,0,0,0,1680,91,1,0,0,0,1681,1682,7,5,0,0,1682,1688,3,146,73,0,1683,
        1684,7,5,0,0,1684,1688,3,142,71,0,1685,1688,3,132,66,0,1686,1688,
        3,410,205,0,1687,1681,1,0,0,0,1687,1683,1,0,0,0,1687,1685,1,0,0,
        0,1687,1686,1,0,0,0,1688,93,1,0,0,0,1689,1692,3,116,58,0,1690,1692,
        3,114,57,0,1691,1689,1,0,0,0,1691,1690,1,0,0,0,1692,95,1,0,0,0,1693,
        1694,5,1089,0,0,1694,1695,5,1209,0,0,1695,97,1,0,0,0,1696,1698,5,
        478,0,0,1697,1699,3,100,50,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,
        1699,1702,1,0,0,0,1700,1701,5,426,0,0,1701,1703,5,258,0,0,1702,1700,
        1,0,0,0,1702,1703,1,0,0,0,1703,1759,1,0,0,0,1704,1706,5,258,0,0,
        1705,1707,3,100,50,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,1759,
        1,0,0,0,1708,1710,5,106,0,0,1709,1711,3,100,50,0,1710,1709,1,0,0,
        0,1710,1711,1,0,0,0,1711,1721,1,0,0,0,1712,1713,5,426,0,0,1713,1722,
        5,185,0,0,1714,1715,5,426,0,0,1715,1722,5,248,0,0,1716,1717,5,426,
        0,0,1717,1719,5,368,0,0,1718,1720,3,100,50,0,1719,1718,1,0,0,0,1719,
        1720,1,0,0,0,1720,1722,1,0,0,0,1721,1712,1,0,0,0,1721,1714,1,0,0,
        0,1721,1716,1,0,0,0,1721,1722,1,0,0,0,1722,1759,1,0,0,0,1723,1725,
        5,185,0,0,1724,1726,3,100,50,0,1725,1724,1,0,0,0,1725,1726,1,0,0,
        0,1726,1734,1,0,0,0,1727,1728,5,426,0,0,1728,1735,5,248,0,0,1729,
        1730,5,426,0,0,1730,1732,5,368,0,0,1731,1733,3,100,50,0,1732,1731,
        1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1727,1,0,0,0,1734,
        1729,1,0,0,0,1734,1735,1,0,0,0,1735,1759,1,0,0,0,1736,1738,5,248,
        0,0,1737,1739,3,100,50,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,
        1745,1,0,0,0,1740,1741,5,426,0,0,1741,1743,5,368,0,0,1742,1744,3,
        100,50,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,1746,1,0,0,0,1745,
        1740,1,0,0,0,1745,1746,1,0,0,0,1746,1759,1,0,0,0,1747,1756,5,368,
        0,0,1748,1749,5,1213,0,0,1749,1752,3,142,71,0,1750,1751,5,1208,0,
        0,1751,1753,3,142,71,0,1752,1750,1,0,0,0,1752,1753,1,0,0,0,1753,
        1754,1,0,0,0,1754,1755,5,1214,0,0,1755,1757,1,0,0,0,1756,1748,1,
        0,0,0,1756,1757,1,0,0,0,1757,1759,1,0,0,0,1758,1696,1,0,0,0,1758,
        1704,1,0,0,0,1758,1708,1,0,0,0,1758,1723,1,0,0,0,1758,1736,1,0,0,
        0,1758,1747,1,0,0,0,1759,99,1,0,0,0,1760,1761,5,1213,0,0,1761,1762,
        3,142,71,0,1762,1763,5,1214,0,0,1763,101,1,0,0,0,1764,1765,5,1213,
        0,0,1765,1767,3,142,71,0,1766,1768,7,6,0,0,1767,1766,1,0,0,0,1767,
        1768,1,0,0,0,1768,1769,1,0,0,0,1769,1770,5,1214,0,0,1770,103,1,0,
        0,0,1771,1772,5,1213,0,0,1772,1774,3,142,71,0,1773,1775,7,7,0,0,
        1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,0,1776,1777,
        5,1214,0,0,1777,105,1,0,0,0,1778,1779,7,3,0,0,1779,1780,5,372,0,
        0,1780,1781,7,8,0,0,1781,107,1,0,0,0,1782,1783,7,9,0,0,1783,109,
        1,0,0,0,1784,1786,7,10,0,0,1785,1784,1,0,0,0,1785,1786,1,0,0,0,1786,
        1787,1,0,0,0,1787,1788,7,11,0,0,1788,111,1,0,0,0,1789,1793,5,161,
        0,0,1790,1794,3,136,68,0,1791,1794,5,1198,0,0,1792,1794,5,1199,0,
        0,1793,1790,1,0,0,0,1793,1791,1,0,0,0,1793,1792,1,0,0,0,1794,113,
        1,0,0,0,1795,1796,5,425,0,0,1796,1797,3,136,68,0,1797,115,1,0,0,
        0,1798,1799,5,262,0,0,1799,1800,3,186,93,0,1800,117,1,0,0,0,1801,
        1802,7,3,0,0,1802,1803,5,372,0,0,1803,1804,7,12,0,0,1804,119,1,0,
        0,0,1805,1806,5,709,0,0,1806,1807,5,739,0,0,1807,1808,3,142,71,0,
        1808,121,1,0,0,0,1809,1810,5,941,0,0,1810,1811,5,161,0,0,1811,1812,
        7,13,0,0,1812,123,1,0,0,0,1813,1814,5,941,0,0,1814,1815,5,161,0,
        0,1815,1817,3,126,63,0,1816,1818,3,128,64,0,1817,1816,1,0,0,0,1817,
        1818,1,0,0,0,1818,125,1,0,0,0,1819,1825,5,545,0,0,1820,1822,5,1073,
        0,0,1821,1823,3,118,59,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,
        1825,1,0,0,0,1824,1819,1,0,0,0,1824,1820,1,0,0,0,1825,127,1,0,0,
        0,1826,1827,5,474,0,0,1827,1828,5,905,0,0,1828,1829,3,170,85,0,1829,
        129,1,0,0,0,1830,1831,5,474,0,0,1831,1832,5,421,0,0,1832,1833,5,
        480,0,0,1833,131,1,0,0,0,1834,1848,3,134,67,0,1835,1848,3,136,68,
        0,1836,1848,3,138,69,0,1837,1848,3,140,70,0,1838,1848,3,142,71,0,
        1839,1848,3,144,72,0,1840,1848,3,146,73,0,1841,1848,3,150,75,0,1842,
        1848,3,152,76,0,1843,1848,3,154,77,0,1844,1848,3,156,78,0,1845,1848,
        3,160,80,0,1846,1848,5,274,0,0,1847,1834,1,0,0,0,1847,1835,1,0,0,
        0,1847,1836,1,0,0,0,1847,1837,1,0,0,0,1847,1838,1,0,0,0,1847,1839,
        1,0,0,0,1847,1840,1,0,0,0,1847,1841,1,0,0,0,1847,1842,1,0,0,0,1847,
        1843,1,0,0,0,1847,1844,1,0,0,0,1847,1845,1,0,0,0,1847,1846,1,0,0,
        0,1848,133,1,0,0,0,1849,1850,5,1195,0,0,1850,135,1,0,0,0,1851,1853,
        3,148,74,0,1852,1851,1,0,0,0,1852,1853,1,0,0,0,1853,1855,1,0,0,0,
        1854,1856,5,1203,0,0,1855,1854,1,0,0,0,1856,1857,1,0,0,0,1857,1855,
        1,0,0,0,1857,1858,1,0,0,0,1858,137,1,0,0,0,1859,1861,3,148,74,0,
        1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,1866,
        5,1202,0,0,1863,1865,5,1203,0,0,1864,1863,1,0,0,0,1865,1868,1,0,
        0,0,1866,1864,1,0,0,0,1866,1867,1,0,0,0,1867,1869,1,0,0,0,1868,1866,
        1,0,0,0,1869,1870,5,444,0,0,1870,1871,5,1203,0,0,1871,139,1,0,0,
        0,1872,1874,3,148,74,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,
        1875,1,0,0,0,1875,1876,5,1204,0,0,1876,141,1,0,0,0,1877,1878,5,1194,
        0,0,1878,143,1,0,0,0,1879,1880,5,1196,0,0,1880,145,1,0,0,0,1881,
        1882,5,1197,0,0,1882,147,1,0,0,0,1883,1884,7,14,0,0,1884,149,1,0,
        0,0,1885,1887,5,104,0,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,
        1888,1,0,0,0,1888,1889,5,1198,0,0,1889,151,1,0,0,0,1890,1892,5,421,
        0,0,1891,1890,1,0,0,0,1891,1892,1,0,0,0,1892,1893,1,0,0,0,1893,1894,
        5,1199,0,0,1894,153,1,0,0,0,1895,1897,5,422,0,0,1896,1895,1,0,0,
        0,1896,1897,1,0,0,0,1897,1898,1,0,0,0,1898,1899,5,1200,0,0,1899,
        155,1,0,0,0,1900,1902,5,205,0,0,1901,1903,5,1222,0,0,1902,1901,1,
        0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1905,7,15,0,0,1905,
        1906,3,158,79,0,1906,157,1,0,0,0,1907,1935,5,478,0,0,1908,1909,5,
        478,0,0,1909,1910,5,426,0,0,1910,1935,5,258,0,0,1911,1935,5,258,
        0,0,1912,1935,5,106,0,0,1913,1914,5,106,0,0,1914,1915,5,426,0,0,
        1915,1935,5,185,0,0,1916,1917,5,106,0,0,1917,1918,5,426,0,0,1918,
        1935,5,248,0,0,1919,1920,5,106,0,0,1920,1921,5,426,0,0,1921,1935,
        5,368,0,0,1922,1935,5,185,0,0,1923,1924,5,185,0,0,1924,1925,5,426,
        0,0,1925,1935,5,248,0,0,1926,1927,5,185,0,0,1927,1928,5,426,0,0,
        1928,1935,5,368,0,0,1929,1935,5,248,0,0,1930,1931,5,248,0,0,1931,
        1932,5,426,0,0,1932,1935,5,368,0,0,1933,1935,5,368,0,0,1934,1907,
        1,0,0,0,1934,1908,1,0,0,0,1934,1911,1,0,0,0,1934,1912,1,0,0,0,1934,
        1913,1,0,0,0,1934,1916,1,0,0,0,1934,1919,1,0,0,0,1934,1922,1,0,0,
        0,1934,1923,1,0,0,0,1934,1926,1,0,0,0,1934,1929,1,0,0,0,1934,1930,
        1,0,0,0,1934,1933,1,0,0,0,1935,159,1,0,0,0,1936,1937,5,853,0,0,1937,
        1938,5,1201,0,0,1938,161,1,0,0,0,1939,1940,3,178,89,0,1940,1941,
        5,1209,0,0,1941,1942,3,166,83,0,1942,1943,5,1209,0,0,1943,1944,3,
        164,82,0,1944,1951,1,0,0,0,1945,1946,3,166,83,0,1946,1947,5,1209,
        0,0,1947,1948,3,164,82,0,1948,1951,1,0,0,0,1949,1951,3,164,82,0,
        1950,1939,1,0,0,0,1950,1945,1,0,0,0,1950,1949,1,0,0,0,1951,163,1,
        0,0,0,1952,1957,5,1193,0,0,1953,1957,3,210,105,0,1954,1957,5,366,
        0,0,1955,1957,5,363,0,0,1956,1952,1,0,0,0,1956,1953,1,0,0,0,1956,
        1954,1,0,0,0,1956,1955,1,0,0,0,1957,165,1,0,0,0,1958,1961,5,1193,
        0,0,1959,1961,3,210,105,0,1960,1958,1,0,0,0,1960,1959,1,0,0,0,1961,
        167,1,0,0,0,1962,1963,3,178,89,0,1963,1964,5,1209,0,0,1964,1966,
        1,0,0,0,1965,1962,1,0,0,0,1965,1966,1,0,0,0,1966,1969,1,0,0,0,1967,
        1970,5,1193,0,0,1968,1970,3,210,105,0,1969,1967,1,0,0,0,1969,1968,
        1,0,0,0,1970,169,1,0,0,0,1971,1972,3,178,89,0,1972,1973,5,1209,0,
        0,1973,1975,1,0,0,0,1974,1971,1,0,0,0,1974,1975,1,0,0,0,1975,1978,
        1,0,0,0,1976,1979,5,1193,0,0,1977,1979,3,210,105,0,1978,1976,1,0,
        0,0,1978,1977,1,0,0,0,1979,171,1,0,0,0,1980,1981,3,178,89,0,1981,
        1982,5,1209,0,0,1982,1984,1,0,0,0,1983,1980,1,0,0,0,1983,1984,1,
        0,0,0,1984,1987,1,0,0,0,1985,1988,5,1193,0,0,1986,1988,3,210,105,
        0,1987,1985,1,0,0,0,1987,1986,1,0,0,0,1988,173,1,0,0,0,1989,1990,
        3,178,89,0,1990,1991,5,1209,0,0,1991,1993,1,0,0,0,1992,1989,1,0,
        0,0,1992,1993,1,0,0,0,1993,1996,1,0,0,0,1994,1997,5,1193,0,0,1995,
        1997,3,210,105,0,1996,1994,1,0,0,0,1996,1995,1,0,0,0,1997,175,1,
        0,0,0,1998,1999,3,178,89,0,1999,2000,5,1209,0,0,2000,2002,1,0,0,
        0,2001,1998,1,0,0,0,2001,2002,1,0,0,0,2002,2005,1,0,0,0,2003,2006,
        5,1193,0,0,2004,2006,3,210,105,0,2005,2003,1,0,0,0,2005,2004,1,0,
        0,0,2006,177,1,0,0,0,2007,2010,5,1193,0,0,2008,2010,3,210,105,0,
        2009,2007,1,0,0,0,2009,2008,1,0,0,0,2010,179,1,0,0,0,2011,2014,5,
        1193,0,0,2012,2014,3,210,105,0,2013,2011,1,0,0,0,2013,2012,1,0,0,
        0,2014,181,1,0,0,0,2015,2019,5,1193,0,0,2016,2019,5,10,0,0,2017,
        2019,3,210,105,0,2018,2015,1,0,0,0,2018,2016,1,0,0,0,2018,2017,1,
        0,0,0,2019,183,1,0,0,0,2020,2023,5,1193,0,0,2021,2023,3,210,105,
        0,2022,2020,1,0,0,0,2022,2021,1,0,0,0,2023,185,1,0,0,0,2024,2027,
        5,1193,0,0,2025,2027,3,210,105,0,2026,2024,1,0,0,0,2026,2025,1,0,
        0,0,2027,187,1,0,0,0,2028,2031,5,1193,0,0,2029,2031,3,210,105,0,
        2030,2028,1,0,0,0,2030,2029,1,0,0,0,2031,189,1,0,0,0,2032,2035,5,
        1193,0,0,2033,2035,3,210,105,0,2034,2032,1,0,0,0,2034,2033,1,0,0,
        0,2035,191,1,0,0,0,2036,2039,5,1193,0,0,2037,2039,3,210,105,0,2038,
        2036,1,0,0,0,2038,2037,1,0,0,0,2039,193,1,0,0,0,2040,2043,5,1193,
        0,0,2041,2043,3,210,105,0,2042,2040,1,0,0,0,2042,2041,1,0,0,0,2043,
        195,1,0,0,0,2044,2047,5,1193,0,0,2045,2047,3,210,105,0,2046,2044,
        1,0,0,0,2046,2045,1,0,0,0,2047,197,1,0,0,0,2048,2051,5,1193,0,0,
        2049,2051,3,210,105,0,2050,2048,1,0,0,0,2050,2049,1,0,0,0,2051,199,
        1,0,0,0,2052,2055,5,1193,0,0,2053,2055,3,210,105,0,2054,2052,1,0,
        0,0,2054,2053,1,0,0,0,2055,201,1,0,0,0,2056,2059,5,1193,0,0,2057,
        2059,3,210,105,0,2058,2056,1,0,0,0,2058,2057,1,0,0,0,2059,203,1,
        0,0,0,2060,2063,5,1193,0,0,2061,2063,3,210,105,0,2062,2060,1,0,0,
        0,2062,2061,1,0,0,0,2063,205,1,0,0,0,2064,2067,5,1193,0,0,2065,2067,
        3,210,105,0,2066,2064,1,0,0,0,2066,2065,1,0,0,0,2067,207,1,0,0,0,
        2068,2069,7,16,0,0,2069,209,1,0,0,0,2070,2071,7,17,0,0,2071,211,
        1,0,0,0,2072,2073,6,106,-1,0,2073,2079,3,214,107,0,2074,2075,5,1213,
        0,0,2075,2076,3,212,106,0,2076,2077,5,1214,0,0,2077,2079,1,0,0,0,
        2078,2072,1,0,0,0,2078,2074,1,0,0,0,2079,2088,1,0,0,0,2080,2081,
        10,2,0,0,2081,2083,7,18,0,0,2082,2084,5,13,0,0,2083,2082,1,0,0,0,
        2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,2087,3,212,106,3,2086,2080,
        1,0,0,0,2087,2090,1,0,0,0,2088,2086,1,0,0,0,2088,2089,1,0,0,0,2089,
        213,1,0,0,0,2090,2088,1,0,0,0,2091,2093,7,19,0,0,2092,2094,3,216,
        108,0,2093,2092,1,0,0,0,2093,2094,1,0,0,0,2094,2096,1,0,0,0,2095,
        2097,3,218,109,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,2097,2098,1,
        0,0,0,2098,2130,3,220,110,0,2099,2103,3,234,117,0,2100,2102,3,324,
        162,0,2101,2100,1,0,0,0,2102,2105,1,0,0,0,2103,2101,1,0,0,0,2103,
        2104,1,0,0,0,2104,2129,1,0,0,0,2105,2103,1,0,0,0,2106,2129,3,232,
        116,0,2107,2129,3,330,165,0,2108,2129,3,332,166,0,2109,2112,3,350,
        175,0,2110,2112,3,352,176,0,2111,2109,1,0,0,0,2111,2110,1,0,0,0,
        2112,2129,1,0,0,0,2113,2129,3,354,177,0,2114,2116,3,324,162,0,2115,
        2114,1,0,0,0,2116,2119,1,0,0,0,2117,2115,1,0,0,0,2117,2118,1,0,0,
        0,2118,2120,1,0,0,0,2119,2117,1,0,0,0,2120,2124,3,364,182,0,2121,
        2123,3,324,162,0,2122,2121,1,0,0,0,2123,2126,1,0,0,0,2124,2122,1,
        0,0,0,2124,2125,1,0,0,0,2125,2129,1,0,0,0,2126,2124,1,0,0,0,2127,
        2129,3,370,185,0,2128,2099,1,0,0,0,2128,2106,1,0,0,0,2128,2107,1,
        0,0,0,2128,2108,1,0,0,0,2128,2111,1,0,0,0,2128,2113,1,0,0,0,2128,
        2117,1,0,0,0,2128,2127,1,0,0,0,2129,2132,1,0,0,0,2130,2128,1,0,0,
        0,2130,2131,1,0,0,0,2131,2134,1,0,0,0,2132,2130,1,0,0,0,2133,2135,
        3,362,181,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,215,1,0,0,0,
        2136,2137,5,474,0,0,2137,2138,5,1079,0,0,2138,2139,5,364,0,0,2139,
        217,1,0,0,0,2140,2141,5,20,0,0,2141,2142,5,720,0,0,2142,219,1,0,
        0,0,2143,2148,5,121,0,0,2144,2148,5,448,0,0,2145,2148,5,13,0,0,2146,
        2148,3,224,112,0,2147,2143,1,0,0,0,2147,2144,1,0,0,0,2147,2145,1,
        0,0,0,2147,2146,1,0,0,0,2148,2151,1,0,0,0,2149,2151,3,222,111,0,
        2150,2147,1,0,0,0,2150,2149,1,0,0,0,2150,2151,1,0,0,0,2151,2152,
        1,0,0,0,2152,2155,3,228,114,0,2153,2155,3,226,113,0,2154,2150,1,
        0,0,0,2154,2153,1,0,0,0,2155,221,1,0,0,0,2156,2160,5,427,0,0,2157,
        2161,3,142,71,0,2158,2161,3,146,73,0,2159,2161,3,570,285,0,2160,
        2157,1,0,0,0,2160,2158,1,0,0,0,2160,2159,1,0,0,0,2161,2163,1,0,0,
        0,2162,2164,5,300,0,0,2163,2162,1,0,0,0,2163,2164,1,0,0,0,2164,2167,
        1,0,0,0,2165,2166,5,474,0,0,2166,2168,5,986,0,0,2167,2165,1,0,0,
        0,2167,2168,1,0,0,0,2168,223,1,0,0,0,2169,2180,5,271,0,0,2170,2171,
        5,286,0,0,2171,2172,5,765,0,0,2172,2173,5,290,0,0,2173,2181,5,296,
        0,0,2174,2175,5,286,0,0,2175,2178,5,296,0,0,2176,2177,5,290,0,0,
        2177,2179,5,765,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2181,
        1,0,0,0,2180,2170,1,0,0,0,2180,2174,1,0,0,0,2180,2181,1,0,0,0,2181,
        225,1,0,0,0,2182,2189,5,1219,0,0,2183,2184,3,170,85,0,2184,2185,
        5,1209,0,0,2185,2186,5,1219,0,0,2186,2189,1,0,0,0,2187,2189,3,162,
        81,0,2188,2182,1,0,0,0,2188,2183,1,0,0,0,2188,2187,1,0,0,0,2189,
        2190,1,0,0,0,2190,2191,5,1209,0,0,2191,2192,5,13,0,0,2192,227,1,
        0,0,0,2193,2203,5,1219,0,0,2194,2199,3,230,115,0,2195,2196,5,1208,
        0,0,2196,2198,3,230,115,0,2197,2195,1,0,0,0,2198,2201,1,0,0,0,2199,
        2197,1,0,0,0,2199,2200,1,0,0,0,2200,2203,1,0,0,0,2201,2199,1,0,0,
        0,2202,2193,1,0,0,0,2202,2194,1,0,0,0,2203,229,1,0,0,0,2204,2209,
        3,374,187,0,2205,2207,5,20,0,0,2206,2205,1,0,0,0,2206,2207,1,0,0,
        0,2207,2208,1,0,0,0,2208,2210,3,186,93,0,2209,2206,1,0,0,0,2209,
        2210,1,0,0,0,2210,2216,1,0,0,0,2211,2212,3,170,85,0,2212,2213,5,
        1209,0,0,2213,2214,5,1219,0,0,2214,2216,1,0,0,0,2215,2204,1,0,0,
        0,2215,2211,1,0,0,0,2216,231,1,0,0,0,2217,2220,5,206,0,0,2218,2221,
        3,188,94,0,2219,2221,3,566,283,0,2220,2218,1,0,0,0,2220,2219,1,0,
        0,0,2221,2229,1,0,0,0,2222,2225,5,1208,0,0,2223,2226,3,188,94,0,
        2224,2226,3,566,283,0,2225,2223,1,0,0,0,2225,2224,1,0,0,0,2226,2228,
        1,0,0,0,2227,2222,1,0,0,0,2228,2231,1,0,0,0,2229,2227,1,0,0,0,2229,
        2230,1,0,0,0,2230,233,1,0,0,0,2231,2229,1,0,0,0,2232,2233,5,164,
        0,0,2233,2234,3,236,118,0,2234,235,1,0,0,0,2235,2239,3,238,119,0,
        2236,2238,3,240,120,0,2237,2236,1,0,0,0,2238,2241,1,0,0,0,2239,2237,
        1,0,0,0,2239,2240,1,0,0,0,2240,2266,1,0,0,0,2241,2239,1,0,0,0,2242,
        2246,3,242,121,0,2243,2245,3,240,120,0,2244,2243,1,0,0,0,2245,2248,
        1,0,0,0,2246,2244,1,0,0,0,2246,2247,1,0,0,0,2247,2266,1,0,0,0,2248,
        2246,1,0,0,0,2249,2253,3,244,122,0,2250,2252,3,240,120,0,2251,2250,
        1,0,0,0,2252,2255,1,0,0,0,2253,2251,1,0,0,0,2253,2254,1,0,0,0,2254,
        2266,1,0,0,0,2255,2253,1,0,0,0,2256,2257,5,1213,0,0,2257,2258,3,
        236,118,0,2258,2262,5,1214,0,0,2259,2261,3,240,120,0,2260,2259,1,
        0,0,0,2261,2264,1,0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,
        2266,1,0,0,0,2264,2262,1,0,0,0,2265,2235,1,0,0,0,2265,2242,1,0,0,
        0,2265,2249,1,0,0,0,2265,2256,1,0,0,0,2266,237,1,0,0,0,2267,2274,
        3,246,123,0,2268,2274,3,316,158,0,2269,2274,3,252,126,0,2270,2274,
        3,268,134,0,2271,2274,3,254,127,0,2272,2274,3,280,140,0,2273,2267,
        1,0,0,0,2273,2268,1,0,0,0,2273,2269,1,0,0,0,2273,2270,1,0,0,0,2273,
        2271,1,0,0,0,2273,2272,1,0,0,0,2274,239,1,0,0,0,2275,2276,5,1208,
        0,0,2276,2285,3,246,123,0,2277,2278,5,1208,0,0,2278,2285,3,316,158,
        0,2279,2280,5,1208,0,0,2280,2285,3,268,134,0,2281,2282,5,1208,0,
        0,2282,2285,3,280,140,0,2283,2285,3,248,124,0,2284,2275,1,0,0,0,
        2284,2277,1,0,0,0,2284,2279,1,0,0,0,2284,2281,1,0,0,0,2284,2283,
        1,0,0,0,2285,241,1,0,0,0,2286,2289,3,246,123,0,2287,2289,3,316,158,
        0,2288,2286,1,0,0,0,2288,2287,1,0,0,0,2289,2290,1,0,0,0,2290,2291,
        3,528,264,0,2291,243,1,0,0,0,2292,2295,3,246,123,0,2293,2295,3,316,
        158,0,2294,2292,1,0,0,0,2294,2293,1,0,0,0,2295,2296,1,0,0,0,2296,
        2297,3,544,272,0,2297,245,1,0,0,0,2298,2303,3,170,85,0,2299,2301,
        3,266,133,0,2300,2302,3,264,132,0,2301,2300,1,0,0,0,2301,2302,1,
        0,0,0,2302,2304,1,0,0,0,2303,2299,1,0,0,0,2303,2304,1,0,0,0,2304,
        2309,1,0,0,0,2305,2307,5,20,0,0,2306,2305,1,0,0,0,2306,2307,1,0,
        0,0,2307,2308,1,0,0,0,2308,2310,3,186,93,0,2309,2306,1,0,0,0,2309,
        2310,1,0,0,0,2310,247,1,0,0,0,2311,2317,5,194,0,0,2312,2314,7,20,
        0,0,2313,2315,5,294,0,0,2314,2313,1,0,0,0,2314,2315,1,0,0,0,2315,
        2317,1,0,0,0,2316,2311,1,0,0,0,2316,2312,1,0,0,0,2316,2317,1,0,0,
        0,2317,2318,1,0,0,0,2318,2319,5,210,0,0,2319,2323,3,238,119,0,2320,
        2322,3,250,125,0,2321,2320,1,0,0,0,2322,2325,1,0,0,0,2323,2321,1,
        0,0,0,2323,2324,1,0,0,0,2324,2364,1,0,0,0,2325,2323,1,0,0,0,2326,
        2332,5,194,0,0,2327,2329,7,20,0,0,2328,2330,5,294,0,0,2329,2328,
        1,0,0,0,2329,2330,1,0,0,0,2330,2332,1,0,0,0,2331,2326,1,0,0,0,2331,
        2327,1,0,0,0,2331,2332,1,0,0,0,2332,2333,1,0,0,0,2333,2334,5,210,
        0,0,2334,2335,5,1213,0,0,2335,2336,3,236,118,0,2336,2340,5,1214,
        0,0,2337,2339,3,250,125,0,2338,2337,1,0,0,0,2339,2342,1,0,0,0,2340,
        2338,1,0,0,0,2340,2341,1,0,0,0,2341,2364,1,0,0,0,2342,2340,1,0,0,
        0,2343,2344,5,87,0,0,2344,2345,5,210,0,0,2345,2349,3,238,119,0,2346,
        2348,3,250,125,0,2347,2346,1,0,0,0,2348,2351,1,0,0,0,2349,2347,1,
        0,0,0,2349,2350,1,0,0,0,2350,2364,1,0,0,0,2351,2349,1,0,0,0,2352,
        2353,5,87,0,0,2353,2354,5,210,0,0,2354,2355,5,1213,0,0,2355,2356,
        3,236,118,0,2356,2360,5,1214,0,0,2357,2359,3,250,125,0,2358,2357,
        1,0,0,0,2359,2362,1,0,0,0,2360,2358,1,0,0,0,2360,2361,1,0,0,0,2361,
        2364,1,0,0,0,2362,2360,1,0,0,0,2363,2316,1,0,0,0,2363,2331,1,0,0,
        0,2363,2343,1,0,0,0,2363,2352,1,0,0,0,2364,249,1,0,0,0,2365,2366,
        5,286,0,0,2366,2367,3,372,186,0,2367,251,1,0,0,0,2368,2369,5,160,
        0,0,2369,2370,5,406,0,0,2370,2377,5,1213,0,0,2371,2378,3,214,107,
        0,2372,2374,9,0,0,0,2373,2372,1,0,0,0,2374,2375,1,0,0,0,2375,2376,
        1,0,0,0,2375,2373,1,0,0,0,2376,2378,1,0,0,0,2377,2371,1,0,0,0,2377,
        2373,1,0,0,0,2378,2379,1,0,0,0,2379,2380,5,1214,0,0,2380,2393,3,
        266,133,0,2381,2382,5,664,0,0,2382,2383,5,1213,0,0,2383,2388,3,258,
        129,0,2384,2385,5,1208,0,0,2385,2387,3,258,129,0,2386,2384,1,0,0,
        0,2387,2390,1,0,0,0,2388,2386,1,0,0,0,2388,2389,1,0,0,0,2389,2391,
        1,0,0,0,2390,2388,1,0,0,0,2391,2392,5,1214,0,0,2392,2394,1,0,0,0,
        2393,2381,1,0,0,0,2393,2394,1,0,0,0,2394,2396,1,0,0,0,2395,2397,
        5,20,0,0,2396,2395,1,0,0,0,2396,2397,1,0,0,0,2397,2398,1,0,0,0,2398,
        2399,3,186,93,0,2399,253,1,0,0,0,2400,2401,3,174,87,0,2401,2402,
        3,266,133,0,2402,2404,5,1213,0,0,2403,2405,3,256,128,0,2404,2403,
        1,0,0,0,2405,2406,1,0,0,0,2406,2404,1,0,0,0,2406,2407,1,0,0,0,2407,
        2408,1,0,0,0,2408,2410,5,1214,0,0,2409,2411,5,20,0,0,2410,2409,1,
        0,0,0,2410,2411,1,0,0,0,2411,2412,1,0,0,0,2412,2413,3,186,93,0,2413,
        255,1,0,0,0,2414,2415,5,286,0,0,2415,2416,5,1213,0,0,2416,2421,3,
        374,187,0,2417,2418,5,1208,0,0,2418,2420,3,374,187,0,2419,2417,1,
        0,0,0,2420,2423,1,0,0,0,2421,2419,1,0,0,0,2421,2422,1,0,0,0,2422,
        2424,1,0,0,0,2423,2421,1,0,0,0,2424,2428,5,1214,0,0,2425,2427,3,
        314,157,0,2426,2425,1,0,0,0,2427,2430,1,0,0,0,2428,2426,1,0,0,0,
        2428,2429,1,0,0,0,2429,2435,1,0,0,0,2430,2428,1,0,0,0,2431,2433,
        5,224,0,0,2432,2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,
        2434,2436,3,364,182,0,2435,2432,1,0,0,0,2435,2436,1,0,0,0,2436,2437,
        1,0,0,0,2437,2438,3,260,130,0,2438,257,1,0,0,0,2439,2447,3,316,158,
        0,2440,2442,3,170,85,0,2441,2443,5,20,0,0,2442,2441,1,0,0,0,2442,
        2443,1,0,0,0,2443,2444,1,0,0,0,2444,2445,3,186,93,0,2445,2447,1,
        0,0,0,2446,2439,1,0,0,0,2446,2440,1,0,0,0,2447,259,1,0,0,0,2448,
        2450,5,457,0,0,2449,2451,3,262,131,0,2450,2449,1,0,0,0,2451,2452,
        1,0,0,0,2452,2450,1,0,0,0,2452,2453,1,0,0,0,2453,261,1,0,0,0,2454,
        2455,3,166,83,0,2455,2456,5,1213,0,0,2456,2457,3,374,187,0,2457,
        2458,5,1214,0,0,2458,263,1,0,0,0,2459,2460,5,352,0,0,2460,2461,5,
        1213,0,0,2461,2466,3,564,282,0,2462,2463,5,1208,0,0,2463,2465,3,
        564,282,0,2464,2462,1,0,0,0,2465,2468,1,0,0,0,2466,2464,1,0,0,0,
        2466,2467,1,0,0,0,2467,2469,1,0,0,0,2468,2466,1,0,0,0,2469,2470,
        5,1214,0,0,2470,265,1,0,0,0,2471,2472,5,1210,0,0,2472,2473,3,186,
        93,0,2473,267,1,0,0,0,2474,2475,5,406,0,0,2475,2478,5,1213,0,0,2476,
        2479,3,270,135,0,2477,2479,3,272,136,0,2478,2476,1,0,0,0,2478,2477,
        1,0,0,0,2479,2480,1,0,0,0,2480,2482,5,1214,0,0,2481,2483,5,20,0,
        0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,2483,2484,1,0,0,0,2484,2486,
        3,186,93,0,2485,2487,3,560,280,0,2486,2485,1,0,0,0,2486,2487,1,0,
        0,0,2487,269,1,0,0,0,2488,2492,3,174,87,0,2489,2490,5,1213,0,0,2490,
        2493,5,1214,0,0,2491,2493,3,558,279,0,2492,2489,1,0,0,0,2492,2491,
        1,0,0,0,2493,2495,1,0,0,0,2494,2496,3,274,137,0,2495,2494,1,0,0,
        0,2495,2496,1,0,0,0,2496,2501,1,0,0,0,2497,2500,3,276,138,0,2498,
        2500,3,278,139,0,2499,2497,1,0,0,0,2499,2498,1,0,0,0,2500,2503,1,
        0,0,0,2501,2499,1,0,0,0,2501,2502,1,0,0,0,2502,271,1,0,0,0,2503,
        2501,1,0,0,0,2504,2506,3,444,222,0,2505,2504,1,0,0,0,2505,2506,1,
        0,0,0,2506,2507,1,0,0,0,2507,2508,5,1148,0,0,2508,2512,5,1213,0,
        0,2509,2510,3,374,187,0,2510,2511,5,1208,0,0,2511,2513,1,0,0,0,2512,
        2509,1,0,0,0,2512,2513,1,0,0,0,2513,2514,1,0,0,0,2514,2515,3,374,
        187,0,2515,2518,5,1214,0,0,2516,2517,5,474,0,0,2517,2519,5,829,0,
        0,2518,2516,1,0,0,0,2518,2519,1,0,0,0,2519,273,1,0,0,0,2520,2533,
        5,352,0,0,2521,2534,3,170,85,0,2522,2523,5,1213,0,0,2523,2528,3,
        564,282,0,2524,2525,5,1208,0,0,2525,2527,3,564,282,0,2526,2524,1,
        0,0,0,2527,2530,1,0,0,0,2528,2526,1,0,0,0,2528,2529,1,0,0,0,2529,
        2531,1,0,0,0,2530,2528,1,0,0,0,2531,2532,5,1214,0,0,2532,2534,1,
        0,0,0,2533,2521,1,0,0,0,2533,2522,1,0,0,0,2533,2534,1,0,0,0,2534,
        275,1,0,0,0,2535,2536,5,224,0,0,2536,2537,5,291,0,0,2537,2538,5,
        42,0,0,2538,2543,3,366,183,0,2539,2540,5,1208,0,0,2540,2542,3,366,
        183,0,2541,2539,1,0,0,0,2542,2545,1,0,0,0,2543,2541,1,0,0,0,2543,
        2544,1,0,0,0,2544,277,1,0,0,0,2545,2543,1,0,0,0,2546,2547,5,178,
        0,0,2547,2548,5,42,0,0,2548,2553,3,162,81,0,2549,2550,5,1208,0,0,
        2550,2552,3,162,81,0,2551,2549,1,0,0,0,2552,2555,1,0,0,0,2553,2551,
        1,0,0,0,2553,2554,1,0,0,0,2554,279,1,0,0,0,2555,2553,1,0,0,0,2556,
        2567,3,282,141,0,2557,2567,3,284,142,0,2558,2567,3,286,143,0,2559,
        2567,3,288,144,0,2560,2567,3,290,145,0,2561,2567,3,292,146,0,2562,
        2567,3,296,148,0,2563,2567,3,294,147,0,2564,2567,3,298,149,0,2565,
        2567,3,300,150,0,2566,2556,1,0,0,0,2566,2557,1,0,0,0,2566,2558,1,
        0,0,0,2566,2559,1,0,0,0,2566,2560,1,0,0,0,2566,2561,1,0,0,0,2566,
        2562,1,0,0,0,2566,2563,1,0,0,0,2566,2564,1,0,0,0,2566,2565,1,0,0,
        0,2567,2569,1,0,0,0,2568,2570,5,20,0,0,2569,2568,1,0,0,0,2569,2570,
        1,0,0,0,2570,2571,1,0,0,0,2571,2573,3,186,93,0,2572,2574,3,560,280,
        0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,281,1,0,0,0,2575,2576,
        5,1057,0,0,2576,2578,5,1213,0,0,2577,2579,3,506,253,0,2578,2577,
        1,0,0,0,2578,2579,1,0,0,0,2579,2580,1,0,0,0,2580,2582,3,374,187,
        0,2581,2583,3,494,247,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,
        2585,1,0,0,0,2584,2586,3,510,255,0,2585,2584,1,0,0,0,2585,2586,1,
        0,0,0,2586,2587,1,0,0,0,2587,2588,5,1214,0,0,2588,283,1,0,0,0,2589,
        2591,3,444,222,0,2590,2589,1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,
        0,0,0,2592,2593,5,1149,0,0,2593,2594,5,1213,0,0,2594,2597,5,286,
        0,0,2595,2598,3,170,85,0,2596,2598,3,562,281,0,2597,2595,1,0,0,0,
        2597,2596,1,0,0,0,2598,2609,1,0,0,0,2599,2600,5,178,0,0,2600,2601,
        5,42,0,0,2601,2606,3,374,187,0,2602,2603,5,1208,0,0,2603,2605,3,
        374,187,0,2604,2602,1,0,0,0,2605,2608,1,0,0,0,2606,2604,1,0,0,0,
        2606,2607,1,0,0,0,2607,2610,1,0,0,0,2608,2606,1,0,0,0,2609,2599,
        1,0,0,0,2609,2610,1,0,0,0,2610,2622,1,0,0,0,2611,2612,5,224,0,0,
        2612,2613,5,291,0,0,2613,2614,5,42,0,0,2614,2619,3,374,187,0,2615,
        2616,5,1208,0,0,2616,2618,3,374,187,0,2617,2615,1,0,0,0,2618,2621,
        1,0,0,0,2619,2617,1,0,0,0,2619,2620,1,0,0,0,2620,2623,1,0,0,0,2621,
        2619,1,0,0,0,2622,2611,1,0,0,0,2622,2623,1,0,0,0,2623,2624,1,0,0,
        0,2624,2625,5,457,0,0,2625,2626,5,1150,0,0,2626,2627,5,1213,0,0,
        2627,2628,3,136,68,0,2628,2634,5,1214,0,0,2629,2630,5,1151,0,0,2630,
        2631,5,1213,0,0,2631,2632,3,136,68,0,2632,2633,5,1214,0,0,2633,2635,
        1,0,0,0,2634,2629,1,0,0,0,2634,2635,1,0,0,0,2635,2641,1,0,0,0,2636,
        2637,5,1152,0,0,2637,2638,5,1213,0,0,2638,2639,3,136,68,0,2639,2640,
        5,1214,0,0,2640,2642,1,0,0,0,2641,2636,1,0,0,0,2641,2642,1,0,0,0,
        2642,2648,1,0,0,0,2643,2644,5,1153,0,0,2644,2645,5,1213,0,0,2645,
        2646,3,136,68,0,2646,2647,5,1214,0,0,2647,2649,1,0,0,0,2648,2643,
        1,0,0,0,2648,2649,1,0,0,0,2649,285,1,0,0,0,2650,2651,5,1154,0,0,
        2651,2652,5,1213,0,0,2652,2655,5,286,0,0,2653,2656,3,170,85,0,2654,
        2656,3,562,281,0,2655,2653,1,0,0,0,2655,2654,1,0,0,0,2656,2657,1,
        0,0,0,2657,2658,5,457,0,0,2658,2659,5,1213,0,0,2659,2663,3,318,159,
        0,2660,2662,3,320,160,0,2661,2660,1,0,0,0,2662,2665,1,0,0,0,2663,
        2661,1,0,0,0,2663,2664,1,0,0,0,2664,2666,1,0,0,0,2665,2663,1,0,0,
        0,2666,2667,5,1214,0,0,2667,2668,5,1214,0,0,2668,287,1,0,0,0,2669,
        2670,5,906,0,0,2670,2671,5,1213,0,0,2671,2686,3,302,151,0,2672,2673,
        5,352,0,0,2673,2683,5,1213,0,0,2674,2684,5,1219,0,0,2675,2680,3,
        136,68,0,2676,2677,5,1208,0,0,2677,2679,3,136,68,0,2678,2676,1,0,
        0,0,2679,2682,1,0,0,0,2680,2678,1,0,0,0,2680,2681,1,0,0,0,2681,2684,
        1,0,0,0,2682,2680,1,0,0,0,2683,2674,1,0,0,0,2683,2675,1,0,0,0,2684,
        2685,1,0,0,0,2685,2687,5,1214,0,0,2686,2672,1,0,0,0,2686,2687,1,
        0,0,0,2687,2693,1,0,0,0,2688,2689,5,625,0,0,2689,2690,5,1213,0,0,
        2690,2691,3,136,68,0,2691,2692,5,1214,0,0,2692,2694,1,0,0,0,2693,
        2688,1,0,0,0,2693,2694,1,0,0,0,2694,2700,1,0,0,0,2695,2696,5,569,
        0,0,2696,2697,5,1213,0,0,2697,2698,3,136,68,0,2698,2699,5,1214,0,
        0,2699,2701,1,0,0,0,2700,2695,1,0,0,0,2700,2701,1,0,0,0,2701,2707,
        1,0,0,0,2702,2703,5,871,0,0,2703,2704,5,1213,0,0,2704,2705,3,136,
        68,0,2705,2706,5,1214,0,0,2706,2708,1,0,0,0,2707,2702,1,0,0,0,2707,
        2708,1,0,0,0,2708,2714,1,0,0,0,2709,2710,5,542,0,0,2710,2711,5,1213,
        0,0,2711,2712,3,168,84,0,2712,2713,5,1214,0,0,2713,2715,1,0,0,0,
        2714,2709,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,0,0,0,2716,2717,
        5,1214,0,0,2717,289,1,0,0,0,2718,2720,3,444,222,0,2719,2718,1,0,
        0,0,2719,2720,1,0,0,0,2720,2721,1,0,0,0,2721,2722,5,1159,0,0,2722,
        2723,5,1213,0,0,2723,2726,5,286,0,0,2724,2727,3,170,85,0,2725,2727,
        3,562,281,0,2726,2724,1,0,0,0,2726,2725,1,0,0,0,2727,2728,1,0,0,
        0,2728,2729,5,457,0,0,2729,2730,5,1160,0,0,2730,2731,5,1213,0,0,
        2731,2736,3,136,68,0,2732,2733,5,1208,0,0,2733,2735,3,136,68,0,2734,
        2732,1,0,0,0,2735,2738,1,0,0,0,2736,2734,1,0,0,0,2736,2737,1,0,0,
        0,2737,2739,1,0,0,0,2738,2736,1,0,0,0,2739,2740,5,1214,0,0,2740,
        2741,5,1161,0,0,2741,2742,5,1213,0,0,2742,2743,3,136,68,0,2743,2744,
        5,1214,0,0,2744,2745,5,1162,0,0,2745,2746,5,1213,0,0,2746,2751,3,
        136,68,0,2747,2748,5,1208,0,0,2748,2750,3,136,68,0,2749,2747,1,0,
        0,0,2750,2753,1,0,0,0,2751,2749,1,0,0,0,2751,2752,1,0,0,0,2752,2754,
        1,0,0,0,2753,2751,1,0,0,0,2754,2771,5,1214,0,0,2755,2756,5,1163,
        0,0,2756,2757,5,1213,0,0,2757,2762,3,136,68,0,2758,2759,5,1208,0,
        0,2759,2761,3,136,68,0,2760,2758,1,0,0,0,2761,2764,1,0,0,0,2762,
        2760,1,0,0,0,2762,2763,1,0,0,0,2763,2765,1,0,0,0,2764,2762,1,0,0,
        0,2765,2766,5,1214,0,0,2766,2767,5,1164,0,0,2767,2768,5,1213,0,0,
        2768,2769,3,136,68,0,2769,2770,5,1214,0,0,2770,2772,1,0,0,0,2771,
        2755,1,0,0,0,2771,2772,1,0,0,0,2772,291,1,0,0,0,2773,2774,5,1165,
        0,0,2774,2775,5,1213,0,0,2775,2776,3,302,151,0,2776,2777,5,457,0,
        0,2777,2778,5,1213,0,0,2778,2782,3,318,159,0,2779,2781,3,322,161,
        0,2780,2779,1,0,0,0,2781,2784,1,0,0,0,2782,2780,1,0,0,0,2782,2783,
        1,0,0,0,2783,2785,1,0,0,0,2784,2782,1,0,0,0,2785,2786,5,1214,0,0,
        2786,2787,5,1214,0,0,2787,293,1,0,0,0,2788,2790,3,444,222,0,2789,
        2788,1,0,0,0,2789,2790,1,0,0,0,2790,2791,1,0,0,0,2791,2792,5,1184,
        0,0,2792,2793,5,1213,0,0,2793,2794,5,286,0,0,2794,2795,3,562,281,
        0,2795,2796,5,457,0,0,2796,2797,5,1187,0,0,2797,2798,5,1213,0,0,
        2798,2799,3,136,68,0,2799,2800,5,1214,0,0,2800,2801,5,1188,0,0,2801,
        2802,5,1213,0,0,2802,2803,3,136,68,0,2803,2804,5,1214,0,0,2804,2805,
        5,1214,0,0,2805,295,1,0,0,0,2806,2808,3,444,222,0,2807,2806,1,0,
        0,0,2807,2808,1,0,0,0,2808,2809,1,0,0,0,2809,2810,5,1183,0,0,2810,
        2811,5,1213,0,0,2811,2812,5,286,0,0,2812,2819,3,562,281,0,2813,2815,
        5,457,0,0,2814,2816,3,312,156,0,2815,2814,1,0,0,0,2816,2817,1,0,
        0,0,2817,2815,1,0,0,0,2817,2818,1,0,0,0,2818,2820,1,0,0,0,2819,2813,
        1,0,0,0,2819,2820,1,0,0,0,2820,2821,1,0,0,0,2821,2822,5,1214,0,0,
        2822,297,1,0,0,0,2823,2825,3,444,222,0,2824,2823,1,0,0,0,2824,2825,
        1,0,0,0,2825,2826,1,0,0,0,2826,2827,5,1182,0,0,2827,2828,5,1213,
        0,0,2828,2829,5,286,0,0,2829,2830,3,562,281,0,2830,2831,5,457,0,
        0,2831,2832,5,1187,0,0,2832,2833,5,1213,0,0,2833,2834,3,136,68,0,
        2834,2835,5,1214,0,0,2835,2836,5,1188,0,0,2836,2837,5,1213,0,0,2837,
        2842,3,136,68,0,2838,2839,5,1208,0,0,2839,2841,3,136,68,0,2840,2838,
        1,0,0,0,2841,2844,1,0,0,0,2842,2840,1,0,0,0,2842,2843,1,0,0,0,2843,
        2845,1,0,0,0,2844,2842,1,0,0,0,2845,2846,5,1214,0,0,2846,2847,5,
        1189,0,0,2847,2848,5,1213,0,0,2848,2853,3,136,68,0,2849,2850,5,1208,
        0,0,2850,2852,3,136,68,0,2851,2849,1,0,0,0,2852,2855,1,0,0,0,2853,
        2851,1,0,0,0,2853,2854,1,0,0,0,2854,2856,1,0,0,0,2855,2853,1,0,0,
        0,2856,2862,5,1214,0,0,2857,2858,5,1190,0,0,2858,2859,5,1213,0,0,
        2859,2860,3,142,71,0,2860,2861,5,1214,0,0,2861,2863,1,0,0,0,2862,
        2857,1,0,0,0,2862,2863,1,0,0,0,2863,2869,1,0,0,0,2864,2865,5,1191,
        0,0,2865,2866,5,1213,0,0,2866,2867,3,142,71,0,2867,2868,5,1214,0,
        0,2868,2870,1,0,0,0,2869,2864,1,0,0,0,2869,2870,1,0,0,0,2870,2871,
        1,0,0,0,2871,2872,5,1214,0,0,2872,299,1,0,0,0,2873,2874,3,170,85,
        0,2874,2878,5,1213,0,0,2875,2877,3,302,151,0,2876,2875,1,0,0,0,2877,
        2880,1,0,0,0,2878,2876,1,0,0,0,2878,2879,1,0,0,0,2879,2882,1,0,0,
        0,2880,2878,1,0,0,0,2881,2883,3,304,152,0,2882,2881,1,0,0,0,2882,
        2883,1,0,0,0,2883,2887,1,0,0,0,2884,2886,3,306,153,0,2885,2884,1,
        0,0,0,2886,2889,1,0,0,0,2887,2885,1,0,0,0,2887,2888,1,0,0,0,2888,
        2891,1,0,0,0,2889,2887,1,0,0,0,2890,2892,3,308,154,0,2891,2890,1,
        0,0,0,2891,2892,1,0,0,0,2892,2893,1,0,0,0,2893,2894,5,1214,0,0,2894,
        301,1,0,0,0,2895,2898,5,286,0,0,2896,2899,3,170,85,0,2897,2899,3,
        562,281,0,2898,2896,1,0,0,0,2898,2897,1,0,0,0,2899,2902,1,0,0,0,
        2900,2901,5,20,0,0,2901,2903,3,186,93,0,2902,2900,1,0,0,0,2902,2903,
        1,0,0,0,2903,2906,1,0,0,0,2904,2907,3,314,157,0,2905,2907,5,635,
        0,0,2906,2904,1,0,0,0,2906,2905,1,0,0,0,2906,2907,1,0,0,0,2907,2921,
        1,0,0,0,2908,2910,5,224,0,0,2909,2908,1,0,0,0,2909,2910,1,0,0,0,
        2910,2911,1,0,0,0,2911,2912,5,291,0,0,2912,2913,5,42,0,0,2913,2918,
        3,366,183,0,2914,2915,5,1208,0,0,2915,2917,3,366,183,0,2916,2914,
        1,0,0,0,2917,2920,1,0,0,0,2918,2916,1,0,0,0,2918,2919,1,0,0,0,2919,
        2922,1,0,0,0,2920,2918,1,0,0,0,2921,2909,1,0,0,0,2921,2922,1,0,0,
        0,2922,303,1,0,0,0,2923,2924,5,144,0,0,2924,2925,5,236,0,0,2925,
        2926,5,1224,0,0,2926,2931,3,136,68,0,2927,2928,5,577,0,0,2928,2929,
        5,457,0,0,2929,2930,5,1224,0,0,2930,2932,3,136,68,0,2931,2927,1,
        0,0,0,2931,2932,1,0,0,0,2932,305,1,0,0,0,2933,2934,5,293,0,0,2934,
        2935,5,406,0,0,2935,2936,3,166,83,0,2936,2937,5,1213,0,0,2937,2938,
        3,170,85,0,2938,2939,5,1214,0,0,2939,307,1,0,0,0,2940,2942,5,457,
        0,0,2941,2943,3,310,155,0,2942,2941,1,0,0,0,2943,2944,1,0,0,0,2944,
        2942,1,0,0,0,2944,2945,1,0,0,0,2945,309,1,0,0,0,2946,2949,3,166,
        83,0,2947,2950,3,558,279,0,2948,2950,3,562,281,0,2949,2947,1,0,0,
        0,2949,2948,1,0,0,0,2950,311,1,0,0,0,2951,2952,7,21,0,0,2952,2953,
        5,1213,0,0,2953,2954,3,374,187,0,2954,2955,5,1214,0,0,2955,313,1,
        0,0,0,2956,2957,7,22,0,0,2957,2958,5,42,0,0,2958,2963,3,374,187,
        0,2959,2960,5,1208,0,0,2960,2962,3,374,187,0,2961,2959,1,0,0,0,2962,
        2965,1,0,0,0,2963,2961,1,0,0,0,2963,2964,1,0,0,0,2964,2970,1,0,0,
        0,2965,2963,1,0,0,0,2966,2967,5,840,0,0,2967,2968,5,42,0,0,2968,
        2970,5,18,0,0,2969,2956,1,0,0,0,2969,2966,1,0,0,0,2970,315,1,0,0,
        0,2971,2973,3,562,281,0,2972,2974,5,20,0,0,2973,2972,1,0,0,0,2973,
        2974,1,0,0,0,2974,2975,1,0,0,0,2975,2977,3,186,93,0,2976,2978,3,
        560,280,0,2977,2976,1,0,0,0,2977,2978,1,0,0,0,2978,317,1,0,0,0,2979,
        2980,5,1128,0,0,2980,2981,5,1213,0,0,2981,2982,5,1203,0,0,2982,2983,
        5,1214,0,0,2983,319,1,0,0,0,2984,2985,5,29,0,0,2985,2988,5,1213,
        0,0,2986,2989,3,168,84,0,2987,2989,3,136,68,0,2988,2986,1,0,0,0,
        2988,2987,1,0,0,0,2989,2990,1,0,0,0,2990,2991,5,1214,0,0,2991,3033,
        1,0,0,0,2992,2993,5,1155,0,0,2993,2994,5,1213,0,0,2994,2995,3,136,
        68,0,2995,2996,5,1214,0,0,2996,3033,1,0,0,0,2997,2998,5,1156,0,0,
        2998,2999,5,1213,0,0,2999,3000,3,136,68,0,3000,3001,5,1214,0,0,3001,
        3033,1,0,0,0,3002,3003,5,1157,0,0,3003,3004,5,1213,0,0,3004,3005,
        3,136,68,0,3005,3006,5,1214,0,0,3006,3033,1,0,0,0,3007,3008,5,1134,
        0,0,3008,3009,5,1213,0,0,3009,3010,3,136,68,0,3010,3011,5,1214,0,
        0,3011,3033,1,0,0,0,3012,3013,5,1158,0,0,3013,3014,5,1213,0,0,3014,
        3015,3,136,68,0,3015,3016,5,1214,0,0,3016,3033,1,0,0,0,3017,3018,
        5,1132,0,0,3018,3019,5,1213,0,0,3019,3020,3,136,68,0,3020,3021,5,
        1214,0,0,3021,3033,1,0,0,0,3022,3023,5,1133,0,0,3023,3024,5,1213,
        0,0,3024,3025,3,136,68,0,3025,3026,5,1214,0,0,3026,3033,1,0,0,0,
        3027,3028,5,1135,0,0,3028,3029,5,1213,0,0,3029,3030,3,136,68,0,3030,
        3031,5,1214,0,0,3031,3033,1,0,0,0,3032,2984,1,0,0,0,3032,2992,1,
        0,0,0,3032,2997,1,0,0,0,3032,3002,1,0,0,0,3032,3007,1,0,0,0,3032,
        3012,1,0,0,0,3032,3017,1,0,0,0,3032,3022,1,0,0,0,3032,3027,1,0,0,
        0,3033,321,1,0,0,0,3034,3035,5,29,0,0,3035,3038,5,1213,0,0,3036,
        3039,3,168,84,0,3037,3039,3,136,68,0,3038,3036,1,0,0,0,3038,3037,
        1,0,0,0,3039,3040,1,0,0,0,3040,3041,5,1214,0,0,3041,3088,1,0,0,0,
        3042,3043,5,1134,0,0,3043,3044,5,1213,0,0,3044,3045,3,136,68,0,3045,
        3046,5,1214,0,0,3046,3088,1,0,0,0,3047,3048,5,1166,0,0,3048,3049,
        5,1213,0,0,3049,3050,3,136,68,0,3050,3051,5,1214,0,0,3051,3088,1,
        0,0,0,3052,3053,5,1167,0,0,3053,3054,5,1213,0,0,3054,3055,3,136,
        68,0,3055,3056,5,1214,0,0,3056,3088,1,0,0,0,3057,3058,5,1168,0,0,
        3058,3059,5,1213,0,0,3059,3060,3,136,68,0,3060,3061,5,1214,0,0,3061,
        3088,1,0,0,0,3062,3063,5,1169,0,0,3063,3064,5,1213,0,0,3064,3065,
        3,136,68,0,3065,3066,5,1214,0,0,3066,3088,1,0,0,0,3067,3068,5,1170,
        0,0,3068,3069,5,1213,0,0,3069,3070,3,136,68,0,3070,3071,5,1214,0,
        0,3071,3088,1,0,0,0,3072,3073,5,1171,0,0,3073,3074,5,1213,0,0,3074,
        3075,3,136,68,0,3075,3076,5,1214,0,0,3076,3088,1,0,0,0,3077,3078,
        5,1172,0,0,3078,3079,5,1213,0,0,3079,3080,3,136,68,0,3080,3081,5,
        1214,0,0,3081,3088,1,0,0,0,3082,3083,5,1173,0,0,3083,3084,5,1213,
        0,0,3084,3085,3,136,68,0,3085,3086,5,1214,0,0,3086,3088,1,0,0,0,
        3087,3034,1,0,0,0,3087,3042,1,0,0,0,3087,3047,1,0,0,0,3087,3052,
        1,0,0,0,3087,3057,1,0,0,0,3087,3062,1,0,0,0,3087,3067,1,0,0,0,3087,
        3072,1,0,0,0,3087,3077,1,0,0,0,3087,3082,1,0,0,0,3088,323,1,0,0,
        0,3089,3090,5,474,0,0,3090,3092,3,374,187,0,3091,3093,3,328,164,
        0,3092,3091,1,0,0,0,3092,3093,1,0,0,0,3093,3101,1,0,0,0,3094,3095,
        5,1208,0,0,3095,3097,3,374,187,0,3096,3098,3,328,164,0,3097,3096,
        1,0,0,0,3097,3098,1,0,0,0,3098,3100,1,0,0,0,3099,3094,1,0,0,0,3100,
        3103,1,0,0,0,3101,3099,1,0,0,0,3101,3102,1,0,0,0,3102,3105,1,0,0,
        0,3103,3101,1,0,0,0,3104,3106,3,326,163,0,3105,3104,1,0,0,0,3105,
        3106,1,0,0,0,3106,325,1,0,0,0,3107,3108,5,42,0,0,3108,3113,3,368,
        184,0,3109,3110,5,1208,0,0,3110,3112,3,368,184,0,3111,3109,1,0,0,
        0,3112,3115,1,0,0,0,3113,3111,1,0,0,0,3113,3114,1,0,0,0,3114,327,
        1,0,0,0,3115,3113,1,0,0,0,3116,3117,5,1213,0,0,3117,3118,5,425,0,
        0,3118,3119,3,136,68,0,3119,3120,5,1214,0,0,3120,329,1,0,0,0,3121,
        3122,5,471,0,0,3122,3123,3,372,186,0,3123,331,1,0,0,0,3124,3125,
        5,174,0,0,3125,3126,5,42,0,0,3126,3137,3,334,167,0,3127,3128,5,174,
        0,0,3128,3129,5,42,0,0,3129,3132,3,334,167,0,3130,3131,5,1208,0,
        0,3131,3133,3,334,167,0,3132,3130,1,0,0,0,3133,3134,1,0,0,0,3134,
        3132,1,0,0,0,3134,3135,1,0,0,0,3135,3137,1,0,0,0,3136,3124,1,0,0,
        0,3136,3127,1,0,0,0,3137,333,1,0,0,0,3138,3143,3,336,168,0,3139,
        3143,3,342,171,0,3140,3143,3,344,172,0,3141,3143,3,346,173,0,3142,
        3138,1,0,0,0,3142,3139,1,0,0,0,3142,3140,1,0,0,0,3142,3141,1,0,0,
        0,3143,335,1,0,0,0,3144,3147,3,374,187,0,3145,3147,3,338,169,0,3146,
        3144,1,0,0,0,3146,3145,1,0,0,0,3147,3155,1,0,0,0,3148,3151,5,1208,
        0,0,3149,3152,3,374,187,0,3150,3152,3,338,169,0,3151,3149,1,0,0,
        0,3151,3150,1,0,0,0,3152,3154,1,0,0,0,3153,3148,1,0,0,0,3154,3157,
        1,0,0,0,3155,3153,1,0,0,0,3155,3156,1,0,0,0,3156,337,1,0,0,0,3157,
        3155,1,0,0,0,3158,3159,5,1213,0,0,3159,3162,3,374,187,0,3160,3161,
        5,1208,0,0,3161,3163,3,374,187,0,3162,3160,1,0,0,0,3163,3164,1,0,
        0,0,3164,3162,1,0,0,0,3164,3165,1,0,0,0,3165,3166,1,0,0,0,3166,3167,
        5,1214,0,0,3167,339,1,0,0,0,3168,3169,5,1213,0,0,3169,3170,5,1214,
        0,0,3170,341,1,0,0,0,3171,3172,5,360,0,0,3172,3173,5,1213,0,0,3173,
        3174,3,336,168,0,3174,3175,5,1214,0,0,3175,343,1,0,0,0,3176,3177,
        5,92,0,0,3177,3178,5,1213,0,0,3178,3179,3,336,168,0,3179,3180,5,
        1214,0,0,3180,345,1,0,0,0,3181,3182,5,175,0,0,3182,3183,5,374,0,
        0,3183,3184,5,1213,0,0,3184,3189,3,348,174,0,3185,3186,5,1208,0,
        0,3186,3188,3,348,174,0,3187,3185,1,0,0,0,3188,3191,1,0,0,0,3189,
        3187,1,0,0,0,3189,3190,1,0,0,0,3190,3192,1,0,0,0,3191,3189,1,0,0,
        0,3192,3193,5,1214,0,0,3193,347,1,0,0,0,3194,3200,3,336,168,0,3195,
        3200,3,340,170,0,3196,3200,3,342,171,0,3197,3200,3,344,172,0,3198,
        3200,3,346,173,0,3199,3194,1,0,0,0,3199,3195,1,0,0,0,3199,3196,1,
        0,0,0,3199,3197,1,0,0,0,3199,3198,1,0,0,0,3200,349,1,0,0,0,3201,
        3202,5,183,0,0,3202,3203,3,372,186,0,3203,351,1,0,0,0,3204,3205,
        5,315,0,0,3205,3206,3,372,186,0,3206,353,1,0,0,0,3207,3210,5,365,
        0,0,3208,3209,5,474,0,0,3209,3211,5,883,0,0,3210,3208,1,0,0,0,3210,
        3211,1,0,0,0,3211,3214,1,0,0,0,3212,3213,5,872,0,0,3213,3215,5,498,
        0,0,3214,3212,1,0,0,0,3214,3215,1,0,0,0,3215,3219,1,0,0,0,3216,3220,
        3,356,178,0,3217,3220,3,358,179,0,3218,3220,3,360,180,0,3219,3216,
        1,0,0,0,3219,3217,1,0,0,0,3219,3218,1,0,0,0,3220,355,1,0,0,0,3221,
        3226,3,146,73,0,3222,3223,5,1208,0,0,3223,3225,3,146,73,0,3224,3222,
        1,0,0,0,3225,3228,1,0,0,0,3226,3224,1,0,0,0,3226,3227,1,0,0,0,3227,
        357,1,0,0,0,3228,3226,1,0,0,0,3229,3234,3,142,71,0,3230,3231,5,1208,
        0,0,3231,3233,3,142,71,0,3232,3230,1,0,0,0,3233,3236,1,0,0,0,3234,
        3232,1,0,0,0,3234,3235,1,0,0,0,3235,359,1,0,0,0,3236,3234,1,0,0,
        0,3237,3238,5,470,0,0,3238,3239,3,372,186,0,3239,3242,5,419,0,0,
        3240,3243,3,356,178,0,3241,3243,3,358,179,0,3242,3240,1,0,0,0,3242,
        3241,1,0,0,0,3243,3245,1,0,0,0,3244,3237,1,0,0,0,3245,3246,1,0,0,
        0,3246,3244,1,0,0,0,3246,3247,1,0,0,0,3247,3253,1,0,0,0,3248,3251,
        5,131,0,0,3249,3252,3,356,178,0,3250,3252,3,358,179,0,3251,3249,
        1,0,0,0,3251,3250,1,0,0,0,3252,3254,1,0,0,0,3253,3248,1,0,0,0,3253,
        3254,1,0,0,0,3254,3255,1,0,0,0,3255,3256,5,134,0,0,3256,361,1,0,
        0,0,3257,3258,5,148,0,0,3258,3259,5,286,0,0,3259,3261,3,374,187,
        0,3260,3262,5,20,0,0,3261,3260,1,0,0,0,3261,3262,1,0,0,0,3262,3263,
        1,0,0,0,3263,3277,3,186,93,0,3264,3275,5,42,0,0,3265,3276,3,156,
        78,0,3266,3268,5,505,0,0,3267,3269,5,853,0,0,3268,3267,1,0,0,0,3268,
        3269,1,0,0,0,3269,3270,1,0,0,0,3270,3273,3,208,104,0,3271,3272,5,
        24,0,0,3272,3274,3,152,76,0,3273,3271,1,0,0,0,3273,3274,1,0,0,0,
        3274,3276,1,0,0,0,3275,3265,1,0,0,0,3275,3266,1,0,0,0,3276,3278,
        1,0,0,0,3277,3264,1,0,0,0,3277,3278,1,0,0,0,3278,3281,1,0,0,0,3279,
        3280,5,159,0,0,3280,3282,3,374,187,0,3281,3279,1,0,0,0,3281,3282,
        1,0,0,0,3282,363,1,0,0,0,3283,3284,5,291,0,0,3284,3285,5,42,0,0,
        3285,3290,3,366,183,0,3286,3287,5,1208,0,0,3287,3289,3,366,183,0,
        3288,3286,1,0,0,0,3289,3292,1,0,0,0,3290,3288,1,0,0,0,3290,3291,
        1,0,0,0,3291,365,1,0,0,0,3292,3290,1,0,0,0,3293,3295,3,374,187,0,
        3294,3296,7,23,0,0,3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,3299,
        1,0,0,0,3297,3298,5,806,0,0,3298,3300,7,24,0,0,3299,3297,1,0,0,0,
        3299,3300,1,0,0,0,3300,367,1,0,0,0,3301,3303,3,374,187,0,3302,3304,
        7,23,0,0,3303,3302,1,0,0,0,3303,3304,1,0,0,0,3304,369,1,0,0,0,3305,
        3306,5,474,0,0,3306,3307,5,59,0,0,3307,3308,5,289,0,0,3308,371,1,
        0,0,0,3309,3310,6,186,-1,0,3310,3311,3,374,187,0,3311,3312,3,574,
        287,0,3312,3313,3,374,187,0,3313,3556,1,0,0,0,3314,3315,3,374,187,
        0,3315,3316,3,574,287,0,3316,3317,3,576,288,0,3317,3321,3,554,277,
        0,3318,3320,3,454,227,0,3319,3318,1,0,0,0,3320,3323,1,0,0,0,3321,
        3319,1,0,0,0,3321,3322,1,0,0,0,3322,3556,1,0,0,0,3323,3321,1,0,0,
        0,3324,3325,3,376,188,0,3325,3326,3,574,287,0,3326,3327,3,576,288,
        0,3327,3331,3,554,277,0,3328,3330,3,454,227,0,3329,3328,1,0,0,0,
        3330,3333,1,0,0,0,3331,3329,1,0,0,0,3331,3332,1,0,0,0,3332,3556,
        1,0,0,0,3333,3331,1,0,0,0,3334,3336,3,374,187,0,3335,3337,7,10,0,
        0,3336,3335,1,0,0,0,3336,3337,1,0,0,0,3337,3338,1,0,0,0,3338,3339,
        5,35,0,0,3339,3340,3,374,187,0,3340,3341,5,16,0,0,3341,3342,3,374,
        187,0,3342,3556,1,0,0,0,3343,3345,3,374,187,0,3344,3346,5,207,0,
        0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,3346,3348,1,0,0,0,3347,3349,
        7,10,0,0,3348,3347,1,0,0,0,3348,3349,1,0,0,0,3349,3350,1,0,0,0,3350,
        3352,5,190,0,0,3351,3353,3,576,288,0,3352,3351,1,0,0,0,3352,3353,
        1,0,0,0,3353,3354,1,0,0,0,3354,3358,3,556,278,0,3355,3357,3,454,
        227,0,3356,3355,1,0,0,0,3357,3360,1,0,0,0,3358,3356,1,0,0,0,3358,
        3359,1,0,0,0,3359,3556,1,0,0,0,3360,3358,1,0,0,0,3361,3363,3,374,
        187,0,3362,3364,5,207,0,0,3363,3362,1,0,0,0,3363,3364,1,0,0,0,3364,
        3366,1,0,0,0,3365,3367,7,10,0,0,3366,3365,1,0,0,0,3366,3367,1,0,
        0,0,3367,3368,1,0,0,0,3368,3370,5,190,0,0,3369,3371,3,576,288,0,
        3370,3369,1,0,0,0,3370,3371,1,0,0,0,3371,3372,1,0,0,0,3372,3376,
        3,562,281,0,3373,3375,3,454,227,0,3374,3373,1,0,0,0,3375,3378,1,
        0,0,0,3376,3374,1,0,0,0,3376,3377,1,0,0,0,3377,3556,1,0,0,0,3378,
        3376,1,0,0,0,3379,3381,3,374,187,0,3380,3382,5,207,0,0,3381,3380,
        1,0,0,0,3381,3382,1,0,0,0,3382,3384,1,0,0,0,3383,3385,7,10,0,0,3384,
        3383,1,0,0,0,3384,3385,1,0,0,0,3385,3386,1,0,0,0,3386,3388,5,190,
        0,0,3387,3389,3,576,288,0,3388,3387,1,0,0,0,3388,3389,1,0,0,0,3389,
        3390,1,0,0,0,3390,3394,3,374,187,0,3391,3393,3,454,227,0,3392,3391,
        1,0,0,0,3393,3396,1,0,0,0,3394,3392,1,0,0,0,3394,3395,1,0,0,0,3395,
        3556,1,0,0,0,3396,3394,1,0,0,0,3397,3399,3,376,188,0,3398,3400,5,
        207,0,0,3399,3398,1,0,0,0,3399,3400,1,0,0,0,3400,3402,1,0,0,0,3401,
        3403,7,10,0,0,3402,3401,1,0,0,0,3402,3403,1,0,0,0,3403,3404,1,0,
        0,0,3404,3406,5,190,0,0,3405,3407,3,576,288,0,3406,3405,1,0,0,0,
        3406,3407,1,0,0,0,3407,3408,1,0,0,0,3408,3412,3,562,281,0,3409,3411,
        3,454,227,0,3410,3409,1,0,0,0,3411,3414,1,0,0,0,3412,3410,1,0,0,
        0,3412,3413,1,0,0,0,3413,3556,1,0,0,0,3414,3412,1,0,0,0,3415,3417,
        3,374,187,0,3416,3418,7,10,0,0,3417,3416,1,0,0,0,3417,3418,1,0,0,
        0,3418,3419,1,0,0,0,3419,3420,5,220,0,0,3420,3423,3,374,187,0,3421,
        3422,5,140,0,0,3422,3424,3,374,187,0,3423,3421,1,0,0,0,3423,3424,
        1,0,0,0,3424,3556,1,0,0,0,3425,3427,3,374,187,0,3426,3428,7,10,0,
        0,3427,3426,1,0,0,0,3427,3428,1,0,0,0,3428,3429,1,0,0,0,3429,3430,
        5,220,0,0,3430,3431,3,576,288,0,3431,3435,3,554,277,0,3432,3434,
        3,454,227,0,3433,3432,1,0,0,0,3434,3437,1,0,0,0,3435,3433,1,0,0,
        0,3435,3436,1,0,0,0,3436,3440,1,0,0,0,3437,3435,1,0,0,0,3438,3439,
        5,140,0,0,3439,3441,3,374,187,0,3440,3438,1,0,0,0,3440,3441,1,0,
        0,0,3441,3445,1,0,0,0,3442,3444,3,454,227,0,3443,3442,1,0,0,0,3444,
        3447,1,0,0,0,3445,3443,1,0,0,0,3445,3446,1,0,0,0,3446,3556,1,0,0,
        0,3447,3445,1,0,0,0,3448,3450,3,376,188,0,3449,3451,7,10,0,0,3450,
        3449,1,0,0,0,3450,3451,1,0,0,0,3451,3452,1,0,0,0,3452,3453,5,220,
        0,0,3453,3454,3,576,288,0,3454,3458,3,554,277,0,3455,3457,3,454,
        227,0,3456,3455,1,0,0,0,3457,3460,1,0,0,0,3458,3456,1,0,0,0,3458,
        3459,1,0,0,0,3459,3463,1,0,0,0,3460,3458,1,0,0,0,3461,3462,5,140,
        0,0,3462,3464,3,374,187,0,3463,3461,1,0,0,0,3463,3464,1,0,0,0,3464,
        3468,1,0,0,0,3465,3467,3,454,227,0,3466,3465,1,0,0,0,3467,3470,1,
        0,0,0,3468,3466,1,0,0,0,3468,3469,1,0,0,0,3469,3556,1,0,0,0,3470,
        3468,1,0,0,0,3471,3473,7,10,0,0,3472,3471,1,0,0,0,3472,3473,1,0,
        0,0,3473,3474,1,0,0,0,3474,3475,5,145,0,0,3475,3556,3,562,281,0,
        3476,3477,7,10,0,0,3477,3556,3,372,186,13,3478,3479,3,374,187,0,
        3479,3481,5,207,0,0,3480,3482,7,10,0,0,3481,3480,1,0,0,0,3481,3482,
        1,0,0,0,3482,3483,1,0,0,0,3483,3484,5,274,0,0,3484,3556,1,0,0,0,
        3485,3487,3,374,187,0,3486,3488,7,10,0,0,3487,3486,1,0,0,0,3487,
        3488,1,0,0,0,3488,3489,1,0,0,0,3489,3490,5,77,0,0,3490,3491,3,374,
        187,0,3491,3556,1,0,0,0,3492,3494,3,374,187,0,3493,3495,7,10,0,0,
        3494,3493,1,0,0,0,3494,3495,1,0,0,0,3495,3496,1,0,0,0,3496,3497,
        5,136,0,0,3497,3498,3,374,187,0,3498,3556,1,0,0,0,3499,3501,3,374,
        187,0,3500,3502,7,10,0,0,3501,3500,1,0,0,0,3501,3502,1,0,0,0,3502,
        3503,1,0,0,0,3503,3504,5,765,0,0,3504,3505,3,374,187,0,3505,3556,
        1,0,0,0,3506,3508,3,374,187,0,3507,3509,7,10,0,0,3508,3507,1,0,0,
        0,3508,3509,1,0,0,0,3509,3510,1,0,0,0,3510,3511,5,857,0,0,3511,3512,
        3,374,187,0,3512,3556,1,0,0,0,3513,3515,3,374,187,0,3514,3516,7,
        10,0,0,3515,3514,1,0,0,0,3515,3516,1,0,0,0,3516,3517,1,0,0,0,3517,
        3518,5,947,0,0,3518,3519,3,374,187,0,3519,3556,1,0,0,0,3520,3521,
        3,374,187,0,3521,3522,5,698,0,0,3522,3523,5,857,0,0,3523,3524,3,
        374,187,0,3524,3556,1,0,0,0,3525,3526,3,374,187,0,3526,3527,5,698,
        0,0,3527,3528,5,947,0,0,3528,3529,3,374,187,0,3529,3556,1,0,0,0,
        3530,3539,3,374,187,0,3531,3532,5,1213,0,0,3532,3533,3,374,187,0,
        3533,3534,5,1208,0,0,3534,3535,3,374,187,0,3535,3536,5,1214,0,0,
        3536,3539,1,0,0,0,3537,3539,3,562,281,0,3538,3530,1,0,0,0,3538,3531,
        1,0,0,0,3538,3537,1,0,0,0,3539,3540,1,0,0,0,3540,3549,5,296,0,0,
        3541,3550,3,374,187,0,3542,3543,5,1213,0,0,3543,3544,3,374,187,0,
        3544,3545,5,1208,0,0,3545,3546,3,374,187,0,3546,3547,5,1214,0,0,
        3547,3550,1,0,0,0,3548,3550,3,562,281,0,3549,3541,1,0,0,0,3549,3542,
        1,0,0,0,3549,3548,1,0,0,0,3550,3556,1,0,0,0,3551,3552,5,1213,0,0,
        3552,3553,3,372,186,0,3553,3554,5,1214,0,0,3554,3556,1,0,0,0,3555,
        3309,1,0,0,0,3555,3314,1,0,0,0,3555,3324,1,0,0,0,3555,3334,1,0,0,
        0,3555,3343,1,0,0,0,3555,3361,1,0,0,0,3555,3379,1,0,0,0,3555,3397,
        1,0,0,0,3555,3415,1,0,0,0,3555,3425,1,0,0,0,3555,3448,1,0,0,0,3555,
        3472,1,0,0,0,3555,3476,1,0,0,0,3555,3478,1,0,0,0,3555,3485,1,0,0,
        0,3555,3492,1,0,0,0,3555,3499,1,0,0,0,3555,3506,1,0,0,0,3555,3513,
        1,0,0,0,3555,3520,1,0,0,0,3555,3525,1,0,0,0,3555,3538,1,0,0,0,3555,
        3551,1,0,0,0,3556,3565,1,0,0,0,3557,3558,10,12,0,0,3558,3559,5,16,
        0,0,3559,3564,3,372,186,13,3560,3561,10,11,0,0,3561,3562,5,290,0,
        0,3562,3564,3,372,186,12,3563,3557,1,0,0,0,3563,3560,1,0,0,0,3564,
        3567,1,0,0,0,3565,3563,1,0,0,0,3565,3566,1,0,0,0,3566,373,1,0,0,
        0,3567,3565,1,0,0,0,3568,3569,6,187,-1,0,3569,3645,3,132,66,0,3570,
        3571,7,5,0,0,3571,3645,3,374,187,70,3572,3645,3,380,190,0,3573,3645,
        3,442,221,0,3574,3645,3,162,81,0,3575,3645,3,392,196,0,3576,3645,
        3,566,283,0,3577,3645,3,568,284,0,3578,3645,3,570,285,0,3579,3581,
        5,265,0,0,3580,3582,3,96,48,0,3581,3580,1,0,0,0,3581,3582,1,0,0,
        0,3582,3583,1,0,0,0,3583,3584,3,202,101,0,3584,3593,5,1213,0,0,3585,
        3590,3,374,187,0,3586,3587,5,1208,0,0,3587,3589,3,374,187,0,3588,
        3586,1,0,0,0,3589,3592,1,0,0,0,3590,3588,1,0,0,0,3590,3591,1,0,0,
        0,3591,3594,1,0,0,0,3592,3590,1,0,0,0,3593,3585,1,0,0,0,3593,3594,
        1,0,0,0,3594,3595,1,0,0,0,3595,3596,5,1214,0,0,3596,3645,1,0,0,0,
        3597,3598,5,265,0,0,3598,3599,5,720,0,0,3599,3600,5,1213,0,0,3600,
        3603,3,374,187,0,3601,3602,5,1208,0,0,3602,3604,7,25,0,0,3603,3601,
        1,0,0,0,3603,3604,1,0,0,0,3604,3605,1,0,0,0,3605,3606,5,1214,0,0,
        3606,3645,1,0,0,0,3607,3608,5,265,0,0,3608,3609,5,466,0,0,3609,3610,
        5,1213,0,0,3610,3615,3,374,187,0,3611,3613,5,20,0,0,3612,3611,1,
        0,0,0,3612,3613,1,0,0,0,3613,3614,1,0,0,0,3614,3616,3,186,93,0,3615,
        3612,1,0,0,0,3615,3616,1,0,0,0,3616,3627,1,0,0,0,3617,3618,5,1208,
        0,0,3618,3623,3,374,187,0,3619,3621,5,20,0,0,3620,3619,1,0,0,0,3620,
        3621,1,0,0,0,3621,3622,1,0,0,0,3622,3624,3,186,93,0,3623,3620,1,
        0,0,0,3623,3624,1,0,0,0,3624,3626,1,0,0,0,3625,3617,1,0,0,0,3626,
        3629,1,0,0,0,3627,3625,1,0,0,0,3627,3628,1,0,0,0,3628,3630,1,0,0,
        0,3629,3627,1,0,0,0,3630,3631,5,1214,0,0,3631,3645,1,0,0,0,3632,
        3633,5,265,0,0,3633,3634,5,1042,0,0,3634,3635,5,1213,0,0,3635,3636,
        3,374,187,0,3636,3637,5,1214,0,0,3637,3645,1,0,0,0,3638,3645,3,396,
        198,0,3639,3640,5,1213,0,0,3640,3641,3,374,187,0,3641,3642,5,1214,
        0,0,3642,3645,1,0,0,0,3643,3645,3,562,281,0,3644,3568,1,0,0,0,3644,
        3570,1,0,0,0,3644,3572,1,0,0,0,3644,3573,1,0,0,0,3644,3574,1,0,0,
        0,3644,3575,1,0,0,0,3644,3576,1,0,0,0,3644,3577,1,0,0,0,3644,3578,
        1,0,0,0,3644,3579,1,0,0,0,3644,3597,1,0,0,0,3644,3607,1,0,0,0,3644,
        3632,1,0,0,0,3644,3638,1,0,0,0,3644,3639,1,0,0,0,3644,3643,1,0,0,
        0,3645,4051,1,0,0,0,3646,3647,10,69,0,0,3647,3648,5,1223,0,0,3648,
        4050,3,374,187,69,3649,3650,10,68,0,0,3650,3651,7,26,0,0,3651,4050,
        3,374,187,69,3652,3653,10,67,0,0,3653,3654,5,251,0,0,3654,4050,3,
        374,187,67,3655,3656,10,66,0,0,3656,3657,7,5,0,0,3657,4050,3,374,
        187,67,3658,3659,10,65,0,0,3659,3660,7,27,0,0,3660,4050,3,374,187,
        66,3661,3662,10,57,0,0,3662,3663,5,835,0,0,3663,4050,3,374,187,58,
        3664,3665,10,56,0,0,3665,3666,7,28,0,0,3666,4050,3,374,187,57,3667,
        3668,10,61,0,0,3668,4050,3,552,276,0,3669,3670,10,60,0,0,3670,3671,
        5,1222,0,0,3671,3672,3,374,187,0,3672,3673,3,394,197,0,3673,4050,
        1,0,0,0,3674,3676,10,58,0,0,3675,3677,3,454,227,0,3676,3675,1,0,
        0,0,3677,3678,1,0,0,0,3678,3676,1,0,0,0,3678,3679,1,0,0,0,3679,4050,
        1,0,0,0,3680,3681,10,52,0,0,3681,3682,5,1209,0,0,3682,4050,3,166,
        83,0,3683,3684,10,51,0,0,3684,3685,5,1209,0,0,3685,4050,5,1219,0,
        0,3686,3687,10,50,0,0,3687,3688,5,1215,0,0,3688,3689,5,1219,0,0,
        3689,4050,5,1216,0,0,3690,3691,10,49,0,0,3691,3692,5,1215,0,0,3692,
        3693,3,142,71,0,3693,3694,5,1207,0,0,3694,3697,3,142,71,0,3695,3696,
        5,1207,0,0,3696,3698,3,142,71,0,3697,3695,1,0,0,0,3697,3698,1,0,
        0,0,3698,3699,1,0,0,0,3699,3700,5,1216,0,0,3700,4050,1,0,0,0,3701,
        3702,10,48,0,0,3702,3703,5,1209,0,0,3703,3704,5,1209,0,0,3704,4050,
        3,166,83,0,3705,3706,10,47,0,0,3706,3707,5,1209,0,0,3707,3708,5,
        1209,0,0,3708,4050,5,1219,0,0,3709,3710,10,46,0,0,3710,3711,5,1209,
        0,0,3711,3712,5,1209,0,0,3712,3713,5,1215,0,0,3713,3714,3,142,71,
        0,3714,3715,5,1216,0,0,3715,4050,1,0,0,0,3716,3717,10,45,0,0,3717,
        3718,5,1209,0,0,3718,3719,5,1209,0,0,3719,3720,5,1215,0,0,3720,3721,
        5,1219,0,0,3721,4050,5,1216,0,0,3722,3723,10,44,0,0,3723,3724,5,
        1209,0,0,3724,3725,5,1209,0,0,3725,3726,5,1215,0,0,3726,3727,3,142,
        71,0,3727,3728,5,1207,0,0,3728,3731,3,142,71,0,3729,3730,5,1207,
        0,0,3730,3732,3,142,71,0,3731,3729,1,0,0,0,3731,3732,1,0,0,0,3732,
        3733,1,0,0,0,3733,3734,5,1216,0,0,3734,4050,1,0,0,0,3735,3736,10,
        43,0,0,3736,3737,5,1209,0,0,3737,3738,5,1108,0,0,3738,3740,5,1213,
        0,0,3739,3741,3,136,68,0,3740,3739,1,0,0,0,3740,3741,1,0,0,0,3741,
        3742,1,0,0,0,3742,4050,5,1214,0,0,3743,3744,10,42,0,0,3744,3745,
        5,1209,0,0,3745,3746,5,1109,0,0,3746,3747,5,1213,0,0,3747,4050,5,
        1214,0,0,3748,3749,10,41,0,0,3749,3750,5,1209,0,0,3750,3751,5,1110,
        0,0,3751,3752,5,1213,0,0,3752,3755,3,374,187,0,3753,3754,5,1208,
        0,0,3754,3756,3,136,68,0,3755,3753,1,0,0,0,3755,3756,1,0,0,0,3756,
        3757,1,0,0,0,3757,3758,5,1214,0,0,3758,4050,1,0,0,0,3759,3760,10,
        40,0,0,3760,3761,5,1209,0,0,3761,3762,5,1111,0,0,3762,3763,5,1213,
        0,0,3763,3764,3,374,187,0,3764,3765,5,1214,0,0,3765,4050,1,0,0,0,
        3766,3767,10,39,0,0,3767,3768,5,1209,0,0,3768,3769,5,1112,0,0,3769,
        3770,5,1213,0,0,3770,3771,3,374,187,0,3771,3772,5,1214,0,0,3772,
        4050,1,0,0,0,3773,3774,10,38,0,0,3774,3775,5,1209,0,0,3775,3776,
        5,1113,0,0,3776,3777,5,1213,0,0,3777,3778,3,374,187,0,3778,3779,
        5,1214,0,0,3779,4050,1,0,0,0,3780,3781,10,37,0,0,3781,3782,5,1209,
        0,0,3782,3783,5,1114,0,0,3783,3784,5,1213,0,0,3784,3785,3,374,187,
        0,3785,3786,5,1214,0,0,3786,4050,1,0,0,0,3787,3788,10,36,0,0,3788,
        3789,5,1209,0,0,3789,3790,5,1115,0,0,3790,3791,5,1213,0,0,3791,3792,
        3,142,71,0,3792,3793,5,1214,0,0,3793,4050,1,0,0,0,3794,3795,10,35,
        0,0,3795,3796,5,1209,0,0,3796,3797,5,1116,0,0,3797,3798,5,1213,0,
        0,3798,4050,5,1214,0,0,3799,3800,10,34,0,0,3800,3801,5,1209,0,0,
        3801,3802,5,1117,0,0,3802,3803,5,1213,0,0,3803,3804,3,136,68,0,3804,
        3805,5,1214,0,0,3805,4050,1,0,0,0,3806,3807,10,33,0,0,3807,3808,
        5,1209,0,0,3808,3809,5,1118,0,0,3809,3810,5,1213,0,0,3810,3811,3,
        374,187,0,3811,3812,5,1214,0,0,3812,4050,1,0,0,0,3813,3814,10,32,
        0,0,3814,3815,5,1209,0,0,3815,3816,5,1119,0,0,3816,3817,5,1213,0,
        0,3817,4050,5,1214,0,0,3818,3819,10,31,0,0,3819,3820,5,1209,0,0,
        3820,3821,5,1120,0,0,3821,3825,5,1213,0,0,3822,3823,3,374,187,0,
        3823,3824,5,1208,0,0,3824,3826,1,0,0,0,3825,3822,1,0,0,0,3825,3826,
        1,0,0,0,3826,3827,1,0,0,0,3827,3828,3,374,187,0,3828,3829,5,1208,
        0,0,3829,3830,3,374,187,0,3830,3831,5,1214,0,0,3831,4050,1,0,0,0,
        3832,3833,10,30,0,0,3833,3834,5,1209,0,0,3834,3835,5,1121,0,0,3835,
        3836,5,1213,0,0,3836,4050,5,1214,0,0,3837,3838,10,29,0,0,3838,3839,
        5,1209,0,0,3839,3840,5,1122,0,0,3840,3841,5,1213,0,0,3841,4050,5,
        1214,0,0,3842,3843,10,28,0,0,3843,3844,5,1209,0,0,3844,3845,5,1123,
        0,0,3845,3846,5,1213,0,0,3846,3847,3,374,187,0,3847,3848,5,1208,
        0,0,3848,3849,3,374,187,0,3849,3850,5,1208,0,0,3850,3851,3,374,187,
        0,3851,3852,5,1214,0,0,3852,4050,1,0,0,0,3853,3854,10,27,0,0,3854,
        3855,5,1209,0,0,3855,3856,5,1124,0,0,3856,3857,5,1213,0,0,3857,4050,
        5,1214,0,0,3858,3859,10,26,0,0,3859,3860,5,1209,0,0,3860,3861,5,
        1125,0,0,3861,3865,5,1213,0,0,3862,3863,3,374,187,0,3863,3864,5,
        1208,0,0,3864,3866,1,0,0,0,3865,3862,1,0,0,0,3865,3866,1,0,0,0,3866,
        3867,1,0,0,0,3867,3868,3,374,187,0,3868,3869,5,1208,0,0,3869,3870,
        3,374,187,0,3870,3871,5,1214,0,0,3871,4050,1,0,0,0,3872,3873,10,
        25,0,0,3873,3874,5,1209,0,0,3874,3875,5,1126,0,0,3875,3876,5,1213,
        0,0,3876,3877,3,374,187,0,3877,3878,5,1208,0,0,3878,3879,3,374,187,
        0,3879,3880,5,1214,0,0,3880,4050,1,0,0,0,3881,3882,10,20,0,0,3882,
        3883,5,1215,0,0,3883,3888,3,142,71,0,3884,3885,5,1208,0,0,3885,3887,
        3,142,71,0,3886,3884,1,0,0,0,3887,3890,1,0,0,0,3888,3886,1,0,0,0,
        3888,3889,1,0,0,0,3889,3891,1,0,0,0,3890,3888,1,0,0,0,3891,3892,
        5,1216,0,0,3892,4050,1,0,0,0,3893,3894,10,19,0,0,3894,3895,5,1209,
        0,0,3895,3896,5,564,0,0,3896,3898,5,1213,0,0,3897,3899,3,572,286,
        0,3898,3897,1,0,0,0,3898,3899,1,0,0,0,3899,3900,1,0,0,0,3900,4050,
        5,1214,0,0,3901,3902,10,18,0,0,3902,3903,5,1209,0,0,3903,3904,5,
        517,0,0,3904,3905,5,1213,0,0,3905,3908,3,374,187,0,3906,3907,5,1208,
        0,0,3907,3909,3,572,286,0,3908,3906,1,0,0,0,3908,3909,1,0,0,0,3909,
        3910,1,0,0,0,3910,3911,5,1214,0,0,3911,4050,1,0,0,0,3912,3913,10,
        17,0,0,3913,3914,5,1209,0,0,3914,3915,7,29,0,0,3915,3916,5,1213,
        0,0,3916,3919,3,374,187,0,3917,3918,5,1208,0,0,3918,3920,3,572,286,
        0,3919,3917,1,0,0,0,3919,3920,1,0,0,0,3920,3921,1,0,0,0,3921,3922,
        5,1214,0,0,3922,4050,1,0,0,0,3923,3924,10,16,0,0,3924,3925,5,1209,
        0,0,3925,3926,7,30,0,0,3926,3927,5,1213,0,0,3927,3930,3,374,187,
        0,3928,3929,5,1208,0,0,3929,3931,3,572,286,0,3930,3928,1,0,0,0,3930,
        3931,1,0,0,0,3931,3932,1,0,0,0,3932,3933,5,1214,0,0,3933,4050,1,
        0,0,0,3934,3935,10,15,0,0,3935,3936,5,1209,0,0,3936,3937,7,31,0,
        0,3937,3939,5,1213,0,0,3938,3940,3,572,286,0,3939,3938,1,0,0,0,3939,
        3940,1,0,0,0,3940,3941,1,0,0,0,3941,4050,5,1214,0,0,3942,3943,10,
        14,0,0,3943,3944,5,1209,0,0,3944,3945,5,518,0,0,3945,3951,5,1213,
        0,0,3946,3949,3,572,286,0,3947,3948,5,1208,0,0,3948,3950,3,374,187,
        0,3949,3947,1,0,0,0,3949,3950,1,0,0,0,3950,3952,1,0,0,0,3951,3946,
        1,0,0,0,3951,3952,1,0,0,0,3952,3953,1,0,0,0,3953,4050,5,1214,0,0,
        3954,3955,10,13,0,0,3955,3956,5,1209,0,0,3956,3957,5,522,0,0,3957,
        3958,5,1213,0,0,3958,3959,3,374,187,0,3959,3960,5,1214,0,0,3960,
        4050,1,0,0,0,3961,3962,10,12,0,0,3962,3963,5,1209,0,0,3963,3964,
        5,516,0,0,3964,3965,5,1213,0,0,3965,3972,3,374,187,0,3966,3967,5,
        1208,0,0,3967,3970,3,572,286,0,3968,3969,5,1208,0,0,3969,3971,3,
        142,71,0,3970,3968,1,0,0,0,3970,3971,1,0,0,0,3971,3973,1,0,0,0,3972,
        3966,1,0,0,0,3972,3973,1,0,0,0,3973,3974,1,0,0,0,3974,3975,5,1214,
        0,0,3975,4050,1,0,0,0,3976,3977,10,11,0,0,3977,3978,5,1209,0,0,3978,
        3979,5,533,0,0,3979,3980,5,1213,0,0,3980,3986,3,374,187,0,3981,3984,
        5,1208,0,0,3982,3985,3,572,286,0,3983,3985,3,142,71,0,3984,3982,
        1,0,0,0,3984,3983,1,0,0,0,3985,3987,1,0,0,0,3986,3981,1,0,0,0,3986,
        3987,1,0,0,0,3987,3988,1,0,0,0,3988,3989,5,1214,0,0,3989,4050,1,
        0,0,0,3990,3991,10,10,0,0,3991,3992,5,1209,0,0,3992,3993,5,534,0,
        0,3993,3994,5,1213,0,0,3994,3995,3,374,187,0,3995,3996,5,1208,0,
        0,3996,4002,3,142,71,0,3997,4000,5,1208,0,0,3998,4001,3,572,286,
        0,3999,4001,3,142,71,0,4000,3998,1,0,0,0,4000,3999,1,0,0,0,4001,
        4003,1,0,0,0,4002,3997,1,0,0,0,4002,4003,1,0,0,0,4003,4004,1,0,0,
        0,4004,4005,5,1214,0,0,4005,4050,1,0,0,0,4006,4007,10,9,0,0,4007,
        4008,5,1209,0,0,4008,4009,7,32,0,0,4009,4010,5,1213,0,0,4010,4011,
        3,374,187,0,4011,4012,5,1214,0,0,4012,4050,1,0,0,0,4013,4014,10,
        8,0,0,4014,4015,5,1209,0,0,4015,4016,7,33,0,0,4016,4017,5,1213,0,
        0,4017,4050,5,1214,0,0,4018,4019,10,7,0,0,4019,4020,5,1209,0,0,4020,
        4021,5,818,0,0,4021,4022,5,1213,0,0,4022,4050,5,1214,0,0,4023,4024,
        10,6,0,0,4024,4025,5,1209,0,0,4025,4026,5,832,0,0,4026,4028,5,1213,
        0,0,4027,4029,3,142,71,0,4028,4027,1,0,0,0,4028,4029,1,0,0,0,4029,
        4030,1,0,0,0,4030,4050,5,1214,0,0,4031,4032,10,5,0,0,4032,4033,5,
        1209,0,0,4033,4034,3,206,103,0,4034,4043,5,1213,0,0,4035,4040,3,
        374,187,0,4036,4037,5,1208,0,0,4037,4039,3,374,187,0,4038,4036,1,
        0,0,0,4039,4042,1,0,0,0,4040,4038,1,0,0,0,4040,4041,1,0,0,0,4041,
        4044,1,0,0,0,4042,4040,1,0,0,0,4043,4035,1,0,0,0,4043,4044,1,0,0,
        0,4044,4045,1,0,0,0,4045,4046,5,1214,0,0,4046,4050,1,0,0,0,4047,
        4048,10,4,0,0,4048,4050,3,460,230,0,4049,3646,1,0,0,0,4049,3649,
        1,0,0,0,4049,3652,1,0,0,0,4049,3655,1,0,0,0,4049,3658,1,0,0,0,4049,
        3661,1,0,0,0,4049,3664,1,0,0,0,4049,3667,1,0,0,0,4049,3669,1,0,0,
        0,4049,3674,1,0,0,0,4049,3680,1,0,0,0,4049,3683,1,0,0,0,4049,3686,
        1,0,0,0,4049,3690,1,0,0,0,4049,3701,1,0,0,0,4049,3705,1,0,0,0,4049,
        3709,1,0,0,0,4049,3716,1,0,0,0,4049,3722,1,0,0,0,4049,3735,1,0,0,
        0,4049,3743,1,0,0,0,4049,3748,1,0,0,0,4049,3759,1,0,0,0,4049,3766,
        1,0,0,0,4049,3773,1,0,0,0,4049,3780,1,0,0,0,4049,3787,1,0,0,0,4049,
        3794,1,0,0,0,4049,3799,1,0,0,0,4049,3806,1,0,0,0,4049,3813,1,0,0,
        0,4049,3818,1,0,0,0,4049,3832,1,0,0,0,4049,3837,1,0,0,0,4049,3842,
        1,0,0,0,4049,3853,1,0,0,0,4049,3858,1,0,0,0,4049,3872,1,0,0,0,4049,
        3881,1,0,0,0,4049,3893,1,0,0,0,4049,3901,1,0,0,0,4049,3912,1,0,0,
        0,4049,3923,1,0,0,0,4049,3934,1,0,0,0,4049,3942,1,0,0,0,4049,3954,
        1,0,0,0,4049,3961,1,0,0,0,4049,3976,1,0,0,0,4049,3990,1,0,0,0,4049,
        4006,1,0,0,0,4049,4013,1,0,0,0,4049,4018,1,0,0,0,4049,4023,1,0,0,
        0,4049,4031,1,0,0,0,4049,4047,1,0,0,0,4050,4053,1,0,0,0,4051,4049,
        1,0,0,0,4051,4052,1,0,0,0,4052,375,1,0,0,0,4053,4051,1,0,0,0,4054,
        4055,5,1213,0,0,4055,4058,3,378,189,0,4056,4057,5,1208,0,0,4057,
        4059,3,378,189,0,4058,4056,1,0,0,0,4059,4060,1,0,0,0,4060,4058,1,
        0,0,0,4060,4061,1,0,0,0,4061,4062,1,0,0,0,4062,4063,5,1214,0,0,4063,
        377,1,0,0,0,4064,4069,3,374,187,0,4065,4067,5,20,0,0,4066,4065,1,
        0,0,0,4066,4067,1,0,0,0,4067,4068,1,0,0,0,4068,4070,3,186,93,0,4069,
        4066,1,0,0,0,4069,4070,1,0,0,0,4070,4080,1,0,0,0,4071,4072,5,1213,
        0,0,4072,4074,3,374,187,0,4073,4075,5,20,0,0,4074,4073,1,0,0,0,4074,
        4075,1,0,0,0,4075,4076,1,0,0,0,4076,4077,3,186,93,0,4077,4078,5,
        1214,0,0,4078,4080,1,0,0,0,4079,4064,1,0,0,0,4079,4071,1,0,0,0,4080,
        379,1,0,0,0,4081,4086,3,382,191,0,4082,4086,3,384,192,0,4083,4086,
        3,386,193,0,4084,4086,3,388,194,0,4085,4081,1,0,0,0,4085,4082,1,
        0,0,0,4085,4083,1,0,0,0,4085,4084,1,0,0,0,4086,381,1,0,0,0,4087,
        4088,5,47,0,0,4088,4094,3,374,187,0,4089,4090,5,470,0,0,4090,4091,
        3,374,187,0,4091,4092,5,419,0,0,4092,4093,3,374,187,0,4093,4095,
        1,0,0,0,4094,4089,1,0,0,0,4095,4096,1,0,0,0,4096,4094,1,0,0,0,4096,
        4097,1,0,0,0,4097,4100,1,0,0,0,4098,4099,5,131,0,0,4099,4101,3,374,
        187,0,4100,4098,1,0,0,0,4100,4101,1,0,0,0,4101,4102,1,0,0,0,4102,
        4103,5,134,0,0,4103,383,1,0,0,0,4104,4110,5,47,0,0,4105,4106,5,470,
        0,0,4106,4107,3,372,186,0,4107,4108,5,419,0,0,4108,4109,3,374,187,
        0,4109,4111,1,0,0,0,4110,4105,1,0,0,0,4111,4112,1,0,0,0,4112,4110,
        1,0,0,0,4112,4113,1,0,0,0,4113,4116,1,0,0,0,4114,4115,5,131,0,0,
        4115,4117,3,374,187,0,4116,4114,1,0,0,0,4116,4117,1,0,0,0,4117,4118,
        1,0,0,0,4118,4119,5,134,0,0,4119,385,1,0,0,0,4120,4121,5,66,0,0,
        4121,4122,3,558,279,0,4122,387,1,0,0,0,4123,4124,5,275,0,0,4124,
        4125,5,1213,0,0,4125,4126,3,374,187,0,4126,4127,5,1208,0,0,4127,
        4128,3,374,187,0,4128,4129,5,1214,0,0,4129,389,1,0,0,0,4130,4131,
        3,374,187,0,4131,4132,5,1222,0,0,4132,4133,3,374,187,0,4133,4141,
        1,0,0,0,4134,4135,5,1213,0,0,4135,4136,3,374,187,0,4136,4137,5,1222,
        0,0,4137,4138,3,374,187,0,4138,4139,5,1214,0,0,4139,4141,1,0,0,0,
        4140,4130,1,0,0,0,4140,4134,1,0,0,0,4141,391,1,0,0,0,4142,4143,5,
        1213,0,0,4143,4144,3,390,195,0,4144,4145,5,1214,0,0,4145,4146,3,
        394,197,0,4146,393,1,0,0,0,4147,4156,7,34,0,0,4148,4149,5,1213,0,
        0,4149,4152,3,142,71,0,4150,4151,5,1208,0,0,4151,4153,3,142,71,0,
        4152,4150,1,0,0,0,4152,4153,1,0,0,0,4153,4154,1,0,0,0,4154,4155,
        5,1214,0,0,4155,4157,1,0,0,0,4156,4148,1,0,0,0,4156,4157,1,0,0,0,
        4157,4166,1,0,0,0,4158,4159,5,426,0,0,4159,4164,7,35,0,0,4160,4161,
        5,1213,0,0,4161,4162,3,142,71,0,4162,4163,5,1214,0,0,4163,4165,1,
        0,0,0,4164,4160,1,0,0,0,4164,4165,1,0,0,0,4165,4167,1,0,0,0,4166,
        4158,1,0,0,0,4166,4167,1,0,0,0,4167,395,1,0,0,0,4168,4191,3,398,
        199,0,4169,4191,3,400,200,0,4170,4191,3,402,201,0,4171,4191,3,404,
        202,0,4172,4191,3,406,203,0,4173,4191,3,408,204,0,4174,4191,3,410,
        205,0,4175,4191,3,412,206,0,4176,4191,3,414,207,0,4177,4191,3,416,
        208,0,4178,4191,3,418,209,0,4179,4191,3,420,210,0,4180,4191,3,422,
        211,0,4181,4191,3,424,212,0,4182,4191,3,426,213,0,4183,4191,3,428,
        214,0,4184,4191,3,430,215,0,4185,4191,3,432,216,0,4186,4191,3,434,
        217,0,4187,4191,3,436,218,0,4188,4191,3,438,219,0,4189,4191,3,440,
        220,0,4190,4168,1,0,0,0,4190,4169,1,0,0,0,4190,4170,1,0,0,0,4190,
        4171,1,0,0,0,4190,4172,1,0,0,0,4190,4173,1,0,0,0,4190,4174,1,0,0,
        0,4190,4175,1,0,0,0,4190,4176,1,0,0,0,4190,4177,1,0,0,0,4190,4178,
        1,0,0,0,4190,4179,1,0,0,0,4190,4180,1,0,0,0,4190,4181,1,0,0,0,4190,
        4182,1,0,0,0,4190,4183,1,0,0,0,4190,4184,1,0,0,0,4190,4185,1,0,0,
        0,4190,4186,1,0,0,0,4190,4187,1,0,0,0,4190,4188,1,0,0,0,4190,4189,
        1,0,0,0,4191,397,1,0,0,0,4192,4193,7,36,0,0,4193,4195,5,1213,0,0,
        4194,4196,7,37,0,0,4195,4194,1,0,0,0,4195,4196,1,0,0,0,4196,4197,
        1,0,0,0,4197,4198,3,374,187,0,4198,4199,5,1214,0,0,4199,4228,1,0,
        0,0,4200,4201,7,38,0,0,4201,4202,5,1213,0,0,4202,4203,3,374,187,
        0,4203,4204,5,1208,0,0,4204,4205,3,374,187,0,4205,4206,5,1214,0,
        0,4206,4228,1,0,0,0,4207,4208,5,83,0,0,4208,4214,5,1213,0,0,4209,
        4215,5,1219,0,0,4210,4212,7,39,0,0,4211,4210,1,0,0,0,4211,4212,1,
        0,0,0,4212,4213,1,0,0,0,4213,4215,3,374,187,0,4214,4209,1,0,0,0,
        4214,4211,1,0,0,0,4215,4216,1,0,0,0,4216,4228,5,1214,0,0,4217,4218,
        5,175,0,0,4218,4219,5,1213,0,0,4219,4220,3,374,187,0,4220,4221,5,
        1214,0,0,4221,4228,1,0,0,0,4222,4223,5,1081,0,0,4223,4224,5,1213,
        0,0,4224,4225,3,374,187,0,4225,4226,5,1214,0,0,4226,4228,1,0,0,0,
        4227,4192,1,0,0,0,4227,4200,1,0,0,0,4227,4207,1,0,0,0,4227,4217,
        1,0,0,0,4227,4222,1,0,0,0,4228,399,1,0,0,0,4229,4230,7,40,0,0,4230,
        4231,5,1213,0,0,4231,4232,3,374,187,0,4232,4233,5,1214,0,0,4233,
        4234,3,480,240,0,4234,4379,1,0,0,0,4235,4236,7,38,0,0,4236,4237,
        5,1213,0,0,4237,4238,3,374,187,0,4238,4239,5,1208,0,0,4239,4240,
        3,374,187,0,4240,4241,5,1214,0,0,4241,4242,3,480,240,0,4242,4379,
        1,0,0,0,4243,4244,5,83,0,0,4244,4247,5,1213,0,0,4245,4248,5,1219,
        0,0,4246,4248,3,374,187,0,4247,4245,1,0,0,0,4247,4246,1,0,0,0,4248,
        4249,1,0,0,0,4249,4250,5,1214,0,0,4250,4379,3,480,240,0,4251,4252,
        5,89,0,0,4252,4253,5,1213,0,0,4253,4256,3,374,187,0,4254,4255,5,
        1208,0,0,4255,4257,3,368,184,0,4256,4254,1,0,0,0,4257,4258,1,0,0,
        0,4258,4256,1,0,0,0,4258,4259,1,0,0,0,4259,4260,1,0,0,0,4260,4261,
        5,1214,0,0,4261,4379,1,0,0,0,4262,4263,7,41,0,0,4263,4264,5,1213,
        0,0,4264,4265,5,1214,0,0,4265,4379,3,482,241,0,4266,4267,7,42,0,
        0,4267,4268,5,1213,0,0,4268,4270,3,374,187,0,4269,4271,3,522,261,
        0,4270,4269,1,0,0,0,4270,4271,1,0,0,0,4271,4272,1,0,0,0,4272,4273,
        5,1214,0,0,4273,4274,3,480,240,0,4274,4379,1,0,0,0,4275,4276,7,43,
        0,0,4276,4277,5,1213,0,0,4277,4279,3,374,187,0,4278,4280,3,522,261,
        0,4279,4278,1,0,0,0,4279,4280,1,0,0,0,4280,4287,1,0,0,0,4281,4282,
        5,1208,0,0,4282,4285,3,374,187,0,4283,4284,5,1208,0,0,4284,4286,
        3,374,187,0,4285,4283,1,0,0,0,4285,4286,1,0,0,0,4286,4288,1,0,0,
        0,4287,4281,1,0,0,0,4287,4288,1,0,0,0,4288,4289,1,0,0,0,4289,4291,
        5,1214,0,0,4290,4292,3,522,261,0,4291,4290,1,0,0,0,4291,4292,1,0,
        0,0,4292,4293,1,0,0,0,4293,4294,3,482,241,0,4294,4379,1,0,0,0,4295,
        4296,7,44,0,0,4296,4297,5,1213,0,0,4297,4298,3,374,187,0,4298,4299,
        5,1208,0,0,4299,4302,3,142,71,0,4300,4301,5,1208,0,0,4301,4303,3,
        368,184,0,4302,4300,1,0,0,0,4303,4304,1,0,0,0,4304,4302,1,0,0,0,
        4304,4305,1,0,0,0,4305,4306,1,0,0,0,4306,4307,5,1214,0,0,4307,4379,
        1,0,0,0,4308,4309,5,763,0,0,4309,4310,5,1213,0,0,4310,4311,3,374,
        187,0,4311,4312,5,1214,0,0,4312,4379,1,0,0,0,4313,4314,5,249,0,0,
        4314,4315,5,1213,0,0,4315,4316,3,374,187,0,4316,4317,5,1208,0,0,
        4317,4318,3,142,71,0,4318,4319,5,1208,0,0,4319,4320,3,368,184,0,
        4320,4321,5,1214,0,0,4321,4379,1,0,0,0,4322,4323,7,45,0,0,4323,4324,
        5,1213,0,0,4324,4325,3,374,187,0,4325,4326,5,1214,0,0,4326,4327,
        5,1039,0,0,4327,4328,5,174,0,0,4328,4329,5,1213,0,0,4329,4330,5,
        291,0,0,4330,4331,5,42,0,0,4331,4336,3,366,183,0,4332,4333,5,1208,
        0,0,4333,4335,3,366,183,0,4334,4332,1,0,0,0,4335,4338,1,0,0,0,4336,
        4334,1,0,0,0,4336,4337,1,0,0,0,4337,4339,1,0,0,0,4338,4336,1,0,0,
        0,4339,4340,5,1214,0,0,4340,4379,1,0,0,0,4341,4342,5,316,0,0,4342,
        4343,5,1213,0,0,4343,4346,3,142,71,0,4344,4345,5,1208,0,0,4345,4347,
        3,368,184,0,4346,4344,1,0,0,0,4347,4348,1,0,0,0,4348,4346,1,0,0,
        0,4348,4349,1,0,0,0,4349,4350,1,0,0,0,4350,4351,5,1214,0,0,4351,
        4379,1,0,0,0,4352,4353,5,321,0,0,4353,4354,5,1213,0,0,4354,4355,
        5,1214,0,0,4355,4379,3,484,242,0,4356,4357,5,321,0,0,4357,4358,5,
        1213,0,0,4358,4363,3,368,184,0,4359,4360,5,1208,0,0,4360,4362,3,
        368,184,0,4361,4359,1,0,0,0,4362,4365,1,0,0,0,4363,4361,1,0,0,0,
        4363,4364,1,0,0,0,4364,4366,1,0,0,0,4365,4363,1,0,0,0,4366,4367,
        5,1214,0,0,4367,4379,1,0,0,0,4368,4369,5,362,0,0,4369,4370,5,1213,
        0,0,4370,4371,5,1214,0,0,4371,4379,3,482,241,0,4372,4373,5,1081,
        0,0,4373,4374,5,1213,0,0,4374,4375,3,374,187,0,4375,4376,5,1214,
        0,0,4376,4377,3,480,240,0,4377,4379,1,0,0,0,4378,4229,1,0,0,0,4378,
        4235,1,0,0,0,4378,4243,1,0,0,0,4378,4251,1,0,0,0,4378,4262,1,0,0,
        0,4378,4266,1,0,0,0,4378,4275,1,0,0,0,4378,4295,1,0,0,0,4378,4308,
        1,0,0,0,4378,4313,1,0,0,0,4378,4322,1,0,0,0,4378,4341,1,0,0,0,4378,
        4352,1,0,0,0,4378,4356,1,0,0,0,4378,4368,1,0,0,0,4378,4372,1,0,0,
        0,4379,401,1,0,0,0,4380,4381,7,46,0,0,4381,4382,5,1213,0,0,4382,
        4383,3,374,187,0,4383,4384,5,1214,0,0,4384,4435,1,0,0,0,4385,4387,
        3,444,222,0,4386,4385,1,0,0,0,4386,4387,1,0,0,0,4387,4388,1,0,0,
        0,4388,4389,7,47,0,0,4389,4390,5,1213,0,0,4390,4391,3,374,187,0,
        4391,4392,5,1214,0,0,4392,4435,1,0,0,0,4393,4394,7,48,0,0,4394,4395,
        5,1213,0,0,4395,4396,3,374,187,0,4396,4397,5,1208,0,0,4397,4398,
        3,374,187,0,4398,4399,5,1214,0,0,4399,4435,1,0,0,0,4400,4402,3,448,
        224,0,4401,4400,1,0,0,0,4401,4402,1,0,0,0,4402,4403,1,0,0,0,4403,
        4404,5,856,0,0,4404,4405,5,1213,0,0,4405,4406,3,374,187,0,4406,4407,
        5,1208,0,0,4407,4408,3,374,187,0,4408,4409,5,1214,0,0,4409,4435,
        1,0,0,0,4410,4412,3,444,222,0,4411,4410,1,0,0,0,4411,4412,1,0,0,
        0,4412,4413,1,0,0,0,4413,4414,7,49,0,0,4414,4415,5,1213,0,0,4415,
        4418,3,374,187,0,4416,4417,5,1208,0,0,4417,4419,3,374,187,0,4418,
        4416,1,0,0,0,4418,4419,1,0,0,0,4419,4420,1,0,0,0,4420,4421,5,1214,
        0,0,4421,4435,1,0,0,0,4422,4423,5,1100,0,0,4423,4424,5,1066,0,0,
        4424,4425,5,1213,0,0,4425,4426,3,374,187,0,4426,4427,5,1208,0,0,
        4427,4428,3,374,187,0,4428,4429,5,1208,0,0,4429,4430,3,374,187,0,
        4430,4431,5,1208,0,0,4431,4432,3,374,187,0,4432,4433,5,1214,0,0,
        4433,4435,1,0,0,0,4434,4380,1,0,0,0,4434,4386,1,0,0,0,4434,4393,
        1,0,0,0,4434,4401,1,0,0,0,4434,4411,1,0,0,0,4434,4422,1,0,0,0,4435,
        403,1,0,0,0,4436,4438,3,444,222,0,4437,4436,1,0,0,0,4437,4438,1,
        0,0,0,4438,4439,1,0,0,0,4439,4440,5,514,0,0,4440,4441,5,1213,0,0,
        4441,4448,3,374,187,0,4442,4443,5,291,0,0,4443,4444,5,42,0,0,4444,
        4446,3,374,187,0,4445,4447,7,23,0,0,4446,4445,1,0,0,0,4446,4447,
        1,0,0,0,4447,4449,1,0,0,0,4448,4442,1,0,0,0,4448,4449,1,0,0,0,4449,
        4450,1,0,0,0,4450,4451,5,1208,0,0,4451,4452,3,374,187,0,4452,4453,
        5,1214,0,0,4453,4650,1,0,0,0,4454,4455,5,564,0,0,4455,4456,5,1213,
        0,0,4456,4461,3,374,187,0,4457,4458,5,1208,0,0,4458,4460,3,572,286,
        0,4459,4457,1,0,0,0,4460,4463,1,0,0,0,4461,4459,1,0,0,0,4461,4462,
        1,0,0,0,4462,4464,1,0,0,0,4463,4461,1,0,0,0,4464,4465,5,1214,0,0,
        4465,4650,1,0,0,0,4466,4467,5,517,0,0,4467,4468,5,1213,0,0,4468,
        4469,3,374,187,0,4469,4470,5,1208,0,0,4470,4475,3,374,187,0,4471,
        4472,5,1208,0,0,4472,4474,3,572,286,0,4473,4471,1,0,0,0,4474,4477,
        1,0,0,0,4475,4473,1,0,0,0,4475,4476,1,0,0,0,4476,4478,1,0,0,0,4477,
        4475,1,0,0,0,4478,4479,5,1214,0,0,4479,4650,1,0,0,0,4480,4481,7,
        29,0,0,4481,4482,5,1213,0,0,4482,4483,3,374,187,0,4483,4484,5,1208,
        0,0,4484,4489,3,374,187,0,4485,4486,5,1208,0,0,4486,4488,3,572,286,
        0,4487,4485,1,0,0,0,4488,4491,1,0,0,0,4489,4487,1,0,0,0,4489,4490,
        1,0,0,0,4490,4492,1,0,0,0,4491,4489,1,0,0,0,4492,4493,5,1214,0,0,
        4493,4650,1,0,0,0,4494,4495,7,30,0,0,4495,4496,5,1213,0,0,4496,4497,
        3,374,187,0,4497,4498,5,1208,0,0,4498,4503,3,374,187,0,4499,4500,
        5,1208,0,0,4500,4502,3,572,286,0,4501,4499,1,0,0,0,4502,4505,1,0,
        0,0,4503,4501,1,0,0,0,4503,4504,1,0,0,0,4504,4506,1,0,0,0,4505,4503,
        1,0,0,0,4506,4507,5,1214,0,0,4507,4650,1,0,0,0,4508,4509,7,31,0,
        0,4509,4510,5,1213,0,0,4510,4515,3,374,187,0,4511,4512,5,1208,0,
        0,4512,4514,3,572,286,0,4513,4511,1,0,0,0,4514,4517,1,0,0,0,4515,
        4513,1,0,0,0,4515,4516,1,0,0,0,4516,4518,1,0,0,0,4517,4515,1,0,0,
        0,4518,4519,5,1214,0,0,4519,4650,1,0,0,0,4520,4521,5,518,0,0,4521,
        4522,5,1213,0,0,4522,4538,3,374,187,0,4523,4524,5,1208,0,0,4524,
        4526,3,572,286,0,4525,4523,1,0,0,0,4526,4529,1,0,0,0,4527,4525,1,
        0,0,0,4527,4528,1,0,0,0,4528,4530,1,0,0,0,4529,4527,1,0,0,0,4530,
        4531,5,1208,0,0,4531,4539,3,374,187,0,4532,4533,5,1208,0,0,4533,
        4535,3,572,286,0,4534,4532,1,0,0,0,4535,4536,1,0,0,0,4536,4534,1,
        0,0,0,4536,4537,1,0,0,0,4537,4539,1,0,0,0,4538,4527,1,0,0,0,4538,
        4534,1,0,0,0,4538,4539,1,0,0,0,4539,4540,1,0,0,0,4540,4541,5,1214,
        0,0,4541,4650,1,0,0,0,4542,4543,5,522,0,0,4543,4544,5,1213,0,0,4544,
        4545,3,374,187,0,4545,4546,5,1208,0,0,4546,4547,3,374,187,0,4547,
        4548,5,1214,0,0,4548,4650,1,0,0,0,4549,4550,5,516,0,0,4550,4551,
        5,1213,0,0,4551,4552,3,374,187,0,4552,4553,5,1208,0,0,4553,4563,
        3,374,187,0,4554,4555,5,1208,0,0,4555,4557,3,572,286,0,4556,4554,
        1,0,0,0,4557,4558,1,0,0,0,4558,4556,1,0,0,0,4558,4559,1,0,0,0,4559,
        4560,1,0,0,0,4560,4561,5,1208,0,0,4561,4562,3,142,71,0,4562,4564,
        1,0,0,0,4563,4556,1,0,0,0,4563,4564,1,0,0,0,4564,4565,1,0,0,0,4565,
        4566,5,1214,0,0,4566,4650,1,0,0,0,4567,4568,5,533,0,0,4568,4569,
        5,1213,0,0,4569,4570,3,374,187,0,4570,4571,5,1208,0,0,4571,4580,
        3,374,187,0,4572,4573,5,1208,0,0,4573,4575,3,572,286,0,4574,4572,
        1,0,0,0,4575,4576,1,0,0,0,4576,4574,1,0,0,0,4576,4577,1,0,0,0,4577,
        4581,1,0,0,0,4578,4579,5,1208,0,0,4579,4581,3,374,187,0,4580,4574,
        1,0,0,0,4580,4578,1,0,0,0,4580,4581,1,0,0,0,4581,4582,1,0,0,0,4582,
        4583,5,1214,0,0,4583,4650,1,0,0,0,4584,4585,5,534,0,0,4585,4586,
        5,1213,0,0,4586,4587,3,374,187,0,4587,4588,5,1208,0,0,4588,4589,
        3,374,187,0,4589,4590,5,1208,0,0,4590,4599,3,142,71,0,4591,4592,
        5,1208,0,0,4592,4594,3,572,286,0,4593,4591,1,0,0,0,4594,4595,1,0,
        0,0,4595,4593,1,0,0,0,4595,4596,1,0,0,0,4596,4600,1,0,0,0,4597,4598,
        5,1208,0,0,4598,4600,3,374,187,0,4599,4593,1,0,0,0,4599,4597,1,0,
        0,0,4599,4600,1,0,0,0,4600,4601,1,0,0,0,4601,4602,5,1214,0,0,4602,
        4650,1,0,0,0,4603,4605,3,444,222,0,4604,4603,1,0,0,0,4604,4605,1,
        0,0,0,4605,4606,1,0,0,0,4606,4607,7,32,0,0,4607,4608,5,1213,0,0,
        4608,4609,3,374,187,0,4609,4610,5,1208,0,0,4610,4611,3,374,187,0,
        4611,4612,5,1214,0,0,4612,4650,1,0,0,0,4613,4615,3,444,222,0,4614,
        4613,1,0,0,0,4614,4615,1,0,0,0,4615,4616,1,0,0,0,4616,4617,7,50,
        0,0,4617,4618,5,1213,0,0,4618,4619,3,374,187,0,4619,4620,5,1214,
        0,0,4620,4650,1,0,0,0,4621,4623,3,444,222,0,4622,4621,1,0,0,0,4622,
        4623,1,0,0,0,4623,4624,1,0,0,0,4624,4625,5,818,0,0,4625,4626,5,1213,
        0,0,4626,4633,3,374,187,0,4627,4628,5,1208,0,0,4628,4631,3,374,187,
        0,4629,4630,5,1208,0,0,4630,4632,3,374,187,0,4631,4629,1,0,0,0,4631,
        4632,1,0,0,0,4632,4634,1,0,0,0,4633,4627,1,0,0,0,4633,4634,1,0,0,
        0,4634,4635,1,0,0,0,4635,4636,5,1214,0,0,4636,4650,1,0,0,0,4637,
        4639,3,444,222,0,4638,4637,1,0,0,0,4638,4639,1,0,0,0,4639,4640,1,
        0,0,0,4640,4641,5,832,0,0,4641,4642,5,1213,0,0,4642,4645,3,374,187,
        0,4643,4644,5,1208,0,0,4644,4646,3,374,187,0,4645,4643,1,0,0,0,4645,
        4646,1,0,0,0,4646,4647,1,0,0,0,4647,4648,5,1214,0,0,4648,4650,1,
        0,0,0,4649,4437,1,0,0,0,4649,4454,1,0,0,0,4649,4466,1,0,0,0,4649,
        4480,1,0,0,0,4649,4494,1,0,0,0,4649,4508,1,0,0,0,4649,4520,1,0,0,
        0,4649,4542,1,0,0,0,4649,4549,1,0,0,0,4649,4567,1,0,0,0,4649,4584,
        1,0,0,0,4649,4604,1,0,0,0,4649,4614,1,0,0,0,4649,4622,1,0,0,0,4649,
        4638,1,0,0,0,4650,405,1,0,0,0,4651,4652,5,546,0,0,4652,4653,5,1213,
        0,0,4653,4656,3,374,187,0,4654,4655,5,1208,0,0,4655,4657,3,132,66,
        0,4656,4654,1,0,0,0,4656,4657,1,0,0,0,4657,4658,1,0,0,0,4658,4659,
        5,1214,0,0,4659,4692,1,0,0,0,4660,4661,7,51,0,0,4661,4662,5,1213,
        0,0,4662,4663,3,374,187,0,4663,4664,5,1214,0,0,4664,4692,1,0,0,0,
        4665,4666,7,52,0,0,4666,4667,5,1213,0,0,4667,4668,3,374,187,0,4668,
        4669,5,1214,0,0,4669,4692,1,0,0,0,4670,4675,5,111,0,0,4671,4672,
        5,1213,0,0,4672,4673,3,162,81,0,4673,4674,5,1214,0,0,4674,4676,1,
        0,0,0,4675,4671,1,0,0,0,4675,4676,1,0,0,0,4676,4692,1,0,0,0,4677,
        4678,7,53,0,0,4678,4679,5,1213,0,0,4679,4680,3,374,187,0,4680,4681,
        5,1214,0,0,4681,4692,1,0,0,0,4682,4683,5,281,0,0,4683,4684,5,1213,
        0,0,4684,4687,3,374,187,0,4685,4686,5,1208,0,0,4686,4688,3,132,66,
        0,4687,4685,1,0,0,0,4687,4688,1,0,0,0,4688,4689,1,0,0,0,4689,4690,
        5,1214,0,0,4690,4692,1,0,0,0,4691,4651,1,0,0,0,4691,4660,1,0,0,0,
        4691,4665,1,0,0,0,4691,4670,1,0,0,0,4691,4677,1,0,0,0,4691,4682,
        1,0,0,0,4692,407,1,0,0,0,4693,4695,3,444,222,0,4694,4693,1,0,0,0,
        4694,4695,1,0,0,0,4695,4696,1,0,0,0,4696,4697,5,548,0,0,4697,4698,
        5,1213,0,0,4698,4699,3,374,187,0,4699,4700,5,1214,0,0,4700,4758,
        1,0,0,0,4701,4703,3,444,222,0,4702,4701,1,0,0,0,4702,4703,1,0,0,
        0,4703,4704,1,0,0,0,4704,4705,7,54,0,0,4705,4706,5,1213,0,0,4706,
        4707,3,374,187,0,4707,4708,5,1208,0,0,4708,4709,3,374,187,0,4709,
        4710,5,1214,0,0,4710,4758,1,0,0,0,4711,4713,3,444,222,0,4712,4711,
        1,0,0,0,4712,4713,1,0,0,0,4713,4714,1,0,0,0,4714,4715,5,597,0,0,
        4715,4716,5,1213,0,0,4716,4719,3,374,187,0,4717,4718,5,1208,0,0,
        4718,4720,3,374,187,0,4719,4717,1,0,0,0,4719,4720,1,0,0,0,4720,4721,
        1,0,0,0,4721,4722,5,1214,0,0,4722,4758,1,0,0,0,4723,4725,3,444,222,
        0,4724,4723,1,0,0,0,4724,4725,1,0,0,0,4725,4726,1,0,0,0,4726,4727,
        5,919,0,0,4727,4728,5,1213,0,0,4728,4729,3,374,187,0,4729,4730,5,
        1208,0,0,4730,4733,3,374,187,0,4731,4732,5,1208,0,0,4732,4734,3,
        374,187,0,4733,4731,1,0,0,0,4733,4734,1,0,0,0,4734,4735,1,0,0,0,
        4735,4736,5,1214,0,0,4736,4758,1,0,0,0,4737,4739,3,444,222,0,4738,
        4737,1,0,0,0,4738,4739,1,0,0,0,4739,4740,1,0,0,0,4740,4741,5,945,
        0,0,4741,4742,5,1213,0,0,4742,4743,3,374,187,0,4743,4744,5,1208,
        0,0,4744,4745,3,374,187,0,4745,4746,5,1208,0,0,4746,4747,3,374,187,
        0,4747,4748,5,1214,0,0,4748,4758,1,0,0,0,4749,4751,3,444,222,0,4750,
        4749,1,0,0,0,4750,4751,1,0,0,0,4751,4752,1,0,0,0,4752,4753,5,991,
        0,0,4753,4754,5,1213,0,0,4754,4755,3,374,187,0,4755,4756,5,1214,
        0,0,4756,4758,1,0,0,0,4757,4694,1,0,0,0,4757,4702,1,0,0,0,4757,4712,
        1,0,0,0,4757,4724,1,0,0,0,4757,4738,1,0,0,0,4757,4750,1,0,0,0,4758,
        409,1,0,0,0,4759,4816,5,5,0,0,4760,4763,5,94,0,0,4761,4762,5,1213,
        0,0,4762,4764,5,1214,0,0,4763,4761,1,0,0,0,4763,4764,1,0,0,0,4764,
        4769,1,0,0,0,4765,4766,5,604,0,0,4766,4767,5,1213,0,0,4767,4769,
        5,1214,0,0,4768,4760,1,0,0,0,4768,4765,1,0,0,0,4769,4771,1,0,0,0,
        4770,4772,3,552,276,0,4771,4770,1,0,0,0,4771,4772,1,0,0,0,4772,4816,
        1,0,0,0,4773,4816,5,95,0,0,4774,4776,5,96,0,0,4775,4777,3,100,50,
        0,4776,4775,1,0,0,0,4776,4777,1,0,0,0,4777,4782,1,0,0,0,4778,4779,
        5,605,0,0,4779,4780,5,1213,0,0,4780,4782,5,1214,0,0,4781,4774,1,
        0,0,0,4781,4778,1,0,0,0,4782,4784,1,0,0,0,4783,4785,3,552,276,0,
        4784,4783,1,0,0,0,4784,4785,1,0,0,0,4785,4816,1,0,0,0,4786,4788,
        5,97,0,0,4787,4789,3,100,50,0,4788,4787,1,0,0,0,4788,4789,1,0,0,
        0,4789,4791,1,0,0,0,4790,4792,3,552,276,0,4791,4790,1,0,0,0,4791,
        4792,1,0,0,0,4792,4816,1,0,0,0,4793,4816,5,98,0,0,4794,4816,5,102,
        0,0,4795,4797,5,104,0,0,4796,4798,3,552,276,0,4797,4796,1,0,0,0,
        4797,4798,1,0,0,0,4798,4816,1,0,0,0,4799,4800,5,803,0,0,4800,4801,
        5,1213,0,0,4801,4816,5,1214,0,0,4802,4816,5,311,0,0,4803,4816,5,
        357,0,0,4804,4816,5,371,0,0,4805,4816,5,980,0,0,4806,4808,5,981,
        0,0,4807,4809,3,100,50,0,4808,4807,1,0,0,0,4808,4809,1,0,0,0,4809,
        4816,1,0,0,0,4810,4812,5,421,0,0,4811,4813,3,552,276,0,4812,4811,
        1,0,0,0,4812,4813,1,0,0,0,4813,4816,1,0,0,0,4814,4816,5,456,0,0,
        4815,4759,1,0,0,0,4815,4768,1,0,0,0,4815,4773,1,0,0,0,4815,4781,
        1,0,0,0,4815,4786,1,0,0,0,4815,4793,1,0,0,0,4815,4794,1,0,0,0,4815,
        4795,1,0,0,0,4815,4799,1,0,0,0,4815,4802,1,0,0,0,4815,4803,1,0,0,
        0,4815,4804,1,0,0,0,4815,4805,1,0,0,0,4815,4806,1,0,0,0,4815,4810,
        1,0,0,0,4815,4814,1,0,0,0,4816,411,1,0,0,0,4817,4819,3,448,224,0,
        4818,4817,1,0,0,0,4818,4819,1,0,0,0,4819,4820,1,0,0,0,4820,4821,
        7,55,0,0,4821,4822,5,1213,0,0,4822,4823,3,374,187,0,4823,4824,5,
        1214,0,0,4824,4841,1,0,0,0,4825,4827,3,444,222,0,4826,4825,1,0,0,
        0,4826,4827,1,0,0,0,4827,4828,1,0,0,0,4828,4829,7,56,0,0,4829,4830,
        5,1213,0,0,4830,4832,3,374,187,0,4831,4833,5,1208,0,0,4832,4831,
        1,0,0,0,4832,4833,1,0,0,0,4833,4836,1,0,0,0,4834,4837,5,274,0,0,
        4835,4837,3,136,68,0,4836,4834,1,0,0,0,4836,4835,1,0,0,0,4836,4837,
        1,0,0,0,4837,4838,1,0,0,0,4838,4839,5,1214,0,0,4839,4841,1,0,0,0,
        4840,4818,1,0,0,0,4840,4826,1,0,0,0,4841,413,1,0,0,0,4842,4844,3,
        444,222,0,4843,4842,1,0,0,0,4843,4844,1,0,0,0,4844,4845,1,0,0,0,
        4845,4846,5,622,0,0,4846,4847,5,1213,0,0,4847,4848,3,374,187,0,4848,
        4849,5,1208,0,0,4849,4850,3,374,187,0,4850,4851,5,1208,0,0,4851,
        4852,3,374,187,0,4852,4853,1,0,0,0,4853,4854,3,374,187,0,4854,4855,
        5,1214,0,0,4855,4871,1,0,0,0,4856,4858,3,444,222,0,4857,4856,1,0,
        0,0,4857,4858,1,0,0,0,4858,4859,1,0,0,0,4859,4860,7,57,0,0,4860,
        4861,5,1213,0,0,4861,4864,3,374,187,0,4862,4863,5,1208,0,0,4863,
        4865,3,374,187,0,4864,4862,1,0,0,0,4865,4866,1,0,0,0,4866,4864,1,
        0,0,0,4866,4867,1,0,0,0,4867,4868,1,0,0,0,4868,4869,5,1214,0,0,4869,
        4871,1,0,0,0,4870,4843,1,0,0,0,4870,4857,1,0,0,0,4871,415,1,0,0,
        0,4872,4874,3,444,222,0,4873,4872,1,0,0,0,4873,4874,1,0,0,0,4874,
        4875,1,0,0,0,4875,4876,7,58,0,0,4876,4877,5,1213,0,0,4877,4878,3,
        374,187,0,4878,4879,5,1214,0,0,4879,417,1,0,0,0,4880,4881,5,50,0,
        0,4881,4882,5,1213,0,0,4882,4883,3,374,187,0,4883,4896,5,20,0,0,
        4884,4888,3,66,33,0,4885,4887,3,88,44,0,4886,4885,1,0,0,0,4887,4890,
        1,0,0,0,4888,4886,1,0,0,0,4888,4889,1,0,0,0,4889,4897,1,0,0,0,4890,
        4888,1,0,0,0,4891,4893,3,88,44,0,4892,4891,1,0,0,0,4893,4894,1,0,
        0,0,4894,4892,1,0,0,0,4894,4895,1,0,0,0,4895,4897,1,0,0,0,4896,4884,
        1,0,0,0,4896,4892,1,0,0,0,4897,4898,1,0,0,0,4898,4899,5,1214,0,0,
        4899,5012,1,0,0,0,4900,4901,5,1095,0,0,4901,4902,5,1213,0,0,4902,
        4903,3,374,187,0,4903,4904,5,20,0,0,4904,4905,3,66,33,0,4905,4906,
        5,1214,0,0,4906,5012,1,0,0,0,4907,4909,3,444,222,0,4908,4907,1,0,
        0,0,4908,4909,1,0,0,0,4909,4910,1,0,0,0,4910,4911,5,992,0,0,4911,
        4912,5,1213,0,0,4912,4913,3,374,187,0,4913,4914,5,1208,0,0,4914,
        4915,3,136,68,0,4915,4916,5,1214,0,0,4916,5012,1,0,0,0,4917,4919,
        3,444,222,0,4918,4917,1,0,0,0,4918,4919,1,0,0,0,4919,4920,1,0,0,
        0,4920,4921,5,679,0,0,4921,4922,5,1213,0,0,4922,4923,3,374,187,0,
        4923,4924,5,1208,0,0,4924,4925,3,136,68,0,4925,4926,5,1214,0,0,4926,
        5012,1,0,0,0,4927,4929,3,444,222,0,4928,4927,1,0,0,0,4928,4929,1,
        0,0,0,4929,4930,1,0,0,0,4930,4931,5,996,0,0,4931,4932,5,1213,0,0,
        4932,4942,3,374,187,0,4933,4934,5,1208,0,0,4934,4940,3,136,68,0,
        4935,4938,5,1208,0,0,4936,4939,3,136,68,0,4937,4939,5,274,0,0,4938,
        4936,1,0,0,0,4938,4937,1,0,0,0,4939,4941,1,0,0,0,4940,4935,1,0,0,
        0,4940,4941,1,0,0,0,4941,4943,1,0,0,0,4942,4933,1,0,0,0,4942,4943,
        1,0,0,0,4943,4944,1,0,0,0,4944,4945,5,1214,0,0,4945,5012,1,0,0,0,
        4946,4948,3,444,222,0,4947,4946,1,0,0,0,4947,4948,1,0,0,0,4948,4949,
        1,0,0,0,4949,4950,5,993,0,0,4950,4951,5,1213,0,0,4951,4961,3,374,
        187,0,4952,4953,5,1208,0,0,4953,4959,3,136,68,0,4954,4957,5,1208,
        0,0,4955,4958,3,136,68,0,4956,4958,5,274,0,0,4957,4955,1,0,0,0,4957,
        4956,1,0,0,0,4958,4960,1,0,0,0,4959,4954,1,0,0,0,4959,4960,1,0,0,
        0,4960,4962,1,0,0,0,4961,4952,1,0,0,0,4961,4962,1,0,0,0,4962,4963,
        1,0,0,0,4963,4964,5,1214,0,0,4964,5012,1,0,0,0,4965,4967,3,444,222,
        0,4966,4965,1,0,0,0,4966,4967,1,0,0,0,4967,4968,1,0,0,0,4968,4969,
        5,994,0,0,4969,4970,5,1213,0,0,4970,4971,3,374,187,0,4971,4974,5,
        1208,0,0,4972,4975,3,136,68,0,4973,4975,5,274,0,0,4974,4972,1,0,
        0,0,4974,4973,1,0,0,0,4975,4976,1,0,0,0,4976,4977,5,1214,0,0,4977,
        5012,1,0,0,0,4978,4980,3,444,222,0,4979,4978,1,0,0,0,4979,4980,1,
        0,0,0,4980,4981,1,0,0,0,4981,4982,7,59,0,0,4982,4983,5,1213,0,0,
        4983,4989,3,374,187,0,4984,4987,5,1208,0,0,4985,4988,3,136,68,0,
        4986,4988,5,274,0,0,4987,4985,1,0,0,0,4987,4986,1,0,0,0,4988,4990,
        1,0,0,0,4989,4984,1,0,0,0,4989,4990,1,0,0,0,4990,4991,1,0,0,0,4991,
        4992,5,1214,0,0,4992,5012,1,0,0,0,4993,4995,3,444,222,0,4994,4993,
        1,0,0,0,4994,4995,1,0,0,0,4995,4996,1,0,0,0,4996,4997,7,60,0,0,4997,
        4998,5,1213,0,0,4998,4999,3,374,187,0,4999,5000,5,1214,0,0,5000,
        5012,1,0,0,0,5001,5003,3,444,222,0,5002,5001,1,0,0,0,5002,5003,1,
        0,0,0,5003,5004,1,0,0,0,5004,5005,7,61,0,0,5005,5006,5,1213,0,0,
        5006,5007,3,374,187,0,5007,5008,5,1208,0,0,5008,5009,3,374,187,0,
        5009,5010,5,1214,0,0,5010,5012,1,0,0,0,5011,4880,1,0,0,0,5011,4900,
        1,0,0,0,5011,4908,1,0,0,0,5011,4918,1,0,0,0,5011,4928,1,0,0,0,5011,
        4947,1,0,0,0,5011,4966,1,0,0,0,5011,4979,1,0,0,0,5011,4994,1,0,0,
        0,5011,5002,1,0,0,0,5012,419,1,0,0,0,5013,5014,7,62,0,0,5014,5015,
        5,1213,0,0,5015,5016,3,374,187,0,5016,5017,5,1214,0,0,5017,5064,
        1,0,0,0,5018,5020,3,444,222,0,5019,5018,1,0,0,0,5019,5020,1,0,0,
        0,5020,5021,1,0,0,0,5021,5022,5,732,0,0,5022,5023,5,1213,0,0,5023,
        5024,3,374,187,0,5024,5025,5,1214,0,0,5025,5064,1,0,0,0,5026,5028,
        3,444,222,0,5027,5026,1,0,0,0,5027,5028,1,0,0,0,5028,5029,1,0,0,
        0,5029,5030,5,792,0,0,5030,5031,5,1213,0,0,5031,5032,3,374,187,0,
        5032,5033,5,1208,0,0,5033,5034,3,136,68,0,5034,5035,5,1214,0,0,5035,
        5064,1,0,0,0,5036,5038,3,444,222,0,5037,5036,1,0,0,0,5037,5038,1,
        0,0,0,5038,5039,1,0,0,0,5039,5040,5,786,0,0,5040,5041,5,1213,0,0,
        5041,5042,3,374,187,0,5042,5043,5,1208,0,0,5043,5044,3,374,187,0,
        5044,5045,5,1214,0,0,5045,5064,1,0,0,0,5046,5048,3,444,222,0,5047,
        5046,1,0,0,0,5047,5048,1,0,0,0,5048,5049,1,0,0,0,5049,5050,7,63,
        0,0,5050,5051,5,1213,0,0,5051,5052,3,374,187,0,5052,5053,5,1208,
        0,0,5053,5054,3,374,187,0,5054,5055,5,1214,0,0,5055,5064,1,0,0,0,
        5056,5057,5,152,0,0,5057,5058,5,1213,0,0,5058,5059,7,64,0,0,5059,
        5060,5,164,0,0,5060,5061,3,374,187,0,5061,5062,5,1214,0,0,5062,5064,
        1,0,0,0,5063,5013,1,0,0,0,5063,5019,1,0,0,0,5063,5027,1,0,0,0,5063,
        5037,1,0,0,0,5063,5047,1,0,0,0,5063,5056,1,0,0,0,5064,421,1,0,0,
        0,5065,5066,7,65,0,0,5066,5067,5,1213,0,0,5067,5094,5,1214,0,0,5068,
        5069,7,65,0,0,5069,5070,5,1213,0,0,5070,5071,3,478,239,0,5071,5072,
        5,1214,0,0,5072,5094,1,0,0,0,5073,5074,5,181,0,0,5074,5075,5,1213,
        0,0,5075,5076,3,374,187,0,5076,5077,5,1214,0,0,5077,5094,1,0,0,0,
        5078,5079,5,182,0,0,5079,5080,5,1213,0,0,5080,5094,5,1214,0,0,5081,
        5082,5,182,0,0,5082,5083,5,1213,0,0,5083,5088,3,374,187,0,5084,5085,
        5,1208,0,0,5085,5087,3,374,187,0,5086,5084,1,0,0,0,5087,5090,1,0,
        0,0,5088,5086,1,0,0,0,5088,5089,1,0,0,0,5089,5091,1,0,0,0,5090,5088,
        1,0,0,0,5091,5092,5,1214,0,0,5092,5094,1,0,0,0,5093,5065,1,0,0,0,
        5093,5068,1,0,0,0,5093,5073,1,0,0,0,5093,5078,1,0,0,0,5093,5081,
        1,0,0,0,5094,423,1,0,0,0,5095,5097,3,444,222,0,5096,5095,1,0,0,0,
        5096,5097,1,0,0,0,5097,5098,1,0,0,0,5098,5099,7,66,0,0,5099,5100,
        5,1213,0,0,5100,5101,5,1214,0,0,5101,425,1,0,0,0,5102,5104,3,448,
        224,0,5103,5102,1,0,0,0,5103,5104,1,0,0,0,5104,5105,1,0,0,0,5105,
        5106,5,1145,0,0,5106,5107,5,1213,0,0,5107,5108,3,136,68,0,5108,5109,
        5,1214,0,0,5109,5139,1,0,0,0,5110,5112,3,448,224,0,5111,5110,1,0,
        0,0,5111,5112,1,0,0,0,5112,5113,1,0,0,0,5113,5114,5,1146,0,0,5114,
        5115,5,1213,0,0,5115,5116,3,136,68,0,5116,5117,5,1208,0,0,5117,5118,
        3,136,68,0,5118,5119,5,1208,0,0,5119,5120,3,136,68,0,5120,5121,5,
        1208,0,0,5121,5122,3,136,68,0,5122,5123,5,1208,0,0,5123,5124,3,136,
        68,0,5124,5125,5,1208,0,0,5125,5126,3,136,68,0,5126,5127,5,1214,
        0,0,5127,5139,1,0,0,0,5128,5130,3,448,224,0,5129,5128,1,0,0,0,5129,
        5130,1,0,0,0,5130,5131,1,0,0,0,5131,5132,5,1147,0,0,5132,5133,5,
        1213,0,0,5133,5134,3,136,68,0,5134,5135,5,1208,0,0,5135,5136,3,136,
        68,0,5136,5137,5,1214,0,0,5137,5139,1,0,0,0,5138,5103,1,0,0,0,5138,
        5111,1,0,0,0,5138,5129,1,0,0,0,5139,427,1,0,0,0,5140,5142,3,444,
        222,0,5141,5140,1,0,0,0,5141,5142,1,0,0,0,5142,5143,1,0,0,0,5143,
        5144,5,810,0,0,5144,5145,5,1213,0,0,5145,5146,3,374,187,0,5146,5147,
        5,1208,0,0,5147,5148,3,374,187,0,5148,5149,5,1214,0,0,5149,5163,
        1,0,0,0,5150,5152,3,444,222,0,5151,5150,1,0,0,0,5151,5152,1,0,0,
        0,5152,5153,1,0,0,0,5153,5154,5,811,0,0,5154,5155,5,1213,0,0,5155,
        5156,3,374,187,0,5156,5157,5,1208,0,0,5157,5158,3,374,187,0,5158,
        5159,5,1208,0,0,5159,5160,3,374,187,0,5160,5161,5,1214,0,0,5161,
        5163,1,0,0,0,5162,5141,1,0,0,0,5162,5151,1,0,0,0,5163,429,1,0,0,
        0,5164,5165,5,34,0,0,5165,5166,5,1213,0,0,5166,5167,3,374,187,0,
        5167,5168,5,1214,0,0,5168,5206,1,0,0,0,5169,5170,5,134,0,0,5170,
        5171,5,1213,0,0,5171,5172,3,374,187,0,5172,5173,5,1214,0,0,5173,
        5206,1,0,0,0,5174,5175,5,134,0,0,5175,5176,5,1213,0,0,5176,5177,
        3,374,187,0,5177,5178,5,1214,0,0,5178,5180,5,207,0,0,5179,5181,5,
        272,0,0,5180,5179,1,0,0,0,5180,5181,1,0,0,0,5181,5182,1,0,0,0,5182,
        5183,7,67,0,0,5183,5206,1,0,0,0,5184,5185,5,205,0,0,5185,5186,5,
        1213,0,0,5186,5187,3,374,187,0,5187,5188,5,1214,0,0,5188,5189,3,
        98,49,0,5189,5206,1,0,0,0,5190,5191,5,731,0,0,5191,5192,5,1213,0,
        0,5192,5193,3,374,187,0,5193,5194,5,1214,0,0,5194,5206,1,0,0,0,5195,
        5196,5,267,0,0,5196,5197,5,1213,0,0,5197,5198,3,374,187,0,5198,5199,
        5,1214,0,0,5199,5206,1,0,0,0,5200,5201,5,861,0,0,5201,5202,5,1213,
        0,0,5202,5203,3,374,187,0,5203,5204,5,1214,0,0,5204,5206,1,0,0,0,
        5205,5164,1,0,0,0,5205,5169,1,0,0,0,5205,5174,1,0,0,0,5205,5184,
        1,0,0,0,5205,5190,1,0,0,0,5205,5195,1,0,0,0,5205,5200,1,0,0,0,5206,
        431,1,0,0,0,5207,5209,3,444,222,0,5208,5207,1,0,0,0,5208,5209,1,
        0,0,0,5209,5210,1,0,0,0,5210,5211,5,882,0,0,5211,5212,5,1213,0,0,
        5212,5213,3,374,187,0,5213,5214,5,1208,0,0,5214,5222,3,374,187,0,
        5215,5216,5,1208,0,0,5216,5217,3,374,187,0,5217,5218,5,1208,0,0,
        5218,5219,3,374,187,0,5219,5220,5,1208,0,0,5220,5221,3,374,187,0,
        5221,5223,1,0,0,0,5222,5215,1,0,0,0,5222,5223,1,0,0,0,5223,5224,
        1,0,0,0,5224,5225,5,1214,0,0,5225,5297,1,0,0,0,5226,5228,3,444,222,
        0,5227,5226,1,0,0,0,5227,5228,1,0,0,0,5228,5229,1,0,0,0,5229,5230,
        5,880,0,0,5230,5231,5,1213,0,0,5231,5232,3,374,187,0,5232,5233,5,
        1208,0,0,5233,5243,3,374,187,0,5234,5235,5,1208,0,0,5235,5236,3,
        374,187,0,5236,5237,5,1208,0,0,5237,5238,3,374,187,0,5238,5239,5,
        1208,0,0,5239,5240,3,374,187,0,5240,5241,5,1208,0,0,5241,5242,3,
        374,187,0,5242,5244,1,0,0,0,5243,5234,1,0,0,0,5243,5244,1,0,0,0,
        5244,5245,1,0,0,0,5245,5246,5,1214,0,0,5246,5297,1,0,0,0,5247,5249,
        3,444,222,0,5248,5247,1,0,0,0,5248,5249,1,0,0,0,5249,5250,1,0,0,
        0,5250,5251,5,879,0,0,5251,5252,5,1213,0,0,5252,5253,3,374,187,0,
        5253,5254,5,1208,0,0,5254,5264,3,374,187,0,5255,5256,5,1208,0,0,
        5256,5257,3,374,187,0,5257,5258,5,1208,0,0,5258,5259,3,374,187,0,
        5259,5260,5,1208,0,0,5260,5261,3,374,187,0,5261,5262,5,1208,0,0,
        5262,5263,3,374,187,0,5263,5265,1,0,0,0,5264,5255,1,0,0,0,5264,5265,
        1,0,0,0,5265,5266,1,0,0,0,5266,5267,5,1214,0,0,5267,5297,1,0,0,0,
        5268,5270,3,444,222,0,5269,5268,1,0,0,0,5269,5270,1,0,0,0,5270,5271,
        1,0,0,0,5271,5272,5,881,0,0,5272,5273,5,1213,0,0,5273,5274,3,374,
        187,0,5274,5275,5,1208,0,0,5275,5278,3,374,187,0,5276,5277,5,1208,
        0,0,5277,5279,3,374,187,0,5278,5276,1,0,0,0,5278,5279,1,0,0,0,5279,
        5280,1,0,0,0,5280,5281,5,1214,0,0,5281,5297,1,0,0,0,5282,5284,3,
        444,222,0,5283,5282,1,0,0,0,5283,5284,1,0,0,0,5284,5285,1,0,0,0,
        5285,5286,5,1083,0,0,5286,5287,5,1213,0,0,5287,5288,3,374,187,0,
        5288,5289,5,1208,0,0,5289,5290,3,374,187,0,5290,5291,5,1208,0,0,
        5291,5292,3,374,187,0,5292,5293,5,1208,0,0,5293,5294,3,374,187,0,
        5294,5295,5,1214,0,0,5295,5297,1,0,0,0,5296,5208,1,0,0,0,5296,5227,
        1,0,0,0,5296,5248,1,0,0,0,5296,5269,1,0,0,0,5296,5283,1,0,0,0,5297,
        433,1,0,0,0,5298,5300,3,444,222,0,5299,5298,1,0,0,0,5299,5300,1,
        0,0,0,5300,5301,1,0,0,0,5301,5302,7,68,0,0,5302,5303,5,1213,0,0,
        5303,5304,3,374,187,0,5304,5305,5,1214,0,0,5305,5612,1,0,0,0,5306,
        5307,7,69,0,0,5307,5308,5,1213,0,0,5308,5309,3,374,187,0,5309,5310,
        5,1214,0,0,5310,5612,1,0,0,0,5311,5312,5,586,0,0,5312,5313,5,1213,
        0,0,5313,5314,3,374,187,0,5314,5315,5,1208,0,0,5315,5320,3,374,187,
        0,5316,5317,5,1208,0,0,5317,5319,3,374,187,0,5318,5316,1,0,0,0,5319,
        5322,1,0,0,0,5320,5318,1,0,0,0,5320,5321,1,0,0,0,5321,5323,1,0,0,
        0,5322,5320,1,0,0,0,5323,5324,5,1214,0,0,5324,5612,1,0,0,0,5325,
        5327,3,444,222,0,5326,5325,1,0,0,0,5326,5327,1,0,0,0,5327,5328,1,
        0,0,0,5328,5329,5,1073,0,0,5329,5330,5,1213,0,0,5330,5331,5,265,
        0,0,5331,5332,5,1098,0,0,5332,5333,5,437,0,0,5333,5334,5,1213,0,
        0,5334,5339,3,374,187,0,5335,5336,5,1208,0,0,5336,5338,3,374,187,
        0,5337,5335,1,0,0,0,5338,5341,1,0,0,0,5339,5337,1,0,0,0,5339,5340,
        1,0,0,0,5340,5342,1,0,0,0,5341,5339,1,0,0,0,5342,5343,5,1214,0,0,
        5343,5344,5,1208,0,0,5344,5345,3,136,68,0,5345,5346,5,1208,0,0,5346,
        5347,3,136,68,0,5347,5348,5,1214,0,0,5348,5612,1,0,0,0,5349,5351,
        3,444,222,0,5350,5349,1,0,0,0,5350,5351,1,0,0,0,5351,5352,1,0,0,
        0,5352,5353,5,1074,0,0,5353,5354,5,1213,0,0,5354,5355,3,374,187,
        0,5355,5356,5,1208,0,0,5356,5357,3,136,68,0,5357,5358,5,1208,0,0,
        5358,5359,3,136,68,0,5359,5360,5,1214,0,0,5360,5612,1,0,0,0,5361,
        5363,3,444,222,0,5362,5361,1,0,0,0,5362,5363,1,0,0,0,5363,5364,1,
        0,0,0,5364,5365,5,643,0,0,5365,5366,5,1213,0,0,5366,5367,3,374,187,
        0,5367,5368,5,1208,0,0,5368,5378,3,374,187,0,5369,5370,5,1208,0,
        0,5370,5371,3,142,71,0,5371,5372,5,1208,0,0,5372,5373,3,142,71,0,
        5373,5374,5,1208,0,0,5374,5375,3,142,71,0,5375,5376,5,1208,0,0,5376,
        5377,3,142,71,0,5377,5379,1,0,0,0,5378,5369,1,0,0,0,5378,5379,1,
        0,0,0,5379,5380,1,0,0,0,5380,5381,5,1214,0,0,5381,5612,1,0,0,0,5382,
        5383,5,192,0,0,5383,5384,5,1213,0,0,5384,5385,3,374,187,0,5385,5386,
        5,1208,0,0,5386,5387,3,374,187,0,5387,5388,5,1214,0,0,5388,5612,
        1,0,0,0,5389,5391,3,444,222,0,5390,5389,1,0,0,0,5390,5391,1,0,0,
        0,5391,5392,1,0,0,0,5392,5393,5,711,0,0,5393,5394,5,1213,0,0,5394,
        5395,3,374,187,0,5395,5396,5,1208,0,0,5396,5403,3,374,187,0,5397,
        5398,5,1208,0,0,5398,5401,3,374,187,0,5399,5400,5,1208,0,0,5400,
        5402,3,374,187,0,5401,5399,1,0,0,0,5401,5402,1,0,0,0,5402,5404,1,
        0,0,0,5403,5397,1,0,0,0,5403,5404,1,0,0,0,5404,5405,1,0,0,0,5405,
        5406,5,1214,0,0,5406,5612,1,0,0,0,5407,5409,3,444,222,0,5408,5407,
        1,0,0,0,5408,5409,1,0,0,0,5409,5410,1,0,0,0,5410,5411,7,70,0,0,5411,
        5412,5,1213,0,0,5412,5413,3,374,187,0,5413,5414,5,1208,0,0,5414,
        5415,3,374,187,0,5415,5416,5,1214,0,0,5416,5612,1,0,0,0,5417,5418,
        5,743,0,0,5418,5419,5,1213,0,0,5419,5420,3,374,187,0,5420,5421,5,
        1208,0,0,5421,5424,3,374,187,0,5422,5423,5,1208,0,0,5423,5425,3,
        374,187,0,5424,5422,1,0,0,0,5424,5425,1,0,0,0,5425,5426,1,0,0,0,
        5426,5427,5,1214,0,0,5427,5612,1,0,0,0,5428,5429,7,71,0,0,5429,5430,
        5,1213,0,0,5430,5431,3,374,187,0,5431,5432,5,1214,0,0,5432,5612,
        1,0,0,0,5433,5435,3,444,222,0,5434,5433,1,0,0,0,5434,5435,1,0,0,
        0,5435,5436,1,0,0,0,5436,5437,7,72,0,0,5437,5438,5,1213,0,0,5438,
        5439,3,374,187,0,5439,5440,5,1208,0,0,5440,5443,3,374,187,0,5441,
        5442,5,1208,0,0,5442,5444,3,374,187,0,5443,5441,1,0,0,0,5443,5444,
        1,0,0,0,5444,5445,1,0,0,0,5445,5446,5,1214,0,0,5446,5612,1,0,0,0,
        5447,5449,3,444,222,0,5448,5447,1,0,0,0,5448,5449,1,0,0,0,5449,5450,
        1,0,0,0,5450,5451,7,73,0,0,5451,5452,5,1213,0,0,5452,5455,3,374,
        187,0,5453,5454,5,1208,0,0,5454,5456,3,374,187,0,5455,5453,1,0,0,
        0,5455,5456,1,0,0,0,5456,5457,1,0,0,0,5457,5458,5,1214,0,0,5458,
        5612,1,0,0,0,5459,5461,3,444,222,0,5460,5459,1,0,0,0,5460,5461,1,
        0,0,0,5461,5462,1,0,0,0,5462,5463,5,793,0,0,5463,5464,5,1213,0,0,
        5464,5465,3,374,187,0,5465,5466,5,1208,0,0,5466,5467,3,374,187,0,
        5467,5468,5,1208,0,0,5468,5471,3,374,187,0,5469,5470,5,1208,0,0,
        5470,5472,3,374,187,0,5471,5469,1,0,0,0,5471,5472,1,0,0,0,5472,5473,
        1,0,0,0,5473,5474,5,1214,0,0,5474,5612,1,0,0,0,5475,5477,3,444,222,
        0,5476,5475,1,0,0,0,5476,5477,1,0,0,0,5477,5478,1,0,0,0,5478,5479,
        5,812,0,0,5479,5480,5,1213,0,0,5480,5481,3,374,187,0,5481,5482,5,
        1208,0,0,5482,5493,3,374,187,0,5483,5484,5,1208,0,0,5484,5491,3,
        374,187,0,5485,5486,5,1208,0,0,5486,5489,3,374,187,0,5487,5488,5,
        1208,0,0,5488,5490,3,374,187,0,5489,5487,1,0,0,0,5489,5490,1,0,0,
        0,5490,5492,1,0,0,0,5491,5485,1,0,0,0,5491,5492,1,0,0,0,5492,5494,
        1,0,0,0,5493,5483,1,0,0,0,5493,5494,1,0,0,0,5494,5495,1,0,0,0,5495,
        5496,5,1214,0,0,5496,5612,1,0,0,0,5497,5499,3,444,222,0,5498,5497,
        1,0,0,0,5498,5499,1,0,0,0,5499,5500,1,0,0,0,5500,5501,5,830,0,0,
        5501,5502,5,1213,0,0,5502,5503,3,374,187,0,5503,5504,5,1208,0,0,
        5504,5507,3,374,187,0,5505,5506,5,1208,0,0,5506,5508,3,374,187,0,
        5507,5505,1,0,0,0,5507,5508,1,0,0,0,5508,5509,1,0,0,0,5509,5510,
        5,1214,0,0,5510,5612,1,0,0,0,5511,5513,3,444,222,0,5512,5511,1,0,
        0,0,5512,5513,1,0,0,0,5513,5514,1,0,0,0,5514,5515,5,831,0,0,5515,
        5516,5,1213,0,0,5516,5517,3,374,187,0,5517,5518,5,1208,0,0,5518,
        5519,3,374,187,0,5519,5520,5,1208,0,0,5520,5521,3,374,187,0,5521,
        5522,5,1214,0,0,5522,5612,1,0,0,0,5523,5524,5,304,0,0,5524,5525,
        5,1213,0,0,5525,5526,3,374,187,0,5526,5527,5,190,0,0,5527,5528,3,
        374,187,0,5528,5529,5,1214,0,0,5529,5612,1,0,0,0,5530,5532,3,444,
        222,0,5531,5530,1,0,0,0,5531,5532,1,0,0,0,5532,5533,1,0,0,0,5533,
        5534,5,943,0,0,5534,5535,5,1213,0,0,5535,5542,3,374,187,0,5536,5537,
        5,1208,0,0,5537,5540,3,374,187,0,5538,5539,5,1208,0,0,5539,5541,
        3,374,187,0,5540,5538,1,0,0,0,5540,5541,1,0,0,0,5541,5543,1,0,0,
        0,5542,5536,1,0,0,0,5542,5543,1,0,0,0,5543,5544,1,0,0,0,5544,5545,
        5,1214,0,0,5545,5612,1,0,0,0,5546,5548,3,444,222,0,5547,5546,1,0,
        0,0,5547,5548,1,0,0,0,5548,5549,1,0,0,0,5549,5550,5,1087,0,0,5550,
        5551,5,1213,0,0,5551,5552,3,374,187,0,5552,5553,5,1208,0,0,5553,
        5554,3,374,187,0,5554,5555,5,1208,0,0,5555,5556,3,374,187,0,5556,
        5557,5,1214,0,0,5557,5558,5,352,0,0,5558,5559,5,1213,0,0,5559,5560,
        3,564,282,0,5560,5561,5,1208,0,0,5561,5562,3,564,282,0,5562,5563,
        5,1208,0,0,5563,5564,3,564,282,0,5564,5565,5,1214,0,0,5565,5612,
        1,0,0,0,5566,5567,5,402,0,0,5567,5568,5,1213,0,0,5568,5569,3,374,
        187,0,5569,5570,5,164,0,0,5570,5573,3,374,187,0,5571,5572,7,74,0,
        0,5572,5574,3,374,187,0,5573,5571,1,0,0,0,5573,5574,1,0,0,0,5574,
        5575,1,0,0,0,5575,5576,5,1214,0,0,5576,5612,1,0,0,0,5577,5578,7,
        75,0,0,5578,5579,5,1213,0,0,5579,5580,3,374,187,0,5580,5581,5,1208,
        0,0,5581,5584,3,374,187,0,5582,5583,7,74,0,0,5583,5585,3,374,187,
        0,5584,5582,1,0,0,0,5584,5585,1,0,0,0,5585,5586,1,0,0,0,5586,5587,
        5,1214,0,0,5587,5612,1,0,0,0,5588,5589,7,76,0,0,5589,5590,5,1213,
        0,0,5590,5591,3,374,187,0,5591,5592,5,457,0,0,5592,5595,3,452,226,
        0,5593,5594,5,474,0,0,5594,5596,5,137,0,0,5595,5593,1,0,0,0,5595,
        5596,1,0,0,0,5596,5597,1,0,0,0,5597,5598,5,1214,0,0,5598,5612,1,
        0,0,0,5599,5600,5,436,0,0,5600,5606,5,1213,0,0,5601,5603,7,77,0,
        0,5602,5604,3,374,187,0,5603,5602,1,0,0,0,5603,5604,1,0,0,0,5604,
        5605,1,0,0,0,5605,5607,5,164,0,0,5606,5601,1,0,0,0,5606,5607,1,0,
        0,0,5607,5608,1,0,0,0,5608,5609,3,374,187,0,5609,5610,5,1214,0,0,
        5610,5612,1,0,0,0,5611,5299,1,0,0,0,5611,5306,1,0,0,0,5611,5311,
        1,0,0,0,5611,5326,1,0,0,0,5611,5350,1,0,0,0,5611,5362,1,0,0,0,5611,
        5382,1,0,0,0,5611,5390,1,0,0,0,5611,5408,1,0,0,0,5611,5417,1,0,0,
        0,5611,5428,1,0,0,0,5611,5434,1,0,0,0,5611,5448,1,0,0,0,5611,5460,
        1,0,0,0,5611,5476,1,0,0,0,5611,5498,1,0,0,0,5611,5512,1,0,0,0,5611,
        5523,1,0,0,0,5611,5531,1,0,0,0,5611,5547,1,0,0,0,5611,5566,1,0,0,
        0,5611,5577,1,0,0,0,5611,5588,1,0,0,0,5611,5599,1,0,0,0,5612,435,
        1,0,0,0,5613,5615,3,444,222,0,5614,5613,1,0,0,0,5614,5615,1,0,0,
        0,5615,5616,1,0,0,0,5616,5617,5,1174,0,0,5617,5618,5,1213,0,0,5618,
        5619,3,374,187,0,5619,5621,5,1214,0,0,5620,5622,3,456,228,0,5621,
        5620,1,0,0,0,5621,5622,1,0,0,0,5622,5736,1,0,0,0,5623,5625,3,444,
        222,0,5624,5623,1,0,0,0,5624,5625,1,0,0,0,5625,5626,1,0,0,0,5626,
        5627,5,1175,0,0,5627,5628,5,1213,0,0,5628,5631,3,374,187,0,5629,
        5630,5,1208,0,0,5630,5632,3,136,68,0,5631,5629,1,0,0,0,5631,5632,
        1,0,0,0,5632,5633,1,0,0,0,5633,5634,5,1214,0,0,5634,5736,1,0,0,0,
        5635,5637,3,444,222,0,5636,5635,1,0,0,0,5636,5637,1,0,0,0,5637,5638,
        1,0,0,0,5638,5639,5,1075,0,0,5639,5640,5,1213,0,0,5640,5641,3,374,
        187,0,5641,5642,5,1214,0,0,5642,5736,1,0,0,0,5643,5645,3,444,222,
        0,5644,5643,1,0,0,0,5644,5645,1,0,0,0,5645,5646,1,0,0,0,5646,5647,
        5,1176,0,0,5647,5648,5,1213,0,0,5648,5651,3,374,187,0,5649,5650,
        5,1208,0,0,5650,5652,3,142,71,0,5651,5649,1,0,0,0,5651,5652,1,0,
        0,0,5652,5653,1,0,0,0,5653,5655,5,1214,0,0,5654,5656,3,456,228,0,
        5655,5654,1,0,0,0,5655,5656,1,0,0,0,5656,5736,1,0,0,0,5657,5659,
        3,444,222,0,5658,5657,1,0,0,0,5658,5659,1,0,0,0,5659,5660,1,0,0,
        0,5660,5661,5,1177,0,0,5661,5662,5,1213,0,0,5662,5663,3,374,187,
        0,5663,5664,5,1208,0,0,5664,5665,3,142,71,0,5665,5666,5,1214,0,0,
        5666,5736,1,0,0,0,5667,5669,3,444,222,0,5668,5667,1,0,0,0,5668,5669,
        1,0,0,0,5669,5670,1,0,0,0,5670,5671,5,1178,0,0,5671,5672,5,1213,
        0,0,5672,5673,3,374,187,0,5673,5674,5,1214,0,0,5674,5736,1,0,0,0,
        5675,5676,5,1179,0,0,5676,5677,5,1213,0,0,5677,5678,3,374,187,0,
        5678,5679,5,1208,0,0,5679,5680,3,374,187,0,5680,5681,5,20,0,0,5681,
        5682,3,66,33,0,5682,5683,5,1214,0,0,5683,5736,1,0,0,0,5684,5685,
        5,1180,0,0,5685,5686,5,1213,0,0,5686,5687,3,374,187,0,5687,5688,
        5,1214,0,0,5688,5736,1,0,0,0,5689,5691,3,444,222,0,5690,5689,1,0,
        0,0,5690,5691,1,0,0,0,5691,5692,1,0,0,0,5692,5693,5,1181,0,0,5693,
        5694,5,1213,0,0,5694,5703,3,374,187,0,5695,5696,5,1208,0,0,5696,
        5697,3,136,68,0,5697,5698,5,1208,0,0,5698,5701,3,136,68,0,5699,5700,
        5,1208,0,0,5700,5702,3,136,68,0,5701,5699,1,0,0,0,5701,5702,1,0,
        0,0,5702,5704,1,0,0,0,5703,5695,1,0,0,0,5703,5704,1,0,0,0,5704,5705,
        1,0,0,0,5705,5706,5,1214,0,0,5706,5736,1,0,0,0,5707,5708,5,721,0,
        0,5708,5709,5,1213,0,0,5709,5714,3,492,246,0,5710,5711,5,1208,0,
        0,5711,5713,3,492,246,0,5712,5710,1,0,0,0,5713,5716,1,0,0,0,5714,
        5712,1,0,0,0,5714,5715,1,0,0,0,5715,5717,1,0,0,0,5716,5714,1,0,0,
        0,5717,5719,5,1214,0,0,5718,5720,3,456,228,0,5719,5718,1,0,0,0,5719,
        5720,1,0,0,0,5720,5736,1,0,0,0,5721,5722,5,722,0,0,5722,5723,5,1213,
        0,0,5723,5728,3,492,246,0,5724,5725,5,1208,0,0,5725,5727,3,492,246,
        0,5726,5724,1,0,0,0,5727,5730,1,0,0,0,5728,5726,1,0,0,0,5728,5729,
        1,0,0,0,5729,5731,1,0,0,0,5730,5728,1,0,0,0,5731,5733,5,1214,0,0,
        5732,5734,3,456,228,0,5733,5732,1,0,0,0,5733,5734,1,0,0,0,5734,5736,
        1,0,0,0,5735,5614,1,0,0,0,5735,5624,1,0,0,0,5735,5636,1,0,0,0,5735,
        5644,1,0,0,0,5735,5658,1,0,0,0,5735,5668,1,0,0,0,5735,5675,1,0,0,
        0,5735,5684,1,0,0,0,5735,5690,1,0,0,0,5735,5707,1,0,0,0,5735,5721,
        1,0,0,0,5736,437,1,0,0,0,5737,5738,5,1068,0,0,5738,5739,5,1213,0,
        0,5739,5740,3,374,187,0,5740,5741,5,1214,0,0,5741,5985,1,0,0,0,5742,
        5744,3,444,222,0,5743,5742,1,0,0,0,5743,5744,1,0,0,0,5744,5745,1,
        0,0,0,5745,5746,5,1075,0,0,5746,5747,5,1213,0,0,5747,5748,3,374,
        187,0,5748,5749,5,1214,0,0,5749,5985,1,0,0,0,5750,5751,5,1054,0,
        0,5751,5752,5,1213,0,0,5752,5754,3,136,68,0,5753,5755,3,494,247,
        0,5754,5753,1,0,0,0,5754,5755,1,0,0,0,5755,5757,1,0,0,0,5756,5758,
        3,518,259,0,5757,5756,1,0,0,0,5757,5758,1,0,0,0,5758,5760,1,0,0,
        0,5759,5761,3,516,258,0,5760,5759,1,0,0,0,5760,5761,1,0,0,0,5761,
        5762,1,0,0,0,5762,5763,5,1214,0,0,5763,5985,1,0,0,0,5764,5765,5,
        1056,0,0,5765,5766,5,1213,0,0,5766,5767,7,78,0,0,5767,5770,3,374,
        187,0,5768,5769,5,20,0,0,5769,5771,3,66,33,0,5770,5768,1,0,0,0,5770,
        5771,1,0,0,0,5771,5773,1,0,0,0,5772,5774,3,514,257,0,5773,5772,1,
        0,0,0,5773,5774,1,0,0,0,5774,5780,1,0,0,0,5775,5777,5,474,0,0,5776,
        5778,5,268,0,0,5777,5776,1,0,0,0,5777,5778,1,0,0,0,5778,5779,1,0,
        0,0,5779,5781,5,554,0,0,5780,5775,1,0,0,0,5780,5781,1,0,0,0,5781,
        5784,1,0,0,0,5782,5783,5,1023,0,0,5783,5785,3,136,68,0,5784,5782,
        1,0,0,0,5784,5785,1,0,0,0,5785,5788,1,0,0,0,5786,5787,7,79,0,0,5787,
        5789,5,1047,0,0,5788,5786,1,0,0,0,5788,5789,1,0,0,0,5789,5796,1,
        0,0,0,5790,5791,5,268,0,0,5791,5797,5,704,0,0,5792,5793,5,704,0,
        0,5793,5794,5,927,0,0,5794,5795,5,1224,0,0,5795,5797,3,142,71,0,
        5796,5790,1,0,0,0,5796,5792,1,0,0,0,5796,5797,1,0,0,0,5797,5798,
        1,0,0,0,5798,5799,5,1214,0,0,5799,5985,1,0,0,0,5800,5801,5,1048,
        0,0,5801,5802,5,1213,0,0,5802,5804,3,374,187,0,5803,5805,3,518,259,
        0,5804,5803,1,0,0,0,5804,5805,1,0,0,0,5805,5806,1,0,0,0,5806,5807,
        5,1214,0,0,5807,5985,1,0,0,0,5808,5809,5,1049,0,0,5809,5810,5,1213,
        0,0,5810,5811,5,789,0,0,5811,5814,3,162,81,0,5812,5813,5,1208,0,
        0,5813,5815,3,506,253,0,5814,5812,1,0,0,0,5814,5815,1,0,0,0,5815,
        5818,1,0,0,0,5816,5817,5,1208,0,0,5817,5819,3,498,249,0,5818,5816,
        1,0,0,0,5818,5819,1,0,0,0,5819,5822,1,0,0,0,5820,5821,5,1208,0,0,
        5821,5823,3,504,252,0,5822,5820,1,0,0,0,5822,5823,1,0,0,0,5823,5825,
        1,0,0,0,5824,5826,3,518,259,0,5825,5824,1,0,0,0,5825,5826,1,0,0,
        0,5826,5827,1,0,0,0,5827,5828,5,1214,0,0,5828,5985,1,0,0,0,5829,
        5830,5,1050,0,0,5830,5832,5,1213,0,0,5831,5833,3,506,253,0,5832,
        5831,1,0,0,0,5832,5833,1,0,0,0,5833,5842,1,0,0,0,5834,5839,3,502,
        251,0,5835,5836,5,1208,0,0,5836,5838,3,502,251,0,5837,5835,1,0,0,
        0,5838,5841,1,0,0,0,5839,5837,1,0,0,0,5839,5840,1,0,0,0,5840,5843,
        1,0,0,0,5841,5839,1,0,0,0,5842,5834,1,0,0,0,5842,5843,1,0,0,0,5843,
        5845,1,0,0,0,5844,5846,3,520,260,0,5845,5844,1,0,0,0,5845,5846,1,
        0,0,0,5846,5848,1,0,0,0,5847,5849,3,518,259,0,5848,5847,1,0,0,0,
        5848,5849,1,0,0,0,5849,5850,1,0,0,0,5850,5985,5,1214,0,0,5851,5852,
        5,1046,0,0,5852,5853,5,1213,0,0,5853,5858,3,374,187,0,5854,5855,
        5,1208,0,0,5855,5857,3,374,187,0,5856,5854,1,0,0,0,5857,5860,1,0,
        0,0,5858,5856,1,0,0,0,5858,5859,1,0,0,0,5859,5862,1,0,0,0,5860,5858,
        1,0,0,0,5861,5863,3,518,259,0,5862,5861,1,0,0,0,5862,5863,1,0,0,
        0,5863,5864,1,0,0,0,5864,5865,5,1214,0,0,5865,5985,1,0,0,0,5866,
        5867,5,1045,0,0,5867,5868,5,1213,0,0,5868,5870,3,374,187,0,5869,
        5871,3,518,259,0,5870,5869,1,0,0,0,5870,5871,1,0,0,0,5871,5872,1,
        0,0,0,5872,5873,5,1214,0,0,5873,5985,1,0,0,0,5874,5875,5,1053,0,
        0,5875,5876,5,1213,0,0,5876,5877,5,789,0,0,5877,5880,3,162,81,0,
        5878,5879,5,1208,0,0,5879,5881,3,374,187,0,5880,5878,1,0,0,0,5880,
        5881,1,0,0,0,5881,5883,1,0,0,0,5882,5884,3,518,259,0,5883,5882,1,
        0,0,0,5883,5884,1,0,0,0,5884,5885,1,0,0,0,5885,5886,5,1214,0,0,5886,
        5985,1,0,0,0,5887,5888,5,1058,0,0,5888,5889,5,1213,0,0,5889,5891,
        3,374,187,0,5890,5892,3,518,259,0,5891,5890,1,0,0,0,5891,5892,1,
        0,0,0,5892,5893,1,0,0,0,5893,5894,5,1214,0,0,5894,5985,1,0,0,0,5895,
        5896,5,1052,0,0,5896,5897,5,1213,0,0,5897,5898,7,78,0,0,5898,5899,
        3,374,187,0,5899,5900,7,80,0,0,5900,5901,5,1037,0,0,5901,5902,5,
        1214,0,0,5902,5985,1,0,0,0,5903,5904,5,1060,0,0,5904,5905,5,1213,
        0,0,5905,5906,7,81,0,0,5906,5907,3,374,187,0,5907,5908,5,491,0,0,
        5908,5909,5,426,0,0,5909,5910,5,1055,0,0,5910,5911,5,459,0,0,5911,
        5916,3,374,187,0,5912,5913,5,790,0,0,5913,5917,3,136,68,0,5914,5915,
        5,268,0,0,5915,5917,5,790,0,0,5916,5912,1,0,0,0,5916,5914,1,0,0,
        0,5916,5917,1,0,0,0,5917,5920,1,0,0,0,5918,5919,5,646,0,0,5919,5921,
        3,374,187,0,5920,5918,1,0,0,0,5920,5921,1,0,0,0,5921,5922,1,0,0,
        0,5922,5923,5,1214,0,0,5923,5985,1,0,0,0,5924,5925,5,1043,0,0,5925,
        5926,5,1213,0,0,5926,5937,3,374,187,0,5927,5928,5,291,0,0,5928,5929,
        5,42,0,0,5929,5934,3,366,183,0,5930,5931,5,1208,0,0,5931,5933,3,
        366,183,0,5932,5930,1,0,0,0,5933,5936,1,0,0,0,5934,5932,1,0,0,0,
        5934,5935,1,0,0,0,5935,5938,1,0,0,0,5936,5934,1,0,0,0,5937,5927,
        1,0,0,0,5937,5938,1,0,0,0,5938,5940,1,0,0,0,5939,5941,3,518,259,
        0,5940,5939,1,0,0,0,5940,5941,1,0,0,0,5941,5942,1,0,0,0,5942,5943,
        5,1214,0,0,5943,5985,1,0,0,0,5944,5945,5,1103,0,0,5945,5946,5,1213,
        0,0,5946,5947,3,374,187,0,5947,5948,5,1208,0,0,5948,5949,3,374,187,
        0,5949,5950,5,1208,0,0,5950,5951,3,374,187,0,5951,5952,5,1208,0,
        0,5952,5957,3,374,187,0,5953,5954,5,1208,0,0,5954,5956,3,374,187,
        0,5955,5953,1,0,0,0,5956,5959,1,0,0,0,5957,5955,1,0,0,0,5957,5958,
        1,0,0,0,5958,5960,1,0,0,0,5959,5957,1,0,0,0,5960,5961,5,1214,0,0,
        5961,5985,1,0,0,0,5962,5963,3,446,223,0,5963,5964,5,1101,0,0,5964,
        5965,5,1213,0,0,5965,5966,3,374,187,0,5966,5967,5,1208,0,0,5967,
        5968,3,374,187,0,5968,5969,5,1208,0,0,5969,5970,3,374,187,0,5970,
        5971,5,1208,0,0,5971,5972,3,374,187,0,5972,5973,5,1214,0,0,5973,
        5985,1,0,0,0,5974,5975,3,446,223,0,5975,5976,5,1102,0,0,5976,5977,
        5,1213,0,0,5977,5978,3,374,187,0,5978,5979,5,1208,0,0,5979,5980,
        3,374,187,0,5980,5981,5,1208,0,0,5981,5982,3,374,187,0,5982,5983,
        5,1214,0,0,5983,5985,1,0,0,0,5984,5737,1,0,0,0,5984,5743,1,0,0,0,
        5984,5750,1,0,0,0,5984,5764,1,0,0,0,5984,5800,1,0,0,0,5984,5808,
        1,0,0,0,5984,5829,1,0,0,0,5984,5851,1,0,0,0,5984,5866,1,0,0,0,5984,
        5874,1,0,0,0,5984,5887,1,0,0,0,5984,5895,1,0,0,0,5984,5903,1,0,0,
        0,5984,5924,1,0,0,0,5984,5944,1,0,0,0,5984,5962,1,0,0,0,5984,5974,
        1,0,0,0,5985,439,1,0,0,0,5986,5987,3,174,87,0,5987,5988,5,1213,0,
        0,5988,5993,3,374,187,0,5989,5990,5,1208,0,0,5990,5992,3,374,187,
        0,5991,5989,1,0,0,0,5992,5995,1,0,0,0,5993,5991,1,0,0,0,5993,5994,
        1,0,0,0,5994,5996,1,0,0,0,5995,5993,1,0,0,0,5996,5999,5,1214,0,0,
        5997,6000,3,456,228,0,5998,6000,3,480,240,0,5999,5997,1,0,0,0,5999,
        5998,1,0,0,0,5999,6000,1,0,0,0,6000,6009,1,0,0,0,6001,6002,3,174,
        87,0,6002,6003,5,1213,0,0,6003,6006,5,1214,0,0,6004,6007,3,456,228,
        0,6005,6007,3,480,240,0,6006,6004,1,0,0,0,6006,6005,1,0,0,0,6006,
        6007,1,0,0,0,6007,6009,1,0,0,0,6008,5986,1,0,0,0,6008,6001,1,0,0,
        0,6009,441,1,0,0,0,6010,6011,5,48,0,0,6011,6012,5,1213,0,0,6012,
        6017,3,372,186,0,6013,6014,5,1208,0,0,6014,6016,3,372,186,0,6015,
        6013,1,0,0,0,6016,6019,1,0,0,0,6017,6015,1,0,0,0,6017,6018,1,0,0,
        0,6018,6022,1,0,0,0,6019,6017,1,0,0,0,6020,6021,5,1208,0,0,6021,
        6023,3,464,232,0,6022,6020,1,0,0,0,6022,6023,1,0,0,0,6023,6024,1,
        0,0,0,6024,6025,5,1214,0,0,6025,6038,1,0,0,0,6026,6027,5,320,0,0,
        6027,6028,5,1213,0,0,6028,6029,3,374,187,0,6029,6030,5,35,0,0,6030,
        6033,3,466,233,0,6031,6032,5,1208,0,0,6032,6034,3,476,238,0,6033,
        6031,1,0,0,0,6033,6034,1,0,0,0,6034,6035,1,0,0,0,6035,6036,5,1214,
        0,0,6036,6038,1,0,0,0,6037,6010,1,0,0,0,6037,6026,1,0,0,0,6038,443,
        1,0,0,0,6039,6040,5,1091,0,0,6040,6041,5,1209,0,0,6041,445,1,0,0,
        0,6042,6043,5,1092,0,0,6043,6044,5,1209,0,0,6044,447,1,0,0,0,6045,
        6046,5,1088,0,0,6046,6047,5,1209,0,0,6047,449,1,0,0,0,6048,6049,
        5,1090,0,0,6049,6050,5,1209,0,0,6050,451,1,0,0,0,6051,6052,7,82,
        0,0,6052,453,1,0,0,0,6053,6054,5,1213,0,0,6054,6059,3,458,229,0,
        6055,6056,5,1208,0,0,6056,6058,3,458,229,0,6057,6055,1,0,0,0,6058,
        6061,1,0,0,0,6059,6057,1,0,0,0,6059,6060,1,0,0,0,6060,6062,1,0,0,
        0,6061,6059,1,0,0,0,6062,6063,5,1214,0,0,6063,455,1,0,0,0,6064,6065,
        5,352,0,0,6065,6070,3,66,33,0,6066,6067,5,352,0,0,6067,6068,5,944,
        0,0,6068,6070,3,162,81,0,6069,6064,1,0,0,0,6069,6066,1,0,0,0,6070,
        457,1,0,0,0,6071,6076,3,462,231,0,6072,6076,3,110,55,0,6073,6076,
        3,106,53,0,6074,6076,3,108,54,0,6075,6071,1,0,0,0,6075,6072,1,0,
        0,0,6075,6073,1,0,0,0,6075,6074,1,0,0,0,6076,459,1,0,0,0,6077,6083,
        5,1213,0,0,6078,6079,3,462,231,0,6079,6080,5,1208,0,0,6080,6082,
        1,0,0,0,6081,6078,1,0,0,0,6082,6085,1,0,0,0,6083,6081,1,0,0,0,6083,
        6084,1,0,0,0,6084,6086,1,0,0,0,6085,6083,1,0,0,0,6086,6094,3,66,
        33,0,6087,6090,5,1208,0,0,6088,6091,3,462,231,0,6089,6091,3,106,
        53,0,6090,6088,1,0,0,0,6090,6089,1,0,0,0,6091,6093,1,0,0,0,6092,
        6087,1,0,0,0,6093,6096,1,0,0,0,6094,6092,1,0,0,0,6094,6095,1,0,0,
        0,6095,6097,1,0,0,0,6096,6094,1,0,0,0,6097,6098,5,1214,0,0,6098,
        461,1,0,0,0,6099,6103,3,112,56,0,6100,6103,3,116,58,0,6101,6103,
        3,114,57,0,6102,6099,1,0,0,0,6102,6100,1,0,0,0,6102,6101,1,0,0,0,
        6103,463,1,0,0,0,6104,6105,5,268,0,0,6105,6108,5,47,0,0,6106,6107,
        7,83,0,0,6107,6109,5,1016,0,0,6108,6106,1,0,0,0,6108,6109,1,0,0,
        0,6109,6112,1,0,0,0,6110,6112,5,1016,0,0,6111,6104,1,0,0,0,6111,
        6110,1,0,0,0,6112,465,1,0,0,0,6113,6117,3,470,235,0,6114,6117,3,
        472,236,0,6115,6117,3,468,234,0,6116,6113,1,0,0,0,6116,6114,1,0,
        0,0,6116,6115,1,0,0,0,6117,467,1,0,0,0,6118,6125,3,474,237,0,6119,
        6122,5,1219,0,0,6120,6121,5,16,0,0,6121,6123,3,374,187,0,6122,6120,
        1,0,0,0,6122,6123,1,0,0,0,6123,6125,1,0,0,0,6124,6118,1,0,0,0,6124,
        6119,1,0,0,0,6125,6130,1,0,0,0,6126,6127,5,1208,0,0,6127,6129,3,
        474,237,0,6128,6126,1,0,0,0,6129,6132,1,0,0,0,6130,6128,1,0,0,0,
        6130,6131,1,0,0,0,6131,6133,1,0,0,0,6132,6130,1,0,0,0,6133,6134,
        5,1208,0,0,6134,6135,3,470,235,0,6135,469,1,0,0,0,6136,6137,3,374,
        187,0,6137,6140,5,16,0,0,6138,6141,3,374,187,0,6139,6141,5,1219,
        0,0,6140,6138,1,0,0,0,6140,6139,1,0,0,0,6141,6144,1,0,0,0,6142,6143,
        5,129,0,0,6143,6145,3,374,187,0,6144,6142,1,0,0,0,6144,6145,1,0,
        0,0,6145,471,1,0,0,0,6146,6147,5,1219,0,0,6147,6150,5,16,0,0,6148,
        6151,3,374,187,0,6149,6151,5,1219,0,0,6150,6148,1,0,0,0,6150,6149,
        1,0,0,0,6151,473,1,0,0,0,6152,6153,3,374,187,0,6153,6154,5,16,0,
        0,6154,6155,3,374,187,0,6155,6158,1,0,0,0,6156,6157,5,129,0,0,6157,
        6159,3,374,187,0,6158,6156,1,0,0,0,6158,6159,1,0,0,0,6159,475,1,
        0,0,0,6160,6161,5,268,0,0,6161,6164,5,873,0,0,6162,6163,7,83,0,0,
        6163,6165,5,1016,0,0,6164,6162,1,0,0,0,6164,6165,1,0,0,0,6165,6168,
        1,0,0,0,6166,6168,5,1016,0,0,6167,6160,1,0,0,0,6167,6166,1,0,0,0,
        6168,477,1,0,0,0,6169,6178,3,374,187,0,6170,6171,5,236,0,0,6171,
        6172,5,1224,0,0,6172,6173,3,136,68,0,6173,6174,5,577,0,0,6174,6175,
        5,457,0,0,6175,6176,5,1224,0,0,6176,6177,3,136,68,0,6177,6179,1,
        0,0,0,6178,6170,1,0,0,0,6178,6179,1,0,0,0,6179,6189,1,0,0,0,6180,
        6181,3,374,187,0,6181,6182,5,236,0,0,6182,6183,5,1224,0,0,6183,6184,
        3,136,68,0,6184,6189,1,0,0,0,6185,6186,5,236,0,0,6186,6187,5,1224,
        0,0,6187,6189,3,136,68,0,6188,6169,1,0,0,0,6188,6180,1,0,0,0,6188,
        6185,1,0,0,0,6189,479,1,0,0,0,6190,6191,5,295,0,0,6191,6193,5,1213,
        0,0,6192,6194,3,486,243,0,6193,6192,1,0,0,0,6193,6194,1,0,0,0,6194,
        6196,1,0,0,0,6195,6197,3,488,244,0,6196,6195,1,0,0,0,6196,6197,1,
        0,0,0,6197,6199,1,0,0,0,6198,6200,3,490,245,0,6199,6198,1,0,0,0,
        6199,6200,1,0,0,0,6200,6201,1,0,0,0,6201,6202,5,1214,0,0,6202,481,
        1,0,0,0,6203,6204,5,295,0,0,6204,6206,5,1213,0,0,6205,6207,3,486,
        243,0,6206,6205,1,0,0,0,6206,6207,1,0,0,0,6207,6208,1,0,0,0,6208,
        6209,3,488,244,0,6209,6210,5,1214,0,0,6210,483,1,0,0,0,6211,6212,
        5,295,0,0,6212,6214,5,1213,0,0,6213,6215,3,486,243,0,6214,6213,1,
        0,0,0,6214,6215,1,0,0,0,6215,6216,1,0,0,0,6216,6218,3,488,244,0,
        6217,6219,3,526,263,0,6218,6217,1,0,0,0,6218,6219,1,0,0,0,6219,6220,
        1,0,0,0,6220,6221,5,1214,0,0,6221,485,1,0,0,0,6222,6223,5,840,0,
        0,6223,6224,5,42,0,0,6224,6229,3,374,187,0,6225,6226,5,1208,0,0,
        6226,6228,3,374,187,0,6227,6225,1,0,0,0,6228,6231,1,0,0,0,6229,6227,
        1,0,0,0,6229,6230,1,0,0,0,6230,487,1,0,0,0,6231,6229,1,0,0,0,6232,
        6233,5,291,0,0,6233,6234,5,42,0,0,6234,6239,3,366,183,0,6235,6236,
        5,1208,0,0,6236,6238,3,366,183,0,6237,6235,1,0,0,0,6238,6241,1,0,
        0,0,6239,6237,1,0,0,0,6239,6240,1,0,0,0,6240,6245,1,0,0,0,6241,6239,
        1,0,0,0,6242,6243,5,884,0,0,6243,6244,5,470,0,0,6244,6246,3,372,
        186,0,6245,6242,1,0,0,0,6245,6246,1,0,0,0,6246,489,1,0,0,0,6247,
        6332,5,364,0,0,6248,6249,5,1013,0,0,6249,6333,5,858,0,0,6250,6251,
        3,524,262,0,6251,6252,5,858,0,0,6252,6333,1,0,0,0,6253,6254,5,93,
        0,0,6254,6333,5,361,0,0,6255,6330,5,35,0,0,6256,6257,5,1013,0,0,
        6257,6258,5,858,0,0,6258,6259,5,16,0,0,6259,6260,5,1013,0,0,6260,
        6331,5,675,0,0,6261,6262,5,1013,0,0,6262,6263,5,858,0,0,6263,6264,
        5,16,0,0,6264,6265,3,524,262,0,6265,6266,5,858,0,0,6266,6331,1,0,
        0,0,6267,6268,5,1013,0,0,6268,6269,5,858,0,0,6269,6270,5,16,0,0,
        6270,6271,5,93,0,0,6271,6331,5,361,0,0,6272,6273,5,1013,0,0,6273,
        6274,5,858,0,0,6274,6275,5,16,0,0,6275,6276,3,524,262,0,6276,6277,
        5,675,0,0,6277,6331,1,0,0,0,6278,6279,3,524,262,0,6279,6280,5,858,
        0,0,6280,6281,5,16,0,0,6281,6282,5,1013,0,0,6282,6283,5,675,0,0,
        6283,6331,1,0,0,0,6284,6285,3,524,262,0,6285,6286,5,858,0,0,6286,
        6287,5,16,0,0,6287,6288,3,524,262,0,6288,6289,5,858,0,0,6289,6331,
        1,0,0,0,6290,6291,3,524,262,0,6291,6292,5,858,0,0,6292,6293,5,16,
        0,0,6293,6294,5,93,0,0,6294,6295,5,361,0,0,6295,6331,1,0,0,0,6296,
        6297,3,524,262,0,6297,6298,5,858,0,0,6298,6299,5,16,0,0,6299,6300,
        3,524,262,0,6300,6301,5,675,0,0,6301,6331,1,0,0,0,6302,6303,5,93,
        0,0,6303,6304,5,361,0,0,6304,6305,5,16,0,0,6305,6306,5,1013,0,0,
        6306,6331,5,675,0,0,6307,6308,5,93,0,0,6308,6309,5,361,0,0,6309,
        6310,5,16,0,0,6310,6311,5,93,0,0,6311,6331,5,361,0,0,6312,6313,5,
        93,0,0,6313,6314,5,361,0,0,6314,6315,5,16,0,0,6315,6316,3,524,262,
        0,6316,6317,5,675,0,0,6317,6331,1,0,0,0,6318,6319,3,524,262,0,6319,
        6320,5,675,0,0,6320,6321,5,16,0,0,6321,6322,5,1013,0,0,6322,6323,
        5,675,0,0,6323,6331,1,0,0,0,6324,6325,3,524,262,0,6325,6326,5,675,
        0,0,6326,6327,5,16,0,0,6327,6328,3,524,262,0,6328,6329,5,675,0,0,
        6329,6331,1,0,0,0,6330,6256,1,0,0,0,6330,6261,1,0,0,0,6330,6267,
        1,0,0,0,6330,6272,1,0,0,0,6330,6278,1,0,0,0,6330,6284,1,0,0,0,6330,
        6290,1,0,0,0,6330,6296,1,0,0,0,6330,6302,1,0,0,0,6330,6307,1,0,0,
        0,6330,6312,1,0,0,0,6330,6318,1,0,0,0,6330,6324,1,0,0,0,6331,6333,
        1,0,0,0,6332,6248,1,0,0,0,6332,6250,1,0,0,0,6332,6253,1,0,0,0,6332,
        6255,1,0,0,0,6333,491,1,0,0,0,6334,6339,3,374,187,0,6335,6336,5,
        1213,0,0,6336,6337,3,112,56,0,6337,6338,5,1214,0,0,6338,6340,1,0,
        0,0,6339,6335,1,0,0,0,6339,6340,1,0,0,0,6340,6343,1,0,0,0,6341,6342,
        5,20,0,0,6342,6344,3,186,93,0,6343,6341,1,0,0,0,6343,6344,1,0,0,
        0,6344,493,1,0,0,0,6345,6348,5,845,0,0,6346,6347,5,42,0,0,6347,6349,
        5,459,0,0,6348,6346,1,0,0,0,6348,6349,1,0,0,0,6349,6359,1,0,0,0,
        6350,6360,3,162,81,0,6351,6356,3,496,248,0,6352,6353,5,1208,0,0,
        6353,6355,3,496,248,0,6354,6352,1,0,0,0,6355,6358,1,0,0,0,6356,6354,
        1,0,0,0,6356,6357,1,0,0,0,6357,6360,1,0,0,0,6358,6356,1,0,0,0,6359,
        6350,1,0,0,0,6359,6351,1,0,0,0,6360,495,1,0,0,0,6361,6362,3,162,
        81,0,6362,6363,5,20,0,0,6363,6364,3,188,94,0,6364,497,1,0,0,0,6365,
        6366,5,1044,0,0,6366,6367,5,1213,0,0,6367,6372,3,500,250,0,6368,
        6369,5,1208,0,0,6369,6371,3,500,250,0,6370,6368,1,0,0,0,6371,6374,
        1,0,0,0,6372,6370,1,0,0,0,6372,6373,1,0,0,0,6373,6375,1,0,0,0,6374,
        6372,1,0,0,0,6375,6376,5,1214,0,0,6376,499,1,0,0,0,6377,6380,3,162,
        81,0,6378,6379,5,20,0,0,6379,6381,3,186,93,0,6380,6378,1,0,0,0,6380,
        6381,1,0,0,0,6381,501,1,0,0,0,6382,6385,3,162,81,0,6383,6384,5,20,
        0,0,6384,6386,3,186,93,0,6385,6383,1,0,0,0,6385,6386,1,0,0,0,6386,
        503,1,0,0,0,6387,6389,3,374,187,0,6388,6390,3,520,260,0,6389,6388,
        1,0,0,0,6389,6390,1,0,0,0,6390,505,1,0,0,0,6391,6392,5,1051,0,0,
        6392,6393,5,1213,0,0,6393,6398,3,508,254,0,6394,6395,5,1208,0,0,
        6395,6397,3,508,254,0,6396,6394,1,0,0,0,6397,6400,1,0,0,0,6398,6396,
        1,0,0,0,6398,6399,1,0,0,0,6399,6401,1,0,0,0,6400,6398,1,0,0,0,6401,
        6402,5,1214,0,0,6402,507,1,0,0,0,6403,6404,3,136,68,0,6404,6405,
        5,20,0,0,6405,6406,3,186,93,0,6406,6412,1,0,0,0,6407,6408,5,111,
        0,0,6408,6412,3,136,68,0,6409,6410,5,268,0,0,6410,6412,5,111,0,0,
        6411,6403,1,0,0,0,6411,6407,1,0,0,0,6411,6409,1,0,0,0,6412,509,1,
        0,0,0,6413,6419,5,579,0,0,6414,6415,3,162,81,0,6415,6416,5,159,0,
        0,6416,6417,5,829,0,0,6417,6420,1,0,0,0,6418,6420,3,512,256,0,6419,
        6414,1,0,0,0,6419,6418,1,0,0,0,6420,6431,1,0,0,0,6421,6427,5,1208,
        0,0,6422,6423,3,162,81,0,6423,6424,5,159,0,0,6424,6425,5,829,0,0,
        6425,6428,1,0,0,0,6426,6428,3,512,256,0,6427,6422,1,0,0,0,6427,6426,
        1,0,0,0,6428,6430,1,0,0,0,6429,6421,1,0,0,0,6430,6433,1,0,0,0,6431,
        6429,1,0,0,0,6431,6432,1,0,0,0,6432,511,1,0,0,0,6433,6431,1,0,0,
        0,6434,6435,3,166,83,0,6435,6438,3,66,33,0,6436,6437,5,1082,0,0,
        6437,6439,3,136,68,0,6438,6436,1,0,0,0,6438,6439,1,0,0,0,6439,6442,
        1,0,0,0,6440,6441,5,111,0,0,6441,6443,3,132,66,0,6442,6440,1,0,0,
        0,6442,6443,1,0,0,0,6443,513,1,0,0,0,6444,6445,5,653,0,0,6445,6446,
        3,136,68,0,6446,515,1,0,0,0,6447,6448,7,84,0,0,6448,6449,5,286,0,
        0,6449,6450,5,649,0,0,6450,517,1,0,0,0,6451,6452,5,889,0,0,6452,
        6453,7,85,0,0,6453,519,1,0,0,0,6454,6462,5,289,0,0,6455,6456,7,86,
        0,0,6456,6457,5,286,0,0,6457,6463,5,274,0,0,6458,6459,5,794,0,0,
        6459,6460,5,286,0,0,6460,6461,5,268,0,0,6461,6463,5,593,0,0,6462,
        6455,1,0,0,0,6462,6458,1,0,0,0,6463,521,1,0,0,0,6464,6465,7,87,0,
        0,6465,6466,5,806,0,0,6466,523,1,0,0,0,6467,6468,3,142,71,0,6468,
        525,1,0,0,0,6469,6470,5,474,0,0,6470,6471,5,986,0,0,6471,6472,7,
        88,0,0,6472,527,1,0,0,0,6473,6474,5,854,0,0,6474,6475,5,1213,0,0,
        6475,6476,3,530,265,0,6476,6478,5,1214,0,0,6477,6479,3,532,266,0,
        6478,6477,1,0,0,0,6478,6479,1,0,0,0,6479,6481,1,0,0,0,6480,6482,
        5,20,0,0,6481,6480,1,0,0,0,6481,6482,1,0,0,0,6482,6483,1,0,0,0,6483,
        6485,3,186,93,0,6484,6486,3,560,280,0,6485,6484,1,0,0,0,6485,6486,
        1,0,0,0,6486,529,1,0,0,0,6487,6492,3,534,267,0,6488,6489,5,1208,
        0,0,6489,6491,3,534,267,0,6490,6488,1,0,0,0,6491,6494,1,0,0,0,6492,
        6490,1,0,0,0,6492,6493,1,0,0,0,6493,6495,1,0,0,0,6494,6492,1,0,0,
        0,6495,6496,5,159,0,0,6496,6497,3,536,268,0,6497,531,1,0,0,0,6498,
        6499,5,474,0,0,6499,6504,3,538,269,0,6500,6501,5,1208,0,0,6501,6503,
        3,538,269,0,6502,6500,1,0,0,0,6503,6506,1,0,0,0,6504,6502,1,0,0,
        0,6504,6505,1,0,0,0,6505,533,1,0,0,0,6506,6504,1,0,0,0,6507,6512,
        3,398,199,0,6508,6510,5,20,0,0,6509,6508,1,0,0,0,6509,6510,1,0,0,
        0,6510,6511,1,0,0,0,6511,6513,3,186,93,0,6512,6509,1,0,0,0,6512,
        6513,1,0,0,0,6513,535,1,0,0,0,6514,6515,3,162,81,0,6515,6516,5,190,
        0,0,6516,6517,5,1213,0,0,6517,6522,3,540,270,0,6518,6519,5,1208,
        0,0,6519,6521,3,540,270,0,6520,6518,1,0,0,0,6521,6524,1,0,0,0,6522,
        6520,1,0,0,0,6522,6523,1,0,0,0,6523,6525,1,0,0,0,6524,6522,1,0,0,
        0,6525,6526,5,1214,0,0,6526,6558,1,0,0,0,6527,6528,3,560,280,0,6528,
        6529,5,190,0,0,6529,6530,5,1213,0,0,6530,6535,3,540,270,0,6531,6532,
        5,1208,0,0,6532,6534,3,540,270,0,6533,6531,1,0,0,0,6534,6537,1,0,
        0,0,6535,6533,1,0,0,0,6535,6536,1,0,0,0,6536,6538,1,0,0,0,6537,6535,
        1,0,0,0,6538,6539,5,1214,0,0,6539,6558,1,0,0,0,6540,6541,3,560,280,
        0,6541,6542,5,190,0,0,6542,6543,5,1213,0,0,6543,6548,3,542,271,0,
        6544,6545,5,1208,0,0,6545,6547,3,542,271,0,6546,6544,1,0,0,0,6547,
        6550,1,0,0,0,6548,6546,1,0,0,0,6548,6549,1,0,0,0,6549,6551,1,0,0,
        0,6550,6548,1,0,0,0,6551,6552,5,1214,0,0,6552,6558,1,0,0,0,6553,
        6554,3,162,81,0,6554,6555,5,190,0,0,6555,6556,3,562,281,0,6556,6558,
        1,0,0,0,6557,6514,1,0,0,0,6557,6527,1,0,0,0,6557,6540,1,0,0,0,6557,
        6553,1,0,0,0,6558,537,1,0,0,0,6559,6561,3,398,199,0,6560,6562,5,
        20,0,0,6561,6560,1,0,0,0,6561,6562,1,0,0,0,6562,6563,1,0,0,0,6563,
        6564,3,186,93,0,6564,539,1,0,0,0,6565,6570,3,374,187,0,6566,6568,
        5,20,0,0,6567,6566,1,0,0,0,6567,6568,1,0,0,0,6568,6569,1,0,0,0,6569,
        6571,3,186,93,0,6570,6567,1,0,0,0,6570,6571,1,0,0,0,6571,541,1,0,
        0,0,6572,6574,3,558,279,0,6573,6575,5,20,0,0,6574,6573,1,0,0,0,6574,
        6575,1,0,0,0,6575,6576,1,0,0,0,6576,6577,3,186,93,0,6577,543,1,0,
        0,0,6578,6581,5,1017,0,0,6579,6580,7,89,0,0,6580,6582,5,806,0,0,
        6581,6579,1,0,0,0,6581,6582,1,0,0,0,6582,6583,1,0,0,0,6583,6584,
        5,1213,0,0,6584,6585,3,546,273,0,6585,6587,5,1214,0,0,6586,6588,
        5,20,0,0,6587,6586,1,0,0,0,6587,6588,1,0,0,0,6588,6589,1,0,0,0,6589,
        6591,3,186,93,0,6590,6592,3,560,280,0,6591,6590,1,0,0,0,6591,6592,
        1,0,0,0,6592,545,1,0,0,0,6593,6594,3,162,81,0,6594,6595,5,159,0,
        0,6595,6596,3,162,81,0,6596,6597,5,190,0,0,6597,6598,5,1213,0,0,
        6598,6603,3,548,274,0,6599,6600,5,1208,0,0,6600,6602,3,548,274,0,
        6601,6599,1,0,0,0,6602,6605,1,0,0,0,6603,6601,1,0,0,0,6603,6604,
        1,0,0,0,6604,6606,1,0,0,0,6605,6603,1,0,0,0,6606,6607,5,1214,0,0,
        6607,6624,1,0,0,0,6608,6609,3,560,280,0,6609,6610,5,159,0,0,6610,
        6611,3,162,81,0,6611,6612,5,190,0,0,6612,6613,5,1213,0,0,6613,6618,
        3,550,275,0,6614,6615,5,1208,0,0,6615,6617,3,550,275,0,6616,6614,
        1,0,0,0,6617,6620,1,0,0,0,6618,6616,1,0,0,0,6618,6619,1,0,0,0,6619,
        6621,1,0,0,0,6620,6618,1,0,0,0,6621,6622,5,1214,0,0,6622,6624,1,
        0,0,0,6623,6593,1,0,0,0,6623,6608,1,0,0,0,6624,547,1,0,0,0,6625,
        6630,3,162,81,0,6626,6628,5,20,0,0,6627,6626,1,0,0,0,6627,6628,1,
        0,0,0,6628,6629,1,0,0,0,6629,6631,3,132,66,0,6630,6627,1,0,0,0,6630,
        6631,1,0,0,0,6631,549,1,0,0,0,6632,6637,3,560,280,0,6633,6635,5,
        20,0,0,6634,6633,1,0,0,0,6634,6635,1,0,0,0,6635,6636,1,0,0,0,6636,
        6638,3,132,66,0,6637,6634,1,0,0,0,6637,6638,1,0,0,0,6638,551,1,0,
        0,0,6639,6646,5,24,0,0,6640,6647,5,224,0,0,6641,6642,5,421,0,0,6642,
        6644,5,480,0,0,6643,6641,1,0,0,0,6643,6644,1,0,0,0,6644,6645,1,0,
        0,0,6645,6647,3,374,187,0,6646,6640,1,0,0,0,6646,6643,1,0,0,0,6647,
        553,1,0,0,0,6648,6651,3,562,281,0,6649,6651,3,556,278,0,6650,6648,
        1,0,0,0,6650,6649,1,0,0,0,6651,555,1,0,0,0,6652,6653,5,1213,0,0,
        6653,6658,3,374,187,0,6654,6655,7,83,0,0,6655,6657,3,374,187,0,6656,
        6654,1,0,0,0,6657,6660,1,0,0,0,6658,6656,1,0,0,0,6658,6659,1,0,0,
        0,6659,6661,1,0,0,0,6660,6658,1,0,0,0,6661,6662,5,1214,0,0,6662,
        557,1,0,0,0,6663,6664,5,1213,0,0,6664,6669,3,374,187,0,6665,6666,
        5,1208,0,0,6666,6668,3,374,187,0,6667,6665,1,0,0,0,6668,6671,1,0,
        0,0,6669,6667,1,0,0,0,6669,6670,1,0,0,0,6670,6672,1,0,0,0,6671,6669,
        1,0,0,0,6672,6673,5,1214,0,0,6673,559,1,0,0,0,6674,6675,5,1213,0,
        0,6675,6680,3,162,81,0,6676,6677,5,1208,0,0,6677,6679,3,162,81,0,
        6678,6676,1,0,0,0,6679,6682,1,0,0,0,6680,6678,1,0,0,0,6680,6681,
        1,0,0,0,6681,6683,1,0,0,0,6682,6680,1,0,0,0,6683,6684,5,1214,0,0,
        6684,561,1,0,0,0,6685,6687,5,1213,0,0,6686,6688,3,586,293,0,6687,
        6686,1,0,0,0,6687,6688,1,0,0,0,6688,6689,1,0,0,0,6689,6690,3,212,
        106,0,6690,6691,5,1214,0,0,6691,563,1,0,0,0,6692,6693,3,166,83,0,
        6693,6694,3,66,33,0,6694,565,1,0,0,0,6695,6696,5,1207,0,0,6696,6697,
        3,188,94,0,6697,567,1,0,0,0,6698,6699,3,566,283,0,6699,6700,5,1209,
        0,0,6700,6701,3,166,83,0,6701,569,1,0,0,0,6702,6703,7,90,0,0,6703,
        6704,3,190,95,0,6704,571,1,0,0,0,6705,6706,3,142,71,0,6706,6707,
        5,1208,0,0,6707,6708,3,142,71,0,6708,573,1,0,0,0,6709,6727,5,1224,
        0,0,6710,6727,5,135,0,0,6711,6727,5,1225,0,0,6712,6727,5,1226,0,
        0,6713,6727,5,264,0,0,6714,6715,5,272,0,0,6715,6727,5,1224,0,0,6716,
        6717,5,1227,0,0,6717,6727,5,1229,0,0,6718,6727,5,1227,0,0,6719,6727,
        5,234,0,0,6720,6727,5,1228,0,0,6721,6727,5,216,0,0,6722,6727,5,1229,
        0,0,6723,6727,5,176,0,0,6724,6727,5,1230,0,0,6725,6727,5,168,0,0,
        6726,6709,1,0,0,0,6726,6710,1,0,0,0,6726,6711,1,0,0,0,6726,6712,
        1,0,0,0,6726,6713,1,0,0,0,6726,6714,1,0,0,0,6726,6716,1,0,0,0,6726,
        6718,1,0,0,0,6726,6719,1,0,0,0,6726,6720,1,0,0,0,6726,6721,1,0,0,
        0,6726,6722,1,0,0,0,6726,6723,1,0,0,0,6726,6724,1,0,0,0,6726,6725,
        1,0,0,0,6727,575,1,0,0,0,6728,6729,7,91,0,0,6729,577,1,0,0,0,6730,
        6735,3,580,290,0,6731,6735,3,586,293,0,6732,6735,3,594,297,0,6733,
        6735,3,598,299,0,6734,6730,1,0,0,0,6734,6731,1,0,0,0,6734,6732,1,
        0,0,0,6734,6733,1,0,0,0,6735,579,1,0,0,0,6736,6738,3,582,291,0,6737,
        6736,1,0,0,0,6738,6739,1,0,0,0,6739,6737,1,0,0,0,6739,6740,1,0,0,
        0,6740,581,1,0,0,0,6741,6755,7,92,0,0,6742,6744,5,102,0,0,6743,6742,
        1,0,0,0,6743,6744,1,0,0,0,6744,6745,1,0,0,0,6745,6756,3,178,89,0,
        6746,6748,5,406,0,0,6747,6746,1,0,0,0,6747,6748,1,0,0,0,6748,6749,
        1,0,0,0,6749,6756,3,170,85,0,6750,6752,5,468,0,0,6751,6750,1,0,0,
        0,6751,6752,1,0,0,0,6752,6753,1,0,0,0,6753,6756,3,170,85,0,6754,
        6756,5,361,0,0,6755,6743,1,0,0,0,6755,6747,1,0,0,0,6755,6751,1,0,
        0,0,6755,6754,1,0,0,0,6756,6758,1,0,0,0,6757,6759,7,93,0,0,6758,
        6757,1,0,0,0,6758,6759,1,0,0,0,6759,6760,1,0,0,0,6760,6762,3,584,
        292,0,6761,6763,5,252,0,0,6762,6761,1,0,0,0,6762,6763,1,0,0,0,6763,
        6765,1,0,0,0,6764,6766,5,273,0,0,6765,6764,1,0,0,0,6765,6766,1,0,
        0,0,6766,583,1,0,0,0,6767,6779,5,490,0,0,6768,6779,7,94,0,0,6769,
        6779,5,923,0,0,6770,6772,5,877,0,0,6771,6773,5,297,0,0,6772,6771,
        1,0,0,0,6772,6773,1,0,0,0,6773,6779,1,0,0,0,6774,6779,5,1041,0,0,
        6775,6779,5,571,0,0,6776,6777,5,742,0,0,6777,6779,5,1067,0,0,6778,
        6767,1,0,0,0,6778,6768,1,0,0,0,6778,6769,1,0,0,0,6778,6770,1,0,0,
        0,6778,6774,1,0,0,0,6778,6775,1,0,0,0,6778,6776,1,0,0,0,6779,585,
        1,0,0,0,6780,6781,5,474,0,0,6781,6786,3,588,294,0,6782,6783,5,1208,
        0,0,6783,6785,3,588,294,0,6784,6782,1,0,0,0,6785,6788,1,0,0,0,6786,
        6784,1,0,0,0,6786,6787,1,0,0,0,6787,587,1,0,0,0,6788,6786,1,0,0,
        0,6789,6792,3,590,295,0,6790,6792,3,592,296,0,6791,6789,1,0,0,0,
        6791,6790,1,0,0,0,6792,589,1,0,0,0,6793,6795,3,186,93,0,6794,6796,
        3,560,280,0,6795,6794,1,0,0,0,6795,6796,1,0,0,0,6796,6797,1,0,0,
        0,6797,6798,5,20,0,0,6798,6799,3,562,281,0,6799,591,1,0,0,0,6800,
        6801,5,324,0,0,6801,6803,3,186,93,0,6802,6804,3,560,280,0,6803,6802,
        1,0,0,0,6803,6804,1,0,0,0,6804,6805,1,0,0,0,6805,6806,5,20,0,0,6806,
        6807,5,1213,0,0,6807,6811,3,212,106,0,6808,6809,5,447,0,0,6809,6810,
        5,13,0,0,6810,6812,3,214,107,0,6811,6808,1,0,0,0,6812,6813,1,0,0,
        0,6813,6811,1,0,0,0,6813,6814,1,0,0,0,6814,6815,1,0,0,0,6815,6816,
        5,1214,0,0,6816,593,1,0,0,0,6817,6818,5,457,0,0,6818,6819,5,1213,
        0,0,6819,6824,3,596,298,0,6820,6821,5,1208,0,0,6821,6823,3,596,298,
        0,6822,6820,1,0,0,0,6823,6826,1,0,0,0,6824,6822,1,0,0,0,6824,6825,
        1,0,0,0,6825,6827,1,0,0,0,6826,6824,1,0,0,0,6827,6828,5,1214,0,0,
        6828,595,1,0,0,0,6829,6830,3,188,94,0,6830,6834,3,66,33,0,6831,6833,
        3,88,44,0,6832,6831,1,0,0,0,6833,6836,1,0,0,0,6834,6832,1,0,0,0,
        6834,6835,1,0,0,0,6835,6846,1,0,0,0,6836,6834,1,0,0,0,6837,6844,
        5,20,0,0,6838,6841,5,112,0,0,6839,6840,5,42,0,0,6840,6842,5,789,
        0,0,6841,6839,1,0,0,0,6841,6842,1,0,0,0,6842,6845,1,0,0,0,6843,6845,
        5,225,0,0,6844,6838,1,0,0,0,6844,6843,1,0,0,0,6845,6847,1,0,0,0,
        6846,6837,1,0,0,0,6846,6847,1,0,0,0,6847,597,1,0,0,0,6848,6850,7,
        95,0,0,6849,6848,1,0,0,0,6849,6850,1,0,0,0,6850,6851,1,0,0,0,6851,
        6857,5,150,0,0,6852,6853,5,190,0,0,6853,6855,5,1042,0,0,6854,6856,
        5,795,0,0,6855,6854,1,0,0,0,6855,6856,1,0,0,0,6856,6858,1,0,0,0,
        6857,6852,1,0,0,0,6857,6858,1,0,0,0,6858,599,1,0,0,0,820,603,618,
        630,633,640,643,651,655,658,665,668,681,685,690,694,701,705,714,
        722,730,738,745,753,757,761,768,771,779,787,797,803,808,816,826,
        831,833,843,847,857,860,865,876,880,883,894,906,917,921,932,935,
        942,945,953,957,963,970,979,984,988,992,999,1002,1011,1019,1027,
        1035,1038,1046,1055,1058,1070,1080,1086,1091,1099,1109,1112,1114,
        1119,1129,1133,1143,1146,1150,1160,1164,1175,1187,1316,1325,1334,
        1337,1343,1346,1353,1360,1367,1374,1379,1384,1389,1411,1420,1432,
        1442,1446,1449,1456,1461,1467,1471,1474,1476,1480,1483,1487,1494,
        1498,1510,1513,1516,1518,1522,1526,1528,1534,1542,1546,1550,1558,
        1561,1563,1568,1571,1575,1578,1582,1592,1595,1602,1605,1608,1611,
        1615,1618,1621,1625,1628,1632,1635,1639,1642,1645,1649,1652,1656,
        1659,1669,1672,1679,1687,1691,1698,1702,1706,1710,1719,1721,1725,
        1732,1734,1738,1743,1745,1752,1756,1758,1767,1774,1785,1793,1817,
        1822,1824,1847,1852,1857,1860,1866,1873,1886,1891,1896,1902,1934,
        1950,1956,1960,1965,1969,1974,1978,1983,1987,1992,1996,2001,2005,
        2009,2013,2018,2022,2026,2030,2034,2038,2042,2046,2050,2054,2058,
        2062,2066,2078,2083,2088,2093,2096,2103,2111,2117,2124,2128,2130,
        2134,2147,2150,2154,2160,2163,2167,2178,2180,2188,2199,2202,2206,
        2209,2215,2220,2225,2229,2239,2246,2253,2262,2265,2273,2284,2288,
        2294,2301,2303,2306,2309,2314,2316,2323,2329,2331,2340,2349,2360,
        2363,2375,2377,2388,2393,2396,2406,2410,2421,2428,2432,2435,2442,
        2446,2452,2466,2478,2482,2486,2492,2495,2499,2501,2505,2512,2518,
        2528,2533,2543,2553,2566,2569,2573,2578,2582,2585,2590,2597,2606,
        2609,2619,2622,2634,2641,2648,2655,2663,2680,2683,2686,2693,2700,
        2707,2714,2719,2726,2736,2751,2762,2771,2782,2789,2807,2817,2819,
        2824,2842,2853,2862,2869,2878,2882,2887,2891,2898,2902,2906,2909,
        2918,2921,2931,2944,2949,2963,2969,2973,2977,2988,3032,3038,3087,
        3092,3097,3101,3105,3113,3134,3136,3142,3146,3151,3155,3164,3189,
        3199,3210,3214,3219,3226,3234,3242,3246,3251,3253,3261,3268,3273,
        3275,3277,3281,3290,3295,3299,3303,3321,3331,3336,3345,3348,3352,
        3358,3363,3366,3370,3376,3381,3384,3388,3394,3399,3402,3406,3412,
        3417,3423,3427,3435,3440,3445,3450,3458,3463,3468,3472,3481,3487,
        3494,3501,3508,3515,3538,3549,3555,3563,3565,3581,3590,3593,3603,
        3612,3615,3620,3623,3627,3644,3678,3697,3731,3740,3755,3825,3865,
        3888,3898,3908,3919,3930,3939,3949,3951,3970,3972,3984,3986,4000,
        4002,4028,4040,4043,4049,4051,4060,4066,4069,4074,4079,4085,4096,
        4100,4112,4116,4140,4152,4156,4164,4166,4190,4195,4211,4214,4227,
        4247,4258,4270,4279,4285,4287,4291,4304,4336,4348,4363,4378,4386,
        4401,4411,4418,4434,4437,4446,4448,4461,4475,4489,4503,4515,4527,
        4536,4538,4558,4563,4576,4580,4595,4599,4604,4614,4622,4631,4633,
        4638,4645,4649,4656,4675,4687,4691,4694,4702,4712,4719,4724,4733,
        4738,4750,4757,4763,4768,4771,4776,4781,4784,4788,4791,4797,4808,
        4812,4815,4818,4826,4832,4836,4840,4843,4857,4866,4870,4873,4888,
        4894,4896,4908,4918,4928,4938,4940,4942,4947,4957,4959,4961,4966,
        4974,4979,4987,4989,4994,5002,5011,5019,5027,5037,5047,5063,5088,
        5093,5096,5103,5111,5129,5138,5141,5151,5162,5180,5205,5208,5222,
        5227,5243,5248,5264,5269,5278,5283,5296,5299,5320,5326,5339,5350,
        5362,5378,5390,5401,5403,5408,5424,5434,5443,5448,5455,5460,5471,
        5476,5489,5491,5493,5498,5507,5512,5531,5540,5542,5547,5573,5584,
        5595,5603,5606,5611,5614,5621,5624,5631,5636,5644,5651,5655,5658,
        5668,5690,5701,5703,5714,5719,5728,5733,5735,5743,5754,5757,5760,
        5770,5773,5777,5780,5784,5788,5796,5804,5814,5818,5822,5825,5832,
        5839,5842,5845,5848,5858,5862,5870,5880,5883,5891,5916,5920,5934,
        5937,5940,5957,5984,5993,5999,6006,6008,6017,6022,6033,6037,6059,
        6069,6075,6083,6090,6094,6102,6108,6111,6116,6122,6124,6130,6140,
        6144,6150,6158,6164,6167,6178,6188,6193,6196,6199,6206,6214,6218,
        6229,6239,6245,6330,6332,6339,6343,6348,6356,6359,6372,6380,6385,
        6389,6398,6411,6419,6427,6431,6438,6442,6462,6478,6481,6485,6492,
        6504,6509,6512,6522,6535,6548,6557,6561,6567,6570,6574,6581,6587,
        6591,6603,6618,6623,6627,6630,6634,6637,6643,6646,6650,6658,6669,
        6680,6687,6726,6734,6739,6743,6747,6751,6755,6758,6762,6765,6772,
        6778,6786,6791,6795,6803,6813,6824,6834,6841,6844,6846,6849,6855,
        6857
    ]

class TeradataSQLDCLParser ( Parser ):

    grammarFileName = "TeradataSQLDCLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ABORTSESSION'", "'ABS'", 
                     "'ACCESS_LOCK'", "'ACCOUNT'", "'ACOS'", "'ACOSH'", 
                     "'ADD'", "'ADD_MONTHS'", "'ADMIN'", "'AFTER'", "'AGGREGATE'", 
                     "'ALL'", "'ALTER'", "'AMP'", "'AND'", "'ANSIDATE'", 
                     "'ANY'", "'ARGLPAREN'", "'AS'", "'ASC'", "'ASIN'", 
                     "'ASINH'", "'AT'", "'ATAN'", "'ATAN2'", "'ATANH'", 
                     "'ATOMIC'", "'AUTHORIZATION'", "'AVE'", "'AVERAGE'", 
                     "'AVG'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BLOB'", "'BOTH'", "'BT'", "'BUT'", "'BY'", 
                     "'BYTE'", "'BYTEINT'", "'BYTES'", "'CALL'", "'CASE'", 
                     "'CASE_N'", "'CASESPECIFIC'", "'CAST'", "'CD'", "'CHAR'", 
                     "'CHAR_LENGTH'", "'CHAR2HEXINT'", "'CHARACTER'", "'CHARACTER_LENGTH'", 
                     "'CHARACTERS'", "'CHARS'", "'CHECK'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'CM'", 
                     "'COALESCE'", "'COLLATION'", "'COLLECT'", "'COLUMN'", 
                     "'COMMENT'", "'COMMIT'", "'COMPRESS'", "'CONNECT'", 
                     "'CONSTRAINT'", "'CONSTRUCTOR'", "'CONSUME'", "'CONTAINS'", 
                     "'CONTINUE'", "'CONVERT_TABLE_HEADER'", "'CORR'", "'COS'", 
                     "'COSH'", "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", 
                     "'CREATE'", "'CROSS'", "'CS'", "'CSUM'", "'CT'", "'CTCONTROL'", 
                     "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'CURSOR'", "'CV'", "'CYCLE'", "'DATABASE'", "'DATABLOCKSIZE'", 
                     "'DATE'", "'DATEFORM'", "'DAY'", "'DEALLOCATE'", "'DEC'", 
                     "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFERRED'", 
                     "'DEGREES'", "'DEL'", "'DELETE'", "'DESC'", "'DETERMINISTIC'", 
                     "'DIAGNOSTIC'", "'DICTIONARY'", "'DISABLED'", "'DISTINCT'", 
                     "'DO'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'DUAL'", 
                     "'DUMP'", "'DYNAMIC'", "'EACH'", "'ECHO'", "'ELSE'", 
                     "'ELSEIF'", "'ENABLED'", "'END'", "'EQ'", "'EQUALS'", 
                     "'ERROR'", "'ERRORFILES'", "'ERRORTABLES'", "'ESCAPE'", 
                     "'ET'", "'EXCEPT'", "'EXEC'", "'EXECUTE'", "'EXISTS'", 
                     "'EXIT'", "'EXP'", "'EXPAND'", "'EXPANDING'", "'EXPLAIN'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALLBACK'", "'FASTEXPORT'", 
                     "'FETCH'", "'FIRST'", "'FLOAT'", "'FLUSH'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FOUND'", "'FREESPACE'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONDESCRIPTOR'", 
                     "'GE'", "'GENERATED'", "'GET'", "'GIVE'", "'GRANT'", 
                     "'GRAPHIC'", "'GROUP'", "'GROUPING'", "'GT'", "'HANDLER'", 
                     "'HASH'", "'HASHAMP'", "'HASHBAKAMP'", "'HASHBUCKET'", 
                     "'HASHROW'", "'HAVING'", "'HELP'", "'HOUR'", "'ID2BIGINT'", 
                     "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IN'", "'INCONSISTENT'", 
                     "'INDEX'", "'INITIATE'", "'INNER'", "'INOUT'", "'INPUT'", 
                     "'INS'", "'INSERT'", "'INSTANCE'", "'INSTEAD'", "'INT'", 
                     "'INTEGER'", "'INTEGERDATE'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JAR'", "'JOIN'", "'JOURNAL'", 
                     "'KEY'", "'KURTOSIS'", "'LANGUAGE'", "'LARGE'", "'LE'", 
                     "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LN'", "'LOADING'", "'LOCAL'", "'LOCATOR'", "'LOCK'", 
                     "'LOCKING'", "'LOG'", "'LOGGING'", "'LOGON'", "'LONG'", 
                     "'LOOP'", "'LOWER'", "'LT'", "'MACRO'", "'MAP'", "'MAVG'", 
                     "'MAX'", "'MAXIMUM'", "'MCHARACTERS'", "'MDIFF'", "'MERGE'", 
                     "'METHOD'", "'MIN'", "'MINDEX'", "'MINIMUM'", "'MINUS'", 
                     "'MINUTE'", "'MLINREG'", "'MLOAD'", "'MOD'", "'MODE'", 
                     "'MODIFIES'", "'MODIFY'", "'MONITOR'", "'MONRESOURCE'", 
                     "'MONSESSION'", "'MONTH'", "'MSUBSTR'", "'MSUM'", "'MULTISET'", 
                     "'NAMED'", "'NATURAL'", "'NE'", "'NEW'", "'NEW_TABLE'", 
                     "'NEXT'", "'NO'", "'NONE'", "'NONTEMPORAL'", "'NORMALIZE'", 
                     "'NOT'", "'NOWAIT'", "'NULL'", "'NULLIF'", "'NULLIFZERO'", 
                     "'NUMBER'", "'NUMERIC'", "'OBJECT'", "'OBJECTS'", "'OCTET_LENGTH'", 
                     "'OF'", "'OFF'", "'OLD'", "'OLD_TABLE'", "'ON'", "'ONLY'", 
                     "'OPEN'", "'OPTION'", "'OR'", "'ORDER'", "'ORDERING'", 
                     "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERRIDE'", 
                     "'PARAMETER'", "'PASSWORD'", "'PERCENT'", "'PERCENT_RANK'", 
                     "'PERM'", "'PERMANENT'", "'POSITION'", "'PRECISION'", 
                     "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRIVILEGES'", 
                     "'PROCEDURE'", "'PROFILE'", "'PROTECTION'", "'PUBLIC'", 
                     "'QUALIFIED'", "'QUALIFY'", "'QUANTILE'", "'QUEUE'", 
                     "'RADIANS'", "'RANDOM'", "'RANGE_N'", "'RANK'", "'READS'", 
                     "'REAL'", "'RECURSIVE'", "'REFERENCES'", "'REFERENCING'", 
                     "'REGR_AVGX'", "'REGR_AVGY'", "'REGR_COUNT'", "'REGR_INTERCEPT'", 
                     "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", "'REGR_SXY'", 
                     "'REGR_SYY'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REPLCONTROL'", "'REPLICATION'", 
                     "'REQUEST'", "'RESIGNAL'", "'RESTART'", "'RESTORE'", 
                     "'RESULT'", "'RESUME'", "'RET'", "'RETRIEVE'", "'RETURN'", 
                     "'RETURNS'", "'REVALIDATE'", "'REVOKE'", "'RIGHT'", 
                     "'RIGHTS'", "'ROLE'", "'ROLLBACK'", "'ROLLFORWARD'", 
                     "'ROLLUP'", "'ROW'", "'ROW_NUMBER'", "'ROWID'", "'ROWS'", 
                     "'SAMPLE'", "'SAMPLEID'", "'SCROLL'", "'SECOND'", "'SEL'", 
                     "'SELECT'", "'SESSION'", "'SET'", "'SETRESRATE'", "'SETS'", 
                     "'SETSESSRATE'", "'SHOW'", "'SIGNAL'", "'SIN'", "'SINH'", 
                     "'SKEW'", "'SMALLINT'", "'SOME'", "'SOUNDEX'", "'SPECIFIC'", 
                     "'SPOOL'", "'SQL'", "'SQLEXCEPTION'", "'SQLTEXT'", 
                     "'SQLWARNING'", "'SQRT'", "'SS'", "'START'", "'STARTUP'", 
                     "'STATEMENT'", "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
                     "'STEPINFO'", "'STRING_CS'", "'SUBSCRIBER'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SUM'", "'SUMMARY'", "'SUSPEND'", "'TABLE'", 
                     "'TAN'", "'TANH'", "'TBL_CS'", "'TD_ANYTYPE'", "'TD_AUTHID'", 
                     "'TD_HOST'", "'TD_ROWLOADID'", "'TD_ROWREVISION'", 
                     "'TD_ROWSIZE'", "'TD_VALIST'", "'TEMPORARY'", "'TERMINATE'", 
                     "'THEN'", "'THRESHOLD'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE_HOUR'", 
                     "'TIMEZONE_MINUTE'", "'TITLE'", "'TO'", "'TOP'", "'TRACE'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONTIME'", 
                     "'TRANSFORM'", "'TRANSLATE'", "'TRANSLATE_CHK'", "'TRIGGER'", 
                     "'TRIM'", "'TYPE'", "'UC'", "'UDTCASTAS'", "'UDTCASTLPAREN'", 
                     "'UDTMETHOD'", "'UDTTYPE'", "'UDTUSAGE'", "'UESCAPE'", 
                     "'UNDEFINED'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNTIL'", 
                     "'UNTIL_CHANGED'", "'UNTIL_CLOSED'", "'UPD'", "'UPDATE'", 
                     "'UPPER'", "'UPPERCASE'", "'USER'", "'USING'", "'VALIDTIME'", 
                     "'VALUE'", "'VALUES'", "'VAR_POP'", "'VAR_SAMP'", "'VARBYTE'", 
                     "'VARCHAR'", "'VARGRAPHIC'", "'VARIANT_TYPE'", "'VARYING'", 
                     "'VIEW'", "'VOLATILE'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WIDTH_BUCKET'", "'WITH'", "'WITHOUT'", "'WORK'", 
                     "'XMLPLAN'", "'YEAR'", "'ZEROIFNULL'", "'ZONE'", "'ALIAS'", 
                     "'DESCRIPTOR'", "'GO'", "'GOTO'", "'INDICATOR'", "'PRIVATE'", 
                     "'WAIT'", "'AbortSessions'", "'ABSENT'", "'ACCESS'", 
                     "'ACCORDING'", "'ACCUMULATE'", "'AG'", "'AggGeomIntersection'", 
                     "'AggGeomUnion'", "'ALLDBQL'", "'ALLOCATE'", "'ALLOCATION'", 
                     "'ALLOW'", "'ALLPARAMS'", "'ALLTDWM'", "'ALWAYS'", 
                     "'AMPCOUNT'", "'ANALYSIS'", "'ANCHOR'", "'ANCHOR_HOUR'", 
                     "'ANCHOR_MILLISECOND'", "'ANCHOR_MINUTE'", "'ANCHOR_SECOND'", 
                     "'APPLNAME'", "'ARCHIVE'", "'ARRAY'", "'ARRAY_ADD'", 
                     "'ARRAY_AGG'", "'ARRAY_AVG'", "'ARRAY_COMPARE'", "'ARRAY_CONCAT'", 
                     "'ARRAY_COUNT_DISTINCT'", "'ARRAY_DIV'", "'ARRAY_EQ'", 
                     "'ARRAY_GE'", "'ARRAY_GET'", "'ARRAY_GT'", "'ARRAY_LE'", 
                     "'ARRAY_LT'", "'ARRAY_MAX'", "'ARRAY_MIN'", "'ARRAY_MOD'", 
                     "'ARRAY_MUL'", "'ARRAY_NE'", "'ARRAY_SUB'", "'ARRAY_SUM'", 
                     "'ARRAY_UPDATE'", "'ARRAY_UPDATE_STRIDE'", "'ASCII'", 
                     "'ASSIGNMENT'", "'ATTR'", "'ATTRIBUTE'", "'ATTRIBUTES'", 
                     "'ATTRIBUTION'", "'ATTRS'", "'AUTH'", "'AUTO'", "'AUTOTEMP'", 
                     "'AVRO'", "'BIT_LENGTH'", "'BITAND'", "'BITNOT'", "'BITOR'", 
                     "'BITXOR'", "'BLOCKCOMPRESSION'", "'BLOCKCOMPRESSIONALGORITHM'", 
                     "'BLOCKCOMPRESSIONLEVEL'", "'BOM'", "'BOTTOM'", "'BSON'", 
                     "'C'", "'CALENDAR'", "'CALLED'", "'CALLER'", "'camset'", 
                     "'camset_l'", "'CAPTURE'", "'CARDINALITY'", "'CEIL'", 
                     "'CEILING'", "'CHANGERATE'", "'CHARACTERISTICS'", "'CHARSET'", 
                     "'CHARSET_COLL'", "'CHECKSUM'", "'CHR'", "'CLASS_ORIGIN'", 
                     "'CLICKLAG'", "'CLIENT'", "'CNT'", "'COLOCATE'", "'COLUMNMETA'", 
                     "'COLUMNS'", "'COLUMNSPERINDEX'", "'COLUMNSPERJOININDEX'", 
                     "'COMMAND_FUNCTION'", "'COMMAND_FUNCTION_CODE'", "'COMPARISON'", 
                     "'COMPILE'", "'CONCAT'", "'CONCURRENT'", "'CONDITION'", 
                     "'CONDITION_IDENTIFIER'", "'CONDITION_NUMBER'", "'CONTAINED'", 
                     "'CONTAINEDTOKEN'", "'CONTENT'", "'CONTIGUOUS'", "'COST'", 
                     "'COSTS'", "'COUNTSET'", "'CPP'", "'CPUTIME'", "'CPUTIMENORM'", 
                     "'CREATEDATASET'", "'CREATOR'", "'CUME_DIST'", "'CURDATE'", 
                     "'CURTIME'", "'DATA'", "'DATASET'", "'day_of_calendar'", 
                     "'day_of_month'", "'day_of_week'", "'day_of_year'", 
                     "'DayNumber_Of_Calendar'", "'DayNumber_Of_Month'", 
                     "'DayNumber_Of_Week'", "'DayNumber_Of_Year'", "'DayOccurrence_Of_Month'", 
                     "'DBA'", "'DBC'", "'DEBUG'", "'decamset'", "'decamset_l'", 
                     "'DECODE'", "'DECOMPRESS'", "'DEFINER'", "'DELIMITER'", 
                     "'DELTA_T'", "'DEMOGRAPHICS'", "'DENIALS'", "'DENSE'", 
                     "'DENSE_RANK'", "'DESCRIBE'", "'DETAILED'", "'DIAGNOSTICS'", 
                     "'DIGITS'", "'DIMENSION'", "'DOCUMENT'", "'DOT'", "'DOWN'", 
                     "'DR'", "'DUPCOUNT'", "'DUPCOUNTCUM'", "'EBCDIC'", 
                     "'EDITDISTANCE'", "'ELAPSEDSEC'", "'ELAPSEDTIME'", 
                     "'ELEMENT'", "'ELZS_H'", "'EMITNULL'", "'EMPTY'", "'EMPTY_BLOB'", 
                     "'EMPTY_CLOB'", "'ENCODE'", "'ENCODING'", "'ENCRYPT'", 
                     "'ERRORS'", "'ERRORTBL'", "'EVENTCOLUMN'", "'EXCEPTION'", 
                     "'EXCL'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXPORTWIDTH'", "'FALSE'", 
                     "'FEATUREINFO'", "'FILE'", "'FILL'", "'FILTER'", "'FINAL'", 
                     "'FIRST_NOTNULL'", "'FIRST_VALUE'", "'FLOOR'", "'FOLLOWING'", 
                     "'FOREIGNFUNCTION'", "'FORTOKEN'", "'FRIDAY'", "'FROM_BYTES'", 
                     "'FUNCTIONPARAMETER'", "'G'", "'GETBIT'", "'GetPSFVersion'", 
                     "'GetQueryBand'", "'GetQueryBandValue'", "'GetTimeZoneDisplacement'", 
                     "'GLOBAL'", "'GLOP'", "'Greatest'", "'HIGH'", "'HOST'", 
                     "'IdentifyDatabase'", "'IdentifySession'", "'IdentifyTable'", 
                     "'IdentifyUser'", "'IFP'", "'IGNORE'", "'IMMEDIATELY'", 
                     "'IMPORT'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDENT'", "'INDEXESPERTABLE'", "'INDEXMAINTMODE'", 
                     "'INIT'", "'INITCAP'", "'INLINE'", "'INSTANTIABLE'", 
                     "'INSTR'", "'INTERNAL'", "'INVOKER'", "'IOCOUNT'", 
                     "'IPARTITION'", "'ISOLATED'", "'ISOLATION'", "'JAVA'", 
                     "'JIS_COLL'", "'JSON'", "'JSON_AGG'", "'JSON_COMPOSE'", 
                     "'K'", "'KANJI1'", "'KANJISJIS'", "'KBYTE'", "'KBYTES'", 
                     "'KEEP'", "'KILOBYTES'", "'LAG'", "'LAST'", "'Last_Day'", 
                     "'LAST_NOTNULL'", "'LAST_VALUE'", "'LATIN'", "'LDIFF'", 
                     "'LEAD'", "'Least'", "'LENGTH'", "'LEVEL'", "'LIST'", 
                     "'LOAD'", "'LOCATE'", "'LOCKEDUSEREXPIRE'", "'LOW'", 
                     "'LPAD'", "'LTRIM'", "'lzcomp'", "'lzcomp_L'", "'lzdecomp'", 
                     "'lzdecomp_L'", "'M'", "'MAD'", "'MANUAL'", "'MAPPING'", 
                     "'MATCHED'", "'MAX_CHOOSE'", "'MAXCHAR'", "'MAXINTERVALS'", 
                     "'MAXLOGONATTEMPTS'", "'MAXVALUE'", "'MAXVALUELENGTH'", 
                     "'MEDIAN'", "'MEDIUM'", "'MEETS'", "'MEMBER'", "'MERGEBLOCKRATIO'", 
                     "'MESSAGE_LENGTH'", "'MESSAGE_TEXT'", "'MIN_CHOOSE'", 
                     "'MINCHAR'", "'MINVALUE'", "'MODIFIED'", "'MONDAY'", 
                     "'MonitorQueryBand'", "'MonitorSessionRate'", "'MonitorVersion'", 
                     "'MONTH_BEGIN'", "'MONTH_END'", "'month_of_calendar'", 
                     "'month_of_quarter'", "'month_of_year'", "'MonthNumber_Of_Calendar'", 
                     "'MonthNumber_Of_Quarter'", "'MonthNumber_Of_Year'", 
                     "'Months_Between'", "'MORE'", "'MULTINATIONAL'", "'NAME'", 
                     "'NAMESPACE'", "'NEVER'", "'NEXT_DAY'", "'NGRAM'", 
                     "'NIL'", "'NODDLTEXT'", "'NODE'", "'NONOPTCOST'", "'NONOPTINIT'", 
                     "'NONSEQUENCED'", "'NORIGHT'", "'NOSEXTRACTVARFROMPATH'", 
                     "'NOTATION'", "'NOW'", "'NPATH'", "'NTH'", "'NULLS'", 
                     "'NUMFPFNS'", "'NUMTODSINTERVAL'", "'NUMTOYMINTERVAL'", 
                     "'nvl'", "'nvl2'", "'NVP'", "'OA'", "'OAdd_Months'", 
                     "'OCOUNT'", "'ODELETE'", "'OEXISTS'", "'OEXTEND'", 
                     "'OFIRST'", "'OLAST'", "'OLD_NEW_TABLE'", "'OLIMIT'", 
                     "'ONEXT'", "'ONLINE'", "'OPRIOR'", "'OPTIONS'", "'ORDERBYVALUES'", 
                     "'ORDERED_ANALYTIC'", "'ORDINALITY'", "'OREPLACE'", 
                     "'OTRANSLATE'", "'OTRIM'", "'OVERLAYS'", "'OWNER'", 
                     "'P_INTERSECT'", "'P_NORMALIZE'", "'PARAMID'", "'PARAMINFO'", 
                     "'PARENT'", "'PARTITION'", "<INVALID>", "'PARTITIONED'", 
                     "'PARTITIONNAMES'", "'PASS'", "'PASSING'", "'PATH_GENERATOR'", 
                     "'PATH_START'", "'PATH_SUMMARIZER'", "'PATTERN'", "'PERCENTILE'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERIOD'", 
                     "'PIVOT'", "'PORTION'", "'POWER'", "'PRECEDES'", "'PRECEDING'", 
                     "'PREFIX'", "'PRINT'", "'PRIOR'", "'PROTECTED'", "'QUARTER_BEGIN'", 
                     "'QUARTER_END'", "'quarter_of_calendar'", "'quarter_of_year'", 
                     "'QuarterNumber_Of_Calendar'", "'QuarterNumber_Of_Year'", 
                     "'QUERY'", "'QUERY_BAND'", "'QUOTECHAR'", "'RANDOMIZED'", 
                     "'RANGE'", "<INVALID>", "'RAPIDFIRE'", "'RDIFF'", "'READ'", 
                     "'RECALC'", "'regexp_instr'", "'regexp_replace'", "'regexp_similar'", 
                     "'regexp_substr'", "'REPLACEMENT'", "'RESET'", "'RESPECT'", 
                     "'RESTRICTWORDS'", "'RETAIN'", "'RETURNED_SQLSTATE'", 
                     "'RETURNING'", "'REUSE'", "'ROOT'", "'ROTATELEFT'", 
                     "'ROTATERIGHT'", "'Round'", "'ROW_COUNT'", "'ROWIDGEN'", 
                     "'ROWIDGEN2'", "'RPAD'", "'RTRIM'", "'RU'", "'RULES'", 
                     "'RULESET'", "'SAMPLES'", "'SATURDAY'", "'SCHEMA'", 
                     "'SCRIPT'", "'SCRIPT_COMMAND'", "'SEARCHSPACE'", "'SEARCHUIFDBPATH'", 
                     "'SECURITY'", "'SEED'", "'SELF'", "'SEQ'", "'SEQUENCE'", 
                     "'SEQUENCED'", "'SERIALIZABLE'", "'SERVER'", "'SESSIONIZE'", 
                     "'SETBIT'", "'SetResourceRate'", "'SetSessionAccount'", 
                     "'SetSessionRate'", "'SHARE'", "'SHIFTLEFT'", "'SHIFTRIGHT'", 
                     "'SIGN'", "'SIZE'", "'SNAPPY_COMPRESS'", "'SNAPPY_DECOMPRESS'", 
                     "'SOURCE'", "'SPARSE'", "'SPECCHAR'", "'SPL'", "'SQLSTATE'", 
                     "'SR'", "'ST_GEOMETRY'", "'STAT'", "'STATIC'", "'STATS'", 
                     "'STATSUSAGE'", "'STORAGE'", "'STRIP'", "'STRTOK'", 
                     "'STYLE'", "'SUBBITSTR'", "'SUBCLASS_ORIGIN'", "'SUCCEEDS'", 
                     "'SUMMARYONLY'", "'SUNDAY'", "'SYMBOLS'", "'SYSTEM'", 
                     "'SYSTEM_TIME'", "'SYSTEMTEST'", "'TARGET'", "'TD_ARRAY2P'", 
                     "'TD_DATASET'", "'td_day_of_calendar'", "'td_day_of_month'", 
                     "'td_day_of_week'", "'td_day_of_year'", "'TD_GENERAL'", 
                     "'TD_GETTIMEBUCKET'", "'TD_INTERNAL'", "'TD_LZ_COMPRESS'", 
                     "'TD_LZ_DECOMPRESS'", "'td_month_of_calendar'", "'td_month_of_quarter'", 
                     "'td_month_of_year'", "'td_quarter_of_calendar'", "'td_quarter_of_year'", 
                     "'TD_TIME_BUCKET_NUMBER'", "'td_week_of_calendar'", 
                     "'td_week_of_month'", "'td_week_of_year'", "'td_weekday_of_month'", 
                     "'td_year_of_calendar'", "'TDWMEVENT'", "'TDWMEXCEPTION'", 
                     "'TDWMHISTORY'", "'TEMPORAL_DATE'", "'TEMPORAL_TIMESTAMP'", 
                     "'TEXT'", "'THRESHOLDPERCENT'", "'THROUGH'", "'THURSDAY'", 
                     "'TIES'", "'TIMECODE'", "'TIMECOLUMN'", "'TIMEOUT'", 
                     "'TIMESTAMPCOLUMN'", "'TO_BYTE'", "'TO_BYTES'", "'TO_CHAR'", 
                     "'TO_DATE'", "'TO_DSINTERVAL'", "'TO_NUMBER'", "'TO_TIMESTAMP'", 
                     "'TO_TIMESTAMP_TZ'", "'TO_YMINTERVAL'", "'TOTOKEN'", 
                     "'TPA'", "'TRANSACTION_ACTIVE'", "'TransUnicodeToUTF8'", 
                     "'TransUTF8ToUnicode'", "'TRUE'", "'Trunc'", "'TRUST_ONLY'", 
                     "'TTGRANULARITY'", "'TUESDAY'", "'UBJSON'", "'UCASE'", 
                     "'UDFSEARCHPATH'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNICODE'", "'UNKNOWN'", "'UNPIVOT'", "'USE'", "'USECOUNT'", 
                     "'UTILITYINFO'", "'VARRAY'", "'VERBOSE'", "'VERSION'", 
                     "'VERSIONING'", "'WARNING'", "'WEDNESDAY'", "'WEEK_BEGIN'", 
                     "'WEEK_END'", "'week_of_calendar'", "'week_of_month'", 
                     "'week_of_year'", "'weekday_of_month'", "'WeekNumber_Of_Calendar'", 
                     "'WeekNumber_Of_Month'", "'WeekNumber_Of_Quarter'", 
                     "'WeekNumber_Of_Year'", "'WHITESPACE'", "'WINDOWSIZE'", 
                     "'WITHIN'", "'WORKLOAD'", "'WRITE'", "'XML'", "'XMLAGG'", 
                     "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLCONCAT'", "'XMLDECLARATION'", 
                     "'XMLDOCUMENT'", "'XMLELEMENT'", "'XMLFOREST'", "'XMLNAMESPACES'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLSCHEMA'", 
                     "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTEXT'", "'XMLTYPE'", 
                     "'XMLVALIDATE'", "'YEAR_BEGIN'", "'YEAR_END'", "'year_of_calendar'", 
                     "'YearNumber_Of_Calendar'", "'ZLIB'", "'BUCKET'", "'COMMITTED'", 
                     "'CREATEXML'", "'_LATIN'", "'_UNICODE'", "'_KANJISJIS'", 
                     "'_GRAPHIC'", "'CSV'", "'CSVLD'", "'DATASIZE'", "'DAYOFMONTH'", 
                     "'DAYS'", "'DEFINITION'", "'DELETED'", "'FAST'", "'LISTAGG'", 
                     "'PATH'", "'REGEXP_SPLIT_TO_TABLE'", "'REVERSE'", "'SAS'", 
                     "'SQLTABLE'", "'STRTOK_SPLIT_TO_TABLE'", "'SYSLIB'", 
                     "'SYSUDTLIB'", "'TD_SERVER_DB'", "'TD_SYSFNLIB'", "'TD_SYSXML'", 
                     "'TIMEDATEWZCONTROL'", "'TRUST'", "'TRYCAST'", "'UDT'", 
                     "'USAGE'", "'VARIANT'", "'WEEK'", "'WIDTH'", "'XMLPUBLISH'", 
                     "'XMLPUBLISH_STREAM'", "'XMLSPLIT'", "'LATIN_TO_UNICODE'", 
                     "'UNICODE_TO_LATIN'", "'LOCALE_TO_UNICODE'", "'UNICODE_TO_LOCALE'", 
                     "'ASBSON'", "'ASBSONTEXT'", "'COMBINE'", "'EXISTVALUE'", 
                     "'JSONEXTRACT'", "'JSONEXTRACTVALUE'", "'JSONEXTRACTLARGEVALUE'", 
                     "'KEYCOUNT'", "'METADATA'", "'STORAGE_SIZE'", "'CREATESCHEMABASEDXML'", 
                     "'CREATENONSCHEMABASEDXML'", "'EXISTSNODE'", "'ISCONTENT'", 
                     "'ISDOCUMENT'", "'ISSCHEMAVALID'", "'ISSCHEMAVALIDATED'", 
                     "'XMLEXTRACT'", "'XMLTRANSFORM'", "'PROC_ID'", "'LOCATION'", 
                     "'PAYLOAD'", "'TRUSTED'", "'PATHPATTERN'", "'MANIFEST'", 
                     "'ROWFORMAT'", "'STOREDAS'", "'HEADER'", "'STRIP_EXTERIOR_SPACES'", 
                     "'STRIP_ENCLOSING_CHAR'", "'RLS'", "'SINGLE'", "'MULTIPLE'", 
                     "'JSON_COMPRESS'", "'JSON_DECOMPRESS'", "'TS_COMPRESS'", 
                     "'TS_DECOMPRESS'", "'CONTIGUOUSMAPAMPS'", "'SPARSEMAPAMPS'", 
                     "'SPARSETABLEAMPS'", "'UNNEST'", "'CALCMATRIX'", "'PHRASE'", 
                     "'CALCTYPE'", "'OUTPUT'", "'NULL_HANDLING'", "'READ_NOS'", 
                     "'BUFFERSIZE'", "'RETURNTYPE'", "'SAMPLE_PERC'", "'FULLSCAN'", 
                     "'TD_UNPIVOT'", "'VALUE_COLUMNS'", "'UNPIVOT_COLUMN'", 
                     "'COLUMN_LIST'", "'COLUMN_ALIAS_LIST'", "'INCLUDE_NULLS'", 
                     "'WRITE_NOS'", "'NAMING'", "'MANIFESTFILE'", "'MANIFESTONLY'", 
                     "'OVERWRITE'", "'INCLUDE_ORDERING'", "'INCLUDE_HASHBY'", 
                     "'MAXOBJECTSIZE'", "'COMPRESSION'", "'ARRAY_TO_JSON'", 
                     "'BSON_CHECK'", "'GEOJSONFROMGEOM'", "'GEOMFROMGEOJSON'", 
                     "'JSON_CHECK'", "'JSONGETVALUE'", "'JSONMETADATA'", 
                     "'NVP2JSON'", "'TD_JSONSHRED'", "'JSON_KEYS'", "'JSON_TABLE'", 
                     "'DEPTH'", "'QUOTES'", "'ROWEXPR'", "'COLEXPR'", "'RETURNTYPES'", 
                     "'NOCASE'", "'TRUNCATE'", "'LINK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'.'", "'@'", "'^'", "'?'", "'('", "')'", "'['", 
                     "']'", "'||'", "'\\u00A6\\u00A6'", "'*'", "'/'", "'+'", 
                     "'-'", "'**'", "'='", "'<>'", "'^='", "'<'", "'<='", 
                     "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>", "ABORT", "ABORTSESSION", "ABS", "ACCESS_LOCK", 
                      "ACCOUNT", "ACOS", "ACOSH", "ADD", "ADD_MONTHS", "ADMIN", 
                      "AFTER", "AGGREGATE", "ALL", "ALTER", "AMP", "AND", 
                      "ANSIDATE", "ANY", "ARGLPAREN", "AS", "ASC", "ASIN", 
                      "ASINH", "AT", "ATAN", "ATAN2", "ATANH", "ATOMIC", 
                      "AUTHORIZATION", "AVE", "AVERAGE", "AVG", "BEFORE", 
                      "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", 
                      "BT", "BUT", "BY", "BYTE", "BYTEINT", "BYTES", "CALL", 
                      "CASE", "CASE_N", "CASESPECIFIC", "CAST", "CD", "CHAR", 
                      "CHAR_LENGTH", "CHAR2HEXINT", "CHARACTER", "CHARACTER_LENGTH", 
                      "CHARACTERS", "CHARS", "CHECK", "CHECKPOINT", "CLASS", 
                      "CLOB", "CLOSE", "CLUSTER", "CM", "COALESCE", "COLLATION", 
                      "COLLECT", "COLUMN", "COMMENT", "COMMIT", "COMPRESS", 
                      "CONNECT", "CONSTRAINT", "CONSTRUCTOR", "CONSUME", 
                      "CONTAINS", "CONTINUE", "CONVERT_TABLE_HEADER", "CORR", 
                      "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", 
                      "CREATE", "CROSS", "CS", "CSUM", "CT", "CTCONTROL", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "CV", "CYCLE", "DATABASE", "DATABLOCKSIZE", 
                      "DATE", "DATEFORM", "DAY", "DEALLOCATE", "DEC", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRED", "DEGREES", "DEL", 
                      "DELETE", "DESC", "DETERMINISTIC", "DIAGNOSTIC", "DICTIONARY", 
                      "DISABLED", "DISTINCT", "DO", "DOMAIN", "DOUBLE", 
                      "DROP", "DUAL", "DUMP", "DYNAMIC", "EACH", "ECHO", 
                      "ELSE", "ELSEIF", "ENABLED", "END", "EQ", "EQUALS", 
                      "ERROR", "ERRORFILES", "ERRORTABLES", "ESCAPE", "ET", 
                      "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXPAND", "EXPANDING", "EXPLAIN", "EXTERNAL", "EXTRACT", 
                      "FALLBACK", "FASTEXPORT", "FETCH", "FIRST", "FLOAT", 
                      "FLUSH", "FOR", "FOREIGN", "FORMAT", "FOUND", "FREESPACE", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONDESCRIPTOR", 
                      "GE", "GENERATED", "GET", "GIVE", "GRANT", "GRAPHIC", 
                      "GROUP", "GROUPING", "GT", "HANDLER", "HASH", "HASHAMP", 
                      "HASHBAKAMP", "HASHBUCKET", "HASHROW", "HAVING", "HELP", 
                      "HOUR", "ID2BIGINT", "IDENTITY", "IF", "IMMEDIATE", 
                      "IN", "INCONSISTENT", "INDEX", "INITIATE", "INNER", 
                      "INOUT", "INPUT", "INS", "INSERT", "INSTANCE", "INSTEAD", 
                      "INT", "INTEGER", "INTEGERDATE", "INTERSECT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JAR", "JOIN", "JOURNAL", 
                      "KEY", "KURTOSIS", "LANGUAGE", "LARGE", "LE", "LEADING", 
                      "LEAVE", "LEFT", "LIKE", "LIMIT", "LN", "LOADING", 
                      "LOCAL", "LOCATOR", "LOCK", "LOCKING", "LOG", "LOGGING", 
                      "LOGON", "LONG", "LOOP", "LOWER", "LT", "MACRO", "MAP", 
                      "MAVG", "MAX", "MAXIMUM", "MCHARACTERS", "MDIFF", 
                      "MERGE", "METHOD", "MIN", "MINDEX", "MINIMUM", "MINUS", 
                      "MINUTE", "MLINREG", "MLOAD", "MOD", "MODE", "MODIFIES", 
                      "MODIFY", "MONITOR", "MONRESOURCE", "MONSESSION", 
                      "MONTH", "MSUBSTR", "MSUM", "MULTISET", "NAMED", "NATURAL", 
                      "NE", "NEW", "NEW_TABLE", "NEXT", "NO", "NONE", "NONTEMPORAL", 
                      "NORMALIZE", "NOT", "NOWAIT", "NULL", "NULLIF", "NULLIFZERO", 
                      "NUMBER", "NUMERIC", "OBJECT", "OBJECTS", "OCTET_LENGTH", 
                      "OF", "OFF", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "ORDERING", "OUT", "OUTER", 
                      "OVER", "OVERLAPS", "OVERRIDE", "PARAMETER", "PASSWORD", 
                      "PERCENT", "PERCENT_RANK", "PERM", "PERMANENT", "POSITION", 
                      "PRECISION", "PREPARE", "PRESERVE", "PRIMARY", "PRIVILEGES", 
                      "PROCEDURE", "PROFILE", "PROTECTION", "PUBLIC", "QUALIFIED", 
                      "QUALIFY", "QUANTILE", "QUEUE", "RADIANS", "RANDOM", 
                      "RANGE_N", "RANK", "READS", "REAL", "RECURSIVE", "REFERENCES", 
                      "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
                      "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
                      "REGR_SXY", "REGR_SYY", "RELATIVE", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REPLCONTROL", "REPLICATION", 
                      "REQUEST", "RESIGNAL", "RESTART", "RESTORE", "RESULT", 
                      "RESUME", "RET", "RETRIEVE", "RETURN", "RETURNS", 
                      "REVALIDATE", "REVOKE", "RIGHT", "RIGHTS", "ROLE", 
                      "ROLLBACK", "ROLLFORWARD", "ROLLUP", "ROW", "ROW_NUMBER", 
                      "ROWID", "ROWS", "SAMPLE", "SAMPLEID", "SCROLL", "SECOND", 
                      "SEL", "SELECT", "SESSION", "SET", "SETRESRATE", "SETS", 
                      "SETSESSRATE", "SHOW", "SIGNAL", "SIN", "SINH", "SKEW", 
                      "SMALLINT", "SOME", "SOUNDEX", "SPECIFIC", "SPOOL", 
                      "SQL", "SQLEXCEPTION", "SQLTEXT", "SQLWARNING", "SQRT", 
                      "SS", "START", "STARTUP", "STATEMENT", "STATISTICS", 
                      "STDDEV_POP", "STDDEV_SAMP", "STEPINFO", "STRING_CS", 
                      "SUBSCRIBER", "SUBSTR", "SUBSTRING", "SUM", "SUMMARY", 
                      "SUSPEND", "TABLE", "TAN", "TANH", "TBL_CS", "TD_ANYTYPE", 
                      "TD_AUTHID", "TD_HOST", "TD_ROWLOADID", "TD_ROWREVISION", 
                      "TD_ROWSIZE", "TD_VALIST", "TEMPORARY", "TERMINATE", 
                      "THEN", "THRESHOLD", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TITLE", "TO", "TOP", "TRACE", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONTIME", "TRANSFORM", 
                      "TRANSLATE", "TRANSLATE_CHK", "TRIGGER", "TRIM", "TYPE", 
                      "UC", "UDTCASTAS", "UDTCASTLPAREN", "UDTMETHOD", "UDTTYPE", 
                      "UDTUSAGE", "UESCAPE", "UNDEFINED", "UNDO", "UNION", 
                      "UNIQUE", "UNTIL", "UNTIL_CHANGED", "UNTIL_CLOSED", 
                      "UPD", "UPDATE", "UPPER", "UPPERCASE", "USER", "USING", 
                      "VALIDTIME", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", 
                      "VARBYTE", "VARCHAR", "VARGRAPHIC", "VARIANT_TYPE", 
                      "VARYING", "VIEW", "VOLATILE", "WHEN", "WHERE", "WHILE", 
                      "WIDTH_BUCKET", "WITH", "WITHOUT", "WORK", "XMLPLAN", 
                      "YEAR", "ZEROIFNULL", "ZONE", "ALIAS", "DESCRIPTOR", 
                      "GO", "GOTO", "INDICATOR", "PRIVATE", "WAIT", "ABORTSESSIONS", 
                      "ABSENT", "ACCESS", "ACCORDING", "ACCUMULATE", "AG", 
                      "AGGGEOMINTERSECTION", "AGGGEOMUNION", "ALLDBQL", 
                      "ALLOCATE", "ALLOCATION", "ALLOW", "ALLPARAMS", "ALLTDWM", 
                      "ALWAYS", "AMPCOUNT", "ANALYSIS", "ANCHOR", "ANCHOR_HOUR", 
                      "ANCHOR_MILLISECOND", "ANCHOR_MINUTE", "ANCHOR_SECOND", 
                      "APPLNAME", "ARCHIVE", "ARRAY", "ARRAY_ADD", "ARRAY_AGG", 
                      "ARRAY_AVG", "ARRAY_COMPARE", "ARRAY_CONCAT", "ARRAY_COUNT_DISTINCT", 
                      "ARRAY_DIV", "ARRAY_EQ", "ARRAY_GE", "ARRAY_GET", 
                      "ARRAY_GT", "ARRAY_LE", "ARRAY_LT", "ARRAY_MAX", "ARRAY_MIN", 
                      "ARRAY_MOD", "ARRAY_MUL", "ARRAY_NE", "ARRAY_SUB", 
                      "ARRAY_SUM", "ARRAY_UPDATE", "ARRAY_UPDATE_STRIDE", 
                      "ASCII", "ASSIGNMENT", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                      "ATTRIBUTION", "ATTRS", "AUTH", "AUTO", "AUTOTEMP", 
                      "AVRO", "BIT_LENGTH", "BITAND", "BITNOT", "BITOR", 
                      "BITXOR", "BLOCKCOMPRESSION", "BLOCKCOMPRESSIONALGORITHM", 
                      "BLOCKCOMPRESSIONLEVEL", "BOM", "BOTTOM", "BSON", 
                      "C", "CALENDAR", "CALLED", "CALLER", "CAMSET", "CAMSET_L", 
                      "CAPTURE", "CARDINALITY", "CEIL", "CEILING", "CHANGERATE", 
                      "CHARACTERISTICS", "CHARSET", "CHARSET_COLL", "CHECKSUM", 
                      "CHR", "CLASS_ORIGIN", "CLICKLAG", "CLIENT", "CNT", 
                      "COLOCATE", "COLUMNMETA", "COLUMNS", "COLUMNSPERINDEX", 
                      "COLUMNSPERJOININDEX", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
                      "COMPARISON", "COMPILE", "CONCAT", "CONCURRENT", "CONDITION", 
                      "CONDITION_IDENTIFIER", "CONDITION_NUMBER", "CONTAINED", 
                      "CONTAINEDTOKEN", "CONTENT", "CONTIGUOUS", "COST", 
                      "COSTS", "COUNTSET", "CPP", "CPUTIME", "CPUTIMENORM", 
                      "CREATEDATASET", "CREATOR", "CUME_DIST", "CURDATE", 
                      "CURTIME", "DATA", "DATASET", "DAY_OF_CALENDAR", "DAY_OF_MONTH", 
                      "DAY_OF_WEEK", "DAY_OF_YEAR", "DAYNUMBER_OF_CALENDAR", 
                      "DAYNUMBER_OF_MONTH", "DAYNUMBER_OF_WEEK", "DAYNUMBER_OF_YEAR", 
                      "DAYOCCURRENCE_OF_MONTH", "DBA", "DBC", "DEBUG", "DECAMSET", 
                      "DECAMSET_L", "DECODE", "DECOMPRESS", "DEFINER", "DELIMITER", 
                      "DELTA_T", "DEMOGRAPHICS", "DENIALS", "DENSE", "DENSE_RANK", 
                      "DESCRIBE", "DETAILED", "DIAGNOSTICS", "DIGITS", "DIMENSION", 
                      "DOCUMENT", "DOT", "DOWN", "DR", "DUPCOUNT", "DUPCOUNTCUM", 
                      "EBCDIC", "EDITDISTANCE", "ELAPSEDSEC", "ELAPSEDTIME", 
                      "ELEMENT", "ELZS_H", "EMITNULL", "EMPTY", "EMPTY_BLOB", 
                      "EMPTY_CLOB", "ENCODE", "ENCODING", "ENCRYPT", "ERRORS", 
                      "ERRORTBL", "EVENTCOLUMN", "EXCEPTION", "EXCL", "EXCLUDE", 
                      "EXCLUDING", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXPORTWIDTH", 
                      "FALSE", "FEATUREINFO", "FILE", "FILL", "FILTER", 
                      "FINAL", "FIRST_NOTNULL", "FIRST_VALUE", "FLOOR", 
                      "FOLLOWING", "FOREIGNFUNCTION", "FORTOKEN", "FRIDAY", 
                      "FROM_BYTES", "FUNCTIONPARAMETER", "G", "GETBIT", 
                      "GETPSFVERSION", "GETQUERYBAND", "GETQUERYBANDVALUE", 
                      "GETTIMEZONEDISPLACEMENT", "GLOBAL", "GLOP", "GREATEST", 
                      "HIGH", "HOST", "IDENTIFYDATABASE", "IDENTIFYSESSION", 
                      "IDENTIFYTABLE", "IDENTIFYUSER", "IFP", "IGNORE", 
                      "IMMEDIATELY", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INCREMENTAL", "INDENT", "INDEXESPERTABLE", "INDEXMAINTMODE", 
                      "INIT", "INITCAP", "INLINE", "INSTANTIABLE", "INSTR", 
                      "INTERNAL", "INVOKER", "IOCOUNT", "IPARTITION", "ISOLATED", 
                      "ISOLATION", "JAVA", "JIS_COLL", "JSON", "JSON_AGG", 
                      "JSON_COMPOSE", "K", "KANJI1", "KANJISJIS", "KBYTE", 
                      "KBYTES", "KEEP", "KILOBYTES", "LAG", "LAST", "LAST_DAY", 
                      "LAST_NOTNULL", "LAST_VALUE", "LATIN", "LDIFF", "LEAD", 
                      "LEAST", "LENGTH", "LEVEL", "LIST", "LOAD", "LOCATE", 
                      "LOCKEDUSEREXPIRE", "LOW", "LPAD", "LTRIM", "LZCOMP", 
                      "LZCOMP_L", "LZDECOMP", "LZDECOMP_L", "M", "MAD", 
                      "MANUAL", "MAPPING", "MATCHED", "MAX_CHOOSE", "MAXCHAR", 
                      "MAXINTERVALS", "MAXLOGONATTEMPTS", "MAXVALUE", "MAXVALUELENGTH", 
                      "MEDIAN", "MEDIUM", "MEETS", "MEMBER", "MERGEBLOCKRATIO", 
                      "MESSAGE_LENGTH", "MESSAGE_TEXT", "MIN_CHOOSE", "MINCHAR", 
                      "MINVALUE", "MODIFIED", "MONDAY", "MONITORQUERYBAND", 
                      "MONITORSESSIONRATE", "MONITORVERSION", "MONTH_BEGIN", 
                      "MONTH_END", "MONTH_OF_CALENDAR", "MONTH_OF_QUARTER", 
                      "MONTH_OF_YEAR", "MONTHNUMBER_OF_CALENDAR", "MONTHNUMBER_OF_QUARTER", 
                      "MONTHNUMBER_OF_YEAR", "MONTHS_BETWEEN", "MORE_", 
                      "MULTINATIONAL", "NAME", "NAMESPACE", "NEVER", "NEXT_DAY", 
                      "NGRAM", "NIL", "NODDLTEXT", "NODE", "NONOPTCOST", 
                      "NONOPTINIT", "NONSEQUENCED", "NORIGHT", "NOSEXTRACTVARFROMPATH", 
                      "NOTATION", "NOW", "NPATH", "NTH", "NULLS", "NUMFPFNS", 
                      "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", 
                      "NVP", "OA", "OADD_MONTHS", "OCOUNT", "ODELETE", "OEXISTS", 
                      "OEXTEND", "OFIRST", "OLAST", "OLD_NEW_TABLE", "OLIMIT", 
                      "ONEXT", "ONLINE", "OPRIOR", "OPTIONS", "ORDERBYVALUES", 
                      "ORDERED_ANALYTIC", "ORDINALITY", "OREPLACE", "OTRANSLATE", 
                      "OTRIM", "OVERLAYS", "OWNER", "P_INTERSECT", "P_NORMALIZE", 
                      "PARAMID", "PARAMINFO", "PARENT", "PARTITION", "PARTITION_L", 
                      "PARTITIONED", "PARTITIONNAMES", "PASS", "PASSING", 
                      "PATH_GENERATOR", "PATH_START", "PATH_SUMMARIZER", 
                      "PATTERN", "PERCENTILE", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERIOD", "PIVOT", "PORTION", "POWER", "PRECEDES", 
                      "PRECEDING", "PREFIX", "PRINT", "PRIOR", "PROTECTED", 
                      "QUARTER_BEGIN", "QUARTER_END", "QUARTER_OF_CALENDAR", 
                      "QUARTER_OF_YEAR", "QUARTERNUMBER_OF_CALENDAR", "QUARTERNUMBER_OF_YEAR", 
                      "QUERY", "QUERY_BAND", "QUOTECHAR", "RANDOMIZED", 
                      "RANGE", "RANGE_L", "RAPIDFIRE", "RDIFF", "READ", 
                      "RECALC", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SIMILAR", 
                      "REGEXP_SUBSTR", "REPLACEMENT", "RESET", "RESPECT", 
                      "RESTRICTWORDS", "RETAIN", "RETURNED_SQLSTATE", "RETURNING", 
                      "REUSE", "ROOT", "ROTATELEFT", "ROTATERIGHT", "ROUND", 
                      "ROW_COUNT", "ROWIDGEN", "ROWIDGEN2", "RPAD", "RTRIM", 
                      "RU", "RULES", "RULESET", "SAMPLES", "SATURDAY", "SCHEMA", 
                      "SCRIPT", "SCRIPT_COMMAND", "SEARCHSPACE", "SEARCHUIFDBPATH", 
                      "SECURITY", "SEED", "SELF", "SEQ", "SEQUENCE", "SEQUENCED", 
                      "SERIALIZABLE", "SERVER", "SESSIONIZE", "SETBIT", 
                      "SETRESOURCERATE", "SETSESSIONACCOUNT", "SETSESSIONRATE", 
                      "SHARE", "SHIFTLEFT", "SHIFTRIGHT", "SIGN", "SIZE", 
                      "SNAPPY_COMPRESS", "SNAPPY_DECOMPRESS", "SOURCE", 
                      "SPARSE", "SPECCHAR", "SPL", "SQLSTATE", "SR", "ST_GEOMETRY", 
                      "STAT", "STATIC", "STATS", "STATSUSAGE", "STORAGE", 
                      "STRIP", "STRTOK", "STYLE", "SUBBITSTR", "SUBCLASS_ORIGIN", 
                      "SUCCEEDS", "SUMMARYONLY", "SUNDAY", "SYMBOLS", "SYSTEM", 
                      "SYSTEM_TIME", "SYSTEMTEST", "TARGET", "TD_ARRAY2P", 
                      "TD_DATASET", "TD_DAY_OF_CALENDAR", "TD_DAY_OF_MONTH", 
                      "TD_DAY_OF_WEEK", "TD_DAY_OF_YEAR", "TD_GENERAL", 
                      "TD_GETTIMEBUCKET", "TD_INTERNAL", "TD_LZ_COMPRESS", 
                      "TD_LZ_DECOMPRESS", "TD_MONTH_OF_CALENDAR", "TD_MONTH_OF_QUARTER", 
                      "TD_MONTH_OF_YEAR", "TD_QUARTER_OF_CALENDAR", "TD_QUARTER_OF_YEAR", 
                      "TD_TIME_BUCKET_NUMBER", "TD_WEEK_OF_CALENDAR", "TD_WEEK_OF_MONTH", 
                      "TD_WEEK_OF_YEAR", "TD_WEEKDAY_OF_MONTH", "TD_YEAR_OF_CALENDAR", 
                      "TDWMEVENT", "TDWMEXCEPTION", "TDWMHISTORY", "TEMPORAL_DATE", 
                      "TEMPORAL_TIMESTAMP", "TEXT", "THRESHOLDPERCENT", 
                      "THROUGH", "THURSDAY", "TIES", "TIMECODE", "TIMECOLUMN", 
                      "TIMEOUT", "TIMESTAMPCOLUMN", "TO_BYTE", "TO_BYTES", 
                      "TO_CHAR", "TO_DATE", "TO_DSINTERVAL", "TO_NUMBER", 
                      "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", 
                      "TOTOKEN", "TPA", "TRANSACTION_ACTIVE", "TRANSUNICODETOUTF8", 
                      "TRANSUTF8TOUNICODE", "TRUE", "TRUNC", "TRUST_ONLY", 
                      "TTGRANULARITY", "TUESDAY", "UBJSON", "UCASE", "UDFSEARCHPATH", 
                      "UNBOUNDED", "UNCOMMITTED", "UNICODE", "UNKNOWN", 
                      "UNPIVOT", "USE", "USECOUNT", "UTILITYINFO", "VARRAY", 
                      "VERBOSE", "VERSION", "VERSIONING", "WARNING", "WEDNESDAY", 
                      "WEEK_BEGIN", "WEEK_END", "WEEK_OF_CALENDAR", "WEEK_OF_MONTH", 
                      "WEEK_OF_YEAR", "WEEKDAY_OF_MONTH", "WEEKNUMBER_OF_CALENDAR", 
                      "WEEKNUMBER_OF_MONTH", "WEEKNUMBER_OF_QUARTER", "WEEKNUMBER_OF_YEAR", 
                      "WHITESPACE", "WINDOWSIZE", "WITHIN", "WORKLOAD", 
                      "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCOMMENT", 
                      "XMLCONCAT", "XMLDECLARATION", "XMLDOCUMENT", "XMLELEMENT", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", 
                      "XMLTEXT", "XMLTYPE", "XMLVALIDATE", "YEAR_BEGIN", 
                      "YEAR_END", "YEAR_OF_CALENDAR", "YEARNUMBER_OF_CALENDAR", 
                      "ZLIB", "BUCKET", "COMMITTED", "CREATEXML", "CS_LATIN", 
                      "CS_UNICODE", "CS_KANJISJIS", "CS_GRAPHIC", "CSV", 
                      "CSVLD", "DATASIZE", "DAYOFMONTH", "DAYS", "DEFINITION", 
                      "DELETED", "FAST", "LISTAGG", "PATH", "REGEXP_SPLIT_TO_TABLE", 
                      "REVERSE", "SAS", "SQLTABLE", "STRTOK_SPLIT_TO_TABLE", 
                      "SYSLIB", "SYSUDTLIB", "TD_SERVER_DB", "TD_SYSFNLIB", 
                      "TD_SYSXML", "TIMEDATEWZCONTROL", "TRUST", "TRYCAST", 
                      "UDT", "USAGE", "VARIANT", "WEEK", "WIDTH", "XMLPUBLISH", 
                      "XMLPUBLISH_STREAM", "XMLSPLIT", "LATIN_TO_UNICODE", 
                      "UNICODE_TO_LATIN", "LOCALE_TO_UNICODE", "UNICODE_TO_LOCALE", 
                      "ASBSON", "ASBSONTEXT", "COMBINE", "EXISTVALUE", "JSONEXTRACT", 
                      "JSONEXTRACTVALUE", "JSONEXTRACTLARGEVALUE", "KEYCOUNT", 
                      "METADATA", "STORAGE_SIZE", "CREATESCHEMABASEDXML", 
                      "CREATENONSCHEMABASEDXML", "EXISTSNODE", "ISCONTENT", 
                      "ISDOCUMENT", "ISSCHEMAVALID", "ISSCHEMAVALIDATED", 
                      "XMLEXTRACT", "XMLTRANSFORM", "PROC_ID", "LOCATION", 
                      "PAYLOAD", "TRUSTED", "PATHPATTERN", "MANIFEST", "ROWFORMAT", 
                      "STOREDAS", "HEADER", "STRIP_EXTERIOR_SPACES", "STRIP_ENCLOSING_CHAR", 
                      "RLS", "SINGLE", "MULTIPLE", "JSON_COMPRESS", "JSON_DECOMPRESS", 
                      "TS_COMPRESS", "TS_DECOMPRESS", "CONTIGUOUSMAPAMPS", 
                      "SPARSEMAPAMPS", "SPARSETABLEAMPS", "UNNEST", "CALCMATRIX", 
                      "PHRASE", "CALCTYPE", "OUTPUT", "NULL_HANDLING", "READ_NOS", 
                      "BUFFERSIZE", "RETURNTYPE", "SAMPLE_PERC", "FULLSCAN", 
                      "TD_UNPIVOT", "VALUE_COLUMNS", "UNPIVOT_COLUMN", "COLUMN_LIST", 
                      "COLUMN_ALIAS_LIST", "INCLUDE_NULLS", "WRITE_NOS", 
                      "NAMING", "MANIFESTFILE", "MANIFESTONLY", "OVERWRITE", 
                      "INCLUDE_ORDERING", "INCLUDE_HASHBY", "MAXOBJECTSIZE", 
                      "COMPRESSION", "ARRAY_TO_JSON", "BSON_CHECK", "GEOJSONFROMGEOM", 
                      "GEOMFROMGEOJSON", "JSON_CHECK", "JSONGETVALUE", "JSONMETADATA", 
                      "NVP2JSON", "TD_JSONSHRED", "JSON_KEYS", "JSON_TABLE", 
                      "DEPTH", "QUOTES", "ROWEXPR", "COLEXPR", "RETURNTYPES", 
                      "NOCASE", "TRUNCATE", "LINK", "OBJECT_NAME", "UNSIGNED_INTEGER", 
                      "HEX_BYTE_LITERAL", "HEX_INTEGER_LITERAL", "FLOAT_LITERAL", 
                      "DATE_STRING", "TIME_STRING", "TIMESTAMP_STRING", 
                      "PERIOD_STRING", "UNICODE_STRING_LEADING", "CHAR_STRING", 
                      "HEX_STRING", "PASSWORD_STRING", "SEMICOLON", "COLON", 
                      "COMMA", "DOT_", "AT_SIGN", "CARET", "QUESTION_MARK", 
                      "OPEN_PAR", "CLOSE_PAR", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
                      "CONCATENATE", "BROKEN_CONCATENATE", "MUL_SIGN", "DIV_SIGN", 
                      "PLUS_SIGN", "MINUS_SIGN", "EXPONENTIATION", "EQUALS_SIGN", 
                      "NOT_EQUALS_SIGN", "NOT_EQUALS_SIGN_TD", "LT_SIGN", 
                      "LE_SIGN", "GT_SIGN", "GE_SIGN", "SINGLE_LINE_COMMENT", 
                      "MULTI_LINE_COMMENT", "WS" ]

    RULE_dcl_stat = 0
    RULE_give_stat = 1
    RULE_grant_stat = 2
    RULE_grant_monitor_stat = 3
    RULE_grant_role_stat = 4
    RULE_grant_sql_form_stat = 5
    RULE_grant_connect_through_stat = 6
    RULE_grant_logon_stat = 7
    RULE_grant_map_stat = 8
    RULE_grant_zone_stat = 9
    RULE_grant_zone_override_stat = 10
    RULE_revoke_stat = 11
    RULE_revoke_monitor_stat = 12
    RULE_revoke_role_stat = 13
    RULE_revoke_sql_form_stat = 14
    RULE_revoke_connect_through_stat = 15
    RULE_revoke_logon_stat = 16
    RULE_revoke_map_stat = 17
    RULE_revoke_zone_stat = 18
    RULE_revoke_zone_override_stat = 19
    RULE_privilege = 20
    RULE_privilege_object = 21
    RULE_map_privilege = 22
    RULE_role_privilege = 23
    RULE_profile_privilege = 24
    RULE_zone_privilege = 25
    RULE_monitor_privilege = 26
    RULE_grantee = 27
    RULE_revokee = 28
    RULE_function_parameter = 29
    RULE_with_admin_option = 30
    RULE_with_grant_option = 31
    RULE_grant_option_for = 32
    RULE_data_type = 33
    RULE_variable_data_type = 34
    RULE_external_function_data_type = 35
    RULE_numeric_data_type = 36
    RULE_char_data_type = 37
    RULE_precisionless_char_data_type = 38
    RULE_lob_as_locator_data_type = 39
    RULE_binary_data_type = 40
    RULE_datetime_type = 41
    RULE_period_type = 42
    RULE_udt_type = 43
    RULE_data_type_attribute = 44
    RULE_default_value_control_phrase = 45
    RULE_default_value = 46
    RULE_column_naming_phrase = 47
    RULE_sysudtlib = 48
    RULE_interval_period_spec = 49
    RULE_type_precision = 50
    RULE_max_length_k_m_g = 51
    RULE_max_length_k_m = 52
    RULE_character_set_phrase = 53
    RULE_uppercase_phrase = 54
    RULE_casespecific_phrase = 55
    RULE_format_phrase = 56
    RULE_title_phrase = 57
    RULE_named_phrase = 58
    RULE_latin_unicode_character_set_phrase = 59
    RULE_inline_length = 60
    RULE_json_storage_format = 61
    RULE_dataset_storage_format_clause = 62
    RULE_dataset_storage_format = 63
    RULE_with_schema = 64
    RULE_with_time_zone = 65
    RULE_literal = 66
    RULE_hex_byte_literal = 67
    RULE_char_string_literal = 68
    RULE_unicode_char_string_literal = 69
    RULE_hex_char_string_literal = 70
    RULE_integer_literal = 71
    RULE_hex_integer_literal = 72
    RULE_float_literal = 73
    RULE_character_set_prefix = 74
    RULE_date_literal = 75
    RULE_time_literal = 76
    RULE_timestamp_literal = 77
    RULE_interval_literal = 78
    RULE_interval_qualifier = 79
    RULE_period_literal = 80
    RULE_column_name = 81
    RULE_unqualified_column_name = 82
    RULE_unqualified_name = 83
    RULE_object_name = 84
    RULE_table_name = 85
    RULE_procedure_name = 86
    RULE_function_name = 87
    RULE_macro_name = 88
    RULE_database_name = 89
    RULE_user_name = 90
    RULE_role_name = 91
    RULE_profile_name = 92
    RULE_alias_name = 93
    RULE_variable_name = 94
    RULE_parameter_name = 95
    RULE_label_name = 96
    RULE_condition_name = 97
    RULE_cursor_name = 98
    RULE_statement_name = 99
    RULE_statistics_name = 100
    RULE_udt_name = 101
    RULE_attribute_name = 102
    RULE_method_name = 103
    RULE_anchor_name = 104
    RULE_nonreserved_word = 105
    RULE_query_expr = 106
    RULE_query_term = 107
    RULE_with_deleted_rows = 108
    RULE_as_json = 109
    RULE_select_list = 110
    RULE_top_n = 111
    RULE_normalize = 112
    RULE_all_operator = 113
    RULE_selected_columns = 114
    RULE_selected_column = 115
    RULE_into_clause = 116
    RULE_from_clause = 117
    RULE_from_spec = 118
    RULE_join_source_spec = 119
    RULE_join_joined_spec = 120
    RULE_from_pivot_spec = 121
    RULE_from_unpivot_spec = 122
    RULE_table_reference = 123
    RULE_join_clause = 124
    RULE_join_on_clause = 125
    RULE_foreign_table_reference = 126
    RULE_foreign_function_reference = 127
    RULE_foreign_on_clause = 128
    RULE_exported_data = 129
    RULE_foreign_using_clause = 130
    RULE_foreign_parameter = 131
    RULE_foreign_returns_clause = 132
    RULE_server_name_reference = 133
    RULE_table_function_reference = 134
    RULE_udt_table_function = 135
    RULE_unnest_table_function = 136
    RULE_table_function_returns_clause = 137
    RULE_table_function_local_order_by_clause = 138
    RULE_table_function_hash_by_clause = 139
    RULE_table_operator_reference = 140
    RULE_xmltable_operator = 141
    RULE_calcmatrix_table_operator = 142
    RULE_read_nos_table_operator = 143
    RULE_script_table_operator = 144
    RULE_td_unpivot_table_operator = 145
    RULE_write_nos_table_operator = 146
    RULE_json_table_table_operator = 147
    RULE_json_keys_table_operator = 148
    RULE_json_shred_table_operator = 149
    RULE_generic_table_operator = 150
    RULE_table_operator_on_clause = 151
    RULE_table_operator_execute_clause = 152
    RULE_table_operator_out_table_clause = 153
    RULE_table_operator_using_clause = 154
    RULE_table_operator_using_spec = 155
    RULE_json_keys_using_name_value_pair = 156
    RULE_hash_or_partition_by = 157
    RULE_subquery_reference = 158
    RULE_location = 159
    RULE_read_nos_option = 160
    RULE_write_nos_option = 161
    RULE_with_clause = 162
    RULE_with_clause_by_phrase = 163
    RULE_with_clause_title_phrase = 164
    RULE_where_clause = 165
    RULE_group_by_clause = 166
    RULE_group_by_spec = 167
    RULE_ordinary_grouping_set = 168
    RULE_ordinary_grouping_set_parenthesized = 169
    RULE_empty_grouping_set = 170
    RULE_rollup_option = 171
    RULE_cube_option = 172
    RULE_grouping_sets_option = 173
    RULE_grouping_sets_spec = 174
    RULE_having_clause = 175
    RULE_qualify_clause = 176
    RULE_sample_clause = 177
    RULE_sample_fraction_description = 178
    RULE_sample_count_description = 179
    RULE_sample_when_clause = 180
    RULE_expand_on_clause = 181
    RULE_order_by_clause = 182
    RULE_order_by_spec_full = 183
    RULE_order_by_spec_asc_desc_only = 184
    RULE_with_check_option = 185
    RULE_logical_expr = 186
    RULE_scalar_expr = 187
    RULE_tuple = 188
    RULE_tuple_attribute = 189
    RULE_case_expr = 190
    RULE_valued_case_expr = 191
    RULE_searched_case_expr = 192
    RULE_coalesce_expr = 193
    RULE_nullif_expr = 194
    RULE_interval_expr_base = 195
    RULE_interval_expr_parenthesized = 196
    RULE_interval_expr_start_end_phrase = 197
    RULE_function_invocation = 198
    RULE_aggregate_function = 199
    RULE_analytic_function = 200
    RULE_arithmetic_function = 201
    RULE_array_function = 202
    RULE_attribute_function = 203
    RULE_byte_function = 204
    RULE_builtin_function = 205
    RULE_calendar_function = 206
    RULE_comparison_function = 207
    RULE_compression_function = 208
    RULE_conversion_function = 209
    RULE_date_function = 210
    RULE_hash_function = 211
    RULE_lob_function = 212
    RULE_map_function = 213
    RULE_nvl_funtion = 214
    RULE_period_function = 215
    RULE_regexp_function = 216
    RULE_string_function = 217
    RULE_json_function = 218
    RULE_xml_function = 219
    RULE_other_function = 220
    RULE_partitioning_expr = 221
    RULE_td_sysfnlib = 222
    RULE_td_sysxml = 223
    RULE_syslib = 224
    RULE_td_server_db = 225
    RULE_translation_mapping = 226
    RULE_attribute_modification = 227
    RULE_returns_clause = 228
    RULE_attribute_modification_option = 229
    RULE_teradata_type_conversion = 230
    RULE_teradata_type_conversion_data_attribute = 231
    RULE_case_spec = 232
    RULE_range_expr = 233
    RULE_range_list = 234
    RULE_range_expr_1 = 235
    RULE_range_expr_2 = 236
    RULE_range_expr_3 = 237
    RULE_range_spec = 238
    RULE_hash_bucket_number_expr = 239
    RULE_window_spec = 240
    RULE_window_spec_without_rows = 241
    RULE_window_spec_with_ties = 242
    RULE_window_partition_by = 243
    RULE_window_order_by = 244
    RULE_window_rows = 245
    RULE_json_param_spec = 246
    RULE_xml_query_argument = 247
    RULE_xml_query_variable_spec = 248
    RULE_xml_attribute_declaration = 249
    RULE_xml_attribute_spec = 250
    RULE_xml_forest_element_spec = 251
    RULE_xml_value_declaration = 252
    RULE_xml_namespace_declaration = 253
    RULE_xml_namespace_spec = 254
    RULE_xml_columns_spec = 255
    RULE_xml_regular_column_definition = 256
    RULE_xml_encoding = 257
    RULE_xml_query_on_empty = 258
    RULE_xml_returning_spec = 259
    RULE_xml_content_option_spec = 260
    RULE_ignore_respect_nulls = 261
    RULE_number_of_rows = 262
    RULE_with_ties = 263
    RULE_pivot = 264
    RULE_pivot_spec = 265
    RULE_pivot_with_phrase = 266
    RULE_pivot_agg_func_spec = 267
    RULE_pivot_for_phrase = 268
    RULE_pivot_with_spec = 269
    RULE_pivot_expr_spec_scalar = 270
    RULE_pivot_expr_spec_list = 271
    RULE_unpivot = 272
    RULE_unpivot_spec = 273
    RULE_unpivot_column_name_spec_single = 274
    RULE_unpivot_column_name_spec_list = 275
    RULE_at_timezone = 276
    RULE_elements_list = 277
    RULE_scalar_expr_list = 278
    RULE_scalar_expr_list_comma_separated = 279
    RULE_column_list = 280
    RULE_subquery = 281
    RULE_column_spec = 282
    RULE_variable_reference = 283
    RULE_cursor_variable_reference = 284
    RULE_macro_parameter_reference = 285
    RULE_array_scope_reference = 286
    RULE_comparison_operator = 287
    RULE_quantifier = 288
    RULE_request_modifier = 289
    RULE_locking_request_modifier = 290
    RULE_locking_spec = 291
    RULE_lock_type = 292
    RULE_with_request_modifier = 293
    RULE_cte_spec = 294
    RULE_regular_cte_spec = 295
    RULE_recursive_cte_spec = 296
    RULE_using_request_modifier = 297
    RULE_using_spec = 298
    RULE_explain_request_modifier = 299

    ruleNames =  [ "dcl_stat", "give_stat", "grant_stat", "grant_monitor_stat", 
                   "grant_role_stat", "grant_sql_form_stat", "grant_connect_through_stat", 
                   "grant_logon_stat", "grant_map_stat", "grant_zone_stat", 
                   "grant_zone_override_stat", "revoke_stat", "revoke_monitor_stat", 
                   "revoke_role_stat", "revoke_sql_form_stat", "revoke_connect_through_stat", 
                   "revoke_logon_stat", "revoke_map_stat", "revoke_zone_stat", 
                   "revoke_zone_override_stat", "privilege", "privilege_object", 
                   "map_privilege", "role_privilege", "profile_privilege", 
                   "zone_privilege", "monitor_privilege", "grantee", "revokee", 
                   "function_parameter", "with_admin_option", "with_grant_option", 
                   "grant_option_for", "data_type", "variable_data_type", 
                   "external_function_data_type", "numeric_data_type", "char_data_type", 
                   "precisionless_char_data_type", "lob_as_locator_data_type", 
                   "binary_data_type", "datetime_type", "period_type", "udt_type", 
                   "data_type_attribute", "default_value_control_phrase", 
                   "default_value", "column_naming_phrase", "sysudtlib", 
                   "interval_period_spec", "type_precision", "max_length_k_m_g", 
                   "max_length_k_m", "character_set_phrase", "uppercase_phrase", 
                   "casespecific_phrase", "format_phrase", "title_phrase", 
                   "named_phrase", "latin_unicode_character_set_phrase", 
                   "inline_length", "json_storage_format", "dataset_storage_format_clause", 
                   "dataset_storage_format", "with_schema", "with_time_zone", 
                   "literal", "hex_byte_literal", "char_string_literal", 
                   "unicode_char_string_literal", "hex_char_string_literal", 
                   "integer_literal", "hex_integer_literal", "float_literal", 
                   "character_set_prefix", "date_literal", "time_literal", 
                   "timestamp_literal", "interval_literal", "interval_qualifier", 
                   "period_literal", "column_name", "unqualified_column_name", 
                   "unqualified_name", "object_name", "table_name", "procedure_name", 
                   "function_name", "macro_name", "database_name", "user_name", 
                   "role_name", "profile_name", "alias_name", "variable_name", 
                   "parameter_name", "label_name", "condition_name", "cursor_name", 
                   "statement_name", "statistics_name", "udt_name", "attribute_name", 
                   "method_name", "anchor_name", "nonreserved_word", "query_expr", 
                   "query_term", "with_deleted_rows", "as_json", "select_list", 
                   "top_n", "normalize", "all_operator", "selected_columns", 
                   "selected_column", "into_clause", "from_clause", "from_spec", 
                   "join_source_spec", "join_joined_spec", "from_pivot_spec", 
                   "from_unpivot_spec", "table_reference", "join_clause", 
                   "join_on_clause", "foreign_table_reference", "foreign_function_reference", 
                   "foreign_on_clause", "exported_data", "foreign_using_clause", 
                   "foreign_parameter", "foreign_returns_clause", "server_name_reference", 
                   "table_function_reference", "udt_table_function", "unnest_table_function", 
                   "table_function_returns_clause", "table_function_local_order_by_clause", 
                   "table_function_hash_by_clause", "table_operator_reference", 
                   "xmltable_operator", "calcmatrix_table_operator", "read_nos_table_operator", 
                   "script_table_operator", "td_unpivot_table_operator", 
                   "write_nos_table_operator", "json_table_table_operator", 
                   "json_keys_table_operator", "json_shred_table_operator", 
                   "generic_table_operator", "table_operator_on_clause", 
                   "table_operator_execute_clause", "table_operator_out_table_clause", 
                   "table_operator_using_clause", "table_operator_using_spec", 
                   "json_keys_using_name_value_pair", "hash_or_partition_by", 
                   "subquery_reference", "location", "read_nos_option", 
                   "write_nos_option", "with_clause", "with_clause_by_phrase", 
                   "with_clause_title_phrase", "where_clause", "group_by_clause", 
                   "group_by_spec", "ordinary_grouping_set", "ordinary_grouping_set_parenthesized", 
                   "empty_grouping_set", "rollup_option", "cube_option", 
                   "grouping_sets_option", "grouping_sets_spec", "having_clause", 
                   "qualify_clause", "sample_clause", "sample_fraction_description", 
                   "sample_count_description", "sample_when_clause", "expand_on_clause", 
                   "order_by_clause", "order_by_spec_full", "order_by_spec_asc_desc_only", 
                   "with_check_option", "logical_expr", "scalar_expr", "tuple", 
                   "tuple_attribute", "case_expr", "valued_case_expr", "searched_case_expr", 
                   "coalesce_expr", "nullif_expr", "interval_expr_base", 
                   "interval_expr_parenthesized", "interval_expr_start_end_phrase", 
                   "function_invocation", "aggregate_function", "analytic_function", 
                   "arithmetic_function", "array_function", "attribute_function", 
                   "byte_function", "builtin_function", "calendar_function", 
                   "comparison_function", "compression_function", "conversion_function", 
                   "date_function", "hash_function", "lob_function", "map_function", 
                   "nvl_funtion", "period_function", "regexp_function", 
                   "string_function", "json_function", "xml_function", "other_function", 
                   "partitioning_expr", "td_sysfnlib", "td_sysxml", "syslib", 
                   "td_server_db", "translation_mapping", "attribute_modification", 
                   "returns_clause", "attribute_modification_option", "teradata_type_conversion", 
                   "teradata_type_conversion_data_attribute", "case_spec", 
                   "range_expr", "range_list", "range_expr_1", "range_expr_2", 
                   "range_expr_3", "range_spec", "hash_bucket_number_expr", 
                   "window_spec", "window_spec_without_rows", "window_spec_with_ties", 
                   "window_partition_by", "window_order_by", "window_rows", 
                   "json_param_spec", "xml_query_argument", "xml_query_variable_spec", 
                   "xml_attribute_declaration", "xml_attribute_spec", "xml_forest_element_spec", 
                   "xml_value_declaration", "xml_namespace_declaration", 
                   "xml_namespace_spec", "xml_columns_spec", "xml_regular_column_definition", 
                   "xml_encoding", "xml_query_on_empty", "xml_returning_spec", 
                   "xml_content_option_spec", "ignore_respect_nulls", "number_of_rows", 
                   "with_ties", "pivot", "pivot_spec", "pivot_with_phrase", 
                   "pivot_agg_func_spec", "pivot_for_phrase", "pivot_with_spec", 
                   "pivot_expr_spec_scalar", "pivot_expr_spec_list", "unpivot", 
                   "unpivot_spec", "unpivot_column_name_spec_single", "unpivot_column_name_spec_list", 
                   "at_timezone", "elements_list", "scalar_expr_list", "scalar_expr_list_comma_separated", 
                   "column_list", "subquery", "column_spec", "variable_reference", 
                   "cursor_variable_reference", "macro_parameter_reference", 
                   "array_scope_reference", "comparison_operator", "quantifier", 
                   "request_modifier", "locking_request_modifier", "locking_spec", 
                   "lock_type", "with_request_modifier", "cte_spec", "regular_cte_spec", 
                   "recursive_cte_spec", "using_request_modifier", "using_spec", 
                   "explain_request_modifier" ]

    EOF = Token.EOF
    ABORT=1
    ABORTSESSION=2
    ABS=3
    ACCESS_LOCK=4
    ACCOUNT=5
    ACOS=6
    ACOSH=7
    ADD=8
    ADD_MONTHS=9
    ADMIN=10
    AFTER=11
    AGGREGATE=12
    ALL=13
    ALTER=14
    AMP=15
    AND=16
    ANSIDATE=17
    ANY=18
    ARGLPAREN=19
    AS=20
    ASC=21
    ASIN=22
    ASINH=23
    AT=24
    ATAN=25
    ATAN2=26
    ATANH=27
    ATOMIC=28
    AUTHORIZATION=29
    AVE=30
    AVERAGE=31
    AVG=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BIGINT=36
    BINARY=37
    BLOB=38
    BOTH=39
    BT=40
    BUT=41
    BY=42
    BYTE=43
    BYTEINT=44
    BYTES=45
    CALL=46
    CASE=47
    CASE_N=48
    CASESPECIFIC=49
    CAST=50
    CD=51
    CHAR=52
    CHAR_LENGTH=53
    CHAR2HEXINT=54
    CHARACTER=55
    CHARACTER_LENGTH=56
    CHARACTERS=57
    CHARS=58
    CHECK=59
    CHECKPOINT=60
    CLASS=61
    CLOB=62
    CLOSE=63
    CLUSTER=64
    CM=65
    COALESCE=66
    COLLATION=67
    COLLECT=68
    COLUMN=69
    COMMENT=70
    COMMIT=71
    COMPRESS=72
    CONNECT=73
    CONSTRAINT=74
    CONSTRUCTOR=75
    CONSUME=76
    CONTAINS=77
    CONTINUE=78
    CONVERT_TABLE_HEADER=79
    CORR=80
    COS=81
    COSH=82
    COUNT=83
    COVAR_POP=84
    COVAR_SAMP=85
    CREATE=86
    CROSS=87
    CS=88
    CSUM=89
    CT=90
    CTCONTROL=91
    CUBE=92
    CURRENT=93
    CURRENT_DATE=94
    CURRENT_ROLE=95
    CURRENT_TIME=96
    CURRENT_TIMESTAMP=97
    CURRENT_USER=98
    CURSOR=99
    CV=100
    CYCLE=101
    DATABASE=102
    DATABLOCKSIZE=103
    DATE=104
    DATEFORM=105
    DAY=106
    DEALLOCATE=107
    DEC=108
    DECIMAL=109
    DECLARE=110
    DEFAULT=111
    DEFERRED=112
    DEGREES=113
    DEL=114
    DELETE=115
    DESC=116
    DETERMINISTIC=117
    DIAGNOSTIC=118
    DICTIONARY=119
    DISABLED=120
    DISTINCT=121
    DO=122
    DOMAIN=123
    DOUBLE=124
    DROP=125
    DUAL=126
    DUMP=127
    DYNAMIC=128
    EACH=129
    ECHO=130
    ELSE=131
    ELSEIF=132
    ENABLED=133
    END=134
    EQ=135
    EQUALS=136
    ERROR=137
    ERRORFILES=138
    ERRORTABLES=139
    ESCAPE=140
    ET=141
    EXCEPT=142
    EXEC=143
    EXECUTE=144
    EXISTS=145
    EXIT=146
    EXP=147
    EXPAND=148
    EXPANDING=149
    EXPLAIN=150
    EXTERNAL=151
    EXTRACT=152
    FALLBACK=153
    FASTEXPORT=154
    FETCH=155
    FIRST=156
    FLOAT=157
    FLUSH=158
    FOR=159
    FOREIGN=160
    FORMAT=161
    FOUND=162
    FREESPACE=163
    FROM=164
    FULL=165
    FUNCTION=166
    FUNCTIONDESCRIPTOR=167
    GE=168
    GENERATED=169
    GET=170
    GIVE=171
    GRANT=172
    GRAPHIC=173
    GROUP=174
    GROUPING=175
    GT=176
    HANDLER=177
    HASH=178
    HASHAMP=179
    HASHBAKAMP=180
    HASHBUCKET=181
    HASHROW=182
    HAVING=183
    HELP=184
    HOUR=185
    ID2BIGINT=186
    IDENTITY=187
    IF=188
    IMMEDIATE=189
    IN=190
    INCONSISTENT=191
    INDEX=192
    INITIATE=193
    INNER=194
    INOUT=195
    INPUT=196
    INS=197
    INSERT=198
    INSTANCE=199
    INSTEAD=200
    INT=201
    INTEGER=202
    INTEGERDATE=203
    INTERSECT=204
    INTERVAL=205
    INTO=206
    IS=207
    ITERATE=208
    JAR=209
    JOIN=210
    JOURNAL=211
    KEY=212
    KURTOSIS=213
    LANGUAGE=214
    LARGE=215
    LE=216
    LEADING=217
    LEAVE=218
    LEFT=219
    LIKE=220
    LIMIT=221
    LN=222
    LOADING=223
    LOCAL=224
    LOCATOR=225
    LOCK=226
    LOCKING=227
    LOG=228
    LOGGING=229
    LOGON=230
    LONG=231
    LOOP=232
    LOWER=233
    LT=234
    MACRO=235
    MAP=236
    MAVG=237
    MAX=238
    MAXIMUM=239
    MCHARACTERS=240
    MDIFF=241
    MERGE=242
    METHOD=243
    MIN=244
    MINDEX=245
    MINIMUM=246
    MINUS=247
    MINUTE=248
    MLINREG=249
    MLOAD=250
    MOD=251
    MODE=252
    MODIFIES=253
    MODIFY=254
    MONITOR=255
    MONRESOURCE=256
    MONSESSION=257
    MONTH=258
    MSUBSTR=259
    MSUM=260
    MULTISET=261
    NAMED=262
    NATURAL=263
    NE=264
    NEW=265
    NEW_TABLE=266
    NEXT=267
    NO=268
    NONE=269
    NONTEMPORAL=270
    NORMALIZE=271
    NOT=272
    NOWAIT=273
    NULL=274
    NULLIF=275
    NULLIFZERO=276
    NUMBER=277
    NUMERIC=278
    OBJECT=279
    OBJECTS=280
    OCTET_LENGTH=281
    OF=282
    OFF=283
    OLD=284
    OLD_TABLE=285
    ON=286
    ONLY=287
    OPEN=288
    OPTION=289
    OR=290
    ORDER=291
    ORDERING=292
    OUT=293
    OUTER=294
    OVER=295
    OVERLAPS=296
    OVERRIDE=297
    PARAMETER=298
    PASSWORD=299
    PERCENT=300
    PERCENT_RANK=301
    PERM=302
    PERMANENT=303
    POSITION=304
    PRECISION=305
    PREPARE=306
    PRESERVE=307
    PRIMARY=308
    PRIVILEGES=309
    PROCEDURE=310
    PROFILE=311
    PROTECTION=312
    PUBLIC=313
    QUALIFIED=314
    QUALIFY=315
    QUANTILE=316
    QUEUE=317
    RADIANS=318
    RANDOM=319
    RANGE_N=320
    RANK=321
    READS=322
    REAL=323
    RECURSIVE=324
    REFERENCES=325
    REFERENCING=326
    REGR_AVGX=327
    REGR_AVGY=328
    REGR_COUNT=329
    REGR_INTERCEPT=330
    REGR_R2=331
    REGR_SLOPE=332
    REGR_SXX=333
    REGR_SXY=334
    REGR_SYY=335
    RELATIVE=336
    RELEASE=337
    RENAME=338
    REPEAT=339
    REPLACE=340
    REPLCONTROL=341
    REPLICATION=342
    REQUEST=343
    RESIGNAL=344
    RESTART=345
    RESTORE=346
    RESULT=347
    RESUME=348
    RET=349
    RETRIEVE=350
    RETURN=351
    RETURNS=352
    REVALIDATE=353
    REVOKE=354
    RIGHT=355
    RIGHTS=356
    ROLE=357
    ROLLBACK=358
    ROLLFORWARD=359
    ROLLUP=360
    ROW=361
    ROW_NUMBER=362
    ROWID=363
    ROWS=364
    SAMPLE=365
    SAMPLEID=366
    SCROLL=367
    SECOND=368
    SEL=369
    SELECT=370
    SESSION=371
    SET=372
    SETRESRATE=373
    SETS=374
    SETSESSRATE=375
    SHOW=376
    SIGNAL=377
    SIN=378
    SINH=379
    SKEW=380
    SMALLINT=381
    SOME=382
    SOUNDEX=383
    SPECIFIC=384
    SPOOL=385
    SQL=386
    SQLEXCEPTION=387
    SQLTEXT=388
    SQLWARNING=389
    SQRT=390
    SS=391
    START=392
    STARTUP=393
    STATEMENT=394
    STATISTICS=395
    STDDEV_POP=396
    STDDEV_SAMP=397
    STEPINFO=398
    STRING_CS=399
    SUBSCRIBER=400
    SUBSTR=401
    SUBSTRING=402
    SUM=403
    SUMMARY=404
    SUSPEND=405
    TABLE=406
    TAN=407
    TANH=408
    TBL_CS=409
    TD_ANYTYPE=410
    TD_AUTHID=411
    TD_HOST=412
    TD_ROWLOADID=413
    TD_ROWREVISION=414
    TD_ROWSIZE=415
    TD_VALIST=416
    TEMPORARY=417
    TERMINATE=418
    THEN=419
    THRESHOLD=420
    TIME=421
    TIMESTAMP=422
    TIMEZONE_HOUR=423
    TIMEZONE_MINUTE=424
    TITLE=425
    TO=426
    TOP=427
    TRACE=428
    TRAILING=429
    TRANSACTION=430
    TRANSACTIONTIME=431
    TRANSFORM=432
    TRANSLATE=433
    TRANSLATE_CHK=434
    TRIGGER=435
    TRIM=436
    TYPE=437
    UC=438
    UDTCASTAS=439
    UDTCASTLPAREN=440
    UDTMETHOD=441
    UDTTYPE=442
    UDTUSAGE=443
    UESCAPE=444
    UNDEFINED=445
    UNDO=446
    UNION=447
    UNIQUE=448
    UNTIL=449
    UNTIL_CHANGED=450
    UNTIL_CLOSED=451
    UPD=452
    UPDATE=453
    UPPER=454
    UPPERCASE=455
    USER=456
    USING=457
    VALIDTIME=458
    VALUE=459
    VALUES=460
    VAR_POP=461
    VAR_SAMP=462
    VARBYTE=463
    VARCHAR=464
    VARGRAPHIC=465
    VARIANT_TYPE=466
    VARYING=467
    VIEW=468
    VOLATILE=469
    WHEN=470
    WHERE=471
    WHILE=472
    WIDTH_BUCKET=473
    WITH=474
    WITHOUT=475
    WORK=476
    XMLPLAN=477
    YEAR=478
    ZEROIFNULL=479
    ZONE=480
    ALIAS=481
    DESCRIPTOR=482
    GO=483
    GOTO=484
    INDICATOR=485
    PRIVATE=486
    WAIT=487
    ABORTSESSIONS=488
    ABSENT=489
    ACCESS=490
    ACCORDING=491
    ACCUMULATE=492
    AG=493
    AGGGEOMINTERSECTION=494
    AGGGEOMUNION=495
    ALLDBQL=496
    ALLOCATE=497
    ALLOCATION=498
    ALLOW=499
    ALLPARAMS=500
    ALLTDWM=501
    ALWAYS=502
    AMPCOUNT=503
    ANALYSIS=504
    ANCHOR=505
    ANCHOR_HOUR=506
    ANCHOR_MILLISECOND=507
    ANCHOR_MINUTE=508
    ANCHOR_SECOND=509
    APPLNAME=510
    ARCHIVE=511
    ARRAY=512
    ARRAY_ADD=513
    ARRAY_AGG=514
    ARRAY_AVG=515
    ARRAY_COMPARE=516
    ARRAY_CONCAT=517
    ARRAY_COUNT_DISTINCT=518
    ARRAY_DIV=519
    ARRAY_EQ=520
    ARRAY_GE=521
    ARRAY_GET=522
    ARRAY_GT=523
    ARRAY_LE=524
    ARRAY_LT=525
    ARRAY_MAX=526
    ARRAY_MIN=527
    ARRAY_MOD=528
    ARRAY_MUL=529
    ARRAY_NE=530
    ARRAY_SUB=531
    ARRAY_SUM=532
    ARRAY_UPDATE=533
    ARRAY_UPDATE_STRIDE=534
    ASCII=535
    ASSIGNMENT=536
    ATTR=537
    ATTRIBUTE=538
    ATTRIBUTES=539
    ATTRIBUTION=540
    ATTRS=541
    AUTH=542
    AUTO=543
    AUTOTEMP=544
    AVRO=545
    BIT_LENGTH=546
    BITAND=547
    BITNOT=548
    BITOR=549
    BITXOR=550
    BLOCKCOMPRESSION=551
    BLOCKCOMPRESSIONALGORITHM=552
    BLOCKCOMPRESSIONLEVEL=553
    BOM=554
    BOTTOM=555
    BSON=556
    C=557
    CALENDAR=558
    CALLED=559
    CALLER=560
    CAMSET=561
    CAMSET_L=562
    CAPTURE=563
    CARDINALITY=564
    CEIL=565
    CEILING=566
    CHANGERATE=567
    CHARACTERISTICS=568
    CHARSET=569
    CHARSET_COLL=570
    CHECKSUM=571
    CHR=572
    CLASS_ORIGIN=573
    CLICKLAG=574
    CLIENT=575
    CNT=576
    COLOCATE=577
    COLUMNMETA=578
    COLUMNS=579
    COLUMNSPERINDEX=580
    COLUMNSPERJOININDEX=581
    COMMAND_FUNCTION=582
    COMMAND_FUNCTION_CODE=583
    COMPARISON=584
    COMPILE=585
    CONCAT=586
    CONCURRENT=587
    CONDITION=588
    CONDITION_IDENTIFIER=589
    CONDITION_NUMBER=590
    CONTAINED=591
    CONTAINEDTOKEN=592
    CONTENT=593
    CONTIGUOUS=594
    COST=595
    COSTS=596
    COUNTSET=597
    CPP=598
    CPUTIME=599
    CPUTIMENORM=600
    CREATEDATASET=601
    CREATOR=602
    CUME_DIST=603
    CURDATE=604
    CURTIME=605
    DATA=606
    DATASET=607
    DAY_OF_CALENDAR=608
    DAY_OF_MONTH=609
    DAY_OF_WEEK=610
    DAY_OF_YEAR=611
    DAYNUMBER_OF_CALENDAR=612
    DAYNUMBER_OF_MONTH=613
    DAYNUMBER_OF_WEEK=614
    DAYNUMBER_OF_YEAR=615
    DAYOCCURRENCE_OF_MONTH=616
    DBA=617
    DBC=618
    DEBUG=619
    DECAMSET=620
    DECAMSET_L=621
    DECODE=622
    DECOMPRESS=623
    DEFINER=624
    DELIMITER=625
    DELTA_T=626
    DEMOGRAPHICS=627
    DENIALS=628
    DENSE=629
    DENSE_RANK=630
    DESCRIBE=631
    DETAILED=632
    DIAGNOSTICS=633
    DIGITS=634
    DIMENSION=635
    DOCUMENT=636
    DOT=637
    DOWN=638
    DR=639
    DUPCOUNT=640
    DUPCOUNTCUM=641
    EBCDIC=642
    EDITDISTANCE=643
    ELAPSEDSEC=644
    ELAPSEDTIME=645
    ELEMENT=646
    ELZS_H=647
    EMITNULL=648
    EMPTY=649
    EMPTY_BLOB=650
    EMPTY_CLOB=651
    ENCODE=652
    ENCODING=653
    ENCRYPT=654
    ERRORS=655
    ERRORTBL=656
    EVENTCOLUMN=657
    EXCEPTION=658
    EXCL=659
    EXCLUDE=660
    EXCLUDING=661
    EXCLUSIVE=662
    EXPIRE=663
    EXPORT=664
    EXPORTWIDTH=665
    FALSE=666
    FEATUREINFO=667
    FILE=668
    FILL=669
    FILTER=670
    FINAL=671
    FIRST_NOTNULL=672
    FIRST_VALUE=673
    FLOOR=674
    FOLLOWING=675
    FOREIGNFUNCTION=676
    FORTOKEN=677
    FRIDAY=678
    FROM_BYTES=679
    FUNCTIONPARAMETER=680
    G=681
    GETBIT=682
    GETPSFVERSION=683
    GETQUERYBAND=684
    GETQUERYBANDVALUE=685
    GETTIMEZONEDISPLACEMENT=686
    GLOBAL=687
    GLOP=688
    GREATEST=689
    HIGH=690
    HOST=691
    IDENTIFYDATABASE=692
    IDENTIFYSESSION=693
    IDENTIFYTABLE=694
    IDENTIFYUSER=695
    IFP=696
    IGNORE=697
    IMMEDIATELY=698
    IMPORT=699
    INCLUDE=700
    INCLUDING=701
    INCREMENT=702
    INCREMENTAL=703
    INDENT=704
    INDEXESPERTABLE=705
    INDEXMAINTMODE=706
    INIT=707
    INITCAP=708
    INLINE=709
    INSTANTIABLE=710
    INSTR=711
    INTERNAL=712
    INVOKER=713
    IOCOUNT=714
    IPARTITION=715
    ISOLATED=716
    ISOLATION=717
    JAVA=718
    JIS_COLL=719
    JSON=720
    JSON_AGG=721
    JSON_COMPOSE=722
    K=723
    KANJI1=724
    KANJISJIS=725
    KBYTE=726
    KBYTES=727
    KEEP=728
    KILOBYTES=729
    LAG=730
    LAST=731
    LAST_DAY=732
    LAST_NOTNULL=733
    LAST_VALUE=734
    LATIN=735
    LDIFF=736
    LEAD=737
    LEAST=738
    LENGTH=739
    LEVEL=740
    LIST=741
    LOAD=742
    LOCATE=743
    LOCKEDUSEREXPIRE=744
    LOW=745
    LPAD=746
    LTRIM=747
    LZCOMP=748
    LZCOMP_L=749
    LZDECOMP=750
    LZDECOMP_L=751
    M=752
    MAD=753
    MANUAL=754
    MAPPING=755
    MATCHED=756
    MAX_CHOOSE=757
    MAXCHAR=758
    MAXINTERVALS=759
    MAXLOGONATTEMPTS=760
    MAXVALUE=761
    MAXVALUELENGTH=762
    MEDIAN=763
    MEDIUM=764
    MEETS=765
    MEMBER=766
    MERGEBLOCKRATIO=767
    MESSAGE_LENGTH=768
    MESSAGE_TEXT=769
    MIN_CHOOSE=770
    MINCHAR=771
    MINVALUE=772
    MODIFIED=773
    MONDAY=774
    MONITORQUERYBAND=775
    MONITORSESSIONRATE=776
    MONITORVERSION=777
    MONTH_BEGIN=778
    MONTH_END=779
    MONTH_OF_CALENDAR=780
    MONTH_OF_QUARTER=781
    MONTH_OF_YEAR=782
    MONTHNUMBER_OF_CALENDAR=783
    MONTHNUMBER_OF_QUARTER=784
    MONTHNUMBER_OF_YEAR=785
    MONTHS_BETWEEN=786
    MORE_=787
    MULTINATIONAL=788
    NAME=789
    NAMESPACE=790
    NEVER=791
    NEXT_DAY=792
    NGRAM=793
    NIL=794
    NODDLTEXT=795
    NODE=796
    NONOPTCOST=797
    NONOPTINIT=798
    NONSEQUENCED=799
    NORIGHT=800
    NOSEXTRACTVARFROMPATH=801
    NOTATION=802
    NOW=803
    NPATH=804
    NTH=805
    NULLS=806
    NUMFPFNS=807
    NUMTODSINTERVAL=808
    NUMTOYMINTERVAL=809
    NVL=810
    NVL2=811
    NVP=812
    OA=813
    OADD_MONTHS=814
    OCOUNT=815
    ODELETE=816
    OEXISTS=817
    OEXTEND=818
    OFIRST=819
    OLAST=820
    OLD_NEW_TABLE=821
    OLIMIT=822
    ONEXT=823
    ONLINE=824
    OPRIOR=825
    OPTIONS=826
    ORDERBYVALUES=827
    ORDERED_ANALYTIC=828
    ORDINALITY=829
    OREPLACE=830
    OTRANSLATE=831
    OTRIM=832
    OVERLAYS=833
    OWNER=834
    P_INTERSECT=835
    P_NORMALIZE=836
    PARAMID=837
    PARAMINFO=838
    PARENT=839
    PARTITION=840
    PARTITION_L=841
    PARTITIONED=842
    PARTITIONNAMES=843
    PASS=844
    PASSING=845
    PATH_GENERATOR=846
    PATH_START=847
    PATH_SUMMARIZER=848
    PATTERN=849
    PERCENTILE=850
    PERCENTILE_CONT=851
    PERCENTILE_DISC=852
    PERIOD=853
    PIVOT=854
    PORTION=855
    POWER=856
    PRECEDES=857
    PRECEDING=858
    PREFIX=859
    PRINT=860
    PRIOR=861
    PROTECTED=862
    QUARTER_BEGIN=863
    QUARTER_END=864
    QUARTER_OF_CALENDAR=865
    QUARTER_OF_YEAR=866
    QUARTERNUMBER_OF_CALENDAR=867
    QUARTERNUMBER_OF_YEAR=868
    QUERY=869
    QUERY_BAND=870
    QUOTECHAR=871
    RANDOMIZED=872
    RANGE=873
    RANGE_L=874
    RAPIDFIRE=875
    RDIFF=876
    READ=877
    RECALC=878
    REGEXP_INSTR=879
    REGEXP_REPLACE=880
    REGEXP_SIMILAR=881
    REGEXP_SUBSTR=882
    REPLACEMENT=883
    RESET=884
    RESPECT=885
    RESTRICTWORDS=886
    RETAIN=887
    RETURNED_SQLSTATE=888
    RETURNING=889
    REUSE=890
    ROOT=891
    ROTATELEFT=892
    ROTATERIGHT=893
    ROUND=894
    ROW_COUNT=895
    ROWIDGEN=896
    ROWIDGEN2=897
    RPAD=898
    RTRIM=899
    RU=900
    RULES=901
    RULESET=902
    SAMPLES=903
    SATURDAY=904
    SCHEMA=905
    SCRIPT=906
    SCRIPT_COMMAND=907
    SEARCHSPACE=908
    SEARCHUIFDBPATH=909
    SECURITY=910
    SEED=911
    SELF=912
    SEQ=913
    SEQUENCE=914
    SEQUENCED=915
    SERIALIZABLE=916
    SERVER=917
    SESSIONIZE=918
    SETBIT=919
    SETRESOURCERATE=920
    SETSESSIONACCOUNT=921
    SETSESSIONRATE=922
    SHARE=923
    SHIFTLEFT=924
    SHIFTRIGHT=925
    SIGN=926
    SIZE=927
    SNAPPY_COMPRESS=928
    SNAPPY_DECOMPRESS=929
    SOURCE=930
    SPARSE=931
    SPECCHAR=932
    SPL=933
    SQLSTATE=934
    SR=935
    ST_GEOMETRY=936
    STAT=937
    STATIC=938
    STATS=939
    STATSUSAGE=940
    STORAGE=941
    STRIP=942
    STRTOK=943
    STYLE=944
    SUBBITSTR=945
    SUBCLASS_ORIGIN=946
    SUCCEEDS=947
    SUMMARYONLY=948
    SUNDAY=949
    SYMBOLS=950
    SYSTEM=951
    SYSTEM_TIME=952
    SYSTEMTEST=953
    TARGET=954
    TD_ARRAY2P=955
    TD_DATASET=956
    TD_DAY_OF_CALENDAR=957
    TD_DAY_OF_MONTH=958
    TD_DAY_OF_WEEK=959
    TD_DAY_OF_YEAR=960
    TD_GENERAL=961
    TD_GETTIMEBUCKET=962
    TD_INTERNAL=963
    TD_LZ_COMPRESS=964
    TD_LZ_DECOMPRESS=965
    TD_MONTH_OF_CALENDAR=966
    TD_MONTH_OF_QUARTER=967
    TD_MONTH_OF_YEAR=968
    TD_QUARTER_OF_CALENDAR=969
    TD_QUARTER_OF_YEAR=970
    TD_TIME_BUCKET_NUMBER=971
    TD_WEEK_OF_CALENDAR=972
    TD_WEEK_OF_MONTH=973
    TD_WEEK_OF_YEAR=974
    TD_WEEKDAY_OF_MONTH=975
    TD_YEAR_OF_CALENDAR=976
    TDWMEVENT=977
    TDWMEXCEPTION=978
    TDWMHISTORY=979
    TEMPORAL_DATE=980
    TEMPORAL_TIMESTAMP=981
    TEXT=982
    THRESHOLDPERCENT=983
    THROUGH=984
    THURSDAY=985
    TIES=986
    TIMECODE=987
    TIMECOLUMN=988
    TIMEOUT=989
    TIMESTAMPCOLUMN=990
    TO_BYTE=991
    TO_BYTES=992
    TO_CHAR=993
    TO_DATE=994
    TO_DSINTERVAL=995
    TO_NUMBER=996
    TO_TIMESTAMP=997
    TO_TIMESTAMP_TZ=998
    TO_YMINTERVAL=999
    TOTOKEN=1000
    TPA=1001
    TRANSACTION_ACTIVE=1002
    TRANSUNICODETOUTF8=1003
    TRANSUTF8TOUNICODE=1004
    TRUE=1005
    TRUNC=1006
    TRUST_ONLY=1007
    TTGRANULARITY=1008
    TUESDAY=1009
    UBJSON=1010
    UCASE=1011
    UDFSEARCHPATH=1012
    UNBOUNDED=1013
    UNCOMMITTED=1014
    UNICODE=1015
    UNKNOWN=1016
    UNPIVOT=1017
    USE=1018
    USECOUNT=1019
    UTILITYINFO=1020
    VARRAY=1021
    VERBOSE=1022
    VERSION=1023
    VERSIONING=1024
    WARNING=1025
    WEDNESDAY=1026
    WEEK_BEGIN=1027
    WEEK_END=1028
    WEEK_OF_CALENDAR=1029
    WEEK_OF_MONTH=1030
    WEEK_OF_YEAR=1031
    WEEKDAY_OF_MONTH=1032
    WEEKNUMBER_OF_CALENDAR=1033
    WEEKNUMBER_OF_MONTH=1034
    WEEKNUMBER_OF_QUARTER=1035
    WEEKNUMBER_OF_YEAR=1036
    WHITESPACE=1037
    WINDOWSIZE=1038
    WITHIN=1039
    WORKLOAD=1040
    WRITE=1041
    XML=1042
    XMLAGG=1043
    XMLATTRIBUTES=1044
    XMLCOMMENT=1045
    XMLCONCAT=1046
    XMLDECLARATION=1047
    XMLDOCUMENT=1048
    XMLELEMENT=1049
    XMLFOREST=1050
    XMLNAMESPACES=1051
    XMLPARSE=1052
    XMLPI=1053
    XMLQUERY=1054
    XMLSCHEMA=1055
    XMLSERIALIZE=1056
    XMLTABLE=1057
    XMLTEXT=1058
    XMLTYPE=1059
    XMLVALIDATE=1060
    YEAR_BEGIN=1061
    YEAR_END=1062
    YEAR_OF_CALENDAR=1063
    YEARNUMBER_OF_CALENDAR=1064
    ZLIB=1065
    BUCKET=1066
    COMMITTED=1067
    CREATEXML=1068
    CS_LATIN=1069
    CS_UNICODE=1070
    CS_KANJISJIS=1071
    CS_GRAPHIC=1072
    CSV=1073
    CSVLD=1074
    DATASIZE=1075
    DAYOFMONTH=1076
    DAYS=1077
    DEFINITION=1078
    DELETED=1079
    FAST=1080
    LISTAGG=1081
    PATH=1082
    REGEXP_SPLIT_TO_TABLE=1083
    REVERSE=1084
    SAS=1085
    SQLTABLE=1086
    STRTOK_SPLIT_TO_TABLE=1087
    SYSLIB=1088
    SYSUDTLIB=1089
    TD_SERVER_DB=1090
    TD_SYSFNLIB=1091
    TD_SYSXML=1092
    TIMEDATEWZCONTROL=1093
    TRUST=1094
    TRYCAST=1095
    UDT=1096
    USAGE=1097
    VARIANT=1098
    WEEK=1099
    WIDTH=1100
    XMLPUBLISH=1101
    XMLPUBLISH_STREAM=1102
    XMLSPLIT=1103
    LATIN_TO_UNICODE=1104
    UNICODE_TO_LATIN=1105
    LOCALE_TO_UNICODE=1106
    UNICODE_TO_LOCALE=1107
    ASBSON=1108
    ASBSONTEXT=1109
    COMBINE=1110
    EXISTVALUE=1111
    JSONEXTRACT=1112
    JSONEXTRACTVALUE=1113
    JSONEXTRACTLARGEVALUE=1114
    KEYCOUNT=1115
    METADATA=1116
    STORAGE_SIZE=1117
    CREATESCHEMABASEDXML=1118
    CREATENONSCHEMABASEDXML=1119
    EXISTSNODE=1120
    ISCONTENT=1121
    ISDOCUMENT=1122
    ISSCHEMAVALID=1123
    ISSCHEMAVALIDATED=1124
    XMLEXTRACT=1125
    XMLTRANSFORM=1126
    PROC_ID=1127
    LOCATION=1128
    PAYLOAD=1129
    TRUSTED=1130
    PATHPATTERN=1131
    MANIFEST=1132
    ROWFORMAT=1133
    STOREDAS=1134
    HEADER=1135
    STRIP_EXTERIOR_SPACES=1136
    STRIP_ENCLOSING_CHAR=1137
    RLS=1138
    SINGLE=1139
    MULTIPLE=1140
    JSON_COMPRESS=1141
    JSON_DECOMPRESS=1142
    TS_COMPRESS=1143
    TS_DECOMPRESS=1144
    CONTIGUOUSMAPAMPS=1145
    SPARSEMAPAMPS=1146
    SPARSETABLEAMPS=1147
    UNNEST=1148
    CALCMATRIX=1149
    PHRASE=1150
    CALCTYPE=1151
    OUTPUT=1152
    NULL_HANDLING=1153
    READ_NOS=1154
    BUFFERSIZE=1155
    RETURNTYPE=1156
    SAMPLE_PERC=1157
    FULLSCAN=1158
    TD_UNPIVOT=1159
    VALUE_COLUMNS=1160
    UNPIVOT_COLUMN=1161
    COLUMN_LIST=1162
    COLUMN_ALIAS_LIST=1163
    INCLUDE_NULLS=1164
    WRITE_NOS=1165
    NAMING=1166
    MANIFESTFILE=1167
    MANIFESTONLY=1168
    OVERWRITE=1169
    INCLUDE_ORDERING=1170
    INCLUDE_HASHBY=1171
    MAXOBJECTSIZE=1172
    COMPRESSION=1173
    ARRAY_TO_JSON=1174
    BSON_CHECK=1175
    GEOJSONFROMGEOM=1176
    GEOMFROMGEOJSON=1177
    JSON_CHECK=1178
    JSONGETVALUE=1179
    JSONMETADATA=1180
    NVP2JSON=1181
    TD_JSONSHRED=1182
    JSON_KEYS=1183
    JSON_TABLE=1184
    DEPTH=1185
    QUOTES=1186
    ROWEXPR=1187
    COLEXPR=1188
    RETURNTYPES=1189
    NOCASE=1190
    TRUNCATE=1191
    LINK=1192
    OBJECT_NAME=1193
    UNSIGNED_INTEGER=1194
    HEX_BYTE_LITERAL=1195
    HEX_INTEGER_LITERAL=1196
    FLOAT_LITERAL=1197
    DATE_STRING=1198
    TIME_STRING=1199
    TIMESTAMP_STRING=1200
    PERIOD_STRING=1201
    UNICODE_STRING_LEADING=1202
    CHAR_STRING=1203
    HEX_STRING=1204
    PASSWORD_STRING=1205
    SEMICOLON=1206
    COLON=1207
    COMMA=1208
    DOT_=1209
    AT_SIGN=1210
    CARET=1211
    QUESTION_MARK=1212
    OPEN_PAR=1213
    CLOSE_PAR=1214
    OPEN_SQ_BRACKET=1215
    CLOSE_SQ_BRACKET=1216
    CONCATENATE=1217
    BROKEN_CONCATENATE=1218
    MUL_SIGN=1219
    DIV_SIGN=1220
    PLUS_SIGN=1221
    MINUS_SIGN=1222
    EXPONENTIATION=1223
    EQUALS_SIGN=1224
    NOT_EQUALS_SIGN=1225
    NOT_EQUALS_SIGN_TD=1226
    LT_SIGN=1227
    LE_SIGN=1228
    GT_SIGN=1229
    GE_SIGN=1230
    SINGLE_LINE_COMMENT=1231
    MULTI_LINE_COMMENT=1232
    WS=1233

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Dcl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def give_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Give_statContext,0)


        def grant_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_statContext,0)


        def revoke_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_dcl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDcl_stat" ):
                listener.enterDcl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDcl_stat" ):
                listener.exitDcl_stat(self)




    def dcl_stat(self):

        localctx = TeradataSQLDCLParser.Dcl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_dcl_stat)
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.give_stat()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.grant_stat()
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 3)
                self.state = 602
                self.revoke_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Give_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.recipient_name = None # Database_nameContext

        def GIVE(self):
            return self.getToken(TeradataSQLDCLParser.GIVE, 0)

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_give_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGive_stat" ):
                listener.enterGive_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGive_stat" ):
                listener.exitGive_stat(self)




    def give_stat(self):

        localctx = TeradataSQLDCLParser.Give_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_give_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(TeradataSQLDCLParser.GIVE)
            self.state = 606
            self.database_name()
            self.state = 607
            self.match(TeradataSQLDCLParser.TO)
            self.state = 608
            localctx.recipient_name = self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grant_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_role_statContext,0)


        def grant_monitor_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_monitor_statContext,0)


        def grant_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_sql_form_statContext,0)


        def grant_connect_through_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_connect_through_statContext,0)


        def grant_logon_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_logon_statContext,0)


        def grant_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_map_statContext,0)


        def grant_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_zone_statContext,0)


        def grant_zone_override_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_zone_override_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_stat" ):
                listener.enterGrant_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_stat" ):
                listener.exitGrant_stat(self)




    def grant_stat(self):

        localctx = TeradataSQLDCLParser.Grant_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_grant_stat)
        try:
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.grant_role_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.grant_monitor_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self.grant_sql_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 613
                self.grant_connect_through_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 614
                self.grant_logon_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 615
                self.grant_map_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 616
                self.grant_zone_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 617
                self.grant_zone_override_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_monitor_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def MONITOR(self):
            return self.getToken(TeradataSQLDCLParser.MONITOR, 0)

        def monitor_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Monitor_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Monitor_privilegeContext,i)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.GranteeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDCLParser.PUBLIC, 0)

        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDCLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDCLParser.BUT, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_grant_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_monitor_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_monitor_stat" ):
                listener.enterGrant_monitor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_monitor_stat" ):
                listener.exitGrant_monitor_stat(self)




    def grant_monitor_stat(self):

        localctx = TeradataSQLDCLParser.Grant_monitor_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_grant_monitor_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [255]:
                self.state = 621
                self.match(TeradataSQLDCLParser.MONITOR)
                self.state = 633
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309]:
                    self.state = 622
                    self.match(TeradataSQLDCLParser.PRIVILEGES)
                    pass
                elif token in [41]:
                    self.state = 623
                    self.match(TeradataSQLDCLParser.BUT)
                    self.state = 624
                    self.match(TeradataSQLDCLParser.NOT)
                    self.state = 625
                    self.monitor_privilege()
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 626
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 627
                        self.monitor_privilege()
                        self.state = 632
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [426]:
                    pass
                else:
                    pass
                pass
            elif token in [2, 256, 257, 373, 375]:
                self.state = 635
                self.monitor_privilege()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 636
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 637
                    self.monitor_privilege()
                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 645
            self.match(TeradataSQLDCLParser.TO)
            self.state = 668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 655
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 646
                    self.grantee()
                    self.state = 651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 647
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 648
                        self.grantee()
                        self.state = 653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [313]:
                    self.state = 654
                    self.match(TeradataSQLDCLParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 657
                    self.with_grant_option()


                pass

            elif la_ == 2:
                self.state = 660
                self.role_name()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 661
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 662
                    self.role_name()
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def with_admin_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_admin_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_role_stat" ):
                listener.enterGrant_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_role_stat" ):
                listener.exitGrant_role_stat(self)




    def grant_role_stat(self):

        localctx = TeradataSQLDCLParser.Grant_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_grant_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 671
            self.role_name()

            self.state = 672
            self.match(TeradataSQLDCLParser.COMMA)
            self.state = 673
            self.role_name()
            self.state = 675
            self.match(TeradataSQLDCLParser.TO)

            self.state = 676
            localctx.user_or_role = self.role_name()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 677
                self.match(TeradataSQLDCLParser.COMMA)

                self.state = 678
                localctx.user_or_role = self.role_name()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 684
                self.with_admin_option()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def privilege_object(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Privilege_objectContext,0)


        def map_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Map_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Map_privilegeContext,i)


        def role_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_privilegeContext,i)


        def profile_privilege(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Profile_privilegeContext,0)


        def zone_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Zone_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Zone_privilegeContext,i)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLDCLParser.CONSTRAINT, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLDCLParser.ASSIGNMENT, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLDCLParser.DEFINITION, 0)

        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.GranteeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDCLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.PrivilegeContext,i)


        def CTCONTROL(self):
            return self.getToken(TeradataSQLDCLParser.CTCONTROL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_grant_optionContext,0)


        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDCLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDCLParser.BUT, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_sql_form_stat" ):
                listener.enterGrant_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_sql_form_stat" ):
                listener.exitGrant_sql_form_stat(self)




    def grant_sql_form_stat(self):

        localctx = TeradataSQLDCLParser.Grant_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_grant_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 705
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.match(TeradataSQLDCLParser.ALL)
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 689
                        self.match(TeradataSQLDCLParser.PRIVILEGES)


                    pass

                elif la_ == 2:
                    self.state = 694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 692
                        self.match(TeradataSQLDCLParser.ALL)
                        self.state = 693
                        self.match(TeradataSQLDCLParser.BUT)


                    self.state = 696
                    self.privilege()
                    self.state = 701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 697
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 698
                        self.privilege()
                        self.state = 703
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 3:
                    self.state = 704
                    self.match(TeradataSQLDCLParser.CTCONTROL)
                    pass


                self.state = 707
                self.match(TeradataSQLDCLParser.ON)
                self.state = 708
                self.privilege_object()
                pass

            elif la_ == 2:
                self.state = 709
                self.map_privilege()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 710
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 711
                    self.map_privilege()
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 717
                self.role_privilege()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 718
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 719
                    self.role_privilege()
                    self.state = 724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 725
                self.profile_privilege()
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 726
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 727
                    self.role_privilege()
                    self.state = 732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.state = 733
                self.zone_privilege()
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 734
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 735
                    self.zone_privilege()
                    self.state = 740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.state = 741
                self.match(TeradataSQLDCLParser.CONSTRAINT)
                self.state = 742
                self.match(TeradataSQLDCLParser.ASSIGNMENT)
                pass

            elif la_ == 7:
                self.state = 743
                self.match(TeradataSQLDCLParser.CONSTRAINT)
                self.state = 744
                self.match(TeradataSQLDCLParser.DEFINITION)
                pass


            self.state = 747
            self.match(TeradataSQLDCLParser.TO)
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 748
                self.grantee()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 749
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 750
                    self.grantee()
                    self.state = 755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 756
                    self.with_grant_option()


                pass

            elif la_ == 2:
                self.state = 759
                self.match(TeradataSQLDCLParser.PUBLIC)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 760
                    self.with_grant_option()


                pass

            elif la_ == 3:
                self.state = 763
                self.role_name()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 764
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 765
                    self.role_name()
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_connect_through_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trusted_user_name = None # User_nameContext
            self.application_user_name = None # User_nameContext
            self.permanent_user_name = None # User_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def CONNECT(self):
            return self.getToken(TeradataSQLDCLParser.CONNECT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDCLParser.THROUGH, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.User_nameContext,i)


        def PERMANENT(self):
            return self.getToken(TeradataSQLDCLParser.PERMANENT, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.WITH)
            else:
                return self.getToken(TeradataSQLDCLParser.WITH, i)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLDCLParser.TRUST_ONLY, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDCLParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def PROFILE(self):
            return self.getToken(TeradataSQLDCLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Profile_nameContext,0)


        def WITHOUT(self):
            return self.getToken(TeradataSQLDCLParser.WITHOUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_connect_through_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_connect_through_stat" ):
                listener.enterGrant_connect_through_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_connect_through_stat" ):
                listener.exitGrant_connect_through_stat(self)




    def grant_connect_through_stat(self):

        localctx = TeradataSQLDCLParser.Grant_connect_through_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_grant_connect_through_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 774
            self.match(TeradataSQLDCLParser.CONNECT)
            self.state = 775
            self.match(TeradataSQLDCLParser.THROUGH)
            self.state = 776
            localctx.trusted_user_name = self.user_name()
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 777
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 778
                self.match(TeradataSQLDCLParser.TRUST_ONLY)


            self.state = 781
            self.match(TeradataSQLDCLParser.TO)
            self.state = 833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 782
                localctx.application_user_name = self.user_name()
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 783
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 784
                    localctx.application_user_name = self.user_name()
                    self.state = 789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 790
                    self.match(TeradataSQLDCLParser.WITH)
                    self.state = 791
                    self.match(TeradataSQLDCLParser.ROLE)
                    self.state = 792
                    self.role_name()
                    self.state = 797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 793
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 794
                        self.role_name()
                        self.state = 799
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 800
                        self.match(TeradataSQLDCLParser.WITH)
                        self.state = 801
                        self.match(TeradataSQLDCLParser.PROFILE)
                        self.state = 802
                        self.profile_name()


                    pass

                elif la_ == 2:
                    self.state = 805
                    self.match(TeradataSQLDCLParser.WITH)
                    self.state = 806
                    self.match(TeradataSQLDCLParser.PROFILE)
                    self.state = 807
                    self.profile_name()
                    pass


                pass
            elif token in [303]:
                self.state = 810
                self.match(TeradataSQLDCLParser.PERMANENT)
                self.state = 811
                localctx.permanent_user_name = self.user_name()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 812
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 813
                    localctx.permanent_user_name = self.user_name()
                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 831
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [474]:
                    self.state = 819
                    self.match(TeradataSQLDCLParser.WITH)
                    self.state = 820
                    self.match(TeradataSQLDCLParser.ROLE)
                    self.state = 821
                    self.role_name()
                    self.state = 826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 822
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 823
                        self.role_name()
                        self.state = 828
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [475]:
                    self.state = 829
                    self.match(TeradataSQLDCLParser.WITHOUT)
                    self.state = 830
                    self.match(TeradataSQLDCLParser.ROLE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_logon_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.host_id = list() # of Integer_literalContexts

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def LOGON(self):
            return self.getToken(TeradataSQLDCLParser.LOGON, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDCLParser.DEFAULT, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.User_nameContext,i)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDCLParser.NULL, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLDCLParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_logon_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_logon_stat" ):
                listener.enterGrant_logon_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_logon_stat" ):
                listener.exitGrant_logon_stat(self)




    def grant_logon_stat(self):

        localctx = TeradataSQLDCLParser.Grant_logon_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_grant_logon_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 836
            self.match(TeradataSQLDCLParser.LOGON)
            self.state = 837
            self.match(TeradataSQLDCLParser.ON)
            self.state = 847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 838
                localctx._integer_literal = self.integer_literal()
                localctx.host_id.append(localctx._integer_literal)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 839
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 840
                    localctx._integer_literal = self.integer_literal()
                    localctx.host_id.append(localctx._integer_literal)
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13]:
                self.state = 846
                self.match(TeradataSQLDCLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.state = 849
                self.match(TeradataSQLDCLParser.AS)
                self.state = 850
                self.match(TeradataSQLDCLParser.DEFAULT)
                pass
            elif token in [164, 426]:
                self.state = 851
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 852
                self.user_name()
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 853
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 854
                    self.user_name()
                    self.state = 859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 862
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 863
                self.match(TeradataSQLDCLParser.NULL)
                self.state = 864
                self.match(TeradataSQLDCLParser.PASSWORD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDCLParser.MAP, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDCLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_grant_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_map_stat" ):
                listener.enterGrant_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_map_stat" ):
                listener.exitGrant_map_stat(self)




    def grant_map_stat(self):

        localctx = TeradataSQLDCLParser.Grant_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_grant_map_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 868
            self.match(TeradataSQLDCLParser.MAP)
            self.state = 869
            localctx.map_name = self.unqualified_name()
            self.state = 870
            self.match(TeradataSQLDCLParser.TO)
            self.state = 883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 871
                localctx.user_or_role = self.role_name()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 872
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 873
                    localctx.user_or_role = self.role_name()
                    self.state = 878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 879
                    self.with_grant_option()


                pass
            elif token in [313]:
                self.state = 882
                self.match(TeradataSQLDCLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDCLParser.ZONE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_zone_stat" ):
                listener.enterGrant_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_zone_stat" ):
                listener.exitGrant_zone_stat(self)




    def grant_zone_stat(self):

        localctx = TeradataSQLDCLParser.Grant_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_grant_zone_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 886
            self.match(TeradataSQLDCLParser.ZONE)
            self.state = 887
            localctx.zone_name = self.unqualified_name()
            self.state = 888
            self.match(TeradataSQLDCLParser.TO)
            self.state = 889
            localctx.user_or_role = self.role_name()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 890
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 891
                localctx.user_or_role = self.role_name()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_zone_override_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDCLParser.ZONE, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDCLParser.OVERRIDE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.User_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_zone_override_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_zone_override_stat" ):
                listener.enterGrant_zone_override_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_zone_override_stat" ):
                listener.exitGrant_zone_override_stat(self)




    def grant_zone_override_stat(self):

        localctx = TeradataSQLDCLParser.Grant_zone_override_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_grant_zone_override_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 898
            self.match(TeradataSQLDCLParser.ZONE)
            self.state = 899
            self.match(TeradataSQLDCLParser.OVERRIDE)
            self.state = 900
            self.match(TeradataSQLDCLParser.TO)
            self.state = 901
            self.user_name()
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 902
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 903
                self.user_name()
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def revoke_monitor_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_monitor_statContext,0)


        def revoke_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_role_statContext,0)


        def revoke_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_sql_form_statContext,0)


        def revoke_connect_through_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_connect_through_statContext,0)


        def revoke_logon_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_logon_statContext,0)


        def revoke_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_map_statContext,0)


        def revoke_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_zone_statContext,0)


        def revoke_zone_override_stat(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Revoke_zone_override_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_stat" ):
                listener.enterRevoke_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_stat" ):
                listener.exitRevoke_stat(self)




    def revoke_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_revoke_stat)
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.revoke_monitor_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.revoke_role_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 911
                self.revoke_sql_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 912
                self.revoke_connect_through_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 913
                self.revoke_logon_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 914
                self.revoke_map_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 915
                self.revoke_zone_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 916
                self.revoke_zone_override_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_monitor_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def MONITOR(self):
            return self.getToken(TeradataSQLDCLParser.MONITOR, 0)

        def monitor_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Monitor_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Monitor_privilegeContext,i)


        def revokee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.RevokeeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.RevokeeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDCLParser.PUBLIC, 0)

        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_option_forContext,0)


        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDCLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDCLParser.BUT, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_monitor_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_monitor_stat" ):
                listener.enterRevoke_monitor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_monitor_stat" ):
                listener.exitRevoke_monitor_stat(self)




    def revoke_monitor_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_monitor_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_revoke_monitor_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 920
                self.grant_option_for()


            self.state = 945
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [255]:
                self.state = 923
                self.match(TeradataSQLDCLParser.MONITOR)
                self.state = 935
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309]:
                    self.state = 924
                    self.match(TeradataSQLDCLParser.PRIVILEGES)
                    pass
                elif token in [41]:
                    self.state = 925
                    self.match(TeradataSQLDCLParser.BUT)
                    self.state = 926
                    self.match(TeradataSQLDCLParser.NOT)
                    self.state = 927
                    self.monitor_privilege()
                    self.state = 932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 928
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 929
                        self.monitor_privilege()
                        self.state = 934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [164, 426]:
                    pass
                else:
                    pass
                pass
            elif token in [2, 256, 257, 373, 375]:
                self.state = 937
                self.monitor_privilege()
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 938
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 939
                    self.monitor_privilege()
                    self.state = 944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 947
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 948
                self.revokee()
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 949
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 950
                    self.revokee()
                    self.state = 955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [313]:
                self.state = 956
                self.match(TeradataSQLDCLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDCLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDCLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDCLParser.FOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_role_stat" ):
                listener.enterRevoke_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_role_stat" ):
                listener.exitRevoke_role_stat(self)




    def revoke_role_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_revoke_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 960
                self.match(TeradataSQLDCLParser.ADMIN)
                self.state = 961
                self.match(TeradataSQLDCLParser.OPTION)
                self.state = 962
                self.match(TeradataSQLDCLParser.FOR)


            self.state = 965
            self.role_name()
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 966
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 967
                self.role_name()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 973
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()

            self.state = 974
            localctx.user_or_role = self.role_name()
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 975
                self.match(TeradataSQLDCLParser.COMMA)

                self.state = 976
                localctx.user_or_role = self.role_name()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def privilege_object(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Privilege_objectContext,0)


        def map_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Map_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Map_privilegeContext,i)


        def role_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_privilegeContext,i)


        def profile_privilege(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Profile_privilegeContext,0)


        def zone_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Zone_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Zone_privilegeContext,i)


        def revokee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.RevokeeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.RevokeeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLDCLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_option_forContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.PrivilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def PRIVILEGES(self):
            return self.getToken(TeradataSQLDCLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLDCLParser.BUT, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_sql_form_stat" ):
                listener.enterRevoke_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_sql_form_stat" ):
                listener.exitRevoke_sql_form_stat(self)




    def revoke_sql_form_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_revoke_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 983
                self.grant_option_for()


            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1002
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 986
                    self.match(TeradataSQLDCLParser.ALL)
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 987
                        self.match(TeradataSQLDCLParser.PRIVILEGES)


                    pass

                elif la_ == 2:
                    self.state = 992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 990
                        self.match(TeradataSQLDCLParser.ALL)
                        self.state = 991
                        self.match(TeradataSQLDCLParser.BUT)


                    self.state = 994
                    self.privilege()
                    self.state = 999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 995
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 996
                        self.privilege()
                        self.state = 1001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 1004
                self.match(TeradataSQLDCLParser.ON)
                self.state = 1005
                self.privilege_object()
                pass

            elif la_ == 2:
                self.state = 1006
                self.map_privilege()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1007
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1008
                    self.map_privilege()
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1014
                self.role_privilege()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1015
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1016
                    self.role_privilege()
                    self.state = 1021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 1022
                self.profile_privilege()
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1023
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1024
                    self.role_privilege()
                    self.state = 1029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.state = 1030
                self.zone_privilege()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1031
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1032
                    self.zone_privilege()
                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1040
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 1041
                self.revokee()
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1042
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1043
                    self.revokee()
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1049
                self.match(TeradataSQLDCLParser.PUBLIC)
                pass

            elif la_ == 3:
                self.state = 1050
                self.role_name()
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1051
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1052
                    self.role_name()
                    self.state = 1057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_connect_through_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trusted_user_name = None # User_nameContext
            self.application_user_name = None # User_nameContext
            self.permanent_user_name = None # User_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def CONNECT(self):
            return self.getToken(TeradataSQLDCLParser.CONNECT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDCLParser.THROUGH, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.User_nameContext,i)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.WITH)
            else:
                return self.getToken(TeradataSQLDCLParser.WITH, i)

        def TRUST(self):
            return self.getToken(TeradataSQLDCLParser.TRUST, 0)

        def ONLY(self):
            return self.getToken(TeradataSQLDCLParser.ONLY, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def PERMANENT(self):
            return self.getToken(TeradataSQLDCLParser.PERMANENT, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDCLParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def PROFILE(self):
            return self.getToken(TeradataSQLDCLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Profile_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_connect_through_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_connect_through_stat" ):
                listener.enterRevoke_connect_through_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_connect_through_stat" ):
                listener.exitRevoke_connect_through_stat(self)




    def revoke_connect_through_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_connect_through_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_revoke_connect_through_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 1061
            self.match(TeradataSQLDCLParser.CONNECT)
            self.state = 1062
            self.match(TeradataSQLDCLParser.THROUGH)
            self.state = 1063
            localctx.trusted_user_name = self.user_name()
            self.state = 1119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [164, 426]:
                self.state = 1064
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1114
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 1065
                    localctx.application_user_name = self.user_name()
                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1066
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 1067
                        localctx.application_user_name = self.user_name()
                        self.state = 1072
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1091
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                    if la_ == 1:
                        self.state = 1073
                        self.match(TeradataSQLDCLParser.WITH)
                        self.state = 1074
                        self.match(TeradataSQLDCLParser.ROLE)
                        self.state = 1075
                        self.role_name()
                        self.state = 1080
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 1076
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 1077
                            self.role_name()
                            self.state = 1082
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==474:
                            self.state = 1083
                            self.match(TeradataSQLDCLParser.WITH)
                            self.state = 1084
                            self.match(TeradataSQLDCLParser.PROFILE)
                            self.state = 1085
                            self.profile_name()


                        pass

                    elif la_ == 2:
                        self.state = 1088
                        self.match(TeradataSQLDCLParser.WITH)
                        self.state = 1089
                        self.match(TeradataSQLDCLParser.PROFILE)
                        self.state = 1090
                        self.profile_name()
                        pass


                    pass
                elif token in [303]:
                    self.state = 1093
                    self.match(TeradataSQLDCLParser.PERMANENT)
                    self.state = 1094
                    localctx.permanent_user_name = self.user_name()
                    self.state = 1099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1095
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 1096
                        localctx.permanent_user_name = self.user_name()
                        self.state = 1101
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 1102
                        self.match(TeradataSQLDCLParser.WITH)
                        self.state = 1103
                        self.match(TeradataSQLDCLParser.ROLE)
                        self.state = 1104
                        self.role_name()
                        self.state = 1109
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 1105
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 1106
                            self.role_name()
                            self.state = 1111
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [474]:
                self.state = 1116
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 1117
                self.match(TeradataSQLDCLParser.TRUST)
                self.state = 1118
                self.match(TeradataSQLDCLParser.ONLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_logon_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.host_id = list() # of Integer_literalContexts

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def LOGON(self):
            return self.getToken(TeradataSQLDCLParser.LOGON, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDCLParser.DEFAULT, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.User_nameContext,i)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_logon_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_logon_stat" ):
                listener.enterRevoke_logon_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_logon_stat" ):
                listener.exitRevoke_logon_stat(self)




    def revoke_logon_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_logon_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_revoke_logon_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 1122
            self.match(TeradataSQLDCLParser.LOGON)
            self.state = 1123
            self.match(TeradataSQLDCLParser.ON)
            self.state = 1133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 1124
                localctx._integer_literal = self.integer_literal()
                localctx.host_id.append(localctx._integer_literal)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1125
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1126
                    localctx._integer_literal = self.integer_literal()
                    localctx.host_id.append(localctx._integer_literal)
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13]:
                self.state = 1132
                self.match(TeradataSQLDCLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.state = 1135
                self.match(TeradataSQLDCLParser.AS)
                self.state = 1136
                self.match(TeradataSQLDCLParser.DEFAULT)
                pass
            elif token in [164, 426]:
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1138
                self.user_name()
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1139
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1140
                    self.user_name()
                    self.state = 1145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDCLParser.MAP, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def PUBLIC(self):
            return self.getToken(TeradataSQLDCLParser.PUBLIC, 0)

        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grant_option_forContext,0)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_map_stat" ):
                listener.enterRevoke_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_map_stat" ):
                listener.exitRevoke_map_stat(self)




    def revoke_map_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_revoke_map_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 1149
                self.grant_option_for()


            self.state = 1152
            self.match(TeradataSQLDCLParser.MAP)
            self.state = 1153
            localctx.map_name = self.unqualified_name()
            self.state = 1154
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1155
                localctx.user_or_role = self.role_name()
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1156
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 1157
                    localctx.user_or_role = self.role_name()
                    self.state = 1162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [313]:
                self.state = 1163
                self.match(TeradataSQLDCLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDCLParser.ZONE, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_zone_stat" ):
                listener.enterRevoke_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_zone_stat" ):
                listener.exitRevoke_zone_stat(self)




    def revoke_zone_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_revoke_zone_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 1167
            self.match(TeradataSQLDCLParser.ZONE)
            self.state = 1168
            localctx.zone_name = self.unqualified_name()
            self.state = 1169
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1170
            localctx.user_or_role = self.role_name()
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1171
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 1172
                localctx.user_or_role = self.role_name()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_zone_override_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLDCLParser.REVOKE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDCLParser.ZONE, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDCLParser.OVERRIDE, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.User_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revoke_zone_override_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_zone_override_stat" ):
                listener.enterRevoke_zone_override_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_zone_override_stat" ):
                listener.exitRevoke_zone_override_stat(self)




    def revoke_zone_override_stat(self):

        localctx = TeradataSQLDCLParser.Revoke_zone_override_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_revoke_zone_override_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(TeradataSQLDCLParser.REVOKE)
            self.state = 1179
            self.match(TeradataSQLDCLParser.ZONE)
            self.state = 1180
            self.match(TeradataSQLDCLParser.OVERRIDE)
            self.state = 1181
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1182
            self.user_name()
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1183
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 1184
                self.user_name()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLDCLParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TeradataSQLDCLParser.EXTERNAL, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLDCLParser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDCLParser.FUNCTION, 0)

        def ANY(self):
            return self.getToken(TeradataSQLDCLParser.ANY, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLDCLParser.CHECKPOINT, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLDCLParser.CREATE, 0)

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDCLParser.AUTHORIZATION, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDCLParser.DATABASE, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDCLParser.DATASET, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDCLParser.SCHEMA, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDCLParser.GLOP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLDCLParser.MACRO, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLDCLParser.OWNER, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDCLParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDCLParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLDCLParser.TRIGGER, 0)

        def USER(self):
            return self.getToken(TeradataSQLDCLParser.USER, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDCLParser.VIEW, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLDCLParser.DELETE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDCLParser.DROP, 0)

        def DUMP(self):
            return self.getToken(TeradataSQLDCLParser.DUMP, 0)

        def EXECUTE(self):
            return self.getToken(TeradataSQLDCLParser.EXECUTE, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLDCLParser.MEMBER, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLDCLParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLDCLParser.INSERT, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def NONTEMPORAL(self):
            return self.getToken(TeradataSQLDCLParser.NONTEMPORAL, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDCLParser.OVERRIDE, 0)

        def RESTORE(self):
            return self.getToken(TeradataSQLDCLParser.RESTORE, 0)

        def SELECT(self):
            return self.getToken(TeradataSQLDCLParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLDCLParser.UPDATE, 0)

        def REFERENCES(self):
            return self.getToken(TeradataSQLDCLParser.REFERENCES, 0)

        def RETRIEVE(self):
            return self.getToken(TeradataSQLDCLParser.RETRIEVE, 0)

        def SHOW(self):
            return self.getToken(TeradataSQLDCLParser.SHOW, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLDCLParser.STATISTICS, 0)

        def UDT(self):
            return self.getToken(TeradataSQLDCLParser.UDT, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLDCLParser.METHOD, 0)

        def UDTMETHOD(self):
            return self.getToken(TeradataSQLDCLParser.UDTMETHOD, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDCLParser.TYPE, 0)

        def UDTTYPE(self):
            return self.getToken(TeradataSQLDCLParser.UDTTYPE, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLDCLParser.USAGE, 0)

        def UDTUSAGE(self):
            return self.getToken(TeradataSQLDCLParser.UDTUSAGE, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = TeradataSQLDCLParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_privilege)
        try:
            self.state = 1316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1190
                self.match(TeradataSQLDCLParser.ALTER)
                self.state = 1191
                self.match(TeradataSQLDCLParser.EXTERNAL)
                self.state = 1192
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                self.match(TeradataSQLDCLParser.ALTER)
                self.state = 1194
                self.match(TeradataSQLDCLParser.FUNCTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1195
                self.match(TeradataSQLDCLParser.ALTER)
                self.state = 1196
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1197
                self.match(TeradataSQLDCLParser.ANY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1198
                self.match(TeradataSQLDCLParser.CHECKPOINT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1199
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1200
                self.match(TeradataSQLDCLParser.AUTHORIZATION)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1201
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1202
                self.match(TeradataSQLDCLParser.DATABASE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1203
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1204
                self.match(TeradataSQLDCLParser.DATASET)
                self.state = 1205
                self.match(TeradataSQLDCLParser.SCHEMA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1206
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1207
                self.match(TeradataSQLDCLParser.EXTERNAL)
                self.state = 1208
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1209
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1210
                self.match(TeradataSQLDCLParser.FUNCTION)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1211
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1212
                self.match(TeradataSQLDCLParser.GLOP)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1213
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1214
                self.match(TeradataSQLDCLParser.MACRO)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1215
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1216
                self.match(TeradataSQLDCLParser.OWNER)
                self.state = 1217
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1218
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1219
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1220
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1221
                self.match(TeradataSQLDCLParser.SERVER)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1222
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1223
                self.match(TeradataSQLDCLParser.TABLE)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1224
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1225
                self.match(TeradataSQLDCLParser.TRIGGER)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1226
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1227
                self.match(TeradataSQLDCLParser.USER)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1228
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1229
                self.match(TeradataSQLDCLParser.VIEW)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1230
                self.match(TeradataSQLDCLParser.DATABASE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1231
                self.match(TeradataSQLDCLParser.DELETE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1232
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1233
                self.match(TeradataSQLDCLParser.AUTHORIZATION)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1234
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1235
                self.match(TeradataSQLDCLParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1236
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1237
                self.match(TeradataSQLDCLParser.DATASET)
                self.state = 1238
                self.match(TeradataSQLDCLParser.SCHEMA)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1239
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1240
                self.match(TeradataSQLDCLParser.FUNCTION)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1241
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1242
                self.match(TeradataSQLDCLParser.GLOP)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1243
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1244
                self.match(TeradataSQLDCLParser.MACRO)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1245
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1246
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1247
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1248
                self.match(TeradataSQLDCLParser.SERVER)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1249
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1250
                self.match(TeradataSQLDCLParser.TABLE)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1251
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1252
                self.match(TeradataSQLDCLParser.TRIGGER)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1253
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1254
                self.match(TeradataSQLDCLParser.USER)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1255
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1256
                self.match(TeradataSQLDCLParser.VIEW)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1257
                self.match(TeradataSQLDCLParser.DUMP)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1258
                self.match(TeradataSQLDCLParser.EXECUTE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1259
                self.match(TeradataSQLDCLParser.EXECUTE)
                self.state = 1260
                self.match(TeradataSQLDCLParser.FUNCTION)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1261
                self.match(TeradataSQLDCLParser.EXECUTE)
                self.state = 1262
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1263
                self.match(TeradataSQLDCLParser.FUNCTION)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1264
                self.match(TeradataSQLDCLParser.GLOP)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1265
                self.match(TeradataSQLDCLParser.GLOP)
                self.state = 1266
                self.match(TeradataSQLDCLParser.MEMBER)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1267
                self.match(TeradataSQLDCLParser.INDEX)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1268
                self.match(TeradataSQLDCLParser.INSERT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1269
                self.match(TeradataSQLDCLParser.INSERT)
                self.state = 1270
                self.column_list()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1271
                self.match(TeradataSQLDCLParser.MACRO)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1272
                self.match(TeradataSQLDCLParser.NONTEMPORAL)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1273
                self.match(TeradataSQLDCLParser.OVERRIDE)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1274
                self.match(TeradataSQLDCLParser.OVERRIDE)
                self.state = 1275
                self.match(TeradataSQLDCLParser.DELETE)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1276
                self.match(TeradataSQLDCLParser.OVERRIDE)
                self.state = 1277
                self.match(TeradataSQLDCLParser.DUMP)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1278
                self.match(TeradataSQLDCLParser.OVERRIDE)
                self.state = 1279
                self.match(TeradataSQLDCLParser.INSERT)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1280
                self.match(TeradataSQLDCLParser.OVERRIDE)
                self.state = 1281
                self.match(TeradataSQLDCLParser.RESTORE)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1282
                self.match(TeradataSQLDCLParser.OVERRIDE)
                self.state = 1283
                self.match(TeradataSQLDCLParser.SELECT)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1284
                self.match(TeradataSQLDCLParser.OVERRIDE)
                self.state = 1285
                self.match(TeradataSQLDCLParser.UPDATE)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1286
                self.match(TeradataSQLDCLParser.PROCEDURE)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1287
                self.match(TeradataSQLDCLParser.REFERENCES)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1288
                self.match(TeradataSQLDCLParser.REFERENCES)
                self.state = 1289
                self.column_list()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1290
                self.match(TeradataSQLDCLParser.RESTORE)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1291
                self.match(TeradataSQLDCLParser.RETRIEVE)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1292
                self.match(TeradataSQLDCLParser.SELECT)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1293
                self.match(TeradataSQLDCLParser.SELECT)
                self.state = 1294
                self.column_list()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1295
                self.match(TeradataSQLDCLParser.SHOW)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1296
                self.match(TeradataSQLDCLParser.STATISTICS)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1297
                self.match(TeradataSQLDCLParser.TABLE)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1298
                self.match(TeradataSQLDCLParser.TRIGGER)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1299
                self.match(TeradataSQLDCLParser.UDT)
                self.state = 1300
                self.match(TeradataSQLDCLParser.METHOD)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1301
                self.match(TeradataSQLDCLParser.UDTMETHOD)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1302
                self.match(TeradataSQLDCLParser.UDT)
                self.state = 1303
                self.match(TeradataSQLDCLParser.TYPE)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1304
                self.match(TeradataSQLDCLParser.UDTTYPE)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1305
                self.match(TeradataSQLDCLParser.UDT)
                self.state = 1306
                self.match(TeradataSQLDCLParser.USAGE)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1307
                self.match(TeradataSQLDCLParser.UDTUSAGE)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1308
                self.match(TeradataSQLDCLParser.UPDATE)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1309
                self.match(TeradataSQLDCLParser.UPDATE)
                self.state = 1310
                self.column_list()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1311
                self.match(TeradataSQLDCLParser.USER)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1312
                self.match(TeradataSQLDCLParser.VIEW)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1313
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 1314
                self.match(TeradataSQLDCLParser.DATASET)
                self.state = 1315
                self.match(TeradataSQLDCLParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Privilege_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Object_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(TeradataSQLDCLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Procedure_nameContext,0)


        def SPECIFIC(self):
            return self.getToken(TeradataSQLDCLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLDCLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Function_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def TYPE(self):
            return self.getToken(TeradataSQLDCLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Udt_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_privilege_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege_object" ):
                listener.enterPrivilege_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege_object" ):
                listener.exitPrivilege_object(self)




    def privilege_object(self):

        localctx = TeradataSQLDCLParser.Privilege_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_privilege_object)
        self._la = 0 # Token type
        try:
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1318
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.match(TeradataSQLDCLParser.PROCEDURE)
                self.state = 1320
                self.procedure_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1321
                self.match(TeradataSQLDCLParser.SPECIFIC)
                self.state = 1322
                self.match(TeradataSQLDCLParser.FUNCTION)
                self.state = 1323
                self.function_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 1324
                    self.match(TeradataSQLDCLParser.FUNCTION)


                self.state = 1327
                self.function_name()
                self.state = 1328
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                    self.state = 1329
                    self.function_parameter()
                    self.state = 1334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1330
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 1331
                        self.function_parameter()
                        self.state = 1336
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1339
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1341
                self.match(TeradataSQLDCLParser.TYPE)
                self.state = 1343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1342
                    self.sysudtlib()


                self.state = 1345
                self.udt_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDCLParser.CREATE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDCLParser.MAP, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDCLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_map_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_privilege" ):
                listener.enterMap_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_privilege" ):
                listener.exitMap_privilege(self)




    def map_privilege(self):

        localctx = TeradataSQLDCLParser.Map_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_map_privilege)
        try:
            self.state = 1353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1348
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1349
                self.match(TeradataSQLDCLParser.MAP)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1350
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1351
                self.match(TeradataSQLDCLParser.MAP)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1352
                self.match(TeradataSQLDCLParser.MAP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDCLParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDCLParser.ROLE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDCLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_role_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_privilege" ):
                listener.enterRole_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_privilege" ):
                listener.exitRole_privilege(self)




    def role_privilege(self):

        localctx = TeradataSQLDCLParser.Role_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_role_privilege)
        try:
            self.state = 1360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1355
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1356
                self.match(TeradataSQLDCLParser.ROLE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1357
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1358
                self.match(TeradataSQLDCLParser.ROLE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1359
                self.match(TeradataSQLDCLParser.ROLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDCLParser.CREATE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDCLParser.PROFILE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDCLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_profile_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_privilege" ):
                listener.enterProfile_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_privilege" ):
                listener.exitProfile_privilege(self)




    def profile_privilege(self):

        localctx = TeradataSQLDCLParser.Profile_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_profile_privilege)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1362
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1363
                self.match(TeradataSQLDCLParser.PROFILE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1364
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1365
                self.match(TeradataSQLDCLParser.PROFILE)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1366
                self.match(TeradataSQLDCLParser.PROFILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zone_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLDCLParser.CREATE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDCLParser.ZONE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLDCLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_zone_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZone_privilege" ):
                listener.enterZone_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZone_privilege" ):
                listener.exitZone_privilege(self)




    def zone_privilege(self):

        localctx = TeradataSQLDCLParser.Zone_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_zone_privilege)
        try:
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1369
                self.match(TeradataSQLDCLParser.CREATE)
                self.state = 1370
                self.match(TeradataSQLDCLParser.ZONE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.match(TeradataSQLDCLParser.DROP)
                self.state = 1372
                self.match(TeradataSQLDCLParser.ZONE)
                pass
            elif token in [480]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1373
                self.match(TeradataSQLDCLParser.ZONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Monitor_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSION(self):
            return self.getToken(TeradataSQLDCLParser.ABORTSESSION, 0)

        def MONRESOURCE(self):
            return self.getToken(TeradataSQLDCLParser.MONRESOURCE, 0)

        def MONSESSION(self):
            return self.getToken(TeradataSQLDCLParser.MONSESSION, 0)

        def SETRESRATE(self):
            return self.getToken(TeradataSQLDCLParser.SETRESRATE, 0)

        def SETSESSRATE(self):
            return self.getToken(TeradataSQLDCLParser.SETSESSRATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_monitor_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMonitor_privilege" ):
                listener.enterMonitor_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMonitor_privilege" ):
                listener.exitMonitor_privilege(self)




    def monitor_privilege(self):

        localctx = TeradataSQLDCLParser.Monitor_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_monitor_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            _la = self._input.LA(1)
            if not(_la==2 or _la==256 or _la==257 or _la==373 or _la==375):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GranteeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grantee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee" ):
                listener.enterGrantee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee" ):
                listener.exitGrantee(self)




    def grantee(self):

        localctx = TeradataSQLDCLParser.GranteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_grantee)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1378
                self.match(TeradataSQLDCLParser.ALL)


            self.state = 1381
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_revokee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokee" ):
                listener.enterRevokee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokee" ):
                listener.exitRevokee(self)




    def revokee(self):

        localctx = TeradataSQLDCLParser.RevokeeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_revokee)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1383
                self.match(TeradataSQLDCLParser.ALL)


            self.state = 1386
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_parameter" ):
                listener.enterFunction_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_parameter" ):
                listener.exitFunction_parameter(self)




    def function_parameter(self):

        localctx = TeradataSQLDCLParser.Function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_function_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 1388
                self.parameter_name()


            self.state = 1391
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_admin_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDCLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDCLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_admin_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_admin_option" ):
                listener.enterWith_admin_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_admin_option" ):
                listener.exitWith_admin_option(self)




    def with_admin_option(self):

        localctx = TeradataSQLDCLParser.With_admin_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_with_admin_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 1394
            self.match(TeradataSQLDCLParser.ADMIN)
            self.state = 1395
            self.match(TeradataSQLDCLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_grant_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDCLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_grant_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_grant_option" ):
                listener.enterWith_grant_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_grant_option" ):
                listener.exitWith_grant_option(self)




    def with_grant_option(self):

        localctx = TeradataSQLDCLParser.With_grant_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_with_grant_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 1398
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 1399
            self.match(TeradataSQLDCLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_option_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLDCLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDCLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDCLParser.FOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grant_option_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_option_for" ):
                listener.enterGrant_option_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_option_for" ):
                listener.exitGrant_option_for(self)




    def grant_option_for(self):

        localctx = TeradataSQLDCLParser.Grant_option_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_grant_option_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(TeradataSQLDCLParser.GRANT)
            self.state = 1402
            self.match(TeradataSQLDCLParser.OPTION)
            self.state = 1403
            self.match(TeradataSQLDCLParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TeradataSQLDCLParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_data_type)
        try:
            self.state = 1411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1407
                self.binary_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1408
                self.datetime_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1409
                self.period_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1410
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Precisionless_char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_variable_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_data_type" ):
                listener.enterVariable_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_data_type" ):
                listener.exitVariable_data_type(self)




    def variable_data_type(self):

        localctx = TeradataSQLDCLParser.Variable_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_variable_data_type)
        try:
            self.state = 1420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1413
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1415
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1416
                self.binary_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1417
                self.datetime_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1418
                self.period_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1419
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Precisionless_char_data_typeContext,0)


        def lob_as_locator_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Lob_as_locator_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Udt_typeContext,0)


        def TD_ANYTYPE(self):
            return self.getToken(TeradataSQLDCLParser.TD_ANYTYPE, 0)

        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDCLParser.VARIANT_TYPE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_external_function_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_data_type" ):
                listener.enterExternal_function_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_data_type" ):
                listener.exitExternal_function_data_type(self)




    def external_function_data_type(self):

        localctx = TeradataSQLDCLParser.External_function_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_external_function_data_type)
        try:
            self.state = 1432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1422
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1423
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1424
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1425
                self.lob_as_locator_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1426
                self.binary_data_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1427
                self.datetime_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1428
                self.period_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1429
                self.udt_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1430
                self.match(TeradataSQLDCLParser.TD_ANYTYPE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1431
                self.match(TeradataSQLDCLParser.VARIANT_TYPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.scale = None # Integer_literalContext

        def BYTEINT(self):
            return self.getToken(TeradataSQLDCLParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataSQLDCLParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLDCLParser.INTEGER, 0)

        def INT(self):
            return self.getToken(TeradataSQLDCLParser.INT, 0)

        def BIGINT(self):
            return self.getToken(TeradataSQLDCLParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataSQLDCLParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataSQLDCLParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataSQLDCLParser.NUMERIC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def FLOAT(self):
            return self.getToken(TeradataSQLDCLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataSQLDCLParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(TeradataSQLDCLParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TeradataSQLDCLParser.PRECISION, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLDCLParser.NUMBER, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_numeric_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_data_type" ):
                listener.enterNumeric_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_data_type" ):
                listener.exitNumeric_data_type(self)




    def numeric_data_type(self):

        localctx = TeradataSQLDCLParser.Numeric_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_numeric_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1434
                self.match(TeradataSQLDCLParser.BYTEINT)
                pass
            elif token in [381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1435
                self.match(TeradataSQLDCLParser.SMALLINT)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1436
                self.match(TeradataSQLDCLParser.INTEGER)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1437
                self.match(TeradataSQLDCLParser.INT)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1438
                self.match(TeradataSQLDCLParser.BIGINT)
                pass
            elif token in [108, 109, 278]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1439
                _la = self._input.LA(1)
                if not(_la==108 or _la==109 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1440
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 1442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 1441
                        localctx.precision = self.integer_literal()


                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 1444
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 1445
                        localctx.scale = self.integer_literal()


                    self.state = 1448
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)


                pass
            elif token in [124, 157, 323]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1461
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [157]:
                    self.state = 1451
                    self.match(TeradataSQLDCLParser.FLOAT)
                    self.state = 1456
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        self.state = 1452
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 1453
                        localctx.precision = self.integer_literal()
                        self.state = 1454
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)


                    pass
                elif token in [323]:
                    self.state = 1458
                    self.match(TeradataSQLDCLParser.REAL)
                    pass
                elif token in [124]:
                    self.state = 1459
                    self.match(TeradataSQLDCLParser.DOUBLE)
                    self.state = 1460
                    self.match(TeradataSQLDCLParser.PRECISION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1463
                self.match(TeradataSQLDCLParser.NUMBER)
                self.state = 1474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1464
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 1467
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1194]:
                        self.state = 1465
                        localctx.precision = self.integer_literal()
                        pass
                    elif token in [1219]:
                        self.state = 1466
                        self.match(TeradataSQLDCLParser.MUL_SIGN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 1469
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 1470
                        localctx.scale = self.integer_literal()


                    self.state = 1473
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDCLParser.CHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Type_precisionContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_phraseContext,0)


        def GRAPHIC(self):
            return self.getToken(TeradataSQLDCLParser.GRAPHIC, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLDCLParser.VARCHAR, 0)

        def VARYING(self):
            return self.getToken(TeradataSQLDCLParser.VARYING, 0)

        def LONG(self):
            return self.getToken(TeradataSQLDCLParser.LONG, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDCLParser.VARGRAPHIC, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDCLParser.CLOB, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDCLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Max_length_k_m_gContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_data_type" ):
                listener.enterChar_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_data_type" ):
                listener.exitChar_data_type(self)




    def char_data_type(self):

        localctx = TeradataSQLDCLParser.Char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1478
                _la = self._input.LA(1)
                if not(_la==52 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1479
                    self.type_precision()


                self.state = 1483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1482
                    self.character_set_phrase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1485
                self.match(TeradataSQLDCLParser.GRAPHIC)
                self.state = 1487
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 1486
                    self.type_precision()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [464]:
                    self.state = 1489
                    self.match(TeradataSQLDCLParser.VARCHAR)
                    pass
                elif token in [55]:
                    self.state = 1490
                    self.match(TeradataSQLDCLParser.CHARACTER)
                    self.state = 1491
                    self.match(TeradataSQLDCLParser.VARYING)
                    pass
                elif token in [52]:
                    self.state = 1492
                    self.match(TeradataSQLDCLParser.CHAR)
                    self.state = 1493
                    self.match(TeradataSQLDCLParser.VARYING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1496
                self.type_precision()
                self.state = 1498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1497
                    self.character_set_phrase()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1500
                self.match(TeradataSQLDCLParser.LONG)
                self.state = 1501
                self.match(TeradataSQLDCLParser.VARCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1502
                self.match(TeradataSQLDCLParser.VARGRAPHIC)
                self.state = 1503
                self.type_precision()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1504
                self.match(TeradataSQLDCLParser.LONG)
                self.state = 1505
                self.match(TeradataSQLDCLParser.VARGRAPHIC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1510
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 1506
                    self.match(TeradataSQLDCLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 1507
                    self.match(TeradataSQLDCLParser.CHARACTER)
                    self.state = 1508
                    self.match(TeradataSQLDCLParser.LARGE)
                    self.state = 1509
                    self.match(TeradataSQLDCLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1512
                    self.max_length_k_m_g()


                self.state = 1516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1515
                    self.latin_unicode_character_set_phrase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precisionless_char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(TeradataSQLDCLParser.VARCHAR, 0)

        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_phraseContext,0)


        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDCLParser.VARGRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_precisionless_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecisionless_char_data_type" ):
                listener.enterPrecisionless_char_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecisionless_char_data_type" ):
                listener.exitPrecisionless_char_data_type(self)




    def precisionless_char_data_type(self):

        localctx = TeradataSQLDCLParser.Precisionless_char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_precisionless_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 1528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [464]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self.match(TeradataSQLDCLParser.VARCHAR)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 1521
                    self.character_set_phrase()


                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1524
                self.match(TeradataSQLDCLParser.VARGRAPHIC)
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 1525
                    self.character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_as_locator_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDCLParser.LOCATOR, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDCLParser.CLOB, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTER, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDCLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDCLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDCLParser.BINARY, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_lob_as_locator_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_as_locator_data_type" ):
                listener.enterLob_as_locator_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_as_locator_data_type" ):
                listener.exitLob_as_locator_data_type(self)




    def lob_as_locator_data_type(self):

        localctx = TeradataSQLDCLParser.Lob_as_locator_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_lob_as_locator_data_type)
        try:
            self.state = 1546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1534
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 1530
                    self.match(TeradataSQLDCLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 1531
                    self.match(TeradataSQLDCLParser.CHARACTER)
                    self.state = 1532
                    self.match(TeradataSQLDCLParser.LARGE)
                    self.state = 1533
                    self.match(TeradataSQLDCLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1536
                self.match(TeradataSQLDCLParser.AS)
                self.state = 1537
                self.match(TeradataSQLDCLParser.LOCATOR)
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 1538
                    self.match(TeradataSQLDCLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 1539
                    self.match(TeradataSQLDCLParser.BINARY)
                    self.state = 1540
                    self.match(TeradataSQLDCLParser.LARGE)
                    self.state = 1541
                    self.match(TeradataSQLDCLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1544
                self.match(TeradataSQLDCLParser.AS)
                self.state = 1545
                self.match(TeradataSQLDCLParser.LOCATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(TeradataSQLDCLParser.BYTE, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Type_precisionContext,0)


        def VARBYTE(self):
            return self.getToken(TeradataSQLDCLParser.VARBYTE, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDCLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDCLParser.BINARY, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDCLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Max_length_k_m_gContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_binary_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_data_type" ):
                listener.enterBinary_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_data_type" ):
                listener.exitBinary_data_type(self)




    def binary_data_type(self):

        localctx = TeradataSQLDCLParser.Binary_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_binary_data_type)
        try:
            self.state = 1563
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1548
                self.match(TeradataSQLDCLParser.BYTE)
                self.state = 1550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1549
                    self.type_precision()


                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1552
                self.match(TeradataSQLDCLParser.VARBYTE)
                self.state = 1553
                self.type_precision()
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1558
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 1554
                    self.match(TeradataSQLDCLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 1555
                    self.match(TeradataSQLDCLParser.BINARY)
                    self.state = 1556
                    self.match(TeradataSQLDCLParser.LARGE)
                    self.state = 1557
                    self.match(TeradataSQLDCLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1560
                    self.max_length_k_m_g()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datetime_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(TeradataSQLDCLParser.DATE, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDCLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.TIMESTAMP, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_period_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_datetime_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_type" ):
                listener.enterDatetime_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_type" ):
                listener.exitDatetime_type(self)




    def datetime_type(self):

        localctx = TeradataSQLDCLParser.Datetime_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_datetime_type)
        try:
            self.state = 1582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.match(TeradataSQLDCLParser.DATE)
                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1566
                self.match(TeradataSQLDCLParser.TIME)
                self.state = 1568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1567
                    self.type_precision()


                self.state = 1571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1570
                    self.with_time_zone()


                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1573
                self.match(TeradataSQLDCLParser.TIMESTAMP)
                self.state = 1575
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1574
                    self.type_precision()


                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1577
                    self.with_time_zone()


                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1580
                self.match(TeradataSQLDCLParser.INTERVAL)
                self.state = 1581
                self.interval_period_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDCLParser.PERIOD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDCLParser.DATE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDCLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_period_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_type" ):
                listener.enterPeriod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_type" ):
                listener.exitPeriod_type(self)




    def period_type(self):

        localctx = TeradataSQLDCLParser.Period_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_period_type)
        self._la = 0 # Token type
        try:
            self.state = 1608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(TeradataSQLDCLParser.PERIOD)
                self.state = 1585
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 1586
                self.match(TeradataSQLDCLParser.DATE)
                self.state = 1587
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.match(TeradataSQLDCLParser.PERIOD)
                self.state = 1589
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 1590
                self.match(TeradataSQLDCLParser.TIME)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1591
                    self.type_precision()


                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 1594
                    self.with_time_zone()


                self.state = 1597
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1598
                self.match(TeradataSQLDCLParser.PERIOD)
                self.state = 1599
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 1600
                self.match(TeradataSQLDCLParser.TIMESTAMP)
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1601
                    self.type_precision()


                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 1604
                    self.with_time_zone()


                self.state = 1607
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TeradataSQLDCLParser.XML, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDCLParser.XMLTYPE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SysudtlibContext,0)


        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Max_length_k_m_gContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Inline_lengthContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLDCLParser.JSON, 0)

        def max_length_k_m(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Max_length_k_mContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Latin_unicode_character_set_phraseContext,0)


        def json_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Json_storage_formatContext,0)


        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDCLParser.ST_GEOMETRY, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDCLParser.DATASET, 0)

        def dataset_storage_format_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Dataset_storage_format_clauseContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_udt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_type" ):
                listener.enterUdt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_type" ):
                listener.exitUdt_type(self)




    def udt_type(self):

        localctx = TeradataSQLDCLParser.Udt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_udt_type)
        self._la = 0 # Token type
        try:
            self.state = 1659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1610
                    self.sysudtlib()


                self.state = 1613
                _la = self._input.LA(1)
                if not(_la==1042 or _la==1059):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1614
                    self.max_length_k_m_g()


                self.state = 1618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 1617
                    self.inline_length()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1620
                    self.sysudtlib()


                self.state = 1623
                self.match(TeradataSQLDCLParser.JSON)
                self.state = 1625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1624
                    self.max_length_k_m()


                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1627
                    self.inline_length()


                self.state = 1632
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1630
                    self.latin_unicode_character_set_phrase()

                elif la_ == 2:
                    self.state = 1631
                    self.json_storage_format()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1634
                    self.sysudtlib()


                self.state = 1637
                self.match(TeradataSQLDCLParser.ST_GEOMETRY)
                self.state = 1639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1638
                    self.max_length_k_m()


                self.state = 1642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1641
                    self.inline_length()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 1644
                    self.sysudtlib()


                self.state = 1647
                self.match(TeradataSQLDCLParser.DATASET)
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1648
                    self.max_length_k_m()


                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==709:
                    self.state = 1651
                    self.inline_length()


                self.state = 1654
                self.dataset_storage_format_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1655
                    self.sysudtlib()


                self.state = 1658
                self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Format_phraseContext,0)


        def column_naming_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_naming_phraseContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_time_zoneContext,0)


        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.At_timezoneContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Default_value_control_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_data_type_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_attribute" ):
                listener.enterData_type_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_attribute" ):
                listener.exitData_type_attribute(self)




    def data_type_attribute(self):

        localctx = TeradataSQLDCLParser.Data_type_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_data_type_attribute)
        try:
            self.state = 1669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1663
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1664
                self.column_naming_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1665
                self.with_time_zone()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1666
                self.at_timezone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1667
                self.character_set_phrase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1668
                self.default_value_control_phrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_control_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TeradataSQLDCLParser.NULL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDCLParser.DEFAULT, 0)

        def default_value(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Default_valueContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_default_value_control_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_control_phrase" ):
                listener.enterDefault_value_control_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_control_phrase" ):
                listener.exitDefault_value_control_phrase(self)




    def default_value_control_phrase(self):

        localctx = TeradataSQLDCLParser.Default_value_control_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_default_value_control_phrase)
        self._la = 0 # Token type
        try:
            self.state = 1679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1671
                    self.match(TeradataSQLDCLParser.NOT)


                self.state = 1674
                self.match(TeradataSQLDCLParser.NULL)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1675
                self.match(TeradataSQLDCLParser.DEFAULT)
                self.state = 1676
                self.default_value()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1677
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 1678
                self.match(TeradataSQLDCLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Float_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.PLUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LiteralContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Builtin_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = TeradataSQLDCLParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_default_value)
        self._la = 0 # Token type
        try:
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1681
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1682
                self.float_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1683
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1684
                self.integer_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1685
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1686
                self.builtin_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_naming_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_column_naming_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_naming_phrase" ):
                listener.enterColumn_naming_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_naming_phrase" ):
                listener.exitColumn_naming_phrase(self)




    def column_naming_phrase(self):

        localctx = TeradataSQLDCLParser.Column_naming_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_column_naming_phrase)
        try:
            self.state = 1691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [262]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1689
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1690
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysudtlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDCLParser.SYSUDTLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_sysudtlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysudtlib" ):
                listener.enterSysudtlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysudtlib" ):
                listener.exitSysudtlib(self)




    def sysudtlib(self):

        localctx = TeradataSQLDCLParser.SysudtlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_sysudtlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.match(TeradataSQLDCLParser.SYSUDTLIB)
            self.state = 1694
            self.match(TeradataSQLDCLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_period_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDCLParser.YEAR, 0)

        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Type_precisionContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDCLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDCLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDCLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDCLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDCLParser.SECOND, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_interval_period_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_period_spec" ):
                listener.enterInterval_period_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_period_spec" ):
                listener.exitInterval_period_spec(self)




    def interval_period_spec(self):

        localctx = TeradataSQLDCLParser.Interval_period_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_interval_period_spec)
        self._la = 0 # Token type
        try:
            self.state = 1758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [478]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1696
                self.match(TeradataSQLDCLParser.YEAR)
                self.state = 1698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1697
                    self.type_precision()


                self.state = 1702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1700
                    self.match(TeradataSQLDCLParser.TO)
                    self.state = 1701
                    self.match(TeradataSQLDCLParser.MONTH)


                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1704
                self.match(TeradataSQLDCLParser.MONTH)
                self.state = 1706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1705
                    self.type_precision()


                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1708
                self.match(TeradataSQLDCLParser.DAY)
                self.state = 1710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1709
                    self.type_precision()


                self.state = 1721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1712
                    self.match(TeradataSQLDCLParser.TO)
                    self.state = 1713
                    self.match(TeradataSQLDCLParser.HOUR)

                elif la_ == 2:
                    self.state = 1714
                    self.match(TeradataSQLDCLParser.TO)
                    self.state = 1715
                    self.match(TeradataSQLDCLParser.MINUTE)

                elif la_ == 3:
                    self.state = 1716
                    self.match(TeradataSQLDCLParser.TO)
                    self.state = 1717
                    self.match(TeradataSQLDCLParser.SECOND)
                    self.state = 1719
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                    if la_ == 1:
                        self.state = 1718
                        self.type_precision()




                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1723
                self.match(TeradataSQLDCLParser.HOUR)
                self.state = 1725
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1724
                    self.type_precision()


                self.state = 1734
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1727
                    self.match(TeradataSQLDCLParser.TO)
                    self.state = 1728
                    self.match(TeradataSQLDCLParser.MINUTE)

                elif la_ == 2:
                    self.state = 1729
                    self.match(TeradataSQLDCLParser.TO)
                    self.state = 1730
                    self.match(TeradataSQLDCLParser.SECOND)
                    self.state = 1732
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1731
                        self.type_precision()




                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1736
                self.match(TeradataSQLDCLParser.MINUTE)
                self.state = 1738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1737
                    self.type_precision()


                self.state = 1745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1740
                    self.match(TeradataSQLDCLParser.TO)
                    self.state = 1741
                    self.match(TeradataSQLDCLParser.SECOND)
                    self.state = 1743
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1742
                        self.type_precision()




                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1747
                self.match(TeradataSQLDCLParser.SECOND)
                self.state = 1756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1748
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 1749
                    localctx.precision = self.integer_literal()
                    self.state = 1752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 1750
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 1751
                        localctx.fractional_precision = self.integer_literal()


                    self.state = 1754
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_precisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_type_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_precision" ):
                listener.enterType_precision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_precision" ):
                listener.exitType_precision(self)




    def type_precision(self):

        localctx = TeradataSQLDCLParser.Type_precisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_type_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 1761
            localctx.precision = self.integer_literal()
            self.state = 1762
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_m_gContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDCLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDCLParser.M, 0)

        def G(self):
            return self.getToken(TeradataSQLDCLParser.G, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_max_length_k_m_g

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m_g" ):
                listener.enterMax_length_k_m_g(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m_g" ):
                listener.exitMax_length_k_m_g(self)




    def max_length_k_m_g(self):

        localctx = TeradataSQLDCLParser.Max_length_k_m_gContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_max_length_k_m_g)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1764
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 1765
            localctx.max_length = self.integer_literal()
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==681 or _la==723 or _la==752:
                self.state = 1766
                _la = self._input.LA(1)
                if not(_la==681 or _la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1769
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_mContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDCLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDCLParser.M, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_max_length_k_m

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m" ):
                listener.enterMax_length_k_m(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m" ):
                listener.exitMax_length_k_m(self)




    def max_length_k_m(self):

        localctx = TeradataSQLDCLParser.Max_length_k_mContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_max_length_k_m)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 1772
            localctx.max_length = self.integer_literal()
            self.state = 1774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==723 or _la==752:
                self.state = 1773
                _la = self._input.LA(1)
                if not(_la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1776
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDCLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDCLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDCLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE, 0)

        def GRAPHIC(self):
            return self.getToken(TeradataSQLDCLParser.GRAPHIC, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDCLParser.KANJISJIS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_phrase" ):
                listener.enterCharacter_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_phrase" ):
                listener.exitCharacter_set_phrase(self)




    def character_set_phrase(self):

        localctx = TeradataSQLDCLParser.Character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1779
            self.match(TeradataSQLDCLParser.SET)
            self.state = 1780
            _la = self._input.LA(1)
            if not(_la==173 or _la==725 or _la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uppercase_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPPERCASE(self):
            return self.getToken(TeradataSQLDCLParser.UPPERCASE, 0)

        def UC(self):
            return self.getToken(TeradataSQLDCLParser.UC, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_uppercase_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUppercase_phrase" ):
                listener.enterUppercase_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUppercase_phrase" ):
                listener.exitUppercase_phrase(self)




    def uppercase_phrase(self):

        localctx = TeradataSQLDCLParser.Uppercase_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_uppercase_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1782
            _la = self._input.LA(1)
            if not(_la==438 or _la==455):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Casespecific_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.not_ = None # Token

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLDCLParser.CASESPECIFIC, 0)

        def CS(self):
            return self.getToken(TeradataSQLDCLParser.CS, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)

        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_casespecific_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasespecific_phrase" ):
                listener.enterCasespecific_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasespecific_phrase" ):
                listener.exitCasespecific_phrase(self)




    def casespecific_phrase(self):

        localctx = TeradataSQLDCLParser.Casespecific_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_casespecific_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==1211:
                self.state = 1784
                localctx.not_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    localctx.not_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1787
            _la = self._input.LA(1)
            if not(_la==49 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_ = None # Char_string_literalContext
            self.date_format = None # Token
            self.time_format = None # Token

        def FORMAT(self):
            return self.getToken(TeradataSQLDCLParser.FORMAT, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def DATE_STRING(self):
            return self.getToken(TeradataSQLDCLParser.DATE_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDCLParser.TIME_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_format_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_phrase" ):
                listener.enterFormat_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_phrase" ):
                listener.exitFormat_phrase(self)




    def format_phrase(self):

        localctx = TeradataSQLDCLParser.Format_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_format_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(TeradataSQLDCLParser.FORMAT)
            self.state = 1793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 1790
                localctx.format_ = self.char_string_literal()
                pass
            elif token in [1198]:
                self.state = 1791
                localctx.date_format = self.match(TeradataSQLDCLParser.DATE_STRING)
                pass
            elif token in [1199]:
                self.state = 1792
                localctx.time_format = self.match(TeradataSQLDCLParser.TIME_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def TITLE(self):
            return self.getToken(TeradataSQLDCLParser.TITLE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitle_phrase" ):
                listener.enterTitle_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitle_phrase" ):
                listener.exitTitle_phrase(self)




    def title_phrase(self):

        localctx = TeradataSQLDCLParser.Title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(TeradataSQLDCLParser.TITLE)
            self.state = 1796
            localctx.title = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMED(self):
            return self.getToken(TeradataSQLDCLParser.NAMED, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_named_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_phrase" ):
                listener.enterNamed_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_phrase" ):
                listener.exitNamed_phrase(self)




    def named_phrase(self):

        localctx = TeradataSQLDCLParser.Named_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_named_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.match(TeradataSQLDCLParser.NAMED)
            self.state = 1799
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Latin_unicode_character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDCLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDCLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDCLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_latin_unicode_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLatin_unicode_character_set_phrase" ):
                listener.enterLatin_unicode_character_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLatin_unicode_character_set_phrase" ):
                listener.exitLatin_unicode_character_set_phrase(self)




    def latin_unicode_character_set_phrase(self):

        localctx = TeradataSQLDCLParser.Latin_unicode_character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_latin_unicode_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1802
            self.match(TeradataSQLDCLParser.SET)
            self.state = 1803
            _la = self._input.LA(1)
            if not(_la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_lengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.length = None # Integer_literalContext

        def INLINE(self):
            return self.getToken(TeradataSQLDCLParser.INLINE, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.LENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_inline_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_length" ):
                listener.enterInline_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_length" ):
                listener.exitInline_length(self)




    def inline_length(self):

        localctx = TeradataSQLDCLParser.Inline_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_inline_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1805
            self.match(TeradataSQLDCLParser.INLINE)
            self.state = 1806
            self.match(TeradataSQLDCLParser.LENGTH)
            self.state = 1807
            localctx.length = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDCLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDCLParser.FORMAT, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDCLParser.BSON, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDCLParser.UBJSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_json_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_storage_format" ):
                listener.enterJson_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_storage_format" ):
                listener.exitJson_storage_format(self)




    def json_storage_format(self):

        localctx = TeradataSQLDCLParser.Json_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_json_storage_format)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.match(TeradataSQLDCLParser.STORAGE)
            self.state = 1810
            self.match(TeradataSQLDCLParser.FORMAT)
            self.state = 1811
            _la = self._input.LA(1)
            if not(_la==556 or _la==1010):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDCLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDCLParser.FORMAT, 0)

        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Dataset_storage_formatContext,0)


        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_schemaContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_dataset_storage_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format_clause" ):
                listener.enterDataset_storage_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format_clause" ):
                listener.exitDataset_storage_format_clause(self)




    def dataset_storage_format_clause(self):

        localctx = TeradataSQLDCLParser.Dataset_storage_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_dataset_storage_format_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.match(TeradataSQLDCLParser.STORAGE)
            self.state = 1814
            self.match(TeradataSQLDCLParser.FORMAT)
            self.state = 1815
            self.dataset_storage_format()
            self.state = 1817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1816
                self.with_schema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVRO(self):
            return self.getToken(TeradataSQLDCLParser.AVRO, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDCLParser.CSV, 0)

        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_dataset_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format" ):
                listener.enterDataset_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format" ):
                listener.exitDataset_storage_format(self)




    def dataset_storage_format(self):

        localctx = TeradataSQLDCLParser.Dataset_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_dataset_storage_format)
        try:
            self.state = 1824
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [545]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1819
                self.match(TeradataSQLDCLParser.AVRO)
                pass
            elif token in [1073]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1820
                self.match(TeradataSQLDCLParser.CSV)
                self.state = 1822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                if la_ == 1:
                    self.state = 1821
                    self.latin_unicode_character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Table_nameContext

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDCLParser.SCHEMA, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_schema" ):
                listener.enterWith_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_schema" ):
                listener.exitWith_schema(self)




    def with_schema(self):

        localctx = TeradataSQLDCLParser.With_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_with_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 1827
            self.match(TeradataSQLDCLParser.SCHEMA)
            self.state = 1828
            localctx.schema_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDCLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDCLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_time_zone" ):
                listener.enterWith_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_time_zone" ):
                listener.exitWith_time_zone(self)




    def with_time_zone(self):

        localctx = TeradataSQLDCLParser.With_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_with_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 1831
            self.match(TeradataSQLDCLParser.TIME)
            self.state = 1832
            self.match(TeradataSQLDCLParser.ZONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hex_byte_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Hex_byte_literalContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Hex_char_string_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def hex_integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Hex_integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Float_literalContext,0)


        def date_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Date_literalContext,0)


        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Time_literalContext,0)


        def timestamp_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Timestamp_literalContext,0)


        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_literalContext,0)


        def period_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Period_literalContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLDCLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = TeradataSQLDCLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_literal)
        try:
            self.state = 1847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1834
                self.hex_byte_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1835
                self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1836
                self.unicode_char_string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1837
                self.hex_char_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1838
                self.integer_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1839
                self.hex_integer_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1840
                self.float_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1841
                self.date_literal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1842
                self.time_literal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1843
                self.timestamp_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1844
                self.interval_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1845
                self.period_literal()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1846
                self.match(TeradataSQLDCLParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_byte_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_BYTE_LITERAL(self):
            return self.getToken(TeradataSQLDCLParser.HEX_BYTE_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_hex_byte_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_byte_literal" ):
                listener.enterHex_byte_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_byte_literal" ):
                listener.exitHex_byte_literal(self)




    def hex_byte_literal(self):

        localctx = TeradataSQLDCLParser.Hex_byte_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_hex_byte_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1849
            self.match(TeradataSQLDCLParser.HEX_BYTE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_prefixContext,0)


        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDCLParser.CHAR_STRING, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_string_literal" ):
                listener.enterChar_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_string_literal" ):
                listener.exitChar_string_literal(self)




    def char_string_literal(self):

        localctx = TeradataSQLDCLParser.Char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 1851
                self.character_set_prefix()


            self.state = 1855 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1854
                    self.match(TeradataSQLDCLParser.CHAR_STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 1857 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_STRING_LEADING(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE_STRING_LEADING, 0)

        def UESCAPE(self):
            return self.getToken(TeradataSQLDCLParser.UESCAPE, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDCLParser.CHAR_STRING, i)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unicode_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_char_string_literal" ):
                listener.enterUnicode_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_char_string_literal" ):
                listener.exitUnicode_char_string_literal(self)




    def unicode_char_string_literal(self):

        localctx = TeradataSQLDCLParser.Unicode_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_unicode_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 1859
                self.character_set_prefix()


            self.state = 1862
            self.match(TeradataSQLDCLParser.UNICODE_STRING_LEADING)
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1203:
                self.state = 1863
                self.match(TeradataSQLDCLParser.CHAR_STRING)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1869
            self.match(TeradataSQLDCLParser.UESCAPE)
            self.state = 1870
            self.match(TeradataSQLDCLParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_STRING(self):
            return self.getToken(TeradataSQLDCLParser.HEX_STRING, 0)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_hex_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_char_string_literal" ):
                listener.enterHex_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_char_string_literal" ):
                listener.exitHex_char_string_literal(self)




    def hex_char_string_literal(self):

        localctx = TeradataSQLDCLParser.Hex_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_hex_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 1872
                self.character_set_prefix()


            self.state = 1875
            self.match(TeradataSQLDCLParser.HEX_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDCLParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = TeradataSQLDCLParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.match(TeradataSQLDCLParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(TeradataSQLDCLParser.HEX_INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_hex_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_integer_literal" ):
                listener.enterHex_integer_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_integer_literal" ):
                listener.exitHex_integer_literal(self)




    def hex_integer_literal(self):

        localctx = TeradataSQLDCLParser.Hex_integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_hex_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1879
            self.match(TeradataSQLDCLParser.HEX_INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(TeradataSQLDCLParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)




    def float_literal(self):

        localctx = TeradataSQLDCLParser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1881
            self.match(TeradataSQLDCLParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDCLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDCLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDCLParser.CS_GRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_character_set_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_prefix" ):
                listener.enterCharacter_set_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_prefix" ):
                listener.exitCharacter_set_prefix(self)




    def character_set_prefix(self):

        localctx = TeradataSQLDCLParser.Character_set_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_character_set_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            _la = self._input.LA(1)
            if not(((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDCLParser.DATE_STRING, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDCLParser.DATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_date_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_literal" ):
                listener.enterDate_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_literal" ):
                listener.exitDate_literal(self)




    def date_literal(self):

        localctx = TeradataSQLDCLParser.Date_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_date_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 1885
                self.match(TeradataSQLDCLParser.DATE)


            self.state = 1888
            self.match(TeradataSQLDCLParser.DATE_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDCLParser.TIME_STRING, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDCLParser.TIME, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_time_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_literal" ):
                listener.enterTime_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_literal" ):
                listener.exitTime_literal(self)




    def time_literal(self):

        localctx = TeradataSQLDCLParser.Time_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_time_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 1890
                self.match(TeradataSQLDCLParser.TIME)


            self.state = 1893
            self.match(TeradataSQLDCLParser.TIME_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timestamp_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDCLParser.TIMESTAMP_STRING, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_timestamp_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestamp_literal" ):
                listener.enterTimestamp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestamp_literal" ):
                listener.exitTimestamp_literal(self)




    def timestamp_literal(self):

        localctx = TeradataSQLDCLParser.Timestamp_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_timestamp_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==422:
                self.state = 1895
                self.match(TeradataSQLDCLParser.TIMESTAMP)


            self.state = 1898
            self.match(TeradataSQLDCLParser.TIMESTAMP_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.INTERVAL, 0)

        def interval_qualifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_qualifierContext,0)


        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDCLParser.CHAR_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDCLParser.TIME_STRING, 0)

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDCLParser.DATE_STRING, 0)

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDCLParser.TIMESTAMP_STRING, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_interval_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_literal" ):
                listener.enterInterval_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_literal" ):
                listener.exitInterval_literal(self)




    def interval_literal(self):

        localctx = TeradataSQLDCLParser.Interval_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_interval_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(TeradataSQLDCLParser.INTERVAL)
            self.state = 1902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 1901
                self.match(TeradataSQLDCLParser.MINUS_SIGN)


            self.state = 1904
            _la = self._input.LA(1)
            if not(((((_la - 1198)) & ~0x3f) == 0 and ((1 << (_la - 1198)) & 39) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1905
            self.interval_qualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(TeradataSQLDCLParser.YEAR, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDCLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDCLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDCLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDCLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDCLParser.SECOND, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_interval_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_qualifier" ):
                listener.enterInterval_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_qualifier" ):
                listener.exitInterval_qualifier(self)




    def interval_qualifier(self):

        localctx = TeradataSQLDCLParser.Interval_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_interval_qualifier)
        try:
            self.state = 1934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1907
                self.match(TeradataSQLDCLParser.YEAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1908
                self.match(TeradataSQLDCLParser.YEAR)
                self.state = 1909
                self.match(TeradataSQLDCLParser.TO)
                self.state = 1910
                self.match(TeradataSQLDCLParser.MONTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1911
                self.match(TeradataSQLDCLParser.MONTH)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1912
                self.match(TeradataSQLDCLParser.DAY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1913
                self.match(TeradataSQLDCLParser.DAY)
                self.state = 1914
                self.match(TeradataSQLDCLParser.TO)
                self.state = 1915
                self.match(TeradataSQLDCLParser.HOUR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1916
                self.match(TeradataSQLDCLParser.DAY)
                self.state = 1917
                self.match(TeradataSQLDCLParser.TO)
                self.state = 1918
                self.match(TeradataSQLDCLParser.MINUTE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1919
                self.match(TeradataSQLDCLParser.DAY)
                self.state = 1920
                self.match(TeradataSQLDCLParser.TO)
                self.state = 1921
                self.match(TeradataSQLDCLParser.SECOND)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1922
                self.match(TeradataSQLDCLParser.HOUR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1923
                self.match(TeradataSQLDCLParser.HOUR)
                self.state = 1924
                self.match(TeradataSQLDCLParser.TO)
                self.state = 1925
                self.match(TeradataSQLDCLParser.MINUTE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1926
                self.match(TeradataSQLDCLParser.HOUR)
                self.state = 1927
                self.match(TeradataSQLDCLParser.TO)
                self.state = 1928
                self.match(TeradataSQLDCLParser.SECOND)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1929
                self.match(TeradataSQLDCLParser.MINUTE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1930
                self.match(TeradataSQLDCLParser.MINUTE)
                self.state = 1931
                self.match(TeradataSQLDCLParser.TO)
                self.state = 1932
                self.match(TeradataSQLDCLParser.SECOND)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1933
                self.match(TeradataSQLDCLParser.SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDCLParser.PERIOD, 0)

        def PERIOD_STRING(self):
            return self.getToken(TeradataSQLDCLParser.PERIOD_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_period_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_literal" ):
                listener.enterPeriod_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_literal" ):
                listener.exitPeriod_literal(self)




    def period_literal(self):

        localctx = TeradataSQLDCLParser.Period_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_period_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.match(TeradataSQLDCLParser.PERIOD)
            self.state = 1937
            self.match(TeradataSQLDCLParser.PERIOD_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unqualified_table_name = None # Unqualified_nameContext

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDCLParser.DOT_, i)

        def unqualified_column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_column_nameContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = TeradataSQLDCLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_column_name)
        try:
            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self.database_name()
                self.state = 1940
                self.match(TeradataSQLDCLParser.DOT_)
                self.state = 1941
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 1942
                self.match(TeradataSQLDCLParser.DOT_)
                self.state = 1943
                self.unqualified_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1945
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 1946
                self.match(TeradataSQLDCLParser.DOT_)
                self.state = 1947
                self.unqualified_column_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1949
                self.unqualified_column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def SAMPLEID(self):
            return self.getToken(TeradataSQLDCLParser.SAMPLEID, 0)

        def ROWID(self):
            return self.getToken(TeradataSQLDCLParser.ROWID, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unqualified_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_column_name" ):
                listener.enterUnqualified_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_column_name" ):
                listener.exitUnqualified_column_name(self)




    def unqualified_column_name(self):

        localctx = TeradataSQLDCLParser.Unqualified_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_unqualified_column_name)
        try:
            self.state = 1956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1952
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1953
                self.nonreserved_word()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1954
                self.match(TeradataSQLDCLParser.SAMPLEID)
                pass
            elif token in [363]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1955
                self.match(TeradataSQLDCLParser.ROWID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)




    def unqualified_name(self):

        localctx = TeradataSQLDCLParser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unqualified_name)
        try:
            self.state = 1960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1958
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1959
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name" ):
                listener.enterObject_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name" ):
                listener.exitObject_name(self)




    def object_name(self):

        localctx = TeradataSQLDCLParser.Object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1962
                self.database_name()
                self.state = 1963
                self.match(TeradataSQLDCLParser.DOT_)


            self.state = 1969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1967
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1968
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TeradataSQLDCLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1971
                self.database_name()
                self.state = 1972
                self.match(TeradataSQLDCLParser.DOT_)


            self.state = 1978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1976
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1977
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = TeradataSQLDCLParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_procedure_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1980
                self.database_name()
                self.state = 1981
                self.match(TeradataSQLDCLParser.DOT_)


            self.state = 1987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1985
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1986
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = TeradataSQLDCLParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1989
                self.database_name()
                self.state = 1990
                self.match(TeradataSQLDCLParser.DOT_)


            self.state = 1996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1994
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1995
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_macro_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_name" ):
                listener.enterMacro_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_name" ):
                listener.exitMacro_name(self)




    def macro_name(self):

        localctx = TeradataSQLDCLParser.Macro_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_macro_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1998
                self.database_name()
                self.state = 1999
                self.match(TeradataSQLDCLParser.DOT_)


            self.state = 2005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 2003
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 2004
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = TeradataSQLDCLParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_database_name)
        try:
            self.state = 2009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2007
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2008
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_user_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_name" ):
                listener.enterUser_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_name" ):
                listener.exitUser_name(self)




    def user_name(self):

        localctx = TeradataSQLDCLParser.User_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_user_name)
        try:
            self.state = 2013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2011
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2012
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDCLParser.ADMIN, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = TeradataSQLDCLParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_role_name)
        try:
            self.state = 2018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2015
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2016
                self.match(TeradataSQLDCLParser.ADMIN)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2017
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_profile_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_name" ):
                listener.enterProfile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_name" ):
                listener.exitProfile_name(self)




    def profile_name(self):

        localctx = TeradataSQLDCLParser.Profile_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_profile_name)
        try:
            self.state = 2022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2021
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_name" ):
                listener.enterAlias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_name" ):
                listener.exitAlias_name(self)




    def alias_name(self):

        localctx = TeradataSQLDCLParser.Alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_alias_name)
        try:
            self.state = 2026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2024
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2025
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = TeradataSQLDCLParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_variable_name)
        try:
            self.state = 2030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2028
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2029
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = TeradataSQLDCLParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_parameter_name)
        try:
            self.state = 2034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2032
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2033
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = TeradataSQLDCLParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_label_name)
        try:
            self.state = 2038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2036
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2037
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_condition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_name" ):
                listener.enterCondition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_name" ):
                listener.exitCondition_name(self)




    def condition_name(self):

        localctx = TeradataSQLDCLParser.Condition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_condition_name)
        try:
            self.state = 2042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2040
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TeradataSQLDCLParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_cursor_name)
        try:
            self.state = 2046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2044
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2045
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_statement_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_name" ):
                listener.enterStatement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_name" ):
                listener.exitStatement_name(self)




    def statement_name(self):

        localctx = TeradataSQLDCLParser.Statement_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_statement_name)
        try:
            self.state = 2050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2048
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2049
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statistics_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_statistics_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatistics_name" ):
                listener.enterStatistics_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatistics_name" ):
                listener.exitStatistics_name(self)




    def statistics_name(self):

        localctx = TeradataSQLDCLParser.Statistics_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_statistics_name)
        try:
            self.state = 2054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2052
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2053
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_udt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_name" ):
                listener.enterUdt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_name" ):
                listener.exitUdt_name(self)




    def udt_name(self):

        localctx = TeradataSQLDCLParser.Udt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_udt_name)
        try:
            self.state = 2058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2056
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2057
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = TeradataSQLDCLParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_attribute_name)
        try:
            self.state = 2062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2060
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2061
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDCLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)




    def method_name(self):

        localctx = TeradataSQLDCLParser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_method_name)
        try:
            self.state = 2066
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2064
                self.match(TeradataSQLDCLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2065
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anchor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_SECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_HOUR, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDCLParser.DAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDCLParser.WEEK_END, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDCLParser.MONTH_END, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDCLParser.QUARTER_END, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDCLParser.YEAR_END, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDCLParser.MONDAY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDCLParser.TUESDAY, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDCLParser.WEDNESDAY, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDCLParser.THURSDAY, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDCLParser.FRIDAY, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDCLParser.SATURDAY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDCLParser.SUNDAY, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_anchor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnchor_name" ):
                listener.enterAnchor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnchor_name" ):
                listener.exitAnchor_name(self)




    def anchor_name(self):

        localctx = TeradataSQLDCLParser.Anchor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_anchor_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            _la = self._input.LA(1)
            if not(_la==106 or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & 15) != 0) or _la==678 or ((((_la - 774)) & ~0x3f) == 0 and ((1 << (_la - 774)) & 49) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 2199023255555) != 0) or ((((_la - 949)) & ~0x3f) == 0 and ((1 << (_la - 949)) & 1152921573326323713) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & 103079215111) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreserved_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSIONS(self):
            return self.getToken(TeradataSQLDCLParser.ABORTSESSIONS, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDCLParser.ABSENT, 0)

        def ACCESS(self):
            return self.getToken(TeradataSQLDCLParser.ACCESS, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDCLParser.ACCORDING, 0)

        def ACCUMULATE(self):
            return self.getToken(TeradataSQLDCLParser.ACCUMULATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLDCLParser.AG, 0)

        def AGGGEOMINTERSECTION(self):
            return self.getToken(TeradataSQLDCLParser.AGGGEOMINTERSECTION, 0)

        def AGGGEOMUNION(self):
            return self.getToken(TeradataSQLDCLParser.AGGGEOMUNION, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLDCLParser.ALLDBQL, 0)

        def ALLOCATE(self):
            return self.getToken(TeradataSQLDCLParser.ALLOCATE, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDCLParser.ALLOCATION, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLDCLParser.ALLOW, 0)

        def ALLPARAMS(self):
            return self.getToken(TeradataSQLDCLParser.ALLPARAMS, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLDCLParser.ALLTDWM, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLDCLParser.ALWAYS, 0)

        def AMPCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.AMPCOUNT, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDCLParser.ANALYSIS, 0)

        def ANCHOR(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_HOUR, 0)

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR_SECOND, 0)

        def APPLNAME(self):
            return self.getToken(TeradataSQLDCLParser.APPLNAME, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLDCLParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_ADD, 0)

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_AGG, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_AVG, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_COMPARE, 0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_CONCAT, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_DIV, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_EQ, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GE, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GET, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_LE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_LT, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MIN, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MOD, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MUL, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_NE, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_SUB, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_SUM, 0)

        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_UPDATE_STRIDE, 0)

        def ASCII(self):
            return self.getToken(TeradataSQLDCLParser.ASCII, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLDCLParser.ASSIGNMENT, 0)

        def ATTR(self):
            return self.getToken(TeradataSQLDCLParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLDCLParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLDCLParser.ATTRIBUTES, 0)

        def ATTRIBUTION(self):
            return self.getToken(TeradataSQLDCLParser.ATTRIBUTION, 0)

        def ATTRS(self):
            return self.getToken(TeradataSQLDCLParser.ATTRS, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDCLParser.AUTH, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLDCLParser.AUTO, 0)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLDCLParser.AUTOTEMP, 0)

        def AVRO(self):
            return self.getToken(TeradataSQLDCLParser.AVRO, 0)

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.BIT_LENGTH, 0)

        def BITAND(self):
            return self.getToken(TeradataSQLDCLParser.BITAND, 0)

        def BITNOT(self):
            return self.getToken(TeradataSQLDCLParser.BITNOT, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDCLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDCLParser.BITXOR, 0)

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLDCLParser.BLOCKCOMPRESSION, 0)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLDCLParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLDCLParser.BLOCKCOMPRESSIONLEVEL, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDCLParser.BOM, 0)

        def BOTTOM(self):
            return self.getToken(TeradataSQLDCLParser.BOTTOM, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDCLParser.BSON, 0)

        def C(self):
            return self.getToken(TeradataSQLDCLParser.C, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.CALENDAR, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDCLParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TeradataSQLDCLParser.CALLER, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDCLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDCLParser.CAMSET_L, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLDCLParser.CAPTURE, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDCLParser.CARDINALITY, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDCLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDCLParser.CEILING, 0)

        def CHANGERATE(self):
            return self.getToken(TeradataSQLDCLParser.CHANGERATE, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTERISTICS, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDCLParser.CHARSET, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLDCLParser.CHARSET_COLL, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDCLParser.CHECKSUM, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDCLParser.CHR, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDCLParser.CLASS_ORIGIN, 0)

        def CLICKLAG(self):
            return self.getToken(TeradataSQLDCLParser.CLICKLAG, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLDCLParser.CLIENT, 0)

        def CNT(self):
            return self.getToken(TeradataSQLDCLParser.CNT, 0)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDCLParser.COLOCATE, 0)

        def COLUMNMETA(self):
            return self.getToken(TeradataSQLDCLParser.COLUMNMETA, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLDCLParser.COLUMNS, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLDCLParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLDCLParser.COLUMNSPERJOININDEX, 0)

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLDCLParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLDCLParser.COMMAND_FUNCTION_CODE, 0)

        def COMPARISON(self):
            return self.getToken(TeradataSQLDCLParser.COMPARISON, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLDCLParser.COMPILE, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDCLParser.CONCAT, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLDCLParser.CONCURRENT, 0)

        def CONDITION(self):
            return self.getToken(TeradataSQLDCLParser.CONDITION, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLDCLParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLDCLParser.CONDITION_NUMBER, 0)

        def CONTAINED(self):
            return self.getToken(TeradataSQLDCLParser.CONTAINED, 0)

        def CONTAINEDTOKEN(self):
            return self.getToken(TeradataSQLDCLParser.CONTAINEDTOKEN, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDCLParser.CONTENT, 0)

        def CONTIGUOUS(self):
            return self.getToken(TeradataSQLDCLParser.CONTIGUOUS, 0)

        def COST(self):
            return self.getToken(TeradataSQLDCLParser.COST, 0)

        def COSTS(self):
            return self.getToken(TeradataSQLDCLParser.COSTS, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDCLParser.COUNTSET, 0)

        def CPP(self):
            return self.getToken(TeradataSQLDCLParser.CPP, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLDCLParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLDCLParser.CPUTIMENORM, 0)

        def CREATEDATASET(self):
            return self.getToken(TeradataSQLDCLParser.CREATEDATASET, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLDCLParser.CREATOR, 0)

        def CUME_DIST(self):
            return self.getToken(TeradataSQLDCLParser.CUME_DIST, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDCLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDCLParser.CURTIME, 0)

        def DATA(self):
            return self.getToken(TeradataSQLDCLParser.DATA, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDCLParser.DATASET, 0)

        def DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.DAY_OF_CALENDAR, 0)

        def DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.DAY_OF_MONTH, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDCLParser.DAY_OF_WEEK, 0)

        def DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.DAY_OF_YEAR, 0)

        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def DBA(self):
            return self.getToken(TeradataSQLDCLParser.DBA, 0)

        def DBC(self):
            return self.getToken(TeradataSQLDCLParser.DBC, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLDCLParser.DEBUG, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDCLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDCLParser.DECAMSET_L, 0)

        def DECODE(self):
            return self.getToken(TeradataSQLDCLParser.DECODE, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.DECOMPRESS, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDCLParser.DEFINER, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDCLParser.DELIMITER, 0)

        def DELTA_T(self):
            return self.getToken(TeradataSQLDCLParser.DELTA_T, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDCLParser.DEMOGRAPHICS, 0)

        def DENIALS(self):
            return self.getToken(TeradataSQLDCLParser.DENIALS, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDCLParser.DENSE, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDCLParser.DENSE_RANK, 0)

        def DESCRIBE(self):
            return self.getToken(TeradataSQLDCLParser.DESCRIBE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLDCLParser.DETAILED, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLDCLParser.DIAGNOSTICS, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLDCLParser.DIGITS, 0)

        def DIMENSION(self):
            return self.getToken(TeradataSQLDCLParser.DIMENSION, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDCLParser.DOCUMENT, 0)

        def DOT(self):
            return self.getToken(TeradataSQLDCLParser.DOT, 0)

        def DOWN(self):
            return self.getToken(TeradataSQLDCLParser.DOWN, 0)

        def DR(self):
            return self.getToken(TeradataSQLDCLParser.DR, 0)

        def DUPCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.DUPCOUNT, 0)

        def DUPCOUNTCUM(self):
            return self.getToken(TeradataSQLDCLParser.DUPCOUNTCUM, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLDCLParser.EBCDIC, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDCLParser.EDITDISTANCE, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLDCLParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLDCLParser.ELAPSEDTIME, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDCLParser.ELEMENT, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLDCLParser.ELZS_H, 0)

        def EMITNULL(self):
            return self.getToken(TeradataSQLDCLParser.EMITNULL, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDCLParser.EMPTY, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDCLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDCLParser.EMPTY_CLOB, 0)

        def ENCODE(self):
            return self.getToken(TeradataSQLDCLParser.ENCODE, 0)

        def ENCODING(self):
            return self.getToken(TeradataSQLDCLParser.ENCODING, 0)

        def ENCRYPT(self):
            return self.getToken(TeradataSQLDCLParser.ENCRYPT, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLDCLParser.ERRORS, 0)

        def ERRORTBL(self):
            return self.getToken(TeradataSQLDCLParser.ERRORTBL, 0)

        def EVENTCOLUMN(self):
            return self.getToken(TeradataSQLDCLParser.EVENTCOLUMN, 0)

        def EXCEPTION(self):
            return self.getToken(TeradataSQLDCLParser.EXCEPTION, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDCLParser.EXCL, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDCLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDCLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDCLParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLDCLParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLDCLParser.EXPORT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLDCLParser.EXPORTWIDTH, 0)

        def FALSE(self):
            return self.getToken(TeradataSQLDCLParser.FALSE, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLDCLParser.FEATUREINFO, 0)

        def FILE(self):
            return self.getToken(TeradataSQLDCLParser.FILE, 0)

        def FILL(self):
            return self.getToken(TeradataSQLDCLParser.FILL, 0)

        def FILTER(self):
            return self.getToken(TeradataSQLDCLParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLDCLParser.FINAL, 0)

        def FIRST_NOTNULL(self):
            return self.getToken(TeradataSQLDCLParser.FIRST_NOTNULL, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDCLParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDCLParser.FLOOR, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataSQLDCLParser.FOLLOWING, 0)

        def FOREIGNFUNCTION(self):
            return self.getToken(TeradataSQLDCLParser.FOREIGNFUNCTION, 0)

        def FORTOKEN(self):
            return self.getToken(TeradataSQLDCLParser.FORTOKEN, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDCLParser.FRIDAY, 0)

        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDCLParser.FROM_BYTES, 0)

        def FUNCTIONPARAMETER(self):
            return self.getToken(TeradataSQLDCLParser.FUNCTIONPARAMETER, 0)

        def G(self):
            return self.getToken(TeradataSQLDCLParser.G, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDCLParser.GETBIT, 0)

        def GETPSFVERSION(self):
            return self.getToken(TeradataSQLDCLParser.GETPSFVERSION, 0)

        def GETQUERYBAND(self):
            return self.getToken(TeradataSQLDCLParser.GETQUERYBAND, 0)

        def GETQUERYBANDVALUE(self):
            return self.getToken(TeradataSQLDCLParser.GETQUERYBANDVALUE, 0)

        def GETTIMEZONEDISPLACEMENT(self):
            return self.getToken(TeradataSQLDCLParser.GETTIMEZONEDISPLACEMENT, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLDCLParser.GLOBAL, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDCLParser.GLOP, 0)

        def GREATEST(self):
            return self.getToken(TeradataSQLDCLParser.GREATEST, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDCLParser.HIGH, 0)

        def HOST(self):
            return self.getToken(TeradataSQLDCLParser.HOST, 0)

        def IDENTIFYDATABASE(self):
            return self.getToken(TeradataSQLDCLParser.IDENTIFYDATABASE, 0)

        def IDENTIFYSESSION(self):
            return self.getToken(TeradataSQLDCLParser.IDENTIFYSESSION, 0)

        def IDENTIFYTABLE(self):
            return self.getToken(TeradataSQLDCLParser.IDENTIFYTABLE, 0)

        def IDENTIFYUSER(self):
            return self.getToken(TeradataSQLDCLParser.IDENTIFYUSER, 0)

        def IFP(self):
            return self.getToken(TeradataSQLDCLParser.IFP, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDCLParser.IGNORE, 0)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDCLParser.IMMEDIATELY, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLDCLParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(TeradataSQLDCLParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLDCLParser.INCREMENTAL, 0)

        def INDENT(self):
            return self.getToken(TeradataSQLDCLParser.INDENT, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLDCLParser.INDEXESPERTABLE, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLDCLParser.INDEXMAINTMODE, 0)

        def INIT(self):
            return self.getToken(TeradataSQLDCLParser.INIT, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDCLParser.INITCAP, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLDCLParser.INLINE, 0)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLDCLParser.INSTANTIABLE, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDCLParser.INSTR, 0)

        def INTERNAL(self):
            return self.getToken(TeradataSQLDCLParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDCLParser.INVOKER, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.IOCOUNT, 0)

        def IPARTITION(self):
            return self.getToken(TeradataSQLDCLParser.IPARTITION, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDCLParser.ISOLATED, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLDCLParser.ISOLATION, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDCLParser.JAVA, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLDCLParser.JIS_COLL, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDCLParser.JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDCLParser.JSON_AGG, 0)

        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDCLParser.JSON_COMPOSE, 0)

        def K(self):
            return self.getToken(TeradataSQLDCLParser.K, 0)

        def KANJI1(self):
            return self.getToken(TeradataSQLDCLParser.KANJI1, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDCLParser.KANJISJIS, 0)

        def KBYTE(self):
            return self.getToken(TeradataSQLDCLParser.KBYTE, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLDCLParser.KBYTES, 0)

        def KEEP(self):
            return self.getToken(TeradataSQLDCLParser.KEEP, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLDCLParser.KILOBYTES, 0)

        def LAG(self):
            return self.getToken(TeradataSQLDCLParser.LAG, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDCLParser.LAST, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDCLParser.LAST_DAY, 0)

        def LAST_NOTNULL(self):
            return self.getToken(TeradataSQLDCLParser.LAST_NOTNULL, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDCLParser.LAST_VALUE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDCLParser.LATIN, 0)

        def LDIFF(self):
            return self.getToken(TeradataSQLDCLParser.LDIFF, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDCLParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDCLParser.LEAST, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.LENGTH, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLDCLParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TeradataSQLDCLParser.LIST, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDCLParser.LOAD, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDCLParser.LOCATE, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLDCLParser.LOCKEDUSEREXPIRE, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDCLParser.LOW, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDCLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDCLParser.LTRIM, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDCLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDCLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDCLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDCLParser.LZDECOMP_L, 0)

        def M(self):
            return self.getToken(TeradataSQLDCLParser.M, 0)

        def MAD(self):
            return self.getToken(TeradataSQLDCLParser.MAD, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLDCLParser.MANUAL, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLDCLParser.MAPPING, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDCLParser.MATCHED, 0)

        def MAX_CHOOSE(self):
            return self.getToken(TeradataSQLDCLParser.MAX_CHOOSE, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLDCLParser.MAXCHAR, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLDCLParser.MAXINTERVALS, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLDCLParser.MAXLOGONATTEMPTS, 0)

        def MAXVALUE(self):
            return self.getToken(TeradataSQLDCLParser.MAXVALUE, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLDCLParser.MAXVALUELENGTH, 0)

        def MEDIAN(self):
            return self.getToken(TeradataSQLDCLParser.MEDIAN, 0)

        def MEDIUM(self):
            return self.getToken(TeradataSQLDCLParser.MEDIUM, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDCLParser.MEETS, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLDCLParser.MEMBER, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLDCLParser.MERGEBLOCKRATIO, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLDCLParser.MESSAGE_TEXT, 0)

        def MIN_CHOOSE(self):
            return self.getToken(TeradataSQLDCLParser.MIN_CHOOSE, 0)

        def MINCHAR(self):
            return self.getToken(TeradataSQLDCLParser.MINCHAR, 0)

        def MINVALUE(self):
            return self.getToken(TeradataSQLDCLParser.MINVALUE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDCLParser.MODIFIED, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDCLParser.MONDAY, 0)

        def MONITORQUERYBAND(self):
            return self.getToken(TeradataSQLDCLParser.MONITORQUERYBAND, 0)

        def MONITORSESSIONRATE(self):
            return self.getToken(TeradataSQLDCLParser.MONITORSESSIONRATE, 0)

        def MONITORVERSION(self):
            return self.getToken(TeradataSQLDCLParser.MONITORVERSION, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDCLParser.MONTH_END, 0)

        def MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.MONTH_OF_CALENDAR, 0)

        def MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDCLParser.MONTH_OF_QUARTER, 0)

        def MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.MONTH_OF_YEAR, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDCLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.MONTHNUMBER_OF_YEAR, 0)

        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDCLParser.MONTHS_BETWEEN, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLDCLParser.MORE_, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLDCLParser.MULTINATIONAL, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDCLParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDCLParser.NAMESPACE, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLDCLParser.NEVER, 0)

        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDCLParser.NEXT_DAY, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDCLParser.NGRAM, 0)

        def NIL(self):
            return self.getToken(TeradataSQLDCLParser.NIL, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDCLParser.NODDLTEXT, 0)

        def NODE(self):
            return self.getToken(TeradataSQLDCLParser.NODE, 0)

        def NONOPTCOST(self):
            return self.getToken(TeradataSQLDCLParser.NONOPTCOST, 0)

        def NONOPTINIT(self):
            return self.getToken(TeradataSQLDCLParser.NONOPTINIT, 0)

        def NONSEQUENCED(self):
            return self.getToken(TeradataSQLDCLParser.NONSEQUENCED, 0)

        def NORIGHT(self):
            return self.getToken(TeradataSQLDCLParser.NORIGHT, 0)

        def NOSEXTRACTVARFROMPATH(self):
            return self.getToken(TeradataSQLDCLParser.NOSEXTRACTVARFROMPATH, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLDCLParser.NOTATION, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDCLParser.NOW, 0)

        def NPATH(self):
            return self.getToken(TeradataSQLDCLParser.NPATH, 0)

        def NTH(self):
            return self.getToken(TeradataSQLDCLParser.NTH, 0)

        def NULLS(self):
            return self.getToken(TeradataSQLDCLParser.NULLS, 0)

        def NUMFPFNS(self):
            return self.getToken(TeradataSQLDCLParser.NUMFPFNS, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.NUMTOYMINTERVAL, 0)

        def NVL(self):
            return self.getToken(TeradataSQLDCLParser.NVL, 0)

        def NVL2(self):
            return self.getToken(TeradataSQLDCLParser.NVL2, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDCLParser.NVP, 0)

        def OA(self):
            return self.getToken(TeradataSQLDCLParser.OA, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDCLParser.OADD_MONTHS, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.OCOUNT, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDCLParser.ODELETE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDCLParser.OEXISTS, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDCLParser.OEXTEND, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDCLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDCLParser.OLAST, 0)

        def OLD_NEW_TABLE(self):
            return self.getToken(TeradataSQLDCLParser.OLD_NEW_TABLE, 0)

        def OLIMIT(self):
            return self.getToken(TeradataSQLDCLParser.OLIMIT, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDCLParser.ONEXT, 0)

        def ONLINE(self):
            return self.getToken(TeradataSQLDCLParser.ONLINE, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDCLParser.OPRIOR, 0)

        def OPTIONS(self):
            return self.getToken(TeradataSQLDCLParser.OPTIONS, 0)

        def ORDERBYVALUES(self):
            return self.getToken(TeradataSQLDCLParser.ORDERBYVALUES, 0)

        def ORDERED_ANALYTIC(self):
            return self.getToken(TeradataSQLDCLParser.ORDERED_ANALYTIC, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDCLParser.ORDINALITY, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDCLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDCLParser.OTRANSLATE, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDCLParser.OTRIM, 0)

        def OVERLAYS(self):
            return self.getToken(TeradataSQLDCLParser.OVERLAYS, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLDCLParser.OWNER, 0)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDCLParser.P_INTERSECT, 0)

        def P_NORMALIZE(self):
            return self.getToken(TeradataSQLDCLParser.P_NORMALIZE, 0)

        def PARAMID(self):
            return self.getToken(TeradataSQLDCLParser.PARAMID, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLDCLParser.PARAMINFO, 0)

        def PARENT(self):
            return self.getToken(TeradataSQLDCLParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDCLParser.PARTITION, 0)

        def PARTITION_L(self):
            return self.getToken(TeradataSQLDCLParser.PARTITION_L, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLDCLParser.PARTITIONED, 0)

        def PARTITIONNAMES(self):
            return self.getToken(TeradataSQLDCLParser.PARTITIONNAMES, 0)

        def PASS(self):
            return self.getToken(TeradataSQLDCLParser.PASS, 0)

        def PASSING(self):
            return self.getToken(TeradataSQLDCLParser.PASSING, 0)

        def PATH_GENERATOR(self):
            return self.getToken(TeradataSQLDCLParser.PATH_GENERATOR, 0)

        def PATH_START(self):
            return self.getToken(TeradataSQLDCLParser.PATH_START, 0)

        def PATH_SUMMARIZER(self):
            return self.getToken(TeradataSQLDCLParser.PATH_SUMMARIZER, 0)

        def PATTERN(self):
            return self.getToken(TeradataSQLDCLParser.PATTERN, 0)

        def PERCENTILE(self):
            return self.getToken(TeradataSQLDCLParser.PERCENTILE, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDCLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDCLParser.PERCENTILE_DISC, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLDCLParser.PERIOD, 0)

        def PIVOT(self):
            return self.getToken(TeradataSQLDCLParser.PIVOT, 0)

        def PORTION(self):
            return self.getToken(TeradataSQLDCLParser.PORTION, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDCLParser.POWER, 0)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDCLParser.PRECEDES, 0)

        def PRECEDING(self):
            return self.getToken(TeradataSQLDCLParser.PRECEDING, 0)

        def PREFIX(self):
            return self.getToken(TeradataSQLDCLParser.PREFIX, 0)

        def PRINT(self):
            return self.getToken(TeradataSQLDCLParser.PRINT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDCLParser.PRIOR, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLDCLParser.PROTECTED, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDCLParser.QUARTER_END, 0)

        def QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.QUARTER_OF_CALENDAR, 0)

        def QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.QUARTER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.QUARTERNUMBER_OF_YEAR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDCLParser.QUERY, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDCLParser.QUERY_BAND, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDCLParser.QUOTECHAR, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDCLParser.RANDOMIZED, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDCLParser.RANGE, 0)

        def RANGE_L(self):
            return self.getToken(TeradataSQLDCLParser.RANGE_L, 0)

        def RAPIDFIRE(self):
            return self.getToken(TeradataSQLDCLParser.RAPIDFIRE, 0)

        def RDIFF(self):
            return self.getToken(TeradataSQLDCLParser.RDIFF, 0)

        def READ(self):
            return self.getToken(TeradataSQLDCLParser.READ, 0)

        def RECALC(self):
            return self.getToken(TeradataSQLDCLParser.RECALC, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_INSTR, 0)

        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_REPLACE, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_SUBSTR, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDCLParser.REPLACEMENT, 0)

        def RESET(self):
            return self.getToken(TeradataSQLDCLParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDCLParser.RESPECT, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLDCLParser.RESTRICTWORDS, 0)

        def RETAIN(self):
            return self.getToken(TeradataSQLDCLParser.RETAIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLDCLParser.RETURNED_SQLSTATE, 0)

        def RETURNING(self):
            return self.getToken(TeradataSQLDCLParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLDCLParser.REUSE, 0)

        def ROOT(self):
            return self.getToken(TeradataSQLDCLParser.ROOT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDCLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDCLParser.ROTATERIGHT, 0)

        def ROUND(self):
            return self.getToken(TeradataSQLDCLParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLDCLParser.ROW_COUNT, 0)

        def ROWIDGEN(self):
            return self.getToken(TeradataSQLDCLParser.ROWIDGEN, 0)

        def ROWIDGEN2(self):
            return self.getToken(TeradataSQLDCLParser.ROWIDGEN2, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDCLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDCLParser.RTRIM, 0)

        def RU(self):
            return self.getToken(TeradataSQLDCLParser.RU, 0)

        def RULES(self):
            return self.getToken(TeradataSQLDCLParser.RULES, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLDCLParser.RULESET, 0)

        def SAMPLES(self):
            return self.getToken(TeradataSQLDCLParser.SAMPLES, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDCLParser.SATURDAY, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDCLParser.SCHEMA, 0)

        def SCRIPT(self):
            return self.getToken(TeradataSQLDCLParser.SCRIPT, 0)

        def SCRIPT_COMMAND(self):
            return self.getToken(TeradataSQLDCLParser.SCRIPT_COMMAND, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLDCLParser.SEARCHSPACE, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLDCLParser.SEARCHUIFDBPATH, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDCLParser.SECURITY, 0)

        def SEED(self):
            return self.getToken(TeradataSQLDCLParser.SEED, 0)

        def SELF(self):
            return self.getToken(TeradataSQLDCLParser.SELF, 0)

        def SEQ(self):
            return self.getToken(TeradataSQLDCLParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDCLParser.SEQUENCE, 0)

        def SEQUENCED(self):
            return self.getToken(TeradataSQLDCLParser.SEQUENCED, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLDCLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDCLParser.SERVER, 0)

        def SESSIONIZE(self):
            return self.getToken(TeradataSQLDCLParser.SESSIONIZE, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDCLParser.SETBIT, 0)

        def SETRESOURCERATE(self):
            return self.getToken(TeradataSQLDCLParser.SETRESOURCERATE, 0)

        def SETSESSIONACCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.SETSESSIONACCOUNT, 0)

        def SETSESSIONRATE(self):
            return self.getToken(TeradataSQLDCLParser.SETSESSIONRATE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDCLParser.SHARE, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDCLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDCLParser.SHIFTRIGHT, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDCLParser.SIGN, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDCLParser.SIZE, 0)

        def SNAPPY_COMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.SNAPPY_COMPRESS, 0)

        def SNAPPY_DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.SNAPPY_DECOMPRESS, 0)

        def SOURCE(self):
            return self.getToken(TeradataSQLDCLParser.SOURCE, 0)

        def SPARSE(self):
            return self.getToken(TeradataSQLDCLParser.SPARSE, 0)

        def SPECCHAR(self):
            return self.getToken(TeradataSQLDCLParser.SPECCHAR, 0)

        def SPL(self):
            return self.getToken(TeradataSQLDCLParser.SPL, 0)

        def SQLSTATE(self):
            return self.getToken(TeradataSQLDCLParser.SQLSTATE, 0)

        def SR(self):
            return self.getToken(TeradataSQLDCLParser.SR, 0)

        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDCLParser.ST_GEOMETRY, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDCLParser.STAT, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDCLParser.STATIC, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDCLParser.STATS, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLDCLParser.STATSUSAGE, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLDCLParser.STORAGE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDCLParser.STRIP, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDCLParser.STRTOK, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLDCLParser.STYLE, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDCLParser.SUBBITSTR, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDCLParser.SUBCLASS_ORIGIN, 0)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDCLParser.SUCCEEDS, 0)

        def SUMMARYONLY(self):
            return self.getToken(TeradataSQLDCLParser.SUMMARYONLY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDCLParser.SUNDAY, 0)

        def SYMBOLS(self):
            return self.getToken(TeradataSQLDCLParser.SYMBOLS, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLDCLParser.SYSTEM, 0)

        def SYSTEM_TIME(self):
            return self.getToken(TeradataSQLDCLParser.SYSTEM_TIME, 0)

        def SYSTEMTEST(self):
            return self.getToken(TeradataSQLDCLParser.SYSTEMTEST, 0)

        def TARGET(self):
            return self.getToken(TeradataSQLDCLParser.TARGET, 0)

        def TD_ARRAY2P(self):
            return self.getToken(TeradataSQLDCLParser.TD_ARRAY2P, 0)

        def TD_DATASET(self):
            return self.getToken(TeradataSQLDCLParser.TD_DATASET, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_YEAR, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLDCLParser.TD_GENERAL, 0)

        def TD_GETTIMEBUCKET(self):
            return self.getToken(TeradataSQLDCLParser.TD_GETTIMEBUCKET, 0)

        def TD_INTERNAL(self):
            return self.getToken(TeradataSQLDCLParser.TD_INTERNAL, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TD_LZ_DECOMPRESS, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDCLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_TIME_BUCKET_NUMBER(self):
            return self.getToken(TeradataSQLDCLParser.TD_TIME_BUCKET_NUMBER, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_YEAR_OF_CALENDAR, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLDCLParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLDCLParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLDCLParser.TDWMHISTORY, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDCLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.TEMPORAL_TIMESTAMP, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLDCLParser.TEXT, 0)

        def THRESHOLDPERCENT(self):
            return self.getToken(TeradataSQLDCLParser.THRESHOLDPERCENT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDCLParser.THROUGH, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDCLParser.THURSDAY, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDCLParser.TIES, 0)

        def TIMECODE(self):
            return self.getToken(TeradataSQLDCLParser.TIMECODE, 0)

        def TIMECOLUMN(self):
            return self.getToken(TeradataSQLDCLParser.TIMECOLUMN, 0)

        def TIMEOUT(self):
            return self.getToken(TeradataSQLDCLParser.TIMEOUT, 0)

        def TIMESTAMPCOLUMN(self):
            return self.getToken(TeradataSQLDCLParser.TIMESTAMPCOLUMN, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDCLParser.TO_BYTE, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDCLParser.TO_BYTES, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDCLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDCLParser.TO_DATE, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.TO_DSINTERVAL, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDCLParser.TO_NUMBER, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDCLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.TO_YMINTERVAL, 0)

        def TOTOKEN(self):
            return self.getToken(TeradataSQLDCLParser.TOTOKEN, 0)

        def TPA(self):
            return self.getToken(TeradataSQLDCLParser.TPA, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLDCLParser.TRANSACTION_ACTIVE, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDCLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDCLParser.TRANSUTF8TOUNICODE, 0)

        def TRUE(self):
            return self.getToken(TeradataSQLDCLParser.TRUE, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDCLParser.TRUNC, 0)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLDCLParser.TRUST_ONLY, 0)

        def TTGRANULARITY(self):
            return self.getToken(TeradataSQLDCLParser.TTGRANULARITY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDCLParser.TUESDAY, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDCLParser.UBJSON, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDCLParser.UCASE, 0)

        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLDCLParser.UDFSEARCHPATH, 0)

        def UNBOUNDED(self):
            return self.getToken(TeradataSQLDCLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLDCLParser.UNCOMMITTED, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDCLParser.UNKNOWN, 0)

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDCLParser.UNPIVOT, 0)

        def USE(self):
            return self.getToken(TeradataSQLDCLParser.USE, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLDCLParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLDCLParser.UTILITYINFO, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLDCLParser.VARRAY, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLDCLParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDCLParser.VERSION, 0)

        def VERSIONING(self):
            return self.getToken(TeradataSQLDCLParser.VERSIONING, 0)

        def WARNING(self):
            return self.getToken(TeradataSQLDCLParser.WARNING, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDCLParser.WEDNESDAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDCLParser.WEEK_END, 0)

        def WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.WEEK_OF_CALENDAR, 0)

        def WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.WEEK_OF_MONTH, 0)

        def WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.WEEK_OF_YEAR, 0)

        def WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.WEEKDAY_OF_MONTH, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_YEAR, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDCLParser.WHITESPACE, 0)

        def WINDOWSIZE(self):
            return self.getToken(TeradataSQLDCLParser.WINDOWSIZE, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDCLParser.WITHIN, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLDCLParser.WORKLOAD, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDCLParser.WRITE, 0)

        def XML(self):
            return self.getToken(TeradataSQLDCLParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDCLParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDCLParser.XMLATTRIBUTES, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDCLParser.XMLCOMMENT, 0)

        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDCLParser.XMLCONCAT, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDCLParser.XMLDECLARATION, 0)

        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDCLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDCLParser.XMLELEMENT, 0)

        def XMLFOREST(self):
            return self.getToken(TeradataSQLDCLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDCLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDCLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDCLParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(TeradataSQLDCLParser.XMLQUERY, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDCLParser.XMLSCHEMA, 0)

        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDCLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDCLParser.XMLTABLE, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDCLParser.XMLTEXT, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDCLParser.XMLTYPE, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDCLParser.XMLVALIDATE, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDCLParser.YEAR_END, 0)

        def YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.YEAR_OF_CALENDAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.YEARNUMBER_OF_CALENDAR, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLDCLParser.ZLIB, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDCLParser.BUCKET, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDCLParser.COMMITTED, 0)

        def CREATEXML(self):
            return self.getToken(TeradataSQLDCLParser.CREATEXML, 0)

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDCLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDCLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDCLParser.CS_GRAPHIC, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDCLParser.CSV, 0)

        def CSVLD(self):
            return self.getToken(TeradataSQLDCLParser.CSVLD, 0)

        def DATASIZE(self):
            return self.getToken(TeradataSQLDCLParser.DATASIZE, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDCLParser.DAYOFMONTH, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLDCLParser.DAYS, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLDCLParser.DEFINITION, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDCLParser.DELETED, 0)

        def FAST(self):
            return self.getToken(TeradataSQLDCLParser.FAST, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDCLParser.LISTAGG, 0)

        def PATH(self):
            return self.getToken(TeradataSQLDCLParser.PATH, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDCLParser.REVERSE, 0)

        def SAS(self):
            return self.getToken(TeradataSQLDCLParser.SAS, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLDCLParser.SQLTABLE, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDCLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def SYSLIB(self):
            return self.getToken(TeradataSQLDCLParser.SYSLIB, 0)

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDCLParser.SYSUDTLIB, 0)

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDCLParser.TD_SERVER_DB, 0)

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDCLParser.TD_SYSFNLIB, 0)

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDCLParser.TD_SYSXML, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLDCLParser.TIMEDATEWZCONTROL, 0)

        def TRUST(self):
            return self.getToken(TeradataSQLDCLParser.TRUST, 0)

        def TRYCAST(self):
            return self.getToken(TeradataSQLDCLParser.TRYCAST, 0)

        def UDT(self):
            return self.getToken(TeradataSQLDCLParser.UDT, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLDCLParser.USAGE, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDCLParser.VARIANT, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDCLParser.WEEK, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDCLParser.WIDTH, 0)

        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDCLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDCLParser.XMLPUBLISH_STREAM, 0)

        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDCLParser.XMLSPLIT, 0)

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE_TO_LOCALE, 0)

        def ASBSON(self):
            return self.getToken(TeradataSQLDCLParser.ASBSON, 0)

        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDCLParser.ASBSONTEXT, 0)

        def COMBINE(self):
            return self.getToken(TeradataSQLDCLParser.COMBINE, 0)

        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDCLParser.EXISTVALUE, 0)

        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDCLParser.JSONEXTRACT, 0)

        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDCLParser.JSONEXTRACTVALUE, 0)

        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDCLParser.JSONEXTRACTLARGEVALUE, 0)

        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.KEYCOUNT, 0)

        def METADATA(self):
            return self.getToken(TeradataSQLDCLParser.METADATA, 0)

        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDCLParser.STORAGE_SIZE, 0)

        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDCLParser.CREATESCHEMABASEDXML, 0)

        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDCLParser.CREATENONSCHEMABASEDXML, 0)

        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDCLParser.EXISTSNODE, 0)

        def ISCONTENT(self):
            return self.getToken(TeradataSQLDCLParser.ISCONTENT, 0)

        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDCLParser.ISDOCUMENT, 0)

        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDCLParser.ISSCHEMAVALID, 0)

        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDCLParser.ISSCHEMAVALIDATED, 0)

        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDCLParser.XMLEXTRACT, 0)

        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDCLParser.XMLTRANSFORM, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLDCLParser.PROC_ID, 0)

        def LOCATION(self):
            return self.getToken(TeradataSQLDCLParser.LOCATION, 0)

        def PAYLOAD(self):
            return self.getToken(TeradataSQLDCLParser.PAYLOAD, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLDCLParser.TRUSTED, 0)

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLDCLParser.PATHPATTERN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDCLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDCLParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDCLParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDCLParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLDCLParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLDCLParser.STRIP_ENCLOSING_CHAR, 0)

        def RLS(self):
            return self.getToken(TeradataSQLDCLParser.RLS, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLDCLParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLDCLParser.MULTIPLE, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.JSON_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TS_DECOMPRESS, 0)

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDCLParser.CONTIGUOUSMAPAMPS, 0)

        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDCLParser.SPARSEMAPAMPS, 0)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDCLParser.SPARSETABLEAMPS, 0)

        def UNNEST(self):
            return self.getToken(TeradataSQLDCLParser.UNNEST, 0)

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDCLParser.CALCMATRIX, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDCLParser.PHRASE, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDCLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDCLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDCLParser.NULL_HANDLING, 0)

        def READ_NOS(self):
            return self.getToken(TeradataSQLDCLParser.READ_NOS, 0)

        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDCLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDCLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDCLParser.SAMPLE_PERC, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDCLParser.FULLSCAN, 0)

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDCLParser.TD_UNPIVOT, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDCLParser.VALUE_COLUMNS, 0)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDCLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDCLParser.COLUMN_LIST, 0)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDCLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE_NULLS, 0)

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDCLParser.WRITE_NOS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDCLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDCLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDCLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDCLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDCLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDCLParser.COMPRESSION, 0)

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_TO_JSON, 0)

        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDCLParser.BSON_CHECK, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDCLParser.GEOJSONFROMGEOM, 0)

        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDCLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDCLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDCLParser.JSONGETVALUE, 0)

        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDCLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDCLParser.NVP2JSON, 0)

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDCLParser.TD_JSONSHRED, 0)

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDCLParser.JSON_KEYS, 0)

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDCLParser.JSON_TABLE, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDCLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDCLParser.QUOTES, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDCLParser.ROWEXPR, 0)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDCLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDCLParser.RETURNTYPES, 0)

        def NOCASE(self):
            return self.getToken(TeradataSQLDCLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDCLParser.TRUNCATE, 0)

        def LINK(self):
            return self.getToken(TeradataSQLDCLParser.LINK, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_nonreserved_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreserved_word" ):
                listener.enterNonreserved_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreserved_word" ):
                listener.exitNonreserved_word(self)




    def nonreserved_word(self):

        localctx = TeradataSQLDCLParser.Nonreserved_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_nonreserved_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            _la = self._input.LA(1)
            if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Query_termContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def query_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Query_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Query_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def UNION(self):
            return self.getToken(TeradataSQLDCLParser.UNION, 0)

        def MINUS(self):
            return self.getToken(TeradataSQLDCLParser.MINUS, 0)

        def EXCEPT(self):
            return self.getToken(TeradataSQLDCLParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TeradataSQLDCLParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_query_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expr" ):
                listener.enterQuery_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expr" ):
                listener.exitQuery_expr(self)



    def query_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDCLParser.Query_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_query_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [369, 370]:
                self.state = 2073
                self.query_term()
                pass
            elif token in [1213]:
                self.state = 2074
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2075
                self.query_expr(0)
                self.state = 2076
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2088
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLDCLParser.Query_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expr)
                    self.state = 2080
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2081
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==204 or _la==247 or _la==447):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 2082
                        self.match(TeradataSQLDCLParser.ALL)


                    self.state = 2085
                    self.query_expr(3) 
                self.state = 2090
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Select_listContext,0)


        def SELECT(self):
            return self.getToken(TeradataSQLDCLParser.SELECT, 0)

        def SEL(self):
            return self.getToken(TeradataSQLDCLParser.SEL, 0)

        def with_deleted_rows(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_deleted_rowsContext,0)


        def as_json(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.As_jsonContext,0)


        def from_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.From_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.From_clauseContext,i)


        def into_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Into_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Into_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Where_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Group_by_clauseContext,i)


        def sample_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Sample_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Sample_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_clauseContext,i)


        def with_check_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.With_check_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.With_check_optionContext,i)


        def expand_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Expand_on_clauseContext,0)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Having_clauseContext,i)


        def qualify_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Qualify_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Qualify_clauseContext,i)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.With_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)




    def query_term(self):

        localctx = TeradataSQLDCLParser.Query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_query_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2091
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2092
                self.with_deleted_rows()


            self.state = 2096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2095
                self.as_json()


            self.state = 2098
            self.select_list()
            self.state = 2130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2128
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                    if la_ == 1:
                        self.state = 2099
                        self.from_clause()
                        self.state = 2103
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,228,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2100
                                self.with_clause() 
                            self.state = 2105
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,228,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 2106
                        self.into_clause()
                        pass

                    elif la_ == 3:
                        self.state = 2107
                        self.where_clause()
                        pass

                    elif la_ == 4:
                        self.state = 2108
                        self.group_by_clause()
                        pass

                    elif la_ == 5:
                        self.state = 2111
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [183]:
                            self.state = 2109
                            self.having_clause()
                            pass
                        elif token in [315]:
                            self.state = 2110
                            self.qualify_clause()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 2113
                        self.sample_clause()
                        pass

                    elif la_ == 7:
                        self.state = 2117
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==474:
                            self.state = 2114
                            self.with_clause()
                            self.state = 2119
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2120
                        self.order_by_clause()
                        self.state = 2124
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2121
                                self.with_clause() 
                            self.state = 2126
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                        pass

                    elif la_ == 8:
                        self.state = 2127
                        self.with_check_option()
                        pass

             
                self.state = 2132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

            self.state = 2134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 2133
                self.expand_on_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_deleted_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDCLParser.DELETED, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDCLParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_deleted_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_deleted_rows" ):
                listener.enterWith_deleted_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_deleted_rows" ):
                listener.exitWith_deleted_rows(self)




    def with_deleted_rows(self):

        localctx = TeradataSQLDCLParser.With_deleted_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_with_deleted_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 2137
            self.match(TeradataSQLDCLParser.DELETED)
            self.state = 2138
            self.match(TeradataSQLDCLParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_jsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDCLParser.JSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_as_json

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_json" ):
                listener.enterAs_json(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_json" ):
                listener.exitAs_json(self)




    def as_json(self):

        localctx = TeradataSQLDCLParser.As_jsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_as_json)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.match(TeradataSQLDCLParser.AS)
            self.state = 2141
            self.match(TeradataSQLDCLParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Selected_columnsContext,0)


        def top_n(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Top_nContext,0)


        def DISTINCT(self):
            return self.getToken(TeradataSQLDCLParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLDCLParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def normalize(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.NormalizeContext,0)


        def all_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.All_operatorContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TeradataSQLDCLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_select_list)
        try:
            self.state = 2154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2150
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 121, 271, 448]:
                    self.state = 2147
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 2143
                        self.match(TeradataSQLDCLParser.DISTINCT)
                        pass
                    elif token in [448]:
                        self.state = 2144
                        self.match(TeradataSQLDCLParser.UNIQUE)
                        pass
                    elif token in [13]:
                        self.state = 2145
                        self.match(TeradataSQLDCLParser.ALL)
                        pass
                    elif token in [271]:
                        self.state = 2146
                        self.normalize()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [427]:
                    self.state = 2149
                    self.top_n()
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1219, 1221, 1222]:
                    pass
                else:
                    pass
                self.state = 2152
                self.selected_columns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2153
                self.all_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_nContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TeradataSQLDCLParser.TOP, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Float_literalContext,0)


        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Macro_parameter_referenceContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDCLParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDCLParser.TIES, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_top_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_n" ):
                listener.enterTop_n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_n" ):
                listener.exitTop_n(self)




    def top_n(self):

        localctx = TeradataSQLDCLParser.Top_nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_top_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            self.match(TeradataSQLDCLParser.TOP)
            self.state = 2160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 2157
                self.integer_literal()
                pass
            elif token in [1197]:
                self.state = 2158
                self.float_literal()
                pass
            elif token in [1207, 1210]:
                self.state = 2159
                self.macro_parameter_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 2162
                self.match(TeradataSQLDCLParser.PERCENT)


            self.state = 2167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2165
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 2166
                self.match(TeradataSQLDCLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(TeradataSQLDCLParser.NORMALIZE, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDCLParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLDCLParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDCLParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_normalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)




    def normalize(self):

        localctx = TeradataSQLDCLParser.NormalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_normalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2169
            self.match(TeradataSQLDCLParser.NORMALIZE)
            self.state = 2180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2170
                self.match(TeradataSQLDCLParser.ON)
                self.state = 2171
                self.match(TeradataSQLDCLParser.MEETS)
                self.state = 2172
                self.match(TeradataSQLDCLParser.OR)
                self.state = 2173
                self.match(TeradataSQLDCLParser.OVERLAPS)

            elif la_ == 2:
                self.state = 2174
                self.match(TeradataSQLDCLParser.ON)
                self.state = 2175
                self.match(TeradataSQLDCLParser.OVERLAPS)
                self.state = 2178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 2176
                    self.match(TeradataSQLDCLParser.OR)
                    self.state = 2177
                    self.match(TeradataSQLDCLParser.MEETS)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDCLParser.DOT_, i)

        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_all_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_operator" ):
                listener.enterAll_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_operator" ):
                listener.exitAll_operator(self)




    def all_operator(self):

        localctx = TeradataSQLDCLParser.All_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_all_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 2182
                self.match(TeradataSQLDCLParser.MUL_SIGN)
                pass

            elif la_ == 2:
                self.state = 2183
                self.table_name()
                self.state = 2184
                self.match(TeradataSQLDCLParser.DOT_)
                self.state = 2185
                self.match(TeradataSQLDCLParser.MUL_SIGN)
                pass

            elif la_ == 3:
                self.state = 2187
                self.column_name()
                pass


            self.state = 2190
            self.match(TeradataSQLDCLParser.DOT_)
            self.state = 2191
            self.match(TeradataSQLDCLParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.all_rows = None # Token

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def selected_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Selected_columnContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Selected_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_selected_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_columns" ):
                listener.enterSelected_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_columns" ):
                listener.exitSelected_columns(self)




    def selected_columns(self):

        localctx = TeradataSQLDCLParser.Selected_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_selected_columns)
        try:
            self.state = 2202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2193
                localctx.all_rows = self.match(TeradataSQLDCLParser.MUL_SIGN)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2194
                self.selected_column()
                self.state = 2199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2195
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 2196
                        self.selected_column() 
                    self.state = 2201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_selected_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_column" ):
                listener.enterSelected_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_column" ):
                listener.exitSelected_column(self)




    def selected_column(self):

        localctx = TeradataSQLDCLParser.Selected_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_selected_column)
        self._la = 0 # Token type
        try:
            self.state = 2215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2204
                self.scalar_expr(0)
                self.state = 2209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 2206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2205
                        self.match(TeradataSQLDCLParser.AS)


                    self.state = 2208
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2211
                self.table_name()
                self.state = 2212
                self.match(TeradataSQLDCLParser.DOT_)
                self.state = 2213
                self.match(TeradataSQLDCLParser.MUL_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(TeradataSQLDCLParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Variable_nameContext,i)


        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Variable_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = TeradataSQLDCLParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2217
            self.match(TeradataSQLDCLParser.INTO)
            self.state = 2220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2218
                self.variable_name()
                pass
            elif token in [1207]:
                self.state = 2219
                self.variable_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2222
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2225
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 2223
                        self.variable_name()
                        pass
                    elif token in [1207]:
                        self.state = 2224
                        self.variable_reference()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.From_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = TeradataSQLDCLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            self.match(TeradataSQLDCLParser.FROM)
            self.state = 2233
            self.from_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Join_source_specContext,0)


        def join_joined_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Join_joined_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Join_joined_specContext,i)


        def from_pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.From_pivot_specContext,0)


        def from_unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.From_unpivot_specContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_from_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_spec" ):
                listener.enterFrom_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_spec" ):
                listener.exitFrom_spec(self)




    def from_spec(self):

        localctx = TeradataSQLDCLParser.From_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_from_spec)
        try:
            self.state = 2265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2235
                self.join_source_spec()
                self.state = 2239
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2236
                        self.join_joined_spec() 
                    self.state = 2241
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.from_pivot_spec()
                self.state = 2246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2243
                        self.join_joined_spec() 
                    self.state = 2248
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2249
                self.from_unpivot_spec()
                self.state = 2253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,254,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2250
                        self.join_joined_spec() 
                    self.state = 2255
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,254,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2256
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2257
                self.from_spec()
                self.state = 2258
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 2262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2259
                        self.join_joined_spec() 
                    self.state = 2264
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_source_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Subquery_referenceContext,0)


        def foreign_table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Foreign_table_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_function_referenceContext,0)


        def foreign_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Foreign_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_join_source_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source_spec" ):
                listener.enterJoin_source_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source_spec" ):
                listener.exitJoin_source_spec(self)




    def join_source_spec(self):

        localctx = TeradataSQLDCLParser.Join_source_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_join_source_spec)
        try:
            self.state = 2273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2267
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2268
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2269
                self.foreign_table_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2270
                self.table_function_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2271
                self.foreign_function_reference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2272
                self.table_operator_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_joined_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Subquery_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_referenceContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_join_joined_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_joined_spec" ):
                listener.enterJoin_joined_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_joined_spec" ):
                listener.exitJoin_joined_spec(self)




    def join_joined_spec(self):

        localctx = TeradataSQLDCLParser.Join_joined_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_join_joined_spec)
        try:
            self.state = 2284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2275
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2276
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2277
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2278
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2279
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2280
                self.table_function_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2281
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2282
                self.table_operator_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2283
                self.join_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.PivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_from_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_pivot_spec" ):
                listener.enterFrom_pivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_pivot_spec" ):
                listener.exitFrom_pivot_spec(self)




    def from_pivot_spec(self):

        localctx = TeradataSQLDCLParser.From_pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_from_pivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2286
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 2287
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2290
            self.pivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivot(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.UnpivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_from_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_unpivot_spec" ):
                listener.enterFrom_unpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_unpivot_spec" ):
                listener.exitFrom_unpivot_spec(self)




    def from_unpivot_spec(self):

        localctx = TeradataSQLDCLParser.From_unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_from_unpivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2292
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 2293
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2296
            self.unpivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_alias = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def foreign_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Foreign_returns_clauseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = TeradataSQLDCLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2298
            self.table_name()
            self.state = 2303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.state = 2299
                self.server_name_reference()
                self.state = 2301
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 2300
                    self.foreign_returns_clause()




            self.state = 2309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
            if la_ == 1:
                self.state = 2306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2305
                    self.match(TeradataSQLDCLParser.AS)


                self.state = 2308
                localctx.table_alias = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(TeradataSQLDCLParser.JOIN, 0)

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Join_source_specContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLDCLParser.INNER, 0)

        def join_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Join_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Join_on_clauseContext,i)


        def LEFT(self):
            return self.getToken(TeradataSQLDCLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDCLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TeradataSQLDCLParser.FULL, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLDCLParser.OUTER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def CROSS(self):
            return self.getToken(TeradataSQLDCLParser.CROSS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = TeradataSQLDCLParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 2363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,273,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2316
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 2311
                    self.match(TeradataSQLDCLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 2312
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2314
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 2313
                        self.match(TeradataSQLDCLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 2318
                self.match(TeradataSQLDCLParser.JOIN)
                self.state = 2319
                self.join_source_spec()
                self.state = 2323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2320
                        self.join_on_clause() 
                    self.state = 2325
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2331
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 2326
                    self.match(TeradataSQLDCLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 2327
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 2328
                        self.match(TeradataSQLDCLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 2333
                self.match(TeradataSQLDCLParser.JOIN)
                self.state = 2334
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2335
                self.from_spec()
                self.state = 2336
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 2340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2337
                        self.join_on_clause() 
                    self.state = 2342
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2343
                self.match(TeradataSQLDCLParser.CROSS)
                self.state = 2344
                self.match(TeradataSQLDCLParser.JOIN)
                self.state = 2345
                self.join_source_spec()
                self.state = 2349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2346
                        self.join_on_clause() 
                    self.state = 2351
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2352
                self.match(TeradataSQLDCLParser.CROSS)
                self.state = 2353
                self.match(TeradataSQLDCLParser.JOIN)
                self.state = 2354
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2355
                self.from_spec()
                self.state = 2356
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 2360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,272,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2357
                        self.join_on_clause() 
                    self.state = 2362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,272,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_join_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_clause" ):
                listener.enterJoin_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_clause" ):
                listener.exitJoin_on_clause(self)




    def join_on_clause(self):

        localctx = TeradataSQLDCLParser.Join_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_join_on_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2365
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2366
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_sql = None # Token
            self.table_alias = None # Alias_nameContext

        def FOREIGN(self):
            return self.getToken(TeradataSQLDCLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDCLParser.TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Query_termContext,0)


        def EXPORT(self):
            return self.getToken(TeradataSQLDCLParser.EXPORT, 0)

        def exported_data(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Exported_dataContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Exported_dataContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_foreign_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_reference" ):
                listener.enterForeign_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_reference" ):
                listener.exitForeign_table_reference(self)




    def foreign_table_reference(self):

        localctx = TeradataSQLDCLParser.Foreign_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_foreign_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2368
            self.match(TeradataSQLDCLParser.FOREIGN)
            self.state = 2369
            self.match(TeradataSQLDCLParser.TABLE)
            self.state = 2370
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.state = 2371
                self.query_term()
                pass

            elif la_ == 2:
                self.state = 2373 
                self._errHandler.sync(self)
                _alt = 1+1
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1+1:
                        self.state = 2372
                        localctx.foreign_sql = self.matchWildcard()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2375 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,274,self._ctx)

                pass


            self.state = 2379
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2380
            self.server_name_reference()
            self.state = 2393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2381
                self.match(TeradataSQLDCLParser.EXPORT)
                self.state = 2382
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2383
                self.exported_data()
                self.state = 2388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2384
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2385
                    self.exported_data()
                    self.state = 2390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2391
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2395
                self.match(TeradataSQLDCLParser.AS)


            self.state = 2398
            localctx.table_alias = self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Function_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Server_name_referenceContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def foreign_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Foreign_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Foreign_on_clauseContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_foreign_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_function_reference" ):
                listener.enterForeign_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_function_reference" ):
                listener.exitForeign_function_reference(self)




    def foreign_function_reference(self):

        localctx = TeradataSQLDCLParser.Foreign_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_foreign_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.function_name()
            self.state = 2401
            self.server_name_reference()
            self.state = 2402
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2403
                self.foreign_on_clause()
                self.state = 2406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==286):
                    break

            self.state = 2408
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2409
                self.match(TeradataSQLDCLParser.AS)


            self.state = 2412
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def foreign_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Foreign_using_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def hash_or_partition_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Hash_or_partition_byContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Hash_or_partition_byContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_clauseContext,0)


        def LOCAL(self):
            return self.getToken(TeradataSQLDCLParser.LOCAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_foreign_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_on_clause" ):
                listener.enterForeign_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_on_clause" ):
                listener.exitForeign_on_clause(self)




    def foreign_on_clause(self):

        localctx = TeradataSQLDCLParser.Foreign_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_foreign_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2414
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2415
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2416
            self.scalar_expr(0)
            self.state = 2421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2417
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2418
                self.scalar_expr(0)
                self.state = 2423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2424
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==840:
                self.state = 2425
                self.hash_or_partition_by()
                self.state = 2430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 2431
                    self.match(TeradataSQLDCLParser.LOCAL)


                self.state = 2434
                self.order_by_clause()


            self.state = 2437
            self.foreign_using_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exported_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exported_subquery = None # Subquery_referenceContext
            self.exported_table = None # Table_nameContext
            self.table_alias = None # Alias_nameContext

        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Subquery_referenceContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_exported_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExported_data" ):
                listener.enterExported_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExported_data" ):
                listener.exitExported_data(self)




    def exported_data(self):

        localctx = TeradataSQLDCLParser.Exported_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_exported_data)
        self._la = 0 # Token type
        try:
            self.state = 2446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2439
                localctx.exported_subquery = self.subquery_reference()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2440
                localctx.exported_table = self.table_name()
                self.state = 2442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2441
                    self.match(TeradataSQLDCLParser.AS)


                self.state = 2444
                localctx.table_alias = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def foreign_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Foreign_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Foreign_parameterContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_foreign_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_using_clause" ):
                listener.enterForeign_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_using_clause" ):
                listener.exitForeign_using_clause(self)




    def foreign_using_clause(self):

        localctx = TeradataSQLDCLParser.Foreign_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_foreign_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2450 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2449
                self.foreign_parameter()
                self.state = 2452 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_foreign_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_parameter" ):
                listener.enterForeign_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_parameter" ):
                listener.exitForeign_parameter(self)




    def foreign_parameter(self):

        localctx = TeradataSQLDCLParser.Foreign_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_foreign_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            localctx.name = self.unqualified_name()
            self.state = 2455
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2456
            localctx.value = self.scalar_expr(0)
            self.state = 2457
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDCLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_foreign_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_returns_clause" ):
                listener.enterForeign_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_returns_clause" ):
                listener.exitForeign_returns_clause(self)




    def foreign_returns_clause(self):

        localctx = TeradataSQLDCLParser.Foreign_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_foreign_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.match(TeradataSQLDCLParser.RETURNS)
            self.state = 2460
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2461
            self.column_spec()
            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2462
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2463
                self.column_spec()
                self.state = 2468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2469
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Server_name_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.AT_SIGN, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_server_name_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServer_name_reference" ):
                listener.enterServer_name_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServer_name_reference" ):
                listener.exitServer_name_reference(self)




    def server_name_reference(self):

        localctx = TeradataSQLDCLParser.Server_name_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_server_name_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            self.match(TeradataSQLDCLParser.AT_SIGN)
            self.state = 2472
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TeradataSQLDCLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def udt_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Udt_table_functionContext,0)


        def unnest_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unnest_table_functionContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_reference" ):
                listener.enterTable_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_reference" ):
                listener.exitTable_function_reference(self)




    def table_function_reference(self):

        localctx = TeradataSQLDCLParser.Table_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_table_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474
            self.match(TeradataSQLDCLParser.TABLE)
            self.state = 2475
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 2476
                self.udt_table_function()
                pass

            elif la_ == 2:
                self.state = 2477
                self.unnest_table_function()
                pass


            self.state = 2480
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2481
                self.match(TeradataSQLDCLParser.AS)


            self.state = 2484
            self.alias_name()
            self.state = 2486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2485
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_expr_list_comma_separatedContext,0)


        def table_function_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_function_returns_clauseContext,0)


        def table_function_local_order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Table_function_local_order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Table_function_local_order_by_clauseContext,i)


        def table_function_hash_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Table_function_hash_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Table_function_hash_by_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_udt_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_table_function" ):
                listener.enterUdt_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_table_function" ):
                listener.exitUdt_table_function(self)




    def udt_table_function(self):

        localctx = TeradataSQLDCLParser.Udt_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_udt_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2488
            self.function_name()
            self.state = 2492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2489
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2490
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 2491
                self.scalar_expr_list_comma_separated()
                pass


            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 2494
                self.table_function_returns_clause()


            self.state = 2501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==224:
                self.state = 2499
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 2497
                    self.table_function_local_order_by_clause()
                    pass
                elif token in [178]:
                    self.state = 2498
                    self.table_function_hash_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext

        def UNNEST(self):
            return self.getToken(TeradataSQLDCLParser.UNNEST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDCLParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unnest_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_table_function" ):
                listener.enterUnnest_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_table_function" ):
                listener.exitUnnest_table_function(self)




    def unnest_table_function(self):

        localctx = TeradataSQLDCLParser.Unnest_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_unnest_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2504
                self.td_sysfnlib()


            self.state = 2507
            self.match(TeradataSQLDCLParser.UNNEST)
            self.state = 2508
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 2509
                localctx.key_expr = self.scalar_expr(0)
                self.state = 2510
                self.match(TeradataSQLDCLParser.COMMA)


            self.state = 2514
            localctx.array_expr = self.scalar_expr(0)
            self.state = 2515
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2516
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 2517
                self.match(TeradataSQLDCLParser.ORDINALITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returned_table_name = None # Table_nameContext

        def RETURNS(self):
            return self.getToken(TeradataSQLDCLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_function_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_returns_clause" ):
                listener.enterTable_function_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_returns_clause" ):
                listener.exitTable_function_returns_clause(self)




    def table_function_returns_clause(self):

        localctx = TeradataSQLDCLParser.Table_function_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_table_function_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self.match(TeradataSQLDCLParser.RETURNS)
            self.state = 2533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2521
                localctx.returned_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 2522
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2523
                self.column_spec()
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2524
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2525
                    self.column_spec()
                    self.state = 2530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2531
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [178, 224, 1214]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_local_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLDCLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_function_local_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_local_order_by_clause" ):
                listener.enterTable_function_local_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_local_order_by_clause" ):
                listener.exitTable_function_local_order_by_clause(self)




    def table_function_local_order_by_clause(self):

        localctx = TeradataSQLDCLParser.Table_function_local_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_table_function_local_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2535
            self.match(TeradataSQLDCLParser.LOCAL)
            self.state = 2536
            self.match(TeradataSQLDCLParser.ORDER)
            self.state = 2537
            self.match(TeradataSQLDCLParser.BY)
            self.state = 2538
            self.order_by_spec_full()
            self.state = 2543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2539
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2540
                self.order_by_spec_full()
                self.state = 2545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_hash_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLDCLParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_function_hash_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_hash_by_clause" ):
                listener.enterTable_function_hash_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_hash_by_clause" ):
                listener.exitTable_function_hash_by_clause(self)




    def table_function_hash_by_clause(self):

        localctx = TeradataSQLDCLParser.Table_function_hash_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_table_function_hash_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2546
            self.match(TeradataSQLDCLParser.HASH)
            self.state = 2547
            self.match(TeradataSQLDCLParser.BY)
            self.state = 2548
            self.column_name()
            self.state = 2553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2549
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2550
                self.column_name()
                self.state = 2555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def xmltable_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xmltable_operatorContext,0)


        def calcmatrix_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Calcmatrix_table_operatorContext,0)


        def read_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Read_nos_table_operatorContext,0)


        def script_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Script_table_operatorContext,0)


        def td_unpivot_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_unpivot_table_operatorContext,0)


        def write_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Write_nos_table_operatorContext,0)


        def json_keys_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Json_keys_table_operatorContext,0)


        def json_table_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Json_table_table_operatorContext,0)


        def json_shred_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Json_shred_table_operatorContext,0)


        def generic_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Generic_table_operatorContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_operator_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_reference" ):
                listener.enterTable_operator_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_reference" ):
                listener.exitTable_operator_reference(self)




    def table_operator_reference(self):

        localctx = TeradataSQLDCLParser.Table_operator_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_table_operator_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
            if la_ == 1:
                self.state = 2556
                self.xmltable_operator()
                pass

            elif la_ == 2:
                self.state = 2557
                self.calcmatrix_table_operator()
                pass

            elif la_ == 3:
                self.state = 2558
                self.read_nos_table_operator()
                pass

            elif la_ == 4:
                self.state = 2559
                self.script_table_operator()
                pass

            elif la_ == 5:
                self.state = 2560
                self.td_unpivot_table_operator()
                pass

            elif la_ == 6:
                self.state = 2561
                self.write_nos_table_operator()
                pass

            elif la_ == 7:
                self.state = 2562
                self.json_keys_table_operator()
                pass

            elif la_ == 8:
                self.state = 2563
                self.json_table_table_operator()
                pass

            elif la_ == 9:
                self.state = 2564
                self.json_shred_table_operator()
                pass

            elif la_ == 10:
                self.state = 2565
                self.generic_table_operator()
                pass


            self.state = 2569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2568
                self.match(TeradataSQLDCLParser.AS)


            self.state = 2571
            self.alias_name()
            self.state = 2573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2572
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_tab_row_pattern = None # Scalar_exprContext

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDCLParser.XMLTABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_namespace_declarationContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_query_argumentContext,0)


        def xml_columns_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_columns_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xmltable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_operator" ):
                listener.enterXmltable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_operator" ):
                listener.exitXmltable_operator(self)




    def xmltable_operator(self):

        localctx = TeradataSQLDCLParser.Xmltable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_xmltable_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2575
            self.match(TeradataSQLDCLParser.XMLTABLE)
            self.state = 2576
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2577
                self.xml_namespace_declaration()


            self.state = 2580
            localctx.xml_tab_row_pattern = self.scalar_expr(0)
            self.state = 2582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==845:
                self.state = 2581
                self.xml_query_argument()


            self.state = 2585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==579:
                self.state = 2584
                self.xml_columns_spec()


            self.state = 2587
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calcmatrix_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using_phrase = None # Char_string_literalContext
            self.calc_type = None # Char_string_literalContext
            self.output = None # Char_string_literalContext
            self.null_handling = None # Char_string_literalContext

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDCLParser.CALCMATRIX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDCLParser.PHRASE, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def HASH(self):
            return self.getToken(TeradataSQLDCLParser.HASH, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.BY)
            else:
                return self.getToken(TeradataSQLDCLParser.BY, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDCLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDCLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDCLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDCLParser.NULL_HANDLING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_calcmatrix_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcmatrix_table_operator" ):
                listener.enterCalcmatrix_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcmatrix_table_operator" ):
                listener.exitCalcmatrix_table_operator(self)




    def calcmatrix_table_operator(self):

        localctx = TeradataSQLDCLParser.Calcmatrix_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_calcmatrix_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2589
                self.td_sysfnlib()


            self.state = 2592
            self.match(TeradataSQLDCLParser.CALCMATRIX)
            self.state = 2593
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2594
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2595
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2596
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 2599
                self.match(TeradataSQLDCLParser.HASH)
                self.state = 2600
                self.match(TeradataSQLDCLParser.BY)
                self.state = 2601
                self.scalar_expr(0)
                self.state = 2606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2602
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2603
                    self.scalar_expr(0)
                    self.state = 2608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 2611
                self.match(TeradataSQLDCLParser.LOCAL)
                self.state = 2612
                self.match(TeradataSQLDCLParser.ORDER)
                self.state = 2613
                self.match(TeradataSQLDCLParser.BY)
                self.state = 2614
                self.scalar_expr(0)
                self.state = 2619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2615
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2616
                    self.scalar_expr(0)
                    self.state = 2621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2624
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2625
            self.match(TeradataSQLDCLParser.PHRASE)
            self.state = 2626
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2627
            localctx.using_phrase = self.char_string_literal()
            self.state = 2628
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2629
                self.match(TeradataSQLDCLParser.CALCTYPE)
                self.state = 2630
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2631
                localctx.calc_type = self.char_string_literal()
                self.state = 2632
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2636
                self.match(TeradataSQLDCLParser.OUTPUT)
                self.state = 2637
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2638
                localctx.output = self.char_string_literal()
                self.state = 2639
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
            if la_ == 1:
                self.state = 2643
                self.match(TeradataSQLDCLParser.NULL_HANDLING)
                self.state = 2644
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2645
                localctx.null_handling = self.char_string_literal()
                self.state = 2646
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_NOS(self):
            return self.getToken(TeradataSQLDCLParser.READ_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def read_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Read_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Read_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_read_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_table_operator" ):
                listener.enterRead_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_table_operator" ):
                listener.exitRead_nos_table_operator(self)




    def read_nos_table_operator(self):

        localctx = TeradataSQLDCLParser.Read_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_read_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2650
            self.match(TeradataSQLDCLParser.READ_NOS)
            self.state = 2651
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2652
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2653
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2654
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2657
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2658
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2659
            self.location()
            self.state = 2663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1132)) & ~0x3f) == 0 and ((1 << (_la - 1132)) & 125829135) != 0):
                self.state = 2660
                self.read_nos_option()
                self.state = 2665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2666
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2667
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.return_spec = list() # of Char_string_literalContexts
            self.delimiter_char = None # Char_string_literalContext
            self.charset = None # Char_string_literalContext
            self.quote_char = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def SCRIPT(self):
            return self.getToken(TeradataSQLDCLParser.SCRIPT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_on_clauseContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def RETURNS(self):
            return self.getToken(TeradataSQLDCLParser.RETURNS, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDCLParser.DELIMITER, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDCLParser.CHARSET, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDCLParser.QUOTECHAR, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDCLParser.AUTH, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Object_nameContext,0)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_script_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_table_operator" ):
                listener.enterScript_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_table_operator" ):
                listener.exitScript_table_operator(self)




    def script_table_operator(self):

        localctx = TeradataSQLDCLParser.Script_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_script_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2669
            self.match(TeradataSQLDCLParser.SCRIPT)
            self.state = 2670
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2671
            self.table_operator_on_clause()
            self.state = 2686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 2672
                self.match(TeradataSQLDCLParser.RETURNS)
                self.state = 2673
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2683
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 2674
                    self.match(TeradataSQLDCLParser.MUL_SIGN)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 2675
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.return_spec.append(localctx._char_string_literal)
                    self.state = 2680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2676
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 2677
                        localctx._char_string_literal = self.char_string_literal()
                        localctx.return_spec.append(localctx._char_string_literal)
                        self.state = 2682
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2685
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==625:
                self.state = 2688
                self.match(TeradataSQLDCLParser.DELIMITER)
                self.state = 2689
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2690
                localctx.delimiter_char = self.char_string_literal()
                self.state = 2691
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==569:
                self.state = 2695
                self.match(TeradataSQLDCLParser.CHARSET)
                self.state = 2696
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2697
                localctx.charset = self.char_string_literal()
                self.state = 2698
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==871:
                self.state = 2702
                self.match(TeradataSQLDCLParser.QUOTECHAR)
                self.state = 2703
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2704
                localctx.quote_char = self.char_string_literal()
                self.state = 2705
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==542:
                self.state = 2709
                self.match(TeradataSQLDCLParser.AUTH)
                self.state = 2710
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2711
                localctx.authorization_name = self.object_name()
                self.state = 2712
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2716
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_unpivot_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.value_columns_value = list() # of Char_string_literalContexts
            self.unpivot_column_value = None # Char_string_literalContext
            self.column_list_value = list() # of Char_string_literalContexts
            self.column_alias_list_value = list() # of Char_string_literalContexts
            self.include_nulls = None # Char_string_literalContext

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDCLParser.TD_UNPIVOT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDCLParser.VALUE_COLUMNS, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDCLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDCLParser.COLUMN_LIST, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDCLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE_NULLS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_td_unpivot_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_unpivot_table_operator" ):
                listener.enterTd_unpivot_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_unpivot_table_operator" ):
                listener.exitTd_unpivot_table_operator(self)




    def td_unpivot_table_operator(self):

        localctx = TeradataSQLDCLParser.Td_unpivot_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_td_unpivot_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2718
                self.td_sysfnlib()


            self.state = 2721
            self.match(TeradataSQLDCLParser.TD_UNPIVOT)
            self.state = 2722
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2723
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2724
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2725
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2728
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2729
            self.match(TeradataSQLDCLParser.VALUE_COLUMNS)
            self.state = 2730
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2731
            localctx._char_string_literal = self.char_string_literal()
            localctx.value_columns_value.append(localctx._char_string_literal)
            self.state = 2736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2732
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2733
                localctx._char_string_literal = self.char_string_literal()
                localctx.value_columns_value.append(localctx._char_string_literal)
                self.state = 2738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2739
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2740
            self.match(TeradataSQLDCLParser.UNPIVOT_COLUMN)
            self.state = 2741
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2742
            localctx.unpivot_column_value = self.char_string_literal()
            self.state = 2743
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2744
            self.match(TeradataSQLDCLParser.COLUMN_LIST)
            self.state = 2745
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2746
            localctx._char_string_literal = self.char_string_literal()
            localctx.column_list_value.append(localctx._char_string_literal)
            self.state = 2751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2747
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2748
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_list_value.append(localctx._char_string_literal)
                self.state = 2753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2754
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2755
                self.match(TeradataSQLDCLParser.COLUMN_ALIAS_LIST)
                self.state = 2756
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2757
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_alias_list_value.append(localctx._char_string_literal)
                self.state = 2762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2758
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2759
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.column_alias_list_value.append(localctx._char_string_literal)
                    self.state = 2764
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2765
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 2766
                self.match(TeradataSQLDCLParser.INCLUDE_NULLS)
                self.state = 2767
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2768
                localctx.include_nulls = self.char_string_literal()
                self.state = 2769
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDCLParser.WRITE_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_on_clauseContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def write_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Write_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Write_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_write_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_table_operator" ):
                listener.enterWrite_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_table_operator" ):
                listener.exitWrite_nos_table_operator(self)




    def write_nos_table_operator(self):

        localctx = TeradataSQLDCLParser.Write_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_write_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2773
            self.match(TeradataSQLDCLParser.WRITE_NOS)
            self.state = 2774
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2775
            self.table_operator_on_clause()
            self.state = 2776
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2777
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2778
            self.location()
            self.state = 2782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1134)) & ~0x3f) == 0 and ((1 << (_la - 1134)) & 1095216660481) != 0):
                self.state = 2779
                self.write_nos_option()
                self.state = 2784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2785
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2786
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_table_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self.col_expr_literal = None # Char_string_literalContext

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDCLParser.JSON_TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDCLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDCLParser.COLEXPR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_json_table_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_table_table_operator" ):
                listener.enterJson_table_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_table_table_operator" ):
                listener.exitJson_table_table_operator(self)




    def json_table_table_operator(self):

        localctx = TeradataSQLDCLParser.Json_table_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_json_table_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2788
                self.td_sysfnlib()


            self.state = 2791
            self.match(TeradataSQLDCLParser.JSON_TABLE)
            self.state = 2792
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2793
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2794
            self.subquery()
            self.state = 2795
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2796
            self.match(TeradataSQLDCLParser.ROWEXPR)
            self.state = 2797
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2798
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 2799
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2800
            self.match(TeradataSQLDCLParser.COLEXPR)
            self.state = 2801
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2802
            localctx.col_expr_literal = self.char_string_literal()
            self.state = 2803
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2804
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDCLParser.JSON_KEYS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def json_keys_using_name_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Json_keys_using_name_value_pairContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Json_keys_using_name_value_pairContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_json_keys_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_table_operator" ):
                listener.enterJson_keys_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_table_operator" ):
                listener.exitJson_keys_table_operator(self)




    def json_keys_table_operator(self):

        localctx = TeradataSQLDCLParser.Json_keys_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_json_keys_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2806
                self.td_sysfnlib()


            self.state = 2809
            self.match(TeradataSQLDCLParser.JSON_KEYS)
            self.state = 2810
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2811
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2812
            self.subquery()
            self.state = 2819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2813
                self.match(TeradataSQLDCLParser.USING)
                self.state = 2815 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2814
                    self.json_keys_using_name_value_pair()
                    self.state = 2817 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1185 or _la==1186):
                        break



            self.state = 2821
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_shred_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.col_expr_literal = list() # of Char_string_literalContexts
            self.return_type = list() # of Char_string_literalContexts
            self.nocase_value = None # Integer_literalContext
            self.truncate_value = None # Integer_literalContext

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDCLParser.TD_JSONSHRED, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDCLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDCLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDCLParser.RETURNTYPES, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def NOCASE(self):
            return self.getToken(TeradataSQLDCLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDCLParser.TRUNCATE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_json_shred_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_shred_table_operator" ):
                listener.enterJson_shred_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_shred_table_operator" ):
                listener.exitJson_shred_table_operator(self)




    def json_shred_table_operator(self):

        localctx = TeradataSQLDCLParser.Json_shred_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_json_shred_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 2823
                self.td_sysfnlib()


            self.state = 2826
            self.match(TeradataSQLDCLParser.TD_JSONSHRED)
            self.state = 2827
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2828
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2829
            self.subquery()
            self.state = 2830
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2831
            self.match(TeradataSQLDCLParser.ROWEXPR)
            self.state = 2832
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2833
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 2834
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2835
            self.match(TeradataSQLDCLParser.COLEXPR)
            self.state = 2836
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2837
            localctx._char_string_literal = self.char_string_literal()
            localctx.col_expr_literal.append(localctx._char_string_literal)
            self.state = 2842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2838
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2839
                localctx._char_string_literal = self.char_string_literal()
                localctx.col_expr_literal.append(localctx._char_string_literal)
                self.state = 2844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2845
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2846
            self.match(TeradataSQLDCLParser.RETURNTYPES)
            self.state = 2847
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2848
            localctx._char_string_literal = self.char_string_literal()
            localctx.return_type.append(localctx._char_string_literal)
            self.state = 2853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2849
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 2850
                localctx._char_string_literal = self.char_string_literal()
                localctx.return_type.append(localctx._char_string_literal)
                self.state = 2855
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2856
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 2862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1190:
                self.state = 2857
                self.match(TeradataSQLDCLParser.NOCASE)
                self.state = 2858
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2859
                localctx.nocase_value = self.integer_literal()
                self.state = 2860
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1191:
                self.state = 2864
                self.match(TeradataSQLDCLParser.TRUNCATE)
                self.state = 2865
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2866
                localctx.truncate_value = self.integer_literal()
                self.state = 2867
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 2871
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def table_operator_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Table_operator_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_on_clauseContext,i)


        def table_operator_execute_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_execute_clauseContext,0)


        def table_operator_out_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Table_operator_out_table_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_out_table_clauseContext,i)


        def table_operator_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_generic_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_table_operator" ):
                listener.enterGeneric_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_table_operator" ):
                listener.exitGeneric_table_operator(self)




    def generic_table_operator(self):

        localctx = TeradataSQLDCLParser.Generic_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_generic_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.table_name()
            self.state = 2874
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==286:
                self.state = 2875
                self.table_operator_on_clause()
                self.state = 2880
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 2881
                self.table_operator_execute_clause()


            self.state = 2887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2884
                self.table_operator_out_table_clause()
                self.state = 2889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2890
                self.table_operator_using_clause()


            self.state = 2893
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def hash_or_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Hash_or_partition_byContext,0)


        def DIMENSION(self):
            return self.getToken(TeradataSQLDCLParser.DIMENSION, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_fullContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDCLParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_operator_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_on_clause" ):
                listener.enterTable_operator_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_on_clause" ):
                listener.exitTable_operator_on_clause(self)




    def table_operator_on_clause(self):

        localctx = TeradataSQLDCLParser.Table_operator_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_table_operator_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2895
            self.match(TeradataSQLDCLParser.ON)
            self.state = 2898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2896
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2897
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2900
                self.match(TeradataSQLDCLParser.AS)
                self.state = 2901
                self.alias_name()


            self.state = 2906
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 840]:
                self.state = 2904
                self.hash_or_partition_by()
                pass
            elif token in [635]:
                self.state = 2905
                self.match(TeradataSQLDCLParser.DIMENSION)
                pass
            elif token in [144, 224, 286, 291, 293, 352, 457, 542, 569, 625, 871, 1214]:
                pass
            else:
                pass
            self.state = 2921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 2909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 2908
                    self.match(TeradataSQLDCLParser.LOCAL)


                self.state = 2911
                self.match(TeradataSQLDCLParser.ORDER)
                self.state = 2912
                self.match(TeradataSQLDCLParser.BY)
                self.state = 2913
                self.order_by_spec_full()
                self.state = 2918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2914
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2915
                    self.order_by_spec_full()
                    self.state = 2920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext

        def EXECUTE(self):
            return self.getToken(TeradataSQLDCLParser.EXECUTE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDCLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDCLParser.EQUALS_SIGN, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLDCLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_operator_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_execute_clause" ):
                listener.enterTable_operator_execute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_execute_clause" ):
                listener.exitTable_operator_execute_clause(self)




    def table_operator_execute_clause(self):

        localctx = TeradataSQLDCLParser.Table_operator_execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_table_operator_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2923
            self.match(TeradataSQLDCLParser.EXECUTE)
            self.state = 2924
            self.match(TeradataSQLDCLParser.MAP)
            self.state = 2925
            self.match(TeradataSQLDCLParser.EQUALS_SIGN)
            self.state = 2926
            localctx.map_name = self.char_string_literal()
            self.state = 2931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 2927
                self.match(TeradataSQLDCLParser.COLOCATE)
                self.state = 2928
                self.match(TeradataSQLDCLParser.USING)
                self.state = 2929
                self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                self.state = 2930
                localctx.colocation_name = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_out_table_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def OUT(self):
            return self.getToken(TeradataSQLDCLParser.OUT, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDCLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_operator_out_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_out_table_clause" ):
                listener.enterTable_operator_out_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_out_table_clause" ):
                listener.exitTable_operator_out_table_clause(self)




    def table_operator_out_table_clause(self):

        localctx = TeradataSQLDCLParser.Table_operator_out_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_table_operator_out_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.match(TeradataSQLDCLParser.OUT)
            self.state = 2934
            self.match(TeradataSQLDCLParser.TABLE)
            self.state = 2935
            localctx.name = self.unqualified_name()
            self.state = 2936
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2937
            self.table_name()
            self.state = 2938
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def table_operator_using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Table_operator_using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Table_operator_using_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_operator_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_clause" ):
                listener.enterTable_operator_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_clause" ):
                listener.exitTable_operator_using_clause(self)




    def table_operator_using_clause(self):

        localctx = TeradataSQLDCLParser.Table_operator_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_table_operator_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2940
            self.match(TeradataSQLDCLParser.USING)
            self.state = 2942 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2941
                self.table_operator_using_spec()
                self.state = 2944 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_table_operator_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_spec" ):
                listener.enterTable_operator_using_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_spec" ):
                listener.exitTable_operator_using_spec(self)




    def table_operator_using_spec(self):

        localctx = TeradataSQLDCLParser.Table_operator_using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_table_operator_using_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946
            localctx.name = self.unqualified_name()
            self.state = 2949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2947
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 2948
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_using_name_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDCLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDCLParser.QUOTES, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_json_keys_using_name_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_using_name_value_pair" ):
                listener.enterJson_keys_using_name_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_using_name_value_pair" ):
                listener.exitJson_keys_using_name_value_pair(self)




    def json_keys_using_name_value_pair(self):

        localctx = TeradataSQLDCLParser.Json_keys_using_name_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_json_keys_using_name_value_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2951
            _la = self._input.LA(1)
            if not(_la==1185 or _la==1186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2952
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2953
            localctx.value = self.scalar_expr(0)
            self.state = 2954
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_or_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def HASH(self):
            return self.getToken(TeradataSQLDCLParser.HASH, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDCLParser.PARTITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def ANY(self):
            return self.getToken(TeradataSQLDCLParser.ANY, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_hash_or_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_or_partition_by" ):
                listener.enterHash_or_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_or_partition_by" ):
                listener.exitHash_or_partition_by(self)




    def hash_or_partition_by(self):

        localctx = TeradataSQLDCLParser.Hash_or_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_hash_or_partition_by)
        self._la = 0 # Token type
        try:
            self.state = 2969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2956
                _la = self._input.LA(1)
                if not(_la==178 or _la==840):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2957
                self.match(TeradataSQLDCLParser.BY)
                self.state = 2958
                self.scalar_expr(0)
                self.state = 2963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2959
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 2960
                    self.scalar_expr(0)
                    self.state = 2965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2966
                self.match(TeradataSQLDCLParser.PARTITION)
                self.state = 2967
                self.match(TeradataSQLDCLParser.BY)
                self.state = 2968
                self.match(TeradataSQLDCLParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_subquery_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_reference" ):
                listener.enterSubquery_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_reference" ):
                listener.exitSubquery_reference(self)




    def subquery_reference(self):

        localctx = TeradataSQLDCLParser.Subquery_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_subquery_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2971
            self.subquery()
            self.state = 2973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2972
                self.match(TeradataSQLDCLParser.AS)


            self.state = 2975
            self.alias_name()
            self.state = 2977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
            if la_ == 1:
                self.state = 2976
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_path = None # Token

        def LOCATION(self):
            return self.getToken(TeradataSQLDCLParser.LOCATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDCLParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation" ):
                listener.enterLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation" ):
                listener.exitLocation(self)




    def location(self):

        localctx = TeradataSQLDCLParser.LocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_location)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2979
            self.match(TeradataSQLDCLParser.LOCATION)
            self.state = 2980
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 2981
            localctx.external_file_path = self.match(TeradataSQLDCLParser.CHAR_STRING)
            self.state = 2982
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.buffer_size = None # Char_string_literalContext
            self.return_type = None # Char_string_literalContext
            self.row_sampling_value = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.fullscan = None # Char_string_literalContext
            self.manifest = None # Char_string_literalContext
            self.row_format = None # Char_string_literalContext
            self.header = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDCLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDCLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDCLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDCLParser.SAMPLE_PERC, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDCLParser.STOREDAS, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDCLParser.FULLSCAN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDCLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDCLParser.ROWFORMAT, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDCLParser.HEADER, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_read_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_option" ):
                listener.enterRead_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_option" ):
                listener.exitRead_nos_option(self)




    def read_nos_option(self):

        localctx = TeradataSQLDCLParser.Read_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_read_nos_option)
        try:
            self.state = 3032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2984
                self.match(TeradataSQLDCLParser.AUTHORIZATION)
                self.state = 2985
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
                if la_ == 1:
                    self.state = 2986
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 2987
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 2990
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2992
                self.match(TeradataSQLDCLParser.BUFFERSIZE)
                self.state = 2993
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2994
                localctx.buffer_size = self.char_string_literal()
                self.state = 2995
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2997
                self.match(TeradataSQLDCLParser.RETURNTYPE)
                self.state = 2998
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 2999
                localctx.return_type = self.char_string_literal()
                self.state = 3000
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1157]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3002
                self.match(TeradataSQLDCLParser.SAMPLE_PERC)
                self.state = 3003
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3004
                localctx.row_sampling_value = self.char_string_literal()
                self.state = 3005
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3007
                self.match(TeradataSQLDCLParser.STOREDAS)
                self.state = 3008
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3009
                localctx.stored_as = self.char_string_literal()
                self.state = 3010
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1158]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3012
                self.match(TeradataSQLDCLParser.FULLSCAN)
                self.state = 3013
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3014
                localctx.fullscan = self.char_string_literal()
                self.state = 3015
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3017
                self.match(TeradataSQLDCLParser.MANIFEST)
                self.state = 3018
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3019
                localctx.manifest = self.char_string_literal()
                self.state = 3020
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3022
                self.match(TeradataSQLDCLParser.ROWFORMAT)
                self.state = 3023
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3024
                localctx.row_format = self.char_string_literal()
                self.state = 3025
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3027
                self.match(TeradataSQLDCLParser.HEADER)
                self.state = 3028
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3029
                localctx.header = self.char_string_literal()
                self.state = 3030
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.naming = None # Char_string_literalContext
            self.manifest_name = None # Char_string_literalContext
            self.manifest_only = None # Char_string_literalContext
            self.overwrite = None # Char_string_literalContext
            self.include_ordering = None # Char_string_literalContext
            self.include_hashby = None # Char_string_literalContext
            self.max_object_size = None # Char_string_literalContext
            self.compression = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDCLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def STOREDAS(self):
            return self.getToken(TeradataSQLDCLParser.STOREDAS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDCLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDCLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDCLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDCLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDCLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDCLParser.COMPRESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_write_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_option" ):
                listener.enterWrite_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_option" ):
                listener.exitWrite_nos_option(self)




    def write_nos_option(self):

        localctx = TeradataSQLDCLParser.Write_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_write_nos_option)
        try:
            self.state = 3087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3034
                self.match(TeradataSQLDCLParser.AUTHORIZATION)
                self.state = 3035
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3038
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
                if la_ == 1:
                    self.state = 3036
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 3037
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 3040
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3042
                self.match(TeradataSQLDCLParser.STOREDAS)
                self.state = 3043
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3044
                localctx.stored_as = self.char_string_literal()
                self.state = 3045
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3047
                self.match(TeradataSQLDCLParser.NAMING)
                self.state = 3048
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3049
                localctx.naming = self.char_string_literal()
                self.state = 3050
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3052
                self.match(TeradataSQLDCLParser.MANIFESTFILE)
                self.state = 3053
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3054
                localctx.manifest_name = self.char_string_literal()
                self.state = 3055
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3057
                self.match(TeradataSQLDCLParser.MANIFESTONLY)
                self.state = 3058
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3059
                localctx.manifest_only = self.char_string_literal()
                self.state = 3060
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3062
                self.match(TeradataSQLDCLParser.OVERWRITE)
                self.state = 3063
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3064
                localctx.overwrite = self.char_string_literal()
                self.state = 3065
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3067
                self.match(TeradataSQLDCLParser.INCLUDE_ORDERING)
                self.state = 3068
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3069
                localctx.include_ordering = self.char_string_literal()
                self.state = 3070
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1171]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3072
                self.match(TeradataSQLDCLParser.INCLUDE_HASHBY)
                self.state = 3073
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3074
                localctx.include_hashby = self.char_string_literal()
                self.state = 3075
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1172]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3077
                self.match(TeradataSQLDCLParser.MAXOBJECTSIZE)
                self.state = 3078
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3079
                localctx.max_object_size = self.char_string_literal()
                self.state = 3080
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1173]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3082
                self.match(TeradataSQLDCLParser.COMPRESSION)
                self.state = 3083
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3084
                localctx.compression = self.char_string_literal()
                self.state = 3085
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def with_clause_title_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.With_clause_title_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.With_clause_title_phraseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def with_clause_by_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_clause_by_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = TeradataSQLDCLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 3090
            self.scalar_expr(0)
            self.state = 3092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 3091
                self.with_clause_title_phrase()


            self.state = 3101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,366,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3094
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3095
                    self.scalar_expr(0)
                    self.state = 3097
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                    if la_ == 1:
                        self.state = 3096
                        self.with_clause_title_phrase()

             
                self.state = 3103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,366,self._ctx)

            self.state = 3105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,367,self._ctx)
            if la_ == 1:
                self.state = 3104
                self.with_clause_by_phrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_by_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_asc_desc_onlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_clause_by_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_by_phrase" ):
                listener.enterWith_clause_by_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_by_phrase" ):
                listener.exitWith_clause_by_phrase(self)




    def with_clause_by_phrase(self):

        localctx = TeradataSQLDCLParser.With_clause_by_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_with_clause_by_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3107
            self.match(TeradataSQLDCLParser.BY)
            self.state = 3108
            self.order_by_spec_asc_desc_only()
            self.state = 3113
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3109
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3110
                    self.order_by_spec_asc_desc_only() 
                self.state = 3115
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDCLParser.TITLE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_clause_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_title_phrase" ):
                listener.enterWith_clause_title_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_title_phrase" ):
                listener.exitWith_clause_title_phrase(self)




    def with_clause_title_phrase(self):

        localctx = TeradataSQLDCLParser.With_clause_title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_with_clause_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3116
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 3117
            self.match(TeradataSQLDCLParser.TITLE)
            self.state = 3118
            localctx.title = self.char_string_literal()
            self.state = 3119
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(TeradataSQLDCLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = TeradataSQLDCLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3121
            self.match(TeradataSQLDCLParser.WHERE)
            self.state = 3122
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(TeradataSQLDCLParser.GROUP, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def group_by_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Group_by_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Group_by_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = TeradataSQLDCLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_group_by_clause)
        try:
            self.state = 3136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3124
                self.match(TeradataSQLDCLParser.GROUP)
                self.state = 3125
                self.match(TeradataSQLDCLParser.BY)
                self.state = 3126
                self.group_by_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3127
                self.match(TeradataSQLDCLParser.GROUP)
                self.state = 3128
                self.match(TeradataSQLDCLParser.BY)
                self.state = 3129
                self.group_by_spec()
                self.state = 3132 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3130
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3131
                        self.group_by_spec()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3134 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Ordinary_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_group_by_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_spec" ):
                listener.enterGroup_by_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_spec" ):
                listener.exitGroup_by_spec(self)




    def group_by_spec(self):

        localctx = TeradataSQLDCLParser.Group_by_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_group_by_spec)
        try:
            self.state = 3142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3138
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3139
                self.rollup_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3140
                self.cube_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3141
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def ordinary_grouping_set_parenthesized(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Ordinary_grouping_set_parenthesizedContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Ordinary_grouping_set_parenthesizedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_ordinary_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set" ):
                listener.enterOrdinary_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set" ):
                listener.exitOrdinary_grouping_set(self)




    def ordinary_grouping_set(self):

        localctx = TeradataSQLDCLParser.Ordinary_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_ordinary_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3146
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 3144
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 3145
                self.ordinary_grouping_set_parenthesized()
                pass


            self.state = 3155
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3148
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3151
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                    if la_ == 1:
                        self.state = 3149
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 3150
                        self.ordinary_grouping_set_parenthesized()
                        pass

             
                self.state = 3157
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_set_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_ordinary_grouping_set_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set_parenthesized" ):
                listener.enterOrdinary_grouping_set_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set_parenthesized" ):
                listener.exitOrdinary_grouping_set_parenthesized(self)




    def ordinary_grouping_set_parenthesized(self):

        localctx = TeradataSQLDCLParser.Ordinary_grouping_set_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_ordinary_grouping_set_parenthesized)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3158
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 3159
            self.scalar_expr(0)
            self.state = 3162 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3160
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 3161
                self.scalar_expr(0)
                self.state = 3164 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 3166
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = TeradataSQLDCLParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3168
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 3169
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(TeradataSQLDCLParser.ROLLUP, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_rollup_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_option" ):
                listener.enterRollup_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_option" ):
                listener.exitRollup_option(self)




    def rollup_option(self):

        localctx = TeradataSQLDCLParser.Rollup_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_rollup_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3171
            self.match(TeradataSQLDCLParser.ROLLUP)
            self.state = 3172
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 3173
            self.ordinary_grouping_set()
            self.state = 3174
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(TeradataSQLDCLParser.CUBE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_cube_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_option" ):
                listener.enterCube_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_option" ):
                listener.exitCube_option(self)




    def cube_option(self):

        localctx = TeradataSQLDCLParser.Cube_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_cube_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3176
            self.match(TeradataSQLDCLParser.CUBE)
            self.state = 3177
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 3178
            self.ordinary_grouping_set()
            self.state = 3179
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(TeradataSQLDCLParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(TeradataSQLDCLParser.SETS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def grouping_sets_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Grouping_sets_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Grouping_sets_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grouping_sets_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_option" ):
                listener.enterGrouping_sets_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_option" ):
                listener.exitGrouping_sets_option(self)




    def grouping_sets_option(self):

        localctx = TeradataSQLDCLParser.Grouping_sets_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_grouping_sets_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3181
            self.match(TeradataSQLDCLParser.GROUPING)
            self.state = 3182
            self.match(TeradataSQLDCLParser.SETS)
            self.state = 3183
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 3184
            self.grouping_sets_spec()
            self.state = 3189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3185
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 3186
                self.grouping_sets_spec()
                self.state = 3191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3192
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Ordinary_grouping_setContext,0)


        def empty_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Empty_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_grouping_sets_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_spec" ):
                listener.enterGrouping_sets_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_spec" ):
                listener.exitGrouping_sets_spec(self)




    def grouping_sets_spec(self):

        localctx = TeradataSQLDCLParser.Grouping_sets_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_grouping_sets_spec)
        try:
            self.state = 3199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3194
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3195
                self.empty_grouping_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3196
                self.rollup_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3197
                self.cube_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3198
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(TeradataSQLDCLParser.HAVING, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = TeradataSQLDCLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3201
            self.match(TeradataSQLDCLParser.HAVING)
            self.state = 3202
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualify_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(TeradataSQLDCLParser.QUALIFY, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_qualify_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualify_clause" ):
                listener.enterQualify_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualify_clause" ):
                listener.exitQualify_clause(self)




    def qualify_clause(self):

        localctx = TeradataSQLDCLParser.Qualify_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_qualify_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3204
            self.match(TeradataSQLDCLParser.QUALIFY)
            self.state = 3205
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(TeradataSQLDCLParser.SAMPLE, 0)

        def sample_fraction_description(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Sample_fraction_descriptionContext,0)


        def sample_count_description(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Sample_count_descriptionContext,0)


        def sample_when_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Sample_when_clauseContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDCLParser.REPLACEMENT, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDCLParser.RANDOMIZED, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDCLParser.ALLOCATION, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = TeradataSQLDCLParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3207
            self.match(TeradataSQLDCLParser.SAMPLE)
            self.state = 3210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3208
                self.match(TeradataSQLDCLParser.WITH)
                self.state = 3209
                self.match(TeradataSQLDCLParser.REPLACEMENT)


            self.state = 3214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==872:
                self.state = 3212
                self.match(TeradataSQLDCLParser.RANDOMIZED)
                self.state = 3213
                self.match(TeradataSQLDCLParser.ALLOCATION)


            self.state = 3219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1197]:
                self.state = 3216
                self.sample_fraction_description()
                pass
            elif token in [1194]:
                self.state = 3217
                self.sample_count_description()
                pass
            elif token in [470]:
                self.state = 3218
                self.sample_when_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_fraction_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._float_literal = None # Float_literalContext
            self.fraction_description = list() # of Float_literalContexts

        def float_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Float_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Float_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_sample_fraction_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_fraction_description" ):
                listener.enterSample_fraction_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_fraction_description" ):
                listener.exitSample_fraction_description(self)




    def sample_fraction_description(self):

        localctx = TeradataSQLDCLParser.Sample_fraction_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_sample_fraction_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3221
            localctx._float_literal = self.float_literal()
            localctx.fraction_description.append(localctx._float_literal)
            self.state = 3226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,381,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3222
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3223
                    localctx._float_literal = self.float_literal()
                    localctx.fraction_description.append(localctx._float_literal) 
                self.state = 3228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_count_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.count_description = list() # of Integer_literalContexts

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_sample_count_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_count_description" ):
                listener.enterSample_count_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_count_description" ):
                listener.exitSample_count_description(self)




    def sample_count_description(self):

        localctx = TeradataSQLDCLParser.Sample_count_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_sample_count_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3229
            localctx._integer_literal = self.integer_literal()
            localctx.count_description.append(localctx._integer_literal)
            self.state = 3234
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,382,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3230
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3231
                    localctx._integer_literal = self.integer_literal()
                    localctx.count_description.append(localctx._integer_literal) 
                self.state = 3236
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,382,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_when_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDCLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDCLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.THEN)
            else:
                return self.getToken(TeradataSQLDCLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDCLParser.ELSE, 0)

        def sample_fraction_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Sample_fraction_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Sample_fraction_descriptionContext,i)


        def sample_count_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Sample_count_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Sample_count_descriptionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_sample_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_when_clause" ):
                listener.enterSample_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_when_clause" ):
                listener.exitSample_when_clause(self)




    def sample_when_clause(self):

        localctx = TeradataSQLDCLParser.Sample_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_sample_when_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3237
                self.match(TeradataSQLDCLParser.WHEN)
                self.state = 3238
                self.logical_expr(0)
                self.state = 3239
                self.match(TeradataSQLDCLParser.THEN)
                self.state = 3242
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 3240
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 3241
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3246 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 3253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3248
                self.match(TeradataSQLDCLParser.ELSE)
                self.state = 3251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 3249
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 3250
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3255
            self.match(TeradataSQLDCLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expand_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expand_expr = None # Scalar_exprContext
            self.expand_column_alias = None # Alias_nameContext
            self.period_expression = None # Scalar_exprContext

        def EXPAND(self):
            return self.getToken(TeradataSQLDCLParser.EXPAND, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDCLParser.FOR, 0)

        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_literalContext,0)


        def ANCHOR(self):
            return self.getToken(TeradataSQLDCLParser.ANCHOR, 0)

        def anchor_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Anchor_nameContext,0)


        def PERIOD(self):
            return self.getToken(TeradataSQLDCLParser.PERIOD, 0)

        def AT(self):
            return self.getToken(TeradataSQLDCLParser.AT, 0)

        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Time_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_expand_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpand_on_clause" ):
                listener.enterExpand_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpand_on_clause" ):
                listener.exitExpand_on_clause(self)




    def expand_on_clause(self):

        localctx = TeradataSQLDCLParser.Expand_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_expand_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3257
            self.match(TeradataSQLDCLParser.EXPAND)
            self.state = 3258
            self.match(TeradataSQLDCLParser.ON)
            self.state = 3259
            localctx.expand_expr = self.scalar_expr(0)
            self.state = 3261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 3260
                self.match(TeradataSQLDCLParser.AS)


            self.state = 3263
            localctx.expand_column_alias = self.alias_name()
            self.state = 3277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                self.state = 3264
                self.match(TeradataSQLDCLParser.BY)
                self.state = 3275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [205]:
                    self.state = 3265
                    self.interval_literal()
                    pass
                elif token in [505]:
                    self.state = 3266
                    self.match(TeradataSQLDCLParser.ANCHOR)
                    self.state = 3268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==853:
                        self.state = 3267
                        self.match(TeradataSQLDCLParser.PERIOD)


                    self.state = 3270
                    self.anchor_name()
                    self.state = 3273
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
                    if la_ == 1:
                        self.state = 3271
                        self.match(TeradataSQLDCLParser.AT)
                        self.state = 3272
                        self.time_literal()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 3281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 3279
                self.match(TeradataSQLDCLParser.FOR)
                self.state = 3280
                localctx.period_expression = self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TeradataSQLDCLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3283
            self.match(TeradataSQLDCLParser.ORDER)
            self.state = 3284
            self.match(TeradataSQLDCLParser.BY)
            self.state = 3285
            self.order_by_spec_full()
            self.state = 3290
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,393,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3286
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3287
                    self.order_by_spec_full() 
                self.state = 3292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,393,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_fullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDCLParser.NULLS, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDCLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDCLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLDCLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDCLParser.LAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_order_by_spec_full

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_full" ):
                listener.enterOrder_by_spec_full(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_full" ):
                listener.exitOrder_by_spec_full(self)




    def order_by_spec_full(self):

        localctx = TeradataSQLDCLParser.Order_by_spec_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_order_by_spec_full)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3293
            self.scalar_expr(0)
            self.state = 3295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.state = 3294
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.state = 3297
                self.match(TeradataSQLDCLParser.NULLS)
                self.state = 3298
                _la = self._input.LA(1)
                if not(_la==156 or _la==731):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_asc_desc_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def ASC(self):
            return self.getToken(TeradataSQLDCLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDCLParser.DESC, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_order_by_spec_asc_desc_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_asc_desc_only" ):
                listener.enterOrder_by_spec_asc_desc_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_asc_desc_only" ):
                listener.exitOrder_by_spec_asc_desc_only(self)




    def order_by_spec_asc_desc_only(self):

        localctx = TeradataSQLDCLParser.Order_by_spec_asc_desc_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_order_by_spec_asc_desc_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3301
            self.scalar_expr(0)
            self.state = 3303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.state = 3302
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_check_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDCLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDCLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_check_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_check_option" ):
                listener.enterWith_check_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_check_option" ):
                listener.exitWith_check_option(self)




    def with_check_option(self):

        localctx = TeradataSQLDCLParser.With_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_with_check_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3305
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 3306
            self.match(TeradataSQLDCLParser.CHECK)
            self.state = 3307
            self.match(TeradataSQLDCLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_logical_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PeriodMeetsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def MEETS(self):
            return self.getToken(TeradataSQLDCLParser.MEETS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodMeets" ):
                listener.enterPeriodMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodMeets" ):
                listener.exitPeriodMeets(self)


    class PeriodImmediatelySucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDCLParser.IMMEDIATELY, 0)
        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDCLParser.SUCCEEDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelySucceeds" ):
                listener.enterPeriodImmediatelySucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelySucceeds" ):
                listener.exitPeriodImmediatelySucceeds(self)


    class PeriodEqualsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def EQUALS(self):
            return self.getToken(TeradataSQLDCLParser.EQUALS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodEquals" ):
                listener.enterPeriodEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodEquals" ):
                listener.exitPeriodEquals(self)


    class ScalarComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarComparelist" ):
                listener.enterScalarComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarComparelist" ):
                listener.exitScalarComparelist(self)


    class TupleInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.TupleContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDCLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleInSubquery" ):
                listener.enterTupleInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleInSubquery" ):
                listener.exitTupleInSubquery(self)


    class LogicalOrContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,i)

        def OR(self):
            return self.getToken(TeradataSQLDCLParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOr" ):
                listener.enterLogicalOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOr" ):
                listener.exitLogicalOr(self)


    class ScalarInScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)
        def IS(self):
            return self.getToken(TeradataSQLDCLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInScalar" ):
                listener.enterScalarInScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInScalar" ):
                listener.exitScalarInScalar(self)


    class ScalarCompareScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarCompareScalar" ):
                listener.enterScalarCompareScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarCompareScalar" ):
                listener.exitScalarCompareScalar(self)


    class LogicalNotContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class TupleComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.TupleContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleComparelist" ):
                listener.enterTupleComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleComparelist" ):
                listener.exitTupleComparelist(self)


    class ScalarInListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)
        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_expr_listContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDCLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInList" ):
                listener.enterScalarInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInList" ):
                listener.exitScalarInList(self)


    class TupleLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.TupleContext,0)

        def LIKE(self):
            return self.getToken(TeradataSQLDCLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDCLParser.ESCAPE, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleLikeList" ):
                listener.enterTupleLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleLikeList" ):
                listener.exitTupleLikeList(self)


    class LogicalAndContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,i)

        def AND(self):
            return self.getToken(TeradataSQLDCLParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAnd" ):
                listener.enterLogicalAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAnd" ):
                listener.exitLogicalAnd(self)


    class ScalarInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDCLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInSubquery" ):
                listener.enterScalarInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInSubquery" ):
                listener.exitScalarInSubquery(self)


    class PeriodContainsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def CONTAINS(self):
            return self.getToken(TeradataSQLDCLParser.CONTAINS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodContains" ):
                listener.enterPeriodContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodContains" ):
                listener.exitPeriodContains(self)


    class PeriodOverlapsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDCLParser.OVERLAPS, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)
        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)
        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodOverlaps" ):
                listener.enterPeriodOverlaps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodOverlaps" ):
                listener.exitPeriodOverlaps(self)


    class BetweenContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDCLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(TeradataSQLDCLParser.AND, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class ParenthesizedLogicalExprContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedLogicalExpr" ):
                listener.enterParenthesizedLogicalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedLogicalExpr" ):
                listener.exitParenthesizedLogicalExpr(self)


    class PeriodImmediatelyPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDCLParser.IMMEDIATELY, 0)
        def PRECEDES(self):
            return self.getToken(TeradataSQLDCLParser.PRECEDES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelyPrecedes" ):
                listener.enterPeriodImmediatelyPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelyPrecedes" ):
                listener.exitPeriodImmediatelyPrecedes(self)


    class NullCheckContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDCLParser.IS, 0)
        def NULL(self):
            return self.getToken(TeradataSQLDCLParser.NULL, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCheck" ):
                listener.enterNullCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCheck" ):
                listener.exitNullCheck(self)


    class PeriodPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDCLParser.PRECEDES, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodPrecedes" ):
                listener.enterPeriodPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodPrecedes" ):
                listener.exitPeriodPrecedes(self)


    class ExistsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(TeradataSQLDCLParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PeriodSucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDCLParser.SUCCEEDS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodSucceeds" ):
                listener.enterPeriodSucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodSucceeds" ):
                listener.exitPeriodSucceeds(self)


    class ScalarLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDCLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDCLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeList" ):
                listener.enterScalarLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeList" ):
                listener.exitScalarLikeList(self)


    class ScalarLikeScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDCLParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(TeradataSQLDCLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDCLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeScalar" ):
                listener.enterScalarLikeScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeScalar" ):
                listener.exitScalarLikeScalar(self)



    def logical_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDCLParser.Logical_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 372
        self.enterRecursionRule(localctx, 372, self.RULE_logical_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDCLParser.ScalarCompareScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3310
                self.scalar_expr(0)
                self.state = 3311
                localctx.op = self.comparison_operator()
                self.state = 3312
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                localctx = TeradataSQLDCLParser.ScalarComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3314
                self.scalar_expr(0)
                self.state = 3315
                localctx.op = self.comparison_operator()
                self.state = 3316
                self.quantifier()
                self.state = 3317
                self.elements_list()
                self.state = 3321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,397,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3318
                        self.attribute_modification() 
                    self.state = 3323
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,397,self._ctx)

                pass

            elif la_ == 3:
                localctx = TeradataSQLDCLParser.TupleComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3324
                self.tuple_()
                self.state = 3325
                localctx.op = self.comparison_operator()
                self.state = 3326
                self.quantifier()
                self.state = 3327
                self.elements_list()
                self.state = 3331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3328
                        self.attribute_modification() 
                    self.state = 3333
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

                pass

            elif la_ == 4:
                localctx = TeradataSQLDCLParser.BetweenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3334
                self.scalar_expr(0)
                self.state = 3336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3335
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3338
                self.match(TeradataSQLDCLParser.BETWEEN)
                self.state = 3339
                self.scalar_expr(0)
                self.state = 3340
                self.match(TeradataSQLDCLParser.AND)
                self.state = 3341
                self.scalar_expr(0)
                pass

            elif la_ == 5:
                localctx = TeradataSQLDCLParser.ScalarInListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3343
                self.scalar_expr(0)
                self.state = 3345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3344
                    self.match(TeradataSQLDCLParser.IS)


                self.state = 3348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3347
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3350
                self.match(TeradataSQLDCLParser.IN)
                self.state = 3352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3351
                    self.quantifier()


                self.state = 3354
                self.scalar_expr_list()
                self.state = 3358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,403,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3355
                        self.attribute_modification() 
                    self.state = 3360
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,403,self._ctx)

                pass

            elif la_ == 6:
                localctx = TeradataSQLDCLParser.ScalarInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3361
                self.scalar_expr(0)
                self.state = 3363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3362
                    self.match(TeradataSQLDCLParser.IS)


                self.state = 3366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3365
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3368
                self.match(TeradataSQLDCLParser.IN)
                self.state = 3370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3369
                    self.quantifier()


                self.state = 3372
                self.subquery()
                self.state = 3376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3373
                        self.attribute_modification() 
                    self.state = 3378
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,407,self._ctx)

                pass

            elif la_ == 7:
                localctx = TeradataSQLDCLParser.ScalarInScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3379
                self.scalar_expr(0)
                self.state = 3381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3380
                    self.match(TeradataSQLDCLParser.IS)


                self.state = 3384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3383
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3386
                self.match(TeradataSQLDCLParser.IN)
                self.state = 3388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3387
                    self.quantifier()


                self.state = 3390
                self.scalar_expr(0)
                self.state = 3394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,411,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3391
                        self.attribute_modification() 
                    self.state = 3396
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,411,self._ctx)

                pass

            elif la_ == 8:
                localctx = TeradataSQLDCLParser.TupleInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3397
                self.tuple_()
                self.state = 3399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 3398
                    self.match(TeradataSQLDCLParser.IS)


                self.state = 3402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3401
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3404
                self.match(TeradataSQLDCLParser.IN)
                self.state = 3406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 3405
                    self.quantifier()


                self.state = 3408
                self.subquery()
                self.state = 3412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,415,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3409
                        self.attribute_modification() 
                    self.state = 3414
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,415,self._ctx)

                pass

            elif la_ == 9:
                localctx = TeradataSQLDCLParser.ScalarLikeScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3415
                self.scalar_expr(0)
                self.state = 3417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3416
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3419
                self.match(TeradataSQLDCLParser.LIKE)
                self.state = 3420
                self.scalar_expr(0)
                self.state = 3423
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
                if la_ == 1:
                    self.state = 3421
                    self.match(TeradataSQLDCLParser.ESCAPE)
                    self.state = 3422
                    self.scalar_expr(0)


                pass

            elif la_ == 10:
                localctx = TeradataSQLDCLParser.ScalarLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3425
                self.scalar_expr(0)
                self.state = 3427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3426
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3429
                self.match(TeradataSQLDCLParser.LIKE)
                self.state = 3430
                self.quantifier()
                self.state = 3431
                self.elements_list()
                self.state = 3435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3432
                        self.attribute_modification() 
                    self.state = 3437
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

                self.state = 3440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
                if la_ == 1:
                    self.state = 3438
                    self.match(TeradataSQLDCLParser.ESCAPE)
                    self.state = 3439
                    self.scalar_expr(0)


                self.state = 3445
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3442
                        self.attribute_modification() 
                    self.state = 3447
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

                pass

            elif la_ == 11:
                localctx = TeradataSQLDCLParser.TupleLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3448
                self.tuple_()
                self.state = 3450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3449
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3452
                self.match(TeradataSQLDCLParser.LIKE)
                self.state = 3453
                self.quantifier()
                self.state = 3454
                self.elements_list()
                self.state = 3458
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,423,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3455
                        self.attribute_modification() 
                    self.state = 3460
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,423,self._ctx)

                self.state = 3463
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 3461
                    self.match(TeradataSQLDCLParser.ESCAPE)
                    self.state = 3462
                    self.scalar_expr(0)


                self.state = 3468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,425,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3465
                        self.attribute_modification() 
                    self.state = 3470
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,425,self._ctx)

                pass

            elif la_ == 12:
                localctx = TeradataSQLDCLParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3471
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3474
                self.match(TeradataSQLDCLParser.EXISTS)
                self.state = 3475
                self.subquery()
                pass

            elif la_ == 13:
                localctx = TeradataSQLDCLParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3476
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3477
                self.logical_expr(13)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDCLParser.NullCheckContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3478
                self.scalar_expr(0)
                self.state = 3479
                self.match(TeradataSQLDCLParser.IS)
                self.state = 3481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3480
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3483
                self.match(TeradataSQLDCLParser.NULL)
                pass

            elif la_ == 15:
                localctx = TeradataSQLDCLParser.PeriodContainsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3485
                self.scalar_expr(0)
                self.state = 3487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3486
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3489
                self.match(TeradataSQLDCLParser.CONTAINS)
                self.state = 3490
                self.scalar_expr(0)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDCLParser.PeriodEqualsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3492
                self.scalar_expr(0)
                self.state = 3494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3493
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3496
                self.match(TeradataSQLDCLParser.EQUALS)
                self.state = 3497
                self.scalar_expr(0)
                pass

            elif la_ == 17:
                localctx = TeradataSQLDCLParser.PeriodMeetsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3499
                self.scalar_expr(0)
                self.state = 3501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3500
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3503
                self.match(TeradataSQLDCLParser.MEETS)
                self.state = 3504
                self.scalar_expr(0)
                pass

            elif la_ == 18:
                localctx = TeradataSQLDCLParser.PeriodPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3506
                self.scalar_expr(0)
                self.state = 3508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3507
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3510
                self.match(TeradataSQLDCLParser.PRECEDES)
                self.state = 3511
                self.scalar_expr(0)
                pass

            elif la_ == 19:
                localctx = TeradataSQLDCLParser.PeriodSucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3513
                self.scalar_expr(0)
                self.state = 3515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 3514
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3517
                self.match(TeradataSQLDCLParser.SUCCEEDS)
                self.state = 3518
                self.scalar_expr(0)
                pass

            elif la_ == 20:
                localctx = TeradataSQLDCLParser.PeriodImmediatelyPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3520
                self.scalar_expr(0)
                self.state = 3521
                self.match(TeradataSQLDCLParser.IMMEDIATELY)
                self.state = 3522
                self.match(TeradataSQLDCLParser.PRECEDES)
                self.state = 3523
                self.scalar_expr(0)
                pass

            elif la_ == 21:
                localctx = TeradataSQLDCLParser.PeriodImmediatelySucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3525
                self.scalar_expr(0)
                self.state = 3526
                self.match(TeradataSQLDCLParser.IMMEDIATELY)
                self.state = 3527
                self.match(TeradataSQLDCLParser.SUCCEEDS)
                self.state = 3528
                self.scalar_expr(0)
                pass

            elif la_ == 22:
                localctx = TeradataSQLDCLParser.PeriodOverlapsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                if la_ == 1:
                    self.state = 3530
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 3531
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 3532
                    self.scalar_expr(0)
                    self.state = 3533
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3534
                    self.scalar_expr(0)
                    self.state = 3535
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 3537
                    self.subquery()
                    pass


                self.state = 3540
                self.match(TeradataSQLDCLParser.OVERLAPS)
                self.state = 3549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
                if la_ == 1:
                    self.state = 3541
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 3542
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 3543
                    self.scalar_expr(0)
                    self.state = 3544
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3545
                    self.scalar_expr(0)
                    self.state = 3546
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 3548
                    self.subquery()
                    pass


                pass

            elif la_ == 23:
                localctx = TeradataSQLDCLParser.ParenthesizedLogicalExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3551
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3552
                self.logical_expr(0)
                self.state = 3553
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3565
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,437,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3563
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDCLParser.LogicalAndContext(self, TeradataSQLDCLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 3557
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 3558
                        self.match(TeradataSQLDCLParser.AND)
                        self.state = 3559
                        self.logical_expr(13)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDCLParser.LogicalOrContext(self, TeradataSQLDCLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 3560
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 3561
                        self.match(TeradataSQLDCLParser.OR)
                        self.state = 3562
                        self.logical_expr(12)
                        pass

             
                self.state = 3567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Scalar_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_scalar_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JsonMetadataContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.storage_format = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def METADATA(self):
            return self.getToken(TeradataSQLDCLParser.METADATA, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDCLParser.STORAGE_SIZE, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMetadata" ):
                listener.enterJsonMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMetadata" ):
                listener.exitJsonMetadata(self)


    class JsonAsBsonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.validation_specification = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ASBSON(self):
            return self.getToken(TeradataSQLDCLParser.ASBSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBson" ):
                listener.enterJsonAsBson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBson" ):
                listener.exitJsonAsBson(self)


    class VariantTypeConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDCLParser.NEW, 0)
        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDCLParser.VARIANT_TYPE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.AS)
            else:
                return self.getToken(TeradataSQLDCLParser.AS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantTypeConstructor" ):
                listener.enterVariantTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantTypeConstructor" ):
                listener.exitVariantTypeConstructor(self)


    class XMLExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDCLParser.XMLEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExtract" ):
                listener.enterXMLExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExtract" ):
                listener.exitXMLExtract(self)


    class ArrayComparisonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GT, 0)
        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GE, 0)
        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_LT, 0)
        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_LE, 0)
        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_EQ, 0)
        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_NE, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayComparison" ):
                listener.enterArrayComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayComparison" ):
                listener.exitArrayComparison(self)


    class ArrayGetContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_index = None # Scalar_exprContext
            self.other_expr = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GET, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_COMPARE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayGet" ):
                listener.enterArrayGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayGet" ):
                listener.exitArrayGet(self)


    class XMLConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDCLParser.NEW, 0)
        def XML(self):
            return self.getToken(TeradataSQLDCLParser.XML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLConstructor" ):
                listener.enterXMLConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLConstructor" ):
                listener.exitXMLConstructor(self)


    class UDTMethodInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Method_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTMethodInvocation" ):
                listener.enterUDTMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTMethodInvocation" ):
                listener.exitUDTMethodInvocation(self)


    class JsonExtractLargeValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDCLParser.JSONEXTRACTLARGEVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractLargeValue" ):
                listener.enterJsonExtractLargeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractLargeValue" ):
                listener.exitJsonExtractLargeValue(self)


    class JsonRecursiveDescendSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDCLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COLON)
            else:
                return self.getToken(TeradataSQLDCLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendSlice" ):
                listener.enterJsonRecursiveDescendSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendSlice" ):
                listener.exitJsonRecursiveDescendSlice(self)


    class FunctionInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_invocation(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Function_invocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)


    class ScalarSubqueryContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSubquery" ):
                listener.enterScalarSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSubquery" ):
                listener.exitScalarSubquery(self)


    class JsonExistValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDCLParser.EXISTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistValue" ):
                listener.enterJsonExistValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistValue" ):
                listener.exitJsonExistValue(self)


    class ModuloContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def MOD(self):
            return self.getToken(TeradataSQLDCLParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)


    class JsonExtractValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDCLParser.JSONEXTRACTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractValue" ):
                listener.enterJsonExtractValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractValue" ):
                listener.exitJsonExtractValue(self)


    class XMLCreateSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDCLParser.CREATESCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateSchemaBasedXML" ):
                listener.enterXMLCreateSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateSchemaBasedXML" ):
                listener.exitXMLCreateSchemaBasedXML(self)


    class ArrayUpdateContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_UPDATE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdate" ):
                listener.enterArrayUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdate" ):
                listener.exitArrayUpdate(self)


    class JsonExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDCLParser.JSONEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtract" ):
                listener.enterJsonExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtract" ):
                listener.exitJsonExtract(self)


    class MultDivContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)
        def DIV_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.DIV_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDiv" ):
                listener.enterMultDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDiv" ):
                listener.exitMultDiv(self)


    class PeriodIntersectContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDCLParser.P_INTERSECT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodIntersect" ):
                listener.enterPeriodIntersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodIntersect" ):
                listener.exitPeriodIntersect(self)


    class IntervalExprParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval_expr_parenthesized(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_expr_parenthesizedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExprParenthesized" ):
                listener.enterIntervalExprParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExprParenthesized" ):
                listener.exitIntervalExprParenthesized(self)


    class JsonRecursiveDescendAllArrayElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDCLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllArrayElements" ):
                listener.enterJsonRecursiveDescendAllArrayElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllArrayElements" ):
                listener.exitJsonRecursiveDescendAllArrayElements(self)


    class UnaryPlusMinusContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusMinus" ):
                listener.enterUnaryPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusMinus" ):
                listener.exitUnaryPlusMinus(self)


    class ConcatenationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def CONCATENATE(self):
            return self.getToken(TeradataSQLDCLParser.CONCATENATE, 0)
        def BROKEN_CONCATENATE(self):
            return self.getToken(TeradataSQLDCLParser.BROKEN_CONCATENATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class PeriodDiffContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def LDIFF(self):
            return self.getToken(TeradataSQLDCLParser.LDIFF, 0)
        def RDIFF(self):
            return self.getToken(TeradataSQLDCLParser.RDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodDiff" ):
                listener.enterPeriodDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodDiff" ):
                listener.exitPeriodDiff(self)


    class ArrayOmethodWithoudArgsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def OCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.OCOUNT, 0)
        def OLIMIT(self):
            return self.getToken(TeradataSQLDCLParser.OLIMIT, 0)
        def OFIRST(self):
            return self.getToken(TeradataSQLDCLParser.OFIRST, 0)
        def OLAST(self):
            return self.getToken(TeradataSQLDCLParser.OLAST, 0)
        def ODELETE(self):
            return self.getToken(TeradataSQLDCLParser.ODELETE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithoudArgs" ):
                listener.enterArrayOmethodWithoudArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithoudArgs" ):
                listener.exitArrayOmethodWithoudArgs(self)


    class PartitioningExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Partitioning_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningExpr" ):
                listener.enterPartitioningExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningExpr" ):
                listener.exitPartitioningExpr(self)


    class XMLExistNodeContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDCLParser.EXISTSNODE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExistNode" ):
                listener.enterXMLExistNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExistNode" ):
                listener.exitXMLExistNode(self)


    class JsonRecursiveDescendArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDCLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendArrayElementReference" ):
                listener.enterJsonRecursiveDescendArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendArrayElementReference" ):
                listener.exitJsonRecursiveDescendArrayElementReference(self)


    class DataTypeConversionContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def teradata_type_conversion(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Teradata_type_conversionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeConversion" ):
                listener.enterDataTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeConversion" ):
                listener.exitDataTypeConversion(self)


    class JsonRecursiveDescendObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDCLParser.DOT_, i)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendObjectMember" ):
                listener.enterJsonRecursiveDescendObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendObjectMember" ):
                listener.exitJsonRecursiveDescendObjectMember(self)


    class IntervalExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MINUS_SIGN, 0)
        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_expr_start_end_phraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)


    class ExponentiationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def EXPONENTIATION(self):
            return self.getToken(TeradataSQLDCLParser.EXPONENTIATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)


    class XMLIsSchemaValidatedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDCLParser.ISSCHEMAVALIDATED, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValidated" ):
                listener.enterXMLIsSchemaValidated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValidated" ):
                listener.exitXMLIsSchemaValidated(self)


    class JSONConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_data = None # Scalar_exprContext
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDCLParser.NEW, 0)
        def JSON(self):
            return self.getToken(TeradataSQLDCLParser.JSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)
        def LATIN(self):
            return self.getToken(TeradataSQLDCLParser.LATIN, 0)
        def UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE, 0)
        def BSON(self):
            return self.getToken(TeradataSQLDCLParser.BSON, 0)
        def UBJSON(self):
            return self.getToken(TeradataSQLDCLParser.UBJSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSONConstructor" ):
                listener.enterJSONConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSONConstructor" ):
                listener.exitJSONConstructor(self)


    class JsonSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COLON)
            else:
                return self.getToken(TeradataSQLDCLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonSlice" ):
                listener.enterJsonSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonSlice" ):
                listener.exitJsonSlice(self)


    class XMLIsSchemaValidContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.elem_decl = None # Scalar_exprContext
            self.ns = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDCLParser.ISSCHEMAVALID, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValid" ):
                listener.enterXMLIsSchemaValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValid" ):
                listener.exitXMLIsSchemaValid(self)


    class ArrayAggregationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.matching_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_SUM, 0)
        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_AVG, 0)
        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MAX, 0)
        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MIN, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_COUNT_DISTINCT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAggregation" ):
                listener.enterArrayAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAggregation" ):
                listener.exitArrayAggregation(self)


    class ArrayUpdateStrideContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_UPDATE_STRIDE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)

        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdateStride" ):
                listener.enterArrayUpdateStride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdateStride" ):
                listener.exitArrayUpdateStride(self)


    class LiteralExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)


    class ArrayOmethodWithArgContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def OEXISTS(self):
            return self.getToken(TeradataSQLDCLParser.OEXISTS, 0)
        def OPRIOR(self):
            return self.getToken(TeradataSQLDCLParser.OPRIOR, 0)
        def ONEXT(self):
            return self.getToken(TeradataSQLDCLParser.ONEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithArg" ):
                listener.enterArrayOmethodWithArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithArg" ):
                listener.exitArrayOmethodWithArg(self)


    class JsonRecursiveDescendAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.DOT_)
            else:
                return self.getToken(TeradataSQLDCLParser.DOT_, i)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllObjectMembers" ):
                listener.enterJsonRecursiveDescendAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllObjectMembers" ):
                listener.exitJsonRecursiveDescendAllObjectMembers(self)


    class XMLCreateNonSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDCLParser.CREATENONSCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateNonSchemaBasedXML" ):
                listener.enterXMLCreateNonSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateNonSchemaBasedXML" ):
                listener.exitXMLCreateNonSchemaBasedXML(self)


    class VariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableReference" ):
                listener.enterVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableReference" ):
                listener.exitVariableReference(self)


    class AddSubContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSub" ):
                listener.enterAddSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSub" ):
                listener.exitAddSub(self)


    class JsonObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)


    class JsonAllElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllElements" ):
                listener.enterJsonAllElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllElements" ):
                listener.exitJsonAllElements(self)


    class ArrayOextendContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def OEXTEND(self):
            return self.getToken(TeradataSQLDCLParser.OEXTEND, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOextend" ):
                listener.enterArrayOextend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOextend" ):
                listener.exitArrayOextend(self)


    class ArrayArithmeticContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_ADD, 0)
        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_SUB, 0)
        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MUL, 0)
        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_DIV, 0)
        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MOD, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayArithmetic" ):
                listener.enterArrayArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayArithmetic" ):
                listener.exitArrayArithmetic(self)


    class UDTConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDCLParser.NEW, 0)
        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Udt_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SysudtlibContext,0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTConstructor" ):
                listener.enterUDTConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTConstructor" ):
                listener.exitUDTConstructor(self)


    class XMLTransformContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.xsl = None # Scalar_exprContext
            self.parammap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDCLParser.XMLTRANSFORM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLTransform" ):
                listener.enterXMLTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLTransform" ):
                listener.exitXMLTransform(self)


    class DateTimeExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.At_timezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeExpr" ):
                listener.enterDateTimeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeExpr" ):
                listener.exitDateTimeExpr(self)


    class ColumnNameContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)


    class ArrayOtrimContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.num_remove = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def OTRIM(self):
            return self.getToken(TeradataSQLDCLParser.OTRIM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOtrim" ):
                listener.enterArrayOtrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOtrim" ):
                listener.exitArrayOtrim(self)


    class CursorVariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cursor_variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Cursor_variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorVariableReference" ):
                listener.enterCursorVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorVariableReference" ):
                listener.exitCursorVariableReference(self)


    class ParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized" ):
                listener.enterParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized" ):
                listener.exitParenthesized(self)


    class JsonAsBsonTextContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDCLParser.ASBSONTEXT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBsonText" ):
                listener.enterJsonAsBsonText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBsonText" ):
                listener.exitJsonAsBsonText(self)


    class AttributeModificationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeModification" ):
                listener.enterAttributeModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeModification" ):
                listener.exitAttributeModification(self)


    class JsonCombineContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_or_object = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def COMBINE(self):
            return self.getToken(TeradataSQLDCLParser.COMBINE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonCombine" ):
                listener.enterJsonCombine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonCombine" ):
                listener.exitJsonCombine(self)


    class XMLIsDocumentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDCLParser.ISDOCUMENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsDocument" ):
                listener.enterXMLIsDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsDocument" ):
                listener.exitXMLIsDocument(self)


    class MacroParameterReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Macro_parameter_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroParameterReference" ):
                listener.enterMacroParameterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroParameterReference" ):
                listener.exitMacroParameterReference(self)


    class XMLIsContentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def ISCONTENT(self):
            return self.getToken(TeradataSQLDCLParser.ISCONTENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsContent" ):
                listener.enterXMLIsContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsContent" ):
                listener.exitXMLIsContent(self)


    class ArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElementReference" ):
                listener.enterArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElementReference" ):
                listener.exitArrayElementReference(self)


    class ArrayCardinalityContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def CARDINALITY(self):
            return self.getToken(TeradataSQLDCLParser.CARDINALITY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_CONCAT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCardinality" ):
                listener.enterArrayCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCardinality" ):
                listener.exitArrayCardinality(self)


    class CaseExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)


    class JsonKeycountContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.depth = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.KEYCOUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonKeycount" ):
                listener.enterJsonKeycount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonKeycount" ):
                listener.exitJsonKeycount(self)


    class JsonAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllObjectMembers" ):
                listener.enterJsonAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllObjectMembers" ):
                listener.exitJsonAllObjectMembers(self)



    def scalar_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDCLParser.Scalar_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 374
        self.enterRecursionRule(localctx, 374, self.RULE_scalar_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDCLParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3569
                self.literal()
                pass

            elif la_ == 2:
                localctx = TeradataSQLDCLParser.UnaryPlusMinusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3570
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3571
                self.scalar_expr(70)
                pass

            elif la_ == 3:
                localctx = TeradataSQLDCLParser.CaseExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3572
                self.case_expr()
                pass

            elif la_ == 4:
                localctx = TeradataSQLDCLParser.PartitioningExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3573
                self.partitioning_expr()
                pass

            elif la_ == 5:
                localctx = TeradataSQLDCLParser.ColumnNameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3574
                self.column_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLDCLParser.IntervalExprParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3575
                self.interval_expr_parenthesized()
                pass

            elif la_ == 7:
                localctx = TeradataSQLDCLParser.VariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3576
                self.variable_reference()
                pass

            elif la_ == 8:
                localctx = TeradataSQLDCLParser.CursorVariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3577
                self.cursor_variable_reference()
                pass

            elif la_ == 9:
                localctx = TeradataSQLDCLParser.MacroParameterReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3578
                self.macro_parameter_reference()
                pass

            elif la_ == 10:
                localctx = TeradataSQLDCLParser.UDTConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3579
                self.match(TeradataSQLDCLParser.NEW)
                self.state = 3581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 3580
                    self.sysudtlib()


                self.state = 3583
                self.udt_name()
                self.state = 3584
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 3585
                    self.scalar_expr(0)
                    self.state = 3590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 3586
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3587
                        self.scalar_expr(0)
                        self.state = 3592
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3595
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                localctx = TeradataSQLDCLParser.JSONConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3597
                self.match(TeradataSQLDCLParser.NEW)
                self.state = 3598
                self.match(TeradataSQLDCLParser.JSON)
                self.state = 3599
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3600
                localctx.json_data = self.scalar_expr(0)
                self.state = 3603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3601
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3602
                    _la = self._input.LA(1)
                    if not(_la==556 or _la==735 or _la==1010 or _la==1015):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3605
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                localctx = TeradataSQLDCLParser.VariantTypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3607
                self.match(TeradataSQLDCLParser.NEW)
                self.state = 3608
                self.match(TeradataSQLDCLParser.VARIANT_TYPE)
                self.state = 3609
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3610
                self.scalar_expr(0)
                self.state = 3615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 3612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 3611
                        self.match(TeradataSQLDCLParser.AS)


                    self.state = 3614
                    self.alias_name()


                self.state = 3627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3617
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 3618
                    self.scalar_expr(0)
                    self.state = 3623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 3620
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==20:
                            self.state = 3619
                            self.match(TeradataSQLDCLParser.AS)


                        self.state = 3622
                        self.alias_name()


                    self.state = 3629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3630
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                localctx = TeradataSQLDCLParser.XMLConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3632
                self.match(TeradataSQLDCLParser.NEW)
                self.state = 3633
                self.match(TeradataSQLDCLParser.XML)
                self.state = 3634
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3635
                self.scalar_expr(0)
                self.state = 3636
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDCLParser.FunctionInvocationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3638
                self.function_invocation()
                pass

            elif la_ == 15:
                localctx = TeradataSQLDCLParser.ParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3639
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 3640
                self.scalar_expr(0)
                self.state = 3641
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDCLParser.ScalarSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3643
                self.subquery()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 4051
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,473,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 4049
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDCLParser.ExponentiationContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3646
                        if not self.precpred(self._ctx, 69):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 69)")
                        self.state = 3647
                        self.match(TeradataSQLDCLParser.EXPONENTIATION)
                        self.state = 3648
                        self.scalar_expr(69)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDCLParser.MultDivContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3649
                        if not self.precpred(self._ctx, 68):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 68)")
                        self.state = 3650
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1219 or _la==1220):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3651
                        self.scalar_expr(69)
                        pass

                    elif la_ == 3:
                        localctx = TeradataSQLDCLParser.ModuloContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3652
                        if not self.precpred(self._ctx, 67):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 67)")
                        self.state = 3653
                        self.match(TeradataSQLDCLParser.MOD)
                        self.state = 3654
                        self.scalar_expr(67)
                        pass

                    elif la_ == 4:
                        localctx = TeradataSQLDCLParser.AddSubContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3655
                        if not self.precpred(self._ctx, 66):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 66)")
                        self.state = 3656
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3657
                        self.scalar_expr(67)
                        pass

                    elif la_ == 5:
                        localctx = TeradataSQLDCLParser.ConcatenationContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3658
                        if not self.precpred(self._ctx, 65):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 65)")
                        self.state = 3659
                        _la = self._input.LA(1)
                        if not(_la==1217 or _la==1218):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3660
                        self.scalar_expr(66)
                        pass

                    elif la_ == 6:
                        localctx = TeradataSQLDCLParser.PeriodIntersectContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3661
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 3662
                        self.match(TeradataSQLDCLParser.P_INTERSECT)
                        self.state = 3663
                        self.scalar_expr(58)
                        pass

                    elif la_ == 7:
                        localctx = TeradataSQLDCLParser.PeriodDiffContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3664
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 3665
                        _la = self._input.LA(1)
                        if not(_la==736 or _la==876):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3666
                        self.scalar_expr(57)
                        pass

                    elif la_ == 8:
                        localctx = TeradataSQLDCLParser.DateTimeExprContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3667
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 3668
                        self.at_timezone()
                        pass

                    elif la_ == 9:
                        localctx = TeradataSQLDCLParser.IntervalExprContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3669
                        if not self.precpred(self._ctx, 60):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 60)")
                        self.state = 3670
                        self.match(TeradataSQLDCLParser.MINUS_SIGN)
                        self.state = 3671
                        self.scalar_expr(0)
                        self.state = 3672
                        self.interval_expr_start_end_phrase()
                        pass

                    elif la_ == 10:
                        localctx = TeradataSQLDCLParser.AttributeModificationContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3674
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 3676 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 3675
                                self.attribute_modification()

                            else:
                                raise NoViableAltException(self)
                            self.state = 3678 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,448,self._ctx)

                        pass

                    elif la_ == 11:
                        localctx = TeradataSQLDCLParser.JsonObjectMemberContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3680
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 3681
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3682
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 12:
                        localctx = TeradataSQLDCLParser.JsonAllObjectMembersContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3683
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 3684
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3685
                        self.match(TeradataSQLDCLParser.MUL_SIGN)
                        pass

                    elif la_ == 13:
                        localctx = TeradataSQLDCLParser.JsonAllElementsContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3686
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 3687
                        self.match(TeradataSQLDCLParser.OPEN_SQ_BRACKET)
                        self.state = 3688
                        self.match(TeradataSQLDCLParser.MUL_SIGN)
                        self.state = 3689
                        self.match(TeradataSQLDCLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 14:
                        localctx = TeradataSQLDCLParser.JsonSliceContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3690
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 3691
                        self.match(TeradataSQLDCLParser.OPEN_SQ_BRACKET)
                        self.state = 3692
                        localctx.from_index = self.integer_literal()
                        self.state = 3693
                        self.match(TeradataSQLDCLParser.COLON)
                        self.state = 3694
                        localctx.to_index = self.integer_literal()
                        self.state = 3697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 3695
                            self.match(TeradataSQLDCLParser.COLON)
                            self.state = 3696
                            localctx.step_size = self.integer_literal()


                        self.state = 3699
                        self.match(TeradataSQLDCLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = TeradataSQLDCLParser.JsonRecursiveDescendObjectMemberContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3701
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 3702
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3703
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3704
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 16:
                        localctx = TeradataSQLDCLParser.JsonRecursiveDescendAllObjectMembersContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3705
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 3706
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3707
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3708
                        self.match(TeradataSQLDCLParser.MUL_SIGN)
                        pass

                    elif la_ == 17:
                        localctx = TeradataSQLDCLParser.JsonRecursiveDescendArrayElementReferenceContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3709
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 3710
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3711
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3712
                        self.match(TeradataSQLDCLParser.OPEN_SQ_BRACKET)
                        self.state = 3713
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 3714
                        self.match(TeradataSQLDCLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 18:
                        localctx = TeradataSQLDCLParser.JsonRecursiveDescendAllArrayElementsContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3716
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 3717
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3718
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3719
                        self.match(TeradataSQLDCLParser.OPEN_SQ_BRACKET)
                        self.state = 3720
                        self.match(TeradataSQLDCLParser.MUL_SIGN)
                        self.state = 3721
                        self.match(TeradataSQLDCLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 19:
                        localctx = TeradataSQLDCLParser.JsonRecursiveDescendSliceContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3722
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 3723
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3724
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3725
                        self.match(TeradataSQLDCLParser.OPEN_SQ_BRACKET)
                        self.state = 3726
                        localctx.from_index = self.integer_literal()
                        self.state = 3727
                        self.match(TeradataSQLDCLParser.COLON)
                        self.state = 3728
                        localctx.to_index = self.integer_literal()
                        self.state = 3731
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 3729
                            self.match(TeradataSQLDCLParser.COLON)
                            self.state = 3730
                            localctx.step_size = self.integer_literal()


                        self.state = 3733
                        self.match(TeradataSQLDCLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 20:
                        localctx = TeradataSQLDCLParser.JsonAsBsonContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3735
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 3736
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3737
                        self.match(TeradataSQLDCLParser.ASBSON)
                        self.state = 3738
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3740
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                            self.state = 3739
                            localctx.validation_specification = self.char_string_literal()


                        self.state = 3742
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 21:
                        localctx = TeradataSQLDCLParser.JsonAsBsonTextContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3743
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 3744
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3745
                        self.match(TeradataSQLDCLParser.ASBSONTEXT)
                        self.state = 3746
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3747
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 22:
                        localctx = TeradataSQLDCLParser.JsonCombineContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3748
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 3749
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3750
                        self.match(TeradataSQLDCLParser.COMBINE)
                        self.state = 3751
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3752
                        self.scalar_expr(0)
                        self.state = 3755
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3753
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 3754
                            localctx.array_or_object = self.char_string_literal()


                        self.state = 3757
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 23:
                        localctx = TeradataSQLDCLParser.JsonExistValueContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3759
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 3760
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3761
                        self.match(TeradataSQLDCLParser.EXISTVALUE)
                        self.state = 3762
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3763
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3764
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 24:
                        localctx = TeradataSQLDCLParser.JsonExtractContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3766
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 3767
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3768
                        self.match(TeradataSQLDCLParser.JSONEXTRACT)
                        self.state = 3769
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3770
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3771
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 25:
                        localctx = TeradataSQLDCLParser.JsonExtractValueContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3773
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 3774
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3775
                        self.match(TeradataSQLDCLParser.JSONEXTRACTVALUE)
                        self.state = 3776
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3777
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3778
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 26:
                        localctx = TeradataSQLDCLParser.JsonExtractLargeValueContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3780
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 3781
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3782
                        self.match(TeradataSQLDCLParser.JSONEXTRACTLARGEVALUE)
                        self.state = 3783
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3784
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 3785
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 27:
                        localctx = TeradataSQLDCLParser.JsonKeycountContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3787
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 3788
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3789
                        self.match(TeradataSQLDCLParser.KEYCOUNT)
                        self.state = 3790
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3791
                        localctx.depth = self.integer_literal()
                        self.state = 3792
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 28:
                        localctx = TeradataSQLDCLParser.JsonMetadataContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3794
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 3795
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3796
                        self.match(TeradataSQLDCLParser.METADATA)
                        self.state = 3797
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3798
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 29:
                        localctx = TeradataSQLDCLParser.JsonMetadataContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3799
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 3800
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3801
                        self.match(TeradataSQLDCLParser.STORAGE_SIZE)
                        self.state = 3802
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3803
                        localctx.storage_format = self.char_string_literal()
                        self.state = 3804
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 30:
                        localctx = TeradataSQLDCLParser.XMLCreateSchemaBasedXMLContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3806
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 3807
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3808
                        self.match(TeradataSQLDCLParser.CREATESCHEMABASEDXML)
                        self.state = 3809
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3810
                        localctx.schema = self.scalar_expr(0)
                        self.state = 3811
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 31:
                        localctx = TeradataSQLDCLParser.XMLCreateNonSchemaBasedXMLContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3813
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 3814
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3815
                        self.match(TeradataSQLDCLParser.CREATENONSCHEMABASEDXML)
                        self.state = 3816
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3817
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 32:
                        localctx = TeradataSQLDCLParser.XMLExistNodeContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3818
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 3819
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3820
                        self.match(TeradataSQLDCLParser.EXISTSNODE)
                        self.state = 3821
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3825
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                        if la_ == 1:
                            self.state = 3822
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 3823
                            self.match(TeradataSQLDCLParser.COMMA)


                        self.state = 3827
                        localctx.query = self.scalar_expr(0)
                        self.state = 3828
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3829
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 3830
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 33:
                        localctx = TeradataSQLDCLParser.XMLIsContentContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3832
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 3833
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3834
                        self.match(TeradataSQLDCLParser.ISCONTENT)
                        self.state = 3835
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3836
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 34:
                        localctx = TeradataSQLDCLParser.XMLIsDocumentContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3837
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 3838
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3839
                        self.match(TeradataSQLDCLParser.ISDOCUMENT)
                        self.state = 3840
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3841
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 35:
                        localctx = TeradataSQLDCLParser.XMLIsSchemaValidContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3842
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 3843
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3844
                        self.match(TeradataSQLDCLParser.ISSCHEMAVALID)
                        self.state = 3845
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3846
                        localctx.schema = self.scalar_expr(0)
                        self.state = 3847
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3848
                        localctx.elem_decl = self.scalar_expr(0)
                        self.state = 3849
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3850
                        localctx.ns = self.scalar_expr(0)
                        self.state = 3851
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 36:
                        localctx = TeradataSQLDCLParser.XMLIsSchemaValidatedContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3853
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 3854
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3855
                        self.match(TeradataSQLDCLParser.ISSCHEMAVALIDATED)
                        self.state = 3856
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3857
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 37:
                        localctx = TeradataSQLDCLParser.XMLExtractContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3858
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 3859
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3860
                        self.match(TeradataSQLDCLParser.XMLEXTRACT)
                        self.state = 3861
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3865
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                        if la_ == 1:
                            self.state = 3862
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 3863
                            self.match(TeradataSQLDCLParser.COMMA)


                        self.state = 3867
                        localctx.query = self.scalar_expr(0)
                        self.state = 3868
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3869
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 3870
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 38:
                        localctx = TeradataSQLDCLParser.XMLTransformContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3872
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 3873
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3874
                        self.match(TeradataSQLDCLParser.XMLTRANSFORM)
                        self.state = 3875
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3876
                        localctx.xsl = self.scalar_expr(0)
                        self.state = 3877
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3878
                        localctx.parammap = self.scalar_expr(0)
                        self.state = 3879
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 39:
                        localctx = TeradataSQLDCLParser.ArrayElementReferenceContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3881
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 3882
                        self.match(TeradataSQLDCLParser.OPEN_SQ_BRACKET)
                        self.state = 3883
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 3888
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 3884
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 3885
                            localctx._integer_literal = self.integer_literal()
                            localctx.index_value.append(localctx._integer_literal)
                            self.state = 3890
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3891
                        self.match(TeradataSQLDCLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 40:
                        localctx = TeradataSQLDCLParser.ArrayCardinalityContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3893
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 3894
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3895
                        self.match(TeradataSQLDCLParser.CARDINALITY)
                        self.state = 3896
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3898
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3897
                            self.array_scope_reference()


                        self.state = 3900
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 41:
                        localctx = TeradataSQLDCLParser.ArrayCardinalityContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3901
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 3902
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3903
                        self.match(TeradataSQLDCLParser.ARRAY_CONCAT)
                        self.state = 3904
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3905
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3908
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3906
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 3907
                            self.array_scope_reference()


                        self.state = 3910
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 42:
                        localctx = TeradataSQLDCLParser.ArrayComparisonContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3912
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 3913
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3914
                        _la = self._input.LA(1)
                        if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3915
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3916
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3919
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3917
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 3918
                            self.array_scope_reference()


                        self.state = 3921
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 43:
                        localctx = TeradataSQLDCLParser.ArrayArithmeticContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3923
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 3924
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3925
                        _la = self._input.LA(1)
                        if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3926
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3927
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3930
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3928
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 3929
                            self.array_scope_reference()


                        self.state = 3932
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 44:
                        localctx = TeradataSQLDCLParser.ArrayAggregationContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3934
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 3935
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3936
                        _la = self._input.LA(1)
                        if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3937
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3939
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3938
                            self.array_scope_reference()


                        self.state = 3941
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 45:
                        localctx = TeradataSQLDCLParser.ArrayAggregationContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3942
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 3943
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3944
                        self.match(TeradataSQLDCLParser.ARRAY_COUNT_DISTINCT)
                        self.state = 3945
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3951
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3946
                            self.array_scope_reference()
                            self.state = 3949
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 3947
                                self.match(TeradataSQLDCLParser.COMMA)
                                self.state = 3948
                                localctx.matching_expr = self.scalar_expr(0)




                        self.state = 3953
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 46:
                        localctx = TeradataSQLDCLParser.ArrayGetContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3954
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 3955
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3956
                        self.match(TeradataSQLDCLParser.ARRAY_GET)
                        self.state = 3957
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3958
                        localctx.array_index = self.scalar_expr(0)
                        self.state = 3959
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 47:
                        localctx = TeradataSQLDCLParser.ArrayGetContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3961
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 3962
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3963
                        self.match(TeradataSQLDCLParser.ARRAY_COMPARE)
                        self.state = 3964
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3965
                        localctx.other_expr = self.scalar_expr(0)
                        self.state = 3972
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3966
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 3967
                            self.array_scope_reference()
                            self.state = 3970
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 3968
                                self.match(TeradataSQLDCLParser.COMMA)
                                self.state = 3969
                                localctx.nulls_equal_flag = self.integer_literal()




                        self.state = 3974
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 48:
                        localctx = TeradataSQLDCLParser.ArrayUpdateContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3976
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 3977
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3978
                        self.match(TeradataSQLDCLParser.ARRAY_UPDATE)
                        self.state = 3979
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3980
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 3986
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3981
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 3984
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
                            if la_ == 1:
                                self.state = 3982
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 3983
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 3988
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 49:
                        localctx = TeradataSQLDCLParser.ArrayUpdateStrideContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3990
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3991
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 3992
                        self.match(TeradataSQLDCLParser.ARRAY_UPDATE_STRIDE)
                        self.state = 3993
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 3994
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 3995
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 3996
                        localctx.stride = self.integer_literal()
                        self.state = 4002
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3997
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 4000
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
                            if la_ == 1:
                                self.state = 3998
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 3999
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 4004
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 50:
                        localctx = TeradataSQLDCLParser.ArrayOmethodWithArgContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4006
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 4007
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 4008
                        _la = self._input.LA(1)
                        if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4009
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 4010
                        self.scalar_expr(0)
                        self.state = 4011
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 51:
                        localctx = TeradataSQLDCLParser.ArrayOmethodWithoudArgsContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4013
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 4014
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 4015
                        _la = self._input.LA(1)
                        if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 179) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4016
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 4017
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 52:
                        localctx = TeradataSQLDCLParser.ArrayOextendContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4018
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 4019
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 4020
                        self.match(TeradataSQLDCLParser.OEXTEND)
                        self.state = 4021
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 4022
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 53:
                        localctx = TeradataSQLDCLParser.ArrayOtrimContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4023
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 4024
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 4025
                        self.match(TeradataSQLDCLParser.OTRIM)
                        self.state = 4026
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 4028
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 4027
                            localctx.num_remove = self.integer_literal()


                        self.state = 4030
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 54:
                        localctx = TeradataSQLDCLParser.UDTMethodInvocationContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4031
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 4032
                        self.match(TeradataSQLDCLParser.DOT_)
                        self.state = 4033
                        self.method_name()
                        self.state = 4034
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 4043
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                            self.state = 4035
                            self.scalar_expr(0)
                            self.state = 4040
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1208:
                                self.state = 4036
                                self.match(TeradataSQLDCLParser.COMMA)
                                self.state = 4037
                                self.scalar_expr(0)
                                self.state = 4042
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 4045
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)
                        pass

                    elif la_ == 55:
                        localctx = TeradataSQLDCLParser.DataTypeConversionContext(self, TeradataSQLDCLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 4047
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 4048
                        self.teradata_type_conversion()
                        pass

             
                self.state = 4053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,473,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def tuple_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Tuple_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Tuple_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = TeradataSQLDCLParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4054
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 4055
            self.tuple_attribute()
            self.state = 4058 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4056
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4057
                self.tuple_attribute()
                self.state = 4060 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 4062
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_tuple_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_attribute" ):
                listener.enterTuple_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_attribute" ):
                listener.exitTuple_attribute(self)




    def tuple_attribute(self):

        localctx = TeradataSQLDCLParser.Tuple_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_tuple_attribute)
        self._la = 0 # Token type
        try:
            self.state = 4079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4064
                self.scalar_expr(0)
                self.state = 4069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4066
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 4065
                        self.match(TeradataSQLDCLParser.AS)


                    self.state = 4068
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4071
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4072
                self.scalar_expr(0)
                self.state = 4074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4073
                    self.match(TeradataSQLDCLParser.AS)


                self.state = 4076
                self.alias_name()
                self.state = 4077
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valued_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Valued_case_exprContext,0)


        def searched_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Searched_case_exprContext,0)


        def coalesce_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Coalesce_exprContext,0)


        def nullif_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nullif_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = TeradataSQLDCLParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_case_expr)
        try:
            self.state = 4085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4081
                self.valued_case_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4082
                self.searched_case_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4083
                self.coalesce_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4084
                self.nullif_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valued_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDCLParser.CASE, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def END(self):
            return self.getToken(TeradataSQLDCLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDCLParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.THEN)
            else:
                return self.getToken(TeradataSQLDCLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDCLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_valued_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValued_case_expr" ):
                listener.enterValued_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValued_case_expr" ):
                listener.exitValued_case_expr(self)




    def valued_case_expr(self):

        localctx = TeradataSQLDCLParser.Valued_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_valued_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4087
            self.match(TeradataSQLDCLParser.CASE)
            self.state = 4088
            self.scalar_expr(0)
            self.state = 4094 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4089
                self.match(TeradataSQLDCLParser.WHEN)
                self.state = 4090
                self.scalar_expr(0)
                self.state = 4091
                self.match(TeradataSQLDCLParser.THEN)
                self.state = 4092
                self.scalar_expr(0)
                self.state = 4096 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 4100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 4098
                self.match(TeradataSQLDCLParser.ELSE)
                self.state = 4099
                self.scalar_expr(0)


            self.state = 4102
            self.match(TeradataSQLDCLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDCLParser.CASE, 0)

        def END(self):
            return self.getToken(TeradataSQLDCLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.WHEN)
            else:
                return self.getToken(TeradataSQLDCLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.THEN)
            else:
                return self.getToken(TeradataSQLDCLParser.THEN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def ELSE(self):
            return self.getToken(TeradataSQLDCLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_searched_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_expr" ):
                listener.enterSearched_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_expr" ):
                listener.exitSearched_case_expr(self)




    def searched_case_expr(self):

        localctx = TeradataSQLDCLParser.Searched_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_searched_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4104
            self.match(TeradataSQLDCLParser.CASE)
            self.state = 4110 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4105
                self.match(TeradataSQLDCLParser.WHEN)
                self.state = 4106
                self.logical_expr(0)
                self.state = 4107
                self.match(TeradataSQLDCLParser.THEN)
                self.state = 4108
                self.scalar_expr(0)
                self.state = 4112 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 4116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 4114
                self.match(TeradataSQLDCLParser.ELSE)
                self.state = 4115
                self.scalar_expr(0)


            self.state = 4118
            self.match(TeradataSQLDCLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coalesce_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(TeradataSQLDCLParser.COALESCE, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_expr_list_comma_separatedContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_coalesce_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesce_expr" ):
                listener.enterCoalesce_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesce_expr" ):
                listener.exitCoalesce_expr(self)




    def coalesce_expr(self):

        localctx = TeradataSQLDCLParser.Coalesce_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_coalesce_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4120
            self.match(TeradataSQLDCLParser.COALESCE)
            self.state = 4121
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nullif_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(TeradataSQLDCLParser.NULLIF, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_nullif_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullif_expr" ):
                listener.enterNullif_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullif_expr" ):
                listener.exitNullif_expr(self)




    def nullif_expr(self):

        localctx = TeradataSQLDCLParser.Nullif_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_nullif_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4123
            self.match(TeradataSQLDCLParser.NULLIF)
            self.state = 4124
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 4125
            self.scalar_expr(0)
            self.state = 4126
            self.match(TeradataSQLDCLParser.COMMA)
            self.state = 4127
            self.scalar_expr(0)
            self.state = 4128
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MINUS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_interval_expr_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_base" ):
                listener.enterInterval_expr_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_base" ):
                listener.exitInterval_expr_base(self)




    def interval_expr_base(self):

        localctx = TeradataSQLDCLParser.Interval_expr_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_interval_expr_base)
        try:
            self.state = 4140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4130
                self.scalar_expr(0)
                self.state = 4131
                self.match(TeradataSQLDCLParser.MINUS_SIGN)
                self.state = 4132
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4134
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4135
                self.scalar_expr(0)
                self.state = 4136
                self.match(TeradataSQLDCLParser.MINUS_SIGN)
                self.state = 4137
                self.scalar_expr(0)
                self.state = 4138
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def interval_expr_base(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_expr_baseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_expr_start_end_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_interval_expr_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_parenthesized" ):
                listener.enterInterval_expr_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_parenthesized" ):
                listener.exitInterval_expr_parenthesized(self)




    def interval_expr_parenthesized(self):

        localctx = TeradataSQLDCLParser.Interval_expr_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_interval_expr_parenthesized)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4142
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 4143
            self.interval_expr_base()
            self.state = 4144
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 4145
            self.interval_expr_start_end_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_start_end_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_seconds_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDCLParser.YEAR, 0)

        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.MONTH)
            else:
                return self.getToken(TeradataSQLDCLParser.MONTH, i)

        def DAY(self):
            return self.getToken(TeradataSQLDCLParser.DAY, 0)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.HOUR)
            else:
                return self.getToken(TeradataSQLDCLParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.MINUTE)
            else:
                return self.getToken(TeradataSQLDCLParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.SECOND)
            else:
                return self.getToken(TeradataSQLDCLParser.SECOND, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_interval_expr_start_end_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_start_end_phrase" ):
                listener.enterInterval_expr_start_end_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_start_end_phrase" ):
                listener.exitInterval_expr_start_end_phrase(self)




    def interval_expr_start_end_phrase(self):

        localctx = TeradataSQLDCLParser.Interval_expr_start_end_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_interval_expr_start_end_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4147
            _la = self._input.LA(1)
            if not(_la==106 or _la==185 or _la==248 or _la==258 or _la==368 or _la==478):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 4148
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4149
                localctx.precision = self.integer_literal()
                self.state = 4152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4150
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4151
                    localctx.fractional_seconds_precision = self.integer_literal()


                self.state = 4154
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 4166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.state = 4158
                self.match(TeradataSQLDCLParser.TO)
                self.state = 4159
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4164
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,487,self._ctx)
                if la_ == 1:
                    self.state = 4160
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 4161
                    localctx.fractional_seconds_precision = self.integer_literal()
                    self.state = 4162
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Aggregate_functionContext,0)


        def analytic_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Analytic_functionContext,0)


        def arithmetic_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Arithmetic_functionContext,0)


        def array_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Array_functionContext,0)


        def attribute_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_functionContext,0)


        def byte_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Byte_functionContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Builtin_functionContext,0)


        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Calendar_functionContext,0)


        def comparison_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Comparison_functionContext,0)


        def compression_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Compression_functionContext,0)


        def conversion_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Conversion_functionContext,0)


        def date_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Date_functionContext,0)


        def hash_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Hash_functionContext,0)


        def lob_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Lob_functionContext,0)


        def map_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Map_functionContext,0)


        def nvl_funtion(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Nvl_funtionContext,0)


        def period_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Period_functionContext,0)


        def regexp_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Regexp_functionContext,0)


        def string_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.String_functionContext,0)


        def json_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Json_functionContext,0)


        def xml_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_functionContext,0)


        def other_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Other_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_invocation" ):
                listener.enterFunction_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_invocation" ):
                listener.exitFunction_invocation(self)




    def function_invocation(self):

        localctx = TeradataSQLDCLParser.Function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_function_invocation)
        try:
            self.state = 4190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4168
                self.aggregate_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4169
                self.analytic_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4170
                self.arithmetic_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4171
                self.array_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4172
                self.attribute_function()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4173
                self.byte_function()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4174
                self.builtin_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4175
                self.calendar_function()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4176
                self.comparison_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4177
                self.compression_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4178
                self.conversion_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4179
                self.date_function()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4180
                self.hash_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4181
                self.lob_function()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4182
                self.map_function()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4183
                self.nvl_funtion()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4184
                self.period_function()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4185
                self.regexp_function()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 4186
                self.string_function()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 4187
                self.json_function()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 4188
                self.xml_function()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 4189
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_aggregate_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ListAggContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDCLParser.LISTAGG, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAgg" ):
                listener.enterListAgg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAgg" ):
                listener.exitListAgg(self)


    class AggOneArgContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def AVERAGE(self):
            return self.getToken(TeradataSQLDCLParser.AVERAGE, 0)
        def AVG(self):
            return self.getToken(TeradataSQLDCLParser.AVG, 0)
        def AVE(self):
            return self.getToken(TeradataSQLDCLParser.AVE, 0)
        def KURTOSIS(self):
            return self.getToken(TeradataSQLDCLParser.KURTOSIS, 0)
        def MAXIMUM(self):
            return self.getToken(TeradataSQLDCLParser.MAXIMUM, 0)
        def MAX(self):
            return self.getToken(TeradataSQLDCLParser.MAX, 0)
        def MIN(self):
            return self.getToken(TeradataSQLDCLParser.MIN, 0)
        def MINIMUM(self):
            return self.getToken(TeradataSQLDCLParser.MINIMUM, 0)
        def SKEW(self):
            return self.getToken(TeradataSQLDCLParser.SKEW, 0)
        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDCLParser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDCLParser.STDDEV_SAMP, 0)
        def SUM(self):
            return self.getToken(TeradataSQLDCLParser.SUM, 0)
        def VAR_POP(self):
            return self.getToken(TeradataSQLDCLParser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDCLParser.VAR_SAMP, 0)
        def DISTINCT(self):
            return self.getToken(TeradataSQLDCLParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggOneArg" ):
                listener.enterAggOneArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggOneArg" ):
                listener.exitAggOneArg(self)


    class AggTwoArgsContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def CORR(self):
            return self.getToken(TeradataSQLDCLParser.CORR, 0)
        def COVAR_POP(self):
            return self.getToken(TeradataSQLDCLParser.COVAR_POP, 0)
        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDCLParser.COVAR_SAMP, 0)
        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDCLParser.REGR_AVGX, 0)
        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDCLParser.REGR_AVGY, 0)
        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDCLParser.REGR_COUNT, 0)
        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDCLParser.REGR_INTERCEPT, 0)
        def REGR_R2(self):
            return self.getToken(TeradataSQLDCLParser.REGR_R2, 0)
        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SLOPE, 0)
        def REGR_SXX(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SXX, 0)
        def REGR_SXY(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SXY, 0)
        def REGR_SYY(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SYY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggTwoArgs" ):
                listener.enterAggTwoArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggTwoArgs" ):
                listener.exitAggTwoArgs(self)


    class GroupingContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(TeradataSQLDCLParser.GROUPING, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping" ):
                listener.enterGrouping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping" ):
                listener.exitGrouping(self)


    class AggCountContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDCLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(TeradataSQLDCLParser.COUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)

        def DISTINCT(self):
            return self.getToken(TeradataSQLDCLParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(TeradataSQLDCLParser.UNIQUE, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggCount" ):
                listener.enterAggCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggCount" ):
                listener.exitAggCount(self)



    def aggregate_function(self):

        localctx = TeradataSQLDCLParser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.state = 4227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 213, 238, 239, 244, 246, 380, 396, 397, 403, 461, 462]:
                localctx = TeradataSQLDCLParser.AggOneArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4192
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 10838081537) != 0) or ((((_la - 380)) & ~0x3f) == 0 and ((1 << (_la - 380)) & 8585217) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4193
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==121:
                    self.state = 4194
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==121):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4197
                self.scalar_expr(0)
                self.state = 4198
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [80, 84, 85, 327, 328, 329, 330, 331, 332, 333, 334, 335]:
                localctx = TeradataSQLDCLParser.AggTwoArgsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4200
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4201
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4202
                self.scalar_expr(0)
                self.state = 4203
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4204
                self.scalar_expr(0)
                self.state = 4205
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [83]:
                localctx = TeradataSQLDCLParser.AggCountContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4207
                self.match(TeradataSQLDCLParser.COUNT)
                self.state = 4208
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4214
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 4209
                    self.match(TeradataSQLDCLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 13, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 121, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 448, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 4211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==121 or _la==448:
                        self.state = 4210
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==121 or _la==448):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4213
                    self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4216
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [175]:
                localctx = TeradataSQLDCLParser.GroupingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4217
                self.match(TeradataSQLDCLParser.GROUPING)
                self.state = 4218
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4219
                self.scalar_expr(0)
                self.state = 4220
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1081]:
                localctx = TeradataSQLDCLParser.ListAggContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4222
                self.match(TeradataSQLDCLParser.LISTAGG)
                self.state = 4223
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4224
                self.scalar_expr(0)
                self.state = 4225
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value_expr = None # Scalar_exprContext
            self.offset_value = None # Scalar_exprContext
            self.default_value_expr = None # Scalar_exprContext
            self.width = None # Integer_literalContext
            self.quantile_literal = None # Integer_literalContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_specContext,0)


        def AVERAGE(self):
            return self.getToken(TeradataSQLDCLParser.AVERAGE, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDCLParser.AVG, 0)

        def AVE(self):
            return self.getToken(TeradataSQLDCLParser.AVE, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLDCLParser.MAXIMUM, 0)

        def MAX(self):
            return self.getToken(TeradataSQLDCLParser.MAX, 0)

        def MIN(self):
            return self.getToken(TeradataSQLDCLParser.MIN, 0)

        def MINIMUM(self):
            return self.getToken(TeradataSQLDCLParser.MINIMUM, 0)

        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDCLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDCLParser.STDDEV_SAMP, 0)

        def SUM(self):
            return self.getToken(TeradataSQLDCLParser.SUM, 0)

        def VAR_POP(self):
            return self.getToken(TeradataSQLDCLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDCLParser.VAR_SAMP, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def CORR(self):
            return self.getToken(TeradataSQLDCLParser.CORR, 0)

        def COVAR_POP(self):
            return self.getToken(TeradataSQLDCLParser.COVAR_POP, 0)

        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDCLParser.COVAR_SAMP, 0)

        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDCLParser.REGR_AVGX, 0)

        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDCLParser.REGR_AVGY, 0)

        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDCLParser.REGR_COUNT, 0)

        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDCLParser.REGR_INTERCEPT, 0)

        def REGR_R2(self):
            return self.getToken(TeradataSQLDCLParser.REGR_R2, 0)

        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SLOPE, 0)

        def REGR_SXX(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SXX, 0)

        def REGR_SXY(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SXY, 0)

        def REGR_SYY(self):
            return self.getToken(TeradataSQLDCLParser.REGR_SYY, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLDCLParser.COUNT, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def CSUM(self):
            return self.getToken(TeradataSQLDCLParser.CSUM, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_asc_desc_onlyContext,i)


        def window_spec_without_rows(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_spec_without_rowsContext,0)


        def CUME_DIST(self):
            return self.getToken(TeradataSQLDCLParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDCLParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(TeradataSQLDCLParser.PERCENT_RANK, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDCLParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDCLParser.LAST_VALUE, 0)

        def ignore_respect_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Ignore_respect_nullsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Ignore_respect_nullsContext,i)


        def LAG(self):
            return self.getToken(TeradataSQLDCLParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDCLParser.LEAD, 0)

        def MAVG(self):
            return self.getToken(TeradataSQLDCLParser.MAVG, 0)

        def MDIFF(self):
            return self.getToken(TeradataSQLDCLParser.MDIFF, 0)

        def MSUM(self):
            return self.getToken(TeradataSQLDCLParser.MSUM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def MEDIAN(self):
            return self.getToken(TeradataSQLDCLParser.MEDIAN, 0)

        def MLINREG(self):
            return self.getToken(TeradataSQLDCLParser.MLINREG, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDCLParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLDCLParser.GROUP, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_fullContext,i)


        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDCLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDCLParser.PERCENTILE_DISC, 0)

        def QUANTILE(self):
            return self.getToken(TeradataSQLDCLParser.QUANTILE, 0)

        def RANK(self):
            return self.getToken(TeradataSQLDCLParser.RANK, 0)

        def window_spec_with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_spec_with_tiesContext,0)


        def ROW_NUMBER(self):
            return self.getToken(TeradataSQLDCLParser.ROW_NUMBER, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDCLParser.LISTAGG, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_analytic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_function" ):
                listener.enterAnalytic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_function" ):
                listener.exitAnalytic_function(self)




    def analytic_function(self):

        localctx = TeradataSQLDCLParser.Analytic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_analytic_function)
        self._la = 0 # Token type
        try:
            self.state = 4378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4229
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 323) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & 131) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4230
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4231
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4232
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4233
                self.window_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4235
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4236
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4237
                self.scalar_expr(0)
                self.state = 4238
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4239
                self.scalar_expr(0)
                self.state = 4240
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4241
                self.window_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4243
                self.match(TeradataSQLDCLParser.COUNT)
                self.state = 4244
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 4245
                    self.match(TeradataSQLDCLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 4246
                    localctx.value_expr = self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4249
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4250
                self.window_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4251
                self.match(TeradataSQLDCLParser.CSUM)
                self.state = 4252
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4253
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4256 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4254
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4255
                    self.order_by_spec_asc_desc_only()
                    self.state = 4258 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4260
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4262
                _la = self._input.LA(1)
                if not(_la==301 or _la==603 or _la==630):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4263
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4264
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4265
                self.window_spec_without_rows()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4266
                _la = self._input.LA(1)
                if not(_la==673 or _la==734):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4267
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4268
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 4269
                    self.ignore_respect_nulls()


                self.state = 4272
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4273
                self.window_spec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4275
                _la = self._input.LA(1)
                if not(_la==730 or _la==737):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4276
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4277
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 4278
                    self.ignore_respect_nulls()


                self.state = 4287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4281
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4282
                    localctx.offset_value = self.scalar_expr(0)
                    self.state = 4285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4283
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 4284
                        localctx.default_value_expr = self.scalar_expr(0)




                self.state = 4289
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 4290
                    self.ignore_respect_nulls()


                self.state = 4293
                self.window_spec_without_rows()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4295
                _la = self._input.LA(1)
                if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 8388625) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4296
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4297
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4298
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4299
                localctx.width = self.integer_literal()
                self.state = 4302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4300
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4301
                    self.order_by_spec_asc_desc_only()
                    self.state = 4304 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4306
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4308
                self.match(TeradataSQLDCLParser.MEDIAN)
                self.state = 4309
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4310
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4311
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4313
                self.match(TeradataSQLDCLParser.MLINREG)
                self.state = 4314
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4315
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4316
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4317
                localctx.width = self.integer_literal()
                self.state = 4318
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4319
                self.order_by_spec_asc_desc_only()
                self.state = 4320
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4322
                _la = self._input.LA(1)
                if not(_la==851 or _la==852):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4323
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4324
                localctx.value_expr = self.scalar_expr(0)
                self.state = 4325
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4326
                self.match(TeradataSQLDCLParser.WITHIN)
                self.state = 4327
                self.match(TeradataSQLDCLParser.GROUP)
                self.state = 4328
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4329
                self.match(TeradataSQLDCLParser.ORDER)
                self.state = 4330
                self.match(TeradataSQLDCLParser.BY)
                self.state = 4331
                self.order_by_spec_full()
                self.state = 4336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4332
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4333
                    self.order_by_spec_full()
                    self.state = 4338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4339
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4341
                self.match(TeradataSQLDCLParser.QUANTILE)
                self.state = 4342
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4343
                localctx.quantile_literal = self.integer_literal()
                self.state = 4346 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4344
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4345
                    self.order_by_spec_asc_desc_only()
                    self.state = 4348 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4350
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4352
                self.match(TeradataSQLDCLParser.RANK)
                self.state = 4353
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4354
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4355
                self.window_spec_with_ties()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4356
                self.match(TeradataSQLDCLParser.RANK)
                self.state = 4357
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4358
                self.order_by_spec_asc_desc_only()
                self.state = 4363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4359
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4360
                    self.order_by_spec_asc_desc_only()
                    self.state = 4365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4366
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4368
                self.match(TeradataSQLDCLParser.ROW_NUMBER)
                self.state = 4369
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4370
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4371
                self.window_spec_without_rows()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4372
                self.match(TeradataSQLDCLParser.LISTAGG)
                self.state = 4373
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4374
                self.scalar_expr(0)
                self.state = 4375
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 4376
                self.window_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def ABS(self):
            return self.getToken(TeradataSQLDCLParser.ABS, 0)

        def DEGREES(self):
            return self.getToken(TeradataSQLDCLParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(TeradataSQLDCLParser.RADIANS, 0)

        def EXP(self):
            return self.getToken(TeradataSQLDCLParser.EXP, 0)

        def SQRT(self):
            return self.getToken(TeradataSQLDCLParser.SQRT, 0)

        def COSH(self):
            return self.getToken(TeradataSQLDCLParser.COSH, 0)

        def SINH(self):
            return self.getToken(TeradataSQLDCLParser.SINH, 0)

        def TANH(self):
            return self.getToken(TeradataSQLDCLParser.TANH, 0)

        def ACOSH(self):
            return self.getToken(TeradataSQLDCLParser.ACOSH, 0)

        def ASINH(self):
            return self.getToken(TeradataSQLDCLParser.ASINH, 0)

        def ATANH(self):
            return self.getToken(TeradataSQLDCLParser.ATANH, 0)

        def LN(self):
            return self.getToken(TeradataSQLDCLParser.LN, 0)

        def LOG(self):
            return self.getToken(TeradataSQLDCLParser.LOG, 0)

        def NULLIFZERO(self):
            return self.getToken(TeradataSQLDCLParser.NULLIFZERO, 0)

        def ZEROIFNULL(self):
            return self.getToken(TeradataSQLDCLParser.ZEROIFNULL, 0)

        def COS(self):
            return self.getToken(TeradataSQLDCLParser.COS, 0)

        def SIN(self):
            return self.getToken(TeradataSQLDCLParser.SIN, 0)

        def TAN(self):
            return self.getToken(TeradataSQLDCLParser.TAN, 0)

        def ACOS(self):
            return self.getToken(TeradataSQLDCLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(TeradataSQLDCLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(TeradataSQLDCLParser.ATAN, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDCLParser.CEILING, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDCLParser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDCLParser.FLOOR, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDCLParser.SIGN, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def MOD(self):
            return self.getToken(TeradataSQLDCLParser.MOD, 0)

        def RANDOM(self):
            return self.getToken(TeradataSQLDCLParser.RANDOM, 0)

        def ATAN2(self):
            return self.getToken(TeradataSQLDCLParser.ATAN2, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDCLParser.POWER, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SyslibContext,0)


        def ROUND(self):
            return self.getToken(TeradataSQLDCLParser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDCLParser.TRUNC, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDCLParser.WIDTH, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDCLParser.BUCKET, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_arithmetic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_function" ):
                listener.enterArithmetic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_function" ):
                listener.exitArithmetic_function(self)




    def arithmetic_function(self):

        localctx = TeradataSQLDCLParser.Arithmetic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_arithmetic_function)
        self._la = 0 # Token type
        try:
            self.state = 4434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4380
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 180355272) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4294967299) != 0) or _la==147 or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & 18014398509482049) != 0) or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & 3458764513820540929) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 393217) != 0) or _la==479):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4381
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4382
                self.scalar_expr(0)
                self.state = 4383
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4385
                    self.td_sysfnlib()


                self.state = 4388
                _la = self._input.LA(1)
                if not(_la==565 or _la==566 or _la==674 or _la==926):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4389
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4390
                self.scalar_expr(0)
                self.state = 4391
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4393
                _la = self._input.LA(1)
                if not(_la==26 or _la==251 or _la==319):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4394
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4395
                self.scalar_expr(0)
                self.state = 4396
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4397
                self.scalar_expr(0)
                self.state = 4398
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 4400
                    self.syslib()


                self.state = 4403
                self.match(TeradataSQLDCLParser.POWER)
                self.state = 4404
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4405
                self.scalar_expr(0)
                self.state = 4406
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4407
                self.scalar_expr(0)
                self.state = 4408
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4410
                    self.td_sysfnlib()


                self.state = 4413
                _la = self._input.LA(1)
                if not(_la==894 or _la==1006):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4414
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4415
                self.scalar_expr(0)
                self.state = 4418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4416
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4417
                    self.scalar_expr(0)


                self.state = 4420
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4422
                self.match(TeradataSQLDCLParser.WIDTH)
                self.state = 4423
                self.match(TeradataSQLDCLParser.BUCKET)
                self.state = 4424
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4425
                self.scalar_expr(0)
                self.state = 4426
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4427
                self.scalar_expr(0)
                self.state = 4428
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4429
                self.scalar_expr(0)
                self.state = 4430
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4431
                self.scalar_expr(0)
                self.state = 4432
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element_value_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext
            self.array_expr_1 = None # Scalar_exprContext
            self.array_expr_2 = None # Scalar_exprContext
            self.matching_expr = None # Scalar_exprContext
            self.array_index = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.index_value_or_bound = None # Scalar_exprContext
            self.num_spaces = None # Scalar_exprContext
            self.num_elements = None # Scalar_exprContext

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_AGG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDCLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDCLParser.DESC, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDCLParser.CARDINALITY, 0)

        def array_scope_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Array_scope_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Array_scope_referenceContext,i)


        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_CONCAT, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GT, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_LT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_LE, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_EQ, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_NE, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_ADD, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_SUB, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MUL, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_DIV, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MOD, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_SUM, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_AVG, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_MIN, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_GET, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_COMPARE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_UPDATE_STRIDE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDCLParser.OEXISTS, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDCLParser.OPRIOR, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDCLParser.ONEXT, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.OCOUNT, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDCLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDCLParser.OLAST, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDCLParser.ODELETE, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDCLParser.OEXTEND, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDCLParser.OTRIM, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_array_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_function" ):
                listener.enterArray_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_function" ):
                listener.exitArray_function(self)




    def array_function(self):

        localctx = TeradataSQLDCLParser.Array_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_array_function)
        self._la = 0 # Token type
        try:
            self.state = 4649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4436
                    self.td_sysfnlib()


                self.state = 4439
                self.match(TeradataSQLDCLParser.ARRAY_AGG)
                self.state = 4440
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4441
                localctx.element_value_expr = self.scalar_expr(0)
                self.state = 4448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 4442
                    self.match(TeradataSQLDCLParser.ORDER)
                    self.state = 4443
                    self.match(TeradataSQLDCLParser.BY)
                    self.state = 4444
                    self.scalar_expr(0)
                    self.state = 4446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21 or _la==116:
                        self.state = 4445
                        _la = self._input.LA(1)
                        if not(_la==21 or _la==116):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 4450
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4451
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4452
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4454
                self.match(TeradataSQLDCLParser.CARDINALITY)
                self.state = 4455
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4456
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4457
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4458
                    self.array_scope_reference()
                    self.state = 4463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4464
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4466
                self.match(TeradataSQLDCLParser.ARRAY_CONCAT)
                self.state = 4467
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4468
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4469
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4470
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4471
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4472
                    self.array_scope_reference()
                    self.state = 4477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4478
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4480
                _la = self._input.LA(1)
                if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4481
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4482
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4483
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4484
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4485
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4486
                    self.array_scope_reference()
                    self.state = 4491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4492
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4494
                _la = self._input.LA(1)
                if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4495
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4496
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4497
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4498
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4499
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4500
                    self.array_scope_reference()
                    self.state = 4505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4506
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4508
                _la = self._input.LA(1)
                if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4509
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4510
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4511
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4512
                    self.array_scope_reference()
                    self.state = 4517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4518
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4520
                self.match(TeradataSQLDCLParser.ARRAY_COUNT_DISTINCT)
                self.state = 4521
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4522
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 4527
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,519,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4523
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 4524
                            self.array_scope_reference() 
                        self.state = 4529
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,519,self._ctx)

                    self.state = 4530
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4531
                    localctx.matching_expr = self.scalar_expr(0)

                elif la_ == 2:
                    self.state = 4534 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4532
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 4533
                        self.array_scope_reference()
                        self.state = 4536 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break



                self.state = 4540
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4542
                self.match(TeradataSQLDCLParser.ARRAY_GET)
                self.state = 4543
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4544
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4545
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4546
                localctx.array_index = self.scalar_expr(0)
                self.state = 4547
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4549
                self.match(TeradataSQLDCLParser.ARRAY_COMPARE)
                self.state = 4550
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4551
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 4552
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4553
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 4563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4556 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 4554
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 4555
                            self.array_scope_reference()

                        else:
                            raise NoViableAltException(self)
                        self.state = 4558 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,522,self._ctx)

                    self.state = 4560
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4561
                    localctx.nulls_equal_flag = self.integer_literal()


                self.state = 4565
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4567
                self.match(TeradataSQLDCLParser.ARRAY_UPDATE)
                self.state = 4568
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4569
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4570
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4571
                localctx.new_value = self.scalar_expr(0)
                self.state = 4580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,525,self._ctx)
                if la_ == 1:
                    self.state = 4574 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4572
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 4573
                        self.array_scope_reference()
                        self.state = 4576 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 4578
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4579
                    localctx.array_index = self.scalar_expr(0)


                self.state = 4582
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4584
                self.match(TeradataSQLDCLParser.ARRAY_UPDATE_STRIDE)
                self.state = 4585
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4586
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4587
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4588
                localctx.new_value = self.scalar_expr(0)
                self.state = 4589
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4590
                localctx.stride = self.integer_literal()
                self.state = 4599
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
                if la_ == 1:
                    self.state = 4593 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4591
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 4592
                        self.array_scope_reference()
                        self.state = 4595 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 4597
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4598
                    localctx.array_index = self.scalar_expr(0)


                self.state = 4601
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4603
                    self.td_sysfnlib()


                self.state = 4606
                _la = self._input.LA(1)
                if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4607
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4608
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4609
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4610
                localctx.index_value_or_bound = self.scalar_expr(0)
                self.state = 4611
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4613
                    self.td_sysfnlib()


                self.state = 4616
                _la = self._input.LA(1)
                if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 51) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4617
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4618
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4619
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4621
                    self.td_sysfnlib()


                self.state = 4624
                self.match(TeradataSQLDCLParser.OEXTEND)
                self.state = 4625
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4626
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4627
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4628
                    localctx.num_spaces = self.scalar_expr(0)
                    self.state = 4631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4629
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 4630
                        localctx.index_value_or_bound = self.scalar_expr(0)




                self.state = 4635
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4637
                    self.td_sysfnlib()


                self.state = 4640
                self.match(TeradataSQLDCLParser.OTRIM)
                self.state = 4641
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4642
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4643
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4644
                    localctx.num_elements = self.scalar_expr(0)


                self.state = 4647
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.character_set_name = None # LiteralContext

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.BIT_LENGTH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LiteralContext,0)


        def BYTE(self):
            return self.getToken(TeradataSQLDCLParser.BYTE, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLDCLParser.BYTES, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTER_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDCLParser.CHAR, 0)

        def CHARS(self):
            return self.getToken(TeradataSQLDCLParser.CHARS, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTER, 0)

        def CHARACTERS(self):
            return self.getToken(TeradataSQLDCLParser.CHARACTERS, 0)

        def MCHARACTERS(self):
            return self.getToken(TeradataSQLDCLParser.MCHARACTERS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDCLParser.DEFAULT, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def FORMAT(self):
            return self.getToken(TeradataSQLDCLParser.FORMAT, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDCLParser.TITLE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDCLParser.TYPE, 0)

        def OCTET_LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.OCTET_LENGTH, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_attribute_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_function" ):
                listener.enterAttribute_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_function" ):
                listener.exitAttribute_function(self)




    def attribute_function(self):

        localctx = TeradataSQLDCLParser.Attribute_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_attribute_function)
        self._la = 0 # Token type
        try:
            self.state = 4691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [546]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4651
                self.match(TeradataSQLDCLParser.BIT_LENGTH)
                self.state = 4652
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4653
                self.scalar_expr(0)
                self.state = 4656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4654
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4655
                    localctx.character_set_name = self.literal()


                self.state = 4658
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [43, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4660
                _la = self._input.LA(1)
                if not(_la==43 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4661
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4662
                self.scalar_expr(0)
                self.state = 4663
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [52, 53, 55, 56, 57, 58, 240]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4665
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 553942754166571008) != 0) or _la==240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4666
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4667
                self.scalar_expr(0)
                self.state = 4668
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4670
                self.match(TeradataSQLDCLParser.DEFAULT)
                self.state = 4675
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,537,self._ctx)
                if la_ == 1:
                    self.state = 4671
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 4672
                    self.column_name()
                    self.state = 4673
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)


                pass
            elif token in [161, 425, 437]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4677
                _la = self._input.LA(1)
                if not(_la==161 or _la==425 or _la==437):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4678
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4679
                self.scalar_expr(0)
                self.state = 4680
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4682
                self.match(TeradataSQLDCLParser.OCTET_LENGTH)
                self.state = 4683
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4684
                self.scalar_expr(0)
                self.state = 4687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4685
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4686
                    localctx.character_set_name = self.literal()


                self.state = 4689
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Byte_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITNOT(self):
            return self.getToken(TeradataSQLDCLParser.BITNOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def BITAND(self):
            return self.getToken(TeradataSQLDCLParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDCLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDCLParser.BITXOR, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDCLParser.GETBIT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDCLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDCLParser.ROTATERIGHT, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDCLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDCLParser.SHIFTRIGHT, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDCLParser.COUNTSET, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDCLParser.SETBIT, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDCLParser.SUBBITSTR, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDCLParser.TO_BYTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_byte_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByte_function" ):
                listener.enterByte_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByte_function" ):
                listener.exitByte_function(self)




    def byte_function(self):

        localctx = TeradataSQLDCLParser.Byte_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_byte_function)
        self._la = 0 # Token type
        try:
            self.state = 4757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4693
                    self.td_sysfnlib()


                self.state = 4696
                self.match(TeradataSQLDCLParser.BITNOT)
                self.state = 4697
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4698
                self.scalar_expr(0)
                self.state = 4699
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4701
                    self.td_sysfnlib()


                self.state = 4704
                _la = self._input.LA(1)
                if not(((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 13) != 0) or _la==682 or ((((_la - 892)) & ~0x3f) == 0 and ((1 << (_la - 892)) & 12884901891) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4705
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4706
                self.scalar_expr(0)
                self.state = 4707
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4708
                self.scalar_expr(0)
                self.state = 4709
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4711
                    self.td_sysfnlib()


                self.state = 4714
                self.match(TeradataSQLDCLParser.COUNTSET)
                self.state = 4715
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4716
                self.scalar_expr(0)
                self.state = 4719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4717
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4718
                    self.scalar_expr(0)


                self.state = 4721
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4723
                    self.td_sysfnlib()


                self.state = 4726
                self.match(TeradataSQLDCLParser.SETBIT)
                self.state = 4727
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4728
                self.scalar_expr(0)
                self.state = 4729
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4730
                self.scalar_expr(0)
                self.state = 4733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4731
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4732
                    self.scalar_expr(0)


                self.state = 4735
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4737
                    self.td_sysfnlib()


                self.state = 4740
                self.match(TeradataSQLDCLParser.SUBBITSTR)
                self.state = 4741
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4742
                self.scalar_expr(0)
                self.state = 4743
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4744
                self.scalar_expr(0)
                self.state = 4745
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4746
                self.scalar_expr(0)
                self.state = 4747
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4749
                    self.td_sysfnlib()


                self.state = 4752
                self.match(TeradataSQLDCLParser.TO_BYTE)
                self.state = 4753
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4754
                self.scalar_expr(0)
                self.state = 4755
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDCLParser.ACCOUNT, 0)

        def CURRENT_DATE(self):
            return self.getToken(TeradataSQLDCLParser.CURRENT_DATE, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDCLParser.CURDATE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.At_timezoneContext,0)


        def CURRENT_ROLE(self):
            return self.getToken(TeradataSQLDCLParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(TeradataSQLDCLParser.CURRENT_TIME, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDCLParser.CURTIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Type_precisionContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(TeradataSQLDCLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDCLParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDCLParser.DATE, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDCLParser.NOW, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDCLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDCLParser.ROLE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLDCLParser.SESSION, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDCLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.TEMPORAL_TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDCLParser.TIME, 0)

        def USER(self):
            return self.getToken(TeradataSQLDCLParser.USER, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_function" ):
                listener.enterBuiltin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_function" ):
                listener.exitBuiltin_function(self)




    def builtin_function(self):

        localctx = TeradataSQLDCLParser.Builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_builtin_function)
        try:
            self.state = 4815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4759
                self.match(TeradataSQLDCLParser.ACCOUNT)
                pass
            elif token in [94, 604]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4768
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [94]:
                    self.state = 4760
                    self.match(TeradataSQLDCLParser.CURRENT_DATE)
                    self.state = 4763
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
                    if la_ == 1:
                        self.state = 4761
                        self.match(TeradataSQLDCLParser.OPEN_PAR)
                        self.state = 4762
                        self.match(TeradataSQLDCLParser.CLOSE_PAR)


                    pass
                elif token in [604]:
                    self.state = 4765
                    self.match(TeradataSQLDCLParser.CURDATE)
                    self.state = 4766
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 4767
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
                if la_ == 1:
                    self.state = 4770
                    self.at_timezone()


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4773
                self.match(TeradataSQLDCLParser.CURRENT_ROLE)
                pass
            elif token in [96, 605]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4781
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 4774
                    self.match(TeradataSQLDCLParser.CURRENT_TIME)
                    self.state = 4776
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
                    if la_ == 1:
                        self.state = 4775
                        self.type_precision()


                    pass
                elif token in [605]:
                    self.state = 4778
                    self.match(TeradataSQLDCLParser.CURTIME)
                    self.state = 4779
                    self.match(TeradataSQLDCLParser.OPEN_PAR)
                    self.state = 4780
                    self.match(TeradataSQLDCLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
                if la_ == 1:
                    self.state = 4783
                    self.at_timezone()


                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4786
                self.match(TeradataSQLDCLParser.CURRENT_TIMESTAMP)
                self.state = 4788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,555,self._ctx)
                if la_ == 1:
                    self.state = 4787
                    self.type_precision()


                self.state = 4791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
                if la_ == 1:
                    self.state = 4790
                    self.at_timezone()


                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4793
                self.match(TeradataSQLDCLParser.CURRENT_USER)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4794
                self.match(TeradataSQLDCLParser.DATABASE)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4795
                self.match(TeradataSQLDCLParser.DATE)
                self.state = 4797
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                if la_ == 1:
                    self.state = 4796
                    self.at_timezone()


                pass
            elif token in [803]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4799
                self.match(TeradataSQLDCLParser.NOW)
                self.state = 4800
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4801
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4802
                self.match(TeradataSQLDCLParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4803
                self.match(TeradataSQLDCLParser.ROLE)
                pass
            elif token in [371]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4804
                self.match(TeradataSQLDCLParser.SESSION)
                pass
            elif token in [980]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4805
                self.match(TeradataSQLDCLParser.TEMPORAL_DATE)
                pass
            elif token in [981]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4806
                self.match(TeradataSQLDCLParser.TEMPORAL_TIMESTAMP)
                self.state = 4808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,558,self._ctx)
                if la_ == 1:
                    self.state = 4807
                    self.type_precision()


                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4810
                self.match(TeradataSQLDCLParser.TIME)
                self.state = 4812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
                if la_ == 1:
                    self.state = 4811
                    self.at_timezone()


                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4814
                self.match(TeradataSQLDCLParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calendar_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.calendar_for_session = None # Token
            self.calendar_name = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_DAY_OF_YEAR, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDCLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.TD_YEAR_OF_CALENDAR, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SyslibContext,0)


        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDCLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.MONTHNUMBER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.QUARTERNUMBER_OF_YEAR, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDCLParser.WEEKNUMBER_OF_YEAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDCLParser.YEARNUMBER_OF_CALENDAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDCLParser.NULL, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_calendar_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalendar_function" ):
                listener.enterCalendar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalendar_function" ):
                listener.exitCalendar_function(self)




    def calendar_function(self):

        localctx = TeradataSQLDCLParser.Calendar_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_calendar_function)
        self._la = 0 # Token type
        try:
            self.state = 4840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [957, 958, 959, 960, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 1088]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 4817
                    self.syslib()


                self.state = 4820
                _la = self._input.LA(1)
                if not(((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & 1031695) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4821
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4822
                self.scalar_expr(0)
                self.state = 4823
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [612, 613, 614, 615, 616, 783, 784, 785, 867, 868, 1033, 1034, 1035, 1036, 1064, 1091]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4825
                    self.td_sysfnlib()


                self.state = 4828
                _la = self._input.LA(1)
                if not(((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & 31) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0) or _la==867 or _la==868 or ((((_la - 1033)) & ~0x3f) == 0 and ((1 << (_la - 1033)) & 2147483663) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4829
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4830
                self.scalar_expr(0)
                self.state = 4832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4831
                    self.match(TeradataSQLDCLParser.COMMA)


                self.state = 4836
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [274]:
                    self.state = 4834
                    localctx.calendar_for_session = self.match(TeradataSQLDCLParser.NULL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 4835
                    localctx.calendar_name = self.char_string_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 4838
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.search_result = None # Scalar_exprContext
            self.default_result = None # Scalar_exprContext

        def DECODE(self):
            return self.getToken(TeradataSQLDCLParser.DECODE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def GREATEST(self):
            return self.getToken(TeradataSQLDCLParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDCLParser.LEAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_comparison_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_function" ):
                listener.enterComparison_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_function" ):
                listener.exitComparison_function(self)




    def comparison_function(self):

        localctx = TeradataSQLDCLParser.Comparison_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_comparison_function)
        self._la = 0 # Token type
        try:
            self.state = 4870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,569,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4842
                    self.td_sysfnlib()


                self.state = 4845
                self.match(TeradataSQLDCLParser.DECODE)
                self.state = 4846
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4847
                localctx.expr = self.scalar_expr(0)
                self.state = 4848
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4849
                localctx.search_result = self.scalar_expr(0)

                self.state = 4850
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4851
                localctx.search_result = self.scalar_expr(0)
                self.state = 4853
                localctx.default_result = self.scalar_expr(0)
                self.state = 4854
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4856
                    self.td_sysfnlib()


                self.state = 4859
                _la = self._input.LA(1)
                if not(_la==689 or _la==738):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4860
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4861
                self.scalar_expr(0)
                self.state = 4864 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4862
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4863
                    self.scalar_expr(0)
                    self.state = 4866 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 4868
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compression_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDCLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDCLParser.CAMSET_L, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDCLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDCLParser.DECAMSET_L, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.JSON_DECOMPRESS, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDCLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDCLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDCLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDCLParser.LZDECOMP_L, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TD_LZ_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDCLParser.TS_DECOMPRESS, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDCLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDCLParser.TRANSUTF8TOUNICODE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_compression_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression_function" ):
                listener.enterCompression_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression_function" ):
                listener.exitCompression_function(self)




    def compression_function(self):

        localctx = TeradataSQLDCLParser.Compression_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_compression_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 4872
                self.td_sysfnlib()


            self.state = 4875
            _la = self._input.LA(1)
            if not(((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & 1729382256910270467) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & 15) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & 1649267441667) != 0) or ((((_la - 1141)) & ~0x3f) == 0 and ((1 << (_la - 1141)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4876
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 4877
            self.scalar_expr(0)
            self.state = 4878
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.in_encoding = None # Char_string_literalContext
            self.out_encoding = None # Char_string_literalContext
            self.string_expr = None # Scalar_exprContext
            self.format_arg = None # Char_string_literalContext
            self.nls_param = None # Char_string_literalContext
            self.numeric_value = None # Scalar_exprContext
            self.interval_unit = None # Scalar_exprContext

        def CAST(self):
            return self.getToken(TeradataSQLDCLParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Data_type_attributeContext,i)


        def TRYCAST(self):
            return self.getToken(TeradataSQLDCLParser.TRYCAST, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDCLParser.TO_BYTES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDCLParser.FROM_BYTES, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDCLParser.TO_NUMBER, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDCLParser.NULL, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDCLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDCLParser.TO_DATE, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDCLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDCLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.TO_YMINTERVAL, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.TO_DSINTERVAL, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.NUMTOYMINTERVAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_conversion_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_function" ):
                listener.enterConversion_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_function" ):
                listener.exitConversion_function(self)




    def conversion_function(self):

        localctx = TeradataSQLDCLParser.Conversion_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_conversion_function)
        self._la = 0 # Token type
        try:
            self.state = 5011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4880
                self.match(TeradataSQLDCLParser.CAST)
                self.state = 4881
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4882
                localctx.expr = self.scalar_expr(0)
                self.state = 4883
                self.match(TeradataSQLDCLParser.AS)
                self.state = 4896
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
                if la_ == 1:
                    self.state = 4884
                    self.data_type()
                    self.state = 4888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                        self.state = 4885
                        self.data_type_attribute()
                        self.state = 4890
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 4892 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4891
                        self.data_type_attribute()
                        self.state = 4894 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211):
                            break

                    pass


                self.state = 4898
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4900
                self.match(TeradataSQLDCLParser.TRYCAST)
                self.state = 4901
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4902
                localctx.in_string = self.scalar_expr(0)
                self.state = 4903
                self.match(TeradataSQLDCLParser.AS)
                self.state = 4904
                self.data_type()
                self.state = 4905
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4907
                    self.td_sysfnlib()


                self.state = 4910
                self.match(TeradataSQLDCLParser.TO_BYTES)
                self.state = 4911
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4912
                localctx.in_string = self.scalar_expr(0)
                self.state = 4913
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4914
                localctx.in_encoding = self.char_string_literal()
                self.state = 4915
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4917
                    self.td_sysfnlib()


                self.state = 4920
                self.match(TeradataSQLDCLParser.FROM_BYTES)
                self.state = 4921
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4922
                localctx.in_string = self.scalar_expr(0)
                self.state = 4923
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4924
                localctx.out_encoding = self.char_string_literal()
                self.state = 4925
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4927
                    self.td_sysfnlib()


                self.state = 4930
                self.match(TeradataSQLDCLParser.TO_NUMBER)
                self.state = 4931
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4932
                localctx.string_expr = self.scalar_expr(0)
                self.state = 4942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4933
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4934
                    localctx.format_arg = self.char_string_literal()
                    self.state = 4940
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4935
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 4938
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 4936
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 4937
                            self.match(TeradataSQLDCLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 4944
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4946
                    self.td_sysfnlib()


                self.state = 4949
                self.match(TeradataSQLDCLParser.TO_CHAR)
                self.state = 4950
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4951
                localctx.expr = self.scalar_expr(0)
                self.state = 4961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4952
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4953
                    localctx.format_arg = self.char_string_literal()
                    self.state = 4959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4954
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 4957
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 4955
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 4956
                            self.match(TeradataSQLDCLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 4963
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4965
                    self.td_sysfnlib()


                self.state = 4968
                self.match(TeradataSQLDCLParser.TO_DATE)
                self.state = 4969
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4970
                localctx.in_string = self.scalar_expr(0)
                self.state = 4971
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 4974
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 4972
                    localctx.format_arg = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 4973
                    self.match(TeradataSQLDCLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4976
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4978
                    self.td_sysfnlib()


                self.state = 4981
                _la = self._input.LA(1)
                if not(_la==997 or _la==998):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4982
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4983
                localctx.expr = self.scalar_expr(0)
                self.state = 4989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4984
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 4987
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1069, 1070, 1071, 1072, 1203]:
                        self.state = 4985
                        localctx.format_arg = self.char_string_literal()
                        pass
                    elif token in [274]:
                        self.state = 4986
                        self.match(TeradataSQLDCLParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4991
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4993
                    self.td_sysfnlib()


                self.state = 4996
                _la = self._input.LA(1)
                if not(_la==995 or _la==999):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4997
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 4998
                self.scalar_expr(0)
                self.state = 4999
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5001
                    self.td_sysfnlib()


                self.state = 5004
                _la = self._input.LA(1)
                if not(_la==808 or _la==809):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5005
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5006
                localctx.numeric_value = self.scalar_expr(0)
                self.state = 5007
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5008
                localctx.interval_unit = self.scalar_expr(0)
                self.state = 5009
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.day_value = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLDCLParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDCLParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDCLParser.WEEK, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDCLParser.DAYOFMONTH, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDCLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDCLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDCLParser.SECOND, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDCLParser.LAST_DAY, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDCLParser.NEXT_DAY, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDCLParser.MONTHS_BETWEEN, 0)

        def ADD_MONTHS(self):
            return self.getToken(TeradataSQLDCLParser.ADD_MONTHS, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDCLParser.OADD_MONTHS, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLDCLParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDCLParser.DAY, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(TeradataSQLDCLParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(TeradataSQLDCLParser.TIMEZONE_MINUTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_date_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_function" ):
                listener.enterDate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_function" ):
                listener.exitDate_function(self)




    def date_function(self):

        localctx = TeradataSQLDCLParser.Date_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_date_function)
        self._la = 0 # Token type
        try:
            self.state = 5063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5013
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368 or _la==478 or _la==1076 or _la==1099):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5014
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5015
                self.scalar_expr(0)
                self.state = 5016
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5018
                    self.td_sysfnlib()


                self.state = 5021
                self.match(TeradataSQLDCLParser.LAST_DAY)
                self.state = 5022
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5023
                self.scalar_expr(0)
                self.state = 5024
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5026
                    self.td_sysfnlib()


                self.state = 5029
                self.match(TeradataSQLDCLParser.NEXT_DAY)
                self.state = 5030
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5031
                self.scalar_expr(0)
                self.state = 5032
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5033
                localctx.day_value = self.char_string_literal()
                self.state = 5034
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5036
                    self.td_sysfnlib()


                self.state = 5039
                self.match(TeradataSQLDCLParser.MONTHS_BETWEEN)
                self.state = 5040
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5041
                self.scalar_expr(0)
                self.state = 5042
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5043
                self.scalar_expr(0)
                self.state = 5044
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5046
                    self.td_sysfnlib()


                self.state = 5049
                _la = self._input.LA(1)
                if not(_la==9 or _la==814):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5050
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5051
                self.scalar_expr(0)
                self.state = 5052
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5053
                self.scalar_expr(0)
                self.state = 5054
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5056
                self.match(TeradataSQLDCLParser.EXTRACT)
                self.state = 5057
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5058
                _la = self._input.LA(1)
                if not(_la==106 or _la==185 or _la==248 or _la==258 or ((((_la - 368)) & ~0x3f) == 0 and ((1 << (_la - 368)) & 108086391056891905) != 0) or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5059
                self.match(TeradataSQLDCLParser.FROM)
                self.state = 5060
                self.scalar_expr(0)
                self.state = 5061
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def HASHAMP(self):
            return self.getToken(TeradataSQLDCLParser.HASHAMP, 0)

        def HASHBAKAMP(self):
            return self.getToken(TeradataSQLDCLParser.HASHBAKAMP, 0)

        def hash_bucket_number_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Hash_bucket_number_exprContext,0)


        def HASHBUCKET(self):
            return self.getToken(TeradataSQLDCLParser.HASHBUCKET, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def HASHROW(self):
            return self.getToken(TeradataSQLDCLParser.HASHROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_hash_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_function" ):
                listener.enterHash_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_function" ):
                listener.exitHash_function(self)




    def hash_function(self):

        localctx = TeradataSQLDCLParser.Hash_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_hash_function)
        self._la = 0 # Token type
        try:
            self.state = 5093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5065
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5066
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5067
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5068
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5069
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5070
                self.hash_bucket_number_expr()
                self.state = 5071
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5073
                self.match(TeradataSQLDCLParser.HASHBUCKET)
                self.state = 5074
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5075
                self.scalar_expr(0)
                self.state = 5076
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5078
                self.match(TeradataSQLDCLParser.HASHROW)
                self.state = 5079
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5080
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5081
                self.match(TeradataSQLDCLParser.HASHROW)
                self.state = 5082
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5083
                self.scalar_expr(0)
                self.state = 5088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5084
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5085
                    self.scalar_expr(0)
                    self.state = 5090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5091
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDCLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDCLParser.EMPTY_CLOB, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_lob_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_function" ):
                listener.enterLob_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_function" ):
                listener.exitLob_function(self)




    def lob_function(self):

        localctx = TeradataSQLDCLParser.Lob_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_lob_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 5095
                self.td_sysfnlib()


            self.state = 5098
            _la = self._input.LA(1)
            if not(_la==650 or _la==651):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5099
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 5100
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name_string = None # Char_string_literalContext
            self.database_name_string = None # Char_string_literalContext
            self.object_name_string = None # Char_string_literalContext
            self.object_kind_string = None # Char_string_literalContext
            self.map_slot_string = None # Char_string_literalContext
            self.number_of_primary_amps_string = None # Char_string_literalContext
            self.colocation_name_string = None # Char_string_literalContext

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDCLParser.CONTIGUOUSMAPAMPS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SyslibContext,0)


        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDCLParser.SPARSEMAPAMPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDCLParser.SPARSETABLEAMPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_map_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_function" ):
                listener.enterMap_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_function" ):
                listener.exitMap_function(self)




    def map_function(self):

        localctx = TeradataSQLDCLParser.Map_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_map_function)
        self._la = 0 # Token type
        try:
            self.state = 5138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 5102
                    self.syslib()


                self.state = 5105
                self.match(TeradataSQLDCLParser.CONTIGUOUSMAPAMPS)
                self.state = 5106
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5107
                localctx.map_name_string = self.char_string_literal()
                self.state = 5108
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 5110
                    self.syslib()


                self.state = 5113
                self.match(TeradataSQLDCLParser.SPARSEMAPAMPS)
                self.state = 5114
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5115
                localctx.database_name_string = self.char_string_literal()
                self.state = 5116
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5117
                localctx.object_name_string = self.char_string_literal()
                self.state = 5118
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5119
                localctx.object_kind_string = self.char_string_literal()
                self.state = 5120
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5121
                localctx.map_slot_string = self.char_string_literal()
                self.state = 5122
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5123
                localctx.number_of_primary_amps_string = self.char_string_literal()
                self.state = 5124
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5125
                localctx.colocation_name_string = self.char_string_literal()
                self.state = 5126
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 5128
                    self.syslib()


                self.state = 5131
                self.match(TeradataSQLDCLParser.SPARSETABLEAMPS)
                self.state = 5132
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5133
                localctx.database_name_string = self.char_string_literal()
                self.state = 5134
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5135
                localctx.object_name_string = self.char_string_literal()
                self.state = 5136
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nvl_funtionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NVL(self):
            return self.getToken(TeradataSQLDCLParser.NVL, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def NVL2(self):
            return self.getToken(TeradataSQLDCLParser.NVL2, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_nvl_funtion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvl_funtion" ):
                listener.enterNvl_funtion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvl_funtion" ):
                listener.exitNvl_funtion(self)




    def nvl_funtion(self):

        localctx = TeradataSQLDCLParser.Nvl_funtionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_nvl_funtion)
        self._la = 0 # Token type
        try:
            self.state = 5162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5140
                    self.td_sysfnlib()


                self.state = 5143
                self.match(TeradataSQLDCLParser.NVL)
                self.state = 5144
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5145
                self.scalar_expr(0)
                self.state = 5146
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5147
                self.scalar_expr(0)
                self.state = 5148
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5150
                    self.td_sysfnlib()


                self.state = 5153
                self.match(TeradataSQLDCLParser.NVL2)
                self.state = 5154
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5155
                self.scalar_expr(0)
                self.state = 5156
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5157
                self.scalar_expr(0)
                self.state = 5158
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5159
                self.scalar_expr(0)
                self.state = 5160
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLDCLParser.BEGIN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def END(self):
            return self.getToken(TeradataSQLDCLParser.END, 0)

        def IS(self):
            return self.getToken(TeradataSQLDCLParser.IS, 0)

        def UNTIL_CHANGED(self):
            return self.getToken(TeradataSQLDCLParser.UNTIL_CHANGED, 0)

        def UNTIL_CLOSED(self):
            return self.getToken(TeradataSQLDCLParser.UNTIL_CLOSED, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDCLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Interval_period_specContext,0)


        def LAST(self):
            return self.getToken(TeradataSQLDCLParser.LAST, 0)

        def NEXT(self):
            return self.getToken(TeradataSQLDCLParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDCLParser.PRIOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_period_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_function" ):
                listener.enterPeriod_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_function" ):
                listener.exitPeriod_function(self)




    def period_function(self):

        localctx = TeradataSQLDCLParser.Period_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_period_function)
        self._la = 0 # Token type
        try:
            self.state = 5205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5164
                self.match(TeradataSQLDCLParser.BEGIN)
                self.state = 5165
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5166
                self.scalar_expr(0)
                self.state = 5167
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5169
                self.match(TeradataSQLDCLParser.END)
                self.state = 5170
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5171
                self.scalar_expr(0)
                self.state = 5172
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5174
                self.match(TeradataSQLDCLParser.END)
                self.state = 5175
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5176
                self.scalar_expr(0)
                self.state = 5177
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5178
                self.match(TeradataSQLDCLParser.IS)
                self.state = 5180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 5179
                    self.match(TeradataSQLDCLParser.NOT)


                self.state = 5182
                _la = self._input.LA(1)
                if not(_la==450 or _la==451):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5184
                self.match(TeradataSQLDCLParser.INTERVAL)
                self.state = 5185
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5186
                self.scalar_expr(0)
                self.state = 5187
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5188
                self.interval_period_spec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5190
                self.match(TeradataSQLDCLParser.LAST)
                self.state = 5191
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5192
                self.scalar_expr(0)
                self.state = 5193
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5195
                self.match(TeradataSQLDCLParser.NEXT)
                self.state = 5196
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5197
                self.scalar_expr(0)
                self.state = 5198
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5200
                self.match(TeradataSQLDCLParser.PRIOR)
                self.state = 5201
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5202
                self.scalar_expr(0)
                self.state = 5203
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regexp_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_string = None # Scalar_exprContext
            self.regexp_string = None # Scalar_exprContext
            self.position_arg = None # Scalar_exprContext
            self.occurrence_arg = None # Scalar_exprContext
            self.match_arg = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.return_opt = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_SUBSTR, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_REPLACE, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_INSTR, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDCLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_regexp_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexp_function" ):
                listener.enterRegexp_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexp_function" ):
                listener.exitRegexp_function(self)




    def regexp_function(self):

        localctx = TeradataSQLDCLParser.Regexp_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_regexp_function)
        self._la = 0 # Token type
        try:
            self.state = 5296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,618,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5207
                    self.td_sysfnlib()


                self.state = 5210
                self.match(TeradataSQLDCLParser.REGEXP_SUBSTR)
                self.state = 5211
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5212
                localctx.source_string = self.scalar_expr(0)
                self.state = 5213
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5214
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5215
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5216
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 5217
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5218
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 5219
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5220
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5224
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5226
                    self.td_sysfnlib()


                self.state = 5229
                self.match(TeradataSQLDCLParser.REGEXP_REPLACE)
                self.state = 5230
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5231
                localctx.source_string = self.scalar_expr(0)
                self.state = 5232
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5233
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5234
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5235
                    localctx.replace_string = self.scalar_expr(0)
                    self.state = 5236
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5237
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 5238
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5239
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 5240
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5241
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5245
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5247
                    self.td_sysfnlib()


                self.state = 5250
                self.match(TeradataSQLDCLParser.REGEXP_INSTR)
                self.state = 5251
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5252
                localctx.source_string = self.scalar_expr(0)
                self.state = 5253
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5254
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5255
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5256
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 5257
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5258
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 5259
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5260
                    localctx.return_opt = self.scalar_expr(0)
                    self.state = 5261
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5262
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5266
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5268
                    self.td_sysfnlib()


                self.state = 5271
                self.match(TeradataSQLDCLParser.REGEXP_SIMILAR)
                self.state = 5272
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5273
                localctx.source_string = self.scalar_expr(0)
                self.state = 5274
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5275
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5276
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5277
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 5280
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5282
                    self.td_sysfnlib()


                self.state = 5285
                self.match(TeradataSQLDCLParser.REGEXP_SPLIT_TO_TABLE)
                self.state = 5286
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5287
                localctx.in_k = self.scalar_expr(0)
                self.state = 5288
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5289
                localctx.source_string = self.scalar_expr(0)
                self.state = 5290
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5291
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 5292
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5293
                localctx.match_arg = self.scalar_expr(0)
                self.state = 5294
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.delim_string_value = None # Char_string_literalContext
            self.quote_string_value = None # Char_string_literalContext
            self.data_string_value = None # Scalar_exprContext
            self.ci = None # Integer_literalContext
            self.cd = None # Integer_literalContext
            self.cs = None # Integer_literalContext
            self.ct = None # Integer_literalContext
            self.source_string = None # Scalar_exprContext
            self.search_string = None # Scalar_exprContext
            self.position = None # Scalar_exprContext
            self.occurrence = None # Scalar_exprContext
            self.length = None # Scalar_exprContext
            self.fill_string = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.name_to_search = None # Scalar_exprContext
            self.name_delimiters = None # Scalar_exprContext
            self.value_delimiters = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.from_string = None # Scalar_exprContext
            self.to_string = None # Scalar_exprContext
            self.delimiter = None # Scalar_exprContext
            self.token_num = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext
            self.delimiters = None # Scalar_exprContext
            self.out_k = None # Column_specContext
            self.out_token_num = None # Column_specContext
            self.out_token = None # Column_specContext
            self.string_expr = None # Scalar_exprContext
            self.trim_expr = None # Scalar_exprContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.OPEN_PAR, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, i)

        def ASCII(self):
            return self.getToken(TeradataSQLDCLParser.ASCII, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDCLParser.CHR, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDCLParser.INITCAP, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDCLParser.LENGTH, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDCLParser.REVERSE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def CHAR2HEXINT(self):
            return self.getToken(TeradataSQLDCLParser.CHAR2HEXINT, 0)

        def SOUNDEX(self):
            return self.getToken(TeradataSQLDCLParser.SOUNDEX, 0)

        def STRING_CS(self):
            return self.getToken(TeradataSQLDCLParser.STRING_CS, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDCLParser.VARGRAPHIC, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDCLParser.CONCAT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def CSV(self):
            return self.getToken(TeradataSQLDCLParser.CSV, 0)

        def NEW(self):
            return self.getToken(TeradataSQLDCLParser.NEW, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDCLParser.VARIANT, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDCLParser.TYPE, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def CSVLD(self):
            return self.getToken(TeradataSQLDCLParser.CSVLD, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDCLParser.EDITDISTANCE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def INDEX(self):
            return self.getToken(TeradataSQLDCLParser.INDEX, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDCLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLDCLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDCLParser.RIGHT, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDCLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(TeradataSQLDCLParser.LOWER, 0)

        def UPPER(self):
            return self.getToken(TeradataSQLDCLParser.UPPER, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDCLParser.UCASE, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDCLParser.LPAD, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDCLParser.RPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDCLParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDCLParser.RTRIM, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDCLParser.NGRAM, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDCLParser.NVP, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDCLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDCLParser.OTRANSLATE, 0)

        def POSITION(self):
            return self.getToken(TeradataSQLDCLParser.POSITION, 0)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDCLParser.STRTOK, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDCLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDCLParser.RETURNS, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Column_specContext,i)


        def SUBSTRING(self):
            return self.getToken(TeradataSQLDCLParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDCLParser.FROM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDCLParser.FOR, 0)

        def SUBSTR(self):
            return self.getToken(TeradataSQLDCLParser.SUBSTR, 0)

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def translation_mapping(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Translation_mappingContext,0)


        def TRANSLATE(self):
            return self.getToken(TeradataSQLDCLParser.TRANSLATE, 0)

        def TRANSLATE_CHK(self):
            return self.getToken(TeradataSQLDCLParser.TRANSLATE_CHK, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLDCLParser.ERROR, 0)

        def TRIM(self):
            return self.getToken(TeradataSQLDCLParser.TRIM, 0)

        def BOTH(self):
            return self.getToken(TeradataSQLDCLParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(TeradataSQLDCLParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(TeradataSQLDCLParser.LEADING, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = TeradataSQLDCLParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 5611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,653,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5298
                    self.td_sysfnlib()


                self.state = 5301
                _la = self._input.LA(1)
                if not(_la==535 or _la==572 or _la==708 or _la==739 or _la==1084):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5302
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5303
                self.scalar_expr(0)
                self.state = 5304
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5306
                _la = self._input.LA(1)
                if not(_la==54 or _la==383 or _la==399 or _la==465):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5307
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5308
                self.scalar_expr(0)
                self.state = 5309
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5311
                self.match(TeradataSQLDCLParser.CONCAT)
                self.state = 5312
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5313
                self.scalar_expr(0)
                self.state = 5314
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5315
                self.scalar_expr(0)
                self.state = 5320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5316
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5317
                    self.scalar_expr(0)
                    self.state = 5322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5323
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5325
                    self.td_sysfnlib()


                self.state = 5328
                self.match(TeradataSQLDCLParser.CSV)
                self.state = 5329
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5330
                self.match(TeradataSQLDCLParser.NEW)
                self.state = 5331
                self.match(TeradataSQLDCLParser.VARIANT)
                self.state = 5332
                self.match(TeradataSQLDCLParser.TYPE)
                self.state = 5333
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5334
                self.scalar_expr(0)
                self.state = 5339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5335
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5336
                    self.scalar_expr(0)
                    self.state = 5341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5342
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5343
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5344
                localctx.delim_string_value = self.char_string_literal()
                self.state = 5345
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5346
                localctx.quote_string_value = self.char_string_literal()
                self.state = 5347
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5349
                    self.td_sysfnlib()


                self.state = 5352
                self.match(TeradataSQLDCLParser.CSVLD)
                self.state = 5353
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5354
                localctx.data_string_value = self.scalar_expr(0)
                self.state = 5355
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5356
                localctx.delim_string_value = self.char_string_literal()
                self.state = 5357
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5358
                localctx.quote_string_value = self.char_string_literal()
                self.state = 5359
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5361
                    self.td_sysfnlib()


                self.state = 5364
                self.match(TeradataSQLDCLParser.EDITDISTANCE)
                self.state = 5365
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5366
                self.scalar_expr(0)
                self.state = 5367
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5368
                self.scalar_expr(0)
                self.state = 5378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5369
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5370
                    localctx.ci = self.integer_literal()
                    self.state = 5371
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5372
                    localctx.cd = self.integer_literal()
                    self.state = 5373
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5374
                    localctx.cs = self.integer_literal()
                    self.state = 5375
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5376
                    localctx.ct = self.integer_literal()


                self.state = 5380
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5382
                self.match(TeradataSQLDCLParser.INDEX)
                self.state = 5383
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5384
                self.scalar_expr(0)
                self.state = 5385
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5386
                self.scalar_expr(0)
                self.state = 5387
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5389
                    self.td_sysfnlib()


                self.state = 5392
                self.match(TeradataSQLDCLParser.INSTR)
                self.state = 5393
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5394
                localctx.source_string = self.scalar_expr(0)
                self.state = 5395
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5396
                localctx.search_string = self.scalar_expr(0)
                self.state = 5403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5397
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5398
                    localctx.position = self.scalar_expr(0)
                    self.state = 5401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5399
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 5400
                        localctx.occurrence = self.scalar_expr(0)




                self.state = 5405
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5407
                    self.td_sysfnlib()


                self.state = 5410
                _la = self._input.LA(1)
                if not(_la==219 or _la==355):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5411
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5412
                localctx.source_string = self.scalar_expr(0)
                self.state = 5413
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5414
                localctx.length = self.scalar_expr(0)
                self.state = 5415
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5417
                self.match(TeradataSQLDCLParser.LOCATE)
                self.state = 5418
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5419
                self.scalar_expr(0)
                self.state = 5420
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5421
                self.scalar_expr(0)
                self.state = 5424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5422
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5423
                    self.scalar_expr(0)


                self.state = 5426
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5428
                _la = self._input.LA(1)
                if not(_la==233 or _la==454 or _la==1011):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5429
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5430
                self.scalar_expr(0)
                self.state = 5431
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5433
                    self.td_sysfnlib()


                self.state = 5436
                _la = self._input.LA(1)
                if not(_la==746 or _la==898):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5437
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5438
                localctx.source_string = self.scalar_expr(0)
                self.state = 5439
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5440
                localctx.length = self.scalar_expr(0)
                self.state = 5443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5441
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5442
                    localctx.fill_string = self.scalar_expr(0)


                self.state = 5445
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5447
                    self.td_sysfnlib()


                self.state = 5450
                _la = self._input.LA(1)
                if not(_la==747 or _la==899):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5451
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5452
                self.scalar_expr(0)
                self.state = 5455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5453
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5454
                    self.scalar_expr(0)


                self.state = 5457
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5459
                    self.td_sysfnlib()


                self.state = 5462
                self.match(TeradataSQLDCLParser.NGRAM)
                self.state = 5463
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5464
                self.scalar_expr(0)
                self.state = 5465
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5466
                self.scalar_expr(0)
                self.state = 5467
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5468
                localctx.length = self.scalar_expr(0)
                self.state = 5471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5469
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5470
                    localctx.position = self.scalar_expr(0)


                self.state = 5473
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5475
                    self.td_sysfnlib()


                self.state = 5478
                self.match(TeradataSQLDCLParser.NVP)
                self.state = 5479
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5480
                localctx.in_string = self.scalar_expr(0)
                self.state = 5481
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5482
                localctx.name_to_search = self.scalar_expr(0)
                self.state = 5493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5483
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5484
                    localctx.name_delimiters = self.scalar_expr(0)
                    self.state = 5491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5485
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 5486
                        localctx.value_delimiters = self.scalar_expr(0)
                        self.state = 5489
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 5487
                            self.match(TeradataSQLDCLParser.COMMA)
                            self.state = 5488
                            localctx.occurrence = self.scalar_expr(0)






                self.state = 5495
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5497
                    self.td_sysfnlib()


                self.state = 5500
                self.match(TeradataSQLDCLParser.OREPLACE)
                self.state = 5501
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5502
                localctx.source_string = self.scalar_expr(0)
                self.state = 5503
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5504
                localctx.search_string = self.scalar_expr(0)
                self.state = 5507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5505
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5506
                    localctx.replace_string = self.scalar_expr(0)


                self.state = 5509
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5511
                    self.td_sysfnlib()


                self.state = 5514
                self.match(TeradataSQLDCLParser.OTRANSLATE)
                self.state = 5515
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5516
                localctx.source_string = self.scalar_expr(0)
                self.state = 5517
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5518
                localctx.from_string = self.scalar_expr(0)
                self.state = 5519
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5520
                localctx.to_string = self.scalar_expr(0)
                self.state = 5521
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5523
                self.match(TeradataSQLDCLParser.POSITION)
                self.state = 5524
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5525
                self.scalar_expr(0)
                self.state = 5526
                self.match(TeradataSQLDCLParser.IN)
                self.state = 5527
                self.scalar_expr(0)
                self.state = 5528
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5530
                    self.td_sysfnlib()


                self.state = 5533
                self.match(TeradataSQLDCLParser.STRTOK)
                self.state = 5534
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5535
                localctx.in_string = self.scalar_expr(0)
                self.state = 5542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5536
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5537
                    localctx.delimiter = self.scalar_expr(0)
                    self.state = 5540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5538
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 5539
                        localctx.token_num = self.scalar_expr(0)




                self.state = 5544
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5546
                    self.td_sysfnlib()


                self.state = 5549
                self.match(TeradataSQLDCLParser.STRTOK_SPLIT_TO_TABLE)
                self.state = 5550
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5551
                localctx.in_k = self.scalar_expr(0)
                self.state = 5552
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5553
                localctx.in_string = self.scalar_expr(0)
                self.state = 5554
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5555
                localctx.delimiters = self.scalar_expr(0)
                self.state = 5556
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5557
                self.match(TeradataSQLDCLParser.RETURNS)
                self.state = 5558
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5559
                localctx.out_k = self.column_spec()
                self.state = 5560
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5561
                localctx.out_token_num = self.column_spec()
                self.state = 5562
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5563
                localctx.out_token = self.column_spec()
                self.state = 5564
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 5566
                self.match(TeradataSQLDCLParser.SUBSTRING)
                self.state = 5567
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5568
                self.scalar_expr(0)
                self.state = 5569
                self.match(TeradataSQLDCLParser.FROM)
                self.state = 5570
                self.scalar_expr(0)
                self.state = 5573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 5571
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5572
                    self.scalar_expr(0)


                self.state = 5575
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 5577
                _la = self._input.LA(1)
                if not(_la==401 or _la==402):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5578
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5579
                self.scalar_expr(0)
                self.state = 5580
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5581
                self.scalar_expr(0)
                self.state = 5584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 5582
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5583
                    self.scalar_expr(0)


                self.state = 5586
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 5588
                _la = self._input.LA(1)
                if not(_la==433 or _la==434):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5589
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5590
                localctx.string_expr = self.scalar_expr(0)
                self.state = 5591
                self.match(TeradataSQLDCLParser.USING)
                self.state = 5592
                self.translation_mapping()
                self.state = 5595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 5593
                    self.match(TeradataSQLDCLParser.WITH)
                    self.state = 5594
                    self.match(TeradataSQLDCLParser.ERROR)


                self.state = 5597
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 5599
                self.match(TeradataSQLDCLParser.TRIM)
                self.state = 5600
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39 or _la==217 or _la==429:
                    self.state = 5601
                    _la = self._input.LA(1)
                    if not(_la==39 or _la==217 or _la==429):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 5602
                        localctx.trim_expr = self.scalar_expr(0)


                    self.state = 5605
                    self.match(TeradataSQLDCLParser.FROM)


                self.state = 5608
                localctx.string_expr = self.scalar_expr(0)
                self.state = 5609
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_expr = None # Scalar_exprContext
            self.bson_data = None # Scalar_exprContext
            self.check_type = None # Char_string_literalContext
            self.geom_expr = None # Scalar_exprContext
            self.precision = None # Integer_literalContext
            self.geojson_expr = None # Scalar_exprContext
            self.asrid = None # Integer_literalContext
            self.json_string = None # Scalar_exprContext
            self.json_object = None # Scalar_exprContext
            self.json_path = None # Scalar_exprContext
            self.nvp_string = None # Scalar_exprContext
            self.name_delimiters = None # Char_string_literalContext
            self.value_delimiters = None # Char_string_literalContext
            self.ignore_characters = None # Char_string_literalContext

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDCLParser.ARRAY_TO_JSON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Returns_clauseContext,0)


        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDCLParser.BSON_CHECK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDCLParser.DATASIZE, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDCLParser.GEOJSONFROMGEOM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDCLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDCLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDCLParser.JSONGETVALUE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDCLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDCLParser.NVP2JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDCLParser.JSON_AGG, 0)

        def json_param_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Json_param_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Json_param_specContext,i)


        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDCLParser.JSON_COMPOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_json_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_function" ):
                listener.enterJson_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_function" ):
                listener.exitJson_function(self)




    def json_function(self):

        localctx = TeradataSQLDCLParser.Json_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_json_function)
        self._la = 0 # Token type
        try:
            self.state = 5735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,671,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5613
                    self.td_sysfnlib()


                self.state = 5616
                self.match(TeradataSQLDCLParser.ARRAY_TO_JSON)
                self.state = 5617
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5618
                localctx.array_expr = self.scalar_expr(0)
                self.state = 5619
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,655,self._ctx)
                if la_ == 1:
                    self.state = 5620
                    self.returns_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5623
                    self.td_sysfnlib()


                self.state = 5626
                self.match(TeradataSQLDCLParser.BSON_CHECK)
                self.state = 5627
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5628
                localctx.bson_data = self.scalar_expr(0)
                self.state = 5631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5629
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5630
                    localctx.check_type = self.char_string_literal()


                self.state = 5633
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5635
                    self.td_sysfnlib()


                self.state = 5638
                self.match(TeradataSQLDCLParser.DATASIZE)
                self.state = 5639
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5640
                self.scalar_expr(0)
                self.state = 5641
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5643
                    self.td_sysfnlib()


                self.state = 5646
                self.match(TeradataSQLDCLParser.GEOJSONFROMGEOM)
                self.state = 5647
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5648
                localctx.geom_expr = self.scalar_expr(0)
                self.state = 5651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5649
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5650
                    localctx.precision = self.integer_literal()


                self.state = 5653
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5655
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                if la_ == 1:
                    self.state = 5654
                    self.returns_clause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5657
                    self.td_sysfnlib()


                self.state = 5660
                self.match(TeradataSQLDCLParser.GEOMFROMGEOJSON)
                self.state = 5661
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5662
                localctx.geojson_expr = self.scalar_expr(0)
                self.state = 5663
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5664
                localctx.asrid = self.integer_literal()
                self.state = 5665
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5667
                    self.td_sysfnlib()


                self.state = 5670
                self.match(TeradataSQLDCLParser.JSON_CHECK)
                self.state = 5671
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5672
                localctx.json_string = self.scalar_expr(0)
                self.state = 5673
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5675
                self.match(TeradataSQLDCLParser.JSONGETVALUE)
                self.state = 5676
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5677
                localctx.json_object = self.scalar_expr(0)
                self.state = 5678
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5679
                localctx.json_path = self.scalar_expr(0)
                self.state = 5680
                self.match(TeradataSQLDCLParser.AS)
                self.state = 5681
                self.data_type()
                self.state = 5682
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5684
                self.match(TeradataSQLDCLParser.JSONMETADATA)
                self.state = 5685
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5686
                localctx.json_object = self.scalar_expr(0)
                self.state = 5687
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5689
                    self.td_sysfnlib()


                self.state = 5692
                self.match(TeradataSQLDCLParser.NVP2JSON)
                self.state = 5693
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5694
                localctx.nvp_string = self.scalar_expr(0)
                self.state = 5703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5695
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5696
                    localctx.name_delimiters = self.char_string_literal()
                    self.state = 5697
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5698
                    localctx.value_delimiters = self.char_string_literal()
                    self.state = 5701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 5699
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 5700
                        localctx.ignore_characters = self.char_string_literal()




                self.state = 5705
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5707
                self.match(TeradataSQLDCLParser.JSON_AGG)
                self.state = 5708
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5709
                self.json_param_spec()
                self.state = 5714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5710
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5711
                    self.json_param_spec()
                    self.state = 5716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5717
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
                if la_ == 1:
                    self.state = 5718
                    self.returns_clause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5721
                self.match(TeradataSQLDCLParser.JSON_COMPOSE)
                self.state = 5722
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5723
                self.json_param_spec()
                self.state = 5728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5724
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5725
                    self.json_param_spec()
                    self.state = 5730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5731
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
                if la_ == 1:
                    self.state = 5732
                    self.returns_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_data = None # Scalar_exprContext
            self.xquery_expr = None # Char_string_literalContext
            self.xml_value_exp = None # Scalar_exprContext
            self.xml_value_expr = None # Scalar_exprContext
            self.xml_comment = None # Scalar_exprContext
            self.xml_text = None # Scalar_exprContext
            self.xml_schema = None # Scalar_exprContext
            self.xml_uri = None # Char_string_literalContext
            self.xml_valid_element_name = None # Scalar_exprContext
            self.doc_id = None # Scalar_exprContext
            self.source_doc = None # Scalar_exprContext
            self.split_size = None # Scalar_exprContext
            self.split_path = None # Scalar_exprContext
            self._scalar_expr = None # Scalar_exprContext
            self.replication_list = list() # of Scalar_exprContexts
            self.query_string = None # Scalar_exprContext
            self.xslt = None # Scalar_exprContext
            self.xml_string = None # Scalar_exprContext
            self.result_code = None # Scalar_exprContext
            self.document_grouping_spec = None # Scalar_exprContext

        def CREATEXML(self):
            return self.getToken(TeradataSQLDCLParser.CREATEXML, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDCLParser.DATASIZE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysfnlibContext,0)


        def XMLQUERY(self):
            return self.getToken(TeradataSQLDCLParser.XMLQUERY, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_query_argumentContext,0)


        def xml_returning_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_returning_specContext,0)


        def xml_query_on_empty(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_query_on_emptyContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDCLParser.XMLSERIALIZE, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDCLParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDCLParser.CONTENT, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def xml_encoding(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_encodingContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDCLParser.BOM, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDCLParser.VERSION, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDCLParser.XMLDECLARATION, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.NO)
            else:
                return self.getToken(TeradataSQLDCLParser.NO, i)

        def INDENT(self):
            return self.getToken(TeradataSQLDCLParser.INDENT, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDCLParser.EXCLUDING, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDCLParser.SIZE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDCLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDCLParser.XMLELEMENT, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDCLParser.NAME, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_namespace_declarationContext,0)


        def xml_attribute_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_attribute_declarationContext,0)


        def xml_value_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_value_declarationContext,0)


        def XMLFOREST(self):
            return self.getToken(TeradataSQLDCLParser.XMLFOREST, 0)

        def xml_forest_element_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Xml_forest_element_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_forest_element_specContext,i)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_content_option_specContext,0)


        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDCLParser.XMLCONCAT, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDCLParser.XMLCOMMENT, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDCLParser.XMLPI, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDCLParser.XMLTEXT, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDCLParser.XMLPARSE, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDCLParser.WHITESPACE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLDCLParser.PRESERVE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDCLParser.STRIP, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDCLParser.XMLVALIDATE, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDCLParser.ACCORDING, 0)

        def TO(self):
            return self.getToken(TeradataSQLDCLParser.TO, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDCLParser.XMLSCHEMA, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDCLParser.VALUE, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDCLParser.SEQUENCE, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDCLParser.NAMESPACE, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDCLParser.ELEMENT, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDCLParser.XMLAGG, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_fullContext,i)


        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDCLParser.XMLSPLIT, 0)

        def td_sysxml(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Td_sysxmlContext,0)


        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDCLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDCLParser.XMLPUBLISH_STREAM, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_function" ):
                listener.enterXml_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_function" ):
                listener.exitXml_function(self)




    def xml_function(self):

        localctx = TeradataSQLDCLParser.Xml_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_xml_function)
        self._la = 0 # Token type
        try:
            self.state = 5984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5737
                self.match(TeradataSQLDCLParser.CREATEXML)
                self.state = 5738
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5739
                localctx.xml_data = self.scalar_expr(0)
                self.state = 5740
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 5742
                    self.td_sysfnlib()


                self.state = 5745
                self.match(TeradataSQLDCLParser.DATASIZE)
                self.state = 5746
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5747
                self.scalar_expr(0)
                self.state = 5748
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5750
                self.match(TeradataSQLDCLParser.XMLQUERY)
                self.state = 5751
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5752
                localctx.xquery_expr = self.char_string_literal()
                self.state = 5754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==845:
                    self.state = 5753
                    self.xml_query_argument()


                self.state = 5757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5756
                    self.xml_returning_spec()


                self.state = 5760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==649:
                    self.state = 5759
                    self.xml_query_on_empty()


                self.state = 5762
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5764
                self.match(TeradataSQLDCLParser.XMLSERIALIZE)
                self.state = 5765
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5766
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5767
                localctx.xml_value_exp = self.scalar_expr(0)
                self.state = 5770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5768
                    self.match(TeradataSQLDCLParser.AS)
                    self.state = 5769
                    self.data_type()


                self.state = 5773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==653:
                    self.state = 5772
                    self.xml_encoding()


                self.state = 5780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 5775
                    self.match(TeradataSQLDCLParser.WITH)
                    self.state = 5777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5776
                        self.match(TeradataSQLDCLParser.NO)


                    self.state = 5779
                    self.match(TeradataSQLDCLParser.BOM)


                self.state = 5784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1023:
                    self.state = 5782
                    self.match(TeradataSQLDCLParser.VERSION)
                    self.state = 5783
                    self.char_string_literal()


                self.state = 5788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==661 or _la==701:
                    self.state = 5786
                    _la = self._input.LA(1)
                    if not(_la==661 or _la==701):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5787
                    self.match(TeradataSQLDCLParser.XMLDECLARATION)


                self.state = 5796
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 5790
                    self.match(TeradataSQLDCLParser.NO)
                    self.state = 5791
                    self.match(TeradataSQLDCLParser.INDENT)
                    pass
                elif token in [704]:
                    self.state = 5792
                    self.match(TeradataSQLDCLParser.INDENT)

                    self.state = 5793
                    self.match(TeradataSQLDCLParser.SIZE)
                    self.state = 5794
                    self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                    self.state = 5795
                    self.integer_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 5798
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5800
                self.match(TeradataSQLDCLParser.XMLDOCUMENT)
                self.state = 5801
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5802
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5803
                    self.xml_returning_spec()


                self.state = 5806
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5808
                self.match(TeradataSQLDCLParser.XMLELEMENT)
                self.state = 5809
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5810
                self.match(TeradataSQLDCLParser.NAME)
                self.state = 5811
                self.column_name()
                self.state = 5814
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,684,self._ctx)
                if la_ == 1:
                    self.state = 5812
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5813
                    self.xml_namespace_declaration()


                self.state = 5818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,685,self._ctx)
                if la_ == 1:
                    self.state = 5816
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5817
                    self.xml_attribute_declaration()


                self.state = 5822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5820
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5821
                    self.xml_value_declaration()


                self.state = 5825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5824
                    self.xml_returning_spec()


                self.state = 5827
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5829
                self.match(TeradataSQLDCLParser.XMLFOREST)
                self.state = 5830
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,688,self._ctx)
                if la_ == 1:
                    self.state = 5831
                    self.xml_namespace_declaration()


                self.state = 5842
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,690,self._ctx)
                if la_ == 1:
                    self.state = 5834
                    self.xml_forest_element_spec()
                    self.state = 5839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 5835
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 5836
                        self.xml_forest_element_spec()
                        self.state = 5841
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==289:
                    self.state = 5844
                    self.xml_content_option_spec()


                self.state = 5848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5847
                    self.xml_returning_spec()


                self.state = 5850
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5851
                self.match(TeradataSQLDCLParser.XMLCONCAT)
                self.state = 5852
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5853
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5854
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5855
                    localctx.xml_value_expr = self.scalar_expr(0)
                    self.state = 5860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5861
                    self.xml_returning_spec()


                self.state = 5864
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5866
                self.match(TeradataSQLDCLParser.XMLCOMMENT)
                self.state = 5867
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5868
                localctx.xml_comment = self.scalar_expr(0)
                self.state = 5870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5869
                    self.xml_returning_spec()


                self.state = 5872
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5874
                self.match(TeradataSQLDCLParser.XMLPI)
                self.state = 5875
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5876
                self.match(TeradataSQLDCLParser.NAME)
                self.state = 5877
                self.column_name()
                self.state = 5880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5878
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5879
                    self.scalar_expr(0)


                self.state = 5883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5882
                    self.xml_returning_spec()


                self.state = 5885
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5887
                self.match(TeradataSQLDCLParser.XMLTEXT)
                self.state = 5888
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5889
                localctx.xml_text = self.scalar_expr(0)
                self.state = 5891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5890
                    self.xml_returning_spec()


                self.state = 5893
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5895
                self.match(TeradataSQLDCLParser.XMLPARSE)
                self.state = 5896
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5897
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5898
                self.scalar_expr(0)
                self.state = 5899
                _la = self._input.LA(1)
                if not(_la==307 or _la==942):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5900
                self.match(TeradataSQLDCLParser.WHITESPACE)
                self.state = 5901
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5903
                self.match(TeradataSQLDCLParser.XMLVALIDATE)
                self.state = 5904
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5905
                _la = self._input.LA(1)
                if not(_la==593 or _la==636 or _la==914):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5906
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5907
                self.match(TeradataSQLDCLParser.ACCORDING)
                self.state = 5908
                self.match(TeradataSQLDCLParser.TO)
                self.state = 5909
                self.match(TeradataSQLDCLParser.XMLSCHEMA)
                self.state = 5910
                self.match(TeradataSQLDCLParser.VALUE)
                self.state = 5911
                localctx.xml_schema = self.scalar_expr(0)
                self.state = 5916
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [790]:
                    self.state = 5912
                    self.match(TeradataSQLDCLParser.NAMESPACE)
                    self.state = 5913
                    localctx.xml_uri = self.char_string_literal()
                    pass
                elif token in [268]:
                    self.state = 5914
                    self.match(TeradataSQLDCLParser.NO)
                    self.state = 5915
                    self.match(TeradataSQLDCLParser.NAMESPACE)
                    pass
                elif token in [646, 1214]:
                    pass
                else:
                    pass
                self.state = 5920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==646:
                    self.state = 5918
                    self.match(TeradataSQLDCLParser.ELEMENT)
                    self.state = 5919
                    localctx.xml_valid_element_name = self.scalar_expr(0)


                self.state = 5922
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5924
                self.match(TeradataSQLDCLParser.XMLAGG)
                self.state = 5925
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5926
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 5927
                    self.match(TeradataSQLDCLParser.ORDER)
                    self.state = 5928
                    self.match(TeradataSQLDCLParser.BY)
                    self.state = 5929
                    self.order_by_spec_full()
                    self.state = 5934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 5930
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 5931
                        self.order_by_spec_full()
                        self.state = 5936
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5939
                    self.xml_returning_spec()


                self.state = 5942
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5944
                self.match(TeradataSQLDCLParser.XMLSPLIT)
                self.state = 5945
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5946
                localctx.doc_id = self.scalar_expr(0)
                self.state = 5947
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5948
                localctx.source_doc = self.scalar_expr(0)
                self.state = 5949
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5950
                localctx.split_size = self.scalar_expr(0)
                self.state = 5951
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5952
                localctx.split_path = self.scalar_expr(0)
                self.state = 5957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5953
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5954
                    localctx._scalar_expr = self.scalar_expr(0)
                    localctx.replication_list.append(localctx._scalar_expr)
                    self.state = 5959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5960
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5962
                self.td_sysxml()
                self.state = 5963
                self.match(TeradataSQLDCLParser.XMLPUBLISH)
                self.state = 5964
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5965
                localctx.query_string = self.scalar_expr(0)
                self.state = 5966
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5967
                localctx.xslt = self.scalar_expr(0)
                self.state = 5968
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5969
                localctx.xml_string = self.scalar_expr(0)
                self.state = 5970
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5971
                localctx.result_code = self.scalar_expr(0)
                self.state = 5972
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5974
                self.td_sysxml()
                self.state = 5975
                self.match(TeradataSQLDCLParser.XMLPUBLISH_STREAM)
                self.state = 5976
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5977
                localctx.query_string = self.scalar_expr(0)
                self.state = 5978
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5979
                localctx.xslt = self.scalar_expr(0)
                self.state = 5980
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 5981
                localctx.document_grouping_spec = self.scalar_expr(0)
                self.state = 5982
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Returns_clauseContext,0)


        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = TeradataSQLDCLParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 6008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,709,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5986
                self.function_name()
                self.state = 5987
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 5988
                self.scalar_expr(0)
                self.state = 5993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5989
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 5990
                    self.scalar_expr(0)
                    self.state = 5995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5996
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 5999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,707,self._ctx)
                if la_ == 1:
                    self.state = 5997
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 5998
                    self.window_spec()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6001
                self.function_name()
                self.state = 6002
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6003
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                self.state = 6006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,708,self._ctx)
                if la_ == 1:
                    self.state = 6004
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 6005
                    self.window_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_N(self):
            return self.getToken(TeradataSQLDCLParser.CASE_N, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def case_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Case_specContext,0)


        def RANGE_N(self):
            return self.getToken(TeradataSQLDCLParser.RANGE_N, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def BETWEEN(self):
            return self.getToken(TeradataSQLDCLParser.BETWEEN, 0)

        def range_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Range_exprContext,0)


        def range_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Range_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_partitioning_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_expr" ):
                listener.enterPartitioning_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_expr" ):
                listener.exitPartitioning_expr(self)




    def partitioning_expr(self):

        localctx = TeradataSQLDCLParser.Partitioning_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_partitioning_expr)
        self._la = 0 # Token type
        try:
            self.state = 6037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6010
                self.match(TeradataSQLDCLParser.CASE_N)
                self.state = 6011
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6012
                self.logical_expr(0)
                self.state = 6017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,710,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6013
                        self.match(TeradataSQLDCLParser.COMMA)
                        self.state = 6014
                        self.logical_expr(0) 
                    self.state = 6019
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,710,self._ctx)

                self.state = 6022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 6020
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6021
                    self.case_spec()


                self.state = 6024
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6026
                self.match(TeradataSQLDCLParser.RANGE_N)
                self.state = 6027
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6028
                self.scalar_expr(0)
                self.state = 6029
                self.match(TeradataSQLDCLParser.BETWEEN)
                self.state = 6030
                self.range_expr()
                self.state = 6033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 6031
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6032
                    self.range_spec()


                self.state = 6035
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysfnlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDCLParser.TD_SYSFNLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_td_sysfnlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysfnlib" ):
                listener.enterTd_sysfnlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysfnlib" ):
                listener.exitTd_sysfnlib(self)




    def td_sysfnlib(self):

        localctx = TeradataSQLDCLParser.Td_sysfnlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_td_sysfnlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6039
            self.match(TeradataSQLDCLParser.TD_SYSFNLIB)
            self.state = 6040
            self.match(TeradataSQLDCLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysxmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDCLParser.TD_SYSXML, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_td_sysxml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysxml" ):
                listener.enterTd_sysxml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysxml" ):
                listener.exitTd_sysxml(self)




    def td_sysxml(self):

        localctx = TeradataSQLDCLParser.Td_sysxmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_td_sysxml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6042
            self.match(TeradataSQLDCLParser.TD_SYSXML)
            self.state = 6043
            self.match(TeradataSQLDCLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyslibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSLIB(self):
            return self.getToken(TeradataSQLDCLParser.SYSLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_syslib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyslib" ):
                listener.enterSyslib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyslib" ):
                listener.exitSyslib(self)




    def syslib(self):

        localctx = TeradataSQLDCLParser.SyslibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_syslib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6045
            self.match(TeradataSQLDCLParser.SYSLIB)
            self.state = 6046
            self.match(TeradataSQLDCLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_server_dbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDCLParser.TD_SERVER_DB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_td_server_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_server_db" ):
                listener.enterTd_server_db(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_server_db" ):
                listener.exitTd_server_db(self)




    def td_server_db(self):

        localctx = TeradataSQLDCLParser.Td_server_dbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_td_server_db)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6048
            self.match(TeradataSQLDCLParser.TD_SERVER_DB)
            self.state = 6049
            self.match(TeradataSQLDCLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Translation_mappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDCLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDCLParser.UNICODE_TO_LOCALE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_translation_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation_mapping" ):
                listener.enterTranslation_mapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation_mapping" ):
                listener.exitTranslation_mapping(self)




    def translation_mapping(self):

        localctx = TeradataSQLDCLParser.Translation_mappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_translation_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6051
            _la = self._input.LA(1)
            if not(((((_la - 1104)) & ~0x3f) == 0 and ((1 << (_la - 1104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def attribute_modification_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Attribute_modification_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Attribute_modification_optionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_attribute_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification" ):
                listener.enterAttribute_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification" ):
                listener.exitAttribute_modification(self)




    def attribute_modification(self):

        localctx = TeradataSQLDCLParser.Attribute_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_attribute_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6053
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6054
            self.attribute_modification_option()
            self.state = 6059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6055
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6056
                self.attribute_modification_option()
                self.state = 6061
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6062
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDCLParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def STYLE(self):
            return self.getToken(TeradataSQLDCLParser.STYLE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_clause" ):
                listener.enterReturns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_clause" ):
                listener.exitReturns_clause(self)




    def returns_clause(self):

        localctx = TeradataSQLDCLParser.Returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_returns_clause)
        try:
            self.state = 6069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6064
                self.match(TeradataSQLDCLParser.RETURNS)
                self.state = 6065
                self.data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6066
                self.match(TeradataSQLDCLParser.RETURNS)
                self.state = 6067
                self.match(TeradataSQLDCLParser.STYLE)
                self.state = 6068
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modification_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def teradata_type_conversion_data_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Teradata_type_conversion_data_attributeContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Casespecific_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_phraseContext,0)


        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Uppercase_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_attribute_modification_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification_option" ):
                listener.enterAttribute_modification_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification_option" ):
                listener.exitAttribute_modification_option(self)




    def attribute_modification_option(self):

        localctx = TeradataSQLDCLParser.Attribute_modification_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_attribute_modification_option)
        try:
            self.state = 6075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 262, 425]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6071
                self.teradata_type_conversion_data_attribute()
                pass
            elif token in [49, 88, 272, 1211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6072
                self.casespecific_phrase()
                pass
            elif token in [52, 55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6073
                self.character_set_phrase()
                pass
            elif token in [438, 455]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6074
                self.uppercase_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def teradata_type_conversion_data_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Teradata_type_conversion_data_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Teradata_type_conversion_data_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def character_set_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Character_set_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Character_set_phraseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_teradata_type_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion" ):
                listener.enterTeradata_type_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion" ):
                listener.exitTeradata_type_conversion(self)




    def teradata_type_conversion(self):

        localctx = TeradataSQLDCLParser.Teradata_type_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_teradata_type_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6077
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==262 or _la==425:
                self.state = 6078
                self.teradata_type_conversion_data_attribute()
                self.state = 6079
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6086
            self.data_type()
            self.state = 6094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6087
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6090
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161, 262, 425]:
                    self.state = 6088
                    self.teradata_type_conversion_data_attribute()
                    pass
                elif token in [52, 55]:
                    self.state = 6089
                    self.character_set_phrase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6096
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6097
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversion_data_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Format_phraseContext,0)


        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_teradata_type_conversion_data_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion_data_attribute" ):
                listener.enterTeradata_type_conversion_data_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion_data_attribute" ):
                listener.exitTeradata_type_conversion_data_attribute(self)




    def teradata_type_conversion_data_attribute(self):

        localctx = TeradataSQLDCLParser.Teradata_type_conversion_data_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_teradata_type_conversion_data_attribute)
        try:
            self.state = 6102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6099
                self.format_phrase()
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6100
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6101
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDCLParser.NO, 0)

        def CASE(self):
            return self.getToken(TeradataSQLDCLParser.CASE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDCLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDCLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_case_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_spec" ):
                listener.enterCase_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_spec" ):
                listener.exitCase_spec(self)




    def case_spec(self):

        localctx = TeradataSQLDCLParser.Case_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_case_spec)
        self._la = 0 # Token type
        try:
            self.state = 6111
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6104
                self.match(TeradataSQLDCLParser.NO)
                self.state = 6105
                self.match(TeradataSQLDCLParser.CASE)
                self.state = 6108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 6106
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6107
                    self.match(TeradataSQLDCLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6110
                self.match(TeradataSQLDCLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Range_expr_1Context,0)


        def range_expr_2(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Range_expr_2Context,0)


        def range_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Range_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr" ):
                listener.enterRange_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr" ):
                listener.exitRange_expr(self)




    def range_expr(self):

        localctx = TeradataSQLDCLParser.Range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_range_expr)
        try:
            self.state = 6116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6113
                self.range_expr_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6114
                self.range_expr_2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6115
                self.range_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Range_expr_1Context,0)


        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Range_expr_3Context,i)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDCLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_range_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_list" ):
                listener.enterRange_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_list" ):
                listener.exitRange_list(self)




    def range_list(self):

        localctx = TeradataSQLDCLParser.Range_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_range_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6124
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6118
                self.range_expr_3()
                pass
            elif token in [1219]:
                self.state = 6119
                self.match(TeradataSQLDCLParser.MUL_SIGN)
                self.state = 6122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 6120
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6121
                    self.scalar_expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,726,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6126
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6127
                    self.range_expr_3() 
                self.state = 6132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,726,self._ctx)

            self.state = 6133
            self.match(TeradataSQLDCLParser.COMMA)
            self.state = 6134
            self.range_expr_1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDCLParser.AND, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.MUL_SIGN, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDCLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_range_expr_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_1" ):
                listener.enterRange_expr_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_1" ):
                listener.exitRange_expr_1(self)




    def range_expr_1(self):

        localctx = TeradataSQLDCLParser.Range_expr_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_range_expr_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6136
            self.scalar_expr(0)
            self.state = 6137
            self.match(TeradataSQLDCLParser.AND)
            self.state = 6140
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6138
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 6139
                self.match(TeradataSQLDCLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 6142
                self.match(TeradataSQLDCLParser.EACH)
                self.state = 6143
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLDCLParser.MUL_SIGN, i)

        def AND(self):
            return self.getToken(TeradataSQLDCLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_range_expr_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_2" ):
                listener.enterRange_expr_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_2" ):
                listener.exitRange_expr_2(self)




    def range_expr_2(self):

        localctx = TeradataSQLDCLParser.Range_expr_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_range_expr_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6146
            self.match(TeradataSQLDCLParser.MUL_SIGN)
            self.state = 6147
            self.match(TeradataSQLDCLParser.AND)
            self.state = 6150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6148
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 6149
                self.match(TeradataSQLDCLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDCLParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDCLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_range_expr_3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_3" ):
                listener.enterRange_expr_3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_3" ):
                listener.exitRange_expr_3(self)




    def range_expr_3(self):

        localctx = TeradataSQLDCLParser.Range_expr_3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_range_expr_3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6152
            self.scalar_expr(0)

            self.state = 6153
            self.match(TeradataSQLDCLParser.AND)
            self.state = 6154
            self.scalar_expr(0)
            self.state = 6158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 6156
                self.match(TeradataSQLDCLParser.EACH)
                self.state = 6157
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDCLParser.NO, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDCLParser.RANGE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDCLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDCLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_range_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_spec" ):
                listener.enterRange_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_spec" ):
                listener.exitRange_spec(self)




    def range_spec(self):

        localctx = TeradataSQLDCLParser.Range_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_range_spec)
        self._la = 0 # Token type
        try:
            self.state = 6167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6160
                self.match(TeradataSQLDCLParser.NO)
                self.state = 6161
                self.match(TeradataSQLDCLParser.RANGE)
                self.state = 6164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 6162
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6163
                    self.match(TeradataSQLDCLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6166
                self.match(TeradataSQLDCLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_bucket_number_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sparcemap_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext
            self.contiguousmap_name = None # Char_string_literalContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def MAP(self):
            return self.getToken(TeradataSQLDCLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDCLParser.EQUALS_SIGN, i)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDCLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_hash_bucket_number_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_bucket_number_expr" ):
                listener.enterHash_bucket_number_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_bucket_number_expr" ):
                listener.exitHash_bucket_number_expr(self)




    def hash_bucket_number_expr(self):

        localctx = TeradataSQLDCLParser.Hash_bucket_number_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_hash_bucket_number_expr)
        self._la = 0 # Token type
        try:
            self.state = 6188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6169
                self.scalar_expr(0)
                self.state = 6178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 6170
                    self.match(TeradataSQLDCLParser.MAP)
                    self.state = 6171
                    self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                    self.state = 6172
                    localctx.sparcemap_name = self.char_string_literal()
                    self.state = 6173
                    self.match(TeradataSQLDCLParser.COLOCATE)
                    self.state = 6174
                    self.match(TeradataSQLDCLParser.USING)
                    self.state = 6175
                    self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                    self.state = 6176
                    localctx.colocation_name = self.char_string_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6180
                self.scalar_expr(0)
                self.state = 6181
                self.match(TeradataSQLDCLParser.MAP)
                self.state = 6182
                self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                self.state = 6183
                localctx.contiguousmap_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6185
                self.match(TeradataSQLDCLParser.MAP)
                self.state = 6186
                self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                self.state = 6187
                localctx.contiguousmap_name = self.char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDCLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_partition_byContext,0)


        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_order_byContext,0)


        def window_rows(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_rowsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_window_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec" ):
                listener.enterWindow_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec" ):
                listener.exitWindow_spec(self)




    def window_spec(self):

        localctx = TeradataSQLDCLParser.Window_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_window_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6190
            self.match(TeradataSQLDCLParser.OVER)
            self.state = 6191
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 6192
                self.window_partition_by()


            self.state = 6196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 6195
                self.window_order_by()


            self.state = 6199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==364:
                self.state = 6198
                self.window_rows()


            self.state = 6201
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_without_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDCLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_partition_byContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_window_spec_without_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_without_rows" ):
                listener.enterWindow_spec_without_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_without_rows" ):
                listener.exitWindow_spec_without_rows(self)




    def window_spec_without_rows(self):

        localctx = TeradataSQLDCLParser.Window_spec_without_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_window_spec_without_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6203
            self.match(TeradataSQLDCLParser.OVER)
            self.state = 6204
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 6205
                self.window_partition_by()


            self.state = 6208
            self.window_order_by()
            self.state = 6209
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_with_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDCLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Window_partition_byContext,0)


        def with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_tiesContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_window_spec_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_with_ties" ):
                listener.enterWindow_spec_with_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_with_ties" ):
                listener.exitWindow_spec_with_ties(self)




    def window_spec_with_ties(self):

        localctx = TeradataSQLDCLParser.Window_spec_with_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_window_spec_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6211
            self.match(TeradataSQLDCLParser.OVER)
            self.state = 6212
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 6213
                self.window_partition_by()


            self.state = 6216
            self.window_order_by()
            self.state = 6218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6217
                self.with_ties()


            self.state = 6220
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(TeradataSQLDCLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_window_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_partition_by" ):
                listener.enterWindow_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_partition_by" ):
                listener.exitWindow_partition_by(self)




    def window_partition_by(self):

        localctx = TeradataSQLDCLParser.Window_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_window_partition_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6222
            self.match(TeradataSQLDCLParser.PARTITION)
            self.state = 6223
            self.match(TeradataSQLDCLParser.BY)
            self.state = 6224
            self.scalar_expr(0)
            self.state = 6229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6225
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6226
                self.scalar_expr(0)
                self.state = 6231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDCLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def RESET(self):
            return self.getToken(TeradataSQLDCLParser.RESET, 0)

        def WHEN(self):
            return self.getToken(TeradataSQLDCLParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_window_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_order_by" ):
                listener.enterWindow_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_order_by" ):
                listener.exitWindow_order_by(self)




    def window_order_by(self):

        localctx = TeradataSQLDCLParser.Window_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_window_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6232
            self.match(TeradataSQLDCLParser.ORDER)
            self.state = 6233
            self.match(TeradataSQLDCLParser.BY)
            self.state = 6234
            self.order_by_spec_full()
            self.state = 6239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6235
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6236
                self.order_by_spec_full()
                self.state = 6241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==884:
                self.state = 6242
                self.match(TeradataSQLDCLParser.RESET)
                self.state = 6243
                self.match(TeradataSQLDCLParser.WHEN)
                self.state = 6244
                self.logical_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(TeradataSQLDCLParser.ROWS, 0)

        def UNBOUNDED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.UNBOUNDED)
            else:
                return self.getToken(TeradataSQLDCLParser.UNBOUNDED, i)

        def PRECEDING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.PRECEDING)
            else:
                return self.getToken(TeradataSQLDCLParser.PRECEDING, i)

        def number_of_rows(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Number_of_rowsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Number_of_rowsContext,i)


        def CURRENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.CURRENT)
            else:
                return self.getToken(TeradataSQLDCLParser.CURRENT, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.ROW)
            else:
                return self.getToken(TeradataSQLDCLParser.ROW, i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDCLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDCLParser.AND, 0)

        def FOLLOWING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.FOLLOWING)
            else:
                return self.getToken(TeradataSQLDCLParser.FOLLOWING, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_window_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_rows" ):
                listener.enterWindow_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_rows" ):
                listener.exitWindow_rows(self)




    def window_rows(self):

        localctx = TeradataSQLDCLParser.Window_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_window_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6247
            self.match(TeradataSQLDCLParser.ROWS)
            self.state = 6332
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1013]:
                self.state = 6248
                self.match(TeradataSQLDCLParser.UNBOUNDED)
                self.state = 6249
                self.match(TeradataSQLDCLParser.PRECEDING)
                pass
            elif token in [1194]:
                self.state = 6250
                self.number_of_rows()
                self.state = 6251
                self.match(TeradataSQLDCLParser.PRECEDING)
                pass
            elif token in [93]:
                self.state = 6253
                self.match(TeradataSQLDCLParser.CURRENT)
                self.state = 6254
                self.match(TeradataSQLDCLParser.ROW)
                pass
            elif token in [35]:
                self.state = 6255
                self.match(TeradataSQLDCLParser.BETWEEN)
                self.state = 6330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
                if la_ == 1:
                    self.state = 6256
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6257
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6258
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6259
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6260
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass

                elif la_ == 2:
                    self.state = 6261
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6262
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6263
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6264
                    self.number_of_rows()
                    self.state = 6265
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    pass

                elif la_ == 3:
                    self.state = 6267
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6268
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6269
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6270
                    self.match(TeradataSQLDCLParser.CURRENT)
                    self.state = 6271
                    self.match(TeradataSQLDCLParser.ROW)
                    pass

                elif la_ == 4:
                    self.state = 6272
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6273
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6274
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6275
                    self.number_of_rows()
                    self.state = 6276
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass

                elif la_ == 5:
                    self.state = 6278
                    self.number_of_rows()
                    self.state = 6279
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6280
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6281
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6282
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass

                elif la_ == 6:
                    self.state = 6284
                    self.number_of_rows()
                    self.state = 6285
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6286
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6287
                    self.number_of_rows()
                    self.state = 6288
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    pass

                elif la_ == 7:
                    self.state = 6290
                    self.number_of_rows()
                    self.state = 6291
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6292
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6293
                    self.match(TeradataSQLDCLParser.CURRENT)
                    self.state = 6294
                    self.match(TeradataSQLDCLParser.ROW)
                    pass

                elif la_ == 8:
                    self.state = 6296
                    self.number_of_rows()
                    self.state = 6297
                    self.match(TeradataSQLDCLParser.PRECEDING)
                    self.state = 6298
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6299
                    self.number_of_rows()
                    self.state = 6300
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass

                elif la_ == 9:
                    self.state = 6302
                    self.match(TeradataSQLDCLParser.CURRENT)
                    self.state = 6303
                    self.match(TeradataSQLDCLParser.ROW)
                    self.state = 6304
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6305
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6306
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass

                elif la_ == 10:
                    self.state = 6307
                    self.match(TeradataSQLDCLParser.CURRENT)
                    self.state = 6308
                    self.match(TeradataSQLDCLParser.ROW)
                    self.state = 6309
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6310
                    self.match(TeradataSQLDCLParser.CURRENT)
                    self.state = 6311
                    self.match(TeradataSQLDCLParser.ROW)
                    pass

                elif la_ == 11:
                    self.state = 6312
                    self.match(TeradataSQLDCLParser.CURRENT)
                    self.state = 6313
                    self.match(TeradataSQLDCLParser.ROW)
                    self.state = 6314
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6315
                    self.number_of_rows()
                    self.state = 6316
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass

                elif la_ == 12:
                    self.state = 6318
                    self.number_of_rows()
                    self.state = 6319
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    self.state = 6320
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6321
                    self.match(TeradataSQLDCLParser.UNBOUNDED)
                    self.state = 6322
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass

                elif la_ == 13:
                    self.state = 6324
                    self.number_of_rows()
                    self.state = 6325
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    self.state = 6326
                    self.match(TeradataSQLDCLParser.AND)
                    self.state = 6327
                    self.number_of_rows()
                    self.state = 6328
                    self.match(TeradataSQLDCLParser.FOLLOWING)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_param_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Format_phraseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_json_param_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_param_spec" ):
                listener.enterJson_param_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_param_spec" ):
                listener.exitJson_param_spec(self)




    def json_param_spec(self):

        localctx = TeradataSQLDCLParser.Json_param_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_json_param_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6334
            localctx.param = self.scalar_expr(0)
            self.state = 6339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 6335
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6336
                self.format_phrase()
                self.state = 6337
                self.match(TeradataSQLDCLParser.CLOSE_PAR)


            self.state = 6343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6341
                self.match(TeradataSQLDCLParser.AS)
                self.state = 6342
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_context_item = None # Column_nameContext

        def PASSING(self):
            return self.getToken(TeradataSQLDCLParser.PASSING, 0)

        def xml_query_variable_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Xml_query_variable_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_query_variable_specContext,i)


        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDCLParser.VALUE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_query_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_argument" ):
                listener.enterXml_query_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_argument" ):
                listener.exitXml_query_argument(self)




    def xml_query_argument(self):

        localctx = TeradataSQLDCLParser.Xml_query_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_xml_query_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6345
            self.match(TeradataSQLDCLParser.PASSING)
            self.state = 6348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 6346
                self.match(TeradataSQLDCLParser.BY)
                self.state = 6347
                self.match(TeradataSQLDCLParser.VALUE)


            self.state = 6359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,750,self._ctx)
            if la_ == 1:
                self.state = 6350
                localctx.xml_query_context_item = self.column_name()
                pass

            elif la_ == 2:
                self.state = 6351
                self.xml_query_variable_spec()
                self.state = 6356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6352
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6353
                    self.xml_query_variable_spec()
                    self.state = 6358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_variable_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_variable = None # Column_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Variable_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_query_variable_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_variable_spec" ):
                listener.enterXml_query_variable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_variable_spec" ):
                listener.exitXml_query_variable_spec(self)




    def xml_query_variable_spec(self):

        localctx = TeradataSQLDCLParser.Xml_query_variable_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_xml_query_variable_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6361
            localctx.xml_query_variable = self.column_name()
            self.state = 6362
            self.match(TeradataSQLDCLParser.AS)
            self.state = 6363
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDCLParser.XMLATTRIBUTES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def xml_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Xml_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_declaration" ):
                listener.enterXml_attribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_declaration" ):
                listener.exitXml_attribute_declaration(self)




    def xml_attribute_declaration(self):

        localctx = TeradataSQLDCLParser.Xml_attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_xml_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6365
            self.match(TeradataSQLDCLParser.XMLATTRIBUTES)
            self.state = 6366
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6367
            self.xml_attribute_spec()
            self.state = 6372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6368
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6369
                self.xml_attribute_spec()
                self.state = 6374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6375
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_attribute_value = None # Column_nameContext
            self.xml_attribute_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_spec" ):
                listener.enterXml_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_spec" ):
                listener.exitXml_attribute_spec(self)




    def xml_attribute_spec(self):

        localctx = TeradataSQLDCLParser.Xml_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_xml_attribute_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6377
            localctx.xml_attribute_value = self.column_name()
            self.state = 6380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6378
                self.match(TeradataSQLDCLParser.AS)
                self.state = 6379
                localctx.xml_attribute_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_forest_element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_forest_element_value = None # Column_nameContext
            self.xml_forest_element_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_forest_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_forest_element_spec" ):
                listener.enterXml_forest_element_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_forest_element_spec" ):
                listener.exitXml_forest_element_spec(self)




    def xml_forest_element_spec(self):

        localctx = TeradataSQLDCLParser.Xml_forest_element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_xml_forest_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6382
            localctx.xml_forest_element_value = self.column_name()
            self.state = 6385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6383
                self.match(TeradataSQLDCLParser.AS)
                self.state = 6384
                localctx.xml_forest_element_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_value_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_value_expr = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_content_option_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_value_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_value_declaration" ):
                listener.enterXml_value_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_value_declaration" ):
                listener.exitXml_value_declaration(self)




    def xml_value_declaration(self):

        localctx = TeradataSQLDCLParser.Xml_value_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_xml_value_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6387
            localctx.xml_value_expr = self.scalar_expr(0)
            self.state = 6389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 6388
                self.xml_content_option_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDCLParser.XMLNAMESPACES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def xml_namespace_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Xml_namespace_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_namespace_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_declaration" ):
                listener.enterXml_namespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_declaration" ):
                listener.exitXml_namespace_declaration(self)




    def xml_namespace_declaration(self):

        localctx = TeradataSQLDCLParser.Xml_namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_xml_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6391
            self.match(TeradataSQLDCLParser.XMLNAMESPACES)
            self.state = 6392
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6393
            self.xml_namespace_spec()
            self.state = 6398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6394
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6395
                self.xml_namespace_spec()
                self.state = 6400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6401
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Char_string_literalContext
            self.xml_namespace_prefix = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDCLParser.DEFAULT, 0)

        def NO(self):
            return self.getToken(TeradataSQLDCLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_namespace_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_spec" ):
                listener.enterXml_namespace_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_spec" ):
                listener.exitXml_namespace_spec(self)




    def xml_namespace_spec(self):

        localctx = TeradataSQLDCLParser.Xml_namespace_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_xml_namespace_spec)
        try:
            self.state = 6411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6403
                localctx.xml_namespace_uri = self.char_string_literal()
                self.state = 6404
                self.match(TeradataSQLDCLParser.AS)
                self.state = 6405
                localctx.xml_namespace_prefix = self.alias_name()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6407
                self.match(TeradataSQLDCLParser.DEFAULT)
                self.state = 6408
                localctx.xml_namespace_uri = self.char_string_literal()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6409
                self.match(TeradataSQLDCLParser.NO)
                self.state = 6410
                self.match(TeradataSQLDCLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_columns_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(TeradataSQLDCLParser.COLUMNS, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,i)


        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.FOR)
            else:
                return self.getToken(TeradataSQLDCLParser.FOR, i)

        def ORDINALITY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.ORDINALITY)
            else:
                return self.getToken(TeradataSQLDCLParser.ORDINALITY, i)

        def xml_regular_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Xml_regular_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Xml_regular_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_columns_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_columns_spec" ):
                listener.enterXml_columns_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_columns_spec" ):
                listener.exitXml_columns_spec(self)




    def xml_columns_spec(self):

        localctx = TeradataSQLDCLParser.Xml_columns_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_xml_columns_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6413
            self.match(TeradataSQLDCLParser.COLUMNS)
            self.state = 6419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,757,self._ctx)
            if la_ == 1:
                self.state = 6414
                self.column_name()
                self.state = 6415
                self.match(TeradataSQLDCLParser.FOR)
                self.state = 6416
                self.match(TeradataSQLDCLParser.ORDINALITY)
                pass

            elif la_ == 2:
                self.state = 6418
                self.xml_regular_column_definition()
                pass


            self.state = 6431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6421
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
                if la_ == 1:
                    self.state = 6422
                    self.column_name()
                    self.state = 6423
                    self.match(TeradataSQLDCLParser.FOR)
                    self.state = 6424
                    self.match(TeradataSQLDCLParser.ORDINALITY)
                    pass

                elif la_ == 2:
                    self.state = 6426
                    self.xml_regular_column_definition()
                    pass


                self.state = 6433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_regular_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def PATH(self):
            return self.getToken(TeradataSQLDCLParser.PATH, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDCLParser.DEFAULT, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LiteralContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_regular_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_regular_column_definition" ):
                listener.enterXml_regular_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_regular_column_definition" ):
                listener.exitXml_regular_column_definition(self)




    def xml_regular_column_definition(self):

        localctx = TeradataSQLDCLParser.Xml_regular_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_xml_regular_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6434
            localctx.name = self.unqualified_name()
            self.state = 6435
            self.data_type()
            self.state = 6438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1082:
                self.state = 6436
                self.match(TeradataSQLDCLParser.PATH)
                self.state = 6437
                self.char_string_literal()


            self.state = 6442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 6440
                self.match(TeradataSQLDCLParser.DEFAULT)
                self.state = 6441
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_encoding_name = None # Char_string_literalContext

        def ENCODING(self):
            return self.getToken(TeradataSQLDCLParser.ENCODING, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_encoding" ):
                listener.enterXml_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_encoding" ):
                listener.exitXml_encoding(self)




    def xml_encoding(self):

        localctx = TeradataSQLDCLParser.Xml_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_xml_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6444
            self.match(TeradataSQLDCLParser.ENCODING)
            self.state = 6445
            localctx.xml_encoding_name = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_on_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.EMPTY)
            else:
                return self.getToken(TeradataSQLDCLParser.EMPTY, i)

        def NULL(self):
            return self.getToken(TeradataSQLDCLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_query_on_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_on_empty" ):
                listener.enterXml_query_on_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_on_empty" ):
                listener.exitXml_query_on_empty(self)




    def xml_query_on_empty(self):

        localctx = TeradataSQLDCLParser.Xml_query_on_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_xml_query_on_empty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6447
            _la = self._input.LA(1)
            if not(_la==274 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6448
            self.match(TeradataSQLDCLParser.ON)
            self.state = 6449
            self.match(TeradataSQLDCLParser.EMPTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_returning_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(TeradataSQLDCLParser.RETURNING, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDCLParser.CONTENT, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDCLParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_returning_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_returning_spec" ):
                listener.enterXml_returning_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_returning_spec" ):
                listener.exitXml_returning_spec(self)




    def xml_returning_spec(self):

        localctx = TeradataSQLDCLParser.Xml_returning_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_xml_returning_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6451
            self.match(TeradataSQLDCLParser.RETURNING)
            self.state = 6452
            _la = self._input.LA(1)
            if not(_la==593 or _la==914):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_content_option_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TeradataSQLDCLParser.OPTION, 0)

        def ON(self):
            return self.getToken(TeradataSQLDCLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.NULL)
            else:
                return self.getToken(TeradataSQLDCLParser.NULL, i)

        def NIL(self):
            return self.getToken(TeradataSQLDCLParser.NIL, 0)

        def NO(self):
            return self.getToken(TeradataSQLDCLParser.NO, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDCLParser.CONTENT, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDCLParser.EMPTY, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDCLParser.ABSENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_xml_content_option_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content_option_spec" ):
                listener.enterXml_content_option_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content_option_spec" ):
                listener.exitXml_content_option_spec(self)




    def xml_content_option_spec(self):

        localctx = TeradataSQLDCLParser.Xml_content_option_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_xml_content_option_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6454
            self.match(TeradataSQLDCLParser.OPTION)
            self.state = 6462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,762,self._ctx)
            if la_ == 1:
                self.state = 6455
                _la = self._input.LA(1)
                if not(_la==274 or _la==489 or _la==649 or _la==794):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6456
                self.match(TeradataSQLDCLParser.ON)
                self.state = 6457
                self.match(TeradataSQLDCLParser.NULL)
                pass

            elif la_ == 2:
                self.state = 6458
                self.match(TeradataSQLDCLParser.NIL)
                self.state = 6459
                self.match(TeradataSQLDCLParser.ON)
                self.state = 6460
                self.match(TeradataSQLDCLParser.NO)
                self.state = 6461
                self.match(TeradataSQLDCLParser.CONTENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_respect_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(TeradataSQLDCLParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDCLParser.IGNORE, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDCLParser.RESPECT, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_ignore_respect_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_respect_nulls" ):
                listener.enterIgnore_respect_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_respect_nulls" ):
                listener.exitIgnore_respect_nulls(self)




    def ignore_respect_nulls(self):

        localctx = TeradataSQLDCLParser.Ignore_respect_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_ignore_respect_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6464
            _la = self._input.LA(1)
            if not(_la==697 or _la==885):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6465
            self.match(TeradataSQLDCLParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_of_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_number_of_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_of_rows" ):
                listener.enterNumber_of_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_of_rows" ):
                listener.exitNumber_of_rows(self)




    def number_of_rows(self):

        localctx = TeradataSQLDCLParser.Number_of_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_number_of_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6467
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDCLParser.TIES, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDCLParser.LOW, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDCLParser.HIGH, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDCLParser.AVG, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDCLParser.DENSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_ties" ):
                listener.enterWith_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_ties" ):
                listener.exitWith_ties(self)




    def with_ties(self):

        localctx = TeradataSQLDCLParser.With_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6469
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 6470
            self.match(TeradataSQLDCLParser.TIES)
            self.state = 6471
            _la = self._input.LA(1)
            if not(_la==32 or _la==629 or _la==690 or _la==745):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(TeradataSQLDCLParser.PIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Pivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def pivot_with_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Pivot_with_phraseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot" ):
                listener.enterPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot" ):
                listener.exitPivot(self)




    def pivot(self):

        localctx = TeradataSQLDCLParser.PivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_pivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6473
            self.match(TeradataSQLDCLParser.PIVOT)
            self.state = 6474
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6475
            self.pivot_spec()
            self.state = 6476
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 6478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6477
                self.pivot_with_phrase()


            self.state = 6481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6480
                self.match(TeradataSQLDCLParser.AS)


            self.state = 6483
            self.alias_name()
            self.state = 6485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,765,self._ctx)
            if la_ == 1:
                self.state = 6484
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_agg_func_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Pivot_agg_func_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Pivot_agg_func_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDCLParser.FOR, 0)

        def pivot_for_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Pivot_for_phraseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_spec" ):
                listener.enterPivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_spec" ):
                listener.exitPivot_spec(self)




    def pivot_spec(self):

        localctx = TeradataSQLDCLParser.Pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_pivot_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6487
            self.pivot_agg_func_spec()
            self.state = 6492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6488
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6489
                self.pivot_agg_func_spec()
                self.state = 6494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6495
            self.match(TeradataSQLDCLParser.FOR)
            self.state = 6496
            self.pivot_for_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def pivot_with_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Pivot_with_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Pivot_with_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot_with_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_phrase" ):
                listener.enterPivot_with_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_phrase" ):
                listener.exitPivot_with_phrase(self)




    def pivot_with_phrase(self):

        localctx = TeradataSQLDCLParser.Pivot_with_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_pivot_with_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6498
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 6499
            self.pivot_with_spec()
            self.state = 6504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6500
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6501
                self.pivot_with_spec()
                self.state = 6506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_agg_func_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot_agg_func_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_agg_func_spec" ):
                listener.enterPivot_agg_func_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_agg_func_spec" ):
                listener.exitPivot_agg_func_spec(self)




    def pivot_agg_func_spec(self):

        localctx = TeradataSQLDCLParser.Pivot_agg_func_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_pivot_agg_func_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6507
            self.aggregate_function()
            self.state = 6512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 6509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6508
                    self.match(TeradataSQLDCLParser.AS)


                self.state = 6511
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def pivot_expr_spec_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Pivot_expr_spec_scalarContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Pivot_expr_spec_scalarContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def pivot_expr_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Pivot_expr_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Pivot_expr_spec_listContext,i)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot_for_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_phrase" ):
                listener.enterPivot_for_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_phrase" ):
                listener.exitPivot_for_phrase(self)




    def pivot_for_phrase(self):

        localctx = TeradataSQLDCLParser.Pivot_for_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_pivot_for_phrase)
        self._la = 0 # Token type
        try:
            self.state = 6557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6514
                self.column_name()
                self.state = 6515
                self.match(TeradataSQLDCLParser.IN)
                self.state = 6516
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6517
                self.pivot_expr_spec_scalar()
                self.state = 6522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6518
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6519
                    self.pivot_expr_spec_scalar()
                    self.state = 6524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6525
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6527
                self.column_list()
                self.state = 6528
                self.match(TeradataSQLDCLParser.IN)
                self.state = 6529
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6530
                self.pivot_expr_spec_scalar()
                self.state = 6535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6531
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6532
                    self.pivot_expr_spec_scalar()
                    self.state = 6537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6538
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6540
                self.column_list()
                self.state = 6541
                self.match(TeradataSQLDCLParser.IN)
                self.state = 6542
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6543
                self.pivot_expr_spec_list()
                self.state = 6548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6544
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6545
                    self.pivot_expr_spec_list()
                    self.state = 6550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6551
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6553
                self.column_name()
                self.state = 6554
                self.match(TeradataSQLDCLParser.IN)
                self.state = 6555
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot_with_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_spec" ):
                listener.enterPivot_with_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_spec" ):
                listener.exitPivot_with_spec(self)




    def pivot_with_spec(self):

        localctx = TeradataSQLDCLParser.Pivot_with_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_pivot_with_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6559
            self.aggregate_function()
            self.state = 6561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6560
                self.match(TeradataSQLDCLParser.AS)


            self.state = 6563
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot_expr_spec_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_scalar" ):
                listener.enterPivot_expr_spec_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_scalar" ):
                listener.exitPivot_expr_spec_scalar(self)




    def pivot_expr_spec_scalar(self):

        localctx = TeradataSQLDCLParser.Pivot_expr_spec_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_pivot_expr_spec_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6565
            self.scalar_expr(0)
            self.state = 6570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 6567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6566
                    self.match(TeradataSQLDCLParser.AS)


                self.state = 6569
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_expr_list_comma_separatedContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_pivot_expr_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_list" ):
                listener.enterPivot_expr_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_list" ):
                listener.exitPivot_expr_spec_list(self)




    def pivot_expr_spec_list(self):

        localctx = TeradataSQLDCLParser.Pivot_expr_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_pivot_expr_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6572
            self.scalar_expr_list_comma_separated()
            self.state = 6574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6573
                self.match(TeradataSQLDCLParser.AS)


            self.state = 6576
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDCLParser.UNPIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unpivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDCLParser.NULLS, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def INCLUDE(self):
            return self.getToken(TeradataSQLDCLParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDCLParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot" ):
                listener.enterUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot" ):
                listener.exitUnpivot(self)




    def unpivot(self):

        localctx = TeradataSQLDCLParser.UnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_unpivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6578
            self.match(TeradataSQLDCLParser.UNPIVOT)
            self.state = 6581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==660 or _la==700:
                self.state = 6579
                _la = self._input.LA(1)
                if not(_la==660 or _la==700):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6580
                self.match(TeradataSQLDCLParser.NULLS)


            self.state = 6583
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6584
            self.unpivot_spec()
            self.state = 6585
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
            self.state = 6587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6586
                self.match(TeradataSQLDCLParser.AS)


            self.state = 6589
            self.alias_name()
            self.state = 6591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.state = 6590
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDCLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def unpivot_column_name_spec_single(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Unpivot_column_name_spec_singleContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Unpivot_column_name_spec_singleContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def unpivot_column_name_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Unpivot_column_name_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Unpivot_column_name_spec_listContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_spec" ):
                listener.enterUnpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_spec" ):
                listener.exitUnpivot_spec(self)




    def unpivot_spec(self):

        localctx = TeradataSQLDCLParser.Unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_unpivot_spec)
        self._la = 0 # Token type
        try:
            self.state = 6623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [363, 366, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6593
                self.column_name()
                self.state = 6594
                self.match(TeradataSQLDCLParser.FOR)
                self.state = 6595
                self.column_name()
                self.state = 6596
                self.match(TeradataSQLDCLParser.IN)
                self.state = 6597
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6598
                self.unpivot_column_name_spec_single()
                self.state = 6603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6599
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6600
                    self.unpivot_column_name_spec_single()
                    self.state = 6605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6606
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6608
                self.column_list()
                self.state = 6609
                self.match(TeradataSQLDCLParser.FOR)
                self.state = 6610
                self.column_name()
                self.state = 6611
                self.match(TeradataSQLDCLParser.IN)
                self.state = 6612
                self.match(TeradataSQLDCLParser.OPEN_PAR)
                self.state = 6613
                self.unpivot_column_name_spec_list()
                self.state = 6618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6614
                    self.match(TeradataSQLDCLParser.COMMA)
                    self.state = 6615
                    self.unpivot_column_name_spec_list()
                    self.state = 6620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6621
                self.match(TeradataSQLDCLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unpivot_column_name_spec_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_single" ):
                listener.enterUnpivot_column_name_spec_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_single" ):
                listener.exitUnpivot_column_name_spec_single(self)




    def unpivot_column_name_spec_single(self):

        localctx = TeradataSQLDCLParser.Unpivot_column_name_spec_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_unpivot_column_name_spec_single)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6625
            self.column_name()
            self.state = 6630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 6627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6626
                    self.match(TeradataSQLDCLParser.AS)


                self.state = 6629
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_unpivot_column_name_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_list" ):
                listener.enterUnpivot_column_name_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_list" ):
                listener.exitUnpivot_column_name_spec_list(self)




    def unpivot_column_name_spec_list(self):

        localctx = TeradataSQLDCLParser.Unpivot_column_name_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_unpivot_column_name_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6632
            self.column_list()
            self.state = 6637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 6634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 6633
                    self.match(TeradataSQLDCLParser.AS)


                self.state = 6636
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_timezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(TeradataSQLDCLParser.AT, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDCLParser.LOCAL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLDCLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDCLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_at_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_timezone" ):
                listener.enterAt_timezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_timezone" ):
                listener.exitAt_timezone(self)




    def at_timezone(self):

        localctx = TeradataSQLDCLParser.At_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_at_timezone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6639
            self.match(TeradataSQLDCLParser.AT)
            self.state = 6646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.state = 6640
                self.match(TeradataSQLDCLParser.LOCAL)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 6643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
                if la_ == 1:
                    self.state = 6641
                    self.match(TeradataSQLDCLParser.TIME)
                    self.state = 6642
                    self.match(TeradataSQLDCLParser.ZONE)


                self.state = 6645
                self.scalar_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elements_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_expr_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_elements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElements_list" ):
                listener.enterElements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElements_list" ):
                listener.exitElements_list(self)




    def elements_list(self):

        localctx = TeradataSQLDCLParser.Elements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_elements_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,790,self._ctx)
            if la_ == 1:
                self.state = 6648
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 6649
                self.scalar_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.OR)
            else:
                return self.getToken(TeradataSQLDCLParser.OR, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_scalar_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list" ):
                listener.enterScalar_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list" ):
                listener.exitScalar_expr_list(self)




    def scalar_expr_list(self):

        localctx = TeradataSQLDCLParser.Scalar_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_scalar_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6652
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6653
            self.scalar_expr(0)
            self.state = 6658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290 or _la==1208:
                self.state = 6654
                _la = self._input.LA(1)
                if not(_la==290 or _la==1208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6655
                self.scalar_expr(0)
                self.state = 6660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6661
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_list_comma_separatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_scalar_expr_list_comma_separated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list_comma_separated" ):
                listener.enterScalar_expr_list_comma_separated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list_comma_separated" ):
                listener.exitScalar_expr_list_comma_separated(self)




    def scalar_expr_list_comma_separated(self):

        localctx = TeradataSQLDCLParser.Scalar_expr_list_comma_separatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_scalar_expr_list_comma_separated)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6663
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6664
            self.scalar_expr(0)
            self.state = 6669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6665
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6666
                self.scalar_expr(0)
                self.state = 6671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6672
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = TeradataSQLDCLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6674
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6675
            self.column_name()
            self.state = 6680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6676
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6677
                self.column_name()
                self.state = 6682
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6683
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TeradataSQLDCLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6685
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6686
                self.with_request_modifier()


            self.state = 6689
            self.query_expr(0)
            self.state = 6690
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = TeradataSQLDCLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6692
            localctx.name = self.unqualified_name()
            self.state = 6693
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TeradataSQLDCLParser.COLON, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = TeradataSQLDCLParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6695
            self.match(TeradataSQLDCLParser.COLON)
            self.state = 6696
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_reference = None # Variable_referenceContext
            self.name = None # Unqualified_nameContext

        def DOT_(self):
            return self.getToken(TeradataSQLDCLParser.DOT_, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Variable_referenceContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_cursor_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_variable_reference" ):
                listener.enterCursor_variable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_variable_reference" ):
                listener.exitCursor_variable_reference(self)




    def cursor_variable_reference(self):

        localctx = TeradataSQLDCLParser.Cursor_variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_cursor_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6698
            localctx.cursor_reference = self.variable_reference()
            self.state = 6699
            self.match(TeradataSQLDCLParser.DOT_)
            self.state = 6700
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameter_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Parameter_nameContext,0)


        def COLON(self):
            return self.getToken(TeradataSQLDCLParser.COLON, 0)

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.AT_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_macro_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter_reference" ):
                listener.enterMacro_parameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter_reference" ):
                listener.exitMacro_parameter_reference(self)




    def macro_parameter_reference(self):

        localctx = TeradataSQLDCLParser.Macro_parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_macro_parameter_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6702
            _la = self._input.LA(1)
            if not(_la==1207 or _la==1210):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6703
            self.parameter_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_scope_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_lower_bounds = None # Integer_literalContext
            self.array_upper_bounds = None # Integer_literalContext

        def COMMA(self):
            return self.getToken(TeradataSQLDCLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_array_scope_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_scope_reference" ):
                listener.enterArray_scope_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_scope_reference" ):
                listener.exitArray_scope_reference(self)




    def array_scope_reference(self):

        localctx = TeradataSQLDCLParser.Array_scope_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_array_scope_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6705
            localctx.array_lower_bounds = self.integer_literal()
            self.state = 6706
            self.match(TeradataSQLDCLParser.COMMA)
            self.state = 6707
            localctx.array_upper_bounds = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.EQUALS_SIGN, 0)

        def EQ(self):
            return self.getToken(TeradataSQLDCLParser.EQ, 0)

        def NOT_EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.NOT_EQUALS_SIGN, 0)

        def NOT_EQUALS_SIGN_TD(self):
            return self.getToken(TeradataSQLDCLParser.NOT_EQUALS_SIGN_TD, 0)

        def NE(self):
            return self.getToken(TeradataSQLDCLParser.NE, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDCLParser.NOT, 0)

        def LT_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.LT_SIGN, 0)

        def GT_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.GT_SIGN, 0)

        def LT(self):
            return self.getToken(TeradataSQLDCLParser.LT, 0)

        def LE_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.LE_SIGN, 0)

        def LE(self):
            return self.getToken(TeradataSQLDCLParser.LE, 0)

        def GT(self):
            return self.getToken(TeradataSQLDCLParser.GT, 0)

        def GE_SIGN(self):
            return self.getToken(TeradataSQLDCLParser.GE_SIGN, 0)

        def GE(self):
            return self.getToken(TeradataSQLDCLParser.GE, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TeradataSQLDCLParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_comparison_operator)
        try:
            self.state = 6726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6709
                self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6710
                self.match(TeradataSQLDCLParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6711
                self.match(TeradataSQLDCLParser.NOT_EQUALS_SIGN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6712
                self.match(TeradataSQLDCLParser.NOT_EQUALS_SIGN_TD)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6713
                self.match(TeradataSQLDCLParser.NE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6714
                self.match(TeradataSQLDCLParser.NOT)
                self.state = 6715
                self.match(TeradataSQLDCLParser.EQUALS_SIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6716
                self.match(TeradataSQLDCLParser.LT_SIGN)
                self.state = 6717
                self.match(TeradataSQLDCLParser.GT_SIGN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6718
                self.match(TeradataSQLDCLParser.LT_SIGN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6719
                self.match(TeradataSQLDCLParser.LT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6720
                self.match(TeradataSQLDCLParser.LE_SIGN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6721
                self.match(TeradataSQLDCLParser.LE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6722
                self.match(TeradataSQLDCLParser.GT_SIGN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6723
                self.match(TeradataSQLDCLParser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6724
                self.match(TeradataSQLDCLParser.GE_SIGN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6725
                self.match(TeradataSQLDCLParser.GE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLDCLParser.ALL, 0)

        def ANY(self):
            return self.getToken(TeradataSQLDCLParser.ANY, 0)

        def SOME(self):
            return self.getToken(TeradataSQLDCLParser.SOME, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)




    def quantifier(self):

        localctx = TeradataSQLDCLParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6728
            _la = self._input.LA(1)
            if not(_la==13 or _la==18 or _la==382):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.With_request_modifierContext,0)


        def using_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Using_request_modifierContext,0)


        def explain_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Explain_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequest_modifier" ):
                listener.enterRequest_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequest_modifier" ):
                listener.exitRequest_modifier(self)




    def request_modifier(self):

        localctx = TeradataSQLDCLParser.Request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_request_modifier)
        try:
            self.state = 6734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6730
                self.locking_request_modifier()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6731
                self.with_request_modifier()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6732
                self.using_request_modifier()
                pass
            elif token in [128, 150, 938]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6733
                self.explain_request_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Locking_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Locking_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_locking_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_request_modifier" ):
                listener.enterLocking_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_request_modifier" ):
                listener.exitLocking_request_modifier(self)




    def locking_request_modifier(self):

        localctx = TeradataSQLDCLParser.Locking_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_locking_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6737 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6736
                self.locking_spec()
                self.state = 6739 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==226 or _la==227):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def lock_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Lock_typeContext,0)


        def LOCKING(self):
            return self.getToken(TeradataSQLDCLParser.LOCKING, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLDCLParser.LOCK, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Database_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Table_nameContext,0)


        def ROW(self):
            return self.getToken(TeradataSQLDCLParser.ROW, 0)

        def MODE(self):
            return self.getToken(TeradataSQLDCLParser.MODE, 0)

        def NOWAIT(self):
            return self.getToken(TeradataSQLDCLParser.NOWAIT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDCLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDCLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDCLParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDCLParser.VIEW, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_locking_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_spec" ):
                listener.enterLocking_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_spec" ):
                listener.exitLocking_spec(self)




    def locking_spec(self):

        localctx = TeradataSQLDCLParser.Locking_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_locking_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6741
            _la = self._input.LA(1)
            if not(_la==226 or _la==227):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,801,self._ctx)
            if la_ == 1:
                self.state = 6743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 6742
                    self.match(TeradataSQLDCLParser.DATABASE)


                self.state = 6745
                self.database_name()
                pass

            elif la_ == 2:
                self.state = 6747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 6746
                    self.match(TeradataSQLDCLParser.TABLE)


                self.state = 6749
                self.table_name()
                pass

            elif la_ == 3:
                self.state = 6751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==468:
                    self.state = 6750
                    self.match(TeradataSQLDCLParser.VIEW)


                self.state = 6753
                localctx.view_name = self.table_name()
                pass

            elif la_ == 4:
                self.state = 6754
                self.match(TeradataSQLDCLParser.ROW)
                pass


            self.state = 6758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==190:
                self.state = 6757
                _la = self._input.LA(1)
                if not(_la==159 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6760
            self.lock_type()
            self.state = 6762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 6761
                self.match(TeradataSQLDCLParser.MODE)


            self.state = 6765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 6764
                self.match(TeradataSQLDCLParser.NOWAIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(TeradataSQLDCLParser.ACCESS, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDCLParser.EXCL, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDCLParser.EXCLUSIVE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDCLParser.SHARE, 0)

        def READ(self):
            return self.getToken(TeradataSQLDCLParser.READ, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDCLParser.OVERRIDE, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDCLParser.WRITE, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDCLParser.CHECKSUM, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDCLParser.LOAD, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDCLParser.COMMITTED, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = TeradataSQLDCLParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 6778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [490]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6767
                self.match(TeradataSQLDCLParser.ACCESS)
                pass
            elif token in [659, 662]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6768
                _la = self._input.LA(1)
                if not(_la==659 or _la==662):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [923]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6769
                self.match(TeradataSQLDCLParser.SHARE)
                pass
            elif token in [877]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6770
                self.match(TeradataSQLDCLParser.READ)
                self.state = 6772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 6771
                    self.match(TeradataSQLDCLParser.OVERRIDE)


                pass
            elif token in [1041]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6774
                self.match(TeradataSQLDCLParser.WRITE)
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6775
                self.match(TeradataSQLDCLParser.CHECKSUM)
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6776
                self.match(TeradataSQLDCLParser.LOAD)
                self.state = 6777
                self.match(TeradataSQLDCLParser.COMMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDCLParser.WITH, 0)

        def cte_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Cte_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Cte_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_with_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_request_modifier" ):
                listener.enterWith_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_request_modifier" ):
                listener.exitWith_request_modifier(self)




    def with_request_modifier(self):

        localctx = TeradataSQLDCLParser.With_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_with_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6780
            self.match(TeradataSQLDCLParser.WITH)
            self.state = 6781
            self.cte_spec()
            self.state = 6786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6782
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6783
                self.cte_spec()
                self.state = 6788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Regular_cte_specContext,0)


        def recursive_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Recursive_cte_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_spec" ):
                listener.enterCte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_spec" ):
                listener.exitCte_spec(self)




    def cte_spec(self):

        localctx = TeradataSQLDCLParser.Cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_cte_spec)
        try:
            self.state = 6791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6789
                self.regular_cte_spec()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6790
                self.recursive_cte_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_regular_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_cte_spec" ):
                listener.enterRegular_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_cte_spec" ):
                listener.exitRegular_cte_spec(self)




    def regular_cte_spec(self):

        localctx = TeradataSQLDCLParser.Regular_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_regular_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6793
            localctx.query_name = self.alias_name()
            self.state = 6795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 6794
                self.column_list()


            self.state = 6797
            self.match(TeradataSQLDCLParser.AS)
            self.state = 6798
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def RECURSIVE(self):
            return self.getToken(TeradataSQLDCLParser.RECURSIVE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Column_listContext,0)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.UNION)
            else:
                return self.getToken(TeradataSQLDCLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.ALL)
            else:
                return self.getToken(TeradataSQLDCLParser.ALL, i)

        def query_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Query_termContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Query_termContext,i)


        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_recursive_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte_spec" ):
                listener.enterRecursive_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte_spec" ):
                listener.exitRecursive_cte_spec(self)




    def recursive_cte_spec(self):

        localctx = TeradataSQLDCLParser.Recursive_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_recursive_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6800
            self.match(TeradataSQLDCLParser.RECURSIVE)
            self.state = 6801
            localctx.query_name = self.alias_name()
            self.state = 6803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 6802
                self.column_list()


            self.state = 6805
            self.match(TeradataSQLDCLParser.AS)
            self.state = 6806
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6807
            self.query_expr(0)
            self.state = 6811 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6808
                self.match(TeradataSQLDCLParser.UNION)
                self.state = 6809
                self.match(TeradataSQLDCLParser.ALL)
                self.state = 6810
                self.query_term()
                self.state = 6813 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==447):
                    break

            self.state = 6815
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDCLParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDCLParser.OPEN_PAR, 0)

        def using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Using_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDCLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDCLParser.COMMA)
            else:
                return self.getToken(TeradataSQLDCLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_using_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_request_modifier" ):
                listener.enterUsing_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_request_modifier" ):
                listener.exitUsing_request_modifier(self)




    def using_request_modifier(self):

        localctx = TeradataSQLDCLParser.Using_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_using_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6817
            self.match(TeradataSQLDCLParser.USING)
            self.state = 6818
            self.match(TeradataSQLDCLParser.OPEN_PAR)
            self.state = 6819
            self.using_spec()
            self.state = 6824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6820
                self.match(TeradataSQLDCLParser.COMMA)
                self.state = 6821
                self.using_spec()
                self.state = 6826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6827
            self.match(TeradataSQLDCLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Variable_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDCLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDCLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDCLParser.Data_type_attributeContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDCLParser.AS, 0)

        def DEFERRED(self):
            return self.getToken(TeradataSQLDCLParser.DEFERRED, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDCLParser.LOCATOR, 0)

        def BY(self):
            return self.getToken(TeradataSQLDCLParser.BY, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDCLParser.NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_spec" ):
                listener.enterUsing_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_spec" ):
                listener.exitUsing_spec(self)




    def using_spec(self):

        localctx = TeradataSQLDCLParser.Using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_using_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6829
            self.variable_name()
            self.state = 6830
            self.data_type()
            self.state = 6834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 6831
                self.data_type_attribute()
                self.state = 6836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 6837
                self.match(TeradataSQLDCLParser.AS)
                self.state = 6844
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 6838
                    self.match(TeradataSQLDCLParser.DEFERRED)
                    self.state = 6841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 6839
                        self.match(TeradataSQLDCLParser.BY)
                        self.state = 6840
                        self.match(TeradataSQLDCLParser.NAME)


                    pass
                elif token in [225]:
                    self.state = 6843
                    self.match(TeradataSQLDCLParser.LOCATOR)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDCLParser.EXPLAIN, 0)

        def IN(self):
            return self.getToken(TeradataSQLDCLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDCLParser.XML, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDCLParser.STATIC, 0)

        def DYNAMIC(self):
            return self.getToken(TeradataSQLDCLParser.DYNAMIC, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDCLParser.NODDLTEXT, 0)

        def getRuleIndex(self):
            return TeradataSQLDCLParser.RULE_explain_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_request_modifier" ):
                listener.enterExplain_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_request_modifier" ):
                listener.exitExplain_request_modifier(self)




    def explain_request_modifier(self):

        localctx = TeradataSQLDCLParser.Explain_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_explain_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==938:
                self.state = 6848
                _la = self._input.LA(1)
                if not(_la==128 or _la==938):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6851
            self.match(TeradataSQLDCLParser.EXPLAIN)
            self.state = 6857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 6852
                self.match(TeradataSQLDCLParser.IN)
                self.state = 6853
                self.match(TeradataSQLDCLParser.XML)
                self.state = 6855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 6854
                    self.match(TeradataSQLDCLParser.NODDLTEXT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[106] = self.query_expr_sempred
        self._predicates[186] = self.logical_expr_sempred
        self._predicates[187] = self.scalar_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def query_expr_sempred(self, localctx:Query_exprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def logical_expr_sempred(self, localctx:Logical_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

    def scalar_expr_sempred(self, localctx:Scalar_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 69)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 68)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 67)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 66)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 65)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 60)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 51:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 53:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 55:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 56:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 57:
                return self.precpred(self._ctx, 4)
         




