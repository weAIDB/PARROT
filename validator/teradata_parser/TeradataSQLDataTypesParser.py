# Generated from sql/teradata/TeradataSQLDataTypesParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1233,5989,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,1,0,1,0,1,0,1,0,
        1,0,1,0,3,0,541,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,550,8,1,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,562,8,2,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,3,3,572,8,3,1,3,1,3,3,3,576,8,3,1,3,3,3,579,8,3,
        1,3,1,3,1,3,1,3,1,3,3,3,586,8,3,1,3,1,3,1,3,3,3,591,8,3,1,3,1,3,
        1,3,1,3,3,3,597,8,3,1,3,1,3,3,3,601,8,3,1,3,3,3,604,8,3,3,3,606,
        8,3,1,4,1,4,3,4,610,8,4,1,4,3,4,613,8,4,1,4,1,4,3,4,617,8,4,1,4,
        1,4,1,4,1,4,1,4,3,4,624,8,4,1,4,1,4,3,4,628,8,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,3,4,640,8,4,1,4,3,4,643,8,4,1,4,3,4,646,
        8,4,3,4,648,8,4,1,5,1,5,3,5,652,8,5,1,5,1,5,3,5,656,8,5,3,5,658,
        8,5,1,6,1,6,1,6,1,6,3,6,664,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,672,
        8,6,1,6,1,6,3,6,676,8,6,1,7,1,7,3,7,680,8,7,1,7,1,7,1,7,1,7,1,7,
        1,7,3,7,688,8,7,1,7,3,7,691,8,7,3,7,693,8,7,1,8,1,8,1,8,3,8,698,
        8,8,1,8,3,8,701,8,8,1,8,1,8,3,8,705,8,8,1,8,3,8,708,8,8,1,8,1,8,
        3,8,712,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,722,8,9,1,9,3,9,
        725,8,9,1,9,1,9,1,9,1,9,1,9,3,9,732,8,9,1,9,3,9,735,8,9,1,9,3,9,
        738,8,9,1,10,3,10,741,8,10,1,10,1,10,3,10,745,8,10,1,10,3,10,748,
        8,10,1,10,3,10,751,8,10,1,10,1,10,3,10,755,8,10,1,10,3,10,758,8,
        10,1,10,1,10,3,10,762,8,10,1,10,3,10,765,8,10,1,10,1,10,3,10,769,
        8,10,1,10,3,10,772,8,10,1,10,3,10,775,8,10,1,10,1,10,3,10,779,8,
        10,1,10,3,10,782,8,10,1,10,1,10,3,10,786,8,10,1,10,3,10,789,8,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,799,8,11,1,12,3,12,
        802,8,12,1,12,1,12,1,12,1,12,1,12,3,12,809,8,12,1,13,1,13,1,13,1,
        13,1,13,1,13,3,13,817,8,13,1,14,1,14,3,14,821,8,14,1,15,1,15,1,15,
        1,16,1,16,3,16,828,8,16,1,16,1,16,3,16,832,8,16,1,16,1,16,3,16,836,
        8,16,1,16,1,16,3,16,840,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        3,16,849,8,16,3,16,851,8,16,1,16,1,16,3,16,855,8,16,1,16,1,16,1,
        16,1,16,1,16,3,16,862,8,16,3,16,864,8,16,1,16,1,16,3,16,868,8,16,
        1,16,1,16,1,16,3,16,873,8,16,3,16,875,8,16,1,16,1,16,1,16,1,16,1,
        16,3,16,882,8,16,1,16,1,16,3,16,886,8,16,3,16,888,8,16,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,3,18,897,8,18,1,18,1,18,1,19,1,19,1,19,
        3,19,904,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,22,3,22,
        915,8,22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,923,8,23,1,24,1,24,1,
        24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,947,8,29,1,30,1,30,1,30,3,
        30,952,8,30,3,30,954,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,977,8,33,1,34,1,34,1,35,3,35,982,8,35,1,35,4,35,985,8,35,11,
        35,12,35,986,1,36,3,36,990,8,36,1,36,1,36,5,36,994,8,36,10,36,12,
        36,997,9,36,1,36,1,36,1,36,1,37,3,37,1003,8,37,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,3,42,1016,8,42,1,42,1,42,1,
        43,3,43,1021,8,43,1,43,1,43,1,44,3,44,1026,8,44,1,44,1,44,1,45,1,
        45,3,45,1032,8,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1064,8,46,1,47,1,47,1,
        47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1080,
        8,48,1,49,1,49,1,49,1,49,3,49,1086,8,49,1,50,1,50,3,50,1090,8,50,
        1,51,1,51,1,51,3,51,1095,8,51,1,51,1,51,3,51,1099,8,51,1,52,1,52,
        1,52,3,52,1104,8,52,1,52,1,52,3,52,1108,8,52,1,53,1,53,1,53,3,53,
        1113,8,53,1,53,1,53,3,53,1117,8,53,1,54,1,54,1,54,3,54,1122,8,54,
        1,54,1,54,3,54,1126,8,54,1,55,1,55,1,55,3,55,1131,8,55,1,55,1,55,
        3,55,1135,8,55,1,56,1,56,3,56,1139,8,56,1,57,1,57,3,57,1143,8,57,
        1,58,1,58,1,58,3,58,1148,8,58,1,59,1,59,3,59,1152,8,59,1,60,1,60,
        3,60,1156,8,60,1,61,1,61,3,61,1160,8,61,1,62,1,62,3,62,1164,8,62,
        1,63,1,63,3,63,1168,8,63,1,64,1,64,3,64,1172,8,64,1,65,1,65,3,65,
        1176,8,65,1,66,1,66,3,66,1180,8,66,1,67,1,67,3,67,1184,8,67,1,68,
        1,68,3,68,1188,8,68,1,69,1,69,3,69,1192,8,69,1,70,1,70,3,70,1196,
        8,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1208,
        8,73,1,73,1,73,1,73,3,73,1213,8,73,1,73,5,73,1216,8,73,10,73,12,
        73,1219,9,73,1,74,1,74,3,74,1223,8,74,1,74,3,74,1226,8,74,1,74,1,
        74,1,74,5,74,1231,8,74,10,74,12,74,1234,9,74,1,74,1,74,1,74,1,74,
        1,74,3,74,1241,8,74,1,74,1,74,5,74,1245,8,74,10,74,12,74,1248,9,
        74,1,74,1,74,5,74,1252,8,74,10,74,12,74,1255,9,74,1,74,5,74,1258,
        8,74,10,74,12,74,1261,9,74,1,74,3,74,1264,8,74,1,75,1,75,1,75,1,
        75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,3,77,1277,8,77,1,77,3,77,1280,
        8,77,1,77,1,77,3,77,1284,8,77,1,78,1,78,1,78,1,78,3,78,1290,8,78,
        1,78,3,78,1293,8,78,1,78,1,78,3,78,1297,8,78,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,3,79,1308,8,79,3,79,1310,8,79,1,80,1,80,
        1,80,1,80,1,80,1,80,3,80,1318,8,80,1,80,1,80,1,80,1,81,1,81,1,81,
        1,81,5,81,1327,8,81,10,81,12,81,1330,9,81,3,81,1332,8,81,1,82,1,
        82,3,82,1336,8,82,1,82,3,82,1339,8,82,1,82,1,82,1,82,1,82,3,82,1345,
        8,82,1,83,1,83,1,83,3,83,1350,8,83,1,83,1,83,1,83,3,83,1355,8,83,
        5,83,1357,8,83,10,83,12,83,1360,9,83,1,84,1,84,1,84,1,85,1,85,5,
        85,1367,8,85,10,85,12,85,1370,9,85,1,85,1,85,5,85,1374,8,85,10,85,
        12,85,1377,9,85,1,85,1,85,5,85,1381,8,85,10,85,12,85,1384,9,85,1,
        85,1,85,1,85,1,85,5,85,1390,8,85,10,85,12,85,1393,9,85,3,85,1395,
        8,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1403,8,86,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,3,87,1414,8,87,1,88,1,88,3,88,1418,
        8,88,1,88,1,88,1,89,1,89,3,89,1424,8,89,1,89,1,89,1,90,1,90,1,90,
        3,90,1431,8,90,3,90,1433,8,90,1,90,3,90,1436,8,90,1,90,3,90,1439,
        8,90,1,91,1,91,1,91,3,91,1444,8,91,3,91,1446,8,91,1,91,1,91,1,91,
        5,91,1451,8,91,10,91,12,91,1454,9,91,1,91,1,91,1,91,3,91,1459,8,
        91,3,91,1461,8,91,1,91,1,91,1,91,1,91,1,91,5,91,1468,8,91,10,91,
        12,91,1471,9,91,1,91,1,91,1,91,1,91,5,91,1477,8,91,10,91,12,91,1480,
        9,91,1,91,1,91,1,91,1,91,1,91,1,91,5,91,1488,8,91,10,91,12,91,1491,
        9,91,3,91,1493,8,91,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,4,93,
        1503,8,93,11,93,12,93,1504,3,93,1507,8,93,1,93,1,93,1,93,1,93,1,
        93,1,93,1,93,5,93,1516,8,93,10,93,12,93,1519,9,93,1,93,1,93,3,93,
        1523,8,93,1,93,3,93,1526,8,93,1,93,1,93,1,94,1,94,1,94,1,94,4,94,
        1534,8,94,11,94,12,94,1535,1,94,1,94,3,94,1540,8,94,1,94,1,94,1,
        95,1,95,1,95,1,95,1,95,5,95,1549,8,95,10,95,12,95,1552,9,95,1,95,
        1,95,5,95,1556,8,95,10,95,12,95,1559,9,95,1,95,3,95,1562,8,95,1,
        95,3,95,1565,8,95,1,95,1,95,1,96,1,96,1,96,3,96,1572,8,96,1,96,1,
        96,3,96,1576,8,96,1,97,1,97,4,97,1580,8,97,11,97,12,97,1581,1,98,
        1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,5,99,1594,8,99,10,99,
        12,99,1597,9,99,1,99,1,99,1,100,1,100,1,100,1,101,1,101,1,101,1,
        101,3,101,1608,8,101,1,101,1,101,3,101,1612,8,101,1,101,1,101,3,
        101,1616,8,101,1,102,1,102,1,102,1,102,3,102,1622,8,102,1,102,3,
        102,1625,8,102,1,102,1,102,5,102,1629,8,102,10,102,12,102,1632,9,
        102,1,103,3,103,1635,8,103,1,103,1,103,1,103,1,103,1,103,3,103,1642,
        8,103,1,103,1,103,1,103,1,103,3,103,1648,8,103,1,104,1,104,1,104,
        1,104,1,104,1,104,5,104,1656,8,104,10,104,12,104,1659,9,104,1,104,
        1,104,3,104,1663,8,104,1,105,1,105,1,105,1,105,1,105,1,105,5,105,
        1671,8,105,10,105,12,105,1674,9,105,1,106,1,106,1,106,1,106,1,106,
        5,106,1681,8,106,10,106,12,106,1684,9,106,1,107,1,107,1,107,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,3,107,1696,8,107,1,107,3,107,
        1699,8,107,1,107,1,107,3,107,1703,8,107,1,108,1,108,1,108,3,108,
        1708,8,108,1,108,1,108,3,108,1712,8,108,1,108,3,108,1715,8,108,1,
        108,1,108,1,109,3,109,1720,8,109,1,109,1,109,1,109,1,109,1,109,3,
        109,1727,8,109,1,109,1,109,1,109,1,109,1,109,5,109,1734,8,109,10,
        109,12,109,1737,9,109,3,109,1739,8,109,1,109,1,109,1,109,1,109,1,
        109,1,109,5,109,1747,8,109,10,109,12,109,1750,9,109,3,109,1752,8,
        109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        3,109,1764,8,109,1,109,1,109,1,109,1,109,1,109,3,109,1771,8,109,
        1,109,1,109,1,109,1,109,1,109,3,109,1778,8,109,1,110,1,110,1,110,
        1,110,1,110,3,110,1785,8,110,1,110,1,110,1,110,1,110,5,110,1791,
        8,110,10,110,12,110,1794,9,110,1,110,1,110,1,110,1,111,1,111,1,111,
        1,111,1,111,1,111,1,111,1,111,1,111,5,111,1808,8,111,10,111,12,111,
        1811,9,111,3,111,1813,8,111,1,111,3,111,1816,8,111,1,111,1,111,1,
        111,1,111,1,111,3,111,1823,8,111,1,111,1,111,1,111,1,111,1,111,3,
        111,1830,8,111,1,111,1,111,1,111,1,111,1,111,3,111,1837,8,111,1,
        111,1,111,1,111,1,111,1,111,3,111,1844,8,111,1,111,1,111,1,112,3,
        112,1849,8,112,1,112,1,112,1,112,1,112,1,112,3,112,1856,8,112,1,
        112,1,112,1,112,1,112,1,112,1,112,5,112,1864,8,112,10,112,12,112,
        1867,9,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,5,112,1879,8,112,10,112,12,112,1882,9,112,1,112,1,112,1,112,
        1,112,1,112,1,112,5,112,1890,8,112,10,112,12,112,1893,9,112,1,112,
        1,112,1,112,1,112,1,112,1,112,3,112,1901,8,112,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,5,113,1910,8,113,10,113,12,113,1913,9,113,
        1,113,1,113,1,113,1,114,3,114,1919,8,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,115,3,115,1937,8,115,1,115,1,115,1,115,1,115,1,115,1,115,4,115,
        1945,8,115,11,115,12,115,1946,3,115,1949,8,115,1,115,1,115,1,116,
        3,116,1954,8,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,5,116,1970,8,116,10,116,12,116,
        1973,9,116,1,116,1,116,1,116,1,116,1,116,1,116,5,116,1981,8,116,
        10,116,12,116,1984,9,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,
        1992,8,116,1,116,1,116,1,116,1,116,1,116,3,116,1999,8,116,1,116,
        1,116,1,117,1,117,1,117,5,117,2006,8,117,10,117,12,117,2009,9,117,
        1,117,3,117,2012,8,117,1,117,5,117,2015,8,117,10,117,12,117,2018,
        9,117,1,117,3,117,2021,8,117,1,117,1,117,1,118,1,118,1,118,3,118,
        2028,8,118,1,118,1,118,3,118,2032,8,118,1,118,1,118,3,118,2036,8,
        118,1,118,3,118,2039,8,118,1,118,1,118,1,118,1,118,1,118,5,118,2046,
        8,118,10,118,12,118,2049,9,118,3,118,2051,8,118,1,119,1,119,1,119,
        1,119,1,119,1,119,1,119,1,119,3,119,2061,8,119,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,1,121,1,121,4,121,2072,8,121,11,121,12,121,
        2073,1,122,1,122,1,122,3,122,2079,8,122,1,123,1,123,1,123,1,123,
        1,123,1,124,1,124,1,124,1,124,1,124,5,124,2091,8,124,10,124,12,124,
        2094,9,124,1,124,1,124,1,124,3,124,2099,8,124,1,125,1,125,3,125,
        2103,8,125,1,125,1,125,3,125,2107,8,125,1,126,1,126,1,126,1,126,
        1,126,1,127,1,127,1,127,1,127,3,127,2118,8,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,3,127,2162,8,127,1,128,1,128,
        1,128,1,128,3,128,2168,8,128,1,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,3,128,2217,8,128,
        1,129,1,129,1,129,3,129,2222,8,129,1,129,1,129,1,129,3,129,2227,
        8,129,5,129,2229,8,129,10,129,12,129,2232,9,129,1,129,3,129,2235,
        8,129,1,130,1,130,1,130,1,130,5,130,2241,8,130,10,130,12,130,2244,
        9,130,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,1,133,1,133,
        1,133,1,133,1,133,1,133,1,133,1,133,4,133,2262,8,133,11,133,12,133,
        2263,3,133,2266,8,133,1,134,1,134,1,134,1,134,3,134,2272,8,134,1,
        135,1,135,3,135,2276,8,135,1,135,1,135,1,135,3,135,2281,8,135,5,
        135,2283,8,135,10,135,12,135,2286,9,135,1,136,1,136,1,136,1,136,
        4,136,2292,8,136,11,136,12,136,2293,1,136,1,136,1,137,1,137,1,137,
        1,138,1,138,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,140,
        1,140,1,140,1,140,1,140,1,140,5,140,2317,8,140,10,140,12,140,2320,
        9,140,1,140,1,140,1,141,1,141,1,141,1,141,1,141,3,141,2329,8,141,
        1,142,1,142,1,142,1,143,1,143,1,143,1,144,1,144,1,144,3,144,2340,
        8,144,1,144,1,144,3,144,2344,8,144,1,144,1,144,1,144,3,144,2349,
        8,144,1,145,1,145,1,145,5,145,2354,8,145,10,145,12,145,2357,9,145,
        1,146,1,146,1,146,5,146,2362,8,146,10,146,12,146,2365,9,146,1,147,
        1,147,1,147,1,147,1,147,3,147,2372,8,147,4,147,2374,8,147,11,147,
        12,147,2375,1,147,1,147,1,147,3,147,2381,8,147,3,147,2383,8,147,
        1,147,1,147,1,148,1,148,1,148,1,148,3,148,2391,8,148,1,148,1,148,
        1,148,1,148,1,148,3,148,2398,8,148,1,148,1,148,1,148,3,148,2403,
        8,148,3,148,2405,8,148,3,148,2407,8,148,1,148,1,148,3,148,2411,8,
        148,1,149,1,149,1,149,1,149,1,149,5,149,2418,8,149,10,149,12,149,
        2421,9,149,1,150,1,150,3,150,2425,8,150,1,150,1,150,3,150,2429,8,
        150,1,151,1,151,3,151,2433,8,151,1,152,1,152,1,152,1,152,1,153,1,
        153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,5,153,2449,8,
        153,10,153,12,153,2452,9,153,1,153,1,153,1,153,1,153,1,153,5,153,
        2459,8,153,10,153,12,153,2462,9,153,1,153,1,153,3,153,2466,8,153,
        1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,2475,8,153,1,153,
        3,153,2478,8,153,1,153,1,153,3,153,2482,8,153,1,153,1,153,5,153,
        2486,8,153,10,153,12,153,2489,9,153,1,153,1,153,3,153,2493,8,153,
        1,153,3,153,2496,8,153,1,153,1,153,3,153,2500,8,153,1,153,1,153,
        5,153,2504,8,153,10,153,12,153,2507,9,153,1,153,1,153,3,153,2511,
        8,153,1,153,3,153,2514,8,153,1,153,1,153,3,153,2518,8,153,1,153,
        1,153,5,153,2522,8,153,10,153,12,153,2525,9,153,1,153,1,153,3,153,
        2529,8,153,1,153,3,153,2532,8,153,1,153,1,153,3,153,2536,8,153,1,
        153,1,153,5,153,2540,8,153,10,153,12,153,2543,9,153,1,153,1,153,
        3,153,2547,8,153,1,153,1,153,1,153,1,153,3,153,2553,8,153,1,153,
        1,153,3,153,2557,8,153,1,153,1,153,1,153,1,153,5,153,2563,8,153,
        10,153,12,153,2566,9,153,1,153,1,153,3,153,2570,8,153,1,153,5,153,
        2573,8,153,10,153,12,153,2576,9,153,1,153,1,153,3,153,2580,8,153,
        1,153,1,153,1,153,1,153,5,153,2586,8,153,10,153,12,153,2589,9,153,
        1,153,1,153,3,153,2593,8,153,1,153,5,153,2596,8,153,10,153,12,153,
        2599,9,153,1,153,3,153,2602,8,153,1,153,1,153,1,153,1,153,1,153,
        1,153,1,153,3,153,2611,8,153,1,153,1,153,1,153,1,153,3,153,2617,
        8,153,1,153,1,153,1,153,1,153,1,153,3,153,2624,8,153,1,153,1,153,
        1,153,1,153,1,153,3,153,2631,8,153,1,153,1,153,1,153,1,153,1,153,
        3,153,2638,8,153,1,153,1,153,1,153,1,153,1,153,3,153,2645,8,153,
        1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
        1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,
        2668,8,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,
        3,153,2679,8,153,1,153,1,153,1,153,1,153,3,153,2685,8,153,1,153,
        1,153,1,153,1,153,1,153,1,153,5,153,2693,8,153,10,153,12,153,2696,
        9,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,3,154,2711,8,154,1,154,1,154,1,154,1,154,1,154,
        5,154,2718,8,154,10,154,12,154,2721,9,154,3,154,2723,8,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,2733,8,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,3,154,2742,8,154,1,154,3,154,
        2745,8,154,1,154,1,154,1,154,3,154,2750,8,154,1,154,3,154,2753,8,
        154,5,154,2755,8,154,10,154,12,154,2758,9,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        3,154,2774,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        4,154,2806,8,154,11,154,12,154,2807,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,3,154,2827,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,3,154,2861,8,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,3,154,2870,8,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,2885,8,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,3,154,2955,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,2995,
        8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,5,154,3016,
        8,154,10,154,12,154,3019,9,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,3,154,3028,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,3,154,3038,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,3,154,3049,8,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,3,154,3060,8,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,3,154,3069,8,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,3,154,3079,8,154,3,154,3081,8,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,3,154,3100,8,154,3,154,3102,8,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,3114,8,154,
        3,154,3116,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,3,154,3130,8,154,3,154,3132,8,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,3,154,3158,8,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
        1,154,5,154,3168,8,154,10,154,12,154,3171,9,154,3,154,3173,8,154,
        1,154,1,154,1,154,1,154,5,154,3179,8,154,10,154,12,154,3182,9,154,
        1,155,1,155,1,155,1,155,4,155,3188,8,155,11,155,12,155,3189,1,155,
        1,155,1,156,1,156,3,156,3196,8,156,1,156,3,156,3199,8,156,1,156,
        1,156,1,156,3,156,3204,8,156,1,156,1,156,1,156,3,156,3209,8,156,
        1,157,1,157,1,157,1,157,3,157,3215,8,157,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,4,158,3224,8,158,11,158,12,158,3225,1,158,1,158,
        3,158,3230,8,158,1,158,1,158,1,159,1,159,1,159,1,159,1,159,1,159,
        4,159,3240,8,159,11,159,12,159,3241,1,159,1,159,3,159,3246,8,159,
        1,159,1,159,1,160,1,160,1,160,1,161,1,161,1,161,1,161,1,161,1,161,
        1,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        3,162,3270,8,162,1,163,1,163,1,163,1,163,1,163,1,164,1,164,1,164,
        1,164,1,164,3,164,3282,8,164,1,164,1,164,3,164,3286,8,164,1,164,
        1,164,1,164,1,164,1,164,1,164,3,164,3294,8,164,3,164,3296,8,164,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
        1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
        3,165,3320,8,165,1,166,1,166,1,166,3,166,3325,8,166,1,166,1,166,
        1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,3,166,3341,8,166,1,166,3,166,3344,8,166,1,166,1,166,1,166,
        1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,3357,8,166,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,3,167,3377,8,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,4,167,3386,8,167,11,167,12,167,
        3387,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        3,167,3400,8,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,3,167,
        3409,8,167,1,167,1,167,1,167,1,167,3,167,3415,8,167,3,167,3417,8,
        167,1,167,1,167,3,167,3421,8,167,1,167,1,167,1,167,1,167,1,167,1,
        167,1,167,1,167,1,167,4,167,3432,8,167,11,167,12,167,3433,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,5,167,3464,8,167,10,167,12,167,3467,
        9,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,4,167,3476,8,167,
        11,167,12,167,3477,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,5,167,3491,8,167,10,167,12,167,3494,9,167,1,167,
        1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
        3,167,3508,8,167,1,168,1,168,1,168,1,168,1,168,1,168,3,168,3516,
        8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,3,168,3531,8,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,3,168,3541,8,168,1,168,1,168,1,168,1,168,1,168,
        3,168,3548,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,168,3,168,3564,8,168,1,169,3,169,
        3567,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,3576,
        8,169,3,169,3578,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,5,169,3589,8,169,10,169,12,169,3592,9,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,5,169,3603,8,169,10,169,
        12,169,3606,9,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,5,169,3617,8,169,10,169,12,169,3620,9,169,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,5,169,3631,8,169,10,169,12,169,
        3634,9,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,5,169,3643,
        8,169,10,169,12,169,3646,9,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,5,169,3655,8,169,10,169,12,169,3658,9,169,1,169,1,169,1,169,
        1,169,4,169,3664,8,169,11,169,12,169,3665,3,169,3668,8,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,4,169,3686,8,169,11,169,12,169,3687,1,169,
        1,169,1,169,3,169,3693,8,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,4,169,3704,8,169,11,169,12,169,3705,1,169,1,169,
        3,169,3710,8,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,4,169,3723,8,169,11,169,12,169,3724,1,169,1,169,
        3,169,3729,8,169,1,169,1,169,1,169,3,169,3734,8,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,3,169,3744,8,169,1,169,1,169,
        1,169,1,169,1,169,1,169,3,169,3752,8,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,3,169,3761,8,169,3,169,3763,8,169,1,169,1,169,
        1,169,3,169,3768,8,169,1,169,1,169,1,169,1,169,1,169,3,169,3775,
        8,169,1,169,1,169,3,169,3779,8,169,1,170,1,170,1,170,1,170,1,170,
        3,170,3786,8,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,3,170,3805,
        8,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        3,170,3817,8,170,1,170,1,170,3,170,3821,8,170,1,171,3,171,3824,8,
        171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3832,8,171,1,171,1,
        171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3842,8,171,1,171,1,
        171,1,171,1,171,1,171,3,171,3849,8,171,1,171,1,171,1,171,3,171,3854,
        8,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3863,8,171,
        1,171,1,171,1,171,3,171,3868,8,171,1,171,1,171,1,171,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,3,171,3880,8,171,1,171,1,171,1,171,
        1,171,1,171,3,171,3887,8,171,1,172,1,172,1,172,1,172,3,172,3893,
        8,172,1,172,1,172,1,172,3,172,3898,8,172,1,172,3,172,3901,8,172,
        1,172,1,172,1,172,3,172,3906,8,172,1,172,1,172,1,172,3,172,3911,
        8,172,1,172,3,172,3914,8,172,1,172,1,172,3,172,3918,8,172,1,172,
        3,172,3921,8,172,1,172,1,172,1,172,1,172,3,172,3927,8,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,3,172,3938,8,172,
        1,172,1,172,3,172,3942,8,172,1,172,3,172,3945,8,172,1,173,3,173,
        3948,8,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,3956,8,173,
        1,173,1,173,1,173,1,173,3,173,3962,8,173,1,173,1,173,3,173,3966,
        8,173,1,173,1,173,3,173,3970,8,173,1,174,3,174,3973,8,174,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,
        3,174,3987,8,174,1,174,1,174,1,174,1,174,1,174,4,174,3994,8,174,
        11,174,12,174,3995,1,174,1,174,3,174,4000,8,174,1,175,3,175,4003,
        8,175,1,175,1,175,1,175,1,175,1,175,1,176,1,176,1,176,1,176,1,176,
        1,176,5,176,4016,8,176,10,176,12,176,4019,9,176,1,176,4,176,4022,
        8,176,11,176,12,176,4023,3,176,4026,8,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,3,176,4038,8,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,3,176,4048,8,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,3,176,4058,8,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,3,176,4068,8,176,3,176,4070,
        8,176,3,176,4072,8,176,1,176,1,176,1,176,3,176,4077,8,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,4087,8,176,3,176,
        4089,8,176,3,176,4091,8,176,1,176,1,176,1,176,3,176,4096,8,176,1,
        176,1,176,1,176,1,176,1,176,1,176,3,176,4104,8,176,1,176,1,176,1,
        176,3,176,4109,8,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,4117,
        8,176,3,176,4119,8,176,1,176,1,176,1,176,3,176,4124,8,176,1,176,
        1,176,1,176,1,176,1,176,1,176,3,176,4132,8,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,3,176,4141,8,176,1,177,1,177,1,177,1,177,
        1,177,1,177,3,177,4149,8,177,1,177,1,177,1,177,1,177,1,177,1,177,
        3,177,4157,8,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
        3,177,4167,8,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
        3,177,4177,8,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,1,177,1,177,1,177,1,177,3,177,4193,8,177,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,5,178,4216,8,178,
        10,178,12,178,4219,9,178,1,178,1,178,3,178,4223,8,178,1,179,3,179,
        4226,8,179,1,179,1,179,1,179,1,179,1,180,3,180,4233,8,180,1,180,
        1,180,1,180,1,180,1,180,1,180,3,180,4241,8,180,1,180,1,180,1,180,
        1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
        1,180,1,180,3,180,4259,8,180,1,180,1,180,1,180,1,180,1,180,1,180,
        1,180,3,180,4268,8,180,1,181,3,181,4271,8,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,3,181,4281,8,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,3,181,4292,8,181,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,3,182,4310,8,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,4335,8,182,1,183,
        3,183,4338,8,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,3,183,4352,8,183,1,183,1,183,1,183,3,183,
        4357,8,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,3,183,4373,8,183,1,183,1,183,1,183,
        3,183,4378,8,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,183,3,183,4394,8,183,1,183,1,183,
        1,183,3,183,4399,8,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
        3,183,4408,8,183,1,183,1,183,1,183,3,183,4413,8,183,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,4426,
        8,183,1,184,3,184,4429,8,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        5,184,4448,8,184,10,184,12,184,4451,9,184,1,184,1,184,1,184,3,184,
        4456,8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        5,184,4467,8,184,10,184,12,184,4470,9,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,3,184,4480,8,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,3,184,4492,8,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,3,184,4508,8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,3,184,4520,8,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,3,184,4531,8,184,3,184,4533,8,184,1,184,
        1,184,1,184,3,184,4538,8,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,4554,8,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,4564,8,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,4573,8,184,1,184,
        1,184,1,184,3,184,4578,8,184,1,184,1,184,1,184,1,184,1,184,3,184,
        4585,8,184,1,184,1,184,1,184,3,184,4590,8,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,3,184,4601,8,184,1,184,1,184,
        1,184,3,184,4606,8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,3,184,4619,8,184,3,184,4621,8,184,3,184,
        4623,8,184,1,184,1,184,1,184,3,184,4628,8,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,3,184,4637,8,184,1,184,1,184,1,184,3,184,
        4642,8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,4661,8,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,4670,8,184,3,184,
        4672,8,184,1,184,1,184,1,184,3,184,4677,8,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,
        4703,8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        3,184,4714,8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,3,184,4725,8,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,
        4733,8,184,1,184,3,184,4736,8,184,1,184,1,184,1,184,3,184,4741,8,
        184,1,185,3,185,4744,8,185,1,185,1,185,1,185,1,185,1,185,3,185,4751,
        8,185,1,185,3,185,4754,8,185,1,185,1,185,1,185,1,185,1,185,3,185,
        4761,8,185,1,185,1,185,1,185,3,185,4766,8,185,1,185,1,185,1,185,
        1,185,1,185,1,185,3,185,4774,8,185,1,185,1,185,1,185,1,185,1,185,
        3,185,4781,8,185,1,185,1,185,3,185,4785,8,185,1,185,3,185,4788,8,
        185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,4798,8,
        185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,
        4820,8,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        3,185,4831,8,185,3,185,4833,8,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,5,185,4842,8,185,10,185,12,185,4845,9,185,1,185,1,185,
        3,185,4849,8,185,1,185,1,185,1,185,1,185,1,185,5,185,4856,8,185,
        10,185,12,185,4859,9,185,1,185,1,185,3,185,4863,8,185,3,185,4865,
        8,185,1,186,1,186,1,186,1,186,1,186,1,186,3,186,4873,8,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,4884,8,186,
        1,186,3,186,4887,8,186,1,186,3,186,4890,8,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,3,186,4900,8,186,1,186,3,186,4903,
        8,186,1,186,1,186,3,186,4907,8,186,1,186,3,186,4910,8,186,1,186,
        1,186,3,186,4914,8,186,1,186,1,186,3,186,4918,8,186,1,186,1,186,
        1,186,1,186,1,186,1,186,3,186,4926,8,186,1,186,1,186,1,186,1,186,
        1,186,1,186,3,186,4934,8,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,3,186,4944,8,186,1,186,1,186,3,186,4948,8,186,1,186,
        1,186,3,186,4952,8,186,1,186,3,186,4955,8,186,1,186,1,186,1,186,
        1,186,1,186,3,186,4962,8,186,1,186,1,186,1,186,5,186,4967,8,186,
        10,186,12,186,4970,9,186,3,186,4972,8,186,1,186,3,186,4975,8,186,
        1,186,3,186,4978,8,186,1,186,1,186,1,186,1,186,1,186,1,186,5,186,
        4986,8,186,10,186,12,186,4989,9,186,1,186,3,186,4992,8,186,1,186,
        1,186,1,186,1,186,1,186,1,186,3,186,5000,8,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,3,186,5010,8,186,1,186,3,186,5013,
        8,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,5021,8,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        3,186,5046,8,186,1,186,1,186,3,186,5050,8,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,5,186,5062,8,186,10,186,
        12,186,5065,9,186,3,186,5067,8,186,1,186,3,186,5070,8,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,5,186,5085,8,186,10,186,12,186,5088,9,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,
        5114,8,186,1,187,1,187,1,187,1,187,1,187,5,187,5121,8,187,10,187,
        12,187,5124,9,187,1,187,1,187,1,187,3,187,5129,8,187,1,187,1,187,
        1,187,1,187,1,187,3,187,5136,8,187,3,187,5138,8,187,1,188,1,188,
        1,188,1,188,1,188,5,188,5145,8,188,10,188,12,188,5148,9,188,1,188,
        1,188,3,188,5152,8,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,1,188,3,188,5163,8,188,1,188,1,188,3,188,5167,8,188,1,189,
        1,189,1,189,1,190,1,190,1,190,1,191,1,191,1,191,1,192,1,192,1,192,
        1,193,1,193,1,194,1,194,1,194,1,194,5,194,5187,8,194,10,194,12,194,
        5190,9,194,1,194,1,194,1,195,1,195,1,195,1,195,1,195,3,195,5199,
        8,195,1,196,1,196,1,196,1,196,3,196,5205,8,196,1,197,1,197,1,197,
        1,197,5,197,5211,8,197,10,197,12,197,5214,9,197,1,197,1,197,1,197,
        1,197,3,197,5220,8,197,5,197,5222,8,197,10,197,12,197,5225,9,197,
        1,197,1,197,1,198,1,198,1,198,3,198,5232,8,198,1,199,1,199,1,199,
        1,199,3,199,5238,8,199,1,199,3,199,5241,8,199,1,200,1,200,1,200,
        3,200,5246,8,200,1,201,1,201,1,201,1,201,3,201,5252,8,201,3,201,
        5254,8,201,1,201,1,201,5,201,5258,8,201,10,201,12,201,5261,9,201,
        1,201,1,201,1,201,1,202,1,202,1,202,1,202,3,202,5270,8,202,1,202,
        1,202,3,202,5274,8,202,1,203,1,203,1,203,1,203,3,203,5280,8,203,
        1,204,1,204,1,204,1,204,1,204,1,204,3,204,5288,8,204,1,205,1,205,
        1,205,1,205,3,205,5294,8,205,1,205,3,205,5297,8,205,1,206,1,206,
        1,206,1,206,1,206,1,206,1,206,1,206,1,206,3,206,5308,8,206,1,206,
        1,206,1,206,1,206,1,206,1,206,1,206,1,206,3,206,5318,8,206,1,207,
        1,207,1,207,3,207,5323,8,207,1,207,3,207,5326,8,207,1,207,3,207,
        5329,8,207,1,207,1,207,1,208,1,208,1,208,3,208,5336,8,208,1,208,
        1,208,1,208,1,209,1,209,1,209,3,209,5344,8,209,1,209,1,209,3,209,
        5348,8,209,1,209,1,209,1,210,1,210,1,210,1,210,1,210,5,210,5357,
        8,210,10,210,12,210,5360,9,210,1,211,1,211,1,211,1,211,1,211,5,211,
        5367,8,211,10,211,12,211,5370,9,211,1,211,1,211,1,211,3,211,5375,
        8,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,
        1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,5460,8,212,3,212,
        5462,8,212,1,213,1,213,1,213,1,213,1,213,3,213,5469,8,213,1,213,
        1,213,3,213,5473,8,213,1,214,1,214,1,214,3,214,5478,8,214,1,214,
        1,214,1,214,1,214,5,214,5484,8,214,10,214,12,214,5487,9,214,3,214,
        5489,8,214,1,215,1,215,1,215,1,215,1,216,1,216,1,216,1,216,1,216,
        5,216,5500,8,216,10,216,12,216,5503,9,216,1,216,1,216,1,217,1,217,
        1,217,3,217,5510,8,217,1,218,1,218,1,218,3,218,5515,8,218,1,219,
        1,219,3,219,5519,8,219,1,220,1,220,1,220,1,220,1,220,5,220,5526,
        8,220,10,220,12,220,5529,9,220,1,220,1,220,1,221,1,221,1,221,1,221,
        1,221,1,221,1,221,1,221,3,221,5541,8,221,1,222,1,222,1,222,1,222,
        1,222,1,222,3,222,5549,8,222,1,222,1,222,1,222,1,222,1,222,1,222,
        3,222,5557,8,222,5,222,5559,8,222,10,222,12,222,5562,9,222,1,223,
        1,223,1,223,1,223,3,223,5568,8,223,1,223,1,223,3,223,5572,8,223,
        1,224,1,224,1,224,1,225,1,225,1,225,1,225,1,226,1,226,1,226,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,5592,8,227,1,228,
        1,228,1,228,1,229,1,229,1,230,1,230,1,230,1,230,1,231,1,231,1,231,
        1,231,1,231,3,231,5608,8,231,1,231,3,231,5611,8,231,1,231,1,231,
        3,231,5615,8,231,1,232,1,232,1,232,5,232,5620,8,232,10,232,12,232,
        5623,9,232,1,232,1,232,1,232,1,233,1,233,1,233,1,233,5,233,5632,
        8,233,10,233,12,233,5635,9,233,1,234,1,234,3,234,5639,8,234,1,234,
        3,234,5642,8,234,1,235,1,235,1,235,1,235,1,235,1,235,5,235,5650,
        8,235,10,235,12,235,5653,9,235,1,235,1,235,1,235,1,235,1,235,1,235,
        1,235,1,235,5,235,5663,8,235,10,235,12,235,5666,9,235,1,235,1,235,
        1,235,1,235,1,235,1,235,1,235,1,235,5,235,5676,8,235,10,235,12,235,
        5679,9,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,5687,8,235,
        1,236,1,236,3,236,5691,8,236,1,236,1,236,1,237,1,237,3,237,5697,
        8,237,1,237,3,237,5700,8,237,1,238,1,238,3,238,5704,8,238,1,238,
        1,238,1,239,1,239,1,239,3,239,5711,8,239,1,239,1,239,1,239,1,239,
        3,239,5717,8,239,1,239,1,239,3,239,5721,8,239,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,5,240,5731,8,240,10,240,12,240,5734,
        9,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        5,240,5746,8,240,10,240,12,240,5749,9,240,1,240,1,240,3,240,5753,
        8,240,1,241,1,241,3,241,5757,8,241,1,241,3,241,5760,8,241,1,242,
        1,242,3,242,5764,8,242,1,242,3,242,5767,8,242,1,243,1,243,1,243,
        1,243,3,243,5773,8,243,1,243,3,243,5776,8,243,1,244,1,244,3,244,
        5780,8,244,1,245,1,245,1,245,1,245,5,245,5786,8,245,10,245,12,245,
        5789,9,245,1,245,1,245,1,246,1,246,1,246,1,246,5,246,5797,8,246,
        10,246,12,246,5800,9,246,1,246,1,246,1,247,1,247,1,247,1,247,5,247,
        5808,8,247,10,247,12,247,5811,9,247,1,247,1,247,1,248,1,248,3,248,
        5817,8,248,1,248,1,248,1,248,1,249,1,249,1,249,1,250,1,250,1,250,
        1,251,1,251,1,251,1,251,1,252,1,252,1,252,1,253,1,253,1,253,1,253,
        1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,
        1,254,1,254,1,254,1,254,1,254,1,254,3,254,5856,8,254,1,255,1,255,
        1,256,1,256,1,256,1,256,3,256,5864,8,256,1,257,4,257,5867,8,257,
        11,257,12,257,5868,1,258,1,258,3,258,5873,8,258,1,258,1,258,3,258,
        5877,8,258,1,258,1,258,3,258,5881,8,258,1,258,1,258,3,258,5885,8,
        258,1,258,3,258,5888,8,258,1,258,1,258,3,258,5892,8,258,1,258,3,
        258,5895,8,258,1,259,1,259,1,259,1,259,1,259,3,259,5902,8,259,1,
        259,1,259,1,259,1,259,3,259,5908,8,259,1,260,1,260,1,260,1,260,5,
        260,5914,8,260,10,260,12,260,5917,9,260,1,261,1,261,3,261,5921,8,
        261,1,262,1,262,3,262,5925,8,262,1,262,1,262,1,262,1,263,1,263,1,
        263,3,263,5933,8,263,1,263,1,263,1,263,1,263,1,263,1,263,4,263,5941,
        8,263,11,263,12,263,5942,1,263,1,263,1,264,1,264,1,264,1,264,1,264,
        5,264,5952,8,264,10,264,12,264,5955,9,264,1,264,1,264,1,265,1,265,
        1,265,5,265,5962,8,265,10,265,12,265,5965,9,265,1,265,1,265,1,265,
        1,265,3,265,5971,8,265,1,265,3,265,5974,8,265,3,265,5976,8,265,1,
        266,3,266,5979,8,266,1,266,1,266,1,266,1,266,3,266,5985,8,266,3,
        266,5987,8,266,1,266,1,1504,3,146,306,308,267,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
        294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
        326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
        358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
        390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,
        422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,
        454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,
        486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,
        518,520,522,524,526,528,530,532,0,94,2,0,108,109,278,278,2,0,52,
        52,55,55,2,0,1042,1042,1059,1059,1,0,1221,1222,3,0,681,681,723,723,
        752,752,2,0,723,723,752,752,4,0,173,173,725,725,735,735,1015,1015,
        2,0,438,438,455,455,2,0,272,272,1211,1211,2,0,49,49,88,88,2,0,735,
        735,1015,1015,2,0,556,556,1010,1010,1,0,1069,1072,2,0,1198,1200,
        1203,1203,12,0,106,106,506,509,678,678,774,774,778,779,863,864,904,
        904,949,949,985,985,1009,1009,1026,1028,1061,1062,1,0,488,1192,4,
        0,142,142,204,204,247,247,447,447,1,0,369,370,3,0,165,165,219,219,
        355,355,1,0,1185,1186,2,0,178,178,840,840,2,0,21,21,116,116,2,0,
        156,156,731,731,4,0,556,556,735,735,1010,1010,1015,1015,1,0,1219,
        1220,1,0,1217,1218,2,0,736,736,876,876,3,0,520,521,523,525,530,530,
        4,0,513,513,519,519,528,529,531,531,3,0,515,515,526,527,532,532,
        3,0,817,817,823,823,825,825,3,0,815,816,819,820,822,822,6,0,106,
        106,185,185,248,248,258,258,368,368,478,478,4,0,185,185,248,248,
        258,258,368,368,9,0,30,32,213,213,238,239,244,244,246,246,380,380,
        396,397,403,403,461,462,2,0,13,13,121,121,3,0,80,80,84,85,327,335,
        3,0,13,13,121,121,448,448,7,0,30,32,238,239,244,244,246,246,396,
        397,403,403,461,462,3,0,301,301,603,603,630,630,2,0,673,673,734,
        734,2,0,730,730,737,737,3,0,237,237,241,241,260,260,1,0,851,852,
        16,0,3,3,6,7,22,23,25,25,27,27,81,82,113,113,147,147,222,222,228,
        228,276,276,318,318,378,379,390,390,407,408,479,479,3,0,565,566,
        674,674,926,926,3,0,26,26,251,251,319,319,2,0,894,894,1006,1006,
        2,0,815,816,819,820,2,0,43,43,45,45,3,0,52,53,55,58,240,240,3,0,
        161,161,425,425,437,437,5,0,547,547,549,550,682,682,892,893,924,
        925,3,0,957,960,966,970,972,976,5,0,612,616,783,785,867,868,1033,
        1036,1064,1064,2,0,689,689,738,738,6,0,561,562,620,621,748,751,964,
        965,1003,1004,1141,1144,1,0,997,998,2,0,995,995,999,999,1,0,808,
        809,7,0,185,185,248,248,258,258,368,368,478,478,1076,1076,1099,1099,
        2,0,9,9,814,814,7,0,106,106,185,185,248,248,258,258,368,368,423,
        424,478,478,1,0,179,180,1,0,650,651,1,0,450,451,5,0,535,535,572,
        572,708,708,739,739,1084,1084,4,0,54,54,383,383,399,399,465,465,
        2,0,219,219,355,355,3,0,233,233,454,454,1011,1011,2,0,746,746,898,
        898,2,0,747,747,899,899,2,0,159,159,1208,1208,1,0,401,402,1,0,433,
        434,3,0,39,39,217,217,429,429,2,0,593,593,636,636,2,0,661,661,701,
        701,2,0,307,307,942,942,3,0,593,593,636,636,914,914,1,0,1104,1107,
        2,0,290,290,1208,1208,2,0,274,274,649,649,2,0,593,593,914,914,4,
        0,274,274,489,489,649,649,794,794,2,0,697,697,885,885,4,0,32,32,
        629,629,690,690,745,745,2,0,660,660,700,700,2,0,1207,1207,1210,1210,
        3,0,13,13,18,18,382,382,1,0,226,227,2,0,159,159,190,190,2,0,659,
        659,662,662,2,0,128,128,938,938,6866,0,540,1,0,0,0,2,549,1,0,0,0,
        4,561,1,0,0,0,6,605,1,0,0,0,8,647,1,0,0,0,10,657,1,0,0,0,12,675,
        1,0,0,0,14,692,1,0,0,0,16,711,1,0,0,0,18,737,1,0,0,0,20,788,1,0,
        0,0,22,798,1,0,0,0,24,808,1,0,0,0,26,816,1,0,0,0,28,820,1,0,0,0,
        30,822,1,0,0,0,32,887,1,0,0,0,34,889,1,0,0,0,36,893,1,0,0,0,38,900,
        1,0,0,0,40,907,1,0,0,0,42,911,1,0,0,0,44,914,1,0,0,0,46,918,1,0,
        0,0,48,924,1,0,0,0,50,927,1,0,0,0,52,930,1,0,0,0,54,934,1,0,0,0,
        56,938,1,0,0,0,58,942,1,0,0,0,60,953,1,0,0,0,62,955,1,0,0,0,64,959,
        1,0,0,0,66,976,1,0,0,0,68,978,1,0,0,0,70,981,1,0,0,0,72,989,1,0,
        0,0,74,1002,1,0,0,0,76,1006,1,0,0,0,78,1008,1,0,0,0,80,1010,1,0,
        0,0,82,1012,1,0,0,0,84,1015,1,0,0,0,86,1020,1,0,0,0,88,1025,1,0,
        0,0,90,1029,1,0,0,0,92,1063,1,0,0,0,94,1065,1,0,0,0,96,1079,1,0,
        0,0,98,1085,1,0,0,0,100,1089,1,0,0,0,102,1094,1,0,0,0,104,1103,1,
        0,0,0,106,1112,1,0,0,0,108,1121,1,0,0,0,110,1130,1,0,0,0,112,1138,
        1,0,0,0,114,1142,1,0,0,0,116,1147,1,0,0,0,118,1151,1,0,0,0,120,1155,
        1,0,0,0,122,1159,1,0,0,0,124,1163,1,0,0,0,126,1167,1,0,0,0,128,1171,
        1,0,0,0,130,1175,1,0,0,0,132,1179,1,0,0,0,134,1183,1,0,0,0,136,1187,
        1,0,0,0,138,1191,1,0,0,0,140,1195,1,0,0,0,142,1197,1,0,0,0,144,1199,
        1,0,0,0,146,1207,1,0,0,0,148,1220,1,0,0,0,150,1265,1,0,0,0,152,1269,
        1,0,0,0,154,1283,1,0,0,0,156,1285,1,0,0,0,158,1298,1,0,0,0,160,1317,
        1,0,0,0,162,1331,1,0,0,0,164,1344,1,0,0,0,166,1346,1,0,0,0,168,1361,
        1,0,0,0,170,1394,1,0,0,0,172,1402,1,0,0,0,174,1413,1,0,0,0,176,1417,
        1,0,0,0,178,1423,1,0,0,0,180,1427,1,0,0,0,182,1492,1,0,0,0,184,1494,
        1,0,0,0,186,1497,1,0,0,0,188,1529,1,0,0,0,190,1543,1,0,0,0,192,1575,
        1,0,0,0,194,1577,1,0,0,0,196,1583,1,0,0,0,198,1588,1,0,0,0,200,1600,
        1,0,0,0,202,1603,1,0,0,0,204,1617,1,0,0,0,206,1634,1,0,0,0,208,1649,
        1,0,0,0,210,1664,1,0,0,0,212,1675,1,0,0,0,214,1695,1,0,0,0,216,1704,
        1,0,0,0,218,1719,1,0,0,0,220,1779,1,0,0,0,222,1798,1,0,0,0,224,1848,
        1,0,0,0,226,1902,1,0,0,0,228,1918,1,0,0,0,230,1936,1,0,0,0,232,1953,
        1,0,0,0,234,2002,1,0,0,0,236,2024,1,0,0,0,238,2052,1,0,0,0,240,2062,
        1,0,0,0,242,2069,1,0,0,0,244,2075,1,0,0,0,246,2080,1,0,0,0,248,2098,
        1,0,0,0,250,2100,1,0,0,0,252,2108,1,0,0,0,254,2161,1,0,0,0,256,2216,
        1,0,0,0,258,2218,1,0,0,0,260,2236,1,0,0,0,262,2245,1,0,0,0,264,2250,
        1,0,0,0,266,2265,1,0,0,0,268,2271,1,0,0,0,270,2275,1,0,0,0,272,2287,
        1,0,0,0,274,2297,1,0,0,0,276,2300,1,0,0,0,278,2305,1,0,0,0,280,2310,
        1,0,0,0,282,2328,1,0,0,0,284,2330,1,0,0,0,286,2333,1,0,0,0,288,2336,
        1,0,0,0,290,2350,1,0,0,0,292,2358,1,0,0,0,294,2373,1,0,0,0,296,2386,
        1,0,0,0,298,2412,1,0,0,0,300,2422,1,0,0,0,302,2430,1,0,0,0,304,2434,
        1,0,0,0,306,2684,1,0,0,0,308,2773,1,0,0,0,310,3183,1,0,0,0,312,3208,
        1,0,0,0,314,3214,1,0,0,0,316,3216,1,0,0,0,318,3233,1,0,0,0,320,3249,
        1,0,0,0,322,3252,1,0,0,0,324,3269,1,0,0,0,326,3271,1,0,0,0,328,3276,
        1,0,0,0,330,3319,1,0,0,0,332,3356,1,0,0,0,334,3507,1,0,0,0,336,3563,
        1,0,0,0,338,3778,1,0,0,0,340,3820,1,0,0,0,342,3886,1,0,0,0,344,3944,
        1,0,0,0,346,3969,1,0,0,0,348,3999,1,0,0,0,350,4002,1,0,0,0,352,4140,
        1,0,0,0,354,4192,1,0,0,0,356,4222,1,0,0,0,358,4225,1,0,0,0,360,4267,
        1,0,0,0,362,4291,1,0,0,0,364,4334,1,0,0,0,366,4425,1,0,0,0,368,4740,
        1,0,0,0,370,4864,1,0,0,0,372,5113,1,0,0,0,374,5137,1,0,0,0,376,5166,
        1,0,0,0,378,5168,1,0,0,0,380,5171,1,0,0,0,382,5174,1,0,0,0,384,5177,
        1,0,0,0,386,5180,1,0,0,0,388,5182,1,0,0,0,390,5198,1,0,0,0,392,5204,
        1,0,0,0,394,5206,1,0,0,0,396,5231,1,0,0,0,398,5240,1,0,0,0,400,5245,
        1,0,0,0,402,5253,1,0,0,0,404,5265,1,0,0,0,406,5275,1,0,0,0,408,5281,
        1,0,0,0,410,5296,1,0,0,0,412,5317,1,0,0,0,414,5319,1,0,0,0,416,5332,
        1,0,0,0,418,5340,1,0,0,0,420,5351,1,0,0,0,422,5361,1,0,0,0,424,5376,
        1,0,0,0,426,5463,1,0,0,0,428,5474,1,0,0,0,430,5490,1,0,0,0,432,5494,
        1,0,0,0,434,5506,1,0,0,0,436,5511,1,0,0,0,438,5516,1,0,0,0,440,5520,
        1,0,0,0,442,5540,1,0,0,0,444,5542,1,0,0,0,446,5563,1,0,0,0,448,5573,
        1,0,0,0,450,5576,1,0,0,0,452,5580,1,0,0,0,454,5583,1,0,0,0,456,5593,
        1,0,0,0,458,5596,1,0,0,0,460,5598,1,0,0,0,462,5602,1,0,0,0,464,5616,
        1,0,0,0,466,5627,1,0,0,0,468,5636,1,0,0,0,470,5686,1,0,0,0,472,5688,
        1,0,0,0,474,5694,1,0,0,0,476,5701,1,0,0,0,478,5707,1,0,0,0,480,5752,
        1,0,0,0,482,5754,1,0,0,0,484,5761,1,0,0,0,486,5768,1,0,0,0,488,5779,
        1,0,0,0,490,5781,1,0,0,0,492,5792,1,0,0,0,494,5803,1,0,0,0,496,5814,
        1,0,0,0,498,5821,1,0,0,0,500,5824,1,0,0,0,502,5827,1,0,0,0,504,5831,
        1,0,0,0,506,5834,1,0,0,0,508,5855,1,0,0,0,510,5857,1,0,0,0,512,5863,
        1,0,0,0,514,5866,1,0,0,0,516,5870,1,0,0,0,518,5907,1,0,0,0,520,5909,
        1,0,0,0,522,5920,1,0,0,0,524,5922,1,0,0,0,526,5929,1,0,0,0,528,5946,
        1,0,0,0,530,5958,1,0,0,0,532,5978,1,0,0,0,534,541,3,6,3,0,535,541,
        3,8,4,0,536,541,3,14,7,0,537,541,3,16,8,0,538,541,3,18,9,0,539,541,
        3,20,10,0,540,534,1,0,0,0,540,535,1,0,0,0,540,536,1,0,0,0,540,537,
        1,0,0,0,540,538,1,0,0,0,540,539,1,0,0,0,541,1,1,0,0,0,542,550,3,
        6,3,0,543,550,3,8,4,0,544,550,3,10,5,0,545,550,3,14,7,0,546,550,
        3,16,8,0,547,550,3,18,9,0,548,550,3,20,10,0,549,542,1,0,0,0,549,
        543,1,0,0,0,549,544,1,0,0,0,549,545,1,0,0,0,549,546,1,0,0,0,549,
        547,1,0,0,0,549,548,1,0,0,0,550,3,1,0,0,0,551,562,3,6,3,0,552,562,
        3,8,4,0,553,562,3,10,5,0,554,562,3,12,6,0,555,562,3,14,7,0,556,562,
        3,16,8,0,557,562,3,18,9,0,558,562,3,20,10,0,559,562,5,410,0,0,560,
        562,5,466,0,0,561,551,1,0,0,0,561,552,1,0,0,0,561,553,1,0,0,0,561,
        554,1,0,0,0,561,555,1,0,0,0,561,556,1,0,0,0,561,557,1,0,0,0,561,
        558,1,0,0,0,561,559,1,0,0,0,561,560,1,0,0,0,562,5,1,0,0,0,563,606,
        5,44,0,0,564,606,5,381,0,0,565,606,5,202,0,0,566,606,5,201,0,0,567,
        606,5,36,0,0,568,578,7,0,0,0,569,571,5,1213,0,0,570,572,3,76,38,
        0,571,570,1,0,0,0,571,572,1,0,0,0,572,575,1,0,0,0,573,574,5,1208,
        0,0,574,576,3,76,38,0,575,573,1,0,0,0,575,576,1,0,0,0,576,577,1,
        0,0,0,577,579,5,1214,0,0,578,569,1,0,0,0,578,579,1,0,0,0,579,606,
        1,0,0,0,580,585,5,157,0,0,581,582,5,1213,0,0,582,583,3,76,38,0,583,
        584,5,1214,0,0,584,586,1,0,0,0,585,581,1,0,0,0,585,586,1,0,0,0,586,
        591,1,0,0,0,587,591,5,323,0,0,588,589,5,124,0,0,589,591,5,305,0,
        0,590,580,1,0,0,0,590,587,1,0,0,0,590,588,1,0,0,0,591,606,1,0,0,
        0,592,603,5,277,0,0,593,596,5,1213,0,0,594,597,3,76,38,0,595,597,
        5,1219,0,0,596,594,1,0,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,599,
        5,1208,0,0,599,601,3,76,38,0,600,598,1,0,0,0,600,601,1,0,0,0,601,
        602,1,0,0,0,602,604,5,1214,0,0,603,593,1,0,0,0,603,604,1,0,0,0,604,
        606,1,0,0,0,605,563,1,0,0,0,605,564,1,0,0,0,605,565,1,0,0,0,605,
        566,1,0,0,0,605,567,1,0,0,0,605,568,1,0,0,0,605,590,1,0,0,0,605,
        592,1,0,0,0,606,7,1,0,0,0,607,609,7,1,0,0,608,610,3,34,17,0,609,
        608,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,613,3,40,20,0,612,
        611,1,0,0,0,612,613,1,0,0,0,613,648,1,0,0,0,614,616,5,173,0,0,615,
        617,3,34,17,0,616,615,1,0,0,0,616,617,1,0,0,0,617,648,1,0,0,0,618,
        624,5,464,0,0,619,620,5,55,0,0,620,624,5,467,0,0,621,622,5,52,0,
        0,622,624,5,467,0,0,623,618,1,0,0,0,623,619,1,0,0,0,623,621,1,0,
        0,0,624,625,1,0,0,0,625,627,3,34,17,0,626,628,3,40,20,0,627,626,
        1,0,0,0,627,628,1,0,0,0,628,648,1,0,0,0,629,630,5,231,0,0,630,648,
        5,464,0,0,631,632,5,465,0,0,632,648,3,34,17,0,633,634,5,231,0,0,
        634,648,5,465,0,0,635,640,5,62,0,0,636,637,5,55,0,0,637,638,5,215,
        0,0,638,640,5,279,0,0,639,635,1,0,0,0,639,636,1,0,0,0,640,642,1,
        0,0,0,641,643,3,36,18,0,642,641,1,0,0,0,642,643,1,0,0,0,643,645,
        1,0,0,0,644,646,3,52,26,0,645,644,1,0,0,0,645,646,1,0,0,0,646,648,
        1,0,0,0,647,607,1,0,0,0,647,614,1,0,0,0,647,623,1,0,0,0,647,629,
        1,0,0,0,647,631,1,0,0,0,647,633,1,0,0,0,647,639,1,0,0,0,648,9,1,
        0,0,0,649,651,5,464,0,0,650,652,3,40,20,0,651,650,1,0,0,0,651,652,
        1,0,0,0,652,658,1,0,0,0,653,655,5,465,0,0,654,656,3,40,20,0,655,
        654,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,649,1,0,0,0,657,
        653,1,0,0,0,658,11,1,0,0,0,659,664,5,62,0,0,660,661,5,55,0,0,661,
        662,5,215,0,0,662,664,5,279,0,0,663,659,1,0,0,0,663,660,1,0,0,0,
        664,665,1,0,0,0,665,666,5,20,0,0,666,676,5,225,0,0,667,672,5,38,
        0,0,668,669,5,37,0,0,669,670,5,215,0,0,670,672,5,279,0,0,671,667,
        1,0,0,0,671,668,1,0,0,0,672,673,1,0,0,0,673,674,5,20,0,0,674,676,
        5,225,0,0,675,663,1,0,0,0,675,671,1,0,0,0,676,13,1,0,0,0,677,679,
        5,43,0,0,678,680,3,34,17,0,679,678,1,0,0,0,679,680,1,0,0,0,680,693,
        1,0,0,0,681,682,5,463,0,0,682,693,3,34,17,0,683,688,5,38,0,0,684,
        685,5,37,0,0,685,686,5,215,0,0,686,688,5,279,0,0,687,683,1,0,0,0,
        687,684,1,0,0,0,688,690,1,0,0,0,689,691,3,36,18,0,690,689,1,0,0,
        0,690,691,1,0,0,0,691,693,1,0,0,0,692,677,1,0,0,0,692,681,1,0,0,
        0,692,687,1,0,0,0,693,15,1,0,0,0,694,712,5,104,0,0,695,697,5,421,
        0,0,696,698,3,34,17,0,697,696,1,0,0,0,697,698,1,0,0,0,698,700,1,
        0,0,0,699,701,3,64,32,0,700,699,1,0,0,0,700,701,1,0,0,0,701,712,
        1,0,0,0,702,704,5,422,0,0,703,705,3,34,17,0,704,703,1,0,0,0,704,
        705,1,0,0,0,705,707,1,0,0,0,706,708,3,64,32,0,707,706,1,0,0,0,707,
        708,1,0,0,0,708,712,1,0,0,0,709,710,5,205,0,0,710,712,3,32,16,0,
        711,694,1,0,0,0,711,695,1,0,0,0,711,702,1,0,0,0,711,709,1,0,0,0,
        712,17,1,0,0,0,713,714,5,853,0,0,714,715,5,1213,0,0,715,716,5,104,
        0,0,716,738,5,1214,0,0,717,718,5,853,0,0,718,719,5,1213,0,0,719,
        721,5,421,0,0,720,722,3,34,17,0,721,720,1,0,0,0,721,722,1,0,0,0,
        722,724,1,0,0,0,723,725,3,64,32,0,724,723,1,0,0,0,724,725,1,0,0,
        0,725,726,1,0,0,0,726,738,5,1214,0,0,727,728,5,853,0,0,728,729,5,
        1213,0,0,729,731,5,422,0,0,730,732,3,34,17,0,731,730,1,0,0,0,731,
        732,1,0,0,0,732,734,1,0,0,0,733,735,3,64,32,0,734,733,1,0,0,0,734,
        735,1,0,0,0,735,736,1,0,0,0,736,738,5,1214,0,0,737,713,1,0,0,0,737,
        717,1,0,0,0,737,727,1,0,0,0,738,19,1,0,0,0,739,741,3,30,15,0,740,
        739,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,744,7,2,0,0,743,
        745,3,36,18,0,744,743,1,0,0,0,744,745,1,0,0,0,745,747,1,0,0,0,746,
        748,3,54,27,0,747,746,1,0,0,0,747,748,1,0,0,0,748,789,1,0,0,0,749,
        751,3,30,15,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,
        754,5,720,0,0,753,755,3,38,19,0,754,753,1,0,0,0,754,755,1,0,0,0,
        755,757,1,0,0,0,756,758,3,54,27,0,757,756,1,0,0,0,757,758,1,0,0,
        0,758,761,1,0,0,0,759,762,3,52,26,0,760,762,3,56,28,0,761,759,1,
        0,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,789,1,0,0,0,763,765,3,
        30,15,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,768,
        5,936,0,0,767,769,3,38,19,0,768,767,1,0,0,0,768,769,1,0,0,0,769,
        771,1,0,0,0,770,772,3,54,27,0,771,770,1,0,0,0,771,772,1,0,0,0,772,
        789,1,0,0,0,773,775,3,30,15,0,774,773,1,0,0,0,774,775,1,0,0,0,775,
        776,1,0,0,0,776,778,5,607,0,0,777,779,3,38,19,0,778,777,1,0,0,0,
        778,779,1,0,0,0,779,781,1,0,0,0,780,782,3,54,27,0,781,780,1,0,0,
        0,781,782,1,0,0,0,782,783,1,0,0,0,783,789,3,58,29,0,784,786,3,30,
        15,0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,789,3,100,
        50,0,788,740,1,0,0,0,788,750,1,0,0,0,788,764,1,0,0,0,788,774,1,0,
        0,0,788,785,1,0,0,0,789,21,1,0,0,0,790,799,3,42,21,0,791,799,3,44,
        22,0,792,799,3,46,23,0,793,799,3,28,14,0,794,799,3,64,32,0,795,799,
        3,486,243,0,796,799,3,40,20,0,797,799,3,24,12,0,798,790,1,0,0,0,
        798,791,1,0,0,0,798,792,1,0,0,0,798,793,1,0,0,0,798,794,1,0,0,0,
        798,795,1,0,0,0,798,796,1,0,0,0,798,797,1,0,0,0,799,23,1,0,0,0,800,
        802,5,272,0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,
        809,5,274,0,0,804,805,5,111,0,0,805,809,3,26,13,0,806,807,5,474,
        0,0,807,809,5,111,0,0,808,801,1,0,0,0,808,804,1,0,0,0,808,806,1,
        0,0,0,809,25,1,0,0,0,810,811,7,3,0,0,811,817,3,80,40,0,812,813,7,
        3,0,0,813,817,3,76,38,0,814,817,3,66,33,0,815,817,3,344,172,0,816,
        810,1,0,0,0,816,812,1,0,0,0,816,814,1,0,0,0,816,815,1,0,0,0,817,
        27,1,0,0,0,818,821,3,50,25,0,819,821,3,48,24,0,820,818,1,0,0,0,820,
        819,1,0,0,0,821,29,1,0,0,0,822,823,5,1089,0,0,823,824,5,1209,0,0,
        824,31,1,0,0,0,825,827,5,478,0,0,826,828,3,34,17,0,827,826,1,0,0,
        0,827,828,1,0,0,0,828,831,1,0,0,0,829,830,5,426,0,0,830,832,5,258,
        0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,888,1,0,0,0,833,835,5,258,
        0,0,834,836,3,34,17,0,835,834,1,0,0,0,835,836,1,0,0,0,836,888,1,
        0,0,0,837,839,5,106,0,0,838,840,3,34,17,0,839,838,1,0,0,0,839,840,
        1,0,0,0,840,850,1,0,0,0,841,842,5,426,0,0,842,851,5,185,0,0,843,
        844,5,426,0,0,844,851,5,248,0,0,845,846,5,426,0,0,846,848,5,368,
        0,0,847,849,3,34,17,0,848,847,1,0,0,0,848,849,1,0,0,0,849,851,1,
        0,0,0,850,841,1,0,0,0,850,843,1,0,0,0,850,845,1,0,0,0,850,851,1,
        0,0,0,851,888,1,0,0,0,852,854,5,185,0,0,853,855,3,34,17,0,854,853,
        1,0,0,0,854,855,1,0,0,0,855,863,1,0,0,0,856,857,5,426,0,0,857,864,
        5,248,0,0,858,859,5,426,0,0,859,861,5,368,0,0,860,862,3,34,17,0,
        861,860,1,0,0,0,861,862,1,0,0,0,862,864,1,0,0,0,863,856,1,0,0,0,
        863,858,1,0,0,0,863,864,1,0,0,0,864,888,1,0,0,0,865,867,5,248,0,
        0,866,868,3,34,17,0,867,866,1,0,0,0,867,868,1,0,0,0,868,874,1,0,
        0,0,869,870,5,426,0,0,870,872,5,368,0,0,871,873,3,34,17,0,872,871,
        1,0,0,0,872,873,1,0,0,0,873,875,1,0,0,0,874,869,1,0,0,0,874,875,
        1,0,0,0,875,888,1,0,0,0,876,885,5,368,0,0,877,878,5,1213,0,0,878,
        881,3,76,38,0,879,880,5,1208,0,0,880,882,3,76,38,0,881,879,1,0,0,
        0,881,882,1,0,0,0,882,883,1,0,0,0,883,884,5,1214,0,0,884,886,1,0,
        0,0,885,877,1,0,0,0,885,886,1,0,0,0,886,888,1,0,0,0,887,825,1,0,
        0,0,887,833,1,0,0,0,887,837,1,0,0,0,887,852,1,0,0,0,887,865,1,0,
        0,0,887,876,1,0,0,0,888,33,1,0,0,0,889,890,5,1213,0,0,890,891,3,
        76,38,0,891,892,5,1214,0,0,892,35,1,0,0,0,893,894,5,1213,0,0,894,
        896,3,76,38,0,895,897,7,4,0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,
        898,1,0,0,0,898,899,5,1214,0,0,899,37,1,0,0,0,900,901,5,1213,0,0,
        901,903,3,76,38,0,902,904,7,5,0,0,903,902,1,0,0,0,903,904,1,0,0,
        0,904,905,1,0,0,0,905,906,5,1214,0,0,906,39,1,0,0,0,907,908,7,1,
        0,0,908,909,5,372,0,0,909,910,7,6,0,0,910,41,1,0,0,0,911,912,7,7,
        0,0,912,43,1,0,0,0,913,915,7,8,0,0,914,913,1,0,0,0,914,915,1,0,0,
        0,915,916,1,0,0,0,916,917,7,9,0,0,917,45,1,0,0,0,918,922,5,161,0,
        0,919,923,3,70,35,0,920,923,5,1198,0,0,921,923,5,1199,0,0,922,919,
        1,0,0,0,922,920,1,0,0,0,922,921,1,0,0,0,923,47,1,0,0,0,924,925,5,
        425,0,0,925,926,3,70,35,0,926,49,1,0,0,0,927,928,5,262,0,0,928,929,
        3,120,60,0,929,51,1,0,0,0,930,931,7,1,0,0,931,932,5,372,0,0,932,
        933,7,10,0,0,933,53,1,0,0,0,934,935,5,709,0,0,935,936,5,739,0,0,
        936,937,3,76,38,0,937,55,1,0,0,0,938,939,5,941,0,0,939,940,5,161,
        0,0,940,941,7,11,0,0,941,57,1,0,0,0,942,943,5,941,0,0,943,944,5,
        161,0,0,944,946,3,60,30,0,945,947,3,62,31,0,946,945,1,0,0,0,946,
        947,1,0,0,0,947,59,1,0,0,0,948,954,5,545,0,0,949,951,5,1073,0,0,
        950,952,3,52,26,0,951,950,1,0,0,0,951,952,1,0,0,0,952,954,1,0,0,
        0,953,948,1,0,0,0,953,949,1,0,0,0,954,61,1,0,0,0,955,956,5,474,0,
        0,956,957,5,905,0,0,957,958,3,104,52,0,958,63,1,0,0,0,959,960,5,
        474,0,0,960,961,5,421,0,0,961,962,5,480,0,0,962,65,1,0,0,0,963,977,
        3,68,34,0,964,977,3,70,35,0,965,977,3,72,36,0,966,977,3,74,37,0,
        967,977,3,76,38,0,968,977,3,78,39,0,969,977,3,80,40,0,970,977,3,
        84,42,0,971,977,3,86,43,0,972,977,3,88,44,0,973,977,3,90,45,0,974,
        977,3,94,47,0,975,977,5,274,0,0,976,963,1,0,0,0,976,964,1,0,0,0,
        976,965,1,0,0,0,976,966,1,0,0,0,976,967,1,0,0,0,976,968,1,0,0,0,
        976,969,1,0,0,0,976,970,1,0,0,0,976,971,1,0,0,0,976,972,1,0,0,0,
        976,973,1,0,0,0,976,974,1,0,0,0,976,975,1,0,0,0,977,67,1,0,0,0,978,
        979,5,1195,0,0,979,69,1,0,0,0,980,982,3,82,41,0,981,980,1,0,0,0,
        981,982,1,0,0,0,982,984,1,0,0,0,983,985,5,1203,0,0,984,983,1,0,0,
        0,985,986,1,0,0,0,986,984,1,0,0,0,986,987,1,0,0,0,987,71,1,0,0,0,
        988,990,3,82,41,0,989,988,1,0,0,0,989,990,1,0,0,0,990,991,1,0,0,
        0,991,995,5,1202,0,0,992,994,5,1203,0,0,993,992,1,0,0,0,994,997,
        1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,998,1,0,0,0,997,995,
        1,0,0,0,998,999,5,444,0,0,999,1000,5,1203,0,0,1000,73,1,0,0,0,1001,
        1003,3,82,41,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,
        0,0,1004,1005,5,1204,0,0,1005,75,1,0,0,0,1006,1007,5,1194,0,0,1007,
        77,1,0,0,0,1008,1009,5,1196,0,0,1009,79,1,0,0,0,1010,1011,5,1197,
        0,0,1011,81,1,0,0,0,1012,1013,7,12,0,0,1013,83,1,0,0,0,1014,1016,
        5,104,0,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,
        1017,1018,5,1198,0,0,1018,85,1,0,0,0,1019,1021,5,421,0,0,1020,1019,
        1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,1023,5,1199,0,0,
        1023,87,1,0,0,0,1024,1026,5,422,0,0,1025,1024,1,0,0,0,1025,1026,
        1,0,0,0,1026,1027,1,0,0,0,1027,1028,5,1200,0,0,1028,89,1,0,0,0,1029,
        1031,5,205,0,0,1030,1032,5,1222,0,0,1031,1030,1,0,0,0,1031,1032,
        1,0,0,0,1032,1033,1,0,0,0,1033,1034,7,13,0,0,1034,1035,3,92,46,0,
        1035,91,1,0,0,0,1036,1064,5,478,0,0,1037,1038,5,478,0,0,1038,1039,
        5,426,0,0,1039,1064,5,258,0,0,1040,1064,5,258,0,0,1041,1064,5,106,
        0,0,1042,1043,5,106,0,0,1043,1044,5,426,0,0,1044,1064,5,185,0,0,
        1045,1046,5,106,0,0,1046,1047,5,426,0,0,1047,1064,5,248,0,0,1048,
        1049,5,106,0,0,1049,1050,5,426,0,0,1050,1064,5,368,0,0,1051,1064,
        5,185,0,0,1052,1053,5,185,0,0,1053,1054,5,426,0,0,1054,1064,5,248,
        0,0,1055,1056,5,185,0,0,1056,1057,5,426,0,0,1057,1064,5,368,0,0,
        1058,1064,5,248,0,0,1059,1060,5,248,0,0,1060,1061,5,426,0,0,1061,
        1064,5,368,0,0,1062,1064,5,368,0,0,1063,1036,1,0,0,0,1063,1037,1,
        0,0,0,1063,1040,1,0,0,0,1063,1041,1,0,0,0,1063,1042,1,0,0,0,1063,
        1045,1,0,0,0,1063,1048,1,0,0,0,1063,1051,1,0,0,0,1063,1052,1,0,0,
        0,1063,1055,1,0,0,0,1063,1058,1,0,0,0,1063,1059,1,0,0,0,1063,1062,
        1,0,0,0,1064,93,1,0,0,0,1065,1066,5,853,0,0,1066,1067,5,1201,0,0,
        1067,95,1,0,0,0,1068,1069,3,112,56,0,1069,1070,5,1209,0,0,1070,1071,
        3,100,50,0,1071,1072,5,1209,0,0,1072,1073,3,98,49,0,1073,1080,1,
        0,0,0,1074,1075,3,100,50,0,1075,1076,5,1209,0,0,1076,1077,3,98,49,
        0,1077,1080,1,0,0,0,1078,1080,3,98,49,0,1079,1068,1,0,0,0,1079,1074,
        1,0,0,0,1079,1078,1,0,0,0,1080,97,1,0,0,0,1081,1086,5,1193,0,0,1082,
        1086,3,144,72,0,1083,1086,5,366,0,0,1084,1086,5,363,0,0,1085,1081,
        1,0,0,0,1085,1082,1,0,0,0,1085,1083,1,0,0,0,1085,1084,1,0,0,0,1086,
        99,1,0,0,0,1087,1090,5,1193,0,0,1088,1090,3,144,72,0,1089,1087,1,
        0,0,0,1089,1088,1,0,0,0,1090,101,1,0,0,0,1091,1092,3,112,56,0,1092,
        1093,5,1209,0,0,1093,1095,1,0,0,0,1094,1091,1,0,0,0,1094,1095,1,
        0,0,0,1095,1098,1,0,0,0,1096,1099,5,1193,0,0,1097,1099,3,144,72,
        0,1098,1096,1,0,0,0,1098,1097,1,0,0,0,1099,103,1,0,0,0,1100,1101,
        3,112,56,0,1101,1102,5,1209,0,0,1102,1104,1,0,0,0,1103,1100,1,0,
        0,0,1103,1104,1,0,0,0,1104,1107,1,0,0,0,1105,1108,5,1193,0,0,1106,
        1108,3,144,72,0,1107,1105,1,0,0,0,1107,1106,1,0,0,0,1108,105,1,0,
        0,0,1109,1110,3,112,56,0,1110,1111,5,1209,0,0,1111,1113,1,0,0,0,
        1112,1109,1,0,0,0,1112,1113,1,0,0,0,1113,1116,1,0,0,0,1114,1117,
        5,1193,0,0,1115,1117,3,144,72,0,1116,1114,1,0,0,0,1116,1115,1,0,
        0,0,1117,107,1,0,0,0,1118,1119,3,112,56,0,1119,1120,5,1209,0,0,1120,
        1122,1,0,0,0,1121,1118,1,0,0,0,1121,1122,1,0,0,0,1122,1125,1,0,0,
        0,1123,1126,5,1193,0,0,1124,1126,3,144,72,0,1125,1123,1,0,0,0,1125,
        1124,1,0,0,0,1126,109,1,0,0,0,1127,1128,3,112,56,0,1128,1129,5,1209,
        0,0,1129,1131,1,0,0,0,1130,1127,1,0,0,0,1130,1131,1,0,0,0,1131,1134,
        1,0,0,0,1132,1135,5,1193,0,0,1133,1135,3,144,72,0,1134,1132,1,0,
        0,0,1134,1133,1,0,0,0,1135,111,1,0,0,0,1136,1139,5,1193,0,0,1137,
        1139,3,144,72,0,1138,1136,1,0,0,0,1138,1137,1,0,0,0,1139,113,1,0,
        0,0,1140,1143,5,1193,0,0,1141,1143,3,144,72,0,1142,1140,1,0,0,0,
        1142,1141,1,0,0,0,1143,115,1,0,0,0,1144,1148,5,1193,0,0,1145,1148,
        5,10,0,0,1146,1148,3,144,72,0,1147,1144,1,0,0,0,1147,1145,1,0,0,
        0,1147,1146,1,0,0,0,1148,117,1,0,0,0,1149,1152,5,1193,0,0,1150,1152,
        3,144,72,0,1151,1149,1,0,0,0,1151,1150,1,0,0,0,1152,119,1,0,0,0,
        1153,1156,5,1193,0,0,1154,1156,3,144,72,0,1155,1153,1,0,0,0,1155,
        1154,1,0,0,0,1156,121,1,0,0,0,1157,1160,5,1193,0,0,1158,1160,3,144,
        72,0,1159,1157,1,0,0,0,1159,1158,1,0,0,0,1160,123,1,0,0,0,1161,1164,
        5,1193,0,0,1162,1164,3,144,72,0,1163,1161,1,0,0,0,1163,1162,1,0,
        0,0,1164,125,1,0,0,0,1165,1168,5,1193,0,0,1166,1168,3,144,72,0,1167,
        1165,1,0,0,0,1167,1166,1,0,0,0,1168,127,1,0,0,0,1169,1172,5,1193,
        0,0,1170,1172,3,144,72,0,1171,1169,1,0,0,0,1171,1170,1,0,0,0,1172,
        129,1,0,0,0,1173,1176,5,1193,0,0,1174,1176,3,144,72,0,1175,1173,
        1,0,0,0,1175,1174,1,0,0,0,1176,131,1,0,0,0,1177,1180,5,1193,0,0,
        1178,1180,3,144,72,0,1179,1177,1,0,0,0,1179,1178,1,0,0,0,1180,133,
        1,0,0,0,1181,1184,5,1193,0,0,1182,1184,3,144,72,0,1183,1181,1,0,
        0,0,1183,1182,1,0,0,0,1184,135,1,0,0,0,1185,1188,5,1193,0,0,1186,
        1188,3,144,72,0,1187,1185,1,0,0,0,1187,1186,1,0,0,0,1188,137,1,0,
        0,0,1189,1192,5,1193,0,0,1190,1192,3,144,72,0,1191,1189,1,0,0,0,
        1191,1190,1,0,0,0,1192,139,1,0,0,0,1193,1196,5,1193,0,0,1194,1196,
        3,144,72,0,1195,1193,1,0,0,0,1195,1194,1,0,0,0,1196,141,1,0,0,0,
        1197,1198,7,14,0,0,1198,143,1,0,0,0,1199,1200,7,15,0,0,1200,145,
        1,0,0,0,1201,1202,6,73,-1,0,1202,1208,3,148,74,0,1203,1204,5,1213,
        0,0,1204,1205,3,146,73,0,1205,1206,5,1214,0,0,1206,1208,1,0,0,0,
        1207,1201,1,0,0,0,1207,1203,1,0,0,0,1208,1217,1,0,0,0,1209,1210,
        10,2,0,0,1210,1212,7,16,0,0,1211,1213,5,13,0,0,1212,1211,1,0,0,0,
        1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1216,3,146,73,3,1215,1209,
        1,0,0,0,1216,1219,1,0,0,0,1217,1215,1,0,0,0,1217,1218,1,0,0,0,1218,
        147,1,0,0,0,1219,1217,1,0,0,0,1220,1222,7,17,0,0,1221,1223,3,150,
        75,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1225,1,0,0,0,1224,
        1226,3,152,76,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,
        0,0,0,1227,1259,3,154,77,0,1228,1232,3,168,84,0,1229,1231,3,258,
        129,0,1230,1229,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1232,
        1233,1,0,0,0,1233,1258,1,0,0,0,1234,1232,1,0,0,0,1235,1258,3,166,
        83,0,1236,1258,3,264,132,0,1237,1258,3,266,133,0,1238,1241,3,284,
        142,0,1239,1241,3,286,143,0,1240,1238,1,0,0,0,1240,1239,1,0,0,0,
        1241,1258,1,0,0,0,1242,1258,3,288,144,0,1243,1245,3,258,129,0,1244,
        1243,1,0,0,0,1245,1248,1,0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,
        0,1247,1249,1,0,0,0,1248,1246,1,0,0,0,1249,1253,3,298,149,0,1250,
        1252,3,258,129,0,1251,1250,1,0,0,0,1252,1255,1,0,0,0,1253,1251,1,
        0,0,0,1253,1254,1,0,0,0,1254,1258,1,0,0,0,1255,1253,1,0,0,0,1256,
        1258,3,304,152,0,1257,1228,1,0,0,0,1257,1235,1,0,0,0,1257,1236,1,
        0,0,0,1257,1237,1,0,0,0,1257,1240,1,0,0,0,1257,1242,1,0,0,0,1257,
        1246,1,0,0,0,1257,1256,1,0,0,0,1258,1261,1,0,0,0,1259,1257,1,0,0,
        0,1259,1260,1,0,0,0,1260,1263,1,0,0,0,1261,1259,1,0,0,0,1262,1264,
        3,296,148,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,149,1,0,0,0,
        1265,1266,5,474,0,0,1266,1267,5,1079,0,0,1267,1268,5,364,0,0,1268,
        151,1,0,0,0,1269,1270,5,20,0,0,1270,1271,5,720,0,0,1271,153,1,0,
        0,0,1272,1277,5,121,0,0,1273,1277,5,448,0,0,1274,1277,5,13,0,0,1275,
        1277,3,158,79,0,1276,1272,1,0,0,0,1276,1273,1,0,0,0,1276,1274,1,
        0,0,0,1276,1275,1,0,0,0,1277,1280,1,0,0,0,1278,1280,3,156,78,0,1279,
        1276,1,0,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,
        0,1281,1284,3,162,81,0,1282,1284,3,160,80,0,1283,1279,1,0,0,0,1283,
        1282,1,0,0,0,1284,155,1,0,0,0,1285,1289,5,427,0,0,1286,1290,3,76,
        38,0,1287,1290,3,80,40,0,1288,1290,3,504,252,0,1289,1286,1,0,0,0,
        1289,1287,1,0,0,0,1289,1288,1,0,0,0,1290,1292,1,0,0,0,1291,1293,
        5,300,0,0,1292,1291,1,0,0,0,1292,1293,1,0,0,0,1293,1296,1,0,0,0,
        1294,1295,5,474,0,0,1295,1297,5,986,0,0,1296,1294,1,0,0,0,1296,1297,
        1,0,0,0,1297,157,1,0,0,0,1298,1309,5,271,0,0,1299,1300,5,286,0,0,
        1300,1301,5,765,0,0,1301,1302,5,290,0,0,1302,1310,5,296,0,0,1303,
        1304,5,286,0,0,1304,1307,5,296,0,0,1305,1306,5,290,0,0,1306,1308,
        5,765,0,0,1307,1305,1,0,0,0,1307,1308,1,0,0,0,1308,1310,1,0,0,0,
        1309,1299,1,0,0,0,1309,1303,1,0,0,0,1309,1310,1,0,0,0,1310,159,1,
        0,0,0,1311,1318,5,1219,0,0,1312,1313,3,104,52,0,1313,1314,5,1209,
        0,0,1314,1315,5,1219,0,0,1315,1318,1,0,0,0,1316,1318,3,96,48,0,1317,
        1311,1,0,0,0,1317,1312,1,0,0,0,1317,1316,1,0,0,0,1318,1319,1,0,0,
        0,1319,1320,5,1209,0,0,1320,1321,5,13,0,0,1321,161,1,0,0,0,1322,
        1332,5,1219,0,0,1323,1328,3,164,82,0,1324,1325,5,1208,0,0,1325,1327,
        3,164,82,0,1326,1324,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,
        1328,1329,1,0,0,0,1329,1332,1,0,0,0,1330,1328,1,0,0,0,1331,1322,
        1,0,0,0,1331,1323,1,0,0,0,1332,163,1,0,0,0,1333,1338,3,308,154,0,
        1334,1336,5,20,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1337,
        1,0,0,0,1337,1339,3,120,60,0,1338,1335,1,0,0,0,1338,1339,1,0,0,0,
        1339,1345,1,0,0,0,1340,1341,3,104,52,0,1341,1342,5,1209,0,0,1342,
        1343,5,1219,0,0,1343,1345,1,0,0,0,1344,1333,1,0,0,0,1344,1340,1,
        0,0,0,1345,165,1,0,0,0,1346,1349,5,206,0,0,1347,1350,3,122,61,0,
        1348,1350,3,500,250,0,1349,1347,1,0,0,0,1349,1348,1,0,0,0,1350,1358,
        1,0,0,0,1351,1354,5,1208,0,0,1352,1355,3,122,61,0,1353,1355,3,500,
        250,0,1354,1352,1,0,0,0,1354,1353,1,0,0,0,1355,1357,1,0,0,0,1356,
        1351,1,0,0,0,1357,1360,1,0,0,0,1358,1356,1,0,0,0,1358,1359,1,0,0,
        0,1359,167,1,0,0,0,1360,1358,1,0,0,0,1361,1362,5,164,0,0,1362,1363,
        3,170,85,0,1363,169,1,0,0,0,1364,1368,3,172,86,0,1365,1367,3,174,
        87,0,1366,1365,1,0,0,0,1367,1370,1,0,0,0,1368,1366,1,0,0,0,1368,
        1369,1,0,0,0,1369,1395,1,0,0,0,1370,1368,1,0,0,0,1371,1375,3,176,
        88,0,1372,1374,3,174,87,0,1373,1372,1,0,0,0,1374,1377,1,0,0,0,1375,
        1373,1,0,0,0,1375,1376,1,0,0,0,1376,1395,1,0,0,0,1377,1375,1,0,0,
        0,1378,1382,3,178,89,0,1379,1381,3,174,87,0,1380,1379,1,0,0,0,1381,
        1384,1,0,0,0,1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,1395,1,0,0,
        0,1384,1382,1,0,0,0,1385,1386,5,1213,0,0,1386,1387,3,170,85,0,1387,
        1391,5,1214,0,0,1388,1390,3,174,87,0,1389,1388,1,0,0,0,1390,1393,
        1,0,0,0,1391,1389,1,0,0,0,1391,1392,1,0,0,0,1392,1395,1,0,0,0,1393,
        1391,1,0,0,0,1394,1364,1,0,0,0,1394,1371,1,0,0,0,1394,1378,1,0,0,
        0,1394,1385,1,0,0,0,1395,171,1,0,0,0,1396,1403,3,180,90,0,1397,1403,
        3,250,125,0,1398,1403,3,186,93,0,1399,1403,3,202,101,0,1400,1403,
        3,188,94,0,1401,1403,3,214,107,0,1402,1396,1,0,0,0,1402,1397,1,0,
        0,0,1402,1398,1,0,0,0,1402,1399,1,0,0,0,1402,1400,1,0,0,0,1402,1401,
        1,0,0,0,1403,173,1,0,0,0,1404,1405,5,1208,0,0,1405,1414,3,180,90,
        0,1406,1407,5,1208,0,0,1407,1414,3,250,125,0,1408,1409,5,1208,0,
        0,1409,1414,3,202,101,0,1410,1411,5,1208,0,0,1411,1414,3,214,107,
        0,1412,1414,3,182,91,0,1413,1404,1,0,0,0,1413,1406,1,0,0,0,1413,
        1408,1,0,0,0,1413,1410,1,0,0,0,1413,1412,1,0,0,0,1414,175,1,0,0,
        0,1415,1418,3,180,90,0,1416,1418,3,250,125,0,1417,1415,1,0,0,0,1417,
        1416,1,0,0,0,1418,1419,1,0,0,0,1419,1420,3,462,231,0,1420,177,1,
        0,0,0,1421,1424,3,180,90,0,1422,1424,3,250,125,0,1423,1421,1,0,0,
        0,1423,1422,1,0,0,0,1424,1425,1,0,0,0,1425,1426,3,478,239,0,1426,
        179,1,0,0,0,1427,1432,3,104,52,0,1428,1430,3,200,100,0,1429,1431,
        3,198,99,0,1430,1429,1,0,0,0,1430,1431,1,0,0,0,1431,1433,1,0,0,0,
        1432,1428,1,0,0,0,1432,1433,1,0,0,0,1433,1438,1,0,0,0,1434,1436,
        5,20,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,1437,1,0,0,0,1437,
        1439,3,120,60,0,1438,1435,1,0,0,0,1438,1439,1,0,0,0,1439,181,1,0,
        0,0,1440,1446,5,194,0,0,1441,1443,7,18,0,0,1442,1444,5,294,0,0,1443,
        1442,1,0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1440,1,0,0,
        0,1445,1441,1,0,0,0,1445,1446,1,0,0,0,1446,1447,1,0,0,0,1447,1448,
        5,210,0,0,1448,1452,3,172,86,0,1449,1451,3,184,92,0,1450,1449,1,
        0,0,0,1451,1454,1,0,0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,
        1493,1,0,0,0,1454,1452,1,0,0,0,1455,1461,5,194,0,0,1456,1458,7,18,
        0,0,1457,1459,5,294,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,
        1461,1,0,0,0,1460,1455,1,0,0,0,1460,1456,1,0,0,0,1460,1461,1,0,0,
        0,1461,1462,1,0,0,0,1462,1463,5,210,0,0,1463,1464,5,1213,0,0,1464,
        1465,3,170,85,0,1465,1469,5,1214,0,0,1466,1468,3,184,92,0,1467,1466,
        1,0,0,0,1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,
        1493,1,0,0,0,1471,1469,1,0,0,0,1472,1473,5,87,0,0,1473,1474,5,210,
        0,0,1474,1478,3,172,86,0,1475,1477,3,184,92,0,1476,1475,1,0,0,0,
        1477,1480,1,0,0,0,1478,1476,1,0,0,0,1478,1479,1,0,0,0,1479,1493,
        1,0,0,0,1480,1478,1,0,0,0,1481,1482,5,87,0,0,1482,1483,5,210,0,0,
        1483,1484,5,1213,0,0,1484,1485,3,170,85,0,1485,1489,5,1214,0,0,1486,
        1488,3,184,92,0,1487,1486,1,0,0,0,1488,1491,1,0,0,0,1489,1487,1,
        0,0,0,1489,1490,1,0,0,0,1490,1493,1,0,0,0,1491,1489,1,0,0,0,1492,
        1445,1,0,0,0,1492,1460,1,0,0,0,1492,1472,1,0,0,0,1492,1481,1,0,0,
        0,1493,183,1,0,0,0,1494,1495,5,286,0,0,1495,1496,3,306,153,0,1496,
        185,1,0,0,0,1497,1498,5,160,0,0,1498,1499,5,406,0,0,1499,1506,5,
        1213,0,0,1500,1507,3,148,74,0,1501,1503,9,0,0,0,1502,1501,1,0,0,
        0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1504,1502,1,0,0,0,1505,1507,
        1,0,0,0,1506,1500,1,0,0,0,1506,1502,1,0,0,0,1507,1508,1,0,0,0,1508,
        1509,5,1214,0,0,1509,1522,3,200,100,0,1510,1511,5,664,0,0,1511,1512,
        5,1213,0,0,1512,1517,3,192,96,0,1513,1514,5,1208,0,0,1514,1516,3,
        192,96,0,1515,1513,1,0,0,0,1516,1519,1,0,0,0,1517,1515,1,0,0,0,1517,
        1518,1,0,0,0,1518,1520,1,0,0,0,1519,1517,1,0,0,0,1520,1521,5,1214,
        0,0,1521,1523,1,0,0,0,1522,1510,1,0,0,0,1522,1523,1,0,0,0,1523,1525,
        1,0,0,0,1524,1526,5,20,0,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,
        1527,1,0,0,0,1527,1528,3,120,60,0,1528,187,1,0,0,0,1529,1530,3,108,
        54,0,1530,1531,3,200,100,0,1531,1533,5,1213,0,0,1532,1534,3,190,
        95,0,1533,1532,1,0,0,0,1534,1535,1,0,0,0,1535,1533,1,0,0,0,1535,
        1536,1,0,0,0,1536,1537,1,0,0,0,1537,1539,5,1214,0,0,1538,1540,5,
        20,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,1,0,0,0,1541,
        1542,3,120,60,0,1542,189,1,0,0,0,1543,1544,5,286,0,0,1544,1545,5,
        1213,0,0,1545,1550,3,308,154,0,1546,1547,5,1208,0,0,1547,1549,3,
        308,154,0,1548,1546,1,0,0,0,1549,1552,1,0,0,0,1550,1548,1,0,0,0,
        1550,1551,1,0,0,0,1551,1553,1,0,0,0,1552,1550,1,0,0,0,1553,1557,
        5,1214,0,0,1554,1556,3,248,124,0,1555,1554,1,0,0,0,1556,1559,1,0,
        0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1564,1,0,0,0,1559,1557,
        1,0,0,0,1560,1562,5,224,0,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,
        1562,1563,1,0,0,0,1563,1565,3,298,149,0,1564,1561,1,0,0,0,1564,1565,
        1,0,0,0,1565,1566,1,0,0,0,1566,1567,3,194,97,0,1567,191,1,0,0,0,
        1568,1576,3,250,125,0,1569,1571,3,104,52,0,1570,1572,5,20,0,0,1571,
        1570,1,0,0,0,1571,1572,1,0,0,0,1572,1573,1,0,0,0,1573,1574,3,120,
        60,0,1574,1576,1,0,0,0,1575,1568,1,0,0,0,1575,1569,1,0,0,0,1576,
        193,1,0,0,0,1577,1579,5,457,0,0,1578,1580,3,196,98,0,1579,1578,1,
        0,0,0,1580,1581,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,
        195,1,0,0,0,1583,1584,3,100,50,0,1584,1585,5,1213,0,0,1585,1586,
        3,308,154,0,1586,1587,5,1214,0,0,1587,197,1,0,0,0,1588,1589,5,352,
        0,0,1589,1590,5,1213,0,0,1590,1595,3,498,249,0,1591,1592,5,1208,
        0,0,1592,1594,3,498,249,0,1593,1591,1,0,0,0,1594,1597,1,0,0,0,1595,
        1593,1,0,0,0,1595,1596,1,0,0,0,1596,1598,1,0,0,0,1597,1595,1,0,0,
        0,1598,1599,5,1214,0,0,1599,199,1,0,0,0,1600,1601,5,1210,0,0,1601,
        1602,3,120,60,0,1602,201,1,0,0,0,1603,1604,5,406,0,0,1604,1607,5,
        1213,0,0,1605,1608,3,204,102,0,1606,1608,3,206,103,0,1607,1605,1,
        0,0,0,1607,1606,1,0,0,0,1608,1609,1,0,0,0,1609,1611,5,1214,0,0,1610,
        1612,5,20,0,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,
        0,0,1613,1615,3,120,60,0,1614,1616,3,494,247,0,1615,1614,1,0,0,0,
        1615,1616,1,0,0,0,1616,203,1,0,0,0,1617,1621,3,108,54,0,1618,1619,
        5,1213,0,0,1619,1622,5,1214,0,0,1620,1622,3,492,246,0,1621,1618,
        1,0,0,0,1621,1620,1,0,0,0,1622,1624,1,0,0,0,1623,1625,3,208,104,
        0,1624,1623,1,0,0,0,1624,1625,1,0,0,0,1625,1630,1,0,0,0,1626,1629,
        3,210,105,0,1627,1629,3,212,106,0,1628,1626,1,0,0,0,1628,1627,1,
        0,0,0,1629,1632,1,0,0,0,1630,1628,1,0,0,0,1630,1631,1,0,0,0,1631,
        205,1,0,0,0,1632,1630,1,0,0,0,1633,1635,3,378,189,0,1634,1633,1,
        0,0,0,1634,1635,1,0,0,0,1635,1636,1,0,0,0,1636,1637,5,1148,0,0,1637,
        1641,5,1213,0,0,1638,1639,3,308,154,0,1639,1640,5,1208,0,0,1640,
        1642,1,0,0,0,1641,1638,1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,
        0,1643,1644,3,308,154,0,1644,1647,5,1214,0,0,1645,1646,5,474,0,0,
        1646,1648,5,829,0,0,1647,1645,1,0,0,0,1647,1648,1,0,0,0,1648,207,
        1,0,0,0,1649,1662,5,352,0,0,1650,1663,3,104,52,0,1651,1652,5,1213,
        0,0,1652,1657,3,498,249,0,1653,1654,5,1208,0,0,1654,1656,3,498,249,
        0,1655,1653,1,0,0,0,1656,1659,1,0,0,0,1657,1655,1,0,0,0,1657,1658,
        1,0,0,0,1658,1660,1,0,0,0,1659,1657,1,0,0,0,1660,1661,5,1214,0,0,
        1661,1663,1,0,0,0,1662,1650,1,0,0,0,1662,1651,1,0,0,0,1662,1663,
        1,0,0,0,1663,209,1,0,0,0,1664,1665,5,224,0,0,1665,1666,5,291,0,0,
        1666,1667,5,42,0,0,1667,1672,3,300,150,0,1668,1669,5,1208,0,0,1669,
        1671,3,300,150,0,1670,1668,1,0,0,0,1671,1674,1,0,0,0,1672,1670,1,
        0,0,0,1672,1673,1,0,0,0,1673,211,1,0,0,0,1674,1672,1,0,0,0,1675,
        1676,5,178,0,0,1676,1677,5,42,0,0,1677,1682,3,96,48,0,1678,1679,
        5,1208,0,0,1679,1681,3,96,48,0,1680,1678,1,0,0,0,1681,1684,1,0,0,
        0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,213,1,0,0,0,1684,1682,
        1,0,0,0,1685,1696,3,216,108,0,1686,1696,3,218,109,0,1687,1696,3,
        220,110,0,1688,1696,3,222,111,0,1689,1696,3,224,112,0,1690,1696,
        3,226,113,0,1691,1696,3,230,115,0,1692,1696,3,228,114,0,1693,1696,
        3,232,116,0,1694,1696,3,234,117,0,1695,1685,1,0,0,0,1695,1686,1,
        0,0,0,1695,1687,1,0,0,0,1695,1688,1,0,0,0,1695,1689,1,0,0,0,1695,
        1690,1,0,0,0,1695,1691,1,0,0,0,1695,1692,1,0,0,0,1695,1693,1,0,0,
        0,1695,1694,1,0,0,0,1696,1698,1,0,0,0,1697,1699,5,20,0,0,1698,1697,
        1,0,0,0,1698,1699,1,0,0,0,1699,1700,1,0,0,0,1700,1702,3,120,60,0,
        1701,1703,3,494,247,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,215,
        1,0,0,0,1704,1705,5,1057,0,0,1705,1707,5,1213,0,0,1706,1708,3,440,
        220,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,0,0,1709,
        1711,3,308,154,0,1710,1712,3,428,214,0,1711,1710,1,0,0,0,1711,1712,
        1,0,0,0,1712,1714,1,0,0,0,1713,1715,3,444,222,0,1714,1713,1,0,0,
        0,1714,1715,1,0,0,0,1715,1716,1,0,0,0,1716,1717,5,1214,0,0,1717,
        217,1,0,0,0,1718,1720,3,378,189,0,1719,1718,1,0,0,0,1719,1720,1,
        0,0,0,1720,1721,1,0,0,0,1721,1722,5,1149,0,0,1722,1723,5,1213,0,
        0,1723,1726,5,286,0,0,1724,1727,3,104,52,0,1725,1727,3,496,248,0,
        1726,1724,1,0,0,0,1726,1725,1,0,0,0,1727,1738,1,0,0,0,1728,1729,
        5,178,0,0,1729,1730,5,42,0,0,1730,1735,3,308,154,0,1731,1732,5,1208,
        0,0,1732,1734,3,308,154,0,1733,1731,1,0,0,0,1734,1737,1,0,0,0,1735,
        1733,1,0,0,0,1735,1736,1,0,0,0,1736,1739,1,0,0,0,1737,1735,1,0,0,
        0,1738,1728,1,0,0,0,1738,1739,1,0,0,0,1739,1751,1,0,0,0,1740,1741,
        5,224,0,0,1741,1742,5,291,0,0,1742,1743,5,42,0,0,1743,1748,3,308,
        154,0,1744,1745,5,1208,0,0,1745,1747,3,308,154,0,1746,1744,1,0,0,
        0,1747,1750,1,0,0,0,1748,1746,1,0,0,0,1748,1749,1,0,0,0,1749,1752,
        1,0,0,0,1750,1748,1,0,0,0,1751,1740,1,0,0,0,1751,1752,1,0,0,0,1752,
        1753,1,0,0,0,1753,1754,5,457,0,0,1754,1755,5,1150,0,0,1755,1756,
        5,1213,0,0,1756,1757,3,70,35,0,1757,1763,5,1214,0,0,1758,1759,5,
        1151,0,0,1759,1760,5,1213,0,0,1760,1761,3,70,35,0,1761,1762,5,1214,
        0,0,1762,1764,1,0,0,0,1763,1758,1,0,0,0,1763,1764,1,0,0,0,1764,1770,
        1,0,0,0,1765,1766,5,1152,0,0,1766,1767,5,1213,0,0,1767,1768,3,70,
        35,0,1768,1769,5,1214,0,0,1769,1771,1,0,0,0,1770,1765,1,0,0,0,1770,
        1771,1,0,0,0,1771,1777,1,0,0,0,1772,1773,5,1153,0,0,1773,1774,5,
        1213,0,0,1774,1775,3,70,35,0,1775,1776,5,1214,0,0,1776,1778,1,0,
        0,0,1777,1772,1,0,0,0,1777,1778,1,0,0,0,1778,219,1,0,0,0,1779,1780,
        5,1154,0,0,1780,1781,5,1213,0,0,1781,1784,5,286,0,0,1782,1785,3,
        104,52,0,1783,1785,3,496,248,0,1784,1782,1,0,0,0,1784,1783,1,0,0,
        0,1785,1786,1,0,0,0,1786,1787,5,457,0,0,1787,1788,5,1213,0,0,1788,
        1792,3,252,126,0,1789,1791,3,254,127,0,1790,1789,1,0,0,0,1791,1794,
        1,0,0,0,1792,1790,1,0,0,0,1792,1793,1,0,0,0,1793,1795,1,0,0,0,1794,
        1792,1,0,0,0,1795,1796,5,1214,0,0,1796,1797,5,1214,0,0,1797,221,
        1,0,0,0,1798,1799,5,906,0,0,1799,1800,5,1213,0,0,1800,1815,3,236,
        118,0,1801,1802,5,352,0,0,1802,1812,5,1213,0,0,1803,1813,5,1219,
        0,0,1804,1809,3,70,35,0,1805,1806,5,1208,0,0,1806,1808,3,70,35,0,
        1807,1805,1,0,0,0,1808,1811,1,0,0,0,1809,1807,1,0,0,0,1809,1810,
        1,0,0,0,1810,1813,1,0,0,0,1811,1809,1,0,0,0,1812,1803,1,0,0,0,1812,
        1804,1,0,0,0,1813,1814,1,0,0,0,1814,1816,5,1214,0,0,1815,1801,1,
        0,0,0,1815,1816,1,0,0,0,1816,1822,1,0,0,0,1817,1818,5,625,0,0,1818,
        1819,5,1213,0,0,1819,1820,3,70,35,0,1820,1821,5,1214,0,0,1821,1823,
        1,0,0,0,1822,1817,1,0,0,0,1822,1823,1,0,0,0,1823,1829,1,0,0,0,1824,
        1825,5,569,0,0,1825,1826,5,1213,0,0,1826,1827,3,70,35,0,1827,1828,
        5,1214,0,0,1828,1830,1,0,0,0,1829,1824,1,0,0,0,1829,1830,1,0,0,0,
        1830,1836,1,0,0,0,1831,1832,5,871,0,0,1832,1833,5,1213,0,0,1833,
        1834,3,70,35,0,1834,1835,5,1214,0,0,1835,1837,1,0,0,0,1836,1831,
        1,0,0,0,1836,1837,1,0,0,0,1837,1843,1,0,0,0,1838,1839,5,542,0,0,
        1839,1840,5,1213,0,0,1840,1841,3,102,51,0,1841,1842,5,1214,0,0,1842,
        1844,1,0,0,0,1843,1838,1,0,0,0,1843,1844,1,0,0,0,1844,1845,1,0,0,
        0,1845,1846,5,1214,0,0,1846,223,1,0,0,0,1847,1849,3,378,189,0,1848,
        1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,0,0,1850,1851,5,1159,
        0,0,1851,1852,5,1213,0,0,1852,1855,5,286,0,0,1853,1856,3,104,52,
        0,1854,1856,3,496,248,0,1855,1853,1,0,0,0,1855,1854,1,0,0,0,1856,
        1857,1,0,0,0,1857,1858,5,457,0,0,1858,1859,5,1160,0,0,1859,1860,
        5,1213,0,0,1860,1865,3,70,35,0,1861,1862,5,1208,0,0,1862,1864,3,
        70,35,0,1863,1861,1,0,0,0,1864,1867,1,0,0,0,1865,1863,1,0,0,0,1865,
        1866,1,0,0,0,1866,1868,1,0,0,0,1867,1865,1,0,0,0,1868,1869,5,1214,
        0,0,1869,1870,5,1161,0,0,1870,1871,5,1213,0,0,1871,1872,3,70,35,
        0,1872,1873,5,1214,0,0,1873,1874,5,1162,0,0,1874,1875,5,1213,0,0,
        1875,1880,3,70,35,0,1876,1877,5,1208,0,0,1877,1879,3,70,35,0,1878,
        1876,1,0,0,0,1879,1882,1,0,0,0,1880,1878,1,0,0,0,1880,1881,1,0,0,
        0,1881,1883,1,0,0,0,1882,1880,1,0,0,0,1883,1900,5,1214,0,0,1884,
        1885,5,1163,0,0,1885,1886,5,1213,0,0,1886,1891,3,70,35,0,1887,1888,
        5,1208,0,0,1888,1890,3,70,35,0,1889,1887,1,0,0,0,1890,1893,1,0,0,
        0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,1894,1,0,0,0,1893,1891,
        1,0,0,0,1894,1895,5,1214,0,0,1895,1896,5,1164,0,0,1896,1897,5,1213,
        0,0,1897,1898,3,70,35,0,1898,1899,5,1214,0,0,1899,1901,1,0,0,0,1900,
        1884,1,0,0,0,1900,1901,1,0,0,0,1901,225,1,0,0,0,1902,1903,5,1165,
        0,0,1903,1904,5,1213,0,0,1904,1905,3,236,118,0,1905,1906,5,457,0,
        0,1906,1907,5,1213,0,0,1907,1911,3,252,126,0,1908,1910,3,256,128,
        0,1909,1908,1,0,0,0,1910,1913,1,0,0,0,1911,1909,1,0,0,0,1911,1912,
        1,0,0,0,1912,1914,1,0,0,0,1913,1911,1,0,0,0,1914,1915,5,1214,0,0,
        1915,1916,5,1214,0,0,1916,227,1,0,0,0,1917,1919,3,378,189,0,1918,
        1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,1920,1921,5,1184,
        0,0,1921,1922,5,1213,0,0,1922,1923,5,286,0,0,1923,1924,3,496,248,
        0,1924,1925,5,457,0,0,1925,1926,5,1187,0,0,1926,1927,5,1213,0,0,
        1927,1928,3,70,35,0,1928,1929,5,1214,0,0,1929,1930,5,1188,0,0,1930,
        1931,5,1213,0,0,1931,1932,3,70,35,0,1932,1933,5,1214,0,0,1933,1934,
        5,1214,0,0,1934,229,1,0,0,0,1935,1937,3,378,189,0,1936,1935,1,0,
        0,0,1936,1937,1,0,0,0,1937,1938,1,0,0,0,1938,1939,5,1183,0,0,1939,
        1940,5,1213,0,0,1940,1941,5,286,0,0,1941,1948,3,496,248,0,1942,1944,
        5,457,0,0,1943,1945,3,246,123,0,1944,1943,1,0,0,0,1945,1946,1,0,
        0,0,1946,1944,1,0,0,0,1946,1947,1,0,0,0,1947,1949,1,0,0,0,1948,1942,
        1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,1951,5,1214,0,0,
        1951,231,1,0,0,0,1952,1954,3,378,189,0,1953,1952,1,0,0,0,1953,1954,
        1,0,0,0,1954,1955,1,0,0,0,1955,1956,5,1182,0,0,1956,1957,5,1213,
        0,0,1957,1958,5,286,0,0,1958,1959,3,496,248,0,1959,1960,5,457,0,
        0,1960,1961,5,1187,0,0,1961,1962,5,1213,0,0,1962,1963,3,70,35,0,
        1963,1964,5,1214,0,0,1964,1965,5,1188,0,0,1965,1966,5,1213,0,0,1966,
        1971,3,70,35,0,1967,1968,5,1208,0,0,1968,1970,3,70,35,0,1969,1967,
        1,0,0,0,1970,1973,1,0,0,0,1971,1969,1,0,0,0,1971,1972,1,0,0,0,1972,
        1974,1,0,0,0,1973,1971,1,0,0,0,1974,1975,5,1214,0,0,1975,1976,5,
        1189,0,0,1976,1977,5,1213,0,0,1977,1982,3,70,35,0,1978,1979,5,1208,
        0,0,1979,1981,3,70,35,0,1980,1978,1,0,0,0,1981,1984,1,0,0,0,1982,
        1980,1,0,0,0,1982,1983,1,0,0,0,1983,1985,1,0,0,0,1984,1982,1,0,0,
        0,1985,1991,5,1214,0,0,1986,1987,5,1190,0,0,1987,1988,5,1213,0,0,
        1988,1989,3,76,38,0,1989,1990,5,1214,0,0,1990,1992,1,0,0,0,1991,
        1986,1,0,0,0,1991,1992,1,0,0,0,1992,1998,1,0,0,0,1993,1994,5,1191,
        0,0,1994,1995,5,1213,0,0,1995,1996,3,76,38,0,1996,1997,5,1214,0,
        0,1997,1999,1,0,0,0,1998,1993,1,0,0,0,1998,1999,1,0,0,0,1999,2000,
        1,0,0,0,2000,2001,5,1214,0,0,2001,233,1,0,0,0,2002,2003,3,104,52,
        0,2003,2007,5,1213,0,0,2004,2006,3,236,118,0,2005,2004,1,0,0,0,2006,
        2009,1,0,0,0,2007,2005,1,0,0,0,2007,2008,1,0,0,0,2008,2011,1,0,0,
        0,2009,2007,1,0,0,0,2010,2012,3,238,119,0,2011,2010,1,0,0,0,2011,
        2012,1,0,0,0,2012,2016,1,0,0,0,2013,2015,3,240,120,0,2014,2013,1,
        0,0,0,2015,2018,1,0,0,0,2016,2014,1,0,0,0,2016,2017,1,0,0,0,2017,
        2020,1,0,0,0,2018,2016,1,0,0,0,2019,2021,3,242,121,0,2020,2019,1,
        0,0,0,2020,2021,1,0,0,0,2021,2022,1,0,0,0,2022,2023,5,1214,0,0,2023,
        235,1,0,0,0,2024,2027,5,286,0,0,2025,2028,3,104,52,0,2026,2028,3,
        496,248,0,2027,2025,1,0,0,0,2027,2026,1,0,0,0,2028,2031,1,0,0,0,
        2029,2030,5,20,0,0,2030,2032,3,120,60,0,2031,2029,1,0,0,0,2031,2032,
        1,0,0,0,2032,2035,1,0,0,0,2033,2036,3,248,124,0,2034,2036,5,635,
        0,0,2035,2033,1,0,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2050,
        1,0,0,0,2037,2039,5,224,0,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,
        2039,2040,1,0,0,0,2040,2041,5,291,0,0,2041,2042,5,42,0,0,2042,2047,
        3,300,150,0,2043,2044,5,1208,0,0,2044,2046,3,300,150,0,2045,2043,
        1,0,0,0,2046,2049,1,0,0,0,2047,2045,1,0,0,0,2047,2048,1,0,0,0,2048,
        2051,1,0,0,0,2049,2047,1,0,0,0,2050,2038,1,0,0,0,2050,2051,1,0,0,
        0,2051,237,1,0,0,0,2052,2053,5,144,0,0,2053,2054,5,236,0,0,2054,
        2055,5,1224,0,0,2055,2060,3,70,35,0,2056,2057,5,577,0,0,2057,2058,
        5,457,0,0,2058,2059,5,1224,0,0,2059,2061,3,70,35,0,2060,2056,1,0,
        0,0,2060,2061,1,0,0,0,2061,239,1,0,0,0,2062,2063,5,293,0,0,2063,
        2064,5,406,0,0,2064,2065,3,100,50,0,2065,2066,5,1213,0,0,2066,2067,
        3,104,52,0,2067,2068,5,1214,0,0,2068,241,1,0,0,0,2069,2071,5,457,
        0,0,2070,2072,3,244,122,0,2071,2070,1,0,0,0,2072,2073,1,0,0,0,2073,
        2071,1,0,0,0,2073,2074,1,0,0,0,2074,243,1,0,0,0,2075,2078,3,100,
        50,0,2076,2079,3,492,246,0,2077,2079,3,496,248,0,2078,2076,1,0,0,
        0,2078,2077,1,0,0,0,2079,245,1,0,0,0,2080,2081,7,19,0,0,2081,2082,
        5,1213,0,0,2082,2083,3,308,154,0,2083,2084,5,1214,0,0,2084,247,1,
        0,0,0,2085,2086,7,20,0,0,2086,2087,5,42,0,0,2087,2092,3,308,154,
        0,2088,2089,5,1208,0,0,2089,2091,3,308,154,0,2090,2088,1,0,0,0,2091,
        2094,1,0,0,0,2092,2090,1,0,0,0,2092,2093,1,0,0,0,2093,2099,1,0,0,
        0,2094,2092,1,0,0,0,2095,2096,5,840,0,0,2096,2097,5,42,0,0,2097,
        2099,5,18,0,0,2098,2085,1,0,0,0,2098,2095,1,0,0,0,2099,249,1,0,0,
        0,2100,2102,3,496,248,0,2101,2103,5,20,0,0,2102,2101,1,0,0,0,2102,
        2103,1,0,0,0,2103,2104,1,0,0,0,2104,2106,3,120,60,0,2105,2107,3,
        494,247,0,2106,2105,1,0,0,0,2106,2107,1,0,0,0,2107,251,1,0,0,0,2108,
        2109,5,1128,0,0,2109,2110,5,1213,0,0,2110,2111,5,1203,0,0,2111,2112,
        5,1214,0,0,2112,253,1,0,0,0,2113,2114,5,29,0,0,2114,2117,5,1213,
        0,0,2115,2118,3,102,51,0,2116,2118,3,70,35,0,2117,2115,1,0,0,0,2117,
        2116,1,0,0,0,2118,2119,1,0,0,0,2119,2120,5,1214,0,0,2120,2162,1,
        0,0,0,2121,2122,5,1155,0,0,2122,2123,5,1213,0,0,2123,2124,3,70,35,
        0,2124,2125,5,1214,0,0,2125,2162,1,0,0,0,2126,2127,5,1156,0,0,2127,
        2128,5,1213,0,0,2128,2129,3,70,35,0,2129,2130,5,1214,0,0,2130,2162,
        1,0,0,0,2131,2132,5,1157,0,0,2132,2133,5,1213,0,0,2133,2134,3,70,
        35,0,2134,2135,5,1214,0,0,2135,2162,1,0,0,0,2136,2137,5,1134,0,0,
        2137,2138,5,1213,0,0,2138,2139,3,70,35,0,2139,2140,5,1214,0,0,2140,
        2162,1,0,0,0,2141,2142,5,1158,0,0,2142,2143,5,1213,0,0,2143,2144,
        3,70,35,0,2144,2145,5,1214,0,0,2145,2162,1,0,0,0,2146,2147,5,1132,
        0,0,2147,2148,5,1213,0,0,2148,2149,3,70,35,0,2149,2150,5,1214,0,
        0,2150,2162,1,0,0,0,2151,2152,5,1133,0,0,2152,2153,5,1213,0,0,2153,
        2154,3,70,35,0,2154,2155,5,1214,0,0,2155,2162,1,0,0,0,2156,2157,
        5,1135,0,0,2157,2158,5,1213,0,0,2158,2159,3,70,35,0,2159,2160,5,
        1214,0,0,2160,2162,1,0,0,0,2161,2113,1,0,0,0,2161,2121,1,0,0,0,2161,
        2126,1,0,0,0,2161,2131,1,0,0,0,2161,2136,1,0,0,0,2161,2141,1,0,0,
        0,2161,2146,1,0,0,0,2161,2151,1,0,0,0,2161,2156,1,0,0,0,2162,255,
        1,0,0,0,2163,2164,5,29,0,0,2164,2167,5,1213,0,0,2165,2168,3,102,
        51,0,2166,2168,3,70,35,0,2167,2165,1,0,0,0,2167,2166,1,0,0,0,2168,
        2169,1,0,0,0,2169,2170,5,1214,0,0,2170,2217,1,0,0,0,2171,2172,5,
        1134,0,0,2172,2173,5,1213,0,0,2173,2174,3,70,35,0,2174,2175,5,1214,
        0,0,2175,2217,1,0,0,0,2176,2177,5,1166,0,0,2177,2178,5,1213,0,0,
        2178,2179,3,70,35,0,2179,2180,5,1214,0,0,2180,2217,1,0,0,0,2181,
        2182,5,1167,0,0,2182,2183,5,1213,0,0,2183,2184,3,70,35,0,2184,2185,
        5,1214,0,0,2185,2217,1,0,0,0,2186,2187,5,1168,0,0,2187,2188,5,1213,
        0,0,2188,2189,3,70,35,0,2189,2190,5,1214,0,0,2190,2217,1,0,0,0,2191,
        2192,5,1169,0,0,2192,2193,5,1213,0,0,2193,2194,3,70,35,0,2194,2195,
        5,1214,0,0,2195,2217,1,0,0,0,2196,2197,5,1170,0,0,2197,2198,5,1213,
        0,0,2198,2199,3,70,35,0,2199,2200,5,1214,0,0,2200,2217,1,0,0,0,2201,
        2202,5,1171,0,0,2202,2203,5,1213,0,0,2203,2204,3,70,35,0,2204,2205,
        5,1214,0,0,2205,2217,1,0,0,0,2206,2207,5,1172,0,0,2207,2208,5,1213,
        0,0,2208,2209,3,70,35,0,2209,2210,5,1214,0,0,2210,2217,1,0,0,0,2211,
        2212,5,1173,0,0,2212,2213,5,1213,0,0,2213,2214,3,70,35,0,2214,2215,
        5,1214,0,0,2215,2217,1,0,0,0,2216,2163,1,0,0,0,2216,2171,1,0,0,0,
        2216,2176,1,0,0,0,2216,2181,1,0,0,0,2216,2186,1,0,0,0,2216,2191,
        1,0,0,0,2216,2196,1,0,0,0,2216,2201,1,0,0,0,2216,2206,1,0,0,0,2216,
        2211,1,0,0,0,2217,257,1,0,0,0,2218,2219,5,474,0,0,2219,2221,3,308,
        154,0,2220,2222,3,262,131,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,
        2222,2230,1,0,0,0,2223,2224,5,1208,0,0,2224,2226,3,308,154,0,2225,
        2227,3,262,131,0,2226,2225,1,0,0,0,2226,2227,1,0,0,0,2227,2229,1,
        0,0,0,2228,2223,1,0,0,0,2229,2232,1,0,0,0,2230,2228,1,0,0,0,2230,
        2231,1,0,0,0,2231,2234,1,0,0,0,2232,2230,1,0,0,0,2233,2235,3,260,
        130,0,2234,2233,1,0,0,0,2234,2235,1,0,0,0,2235,259,1,0,0,0,2236,
        2237,5,42,0,0,2237,2242,3,302,151,0,2238,2239,5,1208,0,0,2239,2241,
        3,302,151,0,2240,2238,1,0,0,0,2241,2244,1,0,0,0,2242,2240,1,0,0,
        0,2242,2243,1,0,0,0,2243,261,1,0,0,0,2244,2242,1,0,0,0,2245,2246,
        5,1213,0,0,2246,2247,5,425,0,0,2247,2248,3,70,35,0,2248,2249,5,1214,
        0,0,2249,263,1,0,0,0,2250,2251,5,471,0,0,2251,2252,3,306,153,0,2252,
        265,1,0,0,0,2253,2254,5,174,0,0,2254,2255,5,42,0,0,2255,2266,3,268,
        134,0,2256,2257,5,174,0,0,2257,2258,5,42,0,0,2258,2261,3,268,134,
        0,2259,2260,5,1208,0,0,2260,2262,3,268,134,0,2261,2259,1,0,0,0,2262,
        2263,1,0,0,0,2263,2261,1,0,0,0,2263,2264,1,0,0,0,2264,2266,1,0,0,
        0,2265,2253,1,0,0,0,2265,2256,1,0,0,0,2266,267,1,0,0,0,2267,2272,
        3,270,135,0,2268,2272,3,276,138,0,2269,2272,3,278,139,0,2270,2272,
        3,280,140,0,2271,2267,1,0,0,0,2271,2268,1,0,0,0,2271,2269,1,0,0,
        0,2271,2270,1,0,0,0,2272,269,1,0,0,0,2273,2276,3,308,154,0,2274,
        2276,3,272,136,0,2275,2273,1,0,0,0,2275,2274,1,0,0,0,2276,2284,1,
        0,0,0,2277,2280,5,1208,0,0,2278,2281,3,308,154,0,2279,2281,3,272,
        136,0,2280,2278,1,0,0,0,2280,2279,1,0,0,0,2281,2283,1,0,0,0,2282,
        2277,1,0,0,0,2283,2286,1,0,0,0,2284,2282,1,0,0,0,2284,2285,1,0,0,
        0,2285,271,1,0,0,0,2286,2284,1,0,0,0,2287,2288,5,1213,0,0,2288,2291,
        3,308,154,0,2289,2290,5,1208,0,0,2290,2292,3,308,154,0,2291,2289,
        1,0,0,0,2292,2293,1,0,0,0,2293,2291,1,0,0,0,2293,2294,1,0,0,0,2294,
        2295,1,0,0,0,2295,2296,5,1214,0,0,2296,273,1,0,0,0,2297,2298,5,1213,
        0,0,2298,2299,5,1214,0,0,2299,275,1,0,0,0,2300,2301,5,360,0,0,2301,
        2302,5,1213,0,0,2302,2303,3,270,135,0,2303,2304,5,1214,0,0,2304,
        277,1,0,0,0,2305,2306,5,92,0,0,2306,2307,5,1213,0,0,2307,2308,3,
        270,135,0,2308,2309,5,1214,0,0,2309,279,1,0,0,0,2310,2311,5,175,
        0,0,2311,2312,5,374,0,0,2312,2313,5,1213,0,0,2313,2318,3,282,141,
        0,2314,2315,5,1208,0,0,2315,2317,3,282,141,0,2316,2314,1,0,0,0,2317,
        2320,1,0,0,0,2318,2316,1,0,0,0,2318,2319,1,0,0,0,2319,2321,1,0,0,
        0,2320,2318,1,0,0,0,2321,2322,5,1214,0,0,2322,281,1,0,0,0,2323,2329,
        3,270,135,0,2324,2329,3,274,137,0,2325,2329,3,276,138,0,2326,2329,
        3,278,139,0,2327,2329,3,280,140,0,2328,2323,1,0,0,0,2328,2324,1,
        0,0,0,2328,2325,1,0,0,0,2328,2326,1,0,0,0,2328,2327,1,0,0,0,2329,
        283,1,0,0,0,2330,2331,5,183,0,0,2331,2332,3,306,153,0,2332,285,1,
        0,0,0,2333,2334,5,315,0,0,2334,2335,3,306,153,0,2335,287,1,0,0,0,
        2336,2339,5,365,0,0,2337,2338,5,474,0,0,2338,2340,5,883,0,0,2339,
        2337,1,0,0,0,2339,2340,1,0,0,0,2340,2343,1,0,0,0,2341,2342,5,872,
        0,0,2342,2344,5,498,0,0,2343,2341,1,0,0,0,2343,2344,1,0,0,0,2344,
        2348,1,0,0,0,2345,2349,3,290,145,0,2346,2349,3,292,146,0,2347,2349,
        3,294,147,0,2348,2345,1,0,0,0,2348,2346,1,0,0,0,2348,2347,1,0,0,
        0,2349,289,1,0,0,0,2350,2355,3,80,40,0,2351,2352,5,1208,0,0,2352,
        2354,3,80,40,0,2353,2351,1,0,0,0,2354,2357,1,0,0,0,2355,2353,1,0,
        0,0,2355,2356,1,0,0,0,2356,291,1,0,0,0,2357,2355,1,0,0,0,2358,2363,
        3,76,38,0,2359,2360,5,1208,0,0,2360,2362,3,76,38,0,2361,2359,1,0,
        0,0,2362,2365,1,0,0,0,2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,293,
        1,0,0,0,2365,2363,1,0,0,0,2366,2367,5,470,0,0,2367,2368,3,306,153,
        0,2368,2371,5,419,0,0,2369,2372,3,290,145,0,2370,2372,3,292,146,
        0,2371,2369,1,0,0,0,2371,2370,1,0,0,0,2372,2374,1,0,0,0,2373,2366,
        1,0,0,0,2374,2375,1,0,0,0,2375,2373,1,0,0,0,2375,2376,1,0,0,0,2376,
        2382,1,0,0,0,2377,2380,5,131,0,0,2378,2381,3,290,145,0,2379,2381,
        3,292,146,0,2380,2378,1,0,0,0,2380,2379,1,0,0,0,2381,2383,1,0,0,
        0,2382,2377,1,0,0,0,2382,2383,1,0,0,0,2383,2384,1,0,0,0,2384,2385,
        5,134,0,0,2385,295,1,0,0,0,2386,2387,5,148,0,0,2387,2388,5,286,0,
        0,2388,2390,3,308,154,0,2389,2391,5,20,0,0,2390,2389,1,0,0,0,2390,
        2391,1,0,0,0,2391,2392,1,0,0,0,2392,2406,3,120,60,0,2393,2404,5,
        42,0,0,2394,2405,3,90,45,0,2395,2397,5,505,0,0,2396,2398,5,853,0,
        0,2397,2396,1,0,0,0,2397,2398,1,0,0,0,2398,2399,1,0,0,0,2399,2402,
        3,142,71,0,2400,2401,5,24,0,0,2401,2403,3,86,43,0,2402,2400,1,0,
        0,0,2402,2403,1,0,0,0,2403,2405,1,0,0,0,2404,2394,1,0,0,0,2404,2395,
        1,0,0,0,2405,2407,1,0,0,0,2406,2393,1,0,0,0,2406,2407,1,0,0,0,2407,
        2410,1,0,0,0,2408,2409,5,159,0,0,2409,2411,3,308,154,0,2410,2408,
        1,0,0,0,2410,2411,1,0,0,0,2411,297,1,0,0,0,2412,2413,5,291,0,0,2413,
        2414,5,42,0,0,2414,2419,3,300,150,0,2415,2416,5,1208,0,0,2416,2418,
        3,300,150,0,2417,2415,1,0,0,0,2418,2421,1,0,0,0,2419,2417,1,0,0,
        0,2419,2420,1,0,0,0,2420,299,1,0,0,0,2421,2419,1,0,0,0,2422,2424,
        3,308,154,0,2423,2425,7,21,0,0,2424,2423,1,0,0,0,2424,2425,1,0,0,
        0,2425,2428,1,0,0,0,2426,2427,5,806,0,0,2427,2429,7,22,0,0,2428,
        2426,1,0,0,0,2428,2429,1,0,0,0,2429,301,1,0,0,0,2430,2432,3,308,
        154,0,2431,2433,7,21,0,0,2432,2431,1,0,0,0,2432,2433,1,0,0,0,2433,
        303,1,0,0,0,2434,2435,5,474,0,0,2435,2436,5,59,0,0,2436,2437,5,289,
        0,0,2437,305,1,0,0,0,2438,2439,6,153,-1,0,2439,2440,3,308,154,0,
        2440,2441,3,508,254,0,2441,2442,3,308,154,0,2442,2685,1,0,0,0,2443,
        2444,3,308,154,0,2444,2445,3,508,254,0,2445,2446,3,510,255,0,2446,
        2450,3,488,244,0,2447,2449,3,388,194,0,2448,2447,1,0,0,0,2449,2452,
        1,0,0,0,2450,2448,1,0,0,0,2450,2451,1,0,0,0,2451,2685,1,0,0,0,2452,
        2450,1,0,0,0,2453,2454,3,310,155,0,2454,2455,3,508,254,0,2455,2456,
        3,510,255,0,2456,2460,3,488,244,0,2457,2459,3,388,194,0,2458,2457,
        1,0,0,0,2459,2462,1,0,0,0,2460,2458,1,0,0,0,2460,2461,1,0,0,0,2461,
        2685,1,0,0,0,2462,2460,1,0,0,0,2463,2465,3,308,154,0,2464,2466,7,
        8,0,0,2465,2464,1,0,0,0,2465,2466,1,0,0,0,2466,2467,1,0,0,0,2467,
        2468,5,35,0,0,2468,2469,3,308,154,0,2469,2470,5,16,0,0,2470,2471,
        3,308,154,0,2471,2685,1,0,0,0,2472,2474,3,308,154,0,2473,2475,5,
        207,0,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,2477,1,0,0,0,2476,
        2478,7,8,0,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,2478,2479,1,0,0,
        0,2479,2481,5,190,0,0,2480,2482,3,510,255,0,2481,2480,1,0,0,0,2481,
        2482,1,0,0,0,2482,2483,1,0,0,0,2483,2487,3,490,245,0,2484,2486,3,
        388,194,0,2485,2484,1,0,0,0,2486,2489,1,0,0,0,2487,2485,1,0,0,0,
        2487,2488,1,0,0,0,2488,2685,1,0,0,0,2489,2487,1,0,0,0,2490,2492,
        3,308,154,0,2491,2493,5,207,0,0,2492,2491,1,0,0,0,2492,2493,1,0,
        0,0,2493,2495,1,0,0,0,2494,2496,7,8,0,0,2495,2494,1,0,0,0,2495,2496,
        1,0,0,0,2496,2497,1,0,0,0,2497,2499,5,190,0,0,2498,2500,3,510,255,
        0,2499,2498,1,0,0,0,2499,2500,1,0,0,0,2500,2501,1,0,0,0,2501,2505,
        3,496,248,0,2502,2504,3,388,194,0,2503,2502,1,0,0,0,2504,2507,1,
        0,0,0,2505,2503,1,0,0,0,2505,2506,1,0,0,0,2506,2685,1,0,0,0,2507,
        2505,1,0,0,0,2508,2510,3,308,154,0,2509,2511,5,207,0,0,2510,2509,
        1,0,0,0,2510,2511,1,0,0,0,2511,2513,1,0,0,0,2512,2514,7,8,0,0,2513,
        2512,1,0,0,0,2513,2514,1,0,0,0,2514,2515,1,0,0,0,2515,2517,5,190,
        0,0,2516,2518,3,510,255,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,
        2519,1,0,0,0,2519,2523,3,308,154,0,2520,2522,3,388,194,0,2521,2520,
        1,0,0,0,2522,2525,1,0,0,0,2523,2521,1,0,0,0,2523,2524,1,0,0,0,2524,
        2685,1,0,0,0,2525,2523,1,0,0,0,2526,2528,3,310,155,0,2527,2529,5,
        207,0,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,2531,1,0,0,0,2530,
        2532,7,8,0,0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,2533,1,0,0,
        0,2533,2535,5,190,0,0,2534,2536,3,510,255,0,2535,2534,1,0,0,0,2535,
        2536,1,0,0,0,2536,2537,1,0,0,0,2537,2541,3,496,248,0,2538,2540,3,
        388,194,0,2539,2538,1,0,0,0,2540,2543,1,0,0,0,2541,2539,1,0,0,0,
        2541,2542,1,0,0,0,2542,2685,1,0,0,0,2543,2541,1,0,0,0,2544,2546,
        3,308,154,0,2545,2547,7,8,0,0,2546,2545,1,0,0,0,2546,2547,1,0,0,
        0,2547,2548,1,0,0,0,2548,2549,5,220,0,0,2549,2552,3,308,154,0,2550,
        2551,5,140,0,0,2551,2553,3,308,154,0,2552,2550,1,0,0,0,2552,2553,
        1,0,0,0,2553,2685,1,0,0,0,2554,2556,3,308,154,0,2555,2557,7,8,0,
        0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,2557,2558,1,0,0,0,2558,2559,
        5,220,0,0,2559,2560,3,510,255,0,2560,2564,3,488,244,0,2561,2563,
        3,388,194,0,2562,2561,1,0,0,0,2563,2566,1,0,0,0,2564,2562,1,0,0,
        0,2564,2565,1,0,0,0,2565,2569,1,0,0,0,2566,2564,1,0,0,0,2567,2568,
        5,140,0,0,2568,2570,3,308,154,0,2569,2567,1,0,0,0,2569,2570,1,0,
        0,0,2570,2574,1,0,0,0,2571,2573,3,388,194,0,2572,2571,1,0,0,0,2573,
        2576,1,0,0,0,2574,2572,1,0,0,0,2574,2575,1,0,0,0,2575,2685,1,0,0,
        0,2576,2574,1,0,0,0,2577,2579,3,310,155,0,2578,2580,7,8,0,0,2579,
        2578,1,0,0,0,2579,2580,1,0,0,0,2580,2581,1,0,0,0,2581,2582,5,220,
        0,0,2582,2583,3,510,255,0,2583,2587,3,488,244,0,2584,2586,3,388,
        194,0,2585,2584,1,0,0,0,2586,2589,1,0,0,0,2587,2585,1,0,0,0,2587,
        2588,1,0,0,0,2588,2592,1,0,0,0,2589,2587,1,0,0,0,2590,2591,5,140,
        0,0,2591,2593,3,308,154,0,2592,2590,1,0,0,0,2592,2593,1,0,0,0,2593,
        2597,1,0,0,0,2594,2596,3,388,194,0,2595,2594,1,0,0,0,2596,2599,1,
        0,0,0,2597,2595,1,0,0,0,2597,2598,1,0,0,0,2598,2685,1,0,0,0,2599,
        2597,1,0,0,0,2600,2602,7,8,0,0,2601,2600,1,0,0,0,2601,2602,1,0,0,
        0,2602,2603,1,0,0,0,2603,2604,5,145,0,0,2604,2685,3,496,248,0,2605,
        2606,7,8,0,0,2606,2685,3,306,153,13,2607,2608,3,308,154,0,2608,2610,
        5,207,0,0,2609,2611,7,8,0,0,2610,2609,1,0,0,0,2610,2611,1,0,0,0,
        2611,2612,1,0,0,0,2612,2613,5,274,0,0,2613,2685,1,0,0,0,2614,2616,
        3,308,154,0,2615,2617,7,8,0,0,2616,2615,1,0,0,0,2616,2617,1,0,0,
        0,2617,2618,1,0,0,0,2618,2619,5,77,0,0,2619,2620,3,308,154,0,2620,
        2685,1,0,0,0,2621,2623,3,308,154,0,2622,2624,7,8,0,0,2623,2622,1,
        0,0,0,2623,2624,1,0,0,0,2624,2625,1,0,0,0,2625,2626,5,136,0,0,2626,
        2627,3,308,154,0,2627,2685,1,0,0,0,2628,2630,3,308,154,0,2629,2631,
        7,8,0,0,2630,2629,1,0,0,0,2630,2631,1,0,0,0,2631,2632,1,0,0,0,2632,
        2633,5,765,0,0,2633,2634,3,308,154,0,2634,2685,1,0,0,0,2635,2637,
        3,308,154,0,2636,2638,7,8,0,0,2637,2636,1,0,0,0,2637,2638,1,0,0,
        0,2638,2639,1,0,0,0,2639,2640,5,857,0,0,2640,2641,3,308,154,0,2641,
        2685,1,0,0,0,2642,2644,3,308,154,0,2643,2645,7,8,0,0,2644,2643,1,
        0,0,0,2644,2645,1,0,0,0,2645,2646,1,0,0,0,2646,2647,5,947,0,0,2647,
        2648,3,308,154,0,2648,2685,1,0,0,0,2649,2650,3,308,154,0,2650,2651,
        5,698,0,0,2651,2652,5,857,0,0,2652,2653,3,308,154,0,2653,2685,1,
        0,0,0,2654,2655,3,308,154,0,2655,2656,5,698,0,0,2656,2657,5,947,
        0,0,2657,2658,3,308,154,0,2658,2685,1,0,0,0,2659,2668,3,308,154,
        0,2660,2661,5,1213,0,0,2661,2662,3,308,154,0,2662,2663,5,1208,0,
        0,2663,2664,3,308,154,0,2664,2665,5,1214,0,0,2665,2668,1,0,0,0,2666,
        2668,3,496,248,0,2667,2659,1,0,0,0,2667,2660,1,0,0,0,2667,2666,1,
        0,0,0,2668,2669,1,0,0,0,2669,2678,5,296,0,0,2670,2679,3,308,154,
        0,2671,2672,5,1213,0,0,2672,2673,3,308,154,0,2673,2674,5,1208,0,
        0,2674,2675,3,308,154,0,2675,2676,5,1214,0,0,2676,2679,1,0,0,0,2677,
        2679,3,496,248,0,2678,2670,1,0,0,0,2678,2671,1,0,0,0,2678,2677,1,
        0,0,0,2679,2685,1,0,0,0,2680,2681,5,1213,0,0,2681,2682,3,306,153,
        0,2682,2683,5,1214,0,0,2683,2685,1,0,0,0,2684,2438,1,0,0,0,2684,
        2443,1,0,0,0,2684,2453,1,0,0,0,2684,2463,1,0,0,0,2684,2472,1,0,0,
        0,2684,2490,1,0,0,0,2684,2508,1,0,0,0,2684,2526,1,0,0,0,2684,2544,
        1,0,0,0,2684,2554,1,0,0,0,2684,2577,1,0,0,0,2684,2601,1,0,0,0,2684,
        2605,1,0,0,0,2684,2607,1,0,0,0,2684,2614,1,0,0,0,2684,2621,1,0,0,
        0,2684,2628,1,0,0,0,2684,2635,1,0,0,0,2684,2642,1,0,0,0,2684,2649,
        1,0,0,0,2684,2654,1,0,0,0,2684,2667,1,0,0,0,2684,2680,1,0,0,0,2685,
        2694,1,0,0,0,2686,2687,10,12,0,0,2687,2688,5,16,0,0,2688,2693,3,
        306,153,13,2689,2690,10,11,0,0,2690,2691,5,290,0,0,2691,2693,3,306,
        153,12,2692,2686,1,0,0,0,2692,2689,1,0,0,0,2693,2696,1,0,0,0,2694,
        2692,1,0,0,0,2694,2695,1,0,0,0,2695,307,1,0,0,0,2696,2694,1,0,0,
        0,2697,2698,6,154,-1,0,2698,2774,3,66,33,0,2699,2700,7,3,0,0,2700,
        2774,3,308,154,70,2701,2774,3,314,157,0,2702,2774,3,376,188,0,2703,
        2774,3,96,48,0,2704,2774,3,326,163,0,2705,2774,3,500,250,0,2706,
        2774,3,502,251,0,2707,2774,3,504,252,0,2708,2710,5,265,0,0,2709,
        2711,3,30,15,0,2710,2709,1,0,0,0,2710,2711,1,0,0,0,2711,2712,1,0,
        0,0,2712,2713,3,136,68,0,2713,2722,5,1213,0,0,2714,2719,3,308,154,
        0,2715,2716,5,1208,0,0,2716,2718,3,308,154,0,2717,2715,1,0,0,0,2718,
        2721,1,0,0,0,2719,2717,1,0,0,0,2719,2720,1,0,0,0,2720,2723,1,0,0,
        0,2721,2719,1,0,0,0,2722,2714,1,0,0,0,2722,2723,1,0,0,0,2723,2724,
        1,0,0,0,2724,2725,5,1214,0,0,2725,2774,1,0,0,0,2726,2727,5,265,0,
        0,2727,2728,5,720,0,0,2728,2729,5,1213,0,0,2729,2732,3,308,154,0,
        2730,2731,5,1208,0,0,2731,2733,7,23,0,0,2732,2730,1,0,0,0,2732,2733,
        1,0,0,0,2733,2734,1,0,0,0,2734,2735,5,1214,0,0,2735,2774,1,0,0,0,
        2736,2737,5,265,0,0,2737,2738,5,466,0,0,2738,2739,5,1213,0,0,2739,
        2744,3,308,154,0,2740,2742,5,20,0,0,2741,2740,1,0,0,0,2741,2742,
        1,0,0,0,2742,2743,1,0,0,0,2743,2745,3,120,60,0,2744,2741,1,0,0,0,
        2744,2745,1,0,0,0,2745,2756,1,0,0,0,2746,2747,5,1208,0,0,2747,2752,
        3,308,154,0,2748,2750,5,20,0,0,2749,2748,1,0,0,0,2749,2750,1,0,0,
        0,2750,2751,1,0,0,0,2751,2753,3,120,60,0,2752,2749,1,0,0,0,2752,
        2753,1,0,0,0,2753,2755,1,0,0,0,2754,2746,1,0,0,0,2755,2758,1,0,0,
        0,2756,2754,1,0,0,0,2756,2757,1,0,0,0,2757,2759,1,0,0,0,2758,2756,
        1,0,0,0,2759,2760,5,1214,0,0,2760,2774,1,0,0,0,2761,2762,5,265,0,
        0,2762,2763,5,1042,0,0,2763,2764,5,1213,0,0,2764,2765,3,308,154,
        0,2765,2766,5,1214,0,0,2766,2774,1,0,0,0,2767,2774,3,330,165,0,2768,
        2769,5,1213,0,0,2769,2770,3,308,154,0,2770,2771,5,1214,0,0,2771,
        2774,1,0,0,0,2772,2774,3,496,248,0,2773,2697,1,0,0,0,2773,2699,1,
        0,0,0,2773,2701,1,0,0,0,2773,2702,1,0,0,0,2773,2703,1,0,0,0,2773,
        2704,1,0,0,0,2773,2705,1,0,0,0,2773,2706,1,0,0,0,2773,2707,1,0,0,
        0,2773,2708,1,0,0,0,2773,2726,1,0,0,0,2773,2736,1,0,0,0,2773,2761,
        1,0,0,0,2773,2767,1,0,0,0,2773,2768,1,0,0,0,2773,2772,1,0,0,0,2774,
        3180,1,0,0,0,2775,2776,10,69,0,0,2776,2777,5,1223,0,0,2777,3179,
        3,308,154,69,2778,2779,10,68,0,0,2779,2780,7,24,0,0,2780,3179,3,
        308,154,69,2781,2782,10,67,0,0,2782,2783,5,251,0,0,2783,3179,3,308,
        154,67,2784,2785,10,66,0,0,2785,2786,7,3,0,0,2786,3179,3,308,154,
        67,2787,2788,10,65,0,0,2788,2789,7,25,0,0,2789,3179,3,308,154,66,
        2790,2791,10,57,0,0,2791,2792,5,835,0,0,2792,3179,3,308,154,58,2793,
        2794,10,56,0,0,2794,2795,7,26,0,0,2795,3179,3,308,154,57,2796,2797,
        10,61,0,0,2797,3179,3,486,243,0,2798,2799,10,60,0,0,2799,2800,5,
        1222,0,0,2800,2801,3,308,154,0,2801,2802,3,328,164,0,2802,3179,1,
        0,0,0,2803,2805,10,58,0,0,2804,2806,3,388,194,0,2805,2804,1,0,0,
        0,2806,2807,1,0,0,0,2807,2805,1,0,0,0,2807,2808,1,0,0,0,2808,3179,
        1,0,0,0,2809,2810,10,52,0,0,2810,2811,5,1209,0,0,2811,3179,3,100,
        50,0,2812,2813,10,51,0,0,2813,2814,5,1209,0,0,2814,3179,5,1219,0,
        0,2815,2816,10,50,0,0,2816,2817,5,1215,0,0,2817,2818,5,1219,0,0,
        2818,3179,5,1216,0,0,2819,2820,10,49,0,0,2820,2821,5,1215,0,0,2821,
        2822,3,76,38,0,2822,2823,5,1207,0,0,2823,2826,3,76,38,0,2824,2825,
        5,1207,0,0,2825,2827,3,76,38,0,2826,2824,1,0,0,0,2826,2827,1,0,0,
        0,2827,2828,1,0,0,0,2828,2829,5,1216,0,0,2829,3179,1,0,0,0,2830,
        2831,10,48,0,0,2831,2832,5,1209,0,0,2832,2833,5,1209,0,0,2833,3179,
        3,100,50,0,2834,2835,10,47,0,0,2835,2836,5,1209,0,0,2836,2837,5,
        1209,0,0,2837,3179,5,1219,0,0,2838,2839,10,46,0,0,2839,2840,5,1209,
        0,0,2840,2841,5,1209,0,0,2841,2842,5,1215,0,0,2842,2843,3,76,38,
        0,2843,2844,5,1216,0,0,2844,3179,1,0,0,0,2845,2846,10,45,0,0,2846,
        2847,5,1209,0,0,2847,2848,5,1209,0,0,2848,2849,5,1215,0,0,2849,2850,
        5,1219,0,0,2850,3179,5,1216,0,0,2851,2852,10,44,0,0,2852,2853,5,
        1209,0,0,2853,2854,5,1209,0,0,2854,2855,5,1215,0,0,2855,2856,3,76,
        38,0,2856,2857,5,1207,0,0,2857,2860,3,76,38,0,2858,2859,5,1207,0,
        0,2859,2861,3,76,38,0,2860,2858,1,0,0,0,2860,2861,1,0,0,0,2861,2862,
        1,0,0,0,2862,2863,5,1216,0,0,2863,3179,1,0,0,0,2864,2865,10,43,0,
        0,2865,2866,5,1209,0,0,2866,2867,5,1108,0,0,2867,2869,5,1213,0,0,
        2868,2870,3,70,35,0,2869,2868,1,0,0,0,2869,2870,1,0,0,0,2870,2871,
        1,0,0,0,2871,3179,5,1214,0,0,2872,2873,10,42,0,0,2873,2874,5,1209,
        0,0,2874,2875,5,1109,0,0,2875,2876,5,1213,0,0,2876,3179,5,1214,0,
        0,2877,2878,10,41,0,0,2878,2879,5,1209,0,0,2879,2880,5,1110,0,0,
        2880,2881,5,1213,0,0,2881,2884,3,308,154,0,2882,2883,5,1208,0,0,
        2883,2885,3,70,35,0,2884,2882,1,0,0,0,2884,2885,1,0,0,0,2885,2886,
        1,0,0,0,2886,2887,5,1214,0,0,2887,3179,1,0,0,0,2888,2889,10,40,0,
        0,2889,2890,5,1209,0,0,2890,2891,5,1111,0,0,2891,2892,5,1213,0,0,
        2892,2893,3,308,154,0,2893,2894,5,1214,0,0,2894,3179,1,0,0,0,2895,
        2896,10,39,0,0,2896,2897,5,1209,0,0,2897,2898,5,1112,0,0,2898,2899,
        5,1213,0,0,2899,2900,3,308,154,0,2900,2901,5,1214,0,0,2901,3179,
        1,0,0,0,2902,2903,10,38,0,0,2903,2904,5,1209,0,0,2904,2905,5,1113,
        0,0,2905,2906,5,1213,0,0,2906,2907,3,308,154,0,2907,2908,5,1214,
        0,0,2908,3179,1,0,0,0,2909,2910,10,37,0,0,2910,2911,5,1209,0,0,2911,
        2912,5,1114,0,0,2912,2913,5,1213,0,0,2913,2914,3,308,154,0,2914,
        2915,5,1214,0,0,2915,3179,1,0,0,0,2916,2917,10,36,0,0,2917,2918,
        5,1209,0,0,2918,2919,5,1115,0,0,2919,2920,5,1213,0,0,2920,2921,3,
        76,38,0,2921,2922,5,1214,0,0,2922,3179,1,0,0,0,2923,2924,10,35,0,
        0,2924,2925,5,1209,0,0,2925,2926,5,1116,0,0,2926,2927,5,1213,0,0,
        2927,3179,5,1214,0,0,2928,2929,10,34,0,0,2929,2930,5,1209,0,0,2930,
        2931,5,1117,0,0,2931,2932,5,1213,0,0,2932,2933,3,70,35,0,2933,2934,
        5,1214,0,0,2934,3179,1,0,0,0,2935,2936,10,33,0,0,2936,2937,5,1209,
        0,0,2937,2938,5,1118,0,0,2938,2939,5,1213,0,0,2939,2940,3,308,154,
        0,2940,2941,5,1214,0,0,2941,3179,1,0,0,0,2942,2943,10,32,0,0,2943,
        2944,5,1209,0,0,2944,2945,5,1119,0,0,2945,2946,5,1213,0,0,2946,3179,
        5,1214,0,0,2947,2948,10,31,0,0,2948,2949,5,1209,0,0,2949,2950,5,
        1120,0,0,2950,2954,5,1213,0,0,2951,2952,3,308,154,0,2952,2953,5,
        1208,0,0,2953,2955,1,0,0,0,2954,2951,1,0,0,0,2954,2955,1,0,0,0,2955,
        2956,1,0,0,0,2956,2957,3,308,154,0,2957,2958,5,1208,0,0,2958,2959,
        3,308,154,0,2959,2960,5,1214,0,0,2960,3179,1,0,0,0,2961,2962,10,
        30,0,0,2962,2963,5,1209,0,0,2963,2964,5,1121,0,0,2964,2965,5,1213,
        0,0,2965,3179,5,1214,0,0,2966,2967,10,29,0,0,2967,2968,5,1209,0,
        0,2968,2969,5,1122,0,0,2969,2970,5,1213,0,0,2970,3179,5,1214,0,0,
        2971,2972,10,28,0,0,2972,2973,5,1209,0,0,2973,2974,5,1123,0,0,2974,
        2975,5,1213,0,0,2975,2976,3,308,154,0,2976,2977,5,1208,0,0,2977,
        2978,3,308,154,0,2978,2979,5,1208,0,0,2979,2980,3,308,154,0,2980,
        2981,5,1214,0,0,2981,3179,1,0,0,0,2982,2983,10,27,0,0,2983,2984,
        5,1209,0,0,2984,2985,5,1124,0,0,2985,2986,5,1213,0,0,2986,3179,5,
        1214,0,0,2987,2988,10,26,0,0,2988,2989,5,1209,0,0,2989,2990,5,1125,
        0,0,2990,2994,5,1213,0,0,2991,2992,3,308,154,0,2992,2993,5,1208,
        0,0,2993,2995,1,0,0,0,2994,2991,1,0,0,0,2994,2995,1,0,0,0,2995,2996,
        1,0,0,0,2996,2997,3,308,154,0,2997,2998,5,1208,0,0,2998,2999,3,308,
        154,0,2999,3000,5,1214,0,0,3000,3179,1,0,0,0,3001,3002,10,25,0,0,
        3002,3003,5,1209,0,0,3003,3004,5,1126,0,0,3004,3005,5,1213,0,0,3005,
        3006,3,308,154,0,3006,3007,5,1208,0,0,3007,3008,3,308,154,0,3008,
        3009,5,1214,0,0,3009,3179,1,0,0,0,3010,3011,10,20,0,0,3011,3012,
        5,1215,0,0,3012,3017,3,76,38,0,3013,3014,5,1208,0,0,3014,3016,3,
        76,38,0,3015,3013,1,0,0,0,3016,3019,1,0,0,0,3017,3015,1,0,0,0,3017,
        3018,1,0,0,0,3018,3020,1,0,0,0,3019,3017,1,0,0,0,3020,3021,5,1216,
        0,0,3021,3179,1,0,0,0,3022,3023,10,19,0,0,3023,3024,5,1209,0,0,3024,
        3025,5,564,0,0,3025,3027,5,1213,0,0,3026,3028,3,506,253,0,3027,3026,
        1,0,0,0,3027,3028,1,0,0,0,3028,3029,1,0,0,0,3029,3179,5,1214,0,0,
        3030,3031,10,18,0,0,3031,3032,5,1209,0,0,3032,3033,5,517,0,0,3033,
        3034,5,1213,0,0,3034,3037,3,308,154,0,3035,3036,5,1208,0,0,3036,
        3038,3,506,253,0,3037,3035,1,0,0,0,3037,3038,1,0,0,0,3038,3039,1,
        0,0,0,3039,3040,5,1214,0,0,3040,3179,1,0,0,0,3041,3042,10,17,0,0,
        3042,3043,5,1209,0,0,3043,3044,7,27,0,0,3044,3045,5,1213,0,0,3045,
        3048,3,308,154,0,3046,3047,5,1208,0,0,3047,3049,3,506,253,0,3048,
        3046,1,0,0,0,3048,3049,1,0,0,0,3049,3050,1,0,0,0,3050,3051,5,1214,
        0,0,3051,3179,1,0,0,0,3052,3053,10,16,0,0,3053,3054,5,1209,0,0,3054,
        3055,7,28,0,0,3055,3056,5,1213,0,0,3056,3059,3,308,154,0,3057,3058,
        5,1208,0,0,3058,3060,3,506,253,0,3059,3057,1,0,0,0,3059,3060,1,0,
        0,0,3060,3061,1,0,0,0,3061,3062,5,1214,0,0,3062,3179,1,0,0,0,3063,
        3064,10,15,0,0,3064,3065,5,1209,0,0,3065,3066,7,29,0,0,3066,3068,
        5,1213,0,0,3067,3069,3,506,253,0,3068,3067,1,0,0,0,3068,3069,1,0,
        0,0,3069,3070,1,0,0,0,3070,3179,5,1214,0,0,3071,3072,10,14,0,0,3072,
        3073,5,1209,0,0,3073,3074,5,518,0,0,3074,3080,5,1213,0,0,3075,3078,
        3,506,253,0,3076,3077,5,1208,0,0,3077,3079,3,308,154,0,3078,3076,
        1,0,0,0,3078,3079,1,0,0,0,3079,3081,1,0,0,0,3080,3075,1,0,0,0,3080,
        3081,1,0,0,0,3081,3082,1,0,0,0,3082,3179,5,1214,0,0,3083,3084,10,
        13,0,0,3084,3085,5,1209,0,0,3085,3086,5,522,0,0,3086,3087,5,1213,
        0,0,3087,3088,3,308,154,0,3088,3089,5,1214,0,0,3089,3179,1,0,0,0,
        3090,3091,10,12,0,0,3091,3092,5,1209,0,0,3092,3093,5,516,0,0,3093,
        3094,5,1213,0,0,3094,3101,3,308,154,0,3095,3096,5,1208,0,0,3096,
        3099,3,506,253,0,3097,3098,5,1208,0,0,3098,3100,3,76,38,0,3099,3097,
        1,0,0,0,3099,3100,1,0,0,0,3100,3102,1,0,0,0,3101,3095,1,0,0,0,3101,
        3102,1,0,0,0,3102,3103,1,0,0,0,3103,3104,5,1214,0,0,3104,3179,1,
        0,0,0,3105,3106,10,11,0,0,3106,3107,5,1209,0,0,3107,3108,5,533,0,
        0,3108,3109,5,1213,0,0,3109,3115,3,308,154,0,3110,3113,5,1208,0,
        0,3111,3114,3,506,253,0,3112,3114,3,76,38,0,3113,3111,1,0,0,0,3113,
        3112,1,0,0,0,3114,3116,1,0,0,0,3115,3110,1,0,0,0,3115,3116,1,0,0,
        0,3116,3117,1,0,0,0,3117,3118,5,1214,0,0,3118,3179,1,0,0,0,3119,
        3120,10,10,0,0,3120,3121,5,1209,0,0,3121,3122,5,534,0,0,3122,3123,
        5,1213,0,0,3123,3124,3,308,154,0,3124,3125,5,1208,0,0,3125,3131,
        3,76,38,0,3126,3129,5,1208,0,0,3127,3130,3,506,253,0,3128,3130,3,
        76,38,0,3129,3127,1,0,0,0,3129,3128,1,0,0,0,3130,3132,1,0,0,0,3131,
        3126,1,0,0,0,3131,3132,1,0,0,0,3132,3133,1,0,0,0,3133,3134,5,1214,
        0,0,3134,3179,1,0,0,0,3135,3136,10,9,0,0,3136,3137,5,1209,0,0,3137,
        3138,7,30,0,0,3138,3139,5,1213,0,0,3139,3140,3,308,154,0,3140,3141,
        5,1214,0,0,3141,3179,1,0,0,0,3142,3143,10,8,0,0,3143,3144,5,1209,
        0,0,3144,3145,7,31,0,0,3145,3146,5,1213,0,0,3146,3179,5,1214,0,0,
        3147,3148,10,7,0,0,3148,3149,5,1209,0,0,3149,3150,5,818,0,0,3150,
        3151,5,1213,0,0,3151,3179,5,1214,0,0,3152,3153,10,6,0,0,3153,3154,
        5,1209,0,0,3154,3155,5,832,0,0,3155,3157,5,1213,0,0,3156,3158,3,
        76,38,0,3157,3156,1,0,0,0,3157,3158,1,0,0,0,3158,3159,1,0,0,0,3159,
        3179,5,1214,0,0,3160,3161,10,5,0,0,3161,3162,5,1209,0,0,3162,3163,
        3,140,70,0,3163,3172,5,1213,0,0,3164,3169,3,308,154,0,3165,3166,
        5,1208,0,0,3166,3168,3,308,154,0,3167,3165,1,0,0,0,3168,3171,1,0,
        0,0,3169,3167,1,0,0,0,3169,3170,1,0,0,0,3170,3173,1,0,0,0,3171,3169,
        1,0,0,0,3172,3164,1,0,0,0,3172,3173,1,0,0,0,3173,3174,1,0,0,0,3174,
        3175,5,1214,0,0,3175,3179,1,0,0,0,3176,3177,10,4,0,0,3177,3179,3,
        394,197,0,3178,2775,1,0,0,0,3178,2778,1,0,0,0,3178,2781,1,0,0,0,
        3178,2784,1,0,0,0,3178,2787,1,0,0,0,3178,2790,1,0,0,0,3178,2793,
        1,0,0,0,3178,2796,1,0,0,0,3178,2798,1,0,0,0,3178,2803,1,0,0,0,3178,
        2809,1,0,0,0,3178,2812,1,0,0,0,3178,2815,1,0,0,0,3178,2819,1,0,0,
        0,3178,2830,1,0,0,0,3178,2834,1,0,0,0,3178,2838,1,0,0,0,3178,2845,
        1,0,0,0,3178,2851,1,0,0,0,3178,2864,1,0,0,0,3178,2872,1,0,0,0,3178,
        2877,1,0,0,0,3178,2888,1,0,0,0,3178,2895,1,0,0,0,3178,2902,1,0,0,
        0,3178,2909,1,0,0,0,3178,2916,1,0,0,0,3178,2923,1,0,0,0,3178,2928,
        1,0,0,0,3178,2935,1,0,0,0,3178,2942,1,0,0,0,3178,2947,1,0,0,0,3178,
        2961,1,0,0,0,3178,2966,1,0,0,0,3178,2971,1,0,0,0,3178,2982,1,0,0,
        0,3178,2987,1,0,0,0,3178,3001,1,0,0,0,3178,3010,1,0,0,0,3178,3022,
        1,0,0,0,3178,3030,1,0,0,0,3178,3041,1,0,0,0,3178,3052,1,0,0,0,3178,
        3063,1,0,0,0,3178,3071,1,0,0,0,3178,3083,1,0,0,0,3178,3090,1,0,0,
        0,3178,3105,1,0,0,0,3178,3119,1,0,0,0,3178,3135,1,0,0,0,3178,3142,
        1,0,0,0,3178,3147,1,0,0,0,3178,3152,1,0,0,0,3178,3160,1,0,0,0,3178,
        3176,1,0,0,0,3179,3182,1,0,0,0,3180,3178,1,0,0,0,3180,3181,1,0,0,
        0,3181,309,1,0,0,0,3182,3180,1,0,0,0,3183,3184,5,1213,0,0,3184,3187,
        3,312,156,0,3185,3186,5,1208,0,0,3186,3188,3,312,156,0,3187,3185,
        1,0,0,0,3188,3189,1,0,0,0,3189,3187,1,0,0,0,3189,3190,1,0,0,0,3190,
        3191,1,0,0,0,3191,3192,5,1214,0,0,3192,311,1,0,0,0,3193,3198,3,308,
        154,0,3194,3196,5,20,0,0,3195,3194,1,0,0,0,3195,3196,1,0,0,0,3196,
        3197,1,0,0,0,3197,3199,3,120,60,0,3198,3195,1,0,0,0,3198,3199,1,
        0,0,0,3199,3209,1,0,0,0,3200,3201,5,1213,0,0,3201,3203,3,308,154,
        0,3202,3204,5,20,0,0,3203,3202,1,0,0,0,3203,3204,1,0,0,0,3204,3205,
        1,0,0,0,3205,3206,3,120,60,0,3206,3207,5,1214,0,0,3207,3209,1,0,
        0,0,3208,3193,1,0,0,0,3208,3200,1,0,0,0,3209,313,1,0,0,0,3210,3215,
        3,316,158,0,3211,3215,3,318,159,0,3212,3215,3,320,160,0,3213,3215,
        3,322,161,0,3214,3210,1,0,0,0,3214,3211,1,0,0,0,3214,3212,1,0,0,
        0,3214,3213,1,0,0,0,3215,315,1,0,0,0,3216,3217,5,47,0,0,3217,3223,
        3,308,154,0,3218,3219,5,470,0,0,3219,3220,3,308,154,0,3220,3221,
        5,419,0,0,3221,3222,3,308,154,0,3222,3224,1,0,0,0,3223,3218,1,0,
        0,0,3224,3225,1,0,0,0,3225,3223,1,0,0,0,3225,3226,1,0,0,0,3226,3229,
        1,0,0,0,3227,3228,5,131,0,0,3228,3230,3,308,154,0,3229,3227,1,0,
        0,0,3229,3230,1,0,0,0,3230,3231,1,0,0,0,3231,3232,5,134,0,0,3232,
        317,1,0,0,0,3233,3239,5,47,0,0,3234,3235,5,470,0,0,3235,3236,3,306,
        153,0,3236,3237,5,419,0,0,3237,3238,3,308,154,0,3238,3240,1,0,0,
        0,3239,3234,1,0,0,0,3240,3241,1,0,0,0,3241,3239,1,0,0,0,3241,3242,
        1,0,0,0,3242,3245,1,0,0,0,3243,3244,5,131,0,0,3244,3246,3,308,154,
        0,3245,3243,1,0,0,0,3245,3246,1,0,0,0,3246,3247,1,0,0,0,3247,3248,
        5,134,0,0,3248,319,1,0,0,0,3249,3250,5,66,0,0,3250,3251,3,492,246,
        0,3251,321,1,0,0,0,3252,3253,5,275,0,0,3253,3254,5,1213,0,0,3254,
        3255,3,308,154,0,3255,3256,5,1208,0,0,3256,3257,3,308,154,0,3257,
        3258,5,1214,0,0,3258,323,1,0,0,0,3259,3260,3,308,154,0,3260,3261,
        5,1222,0,0,3261,3262,3,308,154,0,3262,3270,1,0,0,0,3263,3264,5,1213,
        0,0,3264,3265,3,308,154,0,3265,3266,5,1222,0,0,3266,3267,3,308,154,
        0,3267,3268,5,1214,0,0,3268,3270,1,0,0,0,3269,3259,1,0,0,0,3269,
        3263,1,0,0,0,3270,325,1,0,0,0,3271,3272,5,1213,0,0,3272,3273,3,324,
        162,0,3273,3274,5,1214,0,0,3274,3275,3,328,164,0,3275,327,1,0,0,
        0,3276,3285,7,32,0,0,3277,3278,5,1213,0,0,3278,3281,3,76,38,0,3279,
        3280,5,1208,0,0,3280,3282,3,76,38,0,3281,3279,1,0,0,0,3281,3282,
        1,0,0,0,3282,3283,1,0,0,0,3283,3284,5,1214,0,0,3284,3286,1,0,0,0,
        3285,3277,1,0,0,0,3285,3286,1,0,0,0,3286,3295,1,0,0,0,3287,3288,
        5,426,0,0,3288,3293,7,33,0,0,3289,3290,5,1213,0,0,3290,3291,3,76,
        38,0,3291,3292,5,1214,0,0,3292,3294,1,0,0,0,3293,3289,1,0,0,0,3293,
        3294,1,0,0,0,3294,3296,1,0,0,0,3295,3287,1,0,0,0,3295,3296,1,0,0,
        0,3296,329,1,0,0,0,3297,3320,3,332,166,0,3298,3320,3,334,167,0,3299,
        3320,3,336,168,0,3300,3320,3,338,169,0,3301,3320,3,340,170,0,3302,
        3320,3,342,171,0,3303,3320,3,344,172,0,3304,3320,3,346,173,0,3305,
        3320,3,348,174,0,3306,3320,3,350,175,0,3307,3320,3,352,176,0,3308,
        3320,3,354,177,0,3309,3320,3,356,178,0,3310,3320,3,358,179,0,3311,
        3320,3,360,180,0,3312,3320,3,362,181,0,3313,3320,3,364,182,0,3314,
        3320,3,366,183,0,3315,3320,3,368,184,0,3316,3320,3,370,185,0,3317,
        3320,3,372,186,0,3318,3320,3,374,187,0,3319,3297,1,0,0,0,3319,3298,
        1,0,0,0,3319,3299,1,0,0,0,3319,3300,1,0,0,0,3319,3301,1,0,0,0,3319,
        3302,1,0,0,0,3319,3303,1,0,0,0,3319,3304,1,0,0,0,3319,3305,1,0,0,
        0,3319,3306,1,0,0,0,3319,3307,1,0,0,0,3319,3308,1,0,0,0,3319,3309,
        1,0,0,0,3319,3310,1,0,0,0,3319,3311,1,0,0,0,3319,3312,1,0,0,0,3319,
        3313,1,0,0,0,3319,3314,1,0,0,0,3319,3315,1,0,0,0,3319,3316,1,0,0,
        0,3319,3317,1,0,0,0,3319,3318,1,0,0,0,3320,331,1,0,0,0,3321,3322,
        7,34,0,0,3322,3324,5,1213,0,0,3323,3325,7,35,0,0,3324,3323,1,0,0,
        0,3324,3325,1,0,0,0,3325,3326,1,0,0,0,3326,3327,3,308,154,0,3327,
        3328,5,1214,0,0,3328,3357,1,0,0,0,3329,3330,7,36,0,0,3330,3331,5,
        1213,0,0,3331,3332,3,308,154,0,3332,3333,5,1208,0,0,3333,3334,3,
        308,154,0,3334,3335,5,1214,0,0,3335,3357,1,0,0,0,3336,3337,5,83,
        0,0,3337,3343,5,1213,0,0,3338,3344,5,1219,0,0,3339,3341,7,37,0,0,
        3340,3339,1,0,0,0,3340,3341,1,0,0,0,3341,3342,1,0,0,0,3342,3344,
        3,308,154,0,3343,3338,1,0,0,0,3343,3340,1,0,0,0,3344,3345,1,0,0,
        0,3345,3357,5,1214,0,0,3346,3347,5,175,0,0,3347,3348,5,1213,0,0,
        3348,3349,3,308,154,0,3349,3350,5,1214,0,0,3350,3357,1,0,0,0,3351,
        3352,5,1081,0,0,3352,3353,5,1213,0,0,3353,3354,3,308,154,0,3354,
        3355,5,1214,0,0,3355,3357,1,0,0,0,3356,3321,1,0,0,0,3356,3329,1,
        0,0,0,3356,3336,1,0,0,0,3356,3346,1,0,0,0,3356,3351,1,0,0,0,3357,
        333,1,0,0,0,3358,3359,7,38,0,0,3359,3360,5,1213,0,0,3360,3361,3,
        308,154,0,3361,3362,5,1214,0,0,3362,3363,3,414,207,0,3363,3508,1,
        0,0,0,3364,3365,7,36,0,0,3365,3366,5,1213,0,0,3366,3367,3,308,154,
        0,3367,3368,5,1208,0,0,3368,3369,3,308,154,0,3369,3370,5,1214,0,
        0,3370,3371,3,414,207,0,3371,3508,1,0,0,0,3372,3373,5,83,0,0,3373,
        3376,5,1213,0,0,3374,3377,5,1219,0,0,3375,3377,3,308,154,0,3376,
        3374,1,0,0,0,3376,3375,1,0,0,0,3377,3378,1,0,0,0,3378,3379,5,1214,
        0,0,3379,3508,3,414,207,0,3380,3381,5,89,0,0,3381,3382,5,1213,0,
        0,3382,3385,3,308,154,0,3383,3384,5,1208,0,0,3384,3386,3,302,151,
        0,3385,3383,1,0,0,0,3386,3387,1,0,0,0,3387,3385,1,0,0,0,3387,3388,
        1,0,0,0,3388,3389,1,0,0,0,3389,3390,5,1214,0,0,3390,3508,1,0,0,0,
        3391,3392,7,39,0,0,3392,3393,5,1213,0,0,3393,3394,5,1214,0,0,3394,
        3508,3,416,208,0,3395,3396,7,40,0,0,3396,3397,5,1213,0,0,3397,3399,
        3,308,154,0,3398,3400,3,456,228,0,3399,3398,1,0,0,0,3399,3400,1,
        0,0,0,3400,3401,1,0,0,0,3401,3402,5,1214,0,0,3402,3403,3,414,207,
        0,3403,3508,1,0,0,0,3404,3405,7,41,0,0,3405,3406,5,1213,0,0,3406,
        3408,3,308,154,0,3407,3409,3,456,228,0,3408,3407,1,0,0,0,3408,3409,
        1,0,0,0,3409,3416,1,0,0,0,3410,3411,5,1208,0,0,3411,3414,3,308,154,
        0,3412,3413,5,1208,0,0,3413,3415,3,308,154,0,3414,3412,1,0,0,0,3414,
        3415,1,0,0,0,3415,3417,1,0,0,0,3416,3410,1,0,0,0,3416,3417,1,0,0,
        0,3417,3418,1,0,0,0,3418,3420,5,1214,0,0,3419,3421,3,456,228,0,3420,
        3419,1,0,0,0,3420,3421,1,0,0,0,3421,3422,1,0,0,0,3422,3423,3,416,
        208,0,3423,3508,1,0,0,0,3424,3425,7,42,0,0,3425,3426,5,1213,0,0,
        3426,3427,3,308,154,0,3427,3428,5,1208,0,0,3428,3431,3,76,38,0,3429,
        3430,5,1208,0,0,3430,3432,3,302,151,0,3431,3429,1,0,0,0,3432,3433,
        1,0,0,0,3433,3431,1,0,0,0,3433,3434,1,0,0,0,3434,3435,1,0,0,0,3435,
        3436,5,1214,0,0,3436,3508,1,0,0,0,3437,3438,5,763,0,0,3438,3439,
        5,1213,0,0,3439,3440,3,308,154,0,3440,3441,5,1214,0,0,3441,3508,
        1,0,0,0,3442,3443,5,249,0,0,3443,3444,5,1213,0,0,3444,3445,3,308,
        154,0,3445,3446,5,1208,0,0,3446,3447,3,76,38,0,3447,3448,5,1208,
        0,0,3448,3449,3,302,151,0,3449,3450,5,1214,0,0,3450,3508,1,0,0,0,
        3451,3452,7,43,0,0,3452,3453,5,1213,0,0,3453,3454,3,308,154,0,3454,
        3455,5,1214,0,0,3455,3456,5,1039,0,0,3456,3457,5,174,0,0,3457,3458,
        5,1213,0,0,3458,3459,5,291,0,0,3459,3460,5,42,0,0,3460,3465,3,300,
        150,0,3461,3462,5,1208,0,0,3462,3464,3,300,150,0,3463,3461,1,0,0,
        0,3464,3467,1,0,0,0,3465,3463,1,0,0,0,3465,3466,1,0,0,0,3466,3468,
        1,0,0,0,3467,3465,1,0,0,0,3468,3469,5,1214,0,0,3469,3508,1,0,0,0,
        3470,3471,5,316,0,0,3471,3472,5,1213,0,0,3472,3475,3,76,38,0,3473,
        3474,5,1208,0,0,3474,3476,3,302,151,0,3475,3473,1,0,0,0,3476,3477,
        1,0,0,0,3477,3475,1,0,0,0,3477,3478,1,0,0,0,3478,3479,1,0,0,0,3479,
        3480,5,1214,0,0,3480,3508,1,0,0,0,3481,3482,5,321,0,0,3482,3483,
        5,1213,0,0,3483,3484,5,1214,0,0,3484,3508,3,418,209,0,3485,3486,
        5,321,0,0,3486,3487,5,1213,0,0,3487,3492,3,302,151,0,3488,3489,5,
        1208,0,0,3489,3491,3,302,151,0,3490,3488,1,0,0,0,3491,3494,1,0,0,
        0,3492,3490,1,0,0,0,3492,3493,1,0,0,0,3493,3495,1,0,0,0,3494,3492,
        1,0,0,0,3495,3496,5,1214,0,0,3496,3508,1,0,0,0,3497,3498,5,362,0,
        0,3498,3499,5,1213,0,0,3499,3500,5,1214,0,0,3500,3508,3,416,208,
        0,3501,3502,5,1081,0,0,3502,3503,5,1213,0,0,3503,3504,3,308,154,
        0,3504,3505,5,1214,0,0,3505,3506,3,414,207,0,3506,3508,1,0,0,0,3507,
        3358,1,0,0,0,3507,3364,1,0,0,0,3507,3372,1,0,0,0,3507,3380,1,0,0,
        0,3507,3391,1,0,0,0,3507,3395,1,0,0,0,3507,3404,1,0,0,0,3507,3424,
        1,0,0,0,3507,3437,1,0,0,0,3507,3442,1,0,0,0,3507,3451,1,0,0,0,3507,
        3470,1,0,0,0,3507,3481,1,0,0,0,3507,3485,1,0,0,0,3507,3497,1,0,0,
        0,3507,3501,1,0,0,0,3508,335,1,0,0,0,3509,3510,7,44,0,0,3510,3511,
        5,1213,0,0,3511,3512,3,308,154,0,3512,3513,5,1214,0,0,3513,3564,
        1,0,0,0,3514,3516,3,378,189,0,3515,3514,1,0,0,0,3515,3516,1,0,0,
        0,3516,3517,1,0,0,0,3517,3518,7,45,0,0,3518,3519,5,1213,0,0,3519,
        3520,3,308,154,0,3520,3521,5,1214,0,0,3521,3564,1,0,0,0,3522,3523,
        7,46,0,0,3523,3524,5,1213,0,0,3524,3525,3,308,154,0,3525,3526,5,
        1208,0,0,3526,3527,3,308,154,0,3527,3528,5,1214,0,0,3528,3564,1,
        0,0,0,3529,3531,3,382,191,0,3530,3529,1,0,0,0,3530,3531,1,0,0,0,
        3531,3532,1,0,0,0,3532,3533,5,856,0,0,3533,3534,5,1213,0,0,3534,
        3535,3,308,154,0,3535,3536,5,1208,0,0,3536,3537,3,308,154,0,3537,
        3538,5,1214,0,0,3538,3564,1,0,0,0,3539,3541,3,378,189,0,3540,3539,
        1,0,0,0,3540,3541,1,0,0,0,3541,3542,1,0,0,0,3542,3543,7,47,0,0,3543,
        3544,5,1213,0,0,3544,3547,3,308,154,0,3545,3546,5,1208,0,0,3546,
        3548,3,308,154,0,3547,3545,1,0,0,0,3547,3548,1,0,0,0,3548,3549,1,
        0,0,0,3549,3550,5,1214,0,0,3550,3564,1,0,0,0,3551,3552,5,1100,0,
        0,3552,3553,5,1066,0,0,3553,3554,5,1213,0,0,3554,3555,3,308,154,
        0,3555,3556,5,1208,0,0,3556,3557,3,308,154,0,3557,3558,5,1208,0,
        0,3558,3559,3,308,154,0,3559,3560,5,1208,0,0,3560,3561,3,308,154,
        0,3561,3562,5,1214,0,0,3562,3564,1,0,0,0,3563,3509,1,0,0,0,3563,
        3515,1,0,0,0,3563,3522,1,0,0,0,3563,3530,1,0,0,0,3563,3540,1,0,0,
        0,3563,3551,1,0,0,0,3564,337,1,0,0,0,3565,3567,3,378,189,0,3566,
        3565,1,0,0,0,3566,3567,1,0,0,0,3567,3568,1,0,0,0,3568,3569,5,514,
        0,0,3569,3570,5,1213,0,0,3570,3577,3,308,154,0,3571,3572,5,291,0,
        0,3572,3573,5,42,0,0,3573,3575,3,308,154,0,3574,3576,7,21,0,0,3575,
        3574,1,0,0,0,3575,3576,1,0,0,0,3576,3578,1,0,0,0,3577,3571,1,0,0,
        0,3577,3578,1,0,0,0,3578,3579,1,0,0,0,3579,3580,5,1208,0,0,3580,
        3581,3,308,154,0,3581,3582,5,1214,0,0,3582,3779,1,0,0,0,3583,3584,
        5,564,0,0,3584,3585,5,1213,0,0,3585,3590,3,308,154,0,3586,3587,5,
        1208,0,0,3587,3589,3,506,253,0,3588,3586,1,0,0,0,3589,3592,1,0,0,
        0,3590,3588,1,0,0,0,3590,3591,1,0,0,0,3591,3593,1,0,0,0,3592,3590,
        1,0,0,0,3593,3594,5,1214,0,0,3594,3779,1,0,0,0,3595,3596,5,517,0,
        0,3596,3597,5,1213,0,0,3597,3598,3,308,154,0,3598,3599,5,1208,0,
        0,3599,3604,3,308,154,0,3600,3601,5,1208,0,0,3601,3603,3,506,253,
        0,3602,3600,1,0,0,0,3603,3606,1,0,0,0,3604,3602,1,0,0,0,3604,3605,
        1,0,0,0,3605,3607,1,0,0,0,3606,3604,1,0,0,0,3607,3608,5,1214,0,0,
        3608,3779,1,0,0,0,3609,3610,7,27,0,0,3610,3611,5,1213,0,0,3611,3612,
        3,308,154,0,3612,3613,5,1208,0,0,3613,3618,3,308,154,0,3614,3615,
        5,1208,0,0,3615,3617,3,506,253,0,3616,3614,1,0,0,0,3617,3620,1,0,
        0,0,3618,3616,1,0,0,0,3618,3619,1,0,0,0,3619,3621,1,0,0,0,3620,3618,
        1,0,0,0,3621,3622,5,1214,0,0,3622,3779,1,0,0,0,3623,3624,7,28,0,
        0,3624,3625,5,1213,0,0,3625,3626,3,308,154,0,3626,3627,5,1208,0,
        0,3627,3632,3,308,154,0,3628,3629,5,1208,0,0,3629,3631,3,506,253,
        0,3630,3628,1,0,0,0,3631,3634,1,0,0,0,3632,3630,1,0,0,0,3632,3633,
        1,0,0,0,3633,3635,1,0,0,0,3634,3632,1,0,0,0,3635,3636,5,1214,0,0,
        3636,3779,1,0,0,0,3637,3638,7,29,0,0,3638,3639,5,1213,0,0,3639,3644,
        3,308,154,0,3640,3641,5,1208,0,0,3641,3643,3,506,253,0,3642,3640,
        1,0,0,0,3643,3646,1,0,0,0,3644,3642,1,0,0,0,3644,3645,1,0,0,0,3645,
        3647,1,0,0,0,3646,3644,1,0,0,0,3647,3648,5,1214,0,0,3648,3779,1,
        0,0,0,3649,3650,5,518,0,0,3650,3651,5,1213,0,0,3651,3667,3,308,154,
        0,3652,3653,5,1208,0,0,3653,3655,3,506,253,0,3654,3652,1,0,0,0,3655,
        3658,1,0,0,0,3656,3654,1,0,0,0,3656,3657,1,0,0,0,3657,3659,1,0,0,
        0,3658,3656,1,0,0,0,3659,3660,5,1208,0,0,3660,3668,3,308,154,0,3661,
        3662,5,1208,0,0,3662,3664,3,506,253,0,3663,3661,1,0,0,0,3664,3665,
        1,0,0,0,3665,3663,1,0,0,0,3665,3666,1,0,0,0,3666,3668,1,0,0,0,3667,
        3656,1,0,0,0,3667,3663,1,0,0,0,3667,3668,1,0,0,0,3668,3669,1,0,0,
        0,3669,3670,5,1214,0,0,3670,3779,1,0,0,0,3671,3672,5,522,0,0,3672,
        3673,5,1213,0,0,3673,3674,3,308,154,0,3674,3675,5,1208,0,0,3675,
        3676,3,308,154,0,3676,3677,5,1214,0,0,3677,3779,1,0,0,0,3678,3679,
        5,516,0,0,3679,3680,5,1213,0,0,3680,3681,3,308,154,0,3681,3682,5,
        1208,0,0,3682,3692,3,308,154,0,3683,3684,5,1208,0,0,3684,3686,3,
        506,253,0,3685,3683,1,0,0,0,3686,3687,1,0,0,0,3687,3685,1,0,0,0,
        3687,3688,1,0,0,0,3688,3689,1,0,0,0,3689,3690,5,1208,0,0,3690,3691,
        3,76,38,0,3691,3693,1,0,0,0,3692,3685,1,0,0,0,3692,3693,1,0,0,0,
        3693,3694,1,0,0,0,3694,3695,5,1214,0,0,3695,3779,1,0,0,0,3696,3697,
        5,533,0,0,3697,3698,5,1213,0,0,3698,3699,3,308,154,0,3699,3700,5,
        1208,0,0,3700,3709,3,308,154,0,3701,3702,5,1208,0,0,3702,3704,3,
        506,253,0,3703,3701,1,0,0,0,3704,3705,1,0,0,0,3705,3703,1,0,0,0,
        3705,3706,1,0,0,0,3706,3710,1,0,0,0,3707,3708,5,1208,0,0,3708,3710,
        3,308,154,0,3709,3703,1,0,0,0,3709,3707,1,0,0,0,3709,3710,1,0,0,
        0,3710,3711,1,0,0,0,3711,3712,5,1214,0,0,3712,3779,1,0,0,0,3713,
        3714,5,534,0,0,3714,3715,5,1213,0,0,3715,3716,3,308,154,0,3716,3717,
        5,1208,0,0,3717,3718,3,308,154,0,3718,3719,5,1208,0,0,3719,3728,
        3,76,38,0,3720,3721,5,1208,0,0,3721,3723,3,506,253,0,3722,3720,1,
        0,0,0,3723,3724,1,0,0,0,3724,3722,1,0,0,0,3724,3725,1,0,0,0,3725,
        3729,1,0,0,0,3726,3727,5,1208,0,0,3727,3729,3,308,154,0,3728,3722,
        1,0,0,0,3728,3726,1,0,0,0,3728,3729,1,0,0,0,3729,3730,1,0,0,0,3730,
        3731,5,1214,0,0,3731,3779,1,0,0,0,3732,3734,3,378,189,0,3733,3732,
        1,0,0,0,3733,3734,1,0,0,0,3734,3735,1,0,0,0,3735,3736,7,30,0,0,3736,
        3737,5,1213,0,0,3737,3738,3,308,154,0,3738,3739,5,1208,0,0,3739,
        3740,3,308,154,0,3740,3741,5,1214,0,0,3741,3779,1,0,0,0,3742,3744,
        3,378,189,0,3743,3742,1,0,0,0,3743,3744,1,0,0,0,3744,3745,1,0,0,
        0,3745,3746,7,48,0,0,3746,3747,5,1213,0,0,3747,3748,3,308,154,0,
        3748,3749,5,1214,0,0,3749,3779,1,0,0,0,3750,3752,3,378,189,0,3751,
        3750,1,0,0,0,3751,3752,1,0,0,0,3752,3753,1,0,0,0,3753,3754,5,818,
        0,0,3754,3755,5,1213,0,0,3755,3762,3,308,154,0,3756,3757,5,1208,
        0,0,3757,3760,3,308,154,0,3758,3759,5,1208,0,0,3759,3761,3,308,154,
        0,3760,3758,1,0,0,0,3760,3761,1,0,0,0,3761,3763,1,0,0,0,3762,3756,
        1,0,0,0,3762,3763,1,0,0,0,3763,3764,1,0,0,0,3764,3765,5,1214,0,0,
        3765,3779,1,0,0,0,3766,3768,3,378,189,0,3767,3766,1,0,0,0,3767,3768,
        1,0,0,0,3768,3769,1,0,0,0,3769,3770,5,832,0,0,3770,3771,5,1213,0,
        0,3771,3774,3,308,154,0,3772,3773,5,1208,0,0,3773,3775,3,308,154,
        0,3774,3772,1,0,0,0,3774,3775,1,0,0,0,3775,3776,1,0,0,0,3776,3777,
        5,1214,0,0,3777,3779,1,0,0,0,3778,3566,1,0,0,0,3778,3583,1,0,0,0,
        3778,3595,1,0,0,0,3778,3609,1,0,0,0,3778,3623,1,0,0,0,3778,3637,
        1,0,0,0,3778,3649,1,0,0,0,3778,3671,1,0,0,0,3778,3678,1,0,0,0,3778,
        3696,1,0,0,0,3778,3713,1,0,0,0,3778,3733,1,0,0,0,3778,3743,1,0,0,
        0,3778,3751,1,0,0,0,3778,3767,1,0,0,0,3779,339,1,0,0,0,3780,3781,
        5,546,0,0,3781,3782,5,1213,0,0,3782,3785,3,308,154,0,3783,3784,5,
        1208,0,0,3784,3786,3,66,33,0,3785,3783,1,0,0,0,3785,3786,1,0,0,0,
        3786,3787,1,0,0,0,3787,3788,5,1214,0,0,3788,3821,1,0,0,0,3789,3790,
        7,49,0,0,3790,3791,5,1213,0,0,3791,3792,3,308,154,0,3792,3793,5,
        1214,0,0,3793,3821,1,0,0,0,3794,3795,7,50,0,0,3795,3796,5,1213,0,
        0,3796,3797,3,308,154,0,3797,3798,5,1214,0,0,3798,3821,1,0,0,0,3799,
        3804,5,111,0,0,3800,3801,5,1213,0,0,3801,3802,3,96,48,0,3802,3803,
        5,1214,0,0,3803,3805,1,0,0,0,3804,3800,1,0,0,0,3804,3805,1,0,0,0,
        3805,3821,1,0,0,0,3806,3807,7,51,0,0,3807,3808,5,1213,0,0,3808,3809,
        3,308,154,0,3809,3810,5,1214,0,0,3810,3821,1,0,0,0,3811,3812,5,281,
        0,0,3812,3813,5,1213,0,0,3813,3816,3,308,154,0,3814,3815,5,1208,
        0,0,3815,3817,3,66,33,0,3816,3814,1,0,0,0,3816,3817,1,0,0,0,3817,
        3818,1,0,0,0,3818,3819,5,1214,0,0,3819,3821,1,0,0,0,3820,3780,1,
        0,0,0,3820,3789,1,0,0,0,3820,3794,1,0,0,0,3820,3799,1,0,0,0,3820,
        3806,1,0,0,0,3820,3811,1,0,0,0,3821,341,1,0,0,0,3822,3824,3,378,
        189,0,3823,3822,1,0,0,0,3823,3824,1,0,0,0,3824,3825,1,0,0,0,3825,
        3826,5,548,0,0,3826,3827,5,1213,0,0,3827,3828,3,308,154,0,3828,3829,
        5,1214,0,0,3829,3887,1,0,0,0,3830,3832,3,378,189,0,3831,3830,1,0,
        0,0,3831,3832,1,0,0,0,3832,3833,1,0,0,0,3833,3834,7,52,0,0,3834,
        3835,5,1213,0,0,3835,3836,3,308,154,0,3836,3837,5,1208,0,0,3837,
        3838,3,308,154,0,3838,3839,5,1214,0,0,3839,3887,1,0,0,0,3840,3842,
        3,378,189,0,3841,3840,1,0,0,0,3841,3842,1,0,0,0,3842,3843,1,0,0,
        0,3843,3844,5,597,0,0,3844,3845,5,1213,0,0,3845,3848,3,308,154,0,
        3846,3847,5,1208,0,0,3847,3849,3,308,154,0,3848,3846,1,0,0,0,3848,
        3849,1,0,0,0,3849,3850,1,0,0,0,3850,3851,5,1214,0,0,3851,3887,1,
        0,0,0,3852,3854,3,378,189,0,3853,3852,1,0,0,0,3853,3854,1,0,0,0,
        3854,3855,1,0,0,0,3855,3856,5,919,0,0,3856,3857,5,1213,0,0,3857,
        3858,3,308,154,0,3858,3859,5,1208,0,0,3859,3862,3,308,154,0,3860,
        3861,5,1208,0,0,3861,3863,3,308,154,0,3862,3860,1,0,0,0,3862,3863,
        1,0,0,0,3863,3864,1,0,0,0,3864,3865,5,1214,0,0,3865,3887,1,0,0,0,
        3866,3868,3,378,189,0,3867,3866,1,0,0,0,3867,3868,1,0,0,0,3868,3869,
        1,0,0,0,3869,3870,5,945,0,0,3870,3871,5,1213,0,0,3871,3872,3,308,
        154,0,3872,3873,5,1208,0,0,3873,3874,3,308,154,0,3874,3875,5,1208,
        0,0,3875,3876,3,308,154,0,3876,3877,5,1214,0,0,3877,3887,1,0,0,0,
        3878,3880,3,378,189,0,3879,3878,1,0,0,0,3879,3880,1,0,0,0,3880,3881,
        1,0,0,0,3881,3882,5,991,0,0,3882,3883,5,1213,0,0,3883,3884,3,308,
        154,0,3884,3885,5,1214,0,0,3885,3887,1,0,0,0,3886,3823,1,0,0,0,3886,
        3831,1,0,0,0,3886,3841,1,0,0,0,3886,3853,1,0,0,0,3886,3867,1,0,0,
        0,3886,3879,1,0,0,0,3887,343,1,0,0,0,3888,3945,5,5,0,0,3889,3892,
        5,94,0,0,3890,3891,5,1213,0,0,3891,3893,5,1214,0,0,3892,3890,1,0,
        0,0,3892,3893,1,0,0,0,3893,3898,1,0,0,0,3894,3895,5,604,0,0,3895,
        3896,5,1213,0,0,3896,3898,5,1214,0,0,3897,3889,1,0,0,0,3897,3894,
        1,0,0,0,3898,3900,1,0,0,0,3899,3901,3,486,243,0,3900,3899,1,0,0,
        0,3900,3901,1,0,0,0,3901,3945,1,0,0,0,3902,3945,5,95,0,0,3903,3905,
        5,96,0,0,3904,3906,3,34,17,0,3905,3904,1,0,0,0,3905,3906,1,0,0,0,
        3906,3911,1,0,0,0,3907,3908,5,605,0,0,3908,3909,5,1213,0,0,3909,
        3911,5,1214,0,0,3910,3903,1,0,0,0,3910,3907,1,0,0,0,3911,3913,1,
        0,0,0,3912,3914,3,486,243,0,3913,3912,1,0,0,0,3913,3914,1,0,0,0,
        3914,3945,1,0,0,0,3915,3917,5,97,0,0,3916,3918,3,34,17,0,3917,3916,
        1,0,0,0,3917,3918,1,0,0,0,3918,3920,1,0,0,0,3919,3921,3,486,243,
        0,3920,3919,1,0,0,0,3920,3921,1,0,0,0,3921,3945,1,0,0,0,3922,3945,
        5,98,0,0,3923,3945,5,102,0,0,3924,3926,5,104,0,0,3925,3927,3,486,
        243,0,3926,3925,1,0,0,0,3926,3927,1,0,0,0,3927,3945,1,0,0,0,3928,
        3929,5,803,0,0,3929,3930,5,1213,0,0,3930,3945,5,1214,0,0,3931,3945,
        5,311,0,0,3932,3945,5,357,0,0,3933,3945,5,371,0,0,3934,3945,5,980,
        0,0,3935,3937,5,981,0,0,3936,3938,3,34,17,0,3937,3936,1,0,0,0,3937,
        3938,1,0,0,0,3938,3945,1,0,0,0,3939,3941,5,421,0,0,3940,3942,3,486,
        243,0,3941,3940,1,0,0,0,3941,3942,1,0,0,0,3942,3945,1,0,0,0,3943,
        3945,5,456,0,0,3944,3888,1,0,0,0,3944,3897,1,0,0,0,3944,3902,1,0,
        0,0,3944,3910,1,0,0,0,3944,3915,1,0,0,0,3944,3922,1,0,0,0,3944,3923,
        1,0,0,0,3944,3924,1,0,0,0,3944,3928,1,0,0,0,3944,3931,1,0,0,0,3944,
        3932,1,0,0,0,3944,3933,1,0,0,0,3944,3934,1,0,0,0,3944,3935,1,0,0,
        0,3944,3939,1,0,0,0,3944,3943,1,0,0,0,3945,345,1,0,0,0,3946,3948,
        3,382,191,0,3947,3946,1,0,0,0,3947,3948,1,0,0,0,3948,3949,1,0,0,
        0,3949,3950,7,53,0,0,3950,3951,5,1213,0,0,3951,3952,3,308,154,0,
        3952,3953,5,1214,0,0,3953,3970,1,0,0,0,3954,3956,3,378,189,0,3955,
        3954,1,0,0,0,3955,3956,1,0,0,0,3956,3957,1,0,0,0,3957,3958,7,54,
        0,0,3958,3959,5,1213,0,0,3959,3961,3,308,154,0,3960,3962,5,1208,
        0,0,3961,3960,1,0,0,0,3961,3962,1,0,0,0,3962,3965,1,0,0,0,3963,3966,
        5,274,0,0,3964,3966,3,70,35,0,3965,3963,1,0,0,0,3965,3964,1,0,0,
        0,3965,3966,1,0,0,0,3966,3967,1,0,0,0,3967,3968,5,1214,0,0,3968,
        3970,1,0,0,0,3969,3947,1,0,0,0,3969,3955,1,0,0,0,3970,347,1,0,0,
        0,3971,3973,3,378,189,0,3972,3971,1,0,0,0,3972,3973,1,0,0,0,3973,
        3974,1,0,0,0,3974,3975,5,622,0,0,3975,3976,5,1213,0,0,3976,3977,
        3,308,154,0,3977,3978,5,1208,0,0,3978,3979,3,308,154,0,3979,3980,
        5,1208,0,0,3980,3981,3,308,154,0,3981,3982,1,0,0,0,3982,3983,3,308,
        154,0,3983,3984,5,1214,0,0,3984,4000,1,0,0,0,3985,3987,3,378,189,
        0,3986,3985,1,0,0,0,3986,3987,1,0,0,0,3987,3988,1,0,0,0,3988,3989,
        7,55,0,0,3989,3990,5,1213,0,0,3990,3993,3,308,154,0,3991,3992,5,
        1208,0,0,3992,3994,3,308,154,0,3993,3991,1,0,0,0,3994,3995,1,0,0,
        0,3995,3993,1,0,0,0,3995,3996,1,0,0,0,3996,3997,1,0,0,0,3997,3998,
        5,1214,0,0,3998,4000,1,0,0,0,3999,3972,1,0,0,0,3999,3986,1,0,0,0,
        4000,349,1,0,0,0,4001,4003,3,378,189,0,4002,4001,1,0,0,0,4002,4003,
        1,0,0,0,4003,4004,1,0,0,0,4004,4005,7,56,0,0,4005,4006,5,1213,0,
        0,4006,4007,3,308,154,0,4007,4008,5,1214,0,0,4008,351,1,0,0,0,4009,
        4010,5,50,0,0,4010,4011,5,1213,0,0,4011,4012,3,308,154,0,4012,4025,
        5,20,0,0,4013,4017,3,0,0,0,4014,4016,3,22,11,0,4015,4014,1,0,0,0,
        4016,4019,1,0,0,0,4017,4015,1,0,0,0,4017,4018,1,0,0,0,4018,4026,
        1,0,0,0,4019,4017,1,0,0,0,4020,4022,3,22,11,0,4021,4020,1,0,0,0,
        4022,4023,1,0,0,0,4023,4021,1,0,0,0,4023,4024,1,0,0,0,4024,4026,
        1,0,0,0,4025,4013,1,0,0,0,4025,4021,1,0,0,0,4026,4027,1,0,0,0,4027,
        4028,5,1214,0,0,4028,4141,1,0,0,0,4029,4030,5,1095,0,0,4030,4031,
        5,1213,0,0,4031,4032,3,308,154,0,4032,4033,5,20,0,0,4033,4034,3,
        0,0,0,4034,4035,5,1214,0,0,4035,4141,1,0,0,0,4036,4038,3,378,189,
        0,4037,4036,1,0,0,0,4037,4038,1,0,0,0,4038,4039,1,0,0,0,4039,4040,
        5,992,0,0,4040,4041,5,1213,0,0,4041,4042,3,308,154,0,4042,4043,5,
        1208,0,0,4043,4044,3,70,35,0,4044,4045,5,1214,0,0,4045,4141,1,0,
        0,0,4046,4048,3,378,189,0,4047,4046,1,0,0,0,4047,4048,1,0,0,0,4048,
        4049,1,0,0,0,4049,4050,5,679,0,0,4050,4051,5,1213,0,0,4051,4052,
        3,308,154,0,4052,4053,5,1208,0,0,4053,4054,3,70,35,0,4054,4055,5,
        1214,0,0,4055,4141,1,0,0,0,4056,4058,3,378,189,0,4057,4056,1,0,0,
        0,4057,4058,1,0,0,0,4058,4059,1,0,0,0,4059,4060,5,996,0,0,4060,4061,
        5,1213,0,0,4061,4071,3,308,154,0,4062,4063,5,1208,0,0,4063,4069,
        3,70,35,0,4064,4067,5,1208,0,0,4065,4068,3,70,35,0,4066,4068,5,274,
        0,0,4067,4065,1,0,0,0,4067,4066,1,0,0,0,4068,4070,1,0,0,0,4069,4064,
        1,0,0,0,4069,4070,1,0,0,0,4070,4072,1,0,0,0,4071,4062,1,0,0,0,4071,
        4072,1,0,0,0,4072,4073,1,0,0,0,4073,4074,5,1214,0,0,4074,4141,1,
        0,0,0,4075,4077,3,378,189,0,4076,4075,1,0,0,0,4076,4077,1,0,0,0,
        4077,4078,1,0,0,0,4078,4079,5,993,0,0,4079,4080,5,1213,0,0,4080,
        4090,3,308,154,0,4081,4082,5,1208,0,0,4082,4088,3,70,35,0,4083,4086,
        5,1208,0,0,4084,4087,3,70,35,0,4085,4087,5,274,0,0,4086,4084,1,0,
        0,0,4086,4085,1,0,0,0,4087,4089,1,0,0,0,4088,4083,1,0,0,0,4088,4089,
        1,0,0,0,4089,4091,1,0,0,0,4090,4081,1,0,0,0,4090,4091,1,0,0,0,4091,
        4092,1,0,0,0,4092,4093,5,1214,0,0,4093,4141,1,0,0,0,4094,4096,3,
        378,189,0,4095,4094,1,0,0,0,4095,4096,1,0,0,0,4096,4097,1,0,0,0,
        4097,4098,5,994,0,0,4098,4099,5,1213,0,0,4099,4100,3,308,154,0,4100,
        4103,5,1208,0,0,4101,4104,3,70,35,0,4102,4104,5,274,0,0,4103,4101,
        1,0,0,0,4103,4102,1,0,0,0,4104,4105,1,0,0,0,4105,4106,5,1214,0,0,
        4106,4141,1,0,0,0,4107,4109,3,378,189,0,4108,4107,1,0,0,0,4108,4109,
        1,0,0,0,4109,4110,1,0,0,0,4110,4111,7,57,0,0,4111,4112,5,1213,0,
        0,4112,4118,3,308,154,0,4113,4116,5,1208,0,0,4114,4117,3,70,35,0,
        4115,4117,5,274,0,0,4116,4114,1,0,0,0,4116,4115,1,0,0,0,4117,4119,
        1,0,0,0,4118,4113,1,0,0,0,4118,4119,1,0,0,0,4119,4120,1,0,0,0,4120,
        4121,5,1214,0,0,4121,4141,1,0,0,0,4122,4124,3,378,189,0,4123,4122,
        1,0,0,0,4123,4124,1,0,0,0,4124,4125,1,0,0,0,4125,4126,7,58,0,0,4126,
        4127,5,1213,0,0,4127,4128,3,308,154,0,4128,4129,5,1214,0,0,4129,
        4141,1,0,0,0,4130,4132,3,378,189,0,4131,4130,1,0,0,0,4131,4132,1,
        0,0,0,4132,4133,1,0,0,0,4133,4134,7,59,0,0,4134,4135,5,1213,0,0,
        4135,4136,3,308,154,0,4136,4137,5,1208,0,0,4137,4138,3,308,154,0,
        4138,4139,5,1214,0,0,4139,4141,1,0,0,0,4140,4009,1,0,0,0,4140,4029,
        1,0,0,0,4140,4037,1,0,0,0,4140,4047,1,0,0,0,4140,4057,1,0,0,0,4140,
        4076,1,0,0,0,4140,4095,1,0,0,0,4140,4108,1,0,0,0,4140,4123,1,0,0,
        0,4140,4131,1,0,0,0,4141,353,1,0,0,0,4142,4143,7,60,0,0,4143,4144,
        5,1213,0,0,4144,4145,3,308,154,0,4145,4146,5,1214,0,0,4146,4193,
        1,0,0,0,4147,4149,3,378,189,0,4148,4147,1,0,0,0,4148,4149,1,0,0,
        0,4149,4150,1,0,0,0,4150,4151,5,732,0,0,4151,4152,5,1213,0,0,4152,
        4153,3,308,154,0,4153,4154,5,1214,0,0,4154,4193,1,0,0,0,4155,4157,
        3,378,189,0,4156,4155,1,0,0,0,4156,4157,1,0,0,0,4157,4158,1,0,0,
        0,4158,4159,5,792,0,0,4159,4160,5,1213,0,0,4160,4161,3,308,154,0,
        4161,4162,5,1208,0,0,4162,4163,3,70,35,0,4163,4164,5,1214,0,0,4164,
        4193,1,0,0,0,4165,4167,3,378,189,0,4166,4165,1,0,0,0,4166,4167,1,
        0,0,0,4167,4168,1,0,0,0,4168,4169,5,786,0,0,4169,4170,5,1213,0,0,
        4170,4171,3,308,154,0,4171,4172,5,1208,0,0,4172,4173,3,308,154,0,
        4173,4174,5,1214,0,0,4174,4193,1,0,0,0,4175,4177,3,378,189,0,4176,
        4175,1,0,0,0,4176,4177,1,0,0,0,4177,4178,1,0,0,0,4178,4179,7,61,
        0,0,4179,4180,5,1213,0,0,4180,4181,3,308,154,0,4181,4182,5,1208,
        0,0,4182,4183,3,308,154,0,4183,4184,5,1214,0,0,4184,4193,1,0,0,0,
        4185,4186,5,152,0,0,4186,4187,5,1213,0,0,4187,4188,7,62,0,0,4188,
        4189,5,164,0,0,4189,4190,3,308,154,0,4190,4191,5,1214,0,0,4191,4193,
        1,0,0,0,4192,4142,1,0,0,0,4192,4148,1,0,0,0,4192,4156,1,0,0,0,4192,
        4166,1,0,0,0,4192,4176,1,0,0,0,4192,4185,1,0,0,0,4193,355,1,0,0,
        0,4194,4195,7,63,0,0,4195,4196,5,1213,0,0,4196,4223,5,1214,0,0,4197,
        4198,7,63,0,0,4198,4199,5,1213,0,0,4199,4200,3,412,206,0,4200,4201,
        5,1214,0,0,4201,4223,1,0,0,0,4202,4203,5,181,0,0,4203,4204,5,1213,
        0,0,4204,4205,3,308,154,0,4205,4206,5,1214,0,0,4206,4223,1,0,0,0,
        4207,4208,5,182,0,0,4208,4209,5,1213,0,0,4209,4223,5,1214,0,0,4210,
        4211,5,182,0,0,4211,4212,5,1213,0,0,4212,4217,3,308,154,0,4213,4214,
        5,1208,0,0,4214,4216,3,308,154,0,4215,4213,1,0,0,0,4216,4219,1,0,
        0,0,4217,4215,1,0,0,0,4217,4218,1,0,0,0,4218,4220,1,0,0,0,4219,4217,
        1,0,0,0,4220,4221,5,1214,0,0,4221,4223,1,0,0,0,4222,4194,1,0,0,0,
        4222,4197,1,0,0,0,4222,4202,1,0,0,0,4222,4207,1,0,0,0,4222,4210,
        1,0,0,0,4223,357,1,0,0,0,4224,4226,3,378,189,0,4225,4224,1,0,0,0,
        4225,4226,1,0,0,0,4226,4227,1,0,0,0,4227,4228,7,64,0,0,4228,4229,
        5,1213,0,0,4229,4230,5,1214,0,0,4230,359,1,0,0,0,4231,4233,3,382,
        191,0,4232,4231,1,0,0,0,4232,4233,1,0,0,0,4233,4234,1,0,0,0,4234,
        4235,5,1145,0,0,4235,4236,5,1213,0,0,4236,4237,3,70,35,0,4237,4238,
        5,1214,0,0,4238,4268,1,0,0,0,4239,4241,3,382,191,0,4240,4239,1,0,
        0,0,4240,4241,1,0,0,0,4241,4242,1,0,0,0,4242,4243,5,1146,0,0,4243,
        4244,5,1213,0,0,4244,4245,3,70,35,0,4245,4246,5,1208,0,0,4246,4247,
        3,70,35,0,4247,4248,5,1208,0,0,4248,4249,3,70,35,0,4249,4250,5,1208,
        0,0,4250,4251,3,70,35,0,4251,4252,5,1208,0,0,4252,4253,3,70,35,0,
        4253,4254,5,1208,0,0,4254,4255,3,70,35,0,4255,4256,5,1214,0,0,4256,
        4268,1,0,0,0,4257,4259,3,382,191,0,4258,4257,1,0,0,0,4258,4259,1,
        0,0,0,4259,4260,1,0,0,0,4260,4261,5,1147,0,0,4261,4262,5,1213,0,
        0,4262,4263,3,70,35,0,4263,4264,5,1208,0,0,4264,4265,3,70,35,0,4265,
        4266,5,1214,0,0,4266,4268,1,0,0,0,4267,4232,1,0,0,0,4267,4240,1,
        0,0,0,4267,4258,1,0,0,0,4268,361,1,0,0,0,4269,4271,3,378,189,0,4270,
        4269,1,0,0,0,4270,4271,1,0,0,0,4271,4272,1,0,0,0,4272,4273,5,810,
        0,0,4273,4274,5,1213,0,0,4274,4275,3,308,154,0,4275,4276,5,1208,
        0,0,4276,4277,3,308,154,0,4277,4278,5,1214,0,0,4278,4292,1,0,0,0,
        4279,4281,3,378,189,0,4280,4279,1,0,0,0,4280,4281,1,0,0,0,4281,4282,
        1,0,0,0,4282,4283,5,811,0,0,4283,4284,5,1213,0,0,4284,4285,3,308,
        154,0,4285,4286,5,1208,0,0,4286,4287,3,308,154,0,4287,4288,5,1208,
        0,0,4288,4289,3,308,154,0,4289,4290,5,1214,0,0,4290,4292,1,0,0,0,
        4291,4270,1,0,0,0,4291,4280,1,0,0,0,4292,363,1,0,0,0,4293,4294,5,
        34,0,0,4294,4295,5,1213,0,0,4295,4296,3,308,154,0,4296,4297,5,1214,
        0,0,4297,4335,1,0,0,0,4298,4299,5,134,0,0,4299,4300,5,1213,0,0,4300,
        4301,3,308,154,0,4301,4302,5,1214,0,0,4302,4335,1,0,0,0,4303,4304,
        5,134,0,0,4304,4305,5,1213,0,0,4305,4306,3,308,154,0,4306,4307,5,
        1214,0,0,4307,4309,5,207,0,0,4308,4310,5,272,0,0,4309,4308,1,0,0,
        0,4309,4310,1,0,0,0,4310,4311,1,0,0,0,4311,4312,7,65,0,0,4312,4335,
        1,0,0,0,4313,4314,5,205,0,0,4314,4315,5,1213,0,0,4315,4316,3,308,
        154,0,4316,4317,5,1214,0,0,4317,4318,3,32,16,0,4318,4335,1,0,0,0,
        4319,4320,5,731,0,0,4320,4321,5,1213,0,0,4321,4322,3,308,154,0,4322,
        4323,5,1214,0,0,4323,4335,1,0,0,0,4324,4325,5,267,0,0,4325,4326,
        5,1213,0,0,4326,4327,3,308,154,0,4327,4328,5,1214,0,0,4328,4335,
        1,0,0,0,4329,4330,5,861,0,0,4330,4331,5,1213,0,0,4331,4332,3,308,
        154,0,4332,4333,5,1214,0,0,4333,4335,1,0,0,0,4334,4293,1,0,0,0,4334,
        4298,1,0,0,0,4334,4303,1,0,0,0,4334,4313,1,0,0,0,4334,4319,1,0,0,
        0,4334,4324,1,0,0,0,4334,4329,1,0,0,0,4335,365,1,0,0,0,4336,4338,
        3,378,189,0,4337,4336,1,0,0,0,4337,4338,1,0,0,0,4338,4339,1,0,0,
        0,4339,4340,5,882,0,0,4340,4341,5,1213,0,0,4341,4342,3,308,154,0,
        4342,4343,5,1208,0,0,4343,4351,3,308,154,0,4344,4345,5,1208,0,0,
        4345,4346,3,308,154,0,4346,4347,5,1208,0,0,4347,4348,3,308,154,0,
        4348,4349,5,1208,0,0,4349,4350,3,308,154,0,4350,4352,1,0,0,0,4351,
        4344,1,0,0,0,4351,4352,1,0,0,0,4352,4353,1,0,0,0,4353,4354,5,1214,
        0,0,4354,4426,1,0,0,0,4355,4357,3,378,189,0,4356,4355,1,0,0,0,4356,
        4357,1,0,0,0,4357,4358,1,0,0,0,4358,4359,5,880,0,0,4359,4360,5,1213,
        0,0,4360,4361,3,308,154,0,4361,4362,5,1208,0,0,4362,4372,3,308,154,
        0,4363,4364,5,1208,0,0,4364,4365,3,308,154,0,4365,4366,5,1208,0,
        0,4366,4367,3,308,154,0,4367,4368,5,1208,0,0,4368,4369,3,308,154,
        0,4369,4370,5,1208,0,0,4370,4371,3,308,154,0,4371,4373,1,0,0,0,4372,
        4363,1,0,0,0,4372,4373,1,0,0,0,4373,4374,1,0,0,0,4374,4375,5,1214,
        0,0,4375,4426,1,0,0,0,4376,4378,3,378,189,0,4377,4376,1,0,0,0,4377,
        4378,1,0,0,0,4378,4379,1,0,0,0,4379,4380,5,879,0,0,4380,4381,5,1213,
        0,0,4381,4382,3,308,154,0,4382,4383,5,1208,0,0,4383,4393,3,308,154,
        0,4384,4385,5,1208,0,0,4385,4386,3,308,154,0,4386,4387,5,1208,0,
        0,4387,4388,3,308,154,0,4388,4389,5,1208,0,0,4389,4390,3,308,154,
        0,4390,4391,5,1208,0,0,4391,4392,3,308,154,0,4392,4394,1,0,0,0,4393,
        4384,1,0,0,0,4393,4394,1,0,0,0,4394,4395,1,0,0,0,4395,4396,5,1214,
        0,0,4396,4426,1,0,0,0,4397,4399,3,378,189,0,4398,4397,1,0,0,0,4398,
        4399,1,0,0,0,4399,4400,1,0,0,0,4400,4401,5,881,0,0,4401,4402,5,1213,
        0,0,4402,4403,3,308,154,0,4403,4404,5,1208,0,0,4404,4407,3,308,154,
        0,4405,4406,5,1208,0,0,4406,4408,3,308,154,0,4407,4405,1,0,0,0,4407,
        4408,1,0,0,0,4408,4409,1,0,0,0,4409,4410,5,1214,0,0,4410,4426,1,
        0,0,0,4411,4413,3,378,189,0,4412,4411,1,0,0,0,4412,4413,1,0,0,0,
        4413,4414,1,0,0,0,4414,4415,5,1083,0,0,4415,4416,5,1213,0,0,4416,
        4417,3,308,154,0,4417,4418,5,1208,0,0,4418,4419,3,308,154,0,4419,
        4420,5,1208,0,0,4420,4421,3,308,154,0,4421,4422,5,1208,0,0,4422,
        4423,3,308,154,0,4423,4424,5,1214,0,0,4424,4426,1,0,0,0,4425,4337,
        1,0,0,0,4425,4356,1,0,0,0,4425,4377,1,0,0,0,4425,4398,1,0,0,0,4425,
        4412,1,0,0,0,4426,367,1,0,0,0,4427,4429,3,378,189,0,4428,4427,1,
        0,0,0,4428,4429,1,0,0,0,4429,4430,1,0,0,0,4430,4431,7,66,0,0,4431,
        4432,5,1213,0,0,4432,4433,3,308,154,0,4433,4434,5,1214,0,0,4434,
        4741,1,0,0,0,4435,4436,7,67,0,0,4436,4437,5,1213,0,0,4437,4438,3,
        308,154,0,4438,4439,5,1214,0,0,4439,4741,1,0,0,0,4440,4441,5,586,
        0,0,4441,4442,5,1213,0,0,4442,4443,3,308,154,0,4443,4444,5,1208,
        0,0,4444,4449,3,308,154,0,4445,4446,5,1208,0,0,4446,4448,3,308,154,
        0,4447,4445,1,0,0,0,4448,4451,1,0,0,0,4449,4447,1,0,0,0,4449,4450,
        1,0,0,0,4450,4452,1,0,0,0,4451,4449,1,0,0,0,4452,4453,5,1214,0,0,
        4453,4741,1,0,0,0,4454,4456,3,378,189,0,4455,4454,1,0,0,0,4455,4456,
        1,0,0,0,4456,4457,1,0,0,0,4457,4458,5,1073,0,0,4458,4459,5,1213,
        0,0,4459,4460,5,265,0,0,4460,4461,5,1098,0,0,4461,4462,5,437,0,0,
        4462,4463,5,1213,0,0,4463,4468,3,308,154,0,4464,4465,5,1208,0,0,
        4465,4467,3,308,154,0,4466,4464,1,0,0,0,4467,4470,1,0,0,0,4468,4466,
        1,0,0,0,4468,4469,1,0,0,0,4469,4471,1,0,0,0,4470,4468,1,0,0,0,4471,
        4472,5,1214,0,0,4472,4473,5,1208,0,0,4473,4474,3,70,35,0,4474,4475,
        5,1208,0,0,4475,4476,3,70,35,0,4476,4477,5,1214,0,0,4477,4741,1,
        0,0,0,4478,4480,3,378,189,0,4479,4478,1,0,0,0,4479,4480,1,0,0,0,
        4480,4481,1,0,0,0,4481,4482,5,1074,0,0,4482,4483,5,1213,0,0,4483,
        4484,3,308,154,0,4484,4485,5,1208,0,0,4485,4486,3,70,35,0,4486,4487,
        5,1208,0,0,4487,4488,3,70,35,0,4488,4489,5,1214,0,0,4489,4741,1,
        0,0,0,4490,4492,3,378,189,0,4491,4490,1,0,0,0,4491,4492,1,0,0,0,
        4492,4493,1,0,0,0,4493,4494,5,643,0,0,4494,4495,5,1213,0,0,4495,
        4496,3,308,154,0,4496,4497,5,1208,0,0,4497,4507,3,308,154,0,4498,
        4499,5,1208,0,0,4499,4500,3,76,38,0,4500,4501,5,1208,0,0,4501,4502,
        3,76,38,0,4502,4503,5,1208,0,0,4503,4504,3,76,38,0,4504,4505,5,1208,
        0,0,4505,4506,3,76,38,0,4506,4508,1,0,0,0,4507,4498,1,0,0,0,4507,
        4508,1,0,0,0,4508,4509,1,0,0,0,4509,4510,5,1214,0,0,4510,4741,1,
        0,0,0,4511,4512,5,192,0,0,4512,4513,5,1213,0,0,4513,4514,3,308,154,
        0,4514,4515,5,1208,0,0,4515,4516,3,308,154,0,4516,4517,5,1214,0,
        0,4517,4741,1,0,0,0,4518,4520,3,378,189,0,4519,4518,1,0,0,0,4519,
        4520,1,0,0,0,4520,4521,1,0,0,0,4521,4522,5,711,0,0,4522,4523,5,1213,
        0,0,4523,4524,3,308,154,0,4524,4525,5,1208,0,0,4525,4532,3,308,154,
        0,4526,4527,5,1208,0,0,4527,4530,3,308,154,0,4528,4529,5,1208,0,
        0,4529,4531,3,308,154,0,4530,4528,1,0,0,0,4530,4531,1,0,0,0,4531,
        4533,1,0,0,0,4532,4526,1,0,0,0,4532,4533,1,0,0,0,4533,4534,1,0,0,
        0,4534,4535,5,1214,0,0,4535,4741,1,0,0,0,4536,4538,3,378,189,0,4537,
        4536,1,0,0,0,4537,4538,1,0,0,0,4538,4539,1,0,0,0,4539,4540,7,68,
        0,0,4540,4541,5,1213,0,0,4541,4542,3,308,154,0,4542,4543,5,1208,
        0,0,4543,4544,3,308,154,0,4544,4545,5,1214,0,0,4545,4741,1,0,0,0,
        4546,4547,5,743,0,0,4547,4548,5,1213,0,0,4548,4549,3,308,154,0,4549,
        4550,5,1208,0,0,4550,4553,3,308,154,0,4551,4552,5,1208,0,0,4552,
        4554,3,308,154,0,4553,4551,1,0,0,0,4553,4554,1,0,0,0,4554,4555,1,
        0,0,0,4555,4556,5,1214,0,0,4556,4741,1,0,0,0,4557,4558,7,69,0,0,
        4558,4559,5,1213,0,0,4559,4560,3,308,154,0,4560,4561,5,1214,0,0,
        4561,4741,1,0,0,0,4562,4564,3,378,189,0,4563,4562,1,0,0,0,4563,4564,
        1,0,0,0,4564,4565,1,0,0,0,4565,4566,7,70,0,0,4566,4567,5,1213,0,
        0,4567,4568,3,308,154,0,4568,4569,5,1208,0,0,4569,4572,3,308,154,
        0,4570,4571,5,1208,0,0,4571,4573,3,308,154,0,4572,4570,1,0,0,0,4572,
        4573,1,0,0,0,4573,4574,1,0,0,0,4574,4575,5,1214,0,0,4575,4741,1,
        0,0,0,4576,4578,3,378,189,0,4577,4576,1,0,0,0,4577,4578,1,0,0,0,
        4578,4579,1,0,0,0,4579,4580,7,71,0,0,4580,4581,5,1213,0,0,4581,4584,
        3,308,154,0,4582,4583,5,1208,0,0,4583,4585,3,308,154,0,4584,4582,
        1,0,0,0,4584,4585,1,0,0,0,4585,4586,1,0,0,0,4586,4587,5,1214,0,0,
        4587,4741,1,0,0,0,4588,4590,3,378,189,0,4589,4588,1,0,0,0,4589,4590,
        1,0,0,0,4590,4591,1,0,0,0,4591,4592,5,793,0,0,4592,4593,5,1213,0,
        0,4593,4594,3,308,154,0,4594,4595,5,1208,0,0,4595,4596,3,308,154,
        0,4596,4597,5,1208,0,0,4597,4600,3,308,154,0,4598,4599,5,1208,0,
        0,4599,4601,3,308,154,0,4600,4598,1,0,0,0,4600,4601,1,0,0,0,4601,
        4602,1,0,0,0,4602,4603,5,1214,0,0,4603,4741,1,0,0,0,4604,4606,3,
        378,189,0,4605,4604,1,0,0,0,4605,4606,1,0,0,0,4606,4607,1,0,0,0,
        4607,4608,5,812,0,0,4608,4609,5,1213,0,0,4609,4610,3,308,154,0,4610,
        4611,5,1208,0,0,4611,4622,3,308,154,0,4612,4613,5,1208,0,0,4613,
        4620,3,308,154,0,4614,4615,5,1208,0,0,4615,4618,3,308,154,0,4616,
        4617,5,1208,0,0,4617,4619,3,308,154,0,4618,4616,1,0,0,0,4618,4619,
        1,0,0,0,4619,4621,1,0,0,0,4620,4614,1,0,0,0,4620,4621,1,0,0,0,4621,
        4623,1,0,0,0,4622,4612,1,0,0,0,4622,4623,1,0,0,0,4623,4624,1,0,0,
        0,4624,4625,5,1214,0,0,4625,4741,1,0,0,0,4626,4628,3,378,189,0,4627,
        4626,1,0,0,0,4627,4628,1,0,0,0,4628,4629,1,0,0,0,4629,4630,5,830,
        0,0,4630,4631,5,1213,0,0,4631,4632,3,308,154,0,4632,4633,5,1208,
        0,0,4633,4636,3,308,154,0,4634,4635,5,1208,0,0,4635,4637,3,308,154,
        0,4636,4634,1,0,0,0,4636,4637,1,0,0,0,4637,4638,1,0,0,0,4638,4639,
        5,1214,0,0,4639,4741,1,0,0,0,4640,4642,3,378,189,0,4641,4640,1,0,
        0,0,4641,4642,1,0,0,0,4642,4643,1,0,0,0,4643,4644,5,831,0,0,4644,
        4645,5,1213,0,0,4645,4646,3,308,154,0,4646,4647,5,1208,0,0,4647,
        4648,3,308,154,0,4648,4649,5,1208,0,0,4649,4650,3,308,154,0,4650,
        4651,5,1214,0,0,4651,4741,1,0,0,0,4652,4653,5,304,0,0,4653,4654,
        5,1213,0,0,4654,4655,3,308,154,0,4655,4656,5,190,0,0,4656,4657,3,
        308,154,0,4657,4658,5,1214,0,0,4658,4741,1,0,0,0,4659,4661,3,378,
        189,0,4660,4659,1,0,0,0,4660,4661,1,0,0,0,4661,4662,1,0,0,0,4662,
        4663,5,943,0,0,4663,4664,5,1213,0,0,4664,4671,3,308,154,0,4665,4666,
        5,1208,0,0,4666,4669,3,308,154,0,4667,4668,5,1208,0,0,4668,4670,
        3,308,154,0,4669,4667,1,0,0,0,4669,4670,1,0,0,0,4670,4672,1,0,0,
        0,4671,4665,1,0,0,0,4671,4672,1,0,0,0,4672,4673,1,0,0,0,4673,4674,
        5,1214,0,0,4674,4741,1,0,0,0,4675,4677,3,378,189,0,4676,4675,1,0,
        0,0,4676,4677,1,0,0,0,4677,4678,1,0,0,0,4678,4679,5,1087,0,0,4679,
        4680,5,1213,0,0,4680,4681,3,308,154,0,4681,4682,5,1208,0,0,4682,
        4683,3,308,154,0,4683,4684,5,1208,0,0,4684,4685,3,308,154,0,4685,
        4686,5,1214,0,0,4686,4687,5,352,0,0,4687,4688,5,1213,0,0,4688,4689,
        3,498,249,0,4689,4690,5,1208,0,0,4690,4691,3,498,249,0,4691,4692,
        5,1208,0,0,4692,4693,3,498,249,0,4693,4694,5,1214,0,0,4694,4741,
        1,0,0,0,4695,4696,5,402,0,0,4696,4697,5,1213,0,0,4697,4698,3,308,
        154,0,4698,4699,5,164,0,0,4699,4702,3,308,154,0,4700,4701,7,72,0,
        0,4701,4703,3,308,154,0,4702,4700,1,0,0,0,4702,4703,1,0,0,0,4703,
        4704,1,0,0,0,4704,4705,5,1214,0,0,4705,4741,1,0,0,0,4706,4707,7,
        73,0,0,4707,4708,5,1213,0,0,4708,4709,3,308,154,0,4709,4710,5,1208,
        0,0,4710,4713,3,308,154,0,4711,4712,7,72,0,0,4712,4714,3,308,154,
        0,4713,4711,1,0,0,0,4713,4714,1,0,0,0,4714,4715,1,0,0,0,4715,4716,
        5,1214,0,0,4716,4741,1,0,0,0,4717,4718,7,74,0,0,4718,4719,5,1213,
        0,0,4719,4720,3,308,154,0,4720,4721,5,457,0,0,4721,4724,3,386,193,
        0,4722,4723,5,474,0,0,4723,4725,5,137,0,0,4724,4722,1,0,0,0,4724,
        4725,1,0,0,0,4725,4726,1,0,0,0,4726,4727,5,1214,0,0,4727,4741,1,
        0,0,0,4728,4729,5,436,0,0,4729,4735,5,1213,0,0,4730,4732,7,75,0,
        0,4731,4733,3,308,154,0,4732,4731,1,0,0,0,4732,4733,1,0,0,0,4733,
        4734,1,0,0,0,4734,4736,5,164,0,0,4735,4730,1,0,0,0,4735,4736,1,0,
        0,0,4736,4737,1,0,0,0,4737,4738,3,308,154,0,4738,4739,5,1214,0,0,
        4739,4741,1,0,0,0,4740,4428,1,0,0,0,4740,4435,1,0,0,0,4740,4440,
        1,0,0,0,4740,4455,1,0,0,0,4740,4479,1,0,0,0,4740,4491,1,0,0,0,4740,
        4511,1,0,0,0,4740,4519,1,0,0,0,4740,4537,1,0,0,0,4740,4546,1,0,0,
        0,4740,4557,1,0,0,0,4740,4563,1,0,0,0,4740,4577,1,0,0,0,4740,4589,
        1,0,0,0,4740,4605,1,0,0,0,4740,4627,1,0,0,0,4740,4641,1,0,0,0,4740,
        4652,1,0,0,0,4740,4660,1,0,0,0,4740,4676,1,0,0,0,4740,4695,1,0,0,
        0,4740,4706,1,0,0,0,4740,4717,1,0,0,0,4740,4728,1,0,0,0,4741,369,
        1,0,0,0,4742,4744,3,378,189,0,4743,4742,1,0,0,0,4743,4744,1,0,0,
        0,4744,4745,1,0,0,0,4745,4746,5,1174,0,0,4746,4747,5,1213,0,0,4747,
        4748,3,308,154,0,4748,4750,5,1214,0,0,4749,4751,3,390,195,0,4750,
        4749,1,0,0,0,4750,4751,1,0,0,0,4751,4865,1,0,0,0,4752,4754,3,378,
        189,0,4753,4752,1,0,0,0,4753,4754,1,0,0,0,4754,4755,1,0,0,0,4755,
        4756,5,1175,0,0,4756,4757,5,1213,0,0,4757,4760,3,308,154,0,4758,
        4759,5,1208,0,0,4759,4761,3,70,35,0,4760,4758,1,0,0,0,4760,4761,
        1,0,0,0,4761,4762,1,0,0,0,4762,4763,5,1214,0,0,4763,4865,1,0,0,0,
        4764,4766,3,378,189,0,4765,4764,1,0,0,0,4765,4766,1,0,0,0,4766,4767,
        1,0,0,0,4767,4768,5,1075,0,0,4768,4769,5,1213,0,0,4769,4770,3,308,
        154,0,4770,4771,5,1214,0,0,4771,4865,1,0,0,0,4772,4774,3,378,189,
        0,4773,4772,1,0,0,0,4773,4774,1,0,0,0,4774,4775,1,0,0,0,4775,4776,
        5,1176,0,0,4776,4777,5,1213,0,0,4777,4780,3,308,154,0,4778,4779,
        5,1208,0,0,4779,4781,3,76,38,0,4780,4778,1,0,0,0,4780,4781,1,0,0,
        0,4781,4782,1,0,0,0,4782,4784,5,1214,0,0,4783,4785,3,390,195,0,4784,
        4783,1,0,0,0,4784,4785,1,0,0,0,4785,4865,1,0,0,0,4786,4788,3,378,
        189,0,4787,4786,1,0,0,0,4787,4788,1,0,0,0,4788,4789,1,0,0,0,4789,
        4790,5,1177,0,0,4790,4791,5,1213,0,0,4791,4792,3,308,154,0,4792,
        4793,5,1208,0,0,4793,4794,3,76,38,0,4794,4795,5,1214,0,0,4795,4865,
        1,0,0,0,4796,4798,3,378,189,0,4797,4796,1,0,0,0,4797,4798,1,0,0,
        0,4798,4799,1,0,0,0,4799,4800,5,1178,0,0,4800,4801,5,1213,0,0,4801,
        4802,3,308,154,0,4802,4803,5,1214,0,0,4803,4865,1,0,0,0,4804,4805,
        5,1179,0,0,4805,4806,5,1213,0,0,4806,4807,3,308,154,0,4807,4808,
        5,1208,0,0,4808,4809,3,308,154,0,4809,4810,5,20,0,0,4810,4811,3,
        0,0,0,4811,4812,5,1214,0,0,4812,4865,1,0,0,0,4813,4814,5,1180,0,
        0,4814,4815,5,1213,0,0,4815,4816,3,308,154,0,4816,4817,5,1214,0,
        0,4817,4865,1,0,0,0,4818,4820,3,378,189,0,4819,4818,1,0,0,0,4819,
        4820,1,0,0,0,4820,4821,1,0,0,0,4821,4822,5,1181,0,0,4822,4823,5,
        1213,0,0,4823,4832,3,308,154,0,4824,4825,5,1208,0,0,4825,4826,3,
        70,35,0,4826,4827,5,1208,0,0,4827,4830,3,70,35,0,4828,4829,5,1208,
        0,0,4829,4831,3,70,35,0,4830,4828,1,0,0,0,4830,4831,1,0,0,0,4831,
        4833,1,0,0,0,4832,4824,1,0,0,0,4832,4833,1,0,0,0,4833,4834,1,0,0,
        0,4834,4835,5,1214,0,0,4835,4865,1,0,0,0,4836,4837,5,721,0,0,4837,
        4838,5,1213,0,0,4838,4843,3,426,213,0,4839,4840,5,1208,0,0,4840,
        4842,3,426,213,0,4841,4839,1,0,0,0,4842,4845,1,0,0,0,4843,4841,1,
        0,0,0,4843,4844,1,0,0,0,4844,4846,1,0,0,0,4845,4843,1,0,0,0,4846,
        4848,5,1214,0,0,4847,4849,3,390,195,0,4848,4847,1,0,0,0,4848,4849,
        1,0,0,0,4849,4865,1,0,0,0,4850,4851,5,722,0,0,4851,4852,5,1213,0,
        0,4852,4857,3,426,213,0,4853,4854,5,1208,0,0,4854,4856,3,426,213,
        0,4855,4853,1,0,0,0,4856,4859,1,0,0,0,4857,4855,1,0,0,0,4857,4858,
        1,0,0,0,4858,4860,1,0,0,0,4859,4857,1,0,0,0,4860,4862,5,1214,0,0,
        4861,4863,3,390,195,0,4862,4861,1,0,0,0,4862,4863,1,0,0,0,4863,4865,
        1,0,0,0,4864,4743,1,0,0,0,4864,4753,1,0,0,0,4864,4765,1,0,0,0,4864,
        4773,1,0,0,0,4864,4787,1,0,0,0,4864,4797,1,0,0,0,4864,4804,1,0,0,
        0,4864,4813,1,0,0,0,4864,4819,1,0,0,0,4864,4836,1,0,0,0,4864,4850,
        1,0,0,0,4865,371,1,0,0,0,4866,4867,5,1068,0,0,4867,4868,5,1213,0,
        0,4868,4869,3,308,154,0,4869,4870,5,1214,0,0,4870,5114,1,0,0,0,4871,
        4873,3,378,189,0,4872,4871,1,0,0,0,4872,4873,1,0,0,0,4873,4874,1,
        0,0,0,4874,4875,5,1075,0,0,4875,4876,5,1213,0,0,4876,4877,3,308,
        154,0,4877,4878,5,1214,0,0,4878,5114,1,0,0,0,4879,4880,5,1054,0,
        0,4880,4881,5,1213,0,0,4881,4883,3,70,35,0,4882,4884,3,428,214,0,
        4883,4882,1,0,0,0,4883,4884,1,0,0,0,4884,4886,1,0,0,0,4885,4887,
        3,452,226,0,4886,4885,1,0,0,0,4886,4887,1,0,0,0,4887,4889,1,0,0,
        0,4888,4890,3,450,225,0,4889,4888,1,0,0,0,4889,4890,1,0,0,0,4890,
        4891,1,0,0,0,4891,4892,5,1214,0,0,4892,5114,1,0,0,0,4893,4894,5,
        1056,0,0,4894,4895,5,1213,0,0,4895,4896,7,76,0,0,4896,4899,3,308,
        154,0,4897,4898,5,20,0,0,4898,4900,3,0,0,0,4899,4897,1,0,0,0,4899,
        4900,1,0,0,0,4900,4902,1,0,0,0,4901,4903,3,448,224,0,4902,4901,1,
        0,0,0,4902,4903,1,0,0,0,4903,4909,1,0,0,0,4904,4906,5,474,0,0,4905,
        4907,5,268,0,0,4906,4905,1,0,0,0,4906,4907,1,0,0,0,4907,4908,1,0,
        0,0,4908,4910,5,554,0,0,4909,4904,1,0,0,0,4909,4910,1,0,0,0,4910,
        4913,1,0,0,0,4911,4912,5,1023,0,0,4912,4914,3,70,35,0,4913,4911,
        1,0,0,0,4913,4914,1,0,0,0,4914,4917,1,0,0,0,4915,4916,7,77,0,0,4916,
        4918,5,1047,0,0,4917,4915,1,0,0,0,4917,4918,1,0,0,0,4918,4925,1,
        0,0,0,4919,4920,5,268,0,0,4920,4926,5,704,0,0,4921,4922,5,704,0,
        0,4922,4923,5,927,0,0,4923,4924,5,1224,0,0,4924,4926,3,76,38,0,4925,
        4919,1,0,0,0,4925,4921,1,0,0,0,4925,4926,1,0,0,0,4926,4927,1,0,0,
        0,4927,4928,5,1214,0,0,4928,5114,1,0,0,0,4929,4930,5,1048,0,0,4930,
        4931,5,1213,0,0,4931,4933,3,308,154,0,4932,4934,3,452,226,0,4933,
        4932,1,0,0,0,4933,4934,1,0,0,0,4934,4935,1,0,0,0,4935,4936,5,1214,
        0,0,4936,5114,1,0,0,0,4937,4938,5,1049,0,0,4938,4939,5,1213,0,0,
        4939,4940,5,789,0,0,4940,4943,3,96,48,0,4941,4942,5,1208,0,0,4942,
        4944,3,440,220,0,4943,4941,1,0,0,0,4943,4944,1,0,0,0,4944,4947,1,
        0,0,0,4945,4946,5,1208,0,0,4946,4948,3,432,216,0,4947,4945,1,0,0,
        0,4947,4948,1,0,0,0,4948,4951,1,0,0,0,4949,4950,5,1208,0,0,4950,
        4952,3,438,219,0,4951,4949,1,0,0,0,4951,4952,1,0,0,0,4952,4954,1,
        0,0,0,4953,4955,3,452,226,0,4954,4953,1,0,0,0,4954,4955,1,0,0,0,
        4955,4956,1,0,0,0,4956,4957,5,1214,0,0,4957,5114,1,0,0,0,4958,4959,
        5,1050,0,0,4959,4961,5,1213,0,0,4960,4962,3,440,220,0,4961,4960,
        1,0,0,0,4961,4962,1,0,0,0,4962,4971,1,0,0,0,4963,4968,3,436,218,
        0,4964,4965,5,1208,0,0,4965,4967,3,436,218,0,4966,4964,1,0,0,0,4967,
        4970,1,0,0,0,4968,4966,1,0,0,0,4968,4969,1,0,0,0,4969,4972,1,0,0,
        0,4970,4968,1,0,0,0,4971,4963,1,0,0,0,4971,4972,1,0,0,0,4972,4974,
        1,0,0,0,4973,4975,3,454,227,0,4974,4973,1,0,0,0,4974,4975,1,0,0,
        0,4975,4977,1,0,0,0,4976,4978,3,452,226,0,4977,4976,1,0,0,0,4977,
        4978,1,0,0,0,4978,4979,1,0,0,0,4979,5114,5,1214,0,0,4980,4981,5,
        1046,0,0,4981,4982,5,1213,0,0,4982,4987,3,308,154,0,4983,4984,5,
        1208,0,0,4984,4986,3,308,154,0,4985,4983,1,0,0,0,4986,4989,1,0,0,
        0,4987,4985,1,0,0,0,4987,4988,1,0,0,0,4988,4991,1,0,0,0,4989,4987,
        1,0,0,0,4990,4992,3,452,226,0,4991,4990,1,0,0,0,4991,4992,1,0,0,
        0,4992,4993,1,0,0,0,4993,4994,5,1214,0,0,4994,5114,1,0,0,0,4995,
        4996,5,1045,0,0,4996,4997,5,1213,0,0,4997,4999,3,308,154,0,4998,
        5000,3,452,226,0,4999,4998,1,0,0,0,4999,5000,1,0,0,0,5000,5001,1,
        0,0,0,5001,5002,5,1214,0,0,5002,5114,1,0,0,0,5003,5004,5,1053,0,
        0,5004,5005,5,1213,0,0,5005,5006,5,789,0,0,5006,5009,3,96,48,0,5007,
        5008,5,1208,0,0,5008,5010,3,308,154,0,5009,5007,1,0,0,0,5009,5010,
        1,0,0,0,5010,5012,1,0,0,0,5011,5013,3,452,226,0,5012,5011,1,0,0,
        0,5012,5013,1,0,0,0,5013,5014,1,0,0,0,5014,5015,5,1214,0,0,5015,
        5114,1,0,0,0,5016,5017,5,1058,0,0,5017,5018,5,1213,0,0,5018,5020,
        3,308,154,0,5019,5021,3,452,226,0,5020,5019,1,0,0,0,5020,5021,1,
        0,0,0,5021,5022,1,0,0,0,5022,5023,5,1214,0,0,5023,5114,1,0,0,0,5024,
        5025,5,1052,0,0,5025,5026,5,1213,0,0,5026,5027,7,76,0,0,5027,5028,
        3,308,154,0,5028,5029,7,78,0,0,5029,5030,5,1037,0,0,5030,5031,5,
        1214,0,0,5031,5114,1,0,0,0,5032,5033,5,1060,0,0,5033,5034,5,1213,
        0,0,5034,5035,7,79,0,0,5035,5036,3,308,154,0,5036,5037,5,491,0,0,
        5037,5038,5,426,0,0,5038,5039,5,1055,0,0,5039,5040,5,459,0,0,5040,
        5045,3,308,154,0,5041,5042,5,790,0,0,5042,5046,3,70,35,0,5043,5044,
        5,268,0,0,5044,5046,5,790,0,0,5045,5041,1,0,0,0,5045,5043,1,0,0,
        0,5045,5046,1,0,0,0,5046,5049,1,0,0,0,5047,5048,5,646,0,0,5048,5050,
        3,308,154,0,5049,5047,1,0,0,0,5049,5050,1,0,0,0,5050,5051,1,0,0,
        0,5051,5052,5,1214,0,0,5052,5114,1,0,0,0,5053,5054,5,1043,0,0,5054,
        5055,5,1213,0,0,5055,5066,3,308,154,0,5056,5057,5,291,0,0,5057,5058,
        5,42,0,0,5058,5063,3,300,150,0,5059,5060,5,1208,0,0,5060,5062,3,
        300,150,0,5061,5059,1,0,0,0,5062,5065,1,0,0,0,5063,5061,1,0,0,0,
        5063,5064,1,0,0,0,5064,5067,1,0,0,0,5065,5063,1,0,0,0,5066,5056,
        1,0,0,0,5066,5067,1,0,0,0,5067,5069,1,0,0,0,5068,5070,3,452,226,
        0,5069,5068,1,0,0,0,5069,5070,1,0,0,0,5070,5071,1,0,0,0,5071,5072,
        5,1214,0,0,5072,5114,1,0,0,0,5073,5074,5,1103,0,0,5074,5075,5,1213,
        0,0,5075,5076,3,308,154,0,5076,5077,5,1208,0,0,5077,5078,3,308,154,
        0,5078,5079,5,1208,0,0,5079,5080,3,308,154,0,5080,5081,5,1208,0,
        0,5081,5086,3,308,154,0,5082,5083,5,1208,0,0,5083,5085,3,308,154,
        0,5084,5082,1,0,0,0,5085,5088,1,0,0,0,5086,5084,1,0,0,0,5086,5087,
        1,0,0,0,5087,5089,1,0,0,0,5088,5086,1,0,0,0,5089,5090,5,1214,0,0,
        5090,5114,1,0,0,0,5091,5092,3,380,190,0,5092,5093,5,1101,0,0,5093,
        5094,5,1213,0,0,5094,5095,3,308,154,0,5095,5096,5,1208,0,0,5096,
        5097,3,308,154,0,5097,5098,5,1208,0,0,5098,5099,3,308,154,0,5099,
        5100,5,1208,0,0,5100,5101,3,308,154,0,5101,5102,5,1214,0,0,5102,
        5114,1,0,0,0,5103,5104,3,380,190,0,5104,5105,5,1102,0,0,5105,5106,
        5,1213,0,0,5106,5107,3,308,154,0,5107,5108,5,1208,0,0,5108,5109,
        3,308,154,0,5109,5110,5,1208,0,0,5110,5111,3,308,154,0,5111,5112,
        5,1214,0,0,5112,5114,1,0,0,0,5113,4866,1,0,0,0,5113,4872,1,0,0,0,
        5113,4879,1,0,0,0,5113,4893,1,0,0,0,5113,4929,1,0,0,0,5113,4937,
        1,0,0,0,5113,4958,1,0,0,0,5113,4980,1,0,0,0,5113,4995,1,0,0,0,5113,
        5003,1,0,0,0,5113,5016,1,0,0,0,5113,5024,1,0,0,0,5113,5032,1,0,0,
        0,5113,5053,1,0,0,0,5113,5073,1,0,0,0,5113,5091,1,0,0,0,5113,5103,
        1,0,0,0,5114,373,1,0,0,0,5115,5116,3,108,54,0,5116,5117,5,1213,0,
        0,5117,5122,3,308,154,0,5118,5119,5,1208,0,0,5119,5121,3,308,154,
        0,5120,5118,1,0,0,0,5121,5124,1,0,0,0,5122,5120,1,0,0,0,5122,5123,
        1,0,0,0,5123,5125,1,0,0,0,5124,5122,1,0,0,0,5125,5128,5,1214,0,0,
        5126,5129,3,390,195,0,5127,5129,3,414,207,0,5128,5126,1,0,0,0,5128,
        5127,1,0,0,0,5128,5129,1,0,0,0,5129,5138,1,0,0,0,5130,5131,3,108,
        54,0,5131,5132,5,1213,0,0,5132,5135,5,1214,0,0,5133,5136,3,390,195,
        0,5134,5136,3,414,207,0,5135,5133,1,0,0,0,5135,5134,1,0,0,0,5135,
        5136,1,0,0,0,5136,5138,1,0,0,0,5137,5115,1,0,0,0,5137,5130,1,0,0,
        0,5138,375,1,0,0,0,5139,5140,5,48,0,0,5140,5141,5,1213,0,0,5141,
        5146,3,306,153,0,5142,5143,5,1208,0,0,5143,5145,3,306,153,0,5144,
        5142,1,0,0,0,5145,5148,1,0,0,0,5146,5144,1,0,0,0,5146,5147,1,0,0,
        0,5147,5151,1,0,0,0,5148,5146,1,0,0,0,5149,5150,5,1208,0,0,5150,
        5152,3,398,199,0,5151,5149,1,0,0,0,5151,5152,1,0,0,0,5152,5153,1,
        0,0,0,5153,5154,5,1214,0,0,5154,5167,1,0,0,0,5155,5156,5,320,0,0,
        5156,5157,5,1213,0,0,5157,5158,3,308,154,0,5158,5159,5,35,0,0,5159,
        5162,3,400,200,0,5160,5161,5,1208,0,0,5161,5163,3,410,205,0,5162,
        5160,1,0,0,0,5162,5163,1,0,0,0,5163,5164,1,0,0,0,5164,5165,5,1214,
        0,0,5165,5167,1,0,0,0,5166,5139,1,0,0,0,5166,5155,1,0,0,0,5167,377,
        1,0,0,0,5168,5169,5,1091,0,0,5169,5170,5,1209,0,0,5170,379,1,0,0,
        0,5171,5172,5,1092,0,0,5172,5173,5,1209,0,0,5173,381,1,0,0,0,5174,
        5175,5,1088,0,0,5175,5176,5,1209,0,0,5176,383,1,0,0,0,5177,5178,
        5,1090,0,0,5178,5179,5,1209,0,0,5179,385,1,0,0,0,5180,5181,7,80,
        0,0,5181,387,1,0,0,0,5182,5183,5,1213,0,0,5183,5188,3,392,196,0,
        5184,5185,5,1208,0,0,5185,5187,3,392,196,0,5186,5184,1,0,0,0,5187,
        5190,1,0,0,0,5188,5186,1,0,0,0,5188,5189,1,0,0,0,5189,5191,1,0,0,
        0,5190,5188,1,0,0,0,5191,5192,5,1214,0,0,5192,389,1,0,0,0,5193,5194,
        5,352,0,0,5194,5199,3,0,0,0,5195,5196,5,352,0,0,5196,5197,5,944,
        0,0,5197,5199,3,96,48,0,5198,5193,1,0,0,0,5198,5195,1,0,0,0,5199,
        391,1,0,0,0,5200,5205,3,396,198,0,5201,5205,3,44,22,0,5202,5205,
        3,40,20,0,5203,5205,3,42,21,0,5204,5200,1,0,0,0,5204,5201,1,0,0,
        0,5204,5202,1,0,0,0,5204,5203,1,0,0,0,5205,393,1,0,0,0,5206,5212,
        5,1213,0,0,5207,5208,3,396,198,0,5208,5209,5,1208,0,0,5209,5211,
        1,0,0,0,5210,5207,1,0,0,0,5211,5214,1,0,0,0,5212,5210,1,0,0,0,5212,
        5213,1,0,0,0,5213,5215,1,0,0,0,5214,5212,1,0,0,0,5215,5223,3,0,0,
        0,5216,5219,5,1208,0,0,5217,5220,3,396,198,0,5218,5220,3,40,20,0,
        5219,5217,1,0,0,0,5219,5218,1,0,0,0,5220,5222,1,0,0,0,5221,5216,
        1,0,0,0,5222,5225,1,0,0,0,5223,5221,1,0,0,0,5223,5224,1,0,0,0,5224,
        5226,1,0,0,0,5225,5223,1,0,0,0,5226,5227,5,1214,0,0,5227,395,1,0,
        0,0,5228,5232,3,46,23,0,5229,5232,3,50,25,0,5230,5232,3,48,24,0,
        5231,5228,1,0,0,0,5231,5229,1,0,0,0,5231,5230,1,0,0,0,5232,397,1,
        0,0,0,5233,5234,5,268,0,0,5234,5237,5,47,0,0,5235,5236,7,81,0,0,
        5236,5238,5,1016,0,0,5237,5235,1,0,0,0,5237,5238,1,0,0,0,5238,5241,
        1,0,0,0,5239,5241,5,1016,0,0,5240,5233,1,0,0,0,5240,5239,1,0,0,0,
        5241,399,1,0,0,0,5242,5246,3,404,202,0,5243,5246,3,406,203,0,5244,
        5246,3,402,201,0,5245,5242,1,0,0,0,5245,5243,1,0,0,0,5245,5244,1,
        0,0,0,5246,401,1,0,0,0,5247,5254,3,408,204,0,5248,5251,5,1219,0,
        0,5249,5250,5,16,0,0,5250,5252,3,308,154,0,5251,5249,1,0,0,0,5251,
        5252,1,0,0,0,5252,5254,1,0,0,0,5253,5247,1,0,0,0,5253,5248,1,0,0,
        0,5254,5259,1,0,0,0,5255,5256,5,1208,0,0,5256,5258,3,408,204,0,5257,
        5255,1,0,0,0,5258,5261,1,0,0,0,5259,5257,1,0,0,0,5259,5260,1,0,0,
        0,5260,5262,1,0,0,0,5261,5259,1,0,0,0,5262,5263,5,1208,0,0,5263,
        5264,3,404,202,0,5264,403,1,0,0,0,5265,5266,3,308,154,0,5266,5269,
        5,16,0,0,5267,5270,3,308,154,0,5268,5270,5,1219,0,0,5269,5267,1,
        0,0,0,5269,5268,1,0,0,0,5270,5273,1,0,0,0,5271,5272,5,129,0,0,5272,
        5274,3,308,154,0,5273,5271,1,0,0,0,5273,5274,1,0,0,0,5274,405,1,
        0,0,0,5275,5276,5,1219,0,0,5276,5279,5,16,0,0,5277,5280,3,308,154,
        0,5278,5280,5,1219,0,0,5279,5277,1,0,0,0,5279,5278,1,0,0,0,5280,
        407,1,0,0,0,5281,5282,3,308,154,0,5282,5283,5,16,0,0,5283,5284,3,
        308,154,0,5284,5287,1,0,0,0,5285,5286,5,129,0,0,5286,5288,3,308,
        154,0,5287,5285,1,0,0,0,5287,5288,1,0,0,0,5288,409,1,0,0,0,5289,
        5290,5,268,0,0,5290,5293,5,873,0,0,5291,5292,7,81,0,0,5292,5294,
        5,1016,0,0,5293,5291,1,0,0,0,5293,5294,1,0,0,0,5294,5297,1,0,0,0,
        5295,5297,5,1016,0,0,5296,5289,1,0,0,0,5296,5295,1,0,0,0,5297,411,
        1,0,0,0,5298,5307,3,308,154,0,5299,5300,5,236,0,0,5300,5301,5,1224,
        0,0,5301,5302,3,70,35,0,5302,5303,5,577,0,0,5303,5304,5,457,0,0,
        5304,5305,5,1224,0,0,5305,5306,3,70,35,0,5306,5308,1,0,0,0,5307,
        5299,1,0,0,0,5307,5308,1,0,0,0,5308,5318,1,0,0,0,5309,5310,3,308,
        154,0,5310,5311,5,236,0,0,5311,5312,5,1224,0,0,5312,5313,3,70,35,
        0,5313,5318,1,0,0,0,5314,5315,5,236,0,0,5315,5316,5,1224,0,0,5316,
        5318,3,70,35,0,5317,5298,1,0,0,0,5317,5309,1,0,0,0,5317,5314,1,0,
        0,0,5318,413,1,0,0,0,5319,5320,5,295,0,0,5320,5322,5,1213,0,0,5321,
        5323,3,420,210,0,5322,5321,1,0,0,0,5322,5323,1,0,0,0,5323,5325,1,
        0,0,0,5324,5326,3,422,211,0,5325,5324,1,0,0,0,5325,5326,1,0,0,0,
        5326,5328,1,0,0,0,5327,5329,3,424,212,0,5328,5327,1,0,0,0,5328,5329,
        1,0,0,0,5329,5330,1,0,0,0,5330,5331,5,1214,0,0,5331,415,1,0,0,0,
        5332,5333,5,295,0,0,5333,5335,5,1213,0,0,5334,5336,3,420,210,0,5335,
        5334,1,0,0,0,5335,5336,1,0,0,0,5336,5337,1,0,0,0,5337,5338,3,422,
        211,0,5338,5339,5,1214,0,0,5339,417,1,0,0,0,5340,5341,5,295,0,0,
        5341,5343,5,1213,0,0,5342,5344,3,420,210,0,5343,5342,1,0,0,0,5343,
        5344,1,0,0,0,5344,5345,1,0,0,0,5345,5347,3,422,211,0,5346,5348,3,
        460,230,0,5347,5346,1,0,0,0,5347,5348,1,0,0,0,5348,5349,1,0,0,0,
        5349,5350,5,1214,0,0,5350,419,1,0,0,0,5351,5352,5,840,0,0,5352,5353,
        5,42,0,0,5353,5358,3,308,154,0,5354,5355,5,1208,0,0,5355,5357,3,
        308,154,0,5356,5354,1,0,0,0,5357,5360,1,0,0,0,5358,5356,1,0,0,0,
        5358,5359,1,0,0,0,5359,421,1,0,0,0,5360,5358,1,0,0,0,5361,5362,5,
        291,0,0,5362,5363,5,42,0,0,5363,5368,3,300,150,0,5364,5365,5,1208,
        0,0,5365,5367,3,300,150,0,5366,5364,1,0,0,0,5367,5370,1,0,0,0,5368,
        5366,1,0,0,0,5368,5369,1,0,0,0,5369,5374,1,0,0,0,5370,5368,1,0,0,
        0,5371,5372,5,884,0,0,5372,5373,5,470,0,0,5373,5375,3,306,153,0,
        5374,5371,1,0,0,0,5374,5375,1,0,0,0,5375,423,1,0,0,0,5376,5461,5,
        364,0,0,5377,5378,5,1013,0,0,5378,5462,5,858,0,0,5379,5380,3,458,
        229,0,5380,5381,5,858,0,0,5381,5462,1,0,0,0,5382,5383,5,93,0,0,5383,
        5462,5,361,0,0,5384,5459,5,35,0,0,5385,5386,5,1013,0,0,5386,5387,
        5,858,0,0,5387,5388,5,16,0,0,5388,5389,5,1013,0,0,5389,5460,5,675,
        0,0,5390,5391,5,1013,0,0,5391,5392,5,858,0,0,5392,5393,5,16,0,0,
        5393,5394,3,458,229,0,5394,5395,5,858,0,0,5395,5460,1,0,0,0,5396,
        5397,5,1013,0,0,5397,5398,5,858,0,0,5398,5399,5,16,0,0,5399,5400,
        5,93,0,0,5400,5460,5,361,0,0,5401,5402,5,1013,0,0,5402,5403,5,858,
        0,0,5403,5404,5,16,0,0,5404,5405,3,458,229,0,5405,5406,5,675,0,0,
        5406,5460,1,0,0,0,5407,5408,3,458,229,0,5408,5409,5,858,0,0,5409,
        5410,5,16,0,0,5410,5411,5,1013,0,0,5411,5412,5,675,0,0,5412,5460,
        1,0,0,0,5413,5414,3,458,229,0,5414,5415,5,858,0,0,5415,5416,5,16,
        0,0,5416,5417,3,458,229,0,5417,5418,5,858,0,0,5418,5460,1,0,0,0,
        5419,5420,3,458,229,0,5420,5421,5,858,0,0,5421,5422,5,16,0,0,5422,
        5423,5,93,0,0,5423,5424,5,361,0,0,5424,5460,1,0,0,0,5425,5426,3,
        458,229,0,5426,5427,5,858,0,0,5427,5428,5,16,0,0,5428,5429,3,458,
        229,0,5429,5430,5,675,0,0,5430,5460,1,0,0,0,5431,5432,5,93,0,0,5432,
        5433,5,361,0,0,5433,5434,5,16,0,0,5434,5435,5,1013,0,0,5435,5460,
        5,675,0,0,5436,5437,5,93,0,0,5437,5438,5,361,0,0,5438,5439,5,16,
        0,0,5439,5440,5,93,0,0,5440,5460,5,361,0,0,5441,5442,5,93,0,0,5442,
        5443,5,361,0,0,5443,5444,5,16,0,0,5444,5445,3,458,229,0,5445,5446,
        5,675,0,0,5446,5460,1,0,0,0,5447,5448,3,458,229,0,5448,5449,5,675,
        0,0,5449,5450,5,16,0,0,5450,5451,5,1013,0,0,5451,5452,5,675,0,0,
        5452,5460,1,0,0,0,5453,5454,3,458,229,0,5454,5455,5,675,0,0,5455,
        5456,5,16,0,0,5456,5457,3,458,229,0,5457,5458,5,675,0,0,5458,5460,
        1,0,0,0,5459,5385,1,0,0,0,5459,5390,1,0,0,0,5459,5396,1,0,0,0,5459,
        5401,1,0,0,0,5459,5407,1,0,0,0,5459,5413,1,0,0,0,5459,5419,1,0,0,
        0,5459,5425,1,0,0,0,5459,5431,1,0,0,0,5459,5436,1,0,0,0,5459,5441,
        1,0,0,0,5459,5447,1,0,0,0,5459,5453,1,0,0,0,5460,5462,1,0,0,0,5461,
        5377,1,0,0,0,5461,5379,1,0,0,0,5461,5382,1,0,0,0,5461,5384,1,0,0,
        0,5462,425,1,0,0,0,5463,5468,3,308,154,0,5464,5465,5,1213,0,0,5465,
        5466,3,46,23,0,5466,5467,5,1214,0,0,5467,5469,1,0,0,0,5468,5464,
        1,0,0,0,5468,5469,1,0,0,0,5469,5472,1,0,0,0,5470,5471,5,20,0,0,5471,
        5473,3,120,60,0,5472,5470,1,0,0,0,5472,5473,1,0,0,0,5473,427,1,0,
        0,0,5474,5477,5,845,0,0,5475,5476,5,42,0,0,5476,5478,5,459,0,0,5477,
        5475,1,0,0,0,5477,5478,1,0,0,0,5478,5488,1,0,0,0,5479,5489,3,96,
        48,0,5480,5485,3,430,215,0,5481,5482,5,1208,0,0,5482,5484,3,430,
        215,0,5483,5481,1,0,0,0,5484,5487,1,0,0,0,5485,5483,1,0,0,0,5485,
        5486,1,0,0,0,5486,5489,1,0,0,0,5487,5485,1,0,0,0,5488,5479,1,0,0,
        0,5488,5480,1,0,0,0,5489,429,1,0,0,0,5490,5491,3,96,48,0,5491,5492,
        5,20,0,0,5492,5493,3,122,61,0,5493,431,1,0,0,0,5494,5495,5,1044,
        0,0,5495,5496,5,1213,0,0,5496,5501,3,434,217,0,5497,5498,5,1208,
        0,0,5498,5500,3,434,217,0,5499,5497,1,0,0,0,5500,5503,1,0,0,0,5501,
        5499,1,0,0,0,5501,5502,1,0,0,0,5502,5504,1,0,0,0,5503,5501,1,0,0,
        0,5504,5505,5,1214,0,0,5505,433,1,0,0,0,5506,5509,3,96,48,0,5507,
        5508,5,20,0,0,5508,5510,3,120,60,0,5509,5507,1,0,0,0,5509,5510,1,
        0,0,0,5510,435,1,0,0,0,5511,5514,3,96,48,0,5512,5513,5,20,0,0,5513,
        5515,3,120,60,0,5514,5512,1,0,0,0,5514,5515,1,0,0,0,5515,437,1,0,
        0,0,5516,5518,3,308,154,0,5517,5519,3,454,227,0,5518,5517,1,0,0,
        0,5518,5519,1,0,0,0,5519,439,1,0,0,0,5520,5521,5,1051,0,0,5521,5522,
        5,1213,0,0,5522,5527,3,442,221,0,5523,5524,5,1208,0,0,5524,5526,
        3,442,221,0,5525,5523,1,0,0,0,5526,5529,1,0,0,0,5527,5525,1,0,0,
        0,5527,5528,1,0,0,0,5528,5530,1,0,0,0,5529,5527,1,0,0,0,5530,5531,
        5,1214,0,0,5531,441,1,0,0,0,5532,5533,3,70,35,0,5533,5534,5,20,0,
        0,5534,5535,3,120,60,0,5535,5541,1,0,0,0,5536,5537,5,111,0,0,5537,
        5541,3,70,35,0,5538,5539,5,268,0,0,5539,5541,5,111,0,0,5540,5532,
        1,0,0,0,5540,5536,1,0,0,0,5540,5538,1,0,0,0,5541,443,1,0,0,0,5542,
        5548,5,579,0,0,5543,5544,3,96,48,0,5544,5545,5,159,0,0,5545,5546,
        5,829,0,0,5546,5549,1,0,0,0,5547,5549,3,446,223,0,5548,5543,1,0,
        0,0,5548,5547,1,0,0,0,5549,5560,1,0,0,0,5550,5556,5,1208,0,0,5551,
        5552,3,96,48,0,5552,5553,5,159,0,0,5553,5554,5,829,0,0,5554,5557,
        1,0,0,0,5555,5557,3,446,223,0,5556,5551,1,0,0,0,5556,5555,1,0,0,
        0,5557,5559,1,0,0,0,5558,5550,1,0,0,0,5559,5562,1,0,0,0,5560,5558,
        1,0,0,0,5560,5561,1,0,0,0,5561,445,1,0,0,0,5562,5560,1,0,0,0,5563,
        5564,3,100,50,0,5564,5567,3,0,0,0,5565,5566,5,1082,0,0,5566,5568,
        3,70,35,0,5567,5565,1,0,0,0,5567,5568,1,0,0,0,5568,5571,1,0,0,0,
        5569,5570,5,111,0,0,5570,5572,3,66,33,0,5571,5569,1,0,0,0,5571,5572,
        1,0,0,0,5572,447,1,0,0,0,5573,5574,5,653,0,0,5574,5575,3,70,35,0,
        5575,449,1,0,0,0,5576,5577,7,82,0,0,5577,5578,5,286,0,0,5578,5579,
        5,649,0,0,5579,451,1,0,0,0,5580,5581,5,889,0,0,5581,5582,7,83,0,
        0,5582,453,1,0,0,0,5583,5591,5,289,0,0,5584,5585,7,84,0,0,5585,5586,
        5,286,0,0,5586,5592,5,274,0,0,5587,5588,5,794,0,0,5588,5589,5,286,
        0,0,5589,5590,5,268,0,0,5590,5592,5,593,0,0,5591,5584,1,0,0,0,5591,
        5587,1,0,0,0,5592,455,1,0,0,0,5593,5594,7,85,0,0,5594,5595,5,806,
        0,0,5595,457,1,0,0,0,5596,5597,3,76,38,0,5597,459,1,0,0,0,5598,5599,
        5,474,0,0,5599,5600,5,986,0,0,5600,5601,7,86,0,0,5601,461,1,0,0,
        0,5602,5603,5,854,0,0,5603,5604,5,1213,0,0,5604,5605,3,464,232,0,
        5605,5607,5,1214,0,0,5606,5608,3,466,233,0,5607,5606,1,0,0,0,5607,
        5608,1,0,0,0,5608,5610,1,0,0,0,5609,5611,5,20,0,0,5610,5609,1,0,
        0,0,5610,5611,1,0,0,0,5611,5612,1,0,0,0,5612,5614,3,120,60,0,5613,
        5615,3,494,247,0,5614,5613,1,0,0,0,5614,5615,1,0,0,0,5615,463,1,
        0,0,0,5616,5621,3,468,234,0,5617,5618,5,1208,0,0,5618,5620,3,468,
        234,0,5619,5617,1,0,0,0,5620,5623,1,0,0,0,5621,5619,1,0,0,0,5621,
        5622,1,0,0,0,5622,5624,1,0,0,0,5623,5621,1,0,0,0,5624,5625,5,159,
        0,0,5625,5626,3,470,235,0,5626,465,1,0,0,0,5627,5628,5,474,0,0,5628,
        5633,3,472,236,0,5629,5630,5,1208,0,0,5630,5632,3,472,236,0,5631,
        5629,1,0,0,0,5632,5635,1,0,0,0,5633,5631,1,0,0,0,5633,5634,1,0,0,
        0,5634,467,1,0,0,0,5635,5633,1,0,0,0,5636,5641,3,332,166,0,5637,
        5639,5,20,0,0,5638,5637,1,0,0,0,5638,5639,1,0,0,0,5639,5640,1,0,
        0,0,5640,5642,3,120,60,0,5641,5638,1,0,0,0,5641,5642,1,0,0,0,5642,
        469,1,0,0,0,5643,5644,3,96,48,0,5644,5645,5,190,0,0,5645,5646,5,
        1213,0,0,5646,5651,3,474,237,0,5647,5648,5,1208,0,0,5648,5650,3,
        474,237,0,5649,5647,1,0,0,0,5650,5653,1,0,0,0,5651,5649,1,0,0,0,
        5651,5652,1,0,0,0,5652,5654,1,0,0,0,5653,5651,1,0,0,0,5654,5655,
        5,1214,0,0,5655,5687,1,0,0,0,5656,5657,3,494,247,0,5657,5658,5,190,
        0,0,5658,5659,5,1213,0,0,5659,5664,3,474,237,0,5660,5661,5,1208,
        0,0,5661,5663,3,474,237,0,5662,5660,1,0,0,0,5663,5666,1,0,0,0,5664,
        5662,1,0,0,0,5664,5665,1,0,0,0,5665,5667,1,0,0,0,5666,5664,1,0,0,
        0,5667,5668,5,1214,0,0,5668,5687,1,0,0,0,5669,5670,3,494,247,0,5670,
        5671,5,190,0,0,5671,5672,5,1213,0,0,5672,5677,3,476,238,0,5673,5674,
        5,1208,0,0,5674,5676,3,476,238,0,5675,5673,1,0,0,0,5676,5679,1,0,
        0,0,5677,5675,1,0,0,0,5677,5678,1,0,0,0,5678,5680,1,0,0,0,5679,5677,
        1,0,0,0,5680,5681,5,1214,0,0,5681,5687,1,0,0,0,5682,5683,3,96,48,
        0,5683,5684,5,190,0,0,5684,5685,3,496,248,0,5685,5687,1,0,0,0,5686,
        5643,1,0,0,0,5686,5656,1,0,0,0,5686,5669,1,0,0,0,5686,5682,1,0,0,
        0,5687,471,1,0,0,0,5688,5690,3,332,166,0,5689,5691,5,20,0,0,5690,
        5689,1,0,0,0,5690,5691,1,0,0,0,5691,5692,1,0,0,0,5692,5693,3,120,
        60,0,5693,473,1,0,0,0,5694,5699,3,308,154,0,5695,5697,5,20,0,0,5696,
        5695,1,0,0,0,5696,5697,1,0,0,0,5697,5698,1,0,0,0,5698,5700,3,120,
        60,0,5699,5696,1,0,0,0,5699,5700,1,0,0,0,5700,475,1,0,0,0,5701,5703,
        3,492,246,0,5702,5704,5,20,0,0,5703,5702,1,0,0,0,5703,5704,1,0,0,
        0,5704,5705,1,0,0,0,5705,5706,3,120,60,0,5706,477,1,0,0,0,5707,5710,
        5,1017,0,0,5708,5709,7,87,0,0,5709,5711,5,806,0,0,5710,5708,1,0,
        0,0,5710,5711,1,0,0,0,5711,5712,1,0,0,0,5712,5713,5,1213,0,0,5713,
        5714,3,480,240,0,5714,5716,5,1214,0,0,5715,5717,5,20,0,0,5716,5715,
        1,0,0,0,5716,5717,1,0,0,0,5717,5718,1,0,0,0,5718,5720,3,120,60,0,
        5719,5721,3,494,247,0,5720,5719,1,0,0,0,5720,5721,1,0,0,0,5721,479,
        1,0,0,0,5722,5723,3,96,48,0,5723,5724,5,159,0,0,5724,5725,3,96,48,
        0,5725,5726,5,190,0,0,5726,5727,5,1213,0,0,5727,5732,3,482,241,0,
        5728,5729,5,1208,0,0,5729,5731,3,482,241,0,5730,5728,1,0,0,0,5731,
        5734,1,0,0,0,5732,5730,1,0,0,0,5732,5733,1,0,0,0,5733,5735,1,0,0,
        0,5734,5732,1,0,0,0,5735,5736,5,1214,0,0,5736,5753,1,0,0,0,5737,
        5738,3,494,247,0,5738,5739,5,159,0,0,5739,5740,3,96,48,0,5740,5741,
        5,190,0,0,5741,5742,5,1213,0,0,5742,5747,3,484,242,0,5743,5744,5,
        1208,0,0,5744,5746,3,484,242,0,5745,5743,1,0,0,0,5746,5749,1,0,0,
        0,5747,5745,1,0,0,0,5747,5748,1,0,0,0,5748,5750,1,0,0,0,5749,5747,
        1,0,0,0,5750,5751,5,1214,0,0,5751,5753,1,0,0,0,5752,5722,1,0,0,0,
        5752,5737,1,0,0,0,5753,481,1,0,0,0,5754,5759,3,96,48,0,5755,5757,
        5,20,0,0,5756,5755,1,0,0,0,5756,5757,1,0,0,0,5757,5758,1,0,0,0,5758,
        5760,3,66,33,0,5759,5756,1,0,0,0,5759,5760,1,0,0,0,5760,483,1,0,
        0,0,5761,5766,3,494,247,0,5762,5764,5,20,0,0,5763,5762,1,0,0,0,5763,
        5764,1,0,0,0,5764,5765,1,0,0,0,5765,5767,3,66,33,0,5766,5763,1,0,
        0,0,5766,5767,1,0,0,0,5767,485,1,0,0,0,5768,5775,5,24,0,0,5769,5776,
        5,224,0,0,5770,5771,5,421,0,0,5771,5773,5,480,0,0,5772,5770,1,0,
        0,0,5772,5773,1,0,0,0,5773,5774,1,0,0,0,5774,5776,3,308,154,0,5775,
        5769,1,0,0,0,5775,5772,1,0,0,0,5776,487,1,0,0,0,5777,5780,3,496,
        248,0,5778,5780,3,490,245,0,5779,5777,1,0,0,0,5779,5778,1,0,0,0,
        5780,489,1,0,0,0,5781,5782,5,1213,0,0,5782,5787,3,308,154,0,5783,
        5784,7,81,0,0,5784,5786,3,308,154,0,5785,5783,1,0,0,0,5786,5789,
        1,0,0,0,5787,5785,1,0,0,0,5787,5788,1,0,0,0,5788,5790,1,0,0,0,5789,
        5787,1,0,0,0,5790,5791,5,1214,0,0,5791,491,1,0,0,0,5792,5793,5,1213,
        0,0,5793,5798,3,308,154,0,5794,5795,5,1208,0,0,5795,5797,3,308,154,
        0,5796,5794,1,0,0,0,5797,5800,1,0,0,0,5798,5796,1,0,0,0,5798,5799,
        1,0,0,0,5799,5801,1,0,0,0,5800,5798,1,0,0,0,5801,5802,5,1214,0,0,
        5802,493,1,0,0,0,5803,5804,5,1213,0,0,5804,5809,3,96,48,0,5805,5806,
        5,1208,0,0,5806,5808,3,96,48,0,5807,5805,1,0,0,0,5808,5811,1,0,0,
        0,5809,5807,1,0,0,0,5809,5810,1,0,0,0,5810,5812,1,0,0,0,5811,5809,
        1,0,0,0,5812,5813,5,1214,0,0,5813,495,1,0,0,0,5814,5816,5,1213,0,
        0,5815,5817,3,520,260,0,5816,5815,1,0,0,0,5816,5817,1,0,0,0,5817,
        5818,1,0,0,0,5818,5819,3,146,73,0,5819,5820,5,1214,0,0,5820,497,
        1,0,0,0,5821,5822,3,100,50,0,5822,5823,3,0,0,0,5823,499,1,0,0,0,
        5824,5825,5,1207,0,0,5825,5826,3,122,61,0,5826,501,1,0,0,0,5827,
        5828,3,500,250,0,5828,5829,5,1209,0,0,5829,5830,3,100,50,0,5830,
        503,1,0,0,0,5831,5832,7,88,0,0,5832,5833,3,124,62,0,5833,505,1,0,
        0,0,5834,5835,3,76,38,0,5835,5836,5,1208,0,0,5836,5837,3,76,38,0,
        5837,507,1,0,0,0,5838,5856,5,1224,0,0,5839,5856,5,135,0,0,5840,5856,
        5,1225,0,0,5841,5856,5,1226,0,0,5842,5856,5,264,0,0,5843,5844,5,
        272,0,0,5844,5856,5,1224,0,0,5845,5846,5,1227,0,0,5846,5856,5,1229,
        0,0,5847,5856,5,1227,0,0,5848,5856,5,234,0,0,5849,5856,5,1228,0,
        0,5850,5856,5,216,0,0,5851,5856,5,1229,0,0,5852,5856,5,176,0,0,5853,
        5856,5,1230,0,0,5854,5856,5,168,0,0,5855,5838,1,0,0,0,5855,5839,
        1,0,0,0,5855,5840,1,0,0,0,5855,5841,1,0,0,0,5855,5842,1,0,0,0,5855,
        5843,1,0,0,0,5855,5845,1,0,0,0,5855,5847,1,0,0,0,5855,5848,1,0,0,
        0,5855,5849,1,0,0,0,5855,5850,1,0,0,0,5855,5851,1,0,0,0,5855,5852,
        1,0,0,0,5855,5853,1,0,0,0,5855,5854,1,0,0,0,5856,509,1,0,0,0,5857,
        5858,7,89,0,0,5858,511,1,0,0,0,5859,5864,3,514,257,0,5860,5864,3,
        520,260,0,5861,5864,3,528,264,0,5862,5864,3,532,266,0,5863,5859,
        1,0,0,0,5863,5860,1,0,0,0,5863,5861,1,0,0,0,5863,5862,1,0,0,0,5864,
        513,1,0,0,0,5865,5867,3,516,258,0,5866,5865,1,0,0,0,5867,5868,1,
        0,0,0,5868,5866,1,0,0,0,5868,5869,1,0,0,0,5869,515,1,0,0,0,5870,
        5884,7,90,0,0,5871,5873,5,102,0,0,5872,5871,1,0,0,0,5872,5873,1,
        0,0,0,5873,5874,1,0,0,0,5874,5885,3,112,56,0,5875,5877,5,406,0,0,
        5876,5875,1,0,0,0,5876,5877,1,0,0,0,5877,5878,1,0,0,0,5878,5885,
        3,104,52,0,5879,5881,5,468,0,0,5880,5879,1,0,0,0,5880,5881,1,0,0,
        0,5881,5882,1,0,0,0,5882,5885,3,104,52,0,5883,5885,5,361,0,0,5884,
        5872,1,0,0,0,5884,5876,1,0,0,0,5884,5880,1,0,0,0,5884,5883,1,0,0,
        0,5885,5887,1,0,0,0,5886,5888,7,91,0,0,5887,5886,1,0,0,0,5887,5888,
        1,0,0,0,5888,5889,1,0,0,0,5889,5891,3,518,259,0,5890,5892,5,252,
        0,0,5891,5890,1,0,0,0,5891,5892,1,0,0,0,5892,5894,1,0,0,0,5893,5895,
        5,273,0,0,5894,5893,1,0,0,0,5894,5895,1,0,0,0,5895,517,1,0,0,0,5896,
        5908,5,490,0,0,5897,5908,7,92,0,0,5898,5908,5,923,0,0,5899,5901,
        5,877,0,0,5900,5902,5,297,0,0,5901,5900,1,0,0,0,5901,5902,1,0,0,
        0,5902,5908,1,0,0,0,5903,5908,5,1041,0,0,5904,5908,5,571,0,0,5905,
        5906,5,742,0,0,5906,5908,5,1067,0,0,5907,5896,1,0,0,0,5907,5897,
        1,0,0,0,5907,5898,1,0,0,0,5907,5899,1,0,0,0,5907,5903,1,0,0,0,5907,
        5904,1,0,0,0,5907,5905,1,0,0,0,5908,519,1,0,0,0,5909,5910,5,474,
        0,0,5910,5915,3,522,261,0,5911,5912,5,1208,0,0,5912,5914,3,522,261,
        0,5913,5911,1,0,0,0,5914,5917,1,0,0,0,5915,5913,1,0,0,0,5915,5916,
        1,0,0,0,5916,521,1,0,0,0,5917,5915,1,0,0,0,5918,5921,3,524,262,0,
        5919,5921,3,526,263,0,5920,5918,1,0,0,0,5920,5919,1,0,0,0,5921,523,
        1,0,0,0,5922,5924,3,120,60,0,5923,5925,3,494,247,0,5924,5923,1,0,
        0,0,5924,5925,1,0,0,0,5925,5926,1,0,0,0,5926,5927,5,20,0,0,5927,
        5928,3,496,248,0,5928,525,1,0,0,0,5929,5930,5,324,0,0,5930,5932,
        3,120,60,0,5931,5933,3,494,247,0,5932,5931,1,0,0,0,5932,5933,1,0,
        0,0,5933,5934,1,0,0,0,5934,5935,5,20,0,0,5935,5936,5,1213,0,0,5936,
        5940,3,146,73,0,5937,5938,5,447,0,0,5938,5939,5,13,0,0,5939,5941,
        3,148,74,0,5940,5937,1,0,0,0,5941,5942,1,0,0,0,5942,5940,1,0,0,0,
        5942,5943,1,0,0,0,5943,5944,1,0,0,0,5944,5945,5,1214,0,0,5945,527,
        1,0,0,0,5946,5947,5,457,0,0,5947,5948,5,1213,0,0,5948,5953,3,530,
        265,0,5949,5950,5,1208,0,0,5950,5952,3,530,265,0,5951,5949,1,0,0,
        0,5952,5955,1,0,0,0,5953,5951,1,0,0,0,5953,5954,1,0,0,0,5954,5956,
        1,0,0,0,5955,5953,1,0,0,0,5956,5957,5,1214,0,0,5957,529,1,0,0,0,
        5958,5959,3,122,61,0,5959,5963,3,0,0,0,5960,5962,3,22,11,0,5961,
        5960,1,0,0,0,5962,5965,1,0,0,0,5963,5961,1,0,0,0,5963,5964,1,0,0,
        0,5964,5975,1,0,0,0,5965,5963,1,0,0,0,5966,5973,5,20,0,0,5967,5970,
        5,112,0,0,5968,5969,5,42,0,0,5969,5971,5,789,0,0,5970,5968,1,0,0,
        0,5970,5971,1,0,0,0,5971,5974,1,0,0,0,5972,5974,5,225,0,0,5973,5967,
        1,0,0,0,5973,5972,1,0,0,0,5974,5976,1,0,0,0,5975,5966,1,0,0,0,5975,
        5976,1,0,0,0,5976,531,1,0,0,0,5977,5979,7,93,0,0,5978,5977,1,0,0,
        0,5978,5979,1,0,0,0,5979,5980,1,0,0,0,5980,5986,5,150,0,0,5981,5982,
        5,190,0,0,5982,5984,5,1042,0,0,5983,5985,5,795,0,0,5984,5983,1,0,
        0,0,5984,5985,1,0,0,0,5985,5987,1,0,0,0,5986,5981,1,0,0,0,5986,5987,
        1,0,0,0,5987,533,1,0,0,0,719,540,549,561,571,575,578,585,590,596,
        600,603,605,609,612,616,623,627,639,642,645,647,651,655,657,663,
        671,675,679,687,690,692,697,700,704,707,711,721,724,731,734,737,
        740,744,747,750,754,757,761,764,768,771,774,778,781,785,788,798,
        801,808,816,820,827,831,835,839,848,850,854,861,863,867,872,874,
        881,885,887,896,903,914,922,946,951,953,976,981,986,989,995,1002,
        1015,1020,1025,1031,1063,1079,1085,1089,1094,1098,1103,1107,1112,
        1116,1121,1125,1130,1134,1138,1142,1147,1151,1155,1159,1163,1167,
        1171,1175,1179,1183,1187,1191,1195,1207,1212,1217,1222,1225,1232,
        1240,1246,1253,1257,1259,1263,1276,1279,1283,1289,1292,1296,1307,
        1309,1317,1328,1331,1335,1338,1344,1349,1354,1358,1368,1375,1382,
        1391,1394,1402,1413,1417,1423,1430,1432,1435,1438,1443,1445,1452,
        1458,1460,1469,1478,1489,1492,1504,1506,1517,1522,1525,1535,1539,
        1550,1557,1561,1564,1571,1575,1581,1595,1607,1611,1615,1621,1624,
        1628,1630,1634,1641,1647,1657,1662,1672,1682,1695,1698,1702,1707,
        1711,1714,1719,1726,1735,1738,1748,1751,1763,1770,1777,1784,1792,
        1809,1812,1815,1822,1829,1836,1843,1848,1855,1865,1880,1891,1900,
        1911,1918,1936,1946,1948,1953,1971,1982,1991,1998,2007,2011,2016,
        2020,2027,2031,2035,2038,2047,2050,2060,2073,2078,2092,2098,2102,
        2106,2117,2161,2167,2216,2221,2226,2230,2234,2242,2263,2265,2271,
        2275,2280,2284,2293,2318,2328,2339,2343,2348,2355,2363,2371,2375,
        2380,2382,2390,2397,2402,2404,2406,2410,2419,2424,2428,2432,2450,
        2460,2465,2474,2477,2481,2487,2492,2495,2499,2505,2510,2513,2517,
        2523,2528,2531,2535,2541,2546,2552,2556,2564,2569,2574,2579,2587,
        2592,2597,2601,2610,2616,2623,2630,2637,2644,2667,2678,2684,2692,
        2694,2710,2719,2722,2732,2741,2744,2749,2752,2756,2773,2807,2826,
        2860,2869,2884,2954,2994,3017,3027,3037,3048,3059,3068,3078,3080,
        3099,3101,3113,3115,3129,3131,3157,3169,3172,3178,3180,3189,3195,
        3198,3203,3208,3214,3225,3229,3241,3245,3269,3281,3285,3293,3295,
        3319,3324,3340,3343,3356,3376,3387,3399,3408,3414,3416,3420,3433,
        3465,3477,3492,3507,3515,3530,3540,3547,3563,3566,3575,3577,3590,
        3604,3618,3632,3644,3656,3665,3667,3687,3692,3705,3709,3724,3728,
        3733,3743,3751,3760,3762,3767,3774,3778,3785,3804,3816,3820,3823,
        3831,3841,3848,3853,3862,3867,3879,3886,3892,3897,3900,3905,3910,
        3913,3917,3920,3926,3937,3941,3944,3947,3955,3961,3965,3969,3972,
        3986,3995,3999,4002,4017,4023,4025,4037,4047,4057,4067,4069,4071,
        4076,4086,4088,4090,4095,4103,4108,4116,4118,4123,4131,4140,4148,
        4156,4166,4176,4192,4217,4222,4225,4232,4240,4258,4267,4270,4280,
        4291,4309,4334,4337,4351,4356,4372,4377,4393,4398,4407,4412,4425,
        4428,4449,4455,4468,4479,4491,4507,4519,4530,4532,4537,4553,4563,
        4572,4577,4584,4589,4600,4605,4618,4620,4622,4627,4636,4641,4660,
        4669,4671,4676,4702,4713,4724,4732,4735,4740,4743,4750,4753,4760,
        4765,4773,4780,4784,4787,4797,4819,4830,4832,4843,4848,4857,4862,
        4864,4872,4883,4886,4889,4899,4902,4906,4909,4913,4917,4925,4933,
        4943,4947,4951,4954,4961,4968,4971,4974,4977,4987,4991,4999,5009,
        5012,5020,5045,5049,5063,5066,5069,5086,5113,5122,5128,5135,5137,
        5146,5151,5162,5166,5188,5198,5204,5212,5219,5223,5231,5237,5240,
        5245,5251,5253,5259,5269,5273,5279,5287,5293,5296,5307,5317,5322,
        5325,5328,5335,5343,5347,5358,5368,5374,5459,5461,5468,5472,5477,
        5485,5488,5501,5509,5514,5518,5527,5540,5548,5556,5560,5567,5571,
        5591,5607,5610,5614,5621,5633,5638,5641,5651,5664,5677,5686,5690,
        5696,5699,5703,5710,5716,5720,5732,5747,5752,5756,5759,5763,5766,
        5772,5775,5779,5787,5798,5809,5816,5855,5863,5868,5872,5876,5880,
        5884,5887,5891,5894,5901,5907,5915,5920,5924,5932,5942,5953,5963,
        5970,5973,5975,5978,5984,5986
    ]

class TeradataSQLDataTypesParser ( Parser ):

    grammarFileName = "TeradataSQLDataTypesParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ABORTSESSION'", "'ABS'", 
                     "'ACCESS_LOCK'", "'ACCOUNT'", "'ACOS'", "'ACOSH'", 
                     "'ADD'", "'ADD_MONTHS'", "'ADMIN'", "'AFTER'", "'AGGREGATE'", 
                     "'ALL'", "'ALTER'", "'AMP'", "'AND'", "'ANSIDATE'", 
                     "'ANY'", "'ARGLPAREN'", "'AS'", "'ASC'", "'ASIN'", 
                     "'ASINH'", "'AT'", "'ATAN'", "'ATAN2'", "'ATANH'", 
                     "'ATOMIC'", "'AUTHORIZATION'", "'AVE'", "'AVERAGE'", 
                     "'AVG'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BLOB'", "'BOTH'", "'BT'", "'BUT'", "'BY'", 
                     "'BYTE'", "'BYTEINT'", "'BYTES'", "'CALL'", "'CASE'", 
                     "'CASE_N'", "'CASESPECIFIC'", "'CAST'", "'CD'", "'CHAR'", 
                     "'CHAR_LENGTH'", "'CHAR2HEXINT'", "'CHARACTER'", "'CHARACTER_LENGTH'", 
                     "'CHARACTERS'", "'CHARS'", "'CHECK'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'CM'", 
                     "'COALESCE'", "'COLLATION'", "'COLLECT'", "'COLUMN'", 
                     "'COMMENT'", "'COMMIT'", "'COMPRESS'", "'CONNECT'", 
                     "'CONSTRAINT'", "'CONSTRUCTOR'", "'CONSUME'", "'CONTAINS'", 
                     "'CONTINUE'", "'CONVERT_TABLE_HEADER'", "'CORR'", "'COS'", 
                     "'COSH'", "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", 
                     "'CREATE'", "'CROSS'", "'CS'", "'CSUM'", "'CT'", "'CTCONTROL'", 
                     "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'CURSOR'", "'CV'", "'CYCLE'", "'DATABASE'", "'DATABLOCKSIZE'", 
                     "'DATE'", "'DATEFORM'", "'DAY'", "'DEALLOCATE'", "'DEC'", 
                     "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFERRED'", 
                     "'DEGREES'", "'DEL'", "'DELETE'", "'DESC'", "'DETERMINISTIC'", 
                     "'DIAGNOSTIC'", "'DICTIONARY'", "'DISABLED'", "'DISTINCT'", 
                     "'DO'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'DUAL'", 
                     "'DUMP'", "'DYNAMIC'", "'EACH'", "'ECHO'", "'ELSE'", 
                     "'ELSEIF'", "'ENABLED'", "'END'", "'EQ'", "'EQUALS'", 
                     "'ERROR'", "'ERRORFILES'", "'ERRORTABLES'", "'ESCAPE'", 
                     "'ET'", "'EXCEPT'", "'EXEC'", "'EXECUTE'", "'EXISTS'", 
                     "'EXIT'", "'EXP'", "'EXPAND'", "'EXPANDING'", "'EXPLAIN'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALLBACK'", "'FASTEXPORT'", 
                     "'FETCH'", "'FIRST'", "'FLOAT'", "'FLUSH'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FOUND'", "'FREESPACE'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONDESCRIPTOR'", 
                     "'GE'", "'GENERATED'", "'GET'", "'GIVE'", "'GRANT'", 
                     "'GRAPHIC'", "'GROUP'", "'GROUPING'", "'GT'", "'HANDLER'", 
                     "'HASH'", "'HASHAMP'", "'HASHBAKAMP'", "'HASHBUCKET'", 
                     "'HASHROW'", "'HAVING'", "'HELP'", "'HOUR'", "'ID2BIGINT'", 
                     "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IN'", "'INCONSISTENT'", 
                     "'INDEX'", "'INITIATE'", "'INNER'", "'INOUT'", "'INPUT'", 
                     "'INS'", "'INSERT'", "'INSTANCE'", "'INSTEAD'", "'INT'", 
                     "'INTEGER'", "'INTEGERDATE'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JAR'", "'JOIN'", "'JOURNAL'", 
                     "'KEY'", "'KURTOSIS'", "'LANGUAGE'", "'LARGE'", "'LE'", 
                     "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LN'", "'LOADING'", "'LOCAL'", "'LOCATOR'", "'LOCK'", 
                     "'LOCKING'", "'LOG'", "'LOGGING'", "'LOGON'", "'LONG'", 
                     "'LOOP'", "'LOWER'", "'LT'", "'MACRO'", "'MAP'", "'MAVG'", 
                     "'MAX'", "'MAXIMUM'", "'MCHARACTERS'", "'MDIFF'", "'MERGE'", 
                     "'METHOD'", "'MIN'", "'MINDEX'", "'MINIMUM'", "'MINUS'", 
                     "'MINUTE'", "'MLINREG'", "'MLOAD'", "'MOD'", "'MODE'", 
                     "'MODIFIES'", "'MODIFY'", "'MONITOR'", "'MONRESOURCE'", 
                     "'MONSESSION'", "'MONTH'", "'MSUBSTR'", "'MSUM'", "'MULTISET'", 
                     "'NAMED'", "'NATURAL'", "'NE'", "'NEW'", "'NEW_TABLE'", 
                     "'NEXT'", "'NO'", "'NONE'", "'NONTEMPORAL'", "'NORMALIZE'", 
                     "'NOT'", "'NOWAIT'", "'NULL'", "'NULLIF'", "'NULLIFZERO'", 
                     "'NUMBER'", "'NUMERIC'", "'OBJECT'", "'OBJECTS'", "'OCTET_LENGTH'", 
                     "'OF'", "'OFF'", "'OLD'", "'OLD_TABLE'", "'ON'", "'ONLY'", 
                     "'OPEN'", "'OPTION'", "'OR'", "'ORDER'", "'ORDERING'", 
                     "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERRIDE'", 
                     "'PARAMETER'", "'PASSWORD'", "'PERCENT'", "'PERCENT_RANK'", 
                     "'PERM'", "'PERMANENT'", "'POSITION'", "'PRECISION'", 
                     "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRIVILEGES'", 
                     "'PROCEDURE'", "'PROFILE'", "'PROTECTION'", "'PUBLIC'", 
                     "'QUALIFIED'", "'QUALIFY'", "'QUANTILE'", "'QUEUE'", 
                     "'RADIANS'", "'RANDOM'", "'RANGE_N'", "'RANK'", "'READS'", 
                     "'REAL'", "'RECURSIVE'", "'REFERENCES'", "'REFERENCING'", 
                     "'REGR_AVGX'", "'REGR_AVGY'", "'REGR_COUNT'", "'REGR_INTERCEPT'", 
                     "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", "'REGR_SXY'", 
                     "'REGR_SYY'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REPLCONTROL'", "'REPLICATION'", 
                     "'REQUEST'", "'RESIGNAL'", "'RESTART'", "'RESTORE'", 
                     "'RESULT'", "'RESUME'", "'RET'", "'RETRIEVE'", "'RETURN'", 
                     "'RETURNS'", "'REVALIDATE'", "'REVOKE'", "'RIGHT'", 
                     "'RIGHTS'", "'ROLE'", "'ROLLBACK'", "'ROLLFORWARD'", 
                     "'ROLLUP'", "'ROW'", "'ROW_NUMBER'", "'ROWID'", "'ROWS'", 
                     "'SAMPLE'", "'SAMPLEID'", "'SCROLL'", "'SECOND'", "'SEL'", 
                     "'SELECT'", "'SESSION'", "'SET'", "'SETRESRATE'", "'SETS'", 
                     "'SETSESSRATE'", "'SHOW'", "'SIGNAL'", "'SIN'", "'SINH'", 
                     "'SKEW'", "'SMALLINT'", "'SOME'", "'SOUNDEX'", "'SPECIFIC'", 
                     "'SPOOL'", "'SQL'", "'SQLEXCEPTION'", "'SQLTEXT'", 
                     "'SQLWARNING'", "'SQRT'", "'SS'", "'START'", "'STARTUP'", 
                     "'STATEMENT'", "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
                     "'STEPINFO'", "'STRING_CS'", "'SUBSCRIBER'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SUM'", "'SUMMARY'", "'SUSPEND'", "'TABLE'", 
                     "'TAN'", "'TANH'", "'TBL_CS'", "'TD_ANYTYPE'", "'TD_AUTHID'", 
                     "'TD_HOST'", "'TD_ROWLOADID'", "'TD_ROWREVISION'", 
                     "'TD_ROWSIZE'", "'TD_VALIST'", "'TEMPORARY'", "'TERMINATE'", 
                     "'THEN'", "'THRESHOLD'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE_HOUR'", 
                     "'TIMEZONE_MINUTE'", "'TITLE'", "'TO'", "'TOP'", "'TRACE'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONTIME'", 
                     "'TRANSFORM'", "'TRANSLATE'", "'TRANSLATE_CHK'", "'TRIGGER'", 
                     "'TRIM'", "'TYPE'", "'UC'", "'UDTCASTAS'", "'UDTCASTLPAREN'", 
                     "'UDTMETHOD'", "'UDTTYPE'", "'UDTUSAGE'", "'UESCAPE'", 
                     "'UNDEFINED'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNTIL'", 
                     "'UNTIL_CHANGED'", "'UNTIL_CLOSED'", "'UPD'", "'UPDATE'", 
                     "'UPPER'", "'UPPERCASE'", "'USER'", "'USING'", "'VALIDTIME'", 
                     "'VALUE'", "'VALUES'", "'VAR_POP'", "'VAR_SAMP'", "'VARBYTE'", 
                     "'VARCHAR'", "'VARGRAPHIC'", "'VARIANT_TYPE'", "'VARYING'", 
                     "'VIEW'", "'VOLATILE'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WIDTH_BUCKET'", "'WITH'", "'WITHOUT'", "'WORK'", 
                     "'XMLPLAN'", "'YEAR'", "'ZEROIFNULL'", "'ZONE'", "'ALIAS'", 
                     "'DESCRIPTOR'", "'GO'", "'GOTO'", "'INDICATOR'", "'PRIVATE'", 
                     "'WAIT'", "'AbortSessions'", "'ABSENT'", "'ACCESS'", 
                     "'ACCORDING'", "'ACCUMULATE'", "'AG'", "'AggGeomIntersection'", 
                     "'AggGeomUnion'", "'ALLDBQL'", "'ALLOCATE'", "'ALLOCATION'", 
                     "'ALLOW'", "'ALLPARAMS'", "'ALLTDWM'", "'ALWAYS'", 
                     "'AMPCOUNT'", "'ANALYSIS'", "'ANCHOR'", "'ANCHOR_HOUR'", 
                     "'ANCHOR_MILLISECOND'", "'ANCHOR_MINUTE'", "'ANCHOR_SECOND'", 
                     "'APPLNAME'", "'ARCHIVE'", "'ARRAY'", "'ARRAY_ADD'", 
                     "'ARRAY_AGG'", "'ARRAY_AVG'", "'ARRAY_COMPARE'", "'ARRAY_CONCAT'", 
                     "'ARRAY_COUNT_DISTINCT'", "'ARRAY_DIV'", "'ARRAY_EQ'", 
                     "'ARRAY_GE'", "'ARRAY_GET'", "'ARRAY_GT'", "'ARRAY_LE'", 
                     "'ARRAY_LT'", "'ARRAY_MAX'", "'ARRAY_MIN'", "'ARRAY_MOD'", 
                     "'ARRAY_MUL'", "'ARRAY_NE'", "'ARRAY_SUB'", "'ARRAY_SUM'", 
                     "'ARRAY_UPDATE'", "'ARRAY_UPDATE_STRIDE'", "'ASCII'", 
                     "'ASSIGNMENT'", "'ATTR'", "'ATTRIBUTE'", "'ATTRIBUTES'", 
                     "'ATTRIBUTION'", "'ATTRS'", "'AUTH'", "'AUTO'", "'AUTOTEMP'", 
                     "'AVRO'", "'BIT_LENGTH'", "'BITAND'", "'BITNOT'", "'BITOR'", 
                     "'BITXOR'", "'BLOCKCOMPRESSION'", "'BLOCKCOMPRESSIONALGORITHM'", 
                     "'BLOCKCOMPRESSIONLEVEL'", "'BOM'", "'BOTTOM'", "'BSON'", 
                     "'C'", "'CALENDAR'", "'CALLED'", "'CALLER'", "'camset'", 
                     "'camset_l'", "'CAPTURE'", "'CARDINALITY'", "'CEIL'", 
                     "'CEILING'", "'CHANGERATE'", "'CHARACTERISTICS'", "'CHARSET'", 
                     "'CHARSET_COLL'", "'CHECKSUM'", "'CHR'", "'CLASS_ORIGIN'", 
                     "'CLICKLAG'", "'CLIENT'", "'CNT'", "'COLOCATE'", "'COLUMNMETA'", 
                     "'COLUMNS'", "'COLUMNSPERINDEX'", "'COLUMNSPERJOININDEX'", 
                     "'COMMAND_FUNCTION'", "'COMMAND_FUNCTION_CODE'", "'COMPARISON'", 
                     "'COMPILE'", "'CONCAT'", "'CONCURRENT'", "'CONDITION'", 
                     "'CONDITION_IDENTIFIER'", "'CONDITION_NUMBER'", "'CONTAINED'", 
                     "'CONTAINEDTOKEN'", "'CONTENT'", "'CONTIGUOUS'", "'COST'", 
                     "'COSTS'", "'COUNTSET'", "'CPP'", "'CPUTIME'", "'CPUTIMENORM'", 
                     "'CREATEDATASET'", "'CREATOR'", "'CUME_DIST'", "'CURDATE'", 
                     "'CURTIME'", "'DATA'", "'DATASET'", "'day_of_calendar'", 
                     "'day_of_month'", "'day_of_week'", "'day_of_year'", 
                     "'DayNumber_Of_Calendar'", "'DayNumber_Of_Month'", 
                     "'DayNumber_Of_Week'", "'DayNumber_Of_Year'", "'DayOccurrence_Of_Month'", 
                     "'DBA'", "'DBC'", "'DEBUG'", "'decamset'", "'decamset_l'", 
                     "'DECODE'", "'DECOMPRESS'", "'DEFINER'", "'DELIMITER'", 
                     "'DELTA_T'", "'DEMOGRAPHICS'", "'DENIALS'", "'DENSE'", 
                     "'DENSE_RANK'", "'DESCRIBE'", "'DETAILED'", "'DIAGNOSTICS'", 
                     "'DIGITS'", "'DIMENSION'", "'DOCUMENT'", "'DOT'", "'DOWN'", 
                     "'DR'", "'DUPCOUNT'", "'DUPCOUNTCUM'", "'EBCDIC'", 
                     "'EDITDISTANCE'", "'ELAPSEDSEC'", "'ELAPSEDTIME'", 
                     "'ELEMENT'", "'ELZS_H'", "'EMITNULL'", "'EMPTY'", "'EMPTY_BLOB'", 
                     "'EMPTY_CLOB'", "'ENCODE'", "'ENCODING'", "'ENCRYPT'", 
                     "'ERRORS'", "'ERRORTBL'", "'EVENTCOLUMN'", "'EXCEPTION'", 
                     "'EXCL'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXPORTWIDTH'", "'FALSE'", 
                     "'FEATUREINFO'", "'FILE'", "'FILL'", "'FILTER'", "'FINAL'", 
                     "'FIRST_NOTNULL'", "'FIRST_VALUE'", "'FLOOR'", "'FOLLOWING'", 
                     "'FOREIGNFUNCTION'", "'FORTOKEN'", "'FRIDAY'", "'FROM_BYTES'", 
                     "'FUNCTIONPARAMETER'", "'G'", "'GETBIT'", "'GetPSFVersion'", 
                     "'GetQueryBand'", "'GetQueryBandValue'", "'GetTimeZoneDisplacement'", 
                     "'GLOBAL'", "'GLOP'", "'Greatest'", "'HIGH'", "'HOST'", 
                     "'IdentifyDatabase'", "'IdentifySession'", "'IdentifyTable'", 
                     "'IdentifyUser'", "'IFP'", "'IGNORE'", "'IMMEDIATELY'", 
                     "'IMPORT'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDENT'", "'INDEXESPERTABLE'", "'INDEXMAINTMODE'", 
                     "'INIT'", "'INITCAP'", "'INLINE'", "'INSTANTIABLE'", 
                     "'INSTR'", "'INTERNAL'", "'INVOKER'", "'IOCOUNT'", 
                     "'IPARTITION'", "'ISOLATED'", "'ISOLATION'", "'JAVA'", 
                     "'JIS_COLL'", "'JSON'", "'JSON_AGG'", "'JSON_COMPOSE'", 
                     "'K'", "'KANJI1'", "'KANJISJIS'", "'KBYTE'", "'KBYTES'", 
                     "'KEEP'", "'KILOBYTES'", "'LAG'", "'LAST'", "'Last_Day'", 
                     "'LAST_NOTNULL'", "'LAST_VALUE'", "'LATIN'", "'LDIFF'", 
                     "'LEAD'", "'Least'", "'LENGTH'", "'LEVEL'", "'LIST'", 
                     "'LOAD'", "'LOCATE'", "'LOCKEDUSEREXPIRE'", "'LOW'", 
                     "'LPAD'", "'LTRIM'", "'lzcomp'", "'lzcomp_L'", "'lzdecomp'", 
                     "'lzdecomp_L'", "'M'", "'MAD'", "'MANUAL'", "'MAPPING'", 
                     "'MATCHED'", "'MAX_CHOOSE'", "'MAXCHAR'", "'MAXINTERVALS'", 
                     "'MAXLOGONATTEMPTS'", "'MAXVALUE'", "'MAXVALUELENGTH'", 
                     "'MEDIAN'", "'MEDIUM'", "'MEETS'", "'MEMBER'", "'MERGEBLOCKRATIO'", 
                     "'MESSAGE_LENGTH'", "'MESSAGE_TEXT'", "'MIN_CHOOSE'", 
                     "'MINCHAR'", "'MINVALUE'", "'MODIFIED'", "'MONDAY'", 
                     "'MonitorQueryBand'", "'MonitorSessionRate'", "'MonitorVersion'", 
                     "'MONTH_BEGIN'", "'MONTH_END'", "'month_of_calendar'", 
                     "'month_of_quarter'", "'month_of_year'", "'MonthNumber_Of_Calendar'", 
                     "'MonthNumber_Of_Quarter'", "'MonthNumber_Of_Year'", 
                     "'Months_Between'", "'MORE'", "'MULTINATIONAL'", "'NAME'", 
                     "'NAMESPACE'", "'NEVER'", "'NEXT_DAY'", "'NGRAM'", 
                     "'NIL'", "'NODDLTEXT'", "'NODE'", "'NONOPTCOST'", "'NONOPTINIT'", 
                     "'NONSEQUENCED'", "'NORIGHT'", "'NOSEXTRACTVARFROMPATH'", 
                     "'NOTATION'", "'NOW'", "'NPATH'", "'NTH'", "'NULLS'", 
                     "'NUMFPFNS'", "'NUMTODSINTERVAL'", "'NUMTOYMINTERVAL'", 
                     "'nvl'", "'nvl2'", "'NVP'", "'OA'", "'OAdd_Months'", 
                     "'OCOUNT'", "'ODELETE'", "'OEXISTS'", "'OEXTEND'", 
                     "'OFIRST'", "'OLAST'", "'OLD_NEW_TABLE'", "'OLIMIT'", 
                     "'ONEXT'", "'ONLINE'", "'OPRIOR'", "'OPTIONS'", "'ORDERBYVALUES'", 
                     "'ORDERED_ANALYTIC'", "'ORDINALITY'", "'OREPLACE'", 
                     "'OTRANSLATE'", "'OTRIM'", "'OVERLAYS'", "'OWNER'", 
                     "'P_INTERSECT'", "'P_NORMALIZE'", "'PARAMID'", "'PARAMINFO'", 
                     "'PARENT'", "'PARTITION'", "<INVALID>", "'PARTITIONED'", 
                     "'PARTITIONNAMES'", "'PASS'", "'PASSING'", "'PATH_GENERATOR'", 
                     "'PATH_START'", "'PATH_SUMMARIZER'", "'PATTERN'", "'PERCENTILE'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERIOD'", 
                     "'PIVOT'", "'PORTION'", "'POWER'", "'PRECEDES'", "'PRECEDING'", 
                     "'PREFIX'", "'PRINT'", "'PRIOR'", "'PROTECTED'", "'QUARTER_BEGIN'", 
                     "'QUARTER_END'", "'quarter_of_calendar'", "'quarter_of_year'", 
                     "'QuarterNumber_Of_Calendar'", "'QuarterNumber_Of_Year'", 
                     "'QUERY'", "'QUERY_BAND'", "'QUOTECHAR'", "'RANDOMIZED'", 
                     "'RANGE'", "<INVALID>", "'RAPIDFIRE'", "'RDIFF'", "'READ'", 
                     "'RECALC'", "'regexp_instr'", "'regexp_replace'", "'regexp_similar'", 
                     "'regexp_substr'", "'REPLACEMENT'", "'RESET'", "'RESPECT'", 
                     "'RESTRICTWORDS'", "'RETAIN'", "'RETURNED_SQLSTATE'", 
                     "'RETURNING'", "'REUSE'", "'ROOT'", "'ROTATELEFT'", 
                     "'ROTATERIGHT'", "'Round'", "'ROW_COUNT'", "'ROWIDGEN'", 
                     "'ROWIDGEN2'", "'RPAD'", "'RTRIM'", "'RU'", "'RULES'", 
                     "'RULESET'", "'SAMPLES'", "'SATURDAY'", "'SCHEMA'", 
                     "'SCRIPT'", "'SCRIPT_COMMAND'", "'SEARCHSPACE'", "'SEARCHUIFDBPATH'", 
                     "'SECURITY'", "'SEED'", "'SELF'", "'SEQ'", "'SEQUENCE'", 
                     "'SEQUENCED'", "'SERIALIZABLE'", "'SERVER'", "'SESSIONIZE'", 
                     "'SETBIT'", "'SetResourceRate'", "'SetSessionAccount'", 
                     "'SetSessionRate'", "'SHARE'", "'SHIFTLEFT'", "'SHIFTRIGHT'", 
                     "'SIGN'", "'SIZE'", "'SNAPPY_COMPRESS'", "'SNAPPY_DECOMPRESS'", 
                     "'SOURCE'", "'SPARSE'", "'SPECCHAR'", "'SPL'", "'SQLSTATE'", 
                     "'SR'", "'ST_GEOMETRY'", "'STAT'", "'STATIC'", "'STATS'", 
                     "'STATSUSAGE'", "'STORAGE'", "'STRIP'", "'STRTOK'", 
                     "'STYLE'", "'SUBBITSTR'", "'SUBCLASS_ORIGIN'", "'SUCCEEDS'", 
                     "'SUMMARYONLY'", "'SUNDAY'", "'SYMBOLS'", "'SYSTEM'", 
                     "'SYSTEM_TIME'", "'SYSTEMTEST'", "'TARGET'", "'TD_ARRAY2P'", 
                     "'TD_DATASET'", "'td_day_of_calendar'", "'td_day_of_month'", 
                     "'td_day_of_week'", "'td_day_of_year'", "'TD_GENERAL'", 
                     "'TD_GETTIMEBUCKET'", "'TD_INTERNAL'", "'TD_LZ_COMPRESS'", 
                     "'TD_LZ_DECOMPRESS'", "'td_month_of_calendar'", "'td_month_of_quarter'", 
                     "'td_month_of_year'", "'td_quarter_of_calendar'", "'td_quarter_of_year'", 
                     "'TD_TIME_BUCKET_NUMBER'", "'td_week_of_calendar'", 
                     "'td_week_of_month'", "'td_week_of_year'", "'td_weekday_of_month'", 
                     "'td_year_of_calendar'", "'TDWMEVENT'", "'TDWMEXCEPTION'", 
                     "'TDWMHISTORY'", "'TEMPORAL_DATE'", "'TEMPORAL_TIMESTAMP'", 
                     "'TEXT'", "'THRESHOLDPERCENT'", "'THROUGH'", "'THURSDAY'", 
                     "'TIES'", "'TIMECODE'", "'TIMECOLUMN'", "'TIMEOUT'", 
                     "'TIMESTAMPCOLUMN'", "'TO_BYTE'", "'TO_BYTES'", "'TO_CHAR'", 
                     "'TO_DATE'", "'TO_DSINTERVAL'", "'TO_NUMBER'", "'TO_TIMESTAMP'", 
                     "'TO_TIMESTAMP_TZ'", "'TO_YMINTERVAL'", "'TOTOKEN'", 
                     "'TPA'", "'TRANSACTION_ACTIVE'", "'TransUnicodeToUTF8'", 
                     "'TransUTF8ToUnicode'", "'TRUE'", "'Trunc'", "'TRUST_ONLY'", 
                     "'TTGRANULARITY'", "'TUESDAY'", "'UBJSON'", "'UCASE'", 
                     "'UDFSEARCHPATH'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNICODE'", "'UNKNOWN'", "'UNPIVOT'", "'USE'", "'USECOUNT'", 
                     "'UTILITYINFO'", "'VARRAY'", "'VERBOSE'", "'VERSION'", 
                     "'VERSIONING'", "'WARNING'", "'WEDNESDAY'", "'WEEK_BEGIN'", 
                     "'WEEK_END'", "'week_of_calendar'", "'week_of_month'", 
                     "'week_of_year'", "'weekday_of_month'", "'WeekNumber_Of_Calendar'", 
                     "'WeekNumber_Of_Month'", "'WeekNumber_Of_Quarter'", 
                     "'WeekNumber_Of_Year'", "'WHITESPACE'", "'WINDOWSIZE'", 
                     "'WITHIN'", "'WORKLOAD'", "'WRITE'", "'XML'", "'XMLAGG'", 
                     "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLCONCAT'", "'XMLDECLARATION'", 
                     "'XMLDOCUMENT'", "'XMLELEMENT'", "'XMLFOREST'", "'XMLNAMESPACES'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLSCHEMA'", 
                     "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTEXT'", "'XMLTYPE'", 
                     "'XMLVALIDATE'", "'YEAR_BEGIN'", "'YEAR_END'", "'year_of_calendar'", 
                     "'YearNumber_Of_Calendar'", "'ZLIB'", "'BUCKET'", "'COMMITTED'", 
                     "'CREATEXML'", "'_LATIN'", "'_UNICODE'", "'_KANJISJIS'", 
                     "'_GRAPHIC'", "'CSV'", "'CSVLD'", "'DATASIZE'", "'DAYOFMONTH'", 
                     "'DAYS'", "'DEFINITION'", "'DELETED'", "'FAST'", "'LISTAGG'", 
                     "'PATH'", "'REGEXP_SPLIT_TO_TABLE'", "'REVERSE'", "'SAS'", 
                     "'SQLTABLE'", "'STRTOK_SPLIT_TO_TABLE'", "'SYSLIB'", 
                     "'SYSUDTLIB'", "'TD_SERVER_DB'", "'TD_SYSFNLIB'", "'TD_SYSXML'", 
                     "'TIMEDATEWZCONTROL'", "'TRUST'", "'TRYCAST'", "'UDT'", 
                     "'USAGE'", "'VARIANT'", "'WEEK'", "'WIDTH'", "'XMLPUBLISH'", 
                     "'XMLPUBLISH_STREAM'", "'XMLSPLIT'", "'LATIN_TO_UNICODE'", 
                     "'UNICODE_TO_LATIN'", "'LOCALE_TO_UNICODE'", "'UNICODE_TO_LOCALE'", 
                     "'ASBSON'", "'ASBSONTEXT'", "'COMBINE'", "'EXISTVALUE'", 
                     "'JSONEXTRACT'", "'JSONEXTRACTVALUE'", "'JSONEXTRACTLARGEVALUE'", 
                     "'KEYCOUNT'", "'METADATA'", "'STORAGE_SIZE'", "'CREATESCHEMABASEDXML'", 
                     "'CREATENONSCHEMABASEDXML'", "'EXISTSNODE'", "'ISCONTENT'", 
                     "'ISDOCUMENT'", "'ISSCHEMAVALID'", "'ISSCHEMAVALIDATED'", 
                     "'XMLEXTRACT'", "'XMLTRANSFORM'", "'PROC_ID'", "'LOCATION'", 
                     "'PAYLOAD'", "'TRUSTED'", "'PATHPATTERN'", "'MANIFEST'", 
                     "'ROWFORMAT'", "'STOREDAS'", "'HEADER'", "'STRIP_EXTERIOR_SPACES'", 
                     "'STRIP_ENCLOSING_CHAR'", "'RLS'", "'SINGLE'", "'MULTIPLE'", 
                     "'JSON_COMPRESS'", "'JSON_DECOMPRESS'", "'TS_COMPRESS'", 
                     "'TS_DECOMPRESS'", "'CONTIGUOUSMAPAMPS'", "'SPARSEMAPAMPS'", 
                     "'SPARSETABLEAMPS'", "'UNNEST'", "'CALCMATRIX'", "'PHRASE'", 
                     "'CALCTYPE'", "'OUTPUT'", "'NULL_HANDLING'", "'READ_NOS'", 
                     "'BUFFERSIZE'", "'RETURNTYPE'", "'SAMPLE_PERC'", "'FULLSCAN'", 
                     "'TD_UNPIVOT'", "'VALUE_COLUMNS'", "'UNPIVOT_COLUMN'", 
                     "'COLUMN_LIST'", "'COLUMN_ALIAS_LIST'", "'INCLUDE_NULLS'", 
                     "'WRITE_NOS'", "'NAMING'", "'MANIFESTFILE'", "'MANIFESTONLY'", 
                     "'OVERWRITE'", "'INCLUDE_ORDERING'", "'INCLUDE_HASHBY'", 
                     "'MAXOBJECTSIZE'", "'COMPRESSION'", "'ARRAY_TO_JSON'", 
                     "'BSON_CHECK'", "'GEOJSONFROMGEOM'", "'GEOMFROMGEOJSON'", 
                     "'JSON_CHECK'", "'JSONGETVALUE'", "'JSONMETADATA'", 
                     "'NVP2JSON'", "'TD_JSONSHRED'", "'JSON_KEYS'", "'JSON_TABLE'", 
                     "'DEPTH'", "'QUOTES'", "'ROWEXPR'", "'COLEXPR'", "'RETURNTYPES'", 
                     "'NOCASE'", "'TRUNCATE'", "'LINK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'.'", "'@'", "'^'", "'?'", "'('", "')'", "'['", 
                     "']'", "'||'", "'\\u00A6\\u00A6'", "'*'", "'/'", "'+'", 
                     "'-'", "'**'", "'='", "'<>'", "'^='", "'<'", "'<='", 
                     "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>", "ABORT", "ABORTSESSION", "ABS", "ACCESS_LOCK", 
                      "ACCOUNT", "ACOS", "ACOSH", "ADD", "ADD_MONTHS", "ADMIN", 
                      "AFTER", "AGGREGATE", "ALL", "ALTER", "AMP", "AND", 
                      "ANSIDATE", "ANY", "ARGLPAREN", "AS", "ASC", "ASIN", 
                      "ASINH", "AT", "ATAN", "ATAN2", "ATANH", "ATOMIC", 
                      "AUTHORIZATION", "AVE", "AVERAGE", "AVG", "BEFORE", 
                      "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", 
                      "BT", "BUT", "BY", "BYTE", "BYTEINT", "BYTES", "CALL", 
                      "CASE", "CASE_N", "CASESPECIFIC", "CAST", "CD", "CHAR", 
                      "CHAR_LENGTH", "CHAR2HEXINT", "CHARACTER", "CHARACTER_LENGTH", 
                      "CHARACTERS", "CHARS", "CHECK", "CHECKPOINT", "CLASS", 
                      "CLOB", "CLOSE", "CLUSTER", "CM", "COALESCE", "COLLATION", 
                      "COLLECT", "COLUMN", "COMMENT", "COMMIT", "COMPRESS", 
                      "CONNECT", "CONSTRAINT", "CONSTRUCTOR", "CONSUME", 
                      "CONTAINS", "CONTINUE", "CONVERT_TABLE_HEADER", "CORR", 
                      "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", 
                      "CREATE", "CROSS", "CS", "CSUM", "CT", "CTCONTROL", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "CV", "CYCLE", "DATABASE", "DATABLOCKSIZE", 
                      "DATE", "DATEFORM", "DAY", "DEALLOCATE", "DEC", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRED", "DEGREES", "DEL", 
                      "DELETE", "DESC", "DETERMINISTIC", "DIAGNOSTIC", "DICTIONARY", 
                      "DISABLED", "DISTINCT", "DO", "DOMAIN", "DOUBLE", 
                      "DROP", "DUAL", "DUMP", "DYNAMIC", "EACH", "ECHO", 
                      "ELSE", "ELSEIF", "ENABLED", "END", "EQ", "EQUALS", 
                      "ERROR", "ERRORFILES", "ERRORTABLES", "ESCAPE", "ET", 
                      "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXPAND", "EXPANDING", "EXPLAIN", "EXTERNAL", "EXTRACT", 
                      "FALLBACK", "FASTEXPORT", "FETCH", "FIRST", "FLOAT", 
                      "FLUSH", "FOR", "FOREIGN", "FORMAT", "FOUND", "FREESPACE", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONDESCRIPTOR", 
                      "GE", "GENERATED", "GET", "GIVE", "GRANT", "GRAPHIC", 
                      "GROUP", "GROUPING", "GT", "HANDLER", "HASH", "HASHAMP", 
                      "HASHBAKAMP", "HASHBUCKET", "HASHROW", "HAVING", "HELP", 
                      "HOUR", "ID2BIGINT", "IDENTITY", "IF", "IMMEDIATE", 
                      "IN", "INCONSISTENT", "INDEX", "INITIATE", "INNER", 
                      "INOUT", "INPUT", "INS", "INSERT", "INSTANCE", "INSTEAD", 
                      "INT", "INTEGER", "INTEGERDATE", "INTERSECT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JAR", "JOIN", "JOURNAL", 
                      "KEY", "KURTOSIS", "LANGUAGE", "LARGE", "LE", "LEADING", 
                      "LEAVE", "LEFT", "LIKE", "LIMIT", "LN", "LOADING", 
                      "LOCAL", "LOCATOR", "LOCK", "LOCKING", "LOG", "LOGGING", 
                      "LOGON", "LONG", "LOOP", "LOWER", "LT", "MACRO", "MAP", 
                      "MAVG", "MAX", "MAXIMUM", "MCHARACTERS", "MDIFF", 
                      "MERGE", "METHOD", "MIN", "MINDEX", "MINIMUM", "MINUS", 
                      "MINUTE", "MLINREG", "MLOAD", "MOD", "MODE", "MODIFIES", 
                      "MODIFY", "MONITOR", "MONRESOURCE", "MONSESSION", 
                      "MONTH", "MSUBSTR", "MSUM", "MULTISET", "NAMED", "NATURAL", 
                      "NE", "NEW", "NEW_TABLE", "NEXT", "NO", "NONE", "NONTEMPORAL", 
                      "NORMALIZE", "NOT", "NOWAIT", "NULL", "NULLIF", "NULLIFZERO", 
                      "NUMBER", "NUMERIC", "OBJECT", "OBJECTS", "OCTET_LENGTH", 
                      "OF", "OFF", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "ORDERING", "OUT", "OUTER", 
                      "OVER", "OVERLAPS", "OVERRIDE", "PARAMETER", "PASSWORD", 
                      "PERCENT", "PERCENT_RANK", "PERM", "PERMANENT", "POSITION", 
                      "PRECISION", "PREPARE", "PRESERVE", "PRIMARY", "PRIVILEGES", 
                      "PROCEDURE", "PROFILE", "PROTECTION", "PUBLIC", "QUALIFIED", 
                      "QUALIFY", "QUANTILE", "QUEUE", "RADIANS", "RANDOM", 
                      "RANGE_N", "RANK", "READS", "REAL", "RECURSIVE", "REFERENCES", 
                      "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
                      "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
                      "REGR_SXY", "REGR_SYY", "RELATIVE", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REPLCONTROL", "REPLICATION", 
                      "REQUEST", "RESIGNAL", "RESTART", "RESTORE", "RESULT", 
                      "RESUME", "RET", "RETRIEVE", "RETURN", "RETURNS", 
                      "REVALIDATE", "REVOKE", "RIGHT", "RIGHTS", "ROLE", 
                      "ROLLBACK", "ROLLFORWARD", "ROLLUP", "ROW", "ROW_NUMBER", 
                      "ROWID", "ROWS", "SAMPLE", "SAMPLEID", "SCROLL", "SECOND", 
                      "SEL", "SELECT", "SESSION", "SET", "SETRESRATE", "SETS", 
                      "SETSESSRATE", "SHOW", "SIGNAL", "SIN", "SINH", "SKEW", 
                      "SMALLINT", "SOME", "SOUNDEX", "SPECIFIC", "SPOOL", 
                      "SQL", "SQLEXCEPTION", "SQLTEXT", "SQLWARNING", "SQRT", 
                      "SS", "START", "STARTUP", "STATEMENT", "STATISTICS", 
                      "STDDEV_POP", "STDDEV_SAMP", "STEPINFO", "STRING_CS", 
                      "SUBSCRIBER", "SUBSTR", "SUBSTRING", "SUM", "SUMMARY", 
                      "SUSPEND", "TABLE", "TAN", "TANH", "TBL_CS", "TD_ANYTYPE", 
                      "TD_AUTHID", "TD_HOST", "TD_ROWLOADID", "TD_ROWREVISION", 
                      "TD_ROWSIZE", "TD_VALIST", "TEMPORARY", "TERMINATE", 
                      "THEN", "THRESHOLD", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TITLE", "TO", "TOP", "TRACE", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONTIME", "TRANSFORM", 
                      "TRANSLATE", "TRANSLATE_CHK", "TRIGGER", "TRIM", "TYPE", 
                      "UC", "UDTCASTAS", "UDTCASTLPAREN", "UDTMETHOD", "UDTTYPE", 
                      "UDTUSAGE", "UESCAPE", "UNDEFINED", "UNDO", "UNION", 
                      "UNIQUE", "UNTIL", "UNTIL_CHANGED", "UNTIL_CLOSED", 
                      "UPD", "UPDATE", "UPPER", "UPPERCASE", "USER", "USING", 
                      "VALIDTIME", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", 
                      "VARBYTE", "VARCHAR", "VARGRAPHIC", "VARIANT_TYPE", 
                      "VARYING", "VIEW", "VOLATILE", "WHEN", "WHERE", "WHILE", 
                      "WIDTH_BUCKET", "WITH", "WITHOUT", "WORK", "XMLPLAN", 
                      "YEAR", "ZEROIFNULL", "ZONE", "ALIAS", "DESCRIPTOR", 
                      "GO", "GOTO", "INDICATOR", "PRIVATE", "WAIT", "ABORTSESSIONS", 
                      "ABSENT", "ACCESS", "ACCORDING", "ACCUMULATE", "AG", 
                      "AGGGEOMINTERSECTION", "AGGGEOMUNION", "ALLDBQL", 
                      "ALLOCATE", "ALLOCATION", "ALLOW", "ALLPARAMS", "ALLTDWM", 
                      "ALWAYS", "AMPCOUNT", "ANALYSIS", "ANCHOR", "ANCHOR_HOUR", 
                      "ANCHOR_MILLISECOND", "ANCHOR_MINUTE", "ANCHOR_SECOND", 
                      "APPLNAME", "ARCHIVE", "ARRAY", "ARRAY_ADD", "ARRAY_AGG", 
                      "ARRAY_AVG", "ARRAY_COMPARE", "ARRAY_CONCAT", "ARRAY_COUNT_DISTINCT", 
                      "ARRAY_DIV", "ARRAY_EQ", "ARRAY_GE", "ARRAY_GET", 
                      "ARRAY_GT", "ARRAY_LE", "ARRAY_LT", "ARRAY_MAX", "ARRAY_MIN", 
                      "ARRAY_MOD", "ARRAY_MUL", "ARRAY_NE", "ARRAY_SUB", 
                      "ARRAY_SUM", "ARRAY_UPDATE", "ARRAY_UPDATE_STRIDE", 
                      "ASCII", "ASSIGNMENT", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                      "ATTRIBUTION", "ATTRS", "AUTH", "AUTO", "AUTOTEMP", 
                      "AVRO", "BIT_LENGTH", "BITAND", "BITNOT", "BITOR", 
                      "BITXOR", "BLOCKCOMPRESSION", "BLOCKCOMPRESSIONALGORITHM", 
                      "BLOCKCOMPRESSIONLEVEL", "BOM", "BOTTOM", "BSON", 
                      "C", "CALENDAR", "CALLED", "CALLER", "CAMSET", "CAMSET_L", 
                      "CAPTURE", "CARDINALITY", "CEIL", "CEILING", "CHANGERATE", 
                      "CHARACTERISTICS", "CHARSET", "CHARSET_COLL", "CHECKSUM", 
                      "CHR", "CLASS_ORIGIN", "CLICKLAG", "CLIENT", "CNT", 
                      "COLOCATE", "COLUMNMETA", "COLUMNS", "COLUMNSPERINDEX", 
                      "COLUMNSPERJOININDEX", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
                      "COMPARISON", "COMPILE", "CONCAT", "CONCURRENT", "CONDITION", 
                      "CONDITION_IDENTIFIER", "CONDITION_NUMBER", "CONTAINED", 
                      "CONTAINEDTOKEN", "CONTENT", "CONTIGUOUS", "COST", 
                      "COSTS", "COUNTSET", "CPP", "CPUTIME", "CPUTIMENORM", 
                      "CREATEDATASET", "CREATOR", "CUME_DIST", "CURDATE", 
                      "CURTIME", "DATA", "DATASET", "DAY_OF_CALENDAR", "DAY_OF_MONTH", 
                      "DAY_OF_WEEK", "DAY_OF_YEAR", "DAYNUMBER_OF_CALENDAR", 
                      "DAYNUMBER_OF_MONTH", "DAYNUMBER_OF_WEEK", "DAYNUMBER_OF_YEAR", 
                      "DAYOCCURRENCE_OF_MONTH", "DBA", "DBC", "DEBUG", "DECAMSET", 
                      "DECAMSET_L", "DECODE", "DECOMPRESS", "DEFINER", "DELIMITER", 
                      "DELTA_T", "DEMOGRAPHICS", "DENIALS", "DENSE", "DENSE_RANK", 
                      "DESCRIBE", "DETAILED", "DIAGNOSTICS", "DIGITS", "DIMENSION", 
                      "DOCUMENT", "DOT", "DOWN", "DR", "DUPCOUNT", "DUPCOUNTCUM", 
                      "EBCDIC", "EDITDISTANCE", "ELAPSEDSEC", "ELAPSEDTIME", 
                      "ELEMENT", "ELZS_H", "EMITNULL", "EMPTY", "EMPTY_BLOB", 
                      "EMPTY_CLOB", "ENCODE", "ENCODING", "ENCRYPT", "ERRORS", 
                      "ERRORTBL", "EVENTCOLUMN", "EXCEPTION", "EXCL", "EXCLUDE", 
                      "EXCLUDING", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXPORTWIDTH", 
                      "FALSE", "FEATUREINFO", "FILE", "FILL", "FILTER", 
                      "FINAL", "FIRST_NOTNULL", "FIRST_VALUE", "FLOOR", 
                      "FOLLOWING", "FOREIGNFUNCTION", "FORTOKEN", "FRIDAY", 
                      "FROM_BYTES", "FUNCTIONPARAMETER", "G", "GETBIT", 
                      "GETPSFVERSION", "GETQUERYBAND", "GETQUERYBANDVALUE", 
                      "GETTIMEZONEDISPLACEMENT", "GLOBAL", "GLOP", "GREATEST", 
                      "HIGH", "HOST", "IDENTIFYDATABASE", "IDENTIFYSESSION", 
                      "IDENTIFYTABLE", "IDENTIFYUSER", "IFP", "IGNORE", 
                      "IMMEDIATELY", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INCREMENTAL", "INDENT", "INDEXESPERTABLE", "INDEXMAINTMODE", 
                      "INIT", "INITCAP", "INLINE", "INSTANTIABLE", "INSTR", 
                      "INTERNAL", "INVOKER", "IOCOUNT", "IPARTITION", "ISOLATED", 
                      "ISOLATION", "JAVA", "JIS_COLL", "JSON", "JSON_AGG", 
                      "JSON_COMPOSE", "K", "KANJI1", "KANJISJIS", "KBYTE", 
                      "KBYTES", "KEEP", "KILOBYTES", "LAG", "LAST", "LAST_DAY", 
                      "LAST_NOTNULL", "LAST_VALUE", "LATIN", "LDIFF", "LEAD", 
                      "LEAST", "LENGTH", "LEVEL", "LIST", "LOAD", "LOCATE", 
                      "LOCKEDUSEREXPIRE", "LOW", "LPAD", "LTRIM", "LZCOMP", 
                      "LZCOMP_L", "LZDECOMP", "LZDECOMP_L", "M", "MAD", 
                      "MANUAL", "MAPPING", "MATCHED", "MAX_CHOOSE", "MAXCHAR", 
                      "MAXINTERVALS", "MAXLOGONATTEMPTS", "MAXVALUE", "MAXVALUELENGTH", 
                      "MEDIAN", "MEDIUM", "MEETS", "MEMBER", "MERGEBLOCKRATIO", 
                      "MESSAGE_LENGTH", "MESSAGE_TEXT", "MIN_CHOOSE", "MINCHAR", 
                      "MINVALUE", "MODIFIED", "MONDAY", "MONITORQUERYBAND", 
                      "MONITORSESSIONRATE", "MONITORVERSION", "MONTH_BEGIN", 
                      "MONTH_END", "MONTH_OF_CALENDAR", "MONTH_OF_QUARTER", 
                      "MONTH_OF_YEAR", "MONTHNUMBER_OF_CALENDAR", "MONTHNUMBER_OF_QUARTER", 
                      "MONTHNUMBER_OF_YEAR", "MONTHS_BETWEEN", "MORE_", 
                      "MULTINATIONAL", "NAME", "NAMESPACE", "NEVER", "NEXT_DAY", 
                      "NGRAM", "NIL", "NODDLTEXT", "NODE", "NONOPTCOST", 
                      "NONOPTINIT", "NONSEQUENCED", "NORIGHT", "NOSEXTRACTVARFROMPATH", 
                      "NOTATION", "NOW", "NPATH", "NTH", "NULLS", "NUMFPFNS", 
                      "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", 
                      "NVP", "OA", "OADD_MONTHS", "OCOUNT", "ODELETE", "OEXISTS", 
                      "OEXTEND", "OFIRST", "OLAST", "OLD_NEW_TABLE", "OLIMIT", 
                      "ONEXT", "ONLINE", "OPRIOR", "OPTIONS", "ORDERBYVALUES", 
                      "ORDERED_ANALYTIC", "ORDINALITY", "OREPLACE", "OTRANSLATE", 
                      "OTRIM", "OVERLAYS", "OWNER", "P_INTERSECT", "P_NORMALIZE", 
                      "PARAMID", "PARAMINFO", "PARENT", "PARTITION", "PARTITION_L", 
                      "PARTITIONED", "PARTITIONNAMES", "PASS", "PASSING", 
                      "PATH_GENERATOR", "PATH_START", "PATH_SUMMARIZER", 
                      "PATTERN", "PERCENTILE", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERIOD", "PIVOT", "PORTION", "POWER", "PRECEDES", 
                      "PRECEDING", "PREFIX", "PRINT", "PRIOR", "PROTECTED", 
                      "QUARTER_BEGIN", "QUARTER_END", "QUARTER_OF_CALENDAR", 
                      "QUARTER_OF_YEAR", "QUARTERNUMBER_OF_CALENDAR", "QUARTERNUMBER_OF_YEAR", 
                      "QUERY", "QUERY_BAND", "QUOTECHAR", "RANDOMIZED", 
                      "RANGE", "RANGE_L", "RAPIDFIRE", "RDIFF", "READ", 
                      "RECALC", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SIMILAR", 
                      "REGEXP_SUBSTR", "REPLACEMENT", "RESET", "RESPECT", 
                      "RESTRICTWORDS", "RETAIN", "RETURNED_SQLSTATE", "RETURNING", 
                      "REUSE", "ROOT", "ROTATELEFT", "ROTATERIGHT", "ROUND", 
                      "ROW_COUNT", "ROWIDGEN", "ROWIDGEN2", "RPAD", "RTRIM", 
                      "RU", "RULES", "RULESET", "SAMPLES", "SATURDAY", "SCHEMA", 
                      "SCRIPT", "SCRIPT_COMMAND", "SEARCHSPACE", "SEARCHUIFDBPATH", 
                      "SECURITY", "SEED", "SELF", "SEQ", "SEQUENCE", "SEQUENCED", 
                      "SERIALIZABLE", "SERVER", "SESSIONIZE", "SETBIT", 
                      "SETRESOURCERATE", "SETSESSIONACCOUNT", "SETSESSIONRATE", 
                      "SHARE", "SHIFTLEFT", "SHIFTRIGHT", "SIGN", "SIZE", 
                      "SNAPPY_COMPRESS", "SNAPPY_DECOMPRESS", "SOURCE", 
                      "SPARSE", "SPECCHAR", "SPL", "SQLSTATE", "SR", "ST_GEOMETRY", 
                      "STAT", "STATIC", "STATS", "STATSUSAGE", "STORAGE", 
                      "STRIP", "STRTOK", "STYLE", "SUBBITSTR", "SUBCLASS_ORIGIN", 
                      "SUCCEEDS", "SUMMARYONLY", "SUNDAY", "SYMBOLS", "SYSTEM", 
                      "SYSTEM_TIME", "SYSTEMTEST", "TARGET", "TD_ARRAY2P", 
                      "TD_DATASET", "TD_DAY_OF_CALENDAR", "TD_DAY_OF_MONTH", 
                      "TD_DAY_OF_WEEK", "TD_DAY_OF_YEAR", "TD_GENERAL", 
                      "TD_GETTIMEBUCKET", "TD_INTERNAL", "TD_LZ_COMPRESS", 
                      "TD_LZ_DECOMPRESS", "TD_MONTH_OF_CALENDAR", "TD_MONTH_OF_QUARTER", 
                      "TD_MONTH_OF_YEAR", "TD_QUARTER_OF_CALENDAR", "TD_QUARTER_OF_YEAR", 
                      "TD_TIME_BUCKET_NUMBER", "TD_WEEK_OF_CALENDAR", "TD_WEEK_OF_MONTH", 
                      "TD_WEEK_OF_YEAR", "TD_WEEKDAY_OF_MONTH", "TD_YEAR_OF_CALENDAR", 
                      "TDWMEVENT", "TDWMEXCEPTION", "TDWMHISTORY", "TEMPORAL_DATE", 
                      "TEMPORAL_TIMESTAMP", "TEXT", "THRESHOLDPERCENT", 
                      "THROUGH", "THURSDAY", "TIES", "TIMECODE", "TIMECOLUMN", 
                      "TIMEOUT", "TIMESTAMPCOLUMN", "TO_BYTE", "TO_BYTES", 
                      "TO_CHAR", "TO_DATE", "TO_DSINTERVAL", "TO_NUMBER", 
                      "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", 
                      "TOTOKEN", "TPA", "TRANSACTION_ACTIVE", "TRANSUNICODETOUTF8", 
                      "TRANSUTF8TOUNICODE", "TRUE", "TRUNC", "TRUST_ONLY", 
                      "TTGRANULARITY", "TUESDAY", "UBJSON", "UCASE", "UDFSEARCHPATH", 
                      "UNBOUNDED", "UNCOMMITTED", "UNICODE", "UNKNOWN", 
                      "UNPIVOT", "USE", "USECOUNT", "UTILITYINFO", "VARRAY", 
                      "VERBOSE", "VERSION", "VERSIONING", "WARNING", "WEDNESDAY", 
                      "WEEK_BEGIN", "WEEK_END", "WEEK_OF_CALENDAR", "WEEK_OF_MONTH", 
                      "WEEK_OF_YEAR", "WEEKDAY_OF_MONTH", "WEEKNUMBER_OF_CALENDAR", 
                      "WEEKNUMBER_OF_MONTH", "WEEKNUMBER_OF_QUARTER", "WEEKNUMBER_OF_YEAR", 
                      "WHITESPACE", "WINDOWSIZE", "WITHIN", "WORKLOAD", 
                      "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCOMMENT", 
                      "XMLCONCAT", "XMLDECLARATION", "XMLDOCUMENT", "XMLELEMENT", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", 
                      "XMLTEXT", "XMLTYPE", "XMLVALIDATE", "YEAR_BEGIN", 
                      "YEAR_END", "YEAR_OF_CALENDAR", "YEARNUMBER_OF_CALENDAR", 
                      "ZLIB", "BUCKET", "COMMITTED", "CREATEXML", "CS_LATIN", 
                      "CS_UNICODE", "CS_KANJISJIS", "CS_GRAPHIC", "CSV", 
                      "CSVLD", "DATASIZE", "DAYOFMONTH", "DAYS", "DEFINITION", 
                      "DELETED", "FAST", "LISTAGG", "PATH", "REGEXP_SPLIT_TO_TABLE", 
                      "REVERSE", "SAS", "SQLTABLE", "STRTOK_SPLIT_TO_TABLE", 
                      "SYSLIB", "SYSUDTLIB", "TD_SERVER_DB", "TD_SYSFNLIB", 
                      "TD_SYSXML", "TIMEDATEWZCONTROL", "TRUST", "TRYCAST", 
                      "UDT", "USAGE", "VARIANT", "WEEK", "WIDTH", "XMLPUBLISH", 
                      "XMLPUBLISH_STREAM", "XMLSPLIT", "LATIN_TO_UNICODE", 
                      "UNICODE_TO_LATIN", "LOCALE_TO_UNICODE", "UNICODE_TO_LOCALE", 
                      "ASBSON", "ASBSONTEXT", "COMBINE", "EXISTVALUE", "JSONEXTRACT", 
                      "JSONEXTRACTVALUE", "JSONEXTRACTLARGEVALUE", "KEYCOUNT", 
                      "METADATA", "STORAGE_SIZE", "CREATESCHEMABASEDXML", 
                      "CREATENONSCHEMABASEDXML", "EXISTSNODE", "ISCONTENT", 
                      "ISDOCUMENT", "ISSCHEMAVALID", "ISSCHEMAVALIDATED", 
                      "XMLEXTRACT", "XMLTRANSFORM", "PROC_ID", "LOCATION", 
                      "PAYLOAD", "TRUSTED", "PATHPATTERN", "MANIFEST", "ROWFORMAT", 
                      "STOREDAS", "HEADER", "STRIP_EXTERIOR_SPACES", "STRIP_ENCLOSING_CHAR", 
                      "RLS", "SINGLE", "MULTIPLE", "JSON_COMPRESS", "JSON_DECOMPRESS", 
                      "TS_COMPRESS", "TS_DECOMPRESS", "CONTIGUOUSMAPAMPS", 
                      "SPARSEMAPAMPS", "SPARSETABLEAMPS", "UNNEST", "CALCMATRIX", 
                      "PHRASE", "CALCTYPE", "OUTPUT", "NULL_HANDLING", "READ_NOS", 
                      "BUFFERSIZE", "RETURNTYPE", "SAMPLE_PERC", "FULLSCAN", 
                      "TD_UNPIVOT", "VALUE_COLUMNS", "UNPIVOT_COLUMN", "COLUMN_LIST", 
                      "COLUMN_ALIAS_LIST", "INCLUDE_NULLS", "WRITE_NOS", 
                      "NAMING", "MANIFESTFILE", "MANIFESTONLY", "OVERWRITE", 
                      "INCLUDE_ORDERING", "INCLUDE_HASHBY", "MAXOBJECTSIZE", 
                      "COMPRESSION", "ARRAY_TO_JSON", "BSON_CHECK", "GEOJSONFROMGEOM", 
                      "GEOMFROMGEOJSON", "JSON_CHECK", "JSONGETVALUE", "JSONMETADATA", 
                      "NVP2JSON", "TD_JSONSHRED", "JSON_KEYS", "JSON_TABLE", 
                      "DEPTH", "QUOTES", "ROWEXPR", "COLEXPR", "RETURNTYPES", 
                      "NOCASE", "TRUNCATE", "LINK", "OBJECT_NAME", "UNSIGNED_INTEGER", 
                      "HEX_BYTE_LITERAL", "HEX_INTEGER_LITERAL", "FLOAT_LITERAL", 
                      "DATE_STRING", "TIME_STRING", "TIMESTAMP_STRING", 
                      "PERIOD_STRING", "UNICODE_STRING_LEADING", "CHAR_STRING", 
                      "HEX_STRING", "PASSWORD_STRING", "SEMICOLON", "COLON", 
                      "COMMA", "DOT_", "AT_SIGN", "CARET", "QUESTION_MARK", 
                      "OPEN_PAR", "CLOSE_PAR", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
                      "CONCATENATE", "BROKEN_CONCATENATE", "MUL_SIGN", "DIV_SIGN", 
                      "PLUS_SIGN", "MINUS_SIGN", "EXPONENTIATION", "EQUALS_SIGN", 
                      "NOT_EQUALS_SIGN", "NOT_EQUALS_SIGN_TD", "LT_SIGN", 
                      "LE_SIGN", "GT_SIGN", "GE_SIGN", "SINGLE_LINE_COMMENT", 
                      "MULTI_LINE_COMMENT", "WS" ]

    RULE_data_type = 0
    RULE_variable_data_type = 1
    RULE_external_function_data_type = 2
    RULE_numeric_data_type = 3
    RULE_char_data_type = 4
    RULE_precisionless_char_data_type = 5
    RULE_lob_as_locator_data_type = 6
    RULE_binary_data_type = 7
    RULE_datetime_type = 8
    RULE_period_type = 9
    RULE_udt_type = 10
    RULE_data_type_attribute = 11
    RULE_default_value_control_phrase = 12
    RULE_default_value = 13
    RULE_column_naming_phrase = 14
    RULE_sysudtlib = 15
    RULE_interval_period_spec = 16
    RULE_type_precision = 17
    RULE_max_length_k_m_g = 18
    RULE_max_length_k_m = 19
    RULE_character_set_phrase = 20
    RULE_uppercase_phrase = 21
    RULE_casespecific_phrase = 22
    RULE_format_phrase = 23
    RULE_title_phrase = 24
    RULE_named_phrase = 25
    RULE_latin_unicode_character_set_phrase = 26
    RULE_inline_length = 27
    RULE_json_storage_format = 28
    RULE_dataset_storage_format_clause = 29
    RULE_dataset_storage_format = 30
    RULE_with_schema = 31
    RULE_with_time_zone = 32
    RULE_literal = 33
    RULE_hex_byte_literal = 34
    RULE_char_string_literal = 35
    RULE_unicode_char_string_literal = 36
    RULE_hex_char_string_literal = 37
    RULE_integer_literal = 38
    RULE_hex_integer_literal = 39
    RULE_float_literal = 40
    RULE_character_set_prefix = 41
    RULE_date_literal = 42
    RULE_time_literal = 43
    RULE_timestamp_literal = 44
    RULE_interval_literal = 45
    RULE_interval_qualifier = 46
    RULE_period_literal = 47
    RULE_column_name = 48
    RULE_unqualified_column_name = 49
    RULE_unqualified_name = 50
    RULE_object_name = 51
    RULE_table_name = 52
    RULE_procedure_name = 53
    RULE_function_name = 54
    RULE_macro_name = 55
    RULE_database_name = 56
    RULE_user_name = 57
    RULE_role_name = 58
    RULE_profile_name = 59
    RULE_alias_name = 60
    RULE_variable_name = 61
    RULE_parameter_name = 62
    RULE_label_name = 63
    RULE_condition_name = 64
    RULE_cursor_name = 65
    RULE_statement_name = 66
    RULE_statistics_name = 67
    RULE_udt_name = 68
    RULE_attribute_name = 69
    RULE_method_name = 70
    RULE_anchor_name = 71
    RULE_nonreserved_word = 72
    RULE_query_expr = 73
    RULE_query_term = 74
    RULE_with_deleted_rows = 75
    RULE_as_json = 76
    RULE_select_list = 77
    RULE_top_n = 78
    RULE_normalize = 79
    RULE_all_operator = 80
    RULE_selected_columns = 81
    RULE_selected_column = 82
    RULE_into_clause = 83
    RULE_from_clause = 84
    RULE_from_spec = 85
    RULE_join_source_spec = 86
    RULE_join_joined_spec = 87
    RULE_from_pivot_spec = 88
    RULE_from_unpivot_spec = 89
    RULE_table_reference = 90
    RULE_join_clause = 91
    RULE_join_on_clause = 92
    RULE_foreign_table_reference = 93
    RULE_foreign_function_reference = 94
    RULE_foreign_on_clause = 95
    RULE_exported_data = 96
    RULE_foreign_using_clause = 97
    RULE_foreign_parameter = 98
    RULE_foreign_returns_clause = 99
    RULE_server_name_reference = 100
    RULE_table_function_reference = 101
    RULE_udt_table_function = 102
    RULE_unnest_table_function = 103
    RULE_table_function_returns_clause = 104
    RULE_table_function_local_order_by_clause = 105
    RULE_table_function_hash_by_clause = 106
    RULE_table_operator_reference = 107
    RULE_xmltable_operator = 108
    RULE_calcmatrix_table_operator = 109
    RULE_read_nos_table_operator = 110
    RULE_script_table_operator = 111
    RULE_td_unpivot_table_operator = 112
    RULE_write_nos_table_operator = 113
    RULE_json_table_table_operator = 114
    RULE_json_keys_table_operator = 115
    RULE_json_shred_table_operator = 116
    RULE_generic_table_operator = 117
    RULE_table_operator_on_clause = 118
    RULE_table_operator_execute_clause = 119
    RULE_table_operator_out_table_clause = 120
    RULE_table_operator_using_clause = 121
    RULE_table_operator_using_spec = 122
    RULE_json_keys_using_name_value_pair = 123
    RULE_hash_or_partition_by = 124
    RULE_subquery_reference = 125
    RULE_location = 126
    RULE_read_nos_option = 127
    RULE_write_nos_option = 128
    RULE_with_clause = 129
    RULE_with_clause_by_phrase = 130
    RULE_with_clause_title_phrase = 131
    RULE_where_clause = 132
    RULE_group_by_clause = 133
    RULE_group_by_spec = 134
    RULE_ordinary_grouping_set = 135
    RULE_ordinary_grouping_set_parenthesized = 136
    RULE_empty_grouping_set = 137
    RULE_rollup_option = 138
    RULE_cube_option = 139
    RULE_grouping_sets_option = 140
    RULE_grouping_sets_spec = 141
    RULE_having_clause = 142
    RULE_qualify_clause = 143
    RULE_sample_clause = 144
    RULE_sample_fraction_description = 145
    RULE_sample_count_description = 146
    RULE_sample_when_clause = 147
    RULE_expand_on_clause = 148
    RULE_order_by_clause = 149
    RULE_order_by_spec_full = 150
    RULE_order_by_spec_asc_desc_only = 151
    RULE_with_check_option = 152
    RULE_logical_expr = 153
    RULE_scalar_expr = 154
    RULE_tuple = 155
    RULE_tuple_attribute = 156
    RULE_case_expr = 157
    RULE_valued_case_expr = 158
    RULE_searched_case_expr = 159
    RULE_coalesce_expr = 160
    RULE_nullif_expr = 161
    RULE_interval_expr_base = 162
    RULE_interval_expr_parenthesized = 163
    RULE_interval_expr_start_end_phrase = 164
    RULE_function_invocation = 165
    RULE_aggregate_function = 166
    RULE_analytic_function = 167
    RULE_arithmetic_function = 168
    RULE_array_function = 169
    RULE_attribute_function = 170
    RULE_byte_function = 171
    RULE_builtin_function = 172
    RULE_calendar_function = 173
    RULE_comparison_function = 174
    RULE_compression_function = 175
    RULE_conversion_function = 176
    RULE_date_function = 177
    RULE_hash_function = 178
    RULE_lob_function = 179
    RULE_map_function = 180
    RULE_nvl_funtion = 181
    RULE_period_function = 182
    RULE_regexp_function = 183
    RULE_string_function = 184
    RULE_json_function = 185
    RULE_xml_function = 186
    RULE_other_function = 187
    RULE_partitioning_expr = 188
    RULE_td_sysfnlib = 189
    RULE_td_sysxml = 190
    RULE_syslib = 191
    RULE_td_server_db = 192
    RULE_translation_mapping = 193
    RULE_attribute_modification = 194
    RULE_returns_clause = 195
    RULE_attribute_modification_option = 196
    RULE_teradata_type_conversion = 197
    RULE_teradata_type_conversion_data_attribute = 198
    RULE_case_spec = 199
    RULE_range_expr = 200
    RULE_range_list = 201
    RULE_range_expr_1 = 202
    RULE_range_expr_2 = 203
    RULE_range_expr_3 = 204
    RULE_range_spec = 205
    RULE_hash_bucket_number_expr = 206
    RULE_window_spec = 207
    RULE_window_spec_without_rows = 208
    RULE_window_spec_with_ties = 209
    RULE_window_partition_by = 210
    RULE_window_order_by = 211
    RULE_window_rows = 212
    RULE_json_param_spec = 213
    RULE_xml_query_argument = 214
    RULE_xml_query_variable_spec = 215
    RULE_xml_attribute_declaration = 216
    RULE_xml_attribute_spec = 217
    RULE_xml_forest_element_spec = 218
    RULE_xml_value_declaration = 219
    RULE_xml_namespace_declaration = 220
    RULE_xml_namespace_spec = 221
    RULE_xml_columns_spec = 222
    RULE_xml_regular_column_definition = 223
    RULE_xml_encoding = 224
    RULE_xml_query_on_empty = 225
    RULE_xml_returning_spec = 226
    RULE_xml_content_option_spec = 227
    RULE_ignore_respect_nulls = 228
    RULE_number_of_rows = 229
    RULE_with_ties = 230
    RULE_pivot = 231
    RULE_pivot_spec = 232
    RULE_pivot_with_phrase = 233
    RULE_pivot_agg_func_spec = 234
    RULE_pivot_for_phrase = 235
    RULE_pivot_with_spec = 236
    RULE_pivot_expr_spec_scalar = 237
    RULE_pivot_expr_spec_list = 238
    RULE_unpivot = 239
    RULE_unpivot_spec = 240
    RULE_unpivot_column_name_spec_single = 241
    RULE_unpivot_column_name_spec_list = 242
    RULE_at_timezone = 243
    RULE_elements_list = 244
    RULE_scalar_expr_list = 245
    RULE_scalar_expr_list_comma_separated = 246
    RULE_column_list = 247
    RULE_subquery = 248
    RULE_column_spec = 249
    RULE_variable_reference = 250
    RULE_cursor_variable_reference = 251
    RULE_macro_parameter_reference = 252
    RULE_array_scope_reference = 253
    RULE_comparison_operator = 254
    RULE_quantifier = 255
    RULE_request_modifier = 256
    RULE_locking_request_modifier = 257
    RULE_locking_spec = 258
    RULE_lock_type = 259
    RULE_with_request_modifier = 260
    RULE_cte_spec = 261
    RULE_regular_cte_spec = 262
    RULE_recursive_cte_spec = 263
    RULE_using_request_modifier = 264
    RULE_using_spec = 265
    RULE_explain_request_modifier = 266

    ruleNames =  [ "data_type", "variable_data_type", "external_function_data_type", 
                   "numeric_data_type", "char_data_type", "precisionless_char_data_type", 
                   "lob_as_locator_data_type", "binary_data_type", "datetime_type", 
                   "period_type", "udt_type", "data_type_attribute", "default_value_control_phrase", 
                   "default_value", "column_naming_phrase", "sysudtlib", 
                   "interval_period_spec", "type_precision", "max_length_k_m_g", 
                   "max_length_k_m", "character_set_phrase", "uppercase_phrase", 
                   "casespecific_phrase", "format_phrase", "title_phrase", 
                   "named_phrase", "latin_unicode_character_set_phrase", 
                   "inline_length", "json_storage_format", "dataset_storage_format_clause", 
                   "dataset_storage_format", "with_schema", "with_time_zone", 
                   "literal", "hex_byte_literal", "char_string_literal", 
                   "unicode_char_string_literal", "hex_char_string_literal", 
                   "integer_literal", "hex_integer_literal", "float_literal", 
                   "character_set_prefix", "date_literal", "time_literal", 
                   "timestamp_literal", "interval_literal", "interval_qualifier", 
                   "period_literal", "column_name", "unqualified_column_name", 
                   "unqualified_name", "object_name", "table_name", "procedure_name", 
                   "function_name", "macro_name", "database_name", "user_name", 
                   "role_name", "profile_name", "alias_name", "variable_name", 
                   "parameter_name", "label_name", "condition_name", "cursor_name", 
                   "statement_name", "statistics_name", "udt_name", "attribute_name", 
                   "method_name", "anchor_name", "nonreserved_word", "query_expr", 
                   "query_term", "with_deleted_rows", "as_json", "select_list", 
                   "top_n", "normalize", "all_operator", "selected_columns", 
                   "selected_column", "into_clause", "from_clause", "from_spec", 
                   "join_source_spec", "join_joined_spec", "from_pivot_spec", 
                   "from_unpivot_spec", "table_reference", "join_clause", 
                   "join_on_clause", "foreign_table_reference", "foreign_function_reference", 
                   "foreign_on_clause", "exported_data", "foreign_using_clause", 
                   "foreign_parameter", "foreign_returns_clause", "server_name_reference", 
                   "table_function_reference", "udt_table_function", "unnest_table_function", 
                   "table_function_returns_clause", "table_function_local_order_by_clause", 
                   "table_function_hash_by_clause", "table_operator_reference", 
                   "xmltable_operator", "calcmatrix_table_operator", "read_nos_table_operator", 
                   "script_table_operator", "td_unpivot_table_operator", 
                   "write_nos_table_operator", "json_table_table_operator", 
                   "json_keys_table_operator", "json_shred_table_operator", 
                   "generic_table_operator", "table_operator_on_clause", 
                   "table_operator_execute_clause", "table_operator_out_table_clause", 
                   "table_operator_using_clause", "table_operator_using_spec", 
                   "json_keys_using_name_value_pair", "hash_or_partition_by", 
                   "subquery_reference", "location", "read_nos_option", 
                   "write_nos_option", "with_clause", "with_clause_by_phrase", 
                   "with_clause_title_phrase", "where_clause", "group_by_clause", 
                   "group_by_spec", "ordinary_grouping_set", "ordinary_grouping_set_parenthesized", 
                   "empty_grouping_set", "rollup_option", "cube_option", 
                   "grouping_sets_option", "grouping_sets_spec", "having_clause", 
                   "qualify_clause", "sample_clause", "sample_fraction_description", 
                   "sample_count_description", "sample_when_clause", "expand_on_clause", 
                   "order_by_clause", "order_by_spec_full", "order_by_spec_asc_desc_only", 
                   "with_check_option", "logical_expr", "scalar_expr", "tuple", 
                   "tuple_attribute", "case_expr", "valued_case_expr", "searched_case_expr", 
                   "coalesce_expr", "nullif_expr", "interval_expr_base", 
                   "interval_expr_parenthesized", "interval_expr_start_end_phrase", 
                   "function_invocation", "aggregate_function", "analytic_function", 
                   "arithmetic_function", "array_function", "attribute_function", 
                   "byte_function", "builtin_function", "calendar_function", 
                   "comparison_function", "compression_function", "conversion_function", 
                   "date_function", "hash_function", "lob_function", "map_function", 
                   "nvl_funtion", "period_function", "regexp_function", 
                   "string_function", "json_function", "xml_function", "other_function", 
                   "partitioning_expr", "td_sysfnlib", "td_sysxml", "syslib", 
                   "td_server_db", "translation_mapping", "attribute_modification", 
                   "returns_clause", "attribute_modification_option", "teradata_type_conversion", 
                   "teradata_type_conversion_data_attribute", "case_spec", 
                   "range_expr", "range_list", "range_expr_1", "range_expr_2", 
                   "range_expr_3", "range_spec", "hash_bucket_number_expr", 
                   "window_spec", "window_spec_without_rows", "window_spec_with_ties", 
                   "window_partition_by", "window_order_by", "window_rows", 
                   "json_param_spec", "xml_query_argument", "xml_query_variable_spec", 
                   "xml_attribute_declaration", "xml_attribute_spec", "xml_forest_element_spec", 
                   "xml_value_declaration", "xml_namespace_declaration", 
                   "xml_namespace_spec", "xml_columns_spec", "xml_regular_column_definition", 
                   "xml_encoding", "xml_query_on_empty", "xml_returning_spec", 
                   "xml_content_option_spec", "ignore_respect_nulls", "number_of_rows", 
                   "with_ties", "pivot", "pivot_spec", "pivot_with_phrase", 
                   "pivot_agg_func_spec", "pivot_for_phrase", "pivot_with_spec", 
                   "pivot_expr_spec_scalar", "pivot_expr_spec_list", "unpivot", 
                   "unpivot_spec", "unpivot_column_name_spec_single", "unpivot_column_name_spec_list", 
                   "at_timezone", "elements_list", "scalar_expr_list", "scalar_expr_list_comma_separated", 
                   "column_list", "subquery", "column_spec", "variable_reference", 
                   "cursor_variable_reference", "macro_parameter_reference", 
                   "array_scope_reference", "comparison_operator", "quantifier", 
                   "request_modifier", "locking_request_modifier", "locking_spec", 
                   "lock_type", "with_request_modifier", "cte_spec", "regular_cte_spec", 
                   "recursive_cte_spec", "using_request_modifier", "using_spec", 
                   "explain_request_modifier" ]

    EOF = Token.EOF
    ABORT=1
    ABORTSESSION=2
    ABS=3
    ACCESS_LOCK=4
    ACCOUNT=5
    ACOS=6
    ACOSH=7
    ADD=8
    ADD_MONTHS=9
    ADMIN=10
    AFTER=11
    AGGREGATE=12
    ALL=13
    ALTER=14
    AMP=15
    AND=16
    ANSIDATE=17
    ANY=18
    ARGLPAREN=19
    AS=20
    ASC=21
    ASIN=22
    ASINH=23
    AT=24
    ATAN=25
    ATAN2=26
    ATANH=27
    ATOMIC=28
    AUTHORIZATION=29
    AVE=30
    AVERAGE=31
    AVG=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BIGINT=36
    BINARY=37
    BLOB=38
    BOTH=39
    BT=40
    BUT=41
    BY=42
    BYTE=43
    BYTEINT=44
    BYTES=45
    CALL=46
    CASE=47
    CASE_N=48
    CASESPECIFIC=49
    CAST=50
    CD=51
    CHAR=52
    CHAR_LENGTH=53
    CHAR2HEXINT=54
    CHARACTER=55
    CHARACTER_LENGTH=56
    CHARACTERS=57
    CHARS=58
    CHECK=59
    CHECKPOINT=60
    CLASS=61
    CLOB=62
    CLOSE=63
    CLUSTER=64
    CM=65
    COALESCE=66
    COLLATION=67
    COLLECT=68
    COLUMN=69
    COMMENT=70
    COMMIT=71
    COMPRESS=72
    CONNECT=73
    CONSTRAINT=74
    CONSTRUCTOR=75
    CONSUME=76
    CONTAINS=77
    CONTINUE=78
    CONVERT_TABLE_HEADER=79
    CORR=80
    COS=81
    COSH=82
    COUNT=83
    COVAR_POP=84
    COVAR_SAMP=85
    CREATE=86
    CROSS=87
    CS=88
    CSUM=89
    CT=90
    CTCONTROL=91
    CUBE=92
    CURRENT=93
    CURRENT_DATE=94
    CURRENT_ROLE=95
    CURRENT_TIME=96
    CURRENT_TIMESTAMP=97
    CURRENT_USER=98
    CURSOR=99
    CV=100
    CYCLE=101
    DATABASE=102
    DATABLOCKSIZE=103
    DATE=104
    DATEFORM=105
    DAY=106
    DEALLOCATE=107
    DEC=108
    DECIMAL=109
    DECLARE=110
    DEFAULT=111
    DEFERRED=112
    DEGREES=113
    DEL=114
    DELETE=115
    DESC=116
    DETERMINISTIC=117
    DIAGNOSTIC=118
    DICTIONARY=119
    DISABLED=120
    DISTINCT=121
    DO=122
    DOMAIN=123
    DOUBLE=124
    DROP=125
    DUAL=126
    DUMP=127
    DYNAMIC=128
    EACH=129
    ECHO=130
    ELSE=131
    ELSEIF=132
    ENABLED=133
    END=134
    EQ=135
    EQUALS=136
    ERROR=137
    ERRORFILES=138
    ERRORTABLES=139
    ESCAPE=140
    ET=141
    EXCEPT=142
    EXEC=143
    EXECUTE=144
    EXISTS=145
    EXIT=146
    EXP=147
    EXPAND=148
    EXPANDING=149
    EXPLAIN=150
    EXTERNAL=151
    EXTRACT=152
    FALLBACK=153
    FASTEXPORT=154
    FETCH=155
    FIRST=156
    FLOAT=157
    FLUSH=158
    FOR=159
    FOREIGN=160
    FORMAT=161
    FOUND=162
    FREESPACE=163
    FROM=164
    FULL=165
    FUNCTION=166
    FUNCTIONDESCRIPTOR=167
    GE=168
    GENERATED=169
    GET=170
    GIVE=171
    GRANT=172
    GRAPHIC=173
    GROUP=174
    GROUPING=175
    GT=176
    HANDLER=177
    HASH=178
    HASHAMP=179
    HASHBAKAMP=180
    HASHBUCKET=181
    HASHROW=182
    HAVING=183
    HELP=184
    HOUR=185
    ID2BIGINT=186
    IDENTITY=187
    IF=188
    IMMEDIATE=189
    IN=190
    INCONSISTENT=191
    INDEX=192
    INITIATE=193
    INNER=194
    INOUT=195
    INPUT=196
    INS=197
    INSERT=198
    INSTANCE=199
    INSTEAD=200
    INT=201
    INTEGER=202
    INTEGERDATE=203
    INTERSECT=204
    INTERVAL=205
    INTO=206
    IS=207
    ITERATE=208
    JAR=209
    JOIN=210
    JOURNAL=211
    KEY=212
    KURTOSIS=213
    LANGUAGE=214
    LARGE=215
    LE=216
    LEADING=217
    LEAVE=218
    LEFT=219
    LIKE=220
    LIMIT=221
    LN=222
    LOADING=223
    LOCAL=224
    LOCATOR=225
    LOCK=226
    LOCKING=227
    LOG=228
    LOGGING=229
    LOGON=230
    LONG=231
    LOOP=232
    LOWER=233
    LT=234
    MACRO=235
    MAP=236
    MAVG=237
    MAX=238
    MAXIMUM=239
    MCHARACTERS=240
    MDIFF=241
    MERGE=242
    METHOD=243
    MIN=244
    MINDEX=245
    MINIMUM=246
    MINUS=247
    MINUTE=248
    MLINREG=249
    MLOAD=250
    MOD=251
    MODE=252
    MODIFIES=253
    MODIFY=254
    MONITOR=255
    MONRESOURCE=256
    MONSESSION=257
    MONTH=258
    MSUBSTR=259
    MSUM=260
    MULTISET=261
    NAMED=262
    NATURAL=263
    NE=264
    NEW=265
    NEW_TABLE=266
    NEXT=267
    NO=268
    NONE=269
    NONTEMPORAL=270
    NORMALIZE=271
    NOT=272
    NOWAIT=273
    NULL=274
    NULLIF=275
    NULLIFZERO=276
    NUMBER=277
    NUMERIC=278
    OBJECT=279
    OBJECTS=280
    OCTET_LENGTH=281
    OF=282
    OFF=283
    OLD=284
    OLD_TABLE=285
    ON=286
    ONLY=287
    OPEN=288
    OPTION=289
    OR=290
    ORDER=291
    ORDERING=292
    OUT=293
    OUTER=294
    OVER=295
    OVERLAPS=296
    OVERRIDE=297
    PARAMETER=298
    PASSWORD=299
    PERCENT=300
    PERCENT_RANK=301
    PERM=302
    PERMANENT=303
    POSITION=304
    PRECISION=305
    PREPARE=306
    PRESERVE=307
    PRIMARY=308
    PRIVILEGES=309
    PROCEDURE=310
    PROFILE=311
    PROTECTION=312
    PUBLIC=313
    QUALIFIED=314
    QUALIFY=315
    QUANTILE=316
    QUEUE=317
    RADIANS=318
    RANDOM=319
    RANGE_N=320
    RANK=321
    READS=322
    REAL=323
    RECURSIVE=324
    REFERENCES=325
    REFERENCING=326
    REGR_AVGX=327
    REGR_AVGY=328
    REGR_COUNT=329
    REGR_INTERCEPT=330
    REGR_R2=331
    REGR_SLOPE=332
    REGR_SXX=333
    REGR_SXY=334
    REGR_SYY=335
    RELATIVE=336
    RELEASE=337
    RENAME=338
    REPEAT=339
    REPLACE=340
    REPLCONTROL=341
    REPLICATION=342
    REQUEST=343
    RESIGNAL=344
    RESTART=345
    RESTORE=346
    RESULT=347
    RESUME=348
    RET=349
    RETRIEVE=350
    RETURN=351
    RETURNS=352
    REVALIDATE=353
    REVOKE=354
    RIGHT=355
    RIGHTS=356
    ROLE=357
    ROLLBACK=358
    ROLLFORWARD=359
    ROLLUP=360
    ROW=361
    ROW_NUMBER=362
    ROWID=363
    ROWS=364
    SAMPLE=365
    SAMPLEID=366
    SCROLL=367
    SECOND=368
    SEL=369
    SELECT=370
    SESSION=371
    SET=372
    SETRESRATE=373
    SETS=374
    SETSESSRATE=375
    SHOW=376
    SIGNAL=377
    SIN=378
    SINH=379
    SKEW=380
    SMALLINT=381
    SOME=382
    SOUNDEX=383
    SPECIFIC=384
    SPOOL=385
    SQL=386
    SQLEXCEPTION=387
    SQLTEXT=388
    SQLWARNING=389
    SQRT=390
    SS=391
    START=392
    STARTUP=393
    STATEMENT=394
    STATISTICS=395
    STDDEV_POP=396
    STDDEV_SAMP=397
    STEPINFO=398
    STRING_CS=399
    SUBSCRIBER=400
    SUBSTR=401
    SUBSTRING=402
    SUM=403
    SUMMARY=404
    SUSPEND=405
    TABLE=406
    TAN=407
    TANH=408
    TBL_CS=409
    TD_ANYTYPE=410
    TD_AUTHID=411
    TD_HOST=412
    TD_ROWLOADID=413
    TD_ROWREVISION=414
    TD_ROWSIZE=415
    TD_VALIST=416
    TEMPORARY=417
    TERMINATE=418
    THEN=419
    THRESHOLD=420
    TIME=421
    TIMESTAMP=422
    TIMEZONE_HOUR=423
    TIMEZONE_MINUTE=424
    TITLE=425
    TO=426
    TOP=427
    TRACE=428
    TRAILING=429
    TRANSACTION=430
    TRANSACTIONTIME=431
    TRANSFORM=432
    TRANSLATE=433
    TRANSLATE_CHK=434
    TRIGGER=435
    TRIM=436
    TYPE=437
    UC=438
    UDTCASTAS=439
    UDTCASTLPAREN=440
    UDTMETHOD=441
    UDTTYPE=442
    UDTUSAGE=443
    UESCAPE=444
    UNDEFINED=445
    UNDO=446
    UNION=447
    UNIQUE=448
    UNTIL=449
    UNTIL_CHANGED=450
    UNTIL_CLOSED=451
    UPD=452
    UPDATE=453
    UPPER=454
    UPPERCASE=455
    USER=456
    USING=457
    VALIDTIME=458
    VALUE=459
    VALUES=460
    VAR_POP=461
    VAR_SAMP=462
    VARBYTE=463
    VARCHAR=464
    VARGRAPHIC=465
    VARIANT_TYPE=466
    VARYING=467
    VIEW=468
    VOLATILE=469
    WHEN=470
    WHERE=471
    WHILE=472
    WIDTH_BUCKET=473
    WITH=474
    WITHOUT=475
    WORK=476
    XMLPLAN=477
    YEAR=478
    ZEROIFNULL=479
    ZONE=480
    ALIAS=481
    DESCRIPTOR=482
    GO=483
    GOTO=484
    INDICATOR=485
    PRIVATE=486
    WAIT=487
    ABORTSESSIONS=488
    ABSENT=489
    ACCESS=490
    ACCORDING=491
    ACCUMULATE=492
    AG=493
    AGGGEOMINTERSECTION=494
    AGGGEOMUNION=495
    ALLDBQL=496
    ALLOCATE=497
    ALLOCATION=498
    ALLOW=499
    ALLPARAMS=500
    ALLTDWM=501
    ALWAYS=502
    AMPCOUNT=503
    ANALYSIS=504
    ANCHOR=505
    ANCHOR_HOUR=506
    ANCHOR_MILLISECOND=507
    ANCHOR_MINUTE=508
    ANCHOR_SECOND=509
    APPLNAME=510
    ARCHIVE=511
    ARRAY=512
    ARRAY_ADD=513
    ARRAY_AGG=514
    ARRAY_AVG=515
    ARRAY_COMPARE=516
    ARRAY_CONCAT=517
    ARRAY_COUNT_DISTINCT=518
    ARRAY_DIV=519
    ARRAY_EQ=520
    ARRAY_GE=521
    ARRAY_GET=522
    ARRAY_GT=523
    ARRAY_LE=524
    ARRAY_LT=525
    ARRAY_MAX=526
    ARRAY_MIN=527
    ARRAY_MOD=528
    ARRAY_MUL=529
    ARRAY_NE=530
    ARRAY_SUB=531
    ARRAY_SUM=532
    ARRAY_UPDATE=533
    ARRAY_UPDATE_STRIDE=534
    ASCII=535
    ASSIGNMENT=536
    ATTR=537
    ATTRIBUTE=538
    ATTRIBUTES=539
    ATTRIBUTION=540
    ATTRS=541
    AUTH=542
    AUTO=543
    AUTOTEMP=544
    AVRO=545
    BIT_LENGTH=546
    BITAND=547
    BITNOT=548
    BITOR=549
    BITXOR=550
    BLOCKCOMPRESSION=551
    BLOCKCOMPRESSIONALGORITHM=552
    BLOCKCOMPRESSIONLEVEL=553
    BOM=554
    BOTTOM=555
    BSON=556
    C=557
    CALENDAR=558
    CALLED=559
    CALLER=560
    CAMSET=561
    CAMSET_L=562
    CAPTURE=563
    CARDINALITY=564
    CEIL=565
    CEILING=566
    CHANGERATE=567
    CHARACTERISTICS=568
    CHARSET=569
    CHARSET_COLL=570
    CHECKSUM=571
    CHR=572
    CLASS_ORIGIN=573
    CLICKLAG=574
    CLIENT=575
    CNT=576
    COLOCATE=577
    COLUMNMETA=578
    COLUMNS=579
    COLUMNSPERINDEX=580
    COLUMNSPERJOININDEX=581
    COMMAND_FUNCTION=582
    COMMAND_FUNCTION_CODE=583
    COMPARISON=584
    COMPILE=585
    CONCAT=586
    CONCURRENT=587
    CONDITION=588
    CONDITION_IDENTIFIER=589
    CONDITION_NUMBER=590
    CONTAINED=591
    CONTAINEDTOKEN=592
    CONTENT=593
    CONTIGUOUS=594
    COST=595
    COSTS=596
    COUNTSET=597
    CPP=598
    CPUTIME=599
    CPUTIMENORM=600
    CREATEDATASET=601
    CREATOR=602
    CUME_DIST=603
    CURDATE=604
    CURTIME=605
    DATA=606
    DATASET=607
    DAY_OF_CALENDAR=608
    DAY_OF_MONTH=609
    DAY_OF_WEEK=610
    DAY_OF_YEAR=611
    DAYNUMBER_OF_CALENDAR=612
    DAYNUMBER_OF_MONTH=613
    DAYNUMBER_OF_WEEK=614
    DAYNUMBER_OF_YEAR=615
    DAYOCCURRENCE_OF_MONTH=616
    DBA=617
    DBC=618
    DEBUG=619
    DECAMSET=620
    DECAMSET_L=621
    DECODE=622
    DECOMPRESS=623
    DEFINER=624
    DELIMITER=625
    DELTA_T=626
    DEMOGRAPHICS=627
    DENIALS=628
    DENSE=629
    DENSE_RANK=630
    DESCRIBE=631
    DETAILED=632
    DIAGNOSTICS=633
    DIGITS=634
    DIMENSION=635
    DOCUMENT=636
    DOT=637
    DOWN=638
    DR=639
    DUPCOUNT=640
    DUPCOUNTCUM=641
    EBCDIC=642
    EDITDISTANCE=643
    ELAPSEDSEC=644
    ELAPSEDTIME=645
    ELEMENT=646
    ELZS_H=647
    EMITNULL=648
    EMPTY=649
    EMPTY_BLOB=650
    EMPTY_CLOB=651
    ENCODE=652
    ENCODING=653
    ENCRYPT=654
    ERRORS=655
    ERRORTBL=656
    EVENTCOLUMN=657
    EXCEPTION=658
    EXCL=659
    EXCLUDE=660
    EXCLUDING=661
    EXCLUSIVE=662
    EXPIRE=663
    EXPORT=664
    EXPORTWIDTH=665
    FALSE=666
    FEATUREINFO=667
    FILE=668
    FILL=669
    FILTER=670
    FINAL=671
    FIRST_NOTNULL=672
    FIRST_VALUE=673
    FLOOR=674
    FOLLOWING=675
    FOREIGNFUNCTION=676
    FORTOKEN=677
    FRIDAY=678
    FROM_BYTES=679
    FUNCTIONPARAMETER=680
    G=681
    GETBIT=682
    GETPSFVERSION=683
    GETQUERYBAND=684
    GETQUERYBANDVALUE=685
    GETTIMEZONEDISPLACEMENT=686
    GLOBAL=687
    GLOP=688
    GREATEST=689
    HIGH=690
    HOST=691
    IDENTIFYDATABASE=692
    IDENTIFYSESSION=693
    IDENTIFYTABLE=694
    IDENTIFYUSER=695
    IFP=696
    IGNORE=697
    IMMEDIATELY=698
    IMPORT=699
    INCLUDE=700
    INCLUDING=701
    INCREMENT=702
    INCREMENTAL=703
    INDENT=704
    INDEXESPERTABLE=705
    INDEXMAINTMODE=706
    INIT=707
    INITCAP=708
    INLINE=709
    INSTANTIABLE=710
    INSTR=711
    INTERNAL=712
    INVOKER=713
    IOCOUNT=714
    IPARTITION=715
    ISOLATED=716
    ISOLATION=717
    JAVA=718
    JIS_COLL=719
    JSON=720
    JSON_AGG=721
    JSON_COMPOSE=722
    K=723
    KANJI1=724
    KANJISJIS=725
    KBYTE=726
    KBYTES=727
    KEEP=728
    KILOBYTES=729
    LAG=730
    LAST=731
    LAST_DAY=732
    LAST_NOTNULL=733
    LAST_VALUE=734
    LATIN=735
    LDIFF=736
    LEAD=737
    LEAST=738
    LENGTH=739
    LEVEL=740
    LIST=741
    LOAD=742
    LOCATE=743
    LOCKEDUSEREXPIRE=744
    LOW=745
    LPAD=746
    LTRIM=747
    LZCOMP=748
    LZCOMP_L=749
    LZDECOMP=750
    LZDECOMP_L=751
    M=752
    MAD=753
    MANUAL=754
    MAPPING=755
    MATCHED=756
    MAX_CHOOSE=757
    MAXCHAR=758
    MAXINTERVALS=759
    MAXLOGONATTEMPTS=760
    MAXVALUE=761
    MAXVALUELENGTH=762
    MEDIAN=763
    MEDIUM=764
    MEETS=765
    MEMBER=766
    MERGEBLOCKRATIO=767
    MESSAGE_LENGTH=768
    MESSAGE_TEXT=769
    MIN_CHOOSE=770
    MINCHAR=771
    MINVALUE=772
    MODIFIED=773
    MONDAY=774
    MONITORQUERYBAND=775
    MONITORSESSIONRATE=776
    MONITORVERSION=777
    MONTH_BEGIN=778
    MONTH_END=779
    MONTH_OF_CALENDAR=780
    MONTH_OF_QUARTER=781
    MONTH_OF_YEAR=782
    MONTHNUMBER_OF_CALENDAR=783
    MONTHNUMBER_OF_QUARTER=784
    MONTHNUMBER_OF_YEAR=785
    MONTHS_BETWEEN=786
    MORE_=787
    MULTINATIONAL=788
    NAME=789
    NAMESPACE=790
    NEVER=791
    NEXT_DAY=792
    NGRAM=793
    NIL=794
    NODDLTEXT=795
    NODE=796
    NONOPTCOST=797
    NONOPTINIT=798
    NONSEQUENCED=799
    NORIGHT=800
    NOSEXTRACTVARFROMPATH=801
    NOTATION=802
    NOW=803
    NPATH=804
    NTH=805
    NULLS=806
    NUMFPFNS=807
    NUMTODSINTERVAL=808
    NUMTOYMINTERVAL=809
    NVL=810
    NVL2=811
    NVP=812
    OA=813
    OADD_MONTHS=814
    OCOUNT=815
    ODELETE=816
    OEXISTS=817
    OEXTEND=818
    OFIRST=819
    OLAST=820
    OLD_NEW_TABLE=821
    OLIMIT=822
    ONEXT=823
    ONLINE=824
    OPRIOR=825
    OPTIONS=826
    ORDERBYVALUES=827
    ORDERED_ANALYTIC=828
    ORDINALITY=829
    OREPLACE=830
    OTRANSLATE=831
    OTRIM=832
    OVERLAYS=833
    OWNER=834
    P_INTERSECT=835
    P_NORMALIZE=836
    PARAMID=837
    PARAMINFO=838
    PARENT=839
    PARTITION=840
    PARTITION_L=841
    PARTITIONED=842
    PARTITIONNAMES=843
    PASS=844
    PASSING=845
    PATH_GENERATOR=846
    PATH_START=847
    PATH_SUMMARIZER=848
    PATTERN=849
    PERCENTILE=850
    PERCENTILE_CONT=851
    PERCENTILE_DISC=852
    PERIOD=853
    PIVOT=854
    PORTION=855
    POWER=856
    PRECEDES=857
    PRECEDING=858
    PREFIX=859
    PRINT=860
    PRIOR=861
    PROTECTED=862
    QUARTER_BEGIN=863
    QUARTER_END=864
    QUARTER_OF_CALENDAR=865
    QUARTER_OF_YEAR=866
    QUARTERNUMBER_OF_CALENDAR=867
    QUARTERNUMBER_OF_YEAR=868
    QUERY=869
    QUERY_BAND=870
    QUOTECHAR=871
    RANDOMIZED=872
    RANGE=873
    RANGE_L=874
    RAPIDFIRE=875
    RDIFF=876
    READ=877
    RECALC=878
    REGEXP_INSTR=879
    REGEXP_REPLACE=880
    REGEXP_SIMILAR=881
    REGEXP_SUBSTR=882
    REPLACEMENT=883
    RESET=884
    RESPECT=885
    RESTRICTWORDS=886
    RETAIN=887
    RETURNED_SQLSTATE=888
    RETURNING=889
    REUSE=890
    ROOT=891
    ROTATELEFT=892
    ROTATERIGHT=893
    ROUND=894
    ROW_COUNT=895
    ROWIDGEN=896
    ROWIDGEN2=897
    RPAD=898
    RTRIM=899
    RU=900
    RULES=901
    RULESET=902
    SAMPLES=903
    SATURDAY=904
    SCHEMA=905
    SCRIPT=906
    SCRIPT_COMMAND=907
    SEARCHSPACE=908
    SEARCHUIFDBPATH=909
    SECURITY=910
    SEED=911
    SELF=912
    SEQ=913
    SEQUENCE=914
    SEQUENCED=915
    SERIALIZABLE=916
    SERVER=917
    SESSIONIZE=918
    SETBIT=919
    SETRESOURCERATE=920
    SETSESSIONACCOUNT=921
    SETSESSIONRATE=922
    SHARE=923
    SHIFTLEFT=924
    SHIFTRIGHT=925
    SIGN=926
    SIZE=927
    SNAPPY_COMPRESS=928
    SNAPPY_DECOMPRESS=929
    SOURCE=930
    SPARSE=931
    SPECCHAR=932
    SPL=933
    SQLSTATE=934
    SR=935
    ST_GEOMETRY=936
    STAT=937
    STATIC=938
    STATS=939
    STATSUSAGE=940
    STORAGE=941
    STRIP=942
    STRTOK=943
    STYLE=944
    SUBBITSTR=945
    SUBCLASS_ORIGIN=946
    SUCCEEDS=947
    SUMMARYONLY=948
    SUNDAY=949
    SYMBOLS=950
    SYSTEM=951
    SYSTEM_TIME=952
    SYSTEMTEST=953
    TARGET=954
    TD_ARRAY2P=955
    TD_DATASET=956
    TD_DAY_OF_CALENDAR=957
    TD_DAY_OF_MONTH=958
    TD_DAY_OF_WEEK=959
    TD_DAY_OF_YEAR=960
    TD_GENERAL=961
    TD_GETTIMEBUCKET=962
    TD_INTERNAL=963
    TD_LZ_COMPRESS=964
    TD_LZ_DECOMPRESS=965
    TD_MONTH_OF_CALENDAR=966
    TD_MONTH_OF_QUARTER=967
    TD_MONTH_OF_YEAR=968
    TD_QUARTER_OF_CALENDAR=969
    TD_QUARTER_OF_YEAR=970
    TD_TIME_BUCKET_NUMBER=971
    TD_WEEK_OF_CALENDAR=972
    TD_WEEK_OF_MONTH=973
    TD_WEEK_OF_YEAR=974
    TD_WEEKDAY_OF_MONTH=975
    TD_YEAR_OF_CALENDAR=976
    TDWMEVENT=977
    TDWMEXCEPTION=978
    TDWMHISTORY=979
    TEMPORAL_DATE=980
    TEMPORAL_TIMESTAMP=981
    TEXT=982
    THRESHOLDPERCENT=983
    THROUGH=984
    THURSDAY=985
    TIES=986
    TIMECODE=987
    TIMECOLUMN=988
    TIMEOUT=989
    TIMESTAMPCOLUMN=990
    TO_BYTE=991
    TO_BYTES=992
    TO_CHAR=993
    TO_DATE=994
    TO_DSINTERVAL=995
    TO_NUMBER=996
    TO_TIMESTAMP=997
    TO_TIMESTAMP_TZ=998
    TO_YMINTERVAL=999
    TOTOKEN=1000
    TPA=1001
    TRANSACTION_ACTIVE=1002
    TRANSUNICODETOUTF8=1003
    TRANSUTF8TOUNICODE=1004
    TRUE=1005
    TRUNC=1006
    TRUST_ONLY=1007
    TTGRANULARITY=1008
    TUESDAY=1009
    UBJSON=1010
    UCASE=1011
    UDFSEARCHPATH=1012
    UNBOUNDED=1013
    UNCOMMITTED=1014
    UNICODE=1015
    UNKNOWN=1016
    UNPIVOT=1017
    USE=1018
    USECOUNT=1019
    UTILITYINFO=1020
    VARRAY=1021
    VERBOSE=1022
    VERSION=1023
    VERSIONING=1024
    WARNING=1025
    WEDNESDAY=1026
    WEEK_BEGIN=1027
    WEEK_END=1028
    WEEK_OF_CALENDAR=1029
    WEEK_OF_MONTH=1030
    WEEK_OF_YEAR=1031
    WEEKDAY_OF_MONTH=1032
    WEEKNUMBER_OF_CALENDAR=1033
    WEEKNUMBER_OF_MONTH=1034
    WEEKNUMBER_OF_QUARTER=1035
    WEEKNUMBER_OF_YEAR=1036
    WHITESPACE=1037
    WINDOWSIZE=1038
    WITHIN=1039
    WORKLOAD=1040
    WRITE=1041
    XML=1042
    XMLAGG=1043
    XMLATTRIBUTES=1044
    XMLCOMMENT=1045
    XMLCONCAT=1046
    XMLDECLARATION=1047
    XMLDOCUMENT=1048
    XMLELEMENT=1049
    XMLFOREST=1050
    XMLNAMESPACES=1051
    XMLPARSE=1052
    XMLPI=1053
    XMLQUERY=1054
    XMLSCHEMA=1055
    XMLSERIALIZE=1056
    XMLTABLE=1057
    XMLTEXT=1058
    XMLTYPE=1059
    XMLVALIDATE=1060
    YEAR_BEGIN=1061
    YEAR_END=1062
    YEAR_OF_CALENDAR=1063
    YEARNUMBER_OF_CALENDAR=1064
    ZLIB=1065
    BUCKET=1066
    COMMITTED=1067
    CREATEXML=1068
    CS_LATIN=1069
    CS_UNICODE=1070
    CS_KANJISJIS=1071
    CS_GRAPHIC=1072
    CSV=1073
    CSVLD=1074
    DATASIZE=1075
    DAYOFMONTH=1076
    DAYS=1077
    DEFINITION=1078
    DELETED=1079
    FAST=1080
    LISTAGG=1081
    PATH=1082
    REGEXP_SPLIT_TO_TABLE=1083
    REVERSE=1084
    SAS=1085
    SQLTABLE=1086
    STRTOK_SPLIT_TO_TABLE=1087
    SYSLIB=1088
    SYSUDTLIB=1089
    TD_SERVER_DB=1090
    TD_SYSFNLIB=1091
    TD_SYSXML=1092
    TIMEDATEWZCONTROL=1093
    TRUST=1094
    TRYCAST=1095
    UDT=1096
    USAGE=1097
    VARIANT=1098
    WEEK=1099
    WIDTH=1100
    XMLPUBLISH=1101
    XMLPUBLISH_STREAM=1102
    XMLSPLIT=1103
    LATIN_TO_UNICODE=1104
    UNICODE_TO_LATIN=1105
    LOCALE_TO_UNICODE=1106
    UNICODE_TO_LOCALE=1107
    ASBSON=1108
    ASBSONTEXT=1109
    COMBINE=1110
    EXISTVALUE=1111
    JSONEXTRACT=1112
    JSONEXTRACTVALUE=1113
    JSONEXTRACTLARGEVALUE=1114
    KEYCOUNT=1115
    METADATA=1116
    STORAGE_SIZE=1117
    CREATESCHEMABASEDXML=1118
    CREATENONSCHEMABASEDXML=1119
    EXISTSNODE=1120
    ISCONTENT=1121
    ISDOCUMENT=1122
    ISSCHEMAVALID=1123
    ISSCHEMAVALIDATED=1124
    XMLEXTRACT=1125
    XMLTRANSFORM=1126
    PROC_ID=1127
    LOCATION=1128
    PAYLOAD=1129
    TRUSTED=1130
    PATHPATTERN=1131
    MANIFEST=1132
    ROWFORMAT=1133
    STOREDAS=1134
    HEADER=1135
    STRIP_EXTERIOR_SPACES=1136
    STRIP_ENCLOSING_CHAR=1137
    RLS=1138
    SINGLE=1139
    MULTIPLE=1140
    JSON_COMPRESS=1141
    JSON_DECOMPRESS=1142
    TS_COMPRESS=1143
    TS_DECOMPRESS=1144
    CONTIGUOUSMAPAMPS=1145
    SPARSEMAPAMPS=1146
    SPARSETABLEAMPS=1147
    UNNEST=1148
    CALCMATRIX=1149
    PHRASE=1150
    CALCTYPE=1151
    OUTPUT=1152
    NULL_HANDLING=1153
    READ_NOS=1154
    BUFFERSIZE=1155
    RETURNTYPE=1156
    SAMPLE_PERC=1157
    FULLSCAN=1158
    TD_UNPIVOT=1159
    VALUE_COLUMNS=1160
    UNPIVOT_COLUMN=1161
    COLUMN_LIST=1162
    COLUMN_ALIAS_LIST=1163
    INCLUDE_NULLS=1164
    WRITE_NOS=1165
    NAMING=1166
    MANIFESTFILE=1167
    MANIFESTONLY=1168
    OVERWRITE=1169
    INCLUDE_ORDERING=1170
    INCLUDE_HASHBY=1171
    MAXOBJECTSIZE=1172
    COMPRESSION=1173
    ARRAY_TO_JSON=1174
    BSON_CHECK=1175
    GEOJSONFROMGEOM=1176
    GEOMFROMGEOJSON=1177
    JSON_CHECK=1178
    JSONGETVALUE=1179
    JSONMETADATA=1180
    NVP2JSON=1181
    TD_JSONSHRED=1182
    JSON_KEYS=1183
    JSON_TABLE=1184
    DEPTH=1185
    QUOTES=1186
    ROWEXPR=1187
    COLEXPR=1188
    RETURNTYPES=1189
    NOCASE=1190
    TRUNCATE=1191
    LINK=1192
    OBJECT_NAME=1193
    UNSIGNED_INTEGER=1194
    HEX_BYTE_LITERAL=1195
    HEX_INTEGER_LITERAL=1196
    FLOAT_LITERAL=1197
    DATE_STRING=1198
    TIME_STRING=1199
    TIMESTAMP_STRING=1200
    PERIOD_STRING=1201
    UNICODE_STRING_LEADING=1202
    CHAR_STRING=1203
    HEX_STRING=1204
    PASSWORD_STRING=1205
    SEMICOLON=1206
    COLON=1207
    COMMA=1208
    DOT_=1209
    AT_SIGN=1210
    CARET=1211
    QUESTION_MARK=1212
    OPEN_PAR=1213
    CLOSE_PAR=1214
    OPEN_SQ_BRACKET=1215
    CLOSE_SQ_BRACKET=1216
    CONCATENATE=1217
    BROKEN_CONCATENATE=1218
    MUL_SIGN=1219
    DIV_SIGN=1220
    PLUS_SIGN=1221
    MINUS_SIGN=1222
    EXPONENTIATION=1223
    EQUALS_SIGN=1224
    NOT_EQUALS_SIGN=1225
    NOT_EQUALS_SIGN_TD=1226
    LT_SIGN=1227
    LE_SIGN=1228
    GT_SIGN=1229
    GE_SIGN=1230
    SINGLE_LINE_COMMENT=1231
    MULTI_LINE_COMMENT=1232
    WS=1233

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TeradataSQLDataTypesParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_data_type)
        try:
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.binary_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 537
                self.datetime_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 538
                self.period_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 539
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Precisionless_char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_variable_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_data_type" ):
                listener.enterVariable_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_data_type" ):
                listener.exitVariable_data_type(self)




    def variable_data_type(self):

        localctx = TeradataSQLDataTypesParser.Variable_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_variable_data_type)
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 544
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 545
                self.binary_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 546
                self.datetime_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 547
                self.period_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 548
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Precisionless_char_data_typeContext,0)


        def lob_as_locator_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Lob_as_locator_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Udt_typeContext,0)


        def TD_ANYTYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_ANYTYPE, 0)

        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.VARIANT_TYPE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_external_function_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_data_type" ):
                listener.enterExternal_function_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_data_type" ):
                listener.exitExternal_function_data_type(self)




    def external_function_data_type(self):

        localctx = TeradataSQLDataTypesParser.External_function_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_external_function_data_type)
        try:
            self.state = 561
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 553
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 554
                self.lob_as_locator_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 555
                self.binary_data_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 556
                self.datetime_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 557
                self.period_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 558
                self.udt_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 559
                self.match(TeradataSQLDataTypesParser.TD_ANYTYPE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 560
                self.match(TeradataSQLDataTypesParser.VARIANT_TYPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.scale = None # Integer_literalContext

        def BYTEINT(self):
            return self.getToken(TeradataSQLDataTypesParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataSQLDataTypesParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLDataTypesParser.INTEGER, 0)

        def INT(self):
            return self.getToken(TeradataSQLDataTypesParser.INT, 0)

        def BIGINT(self):
            return self.getToken(TeradataSQLDataTypesParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataSQLDataTypesParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataSQLDataTypesParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataSQLDataTypesParser.NUMERIC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def FLOAT(self):
            return self.getToken(TeradataSQLDataTypesParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataSQLDataTypesParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(TeradataSQLDataTypesParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TeradataSQLDataTypesParser.PRECISION, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLDataTypesParser.NUMBER, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_numeric_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_data_type" ):
                listener.enterNumeric_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_data_type" ):
                listener.exitNumeric_data_type(self)




    def numeric_data_type(self):

        localctx = TeradataSQLDataTypesParser.Numeric_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_numeric_data_type)
        self._la = 0 # Token type
        try:
            self.state = 605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 563
                self.match(TeradataSQLDataTypesParser.BYTEINT)
                pass
            elif token in [381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self.match(TeradataSQLDataTypesParser.SMALLINT)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 3)
                self.state = 565
                self.match(TeradataSQLDataTypesParser.INTEGER)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 4)
                self.state = 566
                self.match(TeradataSQLDataTypesParser.INT)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 567
                self.match(TeradataSQLDataTypesParser.BIGINT)
                pass
            elif token in [108, 109, 278]:
                self.enterOuterAlt(localctx, 6)
                self.state = 568
                _la = self._input.LA(1)
                if not(_la==108 or _la==109 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 569
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 570
                        localctx.precision = self.integer_literal()


                    self.state = 575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 573
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 574
                        localctx.scale = self.integer_literal()


                    self.state = 577
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


                pass
            elif token in [124, 157, 323]:
                self.enterOuterAlt(localctx, 7)
                self.state = 590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [157]:
                    self.state = 580
                    self.match(TeradataSQLDataTypesParser.FLOAT)
                    self.state = 585
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                    if la_ == 1:
                        self.state = 581
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 582
                        localctx.precision = self.integer_literal()
                        self.state = 583
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


                    pass
                elif token in [323]:
                    self.state = 587
                    self.match(TeradataSQLDataTypesParser.REAL)
                    pass
                elif token in [124]:
                    self.state = 588
                    self.match(TeradataSQLDataTypesParser.DOUBLE)
                    self.state = 589
                    self.match(TeradataSQLDataTypesParser.PRECISION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 8)
                self.state = 592
                self.match(TeradataSQLDataTypesParser.NUMBER)
                self.state = 603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 593
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 596
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1194]:
                        self.state = 594
                        localctx.precision = self.integer_literal()
                        pass
                    elif token in [1219]:
                        self.state = 595
                        self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 598
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 599
                        localctx.scale = self.integer_literal()


                    self.state = 602
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Type_precisionContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_phraseContext,0)


        def GRAPHIC(self):
            return self.getToken(TeradataSQLDataTypesParser.GRAPHIC, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.VARCHAR, 0)

        def VARYING(self):
            return self.getToken(TeradataSQLDataTypesParser.VARYING, 0)

        def LONG(self):
            return self.getToken(TeradataSQLDataTypesParser.LONG, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDataTypesParser.VARGRAPHIC, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOB, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDataTypesParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Max_length_k_m_gContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_data_type" ):
                listener.enterChar_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_data_type" ):
                listener.exitChar_data_type(self)




    def char_data_type(self):

        localctx = TeradataSQLDataTypesParser.Char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                _la = self._input.LA(1)
                if not(_la==52 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 608
                    self.type_precision()


                self.state = 612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 611
                    self.character_set_phrase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.match(TeradataSQLDataTypesParser.GRAPHIC)
                self.state = 616
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 615
                    self.type_precision()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 623
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [464]:
                    self.state = 618
                    self.match(TeradataSQLDataTypesParser.VARCHAR)
                    pass
                elif token in [55]:
                    self.state = 619
                    self.match(TeradataSQLDataTypesParser.CHARACTER)
                    self.state = 620
                    self.match(TeradataSQLDataTypesParser.VARYING)
                    pass
                elif token in [52]:
                    self.state = 621
                    self.match(TeradataSQLDataTypesParser.CHAR)
                    self.state = 622
                    self.match(TeradataSQLDataTypesParser.VARYING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 625
                self.type_precision()
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 626
                    self.character_set_phrase()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 629
                self.match(TeradataSQLDataTypesParser.LONG)
                self.state = 630
                self.match(TeradataSQLDataTypesParser.VARCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 631
                self.match(TeradataSQLDataTypesParser.VARGRAPHIC)
                self.state = 632
                self.type_precision()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 633
                self.match(TeradataSQLDataTypesParser.LONG)
                self.state = 634
                self.match(TeradataSQLDataTypesParser.VARGRAPHIC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 635
                    self.match(TeradataSQLDataTypesParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 636
                    self.match(TeradataSQLDataTypesParser.CHARACTER)
                    self.state = 637
                    self.match(TeradataSQLDataTypesParser.LARGE)
                    self.state = 638
                    self.match(TeradataSQLDataTypesParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 641
                    self.max_length_k_m_g()


                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 644
                    self.latin_unicode_character_set_phrase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precisionless_char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.VARCHAR, 0)

        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_phraseContext,0)


        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDataTypesParser.VARGRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_precisionless_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecisionless_char_data_type" ):
                listener.enterPrecisionless_char_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecisionless_char_data_type" ):
                listener.exitPrecisionless_char_data_type(self)




    def precisionless_char_data_type(self):

        localctx = TeradataSQLDataTypesParser.Precisionless_char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_precisionless_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [464]:
                self.enterOuterAlt(localctx, 1)
                self.state = 649
                self.match(TeradataSQLDataTypesParser.VARCHAR)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 650
                    self.character_set_phrase()


                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.match(TeradataSQLDataTypesParser.VARGRAPHIC)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52 or _la==55:
                    self.state = 654
                    self.character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_as_locator_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCATOR, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOB, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTER, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDataTypesParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDataTypesParser.BINARY, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_lob_as_locator_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_as_locator_data_type" ):
                listener.enterLob_as_locator_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_as_locator_data_type" ):
                listener.exitLob_as_locator_data_type(self)




    def lob_as_locator_data_type(self):

        localctx = TeradataSQLDataTypesParser.Lob_as_locator_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lob_as_locator_data_type)
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 659
                    self.match(TeradataSQLDataTypesParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 660
                    self.match(TeradataSQLDataTypesParser.CHARACTER)
                    self.state = 661
                    self.match(TeradataSQLDataTypesParser.LARGE)
                    self.state = 662
                    self.match(TeradataSQLDataTypesParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 665
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 666
                self.match(TeradataSQLDataTypesParser.LOCATOR)
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 667
                    self.match(TeradataSQLDataTypesParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 668
                    self.match(TeradataSQLDataTypesParser.BINARY)
                    self.state = 669
                    self.match(TeradataSQLDataTypesParser.LARGE)
                    self.state = 670
                    self.match(TeradataSQLDataTypesParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 673
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 674
                self.match(TeradataSQLDataTypesParser.LOCATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(TeradataSQLDataTypesParser.BYTE, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Type_precisionContext,0)


        def VARBYTE(self):
            return self.getToken(TeradataSQLDataTypesParser.VARBYTE, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLDataTypesParser.BINARY, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLDataTypesParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Max_length_k_m_gContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_binary_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_data_type" ):
                listener.enterBinary_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_data_type" ):
                listener.exitBinary_data_type(self)




    def binary_data_type(self):

        localctx = TeradataSQLDataTypesParser.Binary_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_binary_data_type)
        try:
            self.state = 692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.match(TeradataSQLDataTypesParser.BYTE)
                self.state = 679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 678
                    self.type_precision()


                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.match(TeradataSQLDataTypesParser.VARBYTE)
                self.state = 682
                self.type_precision()
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 683
                    self.match(TeradataSQLDataTypesParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 684
                    self.match(TeradataSQLDataTypesParser.BINARY)
                    self.state = 685
                    self.match(TeradataSQLDataTypesParser.LARGE)
                    self.state = 686
                    self.match(TeradataSQLDataTypesParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 690
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 689
                    self.max_length_k_m_g()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datetime_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATE, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMESTAMP, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_period_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_datetime_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_type" ):
                listener.enterDatetime_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_type" ):
                listener.exitDatetime_type(self)




    def datetime_type(self):

        localctx = TeradataSQLDataTypesParser.Datetime_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_datetime_type)
        try:
            self.state = 711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.match(TeradataSQLDataTypesParser.DATE)
                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.match(TeradataSQLDataTypesParser.TIME)
                self.state = 697
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 696
                    self.type_precision()


                self.state = 700
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 699
                    self.with_time_zone()


                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 3)
                self.state = 702
                self.match(TeradataSQLDataTypesParser.TIMESTAMP)
                self.state = 704
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 703
                    self.type_precision()


                self.state = 707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 706
                    self.with_time_zone()


                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 4)
                self.state = 709
                self.match(TeradataSQLDataTypesParser.INTERVAL)
                self.state = 710
                self.interval_period_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDataTypesParser.PERIOD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_period_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_type" ):
                listener.enterPeriod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_type" ):
                listener.exitPeriod_type(self)




    def period_type(self):

        localctx = TeradataSQLDataTypesParser.Period_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_period_type)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.match(TeradataSQLDataTypesParser.PERIOD)
                self.state = 714
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 715
                self.match(TeradataSQLDataTypesParser.DATE)
                self.state = 716
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.match(TeradataSQLDataTypesParser.PERIOD)
                self.state = 718
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 719
                self.match(TeradataSQLDataTypesParser.TIME)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 720
                    self.type_precision()


                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 723
                    self.with_time_zone()


                self.state = 726
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 727
                self.match(TeradataSQLDataTypesParser.PERIOD)
                self.state = 728
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 729
                self.match(TeradataSQLDataTypesParser.TIMESTAMP)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 730
                    self.type_precision()


                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 733
                    self.with_time_zone()


                self.state = 736
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TeradataSQLDataTypesParser.XML, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTYPE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SysudtlibContext,0)


        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Max_length_k_m_gContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Inline_lengthContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON, 0)

        def max_length_k_m(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Max_length_k_mContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Latin_unicode_character_set_phraseContext,0)


        def json_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Json_storage_formatContext,0)


        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDataTypesParser.ST_GEOMETRY, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDataTypesParser.DATASET, 0)

        def dataset_storage_format_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Dataset_storage_format_clauseContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_udt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_type" ):
                listener.enterUdt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_type" ):
                listener.exitUdt_type(self)




    def udt_type(self):

        localctx = TeradataSQLDataTypesParser.Udt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_udt_type)
        self._la = 0 # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 739
                    self.sysudtlib()


                self.state = 742
                _la = self._input.LA(1)
                if not(_la==1042 or _la==1059):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 743
                    self.max_length_k_m_g()


                self.state = 747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.inline_length()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 749
                    self.sysudtlib()


                self.state = 752
                self.match(TeradataSQLDataTypesParser.JSON)
                self.state = 754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 753
                    self.max_length_k_m()


                self.state = 757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 756
                    self.inline_length()


                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 759
                    self.latin_unicode_character_set_phrase()

                elif la_ == 2:
                    self.state = 760
                    self.json_storage_format()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 763
                    self.sysudtlib()


                self.state = 766
                self.match(TeradataSQLDataTypesParser.ST_GEOMETRY)
                self.state = 768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 767
                    self.max_length_k_m()


                self.state = 771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 770
                    self.inline_length()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 773
                    self.sysudtlib()


                self.state = 776
                self.match(TeradataSQLDataTypesParser.DATASET)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 777
                    self.max_length_k_m()


                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==709:
                    self.state = 780
                    self.inline_length()


                self.state = 783
                self.dataset_storage_format_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 784
                    self.sysudtlib()


                self.state = 787
                self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Format_phraseContext,0)


        def column_naming_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_naming_phraseContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_time_zoneContext,0)


        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.At_timezoneContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Default_value_control_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_data_type_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_attribute" ):
                listener.enterData_type_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_attribute" ):
                listener.exitData_type_attribute(self)




    def data_type_attribute(self):

        localctx = TeradataSQLDataTypesParser.Data_type_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_data_type_attribute)
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 790
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 793
                self.column_naming_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 794
                self.with_time_zone()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 795
                self.at_timezone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 796
                self.character_set_phrase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 797
                self.default_value_control_phrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_control_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDataTypesParser.DEFAULT, 0)

        def default_value(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Default_valueContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_default_value_control_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_control_phrase" ):
                listener.enterDefault_value_control_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_control_phrase" ):
                listener.exitDefault_value_control_phrase(self)




    def default_value_control_phrase(self):

        localctx = TeradataSQLDataTypesParser.Default_value_control_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_default_value_control_phrase)
        self._la = 0 # Token type
        try:
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 800
                    self.match(TeradataSQLDataTypesParser.NOT)


                self.state = 803
                self.match(TeradataSQLDataTypesParser.NULL)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.match(TeradataSQLDataTypesParser.DEFAULT)
                self.state = 805
                self.default_value()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 3)
                self.state = 806
                self.match(TeradataSQLDataTypesParser.WITH)
                self.state = 807
                self.match(TeradataSQLDataTypesParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Float_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.PLUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LiteralContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Builtin_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = TeradataSQLDataTypesParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_default_value)
        self._la = 0 # Token type
        try:
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 811
                self.float_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 813
                self.integer_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 814
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 815
                self.builtin_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_naming_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_column_naming_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_naming_phrase" ):
                listener.enterColumn_naming_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_naming_phrase" ):
                listener.exitColumn_naming_phrase(self)




    def column_naming_phrase(self):

        localctx = TeradataSQLDataTypesParser.Column_naming_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_column_naming_phrase)
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [262]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysudtlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDataTypesParser.SYSUDTLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_sysudtlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysudtlib" ):
                listener.enterSysudtlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysudtlib" ):
                listener.exitSysudtlib(self)




    def sysudtlib(self):

        localctx = TeradataSQLDataTypesParser.SysudtlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_sysudtlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(TeradataSQLDataTypesParser.SYSUDTLIB)
            self.state = 823
            self.match(TeradataSQLDataTypesParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_period_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR, 0)

        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Type_precisionContext,i)


        def TO(self):
            return self.getToken(TeradataSQLDataTypesParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDataTypesParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDataTypesParser.SECOND, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_interval_period_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_period_spec" ):
                listener.enterInterval_period_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_period_spec" ):
                listener.exitInterval_period_spec(self)




    def interval_period_spec(self):

        localctx = TeradataSQLDataTypesParser.Interval_period_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_interval_period_spec)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [478]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.match(TeradataSQLDataTypesParser.YEAR)
                self.state = 827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 826
                    self.type_precision()


                self.state = 831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 829
                    self.match(TeradataSQLDataTypesParser.TO)
                    self.state = 830
                    self.match(TeradataSQLDataTypesParser.MONTH)


                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(TeradataSQLDataTypesParser.MONTH)
                self.state = 835
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 834
                    self.type_precision()


                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 837
                self.match(TeradataSQLDataTypesParser.DAY)
                self.state = 839
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 838
                    self.type_precision()


                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 841
                    self.match(TeradataSQLDataTypesParser.TO)
                    self.state = 842
                    self.match(TeradataSQLDataTypesParser.HOUR)

                elif la_ == 2:
                    self.state = 843
                    self.match(TeradataSQLDataTypesParser.TO)
                    self.state = 844
                    self.match(TeradataSQLDataTypesParser.MINUTE)

                elif la_ == 3:
                    self.state = 845
                    self.match(TeradataSQLDataTypesParser.TO)
                    self.state = 846
                    self.match(TeradataSQLDataTypesParser.SECOND)
                    self.state = 848
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        self.state = 847
                        self.type_precision()




                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 4)
                self.state = 852
                self.match(TeradataSQLDataTypesParser.HOUR)
                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 853
                    self.type_precision()


                self.state = 863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(TeradataSQLDataTypesParser.TO)
                    self.state = 857
                    self.match(TeradataSQLDataTypesParser.MINUTE)

                elif la_ == 2:
                    self.state = 858
                    self.match(TeradataSQLDataTypesParser.TO)
                    self.state = 859
                    self.match(TeradataSQLDataTypesParser.SECOND)
                    self.state = 861
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        self.state = 860
                        self.type_precision()




                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 865
                self.match(TeradataSQLDataTypesParser.MINUTE)
                self.state = 867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 866
                    self.type_precision()


                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                if la_ == 1:
                    self.state = 869
                    self.match(TeradataSQLDataTypesParser.TO)
                    self.state = 870
                    self.match(TeradataSQLDataTypesParser.SECOND)
                    self.state = 872
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                    if la_ == 1:
                        self.state = 871
                        self.type_precision()




                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 6)
                self.state = 876
                self.match(TeradataSQLDataTypesParser.SECOND)
                self.state = 885
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 877
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 878
                    localctx.precision = self.integer_literal()
                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 879
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 880
                        localctx.fractional_precision = self.integer_literal()


                    self.state = 883
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_precisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_type_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_precision" ):
                listener.enterType_precision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_precision" ):
                listener.exitType_precision(self)




    def type_precision(self):

        localctx = TeradataSQLDataTypesParser.Type_precisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_type_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 890
            localctx.precision = self.integer_literal()
            self.state = 891
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_m_gContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDataTypesParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDataTypesParser.M, 0)

        def G(self):
            return self.getToken(TeradataSQLDataTypesParser.G, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_max_length_k_m_g

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m_g" ):
                listener.enterMax_length_k_m_g(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m_g" ):
                listener.exitMax_length_k_m_g(self)




    def max_length_k_m_g(self):

        localctx = TeradataSQLDataTypesParser.Max_length_k_m_gContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_max_length_k_m_g)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 894
            localctx.max_length = self.integer_literal()
            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==681 or _la==723 or _la==752:
                self.state = 895
                _la = self._input.LA(1)
                if not(_la==681 or _la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 898
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_mContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLDataTypesParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLDataTypesParser.M, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_max_length_k_m

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m" ):
                listener.enterMax_length_k_m(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m" ):
                listener.exitMax_length_k_m(self)




    def max_length_k_m(self):

        localctx = TeradataSQLDataTypesParser.Max_length_k_mContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_max_length_k_m)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 901
            localctx.max_length = self.integer_literal()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==723 or _la==752:
                self.state = 902
                _la = self._input.LA(1)
                if not(_la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 905
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDataTypesParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE, 0)

        def GRAPHIC(self):
            return self.getToken(TeradataSQLDataTypesParser.GRAPHIC, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDataTypesParser.KANJISJIS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_phrase" ):
                listener.enterCharacter_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_phrase" ):
                listener.exitCharacter_set_phrase(self)




    def character_set_phrase(self):

        localctx = TeradataSQLDataTypesParser.Character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 908
            self.match(TeradataSQLDataTypesParser.SET)
            self.state = 909
            _la = self._input.LA(1)
            if not(_la==173 or _la==725 or _la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uppercase_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPPERCASE(self):
            return self.getToken(TeradataSQLDataTypesParser.UPPERCASE, 0)

        def UC(self):
            return self.getToken(TeradataSQLDataTypesParser.UC, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_uppercase_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUppercase_phrase" ):
                listener.enterUppercase_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUppercase_phrase" ):
                listener.exitUppercase_phrase(self)




    def uppercase_phrase(self):

        localctx = TeradataSQLDataTypesParser.Uppercase_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_uppercase_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            _la = self._input.LA(1)
            if not(_la==438 or _la==455):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Casespecific_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.not_ = None # Token

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLDataTypesParser.CASESPECIFIC, 0)

        def CS(self):
            return self.getToken(TeradataSQLDataTypesParser.CS, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)

        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_casespecific_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasespecific_phrase" ):
                listener.enterCasespecific_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasespecific_phrase" ):
                listener.exitCasespecific_phrase(self)




    def casespecific_phrase(self):

        localctx = TeradataSQLDataTypesParser.Casespecific_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_casespecific_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==1211:
                self.state = 913
                localctx.not_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    localctx.not_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 916
            _la = self._input.LA(1)
            if not(_la==49 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_ = None # Char_string_literalContext
            self.date_format = None # Token
            self.time_format = None # Token

        def FORMAT(self):
            return self.getToken(TeradataSQLDataTypesParser.FORMAT, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def DATE_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.DATE_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_format_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_phrase" ):
                listener.enterFormat_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_phrase" ):
                listener.exitFormat_phrase(self)




    def format_phrase(self):

        localctx = TeradataSQLDataTypesParser.Format_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_format_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(TeradataSQLDataTypesParser.FORMAT)
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 919
                localctx.format_ = self.char_string_literal()
                pass
            elif token in [1198]:
                self.state = 920
                localctx.date_format = self.match(TeradataSQLDataTypesParser.DATE_STRING)
                pass
            elif token in [1199]:
                self.state = 921
                localctx.time_format = self.match(TeradataSQLDataTypesParser.TIME_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def TITLE(self):
            return self.getToken(TeradataSQLDataTypesParser.TITLE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitle_phrase" ):
                listener.enterTitle_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitle_phrase" ):
                listener.exitTitle_phrase(self)




    def title_phrase(self):

        localctx = TeradataSQLDataTypesParser.Title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(TeradataSQLDataTypesParser.TITLE)
            self.state = 925
            localctx.title = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMED(self):
            return self.getToken(TeradataSQLDataTypesParser.NAMED, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_named_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_phrase" ):
                listener.enterNamed_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_phrase" ):
                listener.exitNamed_phrase(self)




    def named_phrase(self):

        localctx = TeradataSQLDataTypesParser.Named_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_named_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(TeradataSQLDataTypesParser.NAMED)
            self.state = 928
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Latin_unicode_character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLDataTypesParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_latin_unicode_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLatin_unicode_character_set_phrase" ):
                listener.enterLatin_unicode_character_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLatin_unicode_character_set_phrase" ):
                listener.exitLatin_unicode_character_set_phrase(self)




    def latin_unicode_character_set_phrase(self):

        localctx = TeradataSQLDataTypesParser.Latin_unicode_character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_latin_unicode_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 931
            self.match(TeradataSQLDataTypesParser.SET)
            self.state = 932
            _la = self._input.LA(1)
            if not(_la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_lengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.length = None # Integer_literalContext

        def INLINE(self):
            return self.getToken(TeradataSQLDataTypesParser.INLINE, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.LENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_inline_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_length" ):
                listener.enterInline_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_length" ):
                listener.exitInline_length(self)




    def inline_length(self):

        localctx = TeradataSQLDataTypesParser.Inline_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_inline_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(TeradataSQLDataTypesParser.INLINE)
            self.state = 935
            self.match(TeradataSQLDataTypesParser.LENGTH)
            self.state = 936
            localctx.length = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDataTypesParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDataTypesParser.FORMAT, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDataTypesParser.BSON, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDataTypesParser.UBJSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_json_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_storage_format" ):
                listener.enterJson_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_storage_format" ):
                listener.exitJson_storage_format(self)




    def json_storage_format(self):

        localctx = TeradataSQLDataTypesParser.Json_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_json_storage_format)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(TeradataSQLDataTypesParser.STORAGE)
            self.state = 939
            self.match(TeradataSQLDataTypesParser.FORMAT)
            self.state = 940
            _la = self._input.LA(1)
            if not(_la==556 or _la==1010):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLDataTypesParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLDataTypesParser.FORMAT, 0)

        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Dataset_storage_formatContext,0)


        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_schemaContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_dataset_storage_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format_clause" ):
                listener.enterDataset_storage_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format_clause" ):
                listener.exitDataset_storage_format_clause(self)




    def dataset_storage_format_clause(self):

        localctx = TeradataSQLDataTypesParser.Dataset_storage_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dataset_storage_format_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(TeradataSQLDataTypesParser.STORAGE)
            self.state = 943
            self.match(TeradataSQLDataTypesParser.FORMAT)
            self.state = 944
            self.dataset_storage_format()
            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 945
                self.with_schema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVRO(self):
            return self.getToken(TeradataSQLDataTypesParser.AVRO, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDataTypesParser.CSV, 0)

        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_dataset_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format" ):
                listener.enterDataset_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format" ):
                listener.exitDataset_storage_format(self)




    def dataset_storage_format(self):

        localctx = TeradataSQLDataTypesParser.Dataset_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dataset_storage_format)
        try:
            self.state = 953
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [545]:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.match(TeradataSQLDataTypesParser.AVRO)
                pass
            elif token in [1073]:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self.match(TeradataSQLDataTypesParser.CSV)
                self.state = 951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 950
                    self.latin_unicode_character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Table_nameContext

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDataTypesParser.SCHEMA, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_schema" ):
                listener.enterWith_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_schema" ):
                listener.exitWith_schema(self)




    def with_schema(self):

        localctx = TeradataSQLDataTypesParser.With_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_with_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 956
            self.match(TeradataSQLDataTypesParser.SCHEMA)
            self.state = 957
            localctx.schema_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDataTypesParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_time_zone" ):
                listener.enterWith_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_time_zone" ):
                listener.exitWith_time_zone(self)




    def with_time_zone(self):

        localctx = TeradataSQLDataTypesParser.With_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_with_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 960
            self.match(TeradataSQLDataTypesParser.TIME)
            self.state = 961
            self.match(TeradataSQLDataTypesParser.ZONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hex_byte_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Hex_byte_literalContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Hex_char_string_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def hex_integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Hex_integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Float_literalContext,0)


        def date_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Date_literalContext,0)


        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Time_literalContext,0)


        def timestamp_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Timestamp_literalContext,0)


        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_literalContext,0)


        def period_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Period_literalContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = TeradataSQLDataTypesParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_literal)
        try:
            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.hex_byte_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.unicode_char_string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 966
                self.hex_char_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 967
                self.integer_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 968
                self.hex_integer_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 969
                self.float_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 970
                self.date_literal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 971
                self.time_literal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 972
                self.timestamp_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 973
                self.interval_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 974
                self.period_literal()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 975
                self.match(TeradataSQLDataTypesParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_byte_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_BYTE_LITERAL(self):
            return self.getToken(TeradataSQLDataTypesParser.HEX_BYTE_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_hex_byte_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_byte_literal" ):
                listener.enterHex_byte_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_byte_literal" ):
                listener.exitHex_byte_literal(self)




    def hex_byte_literal(self):

        localctx = TeradataSQLDataTypesParser.Hex_byte_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_hex_byte_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(TeradataSQLDataTypesParser.HEX_BYTE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_prefixContext,0)


        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CHAR_STRING, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_string_literal" ):
                listener.enterChar_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_string_literal" ):
                listener.exitChar_string_literal(self)




    def char_string_literal(self):

        localctx = TeradataSQLDataTypesParser.Char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 980
                self.character_set_prefix()


            self.state = 984 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 983
                    self.match(TeradataSQLDataTypesParser.CHAR_STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 986 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_STRING_LEADING(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE_STRING_LEADING, 0)

        def UESCAPE(self):
            return self.getToken(TeradataSQLDataTypesParser.UESCAPE, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CHAR_STRING, i)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unicode_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_char_string_literal" ):
                listener.enterUnicode_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_char_string_literal" ):
                listener.exitUnicode_char_string_literal(self)




    def unicode_char_string_literal(self):

        localctx = TeradataSQLDataTypesParser.Unicode_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unicode_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 988
                self.character_set_prefix()


            self.state = 991
            self.match(TeradataSQLDataTypesParser.UNICODE_STRING_LEADING)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1203:
                self.state = 992
                self.match(TeradataSQLDataTypesParser.CHAR_STRING)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 998
            self.match(TeradataSQLDataTypesParser.UESCAPE)
            self.state = 999
            self.match(TeradataSQLDataTypesParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.HEX_STRING, 0)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_hex_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_char_string_literal" ):
                listener.enterHex_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_char_string_literal" ):
                listener.exitHex_char_string_literal(self)




    def hex_char_string_literal(self):

        localctx = TeradataSQLDataTypesParser.Hex_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_hex_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 1001
                self.character_set_prefix()


            self.state = 1004
            self.match(TeradataSQLDataTypesParser.HEX_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLDataTypesParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = TeradataSQLDataTypesParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(TeradataSQLDataTypesParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(TeradataSQLDataTypesParser.HEX_INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_hex_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_integer_literal" ):
                listener.enterHex_integer_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_integer_literal" ):
                listener.exitHex_integer_literal(self)




    def hex_integer_literal(self):

        localctx = TeradataSQLDataTypesParser.Hex_integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_hex_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(TeradataSQLDataTypesParser.HEX_INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(TeradataSQLDataTypesParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)




    def float_literal(self):

        localctx = TeradataSQLDataTypesParser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(TeradataSQLDataTypesParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_GRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_character_set_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_prefix" ):
                listener.enterCharacter_set_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_prefix" ):
                listener.exitCharacter_set_prefix(self)




    def character_set_prefix(self):

        localctx = TeradataSQLDataTypesParser.Character_set_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_character_set_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            _la = self._input.LA(1)
            if not(((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.DATE_STRING, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_date_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_literal" ):
                listener.enterDate_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_literal" ):
                listener.exitDate_literal(self)




    def date_literal(self):

        localctx = TeradataSQLDataTypesParser.Date_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_date_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 1014
                self.match(TeradataSQLDataTypesParser.DATE)


            self.state = 1017
            self.match(TeradataSQLDataTypesParser.DATE_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME_STRING, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_time_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_literal" ):
                listener.enterTime_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_literal" ):
                listener.exitTime_literal(self)




    def time_literal(self):

        localctx = TeradataSQLDataTypesParser.Time_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_time_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 1019
                self.match(TeradataSQLDataTypesParser.TIME)


            self.state = 1022
            self.match(TeradataSQLDataTypesParser.TIME_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timestamp_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMESTAMP_STRING, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_timestamp_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestamp_literal" ):
                listener.enterTimestamp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestamp_literal" ):
                listener.exitTimestamp_literal(self)




    def timestamp_literal(self):

        localctx = TeradataSQLDataTypesParser.Timestamp_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_timestamp_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==422:
                self.state = 1024
                self.match(TeradataSQLDataTypesParser.TIMESTAMP)


            self.state = 1027
            self.match(TeradataSQLDataTypesParser.TIMESTAMP_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.INTERVAL, 0)

        def interval_qualifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_qualifierContext,0)


        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME_STRING, 0)

        def DATE_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.DATE_STRING, 0)

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMESTAMP_STRING, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_interval_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_literal" ):
                listener.enterInterval_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_literal" ):
                listener.exitInterval_literal(self)




    def interval_literal(self):

        localctx = TeradataSQLDataTypesParser.Interval_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_interval_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(TeradataSQLDataTypesParser.INTERVAL)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 1030
                self.match(TeradataSQLDataTypesParser.MINUS_SIGN)


            self.state = 1033
            _la = self._input.LA(1)
            if not(((((_la - 1198)) & ~0x3f) == 0 and ((1 << (_la - 1198)) & 39) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1034
            self.interval_qualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR, 0)

        def TO(self):
            return self.getToken(TeradataSQLDataTypesParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDataTypesParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDataTypesParser.SECOND, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_interval_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_qualifier" ):
                listener.enterInterval_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_qualifier" ):
                listener.exitInterval_qualifier(self)




    def interval_qualifier(self):

        localctx = TeradataSQLDataTypesParser.Interval_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_interval_qualifier)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.match(TeradataSQLDataTypesParser.YEAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1037
                self.match(TeradataSQLDataTypesParser.YEAR)
                self.state = 1038
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 1039
                self.match(TeradataSQLDataTypesParser.MONTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(TeradataSQLDataTypesParser.MONTH)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1041
                self.match(TeradataSQLDataTypesParser.DAY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1042
                self.match(TeradataSQLDataTypesParser.DAY)
                self.state = 1043
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 1044
                self.match(TeradataSQLDataTypesParser.HOUR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1045
                self.match(TeradataSQLDataTypesParser.DAY)
                self.state = 1046
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 1047
                self.match(TeradataSQLDataTypesParser.MINUTE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1048
                self.match(TeradataSQLDataTypesParser.DAY)
                self.state = 1049
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 1050
                self.match(TeradataSQLDataTypesParser.SECOND)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1051
                self.match(TeradataSQLDataTypesParser.HOUR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1052
                self.match(TeradataSQLDataTypesParser.HOUR)
                self.state = 1053
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 1054
                self.match(TeradataSQLDataTypesParser.MINUTE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1055
                self.match(TeradataSQLDataTypesParser.HOUR)
                self.state = 1056
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 1057
                self.match(TeradataSQLDataTypesParser.SECOND)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1058
                self.match(TeradataSQLDataTypesParser.MINUTE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1059
                self.match(TeradataSQLDataTypesParser.MINUTE)
                self.state = 1060
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 1061
                self.match(TeradataSQLDataTypesParser.SECOND)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1062
                self.match(TeradataSQLDataTypesParser.SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLDataTypesParser.PERIOD, 0)

        def PERIOD_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.PERIOD_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_period_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_literal" ):
                listener.enterPeriod_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_literal" ):
                listener.exitPeriod_literal(self)




    def period_literal(self):

        localctx = TeradataSQLDataTypesParser.Period_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_period_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(TeradataSQLDataTypesParser.PERIOD)
            self.state = 1066
            self.match(TeradataSQLDataTypesParser.PERIOD_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unqualified_table_name = None # Unqualified_nameContext

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Database_nameContext,0)


        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.DOT_)
            else:
                return self.getToken(TeradataSQLDataTypesParser.DOT_, i)

        def unqualified_column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_column_nameContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = TeradataSQLDataTypesParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_column_name)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.database_name()
                self.state = 1069
                self.match(TeradataSQLDataTypesParser.DOT_)
                self.state = 1070
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 1071
                self.match(TeradataSQLDataTypesParser.DOT_)
                self.state = 1072
                self.unqualified_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 1075
                self.match(TeradataSQLDataTypesParser.DOT_)
                self.state = 1076
                self.unqualified_column_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1078
                self.unqualified_column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def SAMPLEID(self):
            return self.getToken(TeradataSQLDataTypesParser.SAMPLEID, 0)

        def ROWID(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWID, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unqualified_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_column_name" ):
                listener.enterUnqualified_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_column_name" ):
                listener.exitUnqualified_column_name(self)




    def unqualified_column_name(self):

        localctx = TeradataSQLDataTypesParser.Unqualified_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_unqualified_column_name)
        try:
            self.state = 1085
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.nonreserved_word()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.match(TeradataSQLDataTypesParser.SAMPLEID)
                pass
            elif token in [363]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1084
                self.match(TeradataSQLDataTypesParser.ROWID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)




    def unqualified_name(self):

        localctx = TeradataSQLDataTypesParser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_unqualified_name)
        try:
            self.state = 1089
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1087
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name" ):
                listener.enterObject_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name" ):
                listener.exitObject_name(self)




    def object_name(self):

        localctx = TeradataSQLDataTypesParser.Object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1091
                self.database_name()
                self.state = 1092
                self.match(TeradataSQLDataTypesParser.DOT_)


            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1096
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1097
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TeradataSQLDataTypesParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1100
                self.database_name()
                self.state = 1101
                self.match(TeradataSQLDataTypesParser.DOT_)


            self.state = 1107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1105
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1106
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = TeradataSQLDataTypesParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_procedure_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1109
                self.database_name()
                self.state = 1110
                self.match(TeradataSQLDataTypesParser.DOT_)


            self.state = 1116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1114
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1115
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = TeradataSQLDataTypesParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1118
                self.database_name()
                self.state = 1119
                self.match(TeradataSQLDataTypesParser.DOT_)


            self.state = 1125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1123
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1124
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_macro_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_name" ):
                listener.enterMacro_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_name" ):
                listener.exitMacro_name(self)




    def macro_name(self):

        localctx = TeradataSQLDataTypesParser.Macro_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macro_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.state = 1127
                self.database_name()
                self.state = 1128
                self.match(TeradataSQLDataTypesParser.DOT_)


            self.state = 1134
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 1132
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 1133
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = TeradataSQLDataTypesParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_database_name)
        try:
            self.state = 1138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1137
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_user_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_name" ):
                listener.enterUser_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_name" ):
                listener.exitUser_name(self)




    def user_name(self):

        localctx = TeradataSQLDataTypesParser.User_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_user_name)
        try:
            self.state = 1142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1141
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLDataTypesParser.ADMIN, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = TeradataSQLDataTypesParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_role_name)
        try:
            self.state = 1147
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.match(TeradataSQLDataTypesParser.ADMIN)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1146
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_profile_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_name" ):
                listener.enterProfile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_name" ):
                listener.exitProfile_name(self)




    def profile_name(self):

        localctx = TeradataSQLDataTypesParser.Profile_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_profile_name)
        try:
            self.state = 1151
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1149
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_name" ):
                listener.enterAlias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_name" ):
                listener.exitAlias_name(self)




    def alias_name(self):

        localctx = TeradataSQLDataTypesParser.Alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alias_name)
        try:
            self.state = 1155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = TeradataSQLDataTypesParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_variable_name)
        try:
            self.state = 1159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = TeradataSQLDataTypesParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameter_name)
        try:
            self.state = 1163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = TeradataSQLDataTypesParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_label_name)
        try:
            self.state = 1167
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1165
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_condition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_name" ):
                listener.enterCondition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_name" ):
                listener.exitCondition_name(self)




    def condition_name(self):

        localctx = TeradataSQLDataTypesParser.Condition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_condition_name)
        try:
            self.state = 1171
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1169
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TeradataSQLDataTypesParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_cursor_name)
        try:
            self.state = 1175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_statement_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_name" ):
                listener.enterStatement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_name" ):
                listener.exitStatement_name(self)




    def statement_name(self):

        localctx = TeradataSQLDataTypesParser.Statement_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_statement_name)
        try:
            self.state = 1179
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1177
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1178
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statistics_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_statistics_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatistics_name" ):
                listener.enterStatistics_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatistics_name" ):
                listener.exitStatistics_name(self)




    def statistics_name(self):

        localctx = TeradataSQLDataTypesParser.Statistics_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_statistics_name)
        try:
            self.state = 1183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_udt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_name" ):
                listener.enterUdt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_name" ):
                listener.exitUdt_name(self)




    def udt_name(self):

        localctx = TeradataSQLDataTypesParser.Udt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_udt_name)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1185
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1186
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = TeradataSQLDataTypesParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_attribute_name)
        try:
            self.state = 1191
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1189
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1190
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)




    def method_name(self):

        localctx = TeradataSQLDataTypesParser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_method_name)
        try:
            self.state = 1195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.match(TeradataSQLDataTypesParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anchor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_SECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_MINUTE, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_HOUR, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK_END, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH_END, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTER_END, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR_END, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.MONDAY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.TUESDAY, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.WEDNESDAY, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.THURSDAY, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.FRIDAY, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.SATURDAY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.SUNDAY, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_anchor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnchor_name" ):
                listener.enterAnchor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnchor_name" ):
                listener.exitAnchor_name(self)




    def anchor_name(self):

        localctx = TeradataSQLDataTypesParser.Anchor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_anchor_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            _la = self._input.LA(1)
            if not(_la==106 or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & 15) != 0) or _la==678 or ((((_la - 774)) & ~0x3f) == 0 and ((1 << (_la - 774)) & 49) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 2199023255555) != 0) or ((((_la - 949)) & ~0x3f) == 0 and ((1 << (_la - 949)) & 1152921573326323713) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & 103079215111) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreserved_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSIONS(self):
            return self.getToken(TeradataSQLDataTypesParser.ABORTSESSIONS, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ABSENT, 0)

        def ACCESS(self):
            return self.getToken(TeradataSQLDataTypesParser.ACCESS, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDataTypesParser.ACCORDING, 0)

        def ACCUMULATE(self):
            return self.getToken(TeradataSQLDataTypesParser.ACCUMULATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLDataTypesParser.AG, 0)

        def AGGGEOMINTERSECTION(self):
            return self.getToken(TeradataSQLDataTypesParser.AGGGEOMINTERSECTION, 0)

        def AGGGEOMUNION(self):
            return self.getToken(TeradataSQLDataTypesParser.AGGGEOMUNION, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLDataTypesParser.ALLDBQL, 0)

        def ALLOCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.ALLOCATE, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDataTypesParser.ALLOCATION, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLDataTypesParser.ALLOW, 0)

        def ALLPARAMS(self):
            return self.getToken(TeradataSQLDataTypesParser.ALLPARAMS, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLDataTypesParser.ALLTDWM, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLDataTypesParser.ALWAYS, 0)

        def AMPCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.AMPCOUNT, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLDataTypesParser.ANALYSIS, 0)

        def ANCHOR(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_HOUR, 0)

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_MINUTE, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR_SECOND, 0)

        def APPLNAME(self):
            return self.getToken(TeradataSQLDataTypesParser.APPLNAME, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_ADD, 0)

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_AGG, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_AVG, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_COMPARE, 0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_CONCAT, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_DIV, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_EQ, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GE, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GET, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_LE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_LT, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MIN, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MOD, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MUL, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_NE, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_SUB, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_SUM, 0)

        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_UPDATE_STRIDE, 0)

        def ASCII(self):
            return self.getToken(TeradataSQLDataTypesParser.ASCII, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ASSIGNMENT, 0)

        def ATTR(self):
            return self.getToken(TeradataSQLDataTypesParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLDataTypesParser.ATTRIBUTES, 0)

        def ATTRIBUTION(self):
            return self.getToken(TeradataSQLDataTypesParser.ATTRIBUTION, 0)

        def ATTRS(self):
            return self.getToken(TeradataSQLDataTypesParser.ATTRS, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDataTypesParser.AUTH, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLDataTypesParser.AUTO, 0)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLDataTypesParser.AUTOTEMP, 0)

        def AVRO(self):
            return self.getToken(TeradataSQLDataTypesParser.AVRO, 0)

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.BIT_LENGTH, 0)

        def BITAND(self):
            return self.getToken(TeradataSQLDataTypesParser.BITAND, 0)

        def BITNOT(self):
            return self.getToken(TeradataSQLDataTypesParser.BITNOT, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDataTypesParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDataTypesParser.BITXOR, 0)

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLDataTypesParser.BLOCKCOMPRESSION, 0)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLDataTypesParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLDataTypesParser.BLOCKCOMPRESSIONLEVEL, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDataTypesParser.BOM, 0)

        def BOTTOM(self):
            return self.getToken(TeradataSQLDataTypesParser.BOTTOM, 0)

        def BSON(self):
            return self.getToken(TeradataSQLDataTypesParser.BSON, 0)

        def C(self):
            return self.getToken(TeradataSQLDataTypesParser.C, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CALENDAR, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLDataTypesParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TeradataSQLDataTypesParser.CALLER, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDataTypesParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDataTypesParser.CAMSET_L, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLDataTypesParser.CAPTURE, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDataTypesParser.CARDINALITY, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDataTypesParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDataTypesParser.CEILING, 0)

        def CHANGERATE(self):
            return self.getToken(TeradataSQLDataTypesParser.CHANGERATE, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTERISTICS, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARSET, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARSET_COLL, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDataTypesParser.CHECKSUM, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDataTypesParser.CHR, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.CLASS_ORIGIN, 0)

        def CLICKLAG(self):
            return self.getToken(TeradataSQLDataTypesParser.CLICKLAG, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLDataTypesParser.CLIENT, 0)

        def CNT(self):
            return self.getToken(TeradataSQLDataTypesParser.CNT, 0)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.COLOCATE, 0)

        def COLUMNMETA(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMNMETA, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMNS, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMNSPERJOININDEX, 0)

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMAND_FUNCTION_CODE, 0)

        def COMPARISON(self):
            return self.getToken(TeradataSQLDataTypesParser.COMPARISON, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLDataTypesParser.COMPILE, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDataTypesParser.CONCAT, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLDataTypesParser.CONCURRENT, 0)

        def CONDITION(self):
            return self.getToken(TeradataSQLDataTypesParser.CONDITION, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLDataTypesParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLDataTypesParser.CONDITION_NUMBER, 0)

        def CONTAINED(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTAINED, 0)

        def CONTAINEDTOKEN(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTAINEDTOKEN, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTENT, 0)

        def CONTIGUOUS(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTIGUOUS, 0)

        def COST(self):
            return self.getToken(TeradataSQLDataTypesParser.COST, 0)

        def COSTS(self):
            return self.getToken(TeradataSQLDataTypesParser.COSTS, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDataTypesParser.COUNTSET, 0)

        def CPP(self):
            return self.getToken(TeradataSQLDataTypesParser.CPP, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLDataTypesParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLDataTypesParser.CPUTIMENORM, 0)

        def CREATEDATASET(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATEDATASET, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATOR, 0)

        def CUME_DIST(self):
            return self.getToken(TeradataSQLDataTypesParser.CUME_DIST, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDataTypesParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDataTypesParser.CURTIME, 0)

        def DATA(self):
            return self.getToken(TeradataSQLDataTypesParser.DATA, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLDataTypesParser.DATASET, 0)

        def DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY_OF_CALENDAR, 0)

        def DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY_OF_MONTH, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY_OF_WEEK, 0)

        def DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY_OF_YEAR, 0)

        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYOCCURRENCE_OF_MONTH, 0)

        def DBA(self):
            return self.getToken(TeradataSQLDataTypesParser.DBA, 0)

        def DBC(self):
            return self.getToken(TeradataSQLDataTypesParser.DBC, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLDataTypesParser.DEBUG, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDataTypesParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDataTypesParser.DECAMSET_L, 0)

        def DECODE(self):
            return self.getToken(TeradataSQLDataTypesParser.DECODE, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.DECOMPRESS, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLDataTypesParser.DEFINER, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDataTypesParser.DELIMITER, 0)

        def DELTA_T(self):
            return self.getToken(TeradataSQLDataTypesParser.DELTA_T, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLDataTypesParser.DEMOGRAPHICS, 0)

        def DENIALS(self):
            return self.getToken(TeradataSQLDataTypesParser.DENIALS, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDataTypesParser.DENSE, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDataTypesParser.DENSE_RANK, 0)

        def DESCRIBE(self):
            return self.getToken(TeradataSQLDataTypesParser.DESCRIBE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLDataTypesParser.DETAILED, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLDataTypesParser.DIAGNOSTICS, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLDataTypesParser.DIGITS, 0)

        def DIMENSION(self):
            return self.getToken(TeradataSQLDataTypesParser.DIMENSION, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.DOCUMENT, 0)

        def DOT(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT, 0)

        def DOWN(self):
            return self.getToken(TeradataSQLDataTypesParser.DOWN, 0)

        def DR(self):
            return self.getToken(TeradataSQLDataTypesParser.DR, 0)

        def DUPCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.DUPCOUNT, 0)

        def DUPCOUNTCUM(self):
            return self.getToken(TeradataSQLDataTypesParser.DUPCOUNTCUM, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLDataTypesParser.EBCDIC, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDataTypesParser.EDITDISTANCE, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLDataTypesParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLDataTypesParser.ELAPSEDTIME, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ELEMENT, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLDataTypesParser.ELZS_H, 0)

        def EMITNULL(self):
            return self.getToken(TeradataSQLDataTypesParser.EMITNULL, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDataTypesParser.EMPTY, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.EMPTY_CLOB, 0)

        def ENCODE(self):
            return self.getToken(TeradataSQLDataTypesParser.ENCODE, 0)

        def ENCODING(self):
            return self.getToken(TeradataSQLDataTypesParser.ENCODING, 0)

        def ENCRYPT(self):
            return self.getToken(TeradataSQLDataTypesParser.ENCRYPT, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLDataTypesParser.ERRORS, 0)

        def ERRORTBL(self):
            return self.getToken(TeradataSQLDataTypesParser.ERRORTBL, 0)

        def EVENTCOLUMN(self):
            return self.getToken(TeradataSQLDataTypesParser.EVENTCOLUMN, 0)

        def EXCEPTION(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCEPTION, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCL, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLDataTypesParser.EXPORT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLDataTypesParser.EXPORTWIDTH, 0)

        def FALSE(self):
            return self.getToken(TeradataSQLDataTypesParser.FALSE, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLDataTypesParser.FEATUREINFO, 0)

        def FILE(self):
            return self.getToken(TeradataSQLDataTypesParser.FILE, 0)

        def FILL(self):
            return self.getToken(TeradataSQLDataTypesParser.FILL, 0)

        def FILTER(self):
            return self.getToken(TeradataSQLDataTypesParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLDataTypesParser.FINAL, 0)

        def FIRST_NOTNULL(self):
            return self.getToken(TeradataSQLDataTypesParser.FIRST_NOTNULL, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDataTypesParser.FLOOR, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataSQLDataTypesParser.FOLLOWING, 0)

        def FOREIGNFUNCTION(self):
            return self.getToken(TeradataSQLDataTypesParser.FOREIGNFUNCTION, 0)

        def FORTOKEN(self):
            return self.getToken(TeradataSQLDataTypesParser.FORTOKEN, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.FRIDAY, 0)

        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDataTypesParser.FROM_BYTES, 0)

        def FUNCTIONPARAMETER(self):
            return self.getToken(TeradataSQLDataTypesParser.FUNCTIONPARAMETER, 0)

        def G(self):
            return self.getToken(TeradataSQLDataTypesParser.G, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDataTypesParser.GETBIT, 0)

        def GETPSFVERSION(self):
            return self.getToken(TeradataSQLDataTypesParser.GETPSFVERSION, 0)

        def GETQUERYBAND(self):
            return self.getToken(TeradataSQLDataTypesParser.GETQUERYBAND, 0)

        def GETQUERYBANDVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.GETQUERYBANDVALUE, 0)

        def GETTIMEZONEDISPLACEMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.GETTIMEZONEDISPLACEMENT, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLDataTypesParser.GLOBAL, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLDataTypesParser.GLOP, 0)

        def GREATEST(self):
            return self.getToken(TeradataSQLDataTypesParser.GREATEST, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDataTypesParser.HIGH, 0)

        def HOST(self):
            return self.getToken(TeradataSQLDataTypesParser.HOST, 0)

        def IDENTIFYDATABASE(self):
            return self.getToken(TeradataSQLDataTypesParser.IDENTIFYDATABASE, 0)

        def IDENTIFYSESSION(self):
            return self.getToken(TeradataSQLDataTypesParser.IDENTIFYSESSION, 0)

        def IDENTIFYTABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.IDENTIFYTABLE, 0)

        def IDENTIFYUSER(self):
            return self.getToken(TeradataSQLDataTypesParser.IDENTIFYUSER, 0)

        def IFP(self):
            return self.getToken(TeradataSQLDataTypesParser.IFP, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDataTypesParser.IGNORE, 0)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDataTypesParser.IMMEDIATELY, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLDataTypesParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLDataTypesParser.INCREMENTAL, 0)

        def INDENT(self):
            return self.getToken(TeradataSQLDataTypesParser.INDENT, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.INDEXESPERTABLE, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLDataTypesParser.INDEXMAINTMODE, 0)

        def INIT(self):
            return self.getToken(TeradataSQLDataTypesParser.INIT, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDataTypesParser.INITCAP, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLDataTypesParser.INLINE, 0)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.INSTANTIABLE, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.INSTR, 0)

        def INTERNAL(self):
            return self.getToken(TeradataSQLDataTypesParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLDataTypesParser.INVOKER, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.IOCOUNT, 0)

        def IPARTITION(self):
            return self.getToken(TeradataSQLDataTypesParser.IPARTITION, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLDataTypesParser.ISOLATED, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLDataTypesParser.ISOLATION, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLDataTypesParser.JAVA, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLDataTypesParser.JIS_COLL, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_AGG, 0)

        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_COMPOSE, 0)

        def K(self):
            return self.getToken(TeradataSQLDataTypesParser.K, 0)

        def KANJI1(self):
            return self.getToken(TeradataSQLDataTypesParser.KANJI1, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLDataTypesParser.KANJISJIS, 0)

        def KBYTE(self):
            return self.getToken(TeradataSQLDataTypesParser.KBYTE, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLDataTypesParser.KBYTES, 0)

        def KEEP(self):
            return self.getToken(TeradataSQLDataTypesParser.KEEP, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLDataTypesParser.KILOBYTES, 0)

        def LAG(self):
            return self.getToken(TeradataSQLDataTypesParser.LAG, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST_DAY, 0)

        def LAST_NOTNULL(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST_NOTNULL, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST_VALUE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.LATIN, 0)

        def LDIFF(self):
            return self.getToken(TeradataSQLDataTypesParser.LDIFF, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDataTypesParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDataTypesParser.LEAST, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.LENGTH, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLDataTypesParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TeradataSQLDataTypesParser.LIST, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDataTypesParser.LOAD, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCATE, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCKEDUSEREXPIRE, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDataTypesParser.LOW, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDataTypesParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.LTRIM, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDataTypesParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDataTypesParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDataTypesParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDataTypesParser.LZDECOMP_L, 0)

        def M(self):
            return self.getToken(TeradataSQLDataTypesParser.M, 0)

        def MAD(self):
            return self.getToken(TeradataSQLDataTypesParser.MAD, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLDataTypesParser.MANUAL, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLDataTypesParser.MAPPING, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLDataTypesParser.MATCHED, 0)

        def MAX_CHOOSE(self):
            return self.getToken(TeradataSQLDataTypesParser.MAX_CHOOSE, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXCHAR, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXINTERVALS, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXLOGONATTEMPTS, 0)

        def MAXVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXVALUE, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXVALUELENGTH, 0)

        def MEDIAN(self):
            return self.getToken(TeradataSQLDataTypesParser.MEDIAN, 0)

        def MEDIUM(self):
            return self.getToken(TeradataSQLDataTypesParser.MEDIUM, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDataTypesParser.MEETS, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLDataTypesParser.MEMBER, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLDataTypesParser.MERGEBLOCKRATIO, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.MESSAGE_TEXT, 0)

        def MIN_CHOOSE(self):
            return self.getToken(TeradataSQLDataTypesParser.MIN_CHOOSE, 0)

        def MINCHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MINCHAR, 0)

        def MINVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.MINVALUE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLDataTypesParser.MODIFIED, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.MONDAY, 0)

        def MONITORQUERYBAND(self):
            return self.getToken(TeradataSQLDataTypesParser.MONITORQUERYBAND, 0)

        def MONITORSESSIONRATE(self):
            return self.getToken(TeradataSQLDataTypesParser.MONITORSESSIONRATE, 0)

        def MONITORVERSION(self):
            return self.getToken(TeradataSQLDataTypesParser.MONITORVERSION, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH_END, 0)

        def MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH_OF_CALENDAR, 0)

        def MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH_OF_QUARTER, 0)

        def MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH_OF_YEAR, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHNUMBER_OF_YEAR, 0)

        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHS_BETWEEN, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLDataTypesParser.MORE_, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLDataTypesParser.MULTINATIONAL, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDataTypesParser.NAMESPACE, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLDataTypesParser.NEVER, 0)

        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.NEXT_DAY, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDataTypesParser.NGRAM, 0)

        def NIL(self):
            return self.getToken(TeradataSQLDataTypesParser.NIL, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.NODDLTEXT, 0)

        def NODE(self):
            return self.getToken(TeradataSQLDataTypesParser.NODE, 0)

        def NONOPTCOST(self):
            return self.getToken(TeradataSQLDataTypesParser.NONOPTCOST, 0)

        def NONOPTINIT(self):
            return self.getToken(TeradataSQLDataTypesParser.NONOPTINIT, 0)

        def NONSEQUENCED(self):
            return self.getToken(TeradataSQLDataTypesParser.NONSEQUENCED, 0)

        def NORIGHT(self):
            return self.getToken(TeradataSQLDataTypesParser.NORIGHT, 0)

        def NOSEXTRACTVARFROMPATH(self):
            return self.getToken(TeradataSQLDataTypesParser.NOSEXTRACTVARFROMPATH, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLDataTypesParser.NOTATION, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDataTypesParser.NOW, 0)

        def NPATH(self):
            return self.getToken(TeradataSQLDataTypesParser.NPATH, 0)

        def NTH(self):
            return self.getToken(TeradataSQLDataTypesParser.NTH, 0)

        def NULLS(self):
            return self.getToken(TeradataSQLDataTypesParser.NULLS, 0)

        def NUMFPFNS(self):
            return self.getToken(TeradataSQLDataTypesParser.NUMFPFNS, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.NUMTOYMINTERVAL, 0)

        def NVL(self):
            return self.getToken(TeradataSQLDataTypesParser.NVL, 0)

        def NVL2(self):
            return self.getToken(TeradataSQLDataTypesParser.NVL2, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDataTypesParser.NVP, 0)

        def OA(self):
            return self.getToken(TeradataSQLDataTypesParser.OA, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDataTypesParser.OADD_MONTHS, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.OCOUNT, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDataTypesParser.ODELETE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDataTypesParser.OEXISTS, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDataTypesParser.OEXTEND, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDataTypesParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDataTypesParser.OLAST, 0)

        def OLD_NEW_TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.OLD_NEW_TABLE, 0)

        def OLIMIT(self):
            return self.getToken(TeradataSQLDataTypesParser.OLIMIT, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.ONEXT, 0)

        def ONLINE(self):
            return self.getToken(TeradataSQLDataTypesParser.ONLINE, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPRIOR, 0)

        def OPTIONS(self):
            return self.getToken(TeradataSQLDataTypesParser.OPTIONS, 0)

        def ORDERBYVALUES(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDERBYVALUES, 0)

        def ORDERED_ANALYTIC(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDERED_ANALYTIC, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDINALITY, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDataTypesParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDataTypesParser.OTRANSLATE, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.OTRIM, 0)

        def OVERLAYS(self):
            return self.getToken(TeradataSQLDataTypesParser.OVERLAYS, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLDataTypesParser.OWNER, 0)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDataTypesParser.P_INTERSECT, 0)

        def P_NORMALIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.P_NORMALIZE, 0)

        def PARAMID(self):
            return self.getToken(TeradataSQLDataTypesParser.PARAMID, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLDataTypesParser.PARAMINFO, 0)

        def PARENT(self):
            return self.getToken(TeradataSQLDataTypesParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDataTypesParser.PARTITION, 0)

        def PARTITION_L(self):
            return self.getToken(TeradataSQLDataTypesParser.PARTITION_L, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLDataTypesParser.PARTITIONED, 0)

        def PARTITIONNAMES(self):
            return self.getToken(TeradataSQLDataTypesParser.PARTITIONNAMES, 0)

        def PASS(self):
            return self.getToken(TeradataSQLDataTypesParser.PASS, 0)

        def PASSING(self):
            return self.getToken(TeradataSQLDataTypesParser.PASSING, 0)

        def PATH_GENERATOR(self):
            return self.getToken(TeradataSQLDataTypesParser.PATH_GENERATOR, 0)

        def PATH_START(self):
            return self.getToken(TeradataSQLDataTypesParser.PATH_START, 0)

        def PATH_SUMMARIZER(self):
            return self.getToken(TeradataSQLDataTypesParser.PATH_SUMMARIZER, 0)

        def PATTERN(self):
            return self.getToken(TeradataSQLDataTypesParser.PATTERN, 0)

        def PERCENTILE(self):
            return self.getToken(TeradataSQLDataTypesParser.PERCENTILE, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDataTypesParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDataTypesParser.PERCENTILE_DISC, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLDataTypesParser.PERIOD, 0)

        def PIVOT(self):
            return self.getToken(TeradataSQLDataTypesParser.PIVOT, 0)

        def PORTION(self):
            return self.getToken(TeradataSQLDataTypesParser.PORTION, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDataTypesParser.POWER, 0)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDataTypesParser.PRECEDES, 0)

        def PRECEDING(self):
            return self.getToken(TeradataSQLDataTypesParser.PRECEDING, 0)

        def PREFIX(self):
            return self.getToken(TeradataSQLDataTypesParser.PREFIX, 0)

        def PRINT(self):
            return self.getToken(TeradataSQLDataTypesParser.PRINT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDataTypesParser.PRIOR, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLDataTypesParser.PROTECTED, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTER_END, 0)

        def QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTER_OF_CALENDAR, 0)

        def QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTERNUMBER_OF_YEAR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLDataTypesParser.QUERY, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLDataTypesParser.QUERY_BAND, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUOTECHAR, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDataTypesParser.RANDOMIZED, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDataTypesParser.RANGE, 0)

        def RANGE_L(self):
            return self.getToken(TeradataSQLDataTypesParser.RANGE_L, 0)

        def RAPIDFIRE(self):
            return self.getToken(TeradataSQLDataTypesParser.RAPIDFIRE, 0)

        def RDIFF(self):
            return self.getToken(TeradataSQLDataTypesParser.RDIFF, 0)

        def READ(self):
            return self.getToken(TeradataSQLDataTypesParser.READ, 0)

        def RECALC(self):
            return self.getToken(TeradataSQLDataTypesParser.RECALC, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_INSTR, 0)

        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_REPLACE, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_SIMILAR, 0)

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_SUBSTR, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.REPLACEMENT, 0)

        def RESET(self):
            return self.getToken(TeradataSQLDataTypesParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDataTypesParser.RESPECT, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLDataTypesParser.RESTRICTWORDS, 0)

        def RETAIN(self):
            return self.getToken(TeradataSQLDataTypesParser.RETAIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNED_SQLSTATE, 0)

        def RETURNING(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLDataTypesParser.REUSE, 0)

        def ROOT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROOT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROTATERIGHT, 0)

        def ROUND(self):
            return self.getToken(TeradataSQLDataTypesParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROW_COUNT, 0)

        def ROWIDGEN(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWIDGEN, 0)

        def ROWIDGEN2(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWIDGEN2, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDataTypesParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.RTRIM, 0)

        def RU(self):
            return self.getToken(TeradataSQLDataTypesParser.RU, 0)

        def RULES(self):
            return self.getToken(TeradataSQLDataTypesParser.RULES, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLDataTypesParser.RULESET, 0)

        def SAMPLES(self):
            return self.getToken(TeradataSQLDataTypesParser.SAMPLES, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.SATURDAY, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLDataTypesParser.SCHEMA, 0)

        def SCRIPT(self):
            return self.getToken(TeradataSQLDataTypesParser.SCRIPT, 0)

        def SCRIPT_COMMAND(self):
            return self.getToken(TeradataSQLDataTypesParser.SCRIPT_COMMAND, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLDataTypesParser.SEARCHSPACE, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLDataTypesParser.SEARCHUIFDBPATH, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLDataTypesParser.SECURITY, 0)

        def SEED(self):
            return self.getToken(TeradataSQLDataTypesParser.SEED, 0)

        def SELF(self):
            return self.getToken(TeradataSQLDataTypesParser.SELF, 0)

        def SEQ(self):
            return self.getToken(TeradataSQLDataTypesParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDataTypesParser.SEQUENCE, 0)

        def SEQUENCED(self):
            return self.getToken(TeradataSQLDataTypesParser.SEQUENCED, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLDataTypesParser.SERVER, 0)

        def SESSIONIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.SESSIONIZE, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDataTypesParser.SETBIT, 0)

        def SETRESOURCERATE(self):
            return self.getToken(TeradataSQLDataTypesParser.SETRESOURCERATE, 0)

        def SETSESSIONACCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.SETSESSIONACCOUNT, 0)

        def SETSESSIONRATE(self):
            return self.getToken(TeradataSQLDataTypesParser.SETSESSIONRATE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDataTypesParser.SHARE, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDataTypesParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDataTypesParser.SHIFTRIGHT, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.SIGN, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.SIZE, 0)

        def SNAPPY_COMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.SNAPPY_COMPRESS, 0)

        def SNAPPY_DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.SNAPPY_DECOMPRESS, 0)

        def SOURCE(self):
            return self.getToken(TeradataSQLDataTypesParser.SOURCE, 0)

        def SPARSE(self):
            return self.getToken(TeradataSQLDataTypesParser.SPARSE, 0)

        def SPECCHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.SPECCHAR, 0)

        def SPL(self):
            return self.getToken(TeradataSQLDataTypesParser.SPL, 0)

        def SQLSTATE(self):
            return self.getToken(TeradataSQLDataTypesParser.SQLSTATE, 0)

        def SR(self):
            return self.getToken(TeradataSQLDataTypesParser.SR, 0)

        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLDataTypesParser.ST_GEOMETRY, 0)

        def STAT(self):
            return self.getToken(TeradataSQLDataTypesParser.STAT, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDataTypesParser.STATIC, 0)

        def STATS(self):
            return self.getToken(TeradataSQLDataTypesParser.STATS, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLDataTypesParser.STATSUSAGE, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLDataTypesParser.STORAGE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDataTypesParser.STRIP, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDataTypesParser.STRTOK, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLDataTypesParser.STYLE, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.SUBBITSTR, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.SUBCLASS_ORIGIN, 0)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDataTypesParser.SUCCEEDS, 0)

        def SUMMARYONLY(self):
            return self.getToken(TeradataSQLDataTypesParser.SUMMARYONLY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.SUNDAY, 0)

        def SYMBOLS(self):
            return self.getToken(TeradataSQLDataTypesParser.SYMBOLS, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLDataTypesParser.SYSTEM, 0)

        def SYSTEM_TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.SYSTEM_TIME, 0)

        def SYSTEMTEST(self):
            return self.getToken(TeradataSQLDataTypesParser.SYSTEMTEST, 0)

        def TARGET(self):
            return self.getToken(TeradataSQLDataTypesParser.TARGET, 0)

        def TD_ARRAY2P(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_ARRAY2P, 0)

        def TD_DATASET(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DATASET, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_YEAR, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_GENERAL, 0)

        def TD_GETTIMEBUCKET(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_GETTIMEBUCKET, 0)

        def TD_INTERNAL(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_INTERNAL, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_LZ_DECOMPRESS, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_QUARTER_OF_YEAR, 0)

        def TD_TIME_BUCKET_NUMBER(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_TIME_BUCKET_NUMBER, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_YEAR_OF_CALENDAR, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLDataTypesParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLDataTypesParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLDataTypesParser.TDWMHISTORY, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.TEMPORAL_TIMESTAMP, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.TEXT, 0)

        def THRESHOLDPERCENT(self):
            return self.getToken(TeradataSQLDataTypesParser.THRESHOLDPERCENT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLDataTypesParser.THROUGH, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.THURSDAY, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDataTypesParser.TIES, 0)

        def TIMECODE(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMECODE, 0)

        def TIMECOLUMN(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMECOLUMN, 0)

        def TIMEOUT(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMEOUT, 0)

        def TIMESTAMPCOLUMN(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMESTAMPCOLUMN, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_BYTE, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_BYTES, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_DATE, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_DSINTERVAL, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_NUMBER, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_YMINTERVAL, 0)

        def TOTOKEN(self):
            return self.getToken(TeradataSQLDataTypesParser.TOTOKEN, 0)

        def TPA(self):
            return self.getToken(TeradataSQLDataTypesParser.TPA, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLDataTypesParser.TRANSACTION_ACTIVE, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDataTypesParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.TRANSUTF8TOUNICODE, 0)

        def TRUE(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUE, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUNC, 0)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUST_ONLY, 0)

        def TTGRANULARITY(self):
            return self.getToken(TeradataSQLDataTypesParser.TTGRANULARITY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.TUESDAY, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLDataTypesParser.UBJSON, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDataTypesParser.UCASE, 0)

        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLDataTypesParser.UDFSEARCHPATH, 0)

        def UNBOUNDED(self):
            return self.getToken(TeradataSQLDataTypesParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLDataTypesParser.UNCOMMITTED, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDataTypesParser.UNKNOWN, 0)

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDataTypesParser.UNPIVOT, 0)

        def USE(self):
            return self.getToken(TeradataSQLDataTypesParser.USE, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLDataTypesParser.UTILITYINFO, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLDataTypesParser.VARRAY, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLDataTypesParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDataTypesParser.VERSION, 0)

        def VERSIONING(self):
            return self.getToken(TeradataSQLDataTypesParser.VERSIONING, 0)

        def WARNING(self):
            return self.getToken(TeradataSQLDataTypesParser.WARNING, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLDataTypesParser.WEDNESDAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK_END, 0)

        def WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK_OF_CALENDAR, 0)

        def WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK_OF_MONTH, 0)

        def WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK_OF_YEAR, 0)

        def WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKDAY_OF_MONTH, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_YEAR, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDataTypesParser.WHITESPACE, 0)

        def WINDOWSIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.WINDOWSIZE, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDataTypesParser.WITHIN, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLDataTypesParser.WORKLOAD, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDataTypesParser.WRITE, 0)

        def XML(self):
            return self.getToken(TeradataSQLDataTypesParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLATTRIBUTES, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLCOMMENT, 0)

        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLCONCAT, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLDECLARATION, 0)

        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLELEMENT, 0)

        def XMLFOREST(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLQUERY, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLSCHEMA, 0)

        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTABLE, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTEXT, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTYPE, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLVALIDATE, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR_END, 0)

        def YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR_OF_CALENDAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.YEARNUMBER_OF_CALENDAR, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLDataTypesParser.ZLIB, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDataTypesParser.BUCKET, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMITTED, 0)

        def CREATEXML(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATEXML, 0)

        def CS_LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLDataTypesParser.CS_GRAPHIC, 0)

        def CSV(self):
            return self.getToken(TeradataSQLDataTypesParser.CSV, 0)

        def CSVLD(self):
            return self.getToken(TeradataSQLDataTypesParser.CSVLD, 0)

        def DATASIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATASIZE, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYOFMONTH, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYS, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLDataTypesParser.DEFINITION, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDataTypesParser.DELETED, 0)

        def FAST(self):
            return self.getToken(TeradataSQLDataTypesParser.FAST, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDataTypesParser.LISTAGG, 0)

        def PATH(self):
            return self.getToken(TeradataSQLDataTypesParser.PATH, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_SPLIT_TO_TABLE, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDataTypesParser.REVERSE, 0)

        def SAS(self):
            return self.getToken(TeradataSQLDataTypesParser.SAS, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.SQLTABLE, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.STRTOK_SPLIT_TO_TABLE, 0)

        def SYSLIB(self):
            return self.getToken(TeradataSQLDataTypesParser.SYSLIB, 0)

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLDataTypesParser.SYSUDTLIB, 0)

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_SERVER_DB, 0)

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_SYSFNLIB, 0)

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_SYSXML, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMEDATEWZCONTROL, 0)

        def TRUST(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUST, 0)

        def TRYCAST(self):
            return self.getToken(TeradataSQLDataTypesParser.TRYCAST, 0)

        def UDT(self):
            return self.getToken(TeradataSQLDataTypesParser.UDT, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLDataTypesParser.USAGE, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDataTypesParser.VARIANT, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDataTypesParser.WIDTH, 0)

        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPUBLISH_STREAM, 0)

        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLSPLIT, 0)

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE_TO_LOCALE, 0)

        def ASBSON(self):
            return self.getToken(TeradataSQLDataTypesParser.ASBSON, 0)

        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.ASBSONTEXT, 0)

        def COMBINE(self):
            return self.getToken(TeradataSQLDataTypesParser.COMBINE, 0)

        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXISTVALUE, 0)

        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONEXTRACT, 0)

        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONEXTRACTVALUE, 0)

        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONEXTRACTLARGEVALUE, 0)

        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.KEYCOUNT, 0)

        def METADATA(self):
            return self.getToken(TeradataSQLDataTypesParser.METADATA, 0)

        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.STORAGE_SIZE, 0)

        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATESCHEMABASEDXML, 0)

        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATENONSCHEMABASEDXML, 0)

        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXISTSNODE, 0)

        def ISCONTENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ISCONTENT, 0)

        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ISDOCUMENT, 0)

        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDataTypesParser.ISSCHEMAVALID, 0)

        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDataTypesParser.ISSCHEMAVALIDATED, 0)

        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLEXTRACT, 0)

        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTRANSFORM, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLDataTypesParser.PROC_ID, 0)

        def LOCATION(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCATION, 0)

        def PAYLOAD(self):
            return self.getToken(TeradataSQLDataTypesParser.PAYLOAD, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUSTED, 0)

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLDataTypesParser.PATHPATTERN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDataTypesParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDataTypesParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDataTypesParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLDataTypesParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.STRIP_ENCLOSING_CHAR, 0)

        def RLS(self):
            return self.getToken(TeradataSQLDataTypesParser.RLS, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLDataTypesParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLDataTypesParser.MULTIPLE, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TS_DECOMPRESS, 0)

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTIGUOUSMAPAMPS, 0)

        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDataTypesParser.SPARSEMAPAMPS, 0)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDataTypesParser.SPARSETABLEAMPS, 0)

        def UNNEST(self):
            return self.getToken(TeradataSQLDataTypesParser.UNNEST, 0)

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDataTypesParser.CALCMATRIX, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDataTypesParser.PHRASE, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDataTypesParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL_HANDLING, 0)

        def READ_NOS(self):
            return self.getToken(TeradataSQLDataTypesParser.READ_NOS, 0)

        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDataTypesParser.SAMPLE_PERC, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDataTypesParser.FULLSCAN, 0)

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_UNPIVOT, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDataTypesParser.VALUE_COLUMNS, 0)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDataTypesParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMN_LIST, 0)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE_NULLS, 0)

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDataTypesParser.WRITE_NOS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDataTypesParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDataTypesParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDataTypesParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDataTypesParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDataTypesParser.COMPRESSION, 0)

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_TO_JSON, 0)

        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDataTypesParser.BSON_CHECK, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDataTypesParser.GEOJSONFROMGEOM, 0)

        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDataTypesParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONGETVALUE, 0)

        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.NVP2JSON, 0)

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_JSONSHRED, 0)

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_KEYS, 0)

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_TABLE, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDataTypesParser.QUOTES, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWEXPR, 0)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDataTypesParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNTYPES, 0)

        def NOCASE(self):
            return self.getToken(TeradataSQLDataTypesParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUNCATE, 0)

        def LINK(self):
            return self.getToken(TeradataSQLDataTypesParser.LINK, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_nonreserved_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreserved_word" ):
                listener.enterNonreserved_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreserved_word" ):
                listener.exitNonreserved_word(self)




    def nonreserved_word(self):

        localctx = TeradataSQLDataTypesParser.Nonreserved_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_nonreserved_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            _la = self._input.LA(1)
            if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Query_termContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def query_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Query_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Query_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def UNION(self):
            return self.getToken(TeradataSQLDataTypesParser.UNION, 0)

        def MINUS(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUS, 0)

        def EXCEPT(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TeradataSQLDataTypesParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDataTypesParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_query_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expr" ):
                listener.enterQuery_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expr" ):
                listener.exitQuery_expr(self)



    def query_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDataTypesParser.Query_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 146
        self.enterRecursionRule(localctx, 146, self.RULE_query_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [369, 370]:
                self.state = 1202
                self.query_term()
                pass
            elif token in [1213]:
                self.state = 1203
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1204
                self.query_expr(0)
                self.state = 1205
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1217
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLDataTypesParser.Query_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expr)
                    self.state = 1209
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1210
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==204 or _la==247 or _la==447):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 1211
                        self.match(TeradataSQLDataTypesParser.ALL)


                    self.state = 1214
                    self.query_expr(3) 
                self.state = 1219
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Select_listContext,0)


        def SELECT(self):
            return self.getToken(TeradataSQLDataTypesParser.SELECT, 0)

        def SEL(self):
            return self.getToken(TeradataSQLDataTypesParser.SEL, 0)

        def with_deleted_rows(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_deleted_rowsContext,0)


        def as_json(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.As_jsonContext,0)


        def from_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.From_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.From_clauseContext,i)


        def into_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Into_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Into_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Where_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Group_by_clauseContext,i)


        def sample_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Sample_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Sample_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_clauseContext,i)


        def with_check_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.With_check_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_check_optionContext,i)


        def expand_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Expand_on_clauseContext,0)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Having_clauseContext,i)


        def qualify_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Qualify_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Qualify_clauseContext,i)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)




    def query_term(self):

        localctx = TeradataSQLDataTypesParser.Query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_query_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1221
                self.with_deleted_rows()


            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1224
                self.as_json()


            self.state = 1227
            self.select_list()
            self.state = 1259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1257
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                    if la_ == 1:
                        self.state = 1228
                        self.from_clause()
                        self.state = 1232
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1229
                                self.with_clause() 
                            self.state = 1234
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 1235
                        self.into_clause()
                        pass

                    elif la_ == 3:
                        self.state = 1236
                        self.where_clause()
                        pass

                    elif la_ == 4:
                        self.state = 1237
                        self.group_by_clause()
                        pass

                    elif la_ == 5:
                        self.state = 1240
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [183]:
                            self.state = 1238
                            self.having_clause()
                            pass
                        elif token in [315]:
                            self.state = 1239
                            self.qualify_clause()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 1242
                        self.sample_clause()
                        pass

                    elif la_ == 7:
                        self.state = 1246
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==474:
                            self.state = 1243
                            self.with_clause()
                            self.state = 1248
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1249
                        self.order_by_clause()
                        self.state = 1253
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1250
                                self.with_clause() 
                            self.state = 1255
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                        pass

                    elif la_ == 8:
                        self.state = 1256
                        self.with_check_option()
                        pass

             
                self.state = 1261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1262
                self.expand_on_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_deleted_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLDataTypesParser.DELETED, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_deleted_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_deleted_rows" ):
                listener.enterWith_deleted_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_deleted_rows" ):
                listener.exitWith_deleted_rows(self)




    def with_deleted_rows(self):

        localctx = TeradataSQLDataTypesParser.With_deleted_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_with_deleted_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 1266
            self.match(TeradataSQLDataTypesParser.DELETED)
            self.state = 1267
            self.match(TeradataSQLDataTypesParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_jsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_as_json

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_json" ):
                listener.enterAs_json(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_json" ):
                listener.exitAs_json(self)




    def as_json(self):

        localctx = TeradataSQLDataTypesParser.As_jsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_as_json)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            self.match(TeradataSQLDataTypesParser.AS)
            self.state = 1270
            self.match(TeradataSQLDataTypesParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Selected_columnsContext,0)


        def top_n(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Top_nContext,0)


        def DISTINCT(self):
            return self.getToken(TeradataSQLDataTypesParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLDataTypesParser.ALL, 0)

        def normalize(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.NormalizeContext,0)


        def all_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.All_operatorContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TeradataSQLDataTypesParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_select_list)
        try:
            self.state = 1283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 121, 271, 448]:
                    self.state = 1276
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 1272
                        self.match(TeradataSQLDataTypesParser.DISTINCT)
                        pass
                    elif token in [448]:
                        self.state = 1273
                        self.match(TeradataSQLDataTypesParser.UNIQUE)
                        pass
                    elif token in [13]:
                        self.state = 1274
                        self.match(TeradataSQLDataTypesParser.ALL)
                        pass
                    elif token in [271]:
                        self.state = 1275
                        self.normalize()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [427]:
                    self.state = 1278
                    self.top_n()
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1219, 1221, 1222]:
                    pass
                else:
                    pass
                self.state = 1281
                self.selected_columns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1282
                self.all_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_nContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TeradataSQLDataTypesParser.TOP, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Float_literalContext,0)


        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Macro_parameter_referenceContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLDataTypesParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDataTypesParser.TIES, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_top_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_n" ):
                listener.enterTop_n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_n" ):
                listener.exitTop_n(self)




    def top_n(self):

        localctx = TeradataSQLDataTypesParser.Top_nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_top_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(TeradataSQLDataTypesParser.TOP)
            self.state = 1289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 1286
                self.integer_literal()
                pass
            elif token in [1197]:
                self.state = 1287
                self.float_literal()
                pass
            elif token in [1207, 1210]:
                self.state = 1288
                self.macro_parameter_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 1291
                self.match(TeradataSQLDataTypesParser.PERCENT)


            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1294
                self.match(TeradataSQLDataTypesParser.WITH)
                self.state = 1295
                self.match(TeradataSQLDataTypesParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.NORMALIZE, 0)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLDataTypesParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLDataTypesParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDataTypesParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_normalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)




    def normalize(self):

        localctx = TeradataSQLDataTypesParser.NormalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_normalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(TeradataSQLDataTypesParser.NORMALIZE)
            self.state = 1309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1299
                self.match(TeradataSQLDataTypesParser.ON)
                self.state = 1300
                self.match(TeradataSQLDataTypesParser.MEETS)
                self.state = 1301
                self.match(TeradataSQLDataTypesParser.OR)
                self.state = 1302
                self.match(TeradataSQLDataTypesParser.OVERLAPS)

            elif la_ == 2:
                self.state = 1303
                self.match(TeradataSQLDataTypesParser.ON)
                self.state = 1304
                self.match(TeradataSQLDataTypesParser.OVERLAPS)
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 1305
                    self.match(TeradataSQLDataTypesParser.OR)
                    self.state = 1306
                    self.match(TeradataSQLDataTypesParser.MEETS)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.DOT_)
            else:
                return self.getToken(TeradataSQLDataTypesParser.DOT_, i)

        def ALL(self):
            return self.getToken(TeradataSQLDataTypesParser.ALL, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_all_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_operator" ):
                listener.enterAll_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_operator" ):
                listener.exitAll_operator(self)




    def all_operator(self):

        localctx = TeradataSQLDataTypesParser.All_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_all_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1311
                self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                pass

            elif la_ == 2:
                self.state = 1312
                self.table_name()
                self.state = 1313
                self.match(TeradataSQLDataTypesParser.DOT_)
                self.state = 1314
                self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                pass

            elif la_ == 3:
                self.state = 1316
                self.column_name()
                pass


            self.state = 1319
            self.match(TeradataSQLDataTypesParser.DOT_)
            self.state = 1320
            self.match(TeradataSQLDataTypesParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.all_rows = None # Token

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def selected_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Selected_columnContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Selected_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_selected_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_columns" ):
                listener.enterSelected_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_columns" ):
                listener.exitSelected_columns(self)




    def selected_columns(self):

        localctx = TeradataSQLDataTypesParser.Selected_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_selected_columns)
        try:
            self.state = 1331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                localctx.all_rows = self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.selected_column()
                self.state = 1328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1324
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 1325
                        self.selected_column() 
                    self.state = 1330
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_selected_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_column" ):
                listener.enterSelected_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_column" ):
                listener.exitSelected_column(self)




    def selected_column(self):

        localctx = TeradataSQLDataTypesParser.Selected_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_selected_column)
        self._la = 0 # Token type
        try:
            self.state = 1344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1333
                self.scalar_expr(0)
                self.state = 1338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 1334
                        self.match(TeradataSQLDataTypesParser.AS)


                    self.state = 1337
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1340
                self.table_name()
                self.state = 1341
                self.match(TeradataSQLDataTypesParser.DOT_)
                self.state = 1342
                self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(TeradataSQLDataTypesParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Variable_nameContext,i)


        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Variable_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = TeradataSQLDataTypesParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(TeradataSQLDataTypesParser.INTO)
            self.state = 1349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1347
                self.variable_name()
                pass
            elif token in [1207]:
                self.state = 1348
                self.variable_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1351
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 1354
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 1352
                        self.variable_name()
                        pass
                    elif token in [1207]:
                        self.state = 1353
                        self.variable_reference()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLDataTypesParser.FROM, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.From_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = TeradataSQLDataTypesParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(TeradataSQLDataTypesParser.FROM)
            self.state = 1362
            self.from_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Join_source_specContext,0)


        def join_joined_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Join_joined_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Join_joined_specContext,i)


        def from_pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.From_pivot_specContext,0)


        def from_unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.From_unpivot_specContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_from_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_spec" ):
                listener.enterFrom_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_spec" ):
                listener.exitFrom_spec(self)




    def from_spec(self):

        localctx = TeradataSQLDataTypesParser.From_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_from_spec)
        try:
            self.state = 1394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.join_source_spec()
                self.state = 1368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1365
                        self.join_joined_spec() 
                    self.state = 1370
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.from_pivot_spec()
                self.state = 1375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1372
                        self.join_joined_spec() 
                    self.state = 1377
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self.from_unpivot_spec()
                self.state = 1382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1379
                        self.join_joined_spec() 
                    self.state = 1384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1385
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1386
                self.from_spec()
                self.state = 1387
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 1391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1388
                        self.join_joined_spec() 
                    self.state = 1393
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_source_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Subquery_referenceContext,0)


        def foreign_table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Foreign_table_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_function_referenceContext,0)


        def foreign_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Foreign_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_join_source_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source_spec" ):
                listener.enterJoin_source_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source_spec" ):
                listener.exitJoin_source_spec(self)




    def join_source_spec(self):

        localctx = TeradataSQLDataTypesParser.Join_source_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_join_source_spec)
        try:
            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1396
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1398
                self.foreign_table_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1399
                self.table_function_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1400
                self.foreign_function_reference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1401
                self.table_operator_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_joined_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Subquery_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_referenceContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_join_joined_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_joined_spec" ):
                listener.enterJoin_joined_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_joined_spec" ):
                listener.exitJoin_joined_spec(self)




    def join_joined_spec(self):

        localctx = TeradataSQLDataTypesParser.Join_joined_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_join_joined_spec)
        try:
            self.state = 1413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1404
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1405
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1407
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1408
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1409
                self.table_function_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1410
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1411
                self.table_operator_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1412
                self.join_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.PivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_from_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_pivot_spec" ):
                listener.enterFrom_pivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_pivot_spec" ):
                listener.exitFrom_pivot_spec(self)




    def from_pivot_spec(self):

        localctx = TeradataSQLDataTypesParser.From_pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_from_pivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1415
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 1416
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1419
            self.pivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivot(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.UnpivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_from_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_unpivot_spec" ):
                listener.enterFrom_unpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_unpivot_spec" ):
                listener.exitFrom_unpivot_spec(self)




    def from_unpivot_spec(self):

        localctx = TeradataSQLDataTypesParser.From_unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_from_unpivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1421
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 1422
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1425
            self.unpivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_alias = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def foreign_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Foreign_returns_clauseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = TeradataSQLDataTypesParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.table_name()
            self.state = 1432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1428
                self.server_name_reference()
                self.state = 1430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1429
                    self.foreign_returns_clause()




            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 1434
                    self.match(TeradataSQLDataTypesParser.AS)


                self.state = 1437
                localctx.table_alias = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(TeradataSQLDataTypesParser.JOIN, 0)

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Join_source_specContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLDataTypesParser.INNER, 0)

        def join_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Join_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Join_on_clauseContext,i)


        def LEFT(self):
            return self.getToken(TeradataSQLDataTypesParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDataTypesParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TeradataSQLDataTypesParser.FULL, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLDataTypesParser.OUTER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def CROSS(self):
            return self.getToken(TeradataSQLDataTypesParser.CROSS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = TeradataSQLDataTypesParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 1492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 1440
                    self.match(TeradataSQLDataTypesParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 1441
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 1442
                        self.match(TeradataSQLDataTypesParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 1447
                self.match(TeradataSQLDataTypesParser.JOIN)
                self.state = 1448
                self.join_source_spec()
                self.state = 1452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1449
                        self.join_on_clause() 
                    self.state = 1454
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1460
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 1455
                    self.match(TeradataSQLDataTypesParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 1456
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 1457
                        self.match(TeradataSQLDataTypesParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 1462
                self.match(TeradataSQLDataTypesParser.JOIN)
                self.state = 1463
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1464
                self.from_spec()
                self.state = 1465
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 1469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1466
                        self.join_on_clause() 
                    self.state = 1471
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1472
                self.match(TeradataSQLDataTypesParser.CROSS)
                self.state = 1473
                self.match(TeradataSQLDataTypesParser.JOIN)
                self.state = 1474
                self.join_source_spec()
                self.state = 1478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1475
                        self.join_on_clause() 
                    self.state = 1480
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1481
                self.match(TeradataSQLDataTypesParser.CROSS)
                self.state = 1482
                self.match(TeradataSQLDataTypesParser.JOIN)
                self.state = 1483
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1484
                self.from_spec()
                self.state = 1485
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 1489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1486
                        self.join_on_clause() 
                    self.state = 1491
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_join_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_clause" ):
                listener.enterJoin_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_clause" ):
                listener.exitJoin_on_clause(self)




    def join_on_clause(self):

        localctx = TeradataSQLDataTypesParser.Join_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_join_on_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1495
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_sql = None # Token
            self.table_alias = None # Alias_nameContext

        def FOREIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Query_termContext,0)


        def EXPORT(self):
            return self.getToken(TeradataSQLDataTypesParser.EXPORT, 0)

        def exported_data(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Exported_dataContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Exported_dataContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_foreign_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_reference" ):
                listener.enterForeign_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_reference" ):
                listener.exitForeign_table_reference(self)




    def foreign_table_reference(self):

        localctx = TeradataSQLDataTypesParser.Foreign_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_foreign_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(TeradataSQLDataTypesParser.FOREIGN)
            self.state = 1498
            self.match(TeradataSQLDataTypesParser.TABLE)
            self.state = 1499
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1500
                self.query_term()
                pass

            elif la_ == 2:
                self.state = 1502 
                self._errHandler.sync(self)
                _alt = 1+1
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1+1:
                        self.state = 1501
                        localctx.foreign_sql = self.matchWildcard()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1504 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

                pass


            self.state = 1508
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1509
            self.server_name_reference()
            self.state = 1522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1510
                self.match(TeradataSQLDataTypesParser.EXPORT)
                self.state = 1511
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1512
                self.exported_data()
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1513
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 1514
                    self.exported_data()
                    self.state = 1519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1520
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1524
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 1527
            localctx.table_alias = self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Function_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Server_name_referenceContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def foreign_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Foreign_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Foreign_on_clauseContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_foreign_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_function_reference" ):
                listener.enterForeign_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_function_reference" ):
                listener.exitForeign_function_reference(self)




    def foreign_function_reference(self):

        localctx = TeradataSQLDataTypesParser.Foreign_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_foreign_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.function_name()
            self.state = 1530
            self.server_name_reference()
            self.state = 1531
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1533 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1532
                self.foreign_on_clause()
                self.state = 1535 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==286):
                    break

            self.state = 1537
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1538
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 1541
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def foreign_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Foreign_using_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def hash_or_partition_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Hash_or_partition_byContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Hash_or_partition_byContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_clauseContext,0)


        def LOCAL(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_foreign_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_on_clause" ):
                listener.enterForeign_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_on_clause" ):
                listener.exitForeign_on_clause(self)




    def foreign_on_clause(self):

        localctx = TeradataSQLDataTypesParser.Foreign_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_foreign_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1544
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1545
            self.scalar_expr(0)
            self.state = 1550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1546
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1547
                self.scalar_expr(0)
                self.state = 1552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1553
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==840:
                self.state = 1554
                self.hash_or_partition_by()
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 1560
                    self.match(TeradataSQLDataTypesParser.LOCAL)


                self.state = 1563
                self.order_by_clause()


            self.state = 1566
            self.foreign_using_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exported_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exported_subquery = None # Subquery_referenceContext
            self.exported_table = None # Table_nameContext
            self.table_alias = None # Alias_nameContext

        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Subquery_referenceContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_exported_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExported_data" ):
                listener.enterExported_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExported_data" ):
                listener.exitExported_data(self)




    def exported_data(self):

        localctx = TeradataSQLDataTypesParser.Exported_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_exported_data)
        self._la = 0 # Token type
        try:
            self.state = 1575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1568
                localctx.exported_subquery = self.subquery_reference()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1569
                localctx.exported_table = self.table_name()
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 1570
                    self.match(TeradataSQLDataTypesParser.AS)


                self.state = 1573
                localctx.table_alias = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def foreign_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Foreign_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Foreign_parameterContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_foreign_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_using_clause" ):
                listener.enterForeign_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_using_clause" ):
                listener.exitForeign_using_clause(self)




    def foreign_using_clause(self):

        localctx = TeradataSQLDataTypesParser.Foreign_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_foreign_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 1579 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1578
                self.foreign_parameter()
                self.state = 1581 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_foreign_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_parameter" ):
                listener.enterForeign_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_parameter" ):
                listener.exitForeign_parameter(self)




    def foreign_parameter(self):

        localctx = TeradataSQLDataTypesParser.Foreign_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_foreign_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            localctx.name = self.unqualified_name()
            self.state = 1584
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1585
            localctx.value = self.scalar_expr(0)
            self.state = 1586
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_foreign_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_returns_clause" ):
                listener.enterForeign_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_returns_clause" ):
                listener.exitForeign_returns_clause(self)




    def foreign_returns_clause(self):

        localctx = TeradataSQLDataTypesParser.Foreign_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_foreign_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1588
            self.match(TeradataSQLDataTypesParser.RETURNS)
            self.state = 1589
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1590
            self.column_spec()
            self.state = 1595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1591
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1592
                self.column_spec()
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1598
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Server_name_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.AT_SIGN, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_server_name_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServer_name_reference" ):
                listener.enterServer_name_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServer_name_reference" ):
                listener.exitServer_name_reference(self)




    def server_name_reference(self):

        localctx = TeradataSQLDataTypesParser.Server_name_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_server_name_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(TeradataSQLDataTypesParser.AT_SIGN)
            self.state = 1601
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def udt_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Udt_table_functionContext,0)


        def unnest_table_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unnest_table_functionContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_reference" ):
                listener.enterTable_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_reference" ):
                listener.exitTable_function_reference(self)




    def table_function_reference(self):

        localctx = TeradataSQLDataTypesParser.Table_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_table_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.match(TeradataSQLDataTypesParser.TABLE)
            self.state = 1604
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1605
                self.udt_table_function()
                pass

            elif la_ == 2:
                self.state = 1606
                self.unnest_table_function()
                pass


            self.state = 1609
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1610
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 1613
            self.alias_name()
            self.state = 1615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1614
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_expr_list_comma_separatedContext,0)


        def table_function_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_function_returns_clauseContext,0)


        def table_function_local_order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Table_function_local_order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_function_local_order_by_clauseContext,i)


        def table_function_hash_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Table_function_hash_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_function_hash_by_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_udt_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_table_function" ):
                listener.enterUdt_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_table_function" ):
                listener.exitUdt_table_function(self)




    def udt_table_function(self):

        localctx = TeradataSQLDataTypesParser.Udt_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_udt_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.function_name()
            self.state = 1621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1618
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1619
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 1620
                self.scalar_expr_list_comma_separated()
                pass


            self.state = 1624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 1623
                self.table_function_returns_clause()


            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==224:
                self.state = 1628
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 1626
                    self.table_function_local_order_by_clause()
                    pass
                elif token in [178]:
                    self.state = 1627
                    self.table_function_hash_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext

        def UNNEST(self):
            return self.getToken(TeradataSQLDataTypesParser.UNNEST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unnest_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_table_function" ):
                listener.enterUnnest_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_table_function" ):
                listener.exitUnnest_table_function(self)




    def unnest_table_function(self):

        localctx = TeradataSQLDataTypesParser.Unnest_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_unnest_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1633
                self.td_sysfnlib()


            self.state = 1636
            self.match(TeradataSQLDataTypesParser.UNNEST)
            self.state = 1637
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1638
                localctx.key_expr = self.scalar_expr(0)
                self.state = 1639
                self.match(TeradataSQLDataTypesParser.COMMA)


            self.state = 1643
            localctx.array_expr = self.scalar_expr(0)
            self.state = 1644
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1645
                self.match(TeradataSQLDataTypesParser.WITH)
                self.state = 1646
                self.match(TeradataSQLDataTypesParser.ORDINALITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returned_table_name = None # Table_nameContext

        def RETURNS(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_function_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_returns_clause" ):
                listener.enterTable_function_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_returns_clause" ):
                listener.exitTable_function_returns_clause(self)




    def table_function_returns_clause(self):

        localctx = TeradataSQLDataTypesParser.Table_function_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_table_function_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(TeradataSQLDataTypesParser.RETURNS)
            self.state = 1662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1650
                localctx.returned_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 1651
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1652
                self.column_spec()
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1653
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 1654
                    self.column_spec()
                    self.state = 1659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1660
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [178, 224, 1214]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_local_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_function_local_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_local_order_by_clause" ):
                listener.enterTable_function_local_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_local_order_by_clause" ):
                listener.exitTable_function_local_order_by_clause(self)




    def table_function_local_order_by_clause(self):

        localctx = TeradataSQLDataTypesParser.Table_function_local_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_table_function_local_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(TeradataSQLDataTypesParser.LOCAL)
            self.state = 1665
            self.match(TeradataSQLDataTypesParser.ORDER)
            self.state = 1666
            self.match(TeradataSQLDataTypesParser.BY)
            self.state = 1667
            self.order_by_spec_full()
            self.state = 1672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1668
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1669
                self.order_by_spec_full()
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_hash_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLDataTypesParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_function_hash_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_hash_by_clause" ):
                listener.enterTable_function_hash_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_hash_by_clause" ):
                listener.exitTable_function_hash_by_clause(self)




    def table_function_hash_by_clause(self):

        localctx = TeradataSQLDataTypesParser.Table_function_hash_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_table_function_hash_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.match(TeradataSQLDataTypesParser.HASH)
            self.state = 1676
            self.match(TeradataSQLDataTypesParser.BY)
            self.state = 1677
            self.column_name()
            self.state = 1682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1678
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1679
                self.column_name()
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def xmltable_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xmltable_operatorContext,0)


        def calcmatrix_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Calcmatrix_table_operatorContext,0)


        def read_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Read_nos_table_operatorContext,0)


        def script_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Script_table_operatorContext,0)


        def td_unpivot_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_unpivot_table_operatorContext,0)


        def write_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Write_nos_table_operatorContext,0)


        def json_keys_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Json_keys_table_operatorContext,0)


        def json_table_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Json_table_table_operatorContext,0)


        def json_shred_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Json_shred_table_operatorContext,0)


        def generic_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Generic_table_operatorContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_operator_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_reference" ):
                listener.enterTable_operator_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_reference" ):
                listener.exitTable_operator_reference(self)




    def table_operator_reference(self):

        localctx = TeradataSQLDataTypesParser.Table_operator_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_table_operator_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1685
                self.xmltable_operator()
                pass

            elif la_ == 2:
                self.state = 1686
                self.calcmatrix_table_operator()
                pass

            elif la_ == 3:
                self.state = 1687
                self.read_nos_table_operator()
                pass

            elif la_ == 4:
                self.state = 1688
                self.script_table_operator()
                pass

            elif la_ == 5:
                self.state = 1689
                self.td_unpivot_table_operator()
                pass

            elif la_ == 6:
                self.state = 1690
                self.write_nos_table_operator()
                pass

            elif la_ == 7:
                self.state = 1691
                self.json_keys_table_operator()
                pass

            elif la_ == 8:
                self.state = 1692
                self.json_table_table_operator()
                pass

            elif la_ == 9:
                self.state = 1693
                self.json_shred_table_operator()
                pass

            elif la_ == 10:
                self.state = 1694
                self.generic_table_operator()
                pass


            self.state = 1698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 1697
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 1700
            self.alias_name()
            self.state = 1702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1701
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_tab_row_pattern = None # Scalar_exprContext

        def XMLTABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_namespace_declarationContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_query_argumentContext,0)


        def xml_columns_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_columns_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xmltable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_operator" ):
                listener.enterXmltable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_operator" ):
                listener.exitXmltable_operator(self)




    def xmltable_operator(self):

        localctx = TeradataSQLDataTypesParser.Xmltable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_xmltable_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(TeradataSQLDataTypesParser.XMLTABLE)
            self.state = 1705
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1706
                self.xml_namespace_declaration()


            self.state = 1709
            localctx.xml_tab_row_pattern = self.scalar_expr(0)
            self.state = 1711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==845:
                self.state = 1710
                self.xml_query_argument()


            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==579:
                self.state = 1713
                self.xml_columns_spec()


            self.state = 1716
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calcmatrix_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using_phrase = None # Char_string_literalContext
            self.calc_type = None # Char_string_literalContext
            self.output = None # Char_string_literalContext
            self.null_handling = None # Char_string_literalContext

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLDataTypesParser.CALCMATRIX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLDataTypesParser.PHRASE, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def HASH(self):
            return self.getToken(TeradataSQLDataTypesParser.HASH, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.BY)
            else:
                return self.getToken(TeradataSQLDataTypesParser.BY, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLDataTypesParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL_HANDLING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_calcmatrix_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcmatrix_table_operator" ):
                listener.enterCalcmatrix_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcmatrix_table_operator" ):
                listener.exitCalcmatrix_table_operator(self)




    def calcmatrix_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Calcmatrix_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_calcmatrix_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1718
                self.td_sysfnlib()


            self.state = 1721
            self.match(TeradataSQLDataTypesParser.CALCMATRIX)
            self.state = 1722
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1723
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1724
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1725
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 1728
                self.match(TeradataSQLDataTypesParser.HASH)
                self.state = 1729
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 1730
                self.scalar_expr(0)
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1731
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 1732
                    self.scalar_expr(0)
                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 1740
                self.match(TeradataSQLDataTypesParser.LOCAL)
                self.state = 1741
                self.match(TeradataSQLDataTypesParser.ORDER)
                self.state = 1742
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 1743
                self.scalar_expr(0)
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1744
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 1745
                    self.scalar_expr(0)
                    self.state = 1750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1753
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 1754
            self.match(TeradataSQLDataTypesParser.PHRASE)
            self.state = 1755
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1756
            localctx.using_phrase = self.char_string_literal()
            self.state = 1757
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.state = 1758
                self.match(TeradataSQLDataTypesParser.CALCTYPE)
                self.state = 1759
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1760
                localctx.calc_type = self.char_string_literal()
                self.state = 1761
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1765
                self.match(TeradataSQLDataTypesParser.OUTPUT)
                self.state = 1766
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1767
                localctx.output = self.char_string_literal()
                self.state = 1768
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1772
                self.match(TeradataSQLDataTypesParser.NULL_HANDLING)
                self.state = 1773
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1774
                localctx.null_handling = self.char_string_literal()
                self.state = 1775
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_NOS(self):
            return self.getToken(TeradataSQLDataTypesParser.READ_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def read_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Read_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Read_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_read_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_table_operator" ):
                listener.enterRead_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_table_operator" ):
                listener.exitRead_nos_table_operator(self)




    def read_nos_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Read_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_read_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1779
            self.match(TeradataSQLDataTypesParser.READ_NOS)
            self.state = 1780
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1781
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1782
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1783
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1786
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 1787
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1788
            self.location()
            self.state = 1792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1132)) & ~0x3f) == 0 and ((1 << (_la - 1132)) & 125829135) != 0):
                self.state = 1789
                self.read_nos_option()
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1795
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1796
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.return_spec = list() # of Char_string_literalContexts
            self.delimiter_char = None # Char_string_literalContext
            self.charset = None # Char_string_literalContext
            self.quote_char = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def SCRIPT(self):
            return self.getToken(TeradataSQLDataTypesParser.SCRIPT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_on_clauseContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def RETURNS(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNS, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLDataTypesParser.DELIMITER, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARSET, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUOTECHAR, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLDataTypesParser.AUTH, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Object_nameContext,0)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_script_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_table_operator" ):
                listener.enterScript_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_table_operator" ):
                listener.exitScript_table_operator(self)




    def script_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Script_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_script_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1798
            self.match(TeradataSQLDataTypesParser.SCRIPT)
            self.state = 1799
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1800
            self.table_operator_on_clause()
            self.state = 1815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 1801
                self.match(TeradataSQLDataTypesParser.RETURNS)
                self.state = 1802
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1812
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 1803
                    self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 1804
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.return_spec.append(localctx._char_string_literal)
                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1805
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 1806
                        localctx._char_string_literal = self.char_string_literal()
                        localctx.return_spec.append(localctx._char_string_literal)
                        self.state = 1811
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1814
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==625:
                self.state = 1817
                self.match(TeradataSQLDataTypesParser.DELIMITER)
                self.state = 1818
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1819
                localctx.delimiter_char = self.char_string_literal()
                self.state = 1820
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==569:
                self.state = 1824
                self.match(TeradataSQLDataTypesParser.CHARSET)
                self.state = 1825
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1826
                localctx.charset = self.char_string_literal()
                self.state = 1827
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==871:
                self.state = 1831
                self.match(TeradataSQLDataTypesParser.QUOTECHAR)
                self.state = 1832
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1833
                localctx.quote_char = self.char_string_literal()
                self.state = 1834
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==542:
                self.state = 1838
                self.match(TeradataSQLDataTypesParser.AUTH)
                self.state = 1839
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1840
                localctx.authorization_name = self.object_name()
                self.state = 1841
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1845
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_unpivot_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.value_columns_value = list() # of Char_string_literalContexts
            self.unpivot_column_value = None # Char_string_literalContext
            self.column_list_value = list() # of Char_string_literalContexts
            self.column_alias_list_value = list() # of Char_string_literalContexts
            self.include_nulls = None # Char_string_literalContext

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_UNPIVOT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLDataTypesParser.VALUE_COLUMNS, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLDataTypesParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMN_LIST, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE_NULLS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_td_unpivot_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_unpivot_table_operator" ):
                listener.enterTd_unpivot_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_unpivot_table_operator" ):
                listener.exitTd_unpivot_table_operator(self)




    def td_unpivot_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Td_unpivot_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_td_unpivot_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1847
                self.td_sysfnlib()


            self.state = 1850
            self.match(TeradataSQLDataTypesParser.TD_UNPIVOT)
            self.state = 1851
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1852
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 1853
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 1854
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1857
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 1858
            self.match(TeradataSQLDataTypesParser.VALUE_COLUMNS)
            self.state = 1859
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1860
            localctx._char_string_literal = self.char_string_literal()
            localctx.value_columns_value.append(localctx._char_string_literal)
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1861
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1862
                localctx._char_string_literal = self.char_string_literal()
                localctx.value_columns_value.append(localctx._char_string_literal)
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1868
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1869
            self.match(TeradataSQLDataTypesParser.UNPIVOT_COLUMN)
            self.state = 1870
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1871
            localctx.unpivot_column_value = self.char_string_literal()
            self.state = 1872
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1873
            self.match(TeradataSQLDataTypesParser.COLUMN_LIST)
            self.state = 1874
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1875
            localctx._char_string_literal = self.char_string_literal()
            localctx.column_list_value.append(localctx._char_string_literal)
            self.state = 1880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1876
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1877
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_list_value.append(localctx._char_string_literal)
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1883
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1884
                self.match(TeradataSQLDataTypesParser.COLUMN_ALIAS_LIST)
                self.state = 1885
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1886
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_alias_list_value.append(localctx._char_string_literal)
                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1887
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 1888
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.column_alias_list_value.append(localctx._char_string_literal)
                    self.state = 1893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1894
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 1895
                self.match(TeradataSQLDataTypesParser.INCLUDE_NULLS)
                self.state = 1896
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1897
                localctx.include_nulls = self.char_string_literal()
                self.state = 1898
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLDataTypesParser.WRITE_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_on_clauseContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def write_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Write_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Write_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_write_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_table_operator" ):
                listener.enterWrite_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_table_operator" ):
                listener.exitWrite_nos_table_operator(self)




    def write_nos_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Write_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_write_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.match(TeradataSQLDataTypesParser.WRITE_NOS)
            self.state = 1903
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1904
            self.table_operator_on_clause()
            self.state = 1905
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 1906
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1907
            self.location()
            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1134)) & ~0x3f) == 0 and ((1 << (_la - 1134)) & 1095216660481) != 0):
                self.state = 1908
                self.write_nos_option()
                self.state = 1913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1914
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1915
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_table_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self.col_expr_literal = None # Char_string_literalContext

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDataTypesParser.COLEXPR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_json_table_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_table_table_operator" ):
                listener.enterJson_table_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_table_table_operator" ):
                listener.exitJson_table_table_operator(self)




    def json_table_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Json_table_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_json_table_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1917
                self.td_sysfnlib()


            self.state = 1920
            self.match(TeradataSQLDataTypesParser.JSON_TABLE)
            self.state = 1921
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1922
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1923
            self.subquery()
            self.state = 1924
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 1925
            self.match(TeradataSQLDataTypesParser.ROWEXPR)
            self.state = 1926
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1927
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 1928
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1929
            self.match(TeradataSQLDataTypesParser.COLEXPR)
            self.state = 1930
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1931
            localctx.col_expr_literal = self.char_string_literal()
            self.state = 1932
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1933
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_KEYS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def json_keys_using_name_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Json_keys_using_name_value_pairContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Json_keys_using_name_value_pairContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_json_keys_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_table_operator" ):
                listener.enterJson_keys_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_table_operator" ):
                listener.exitJson_keys_table_operator(self)




    def json_keys_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Json_keys_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_json_keys_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1935
                self.td_sysfnlib()


            self.state = 1938
            self.match(TeradataSQLDataTypesParser.JSON_KEYS)
            self.state = 1939
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1940
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1941
            self.subquery()
            self.state = 1948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 1942
                self.match(TeradataSQLDataTypesParser.USING)
                self.state = 1944 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1943
                    self.json_keys_using_name_value_pair()
                    self.state = 1946 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1185 or _la==1186):
                        break



            self.state = 1950
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_shred_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.col_expr_literal = list() # of Char_string_literalContexts
            self.return_type = list() # of Char_string_literalContexts
            self.nocase_value = None # Integer_literalContext
            self.truncate_value = None # Integer_literalContext

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_JSONSHRED, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLDataTypesParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNTYPES, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def NOCASE(self):
            return self.getToken(TeradataSQLDataTypesParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUNCATE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_json_shred_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_shred_table_operator" ):
                listener.enterJson_shred_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_shred_table_operator" ):
                listener.exitJson_shred_table_operator(self)




    def json_shred_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Json_shred_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_json_shred_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 1952
                self.td_sysfnlib()


            self.state = 1955
            self.match(TeradataSQLDataTypesParser.TD_JSONSHRED)
            self.state = 1956
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1957
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 1958
            self.subquery()
            self.state = 1959
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 1960
            self.match(TeradataSQLDataTypesParser.ROWEXPR)
            self.state = 1961
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1962
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 1963
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1964
            self.match(TeradataSQLDataTypesParser.COLEXPR)
            self.state = 1965
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1966
            localctx._char_string_literal = self.char_string_literal()
            localctx.col_expr_literal.append(localctx._char_string_literal)
            self.state = 1971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1967
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1968
                localctx._char_string_literal = self.char_string_literal()
                localctx.col_expr_literal.append(localctx._char_string_literal)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1974
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1975
            self.match(TeradataSQLDataTypesParser.RETURNTYPES)
            self.state = 1976
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 1977
            localctx._char_string_literal = self.char_string_literal()
            localctx.return_type.append(localctx._char_string_literal)
            self.state = 1982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1978
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 1979
                localctx._char_string_literal = self.char_string_literal()
                localctx.return_type.append(localctx._char_string_literal)
                self.state = 1984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1985
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 1991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1190:
                self.state = 1986
                self.match(TeradataSQLDataTypesParser.NOCASE)
                self.state = 1987
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1988
                localctx.nocase_value = self.integer_literal()
                self.state = 1989
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 1998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1191:
                self.state = 1993
                self.match(TeradataSQLDataTypesParser.TRUNCATE)
                self.state = 1994
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 1995
                localctx.truncate_value = self.integer_literal()
                self.state = 1996
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 2000
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def table_operator_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Table_operator_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_on_clauseContext,i)


        def table_operator_execute_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_execute_clauseContext,0)


        def table_operator_out_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Table_operator_out_table_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_out_table_clauseContext,i)


        def table_operator_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_generic_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_table_operator" ):
                listener.enterGeneric_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_table_operator" ):
                listener.exitGeneric_table_operator(self)




    def generic_table_operator(self):

        localctx = TeradataSQLDataTypesParser.Generic_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_generic_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.table_name()
            self.state = 2003
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==286:
                self.state = 2004
                self.table_operator_on_clause()
                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 2010
                self.table_operator_execute_clause()


            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2013
                self.table_operator_out_table_clause()
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2019
                self.table_operator_using_clause()


            self.state = 2022
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def hash_or_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Hash_or_partition_byContext,0)


        def DIMENSION(self):
            return self.getToken(TeradataSQLDataTypesParser.DIMENSION, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_fullContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_operator_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_on_clause" ):
                listener.enterTable_operator_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_on_clause" ):
                listener.exitTable_operator_on_clause(self)




    def table_operator_on_clause(self):

        localctx = TeradataSQLDataTypesParser.Table_operator_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_table_operator_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 2027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2025
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 2026
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2029
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 2030
                self.alias_name()


            self.state = 2035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 840]:
                self.state = 2033
                self.hash_or_partition_by()
                pass
            elif token in [635]:
                self.state = 2034
                self.match(TeradataSQLDataTypesParser.DIMENSION)
                pass
            elif token in [144, 224, 286, 291, 293, 352, 457, 542, 569, 625, 871, 1214]:
                pass
            else:
                pass
            self.state = 2050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 2037
                    self.match(TeradataSQLDataTypesParser.LOCAL)


                self.state = 2040
                self.match(TeradataSQLDataTypesParser.ORDER)
                self.state = 2041
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 2042
                self.order_by_spec_full()
                self.state = 2047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2043
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2044
                    self.order_by_spec_full()
                    self.state = 2049
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext

        def EXECUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXECUTE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLDataTypesParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.EQUALS_SIGN, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_operator_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_execute_clause" ):
                listener.enterTable_operator_execute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_execute_clause" ):
                listener.exitTable_operator_execute_clause(self)




    def table_operator_execute_clause(self):

        localctx = TeradataSQLDataTypesParser.Table_operator_execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_table_operator_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2052
            self.match(TeradataSQLDataTypesParser.EXECUTE)
            self.state = 2053
            self.match(TeradataSQLDataTypesParser.MAP)
            self.state = 2054
            self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
            self.state = 2055
            localctx.map_name = self.char_string_literal()
            self.state = 2060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 2056
                self.match(TeradataSQLDataTypesParser.COLOCATE)
                self.state = 2057
                self.match(TeradataSQLDataTypesParser.USING)
                self.state = 2058
                self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                self.state = 2059
                localctx.colocation_name = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_out_table_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def OUT(self):
            return self.getToken(TeradataSQLDataTypesParser.OUT, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_operator_out_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_out_table_clause" ):
                listener.enterTable_operator_out_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_out_table_clause" ):
                listener.exitTable_operator_out_table_clause(self)




    def table_operator_out_table_clause(self):

        localctx = TeradataSQLDataTypesParser.Table_operator_out_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_table_operator_out_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.match(TeradataSQLDataTypesParser.OUT)
            self.state = 2063
            self.match(TeradataSQLDataTypesParser.TABLE)
            self.state = 2064
            localctx.name = self.unqualified_name()
            self.state = 2065
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2066
            self.table_name()
            self.state = 2067
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def table_operator_using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Table_operator_using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_operator_using_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_operator_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_clause" ):
                listener.enterTable_operator_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_clause" ):
                listener.exitTable_operator_using_clause(self)




    def table_operator_using_clause(self):

        localctx = TeradataSQLDataTypesParser.Table_operator_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_table_operator_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 2071 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2070
                self.table_operator_using_spec()
                self.state = 2073 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_table_operator_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_spec" ):
                listener.enterTable_operator_using_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_spec" ):
                listener.exitTable_operator_using_spec(self)




    def table_operator_using_spec(self):

        localctx = TeradataSQLDataTypesParser.Table_operator_using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_table_operator_using_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            localctx.name = self.unqualified_name()
            self.state = 2078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
            if la_ == 1:
                self.state = 2076
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 2077
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_using_name_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLDataTypesParser.QUOTES, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_json_keys_using_name_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_using_name_value_pair" ):
                listener.enterJson_keys_using_name_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_using_name_value_pair" ):
                listener.exitJson_keys_using_name_value_pair(self)




    def json_keys_using_name_value_pair(self):

        localctx = TeradataSQLDataTypesParser.Json_keys_using_name_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_json_keys_using_name_value_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            _la = self._input.LA(1)
            if not(_la==1185 or _la==1186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2081
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2082
            localctx.value = self.scalar_expr(0)
            self.state = 2083
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_or_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def HASH(self):
            return self.getToken(TeradataSQLDataTypesParser.HASH, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLDataTypesParser.PARTITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def ANY(self):
            return self.getToken(TeradataSQLDataTypesParser.ANY, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_hash_or_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_or_partition_by" ):
                listener.enterHash_or_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_or_partition_by" ):
                listener.exitHash_or_partition_by(self)




    def hash_or_partition_by(self):

        localctx = TeradataSQLDataTypesParser.Hash_or_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_hash_or_partition_by)
        self._la = 0 # Token type
        try:
            self.state = 2098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2085
                _la = self._input.LA(1)
                if not(_la==178 or _la==840):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2086
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 2087
                self.scalar_expr(0)
                self.state = 2092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2088
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2089
                    self.scalar_expr(0)
                    self.state = 2094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self.match(TeradataSQLDataTypesParser.PARTITION)
                self.state = 2096
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 2097
                self.match(TeradataSQLDataTypesParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_subquery_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_reference" ):
                listener.enterSubquery_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_reference" ):
                listener.exitSubquery_reference(self)




    def subquery_reference(self):

        localctx = TeradataSQLDataTypesParser.Subquery_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_subquery_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2100
            self.subquery()
            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2101
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 2104
            self.alias_name()
            self.state = 2106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 2105
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_path = None # Token

        def LOCATION(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation" ):
                listener.enterLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation" ):
                listener.exitLocation(self)




    def location(self):

        localctx = TeradataSQLDataTypesParser.LocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_location)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(TeradataSQLDataTypesParser.LOCATION)
            self.state = 2109
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2110
            localctx.external_file_path = self.match(TeradataSQLDataTypesParser.CHAR_STRING)
            self.state = 2111
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.buffer_size = None # Char_string_literalContext
            self.return_type = None # Char_string_literalContext
            self.row_sampling_value = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.fullscan = None # Char_string_literalContext
            self.manifest = None # Char_string_literalContext
            self.row_format = None # Char_string_literalContext
            self.header = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDataTypesParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLDataTypesParser.SAMPLE_PERC, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLDataTypesParser.STOREDAS, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLDataTypesParser.FULLSCAN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLDataTypesParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWFORMAT, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLDataTypesParser.HEADER, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_read_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_option" ):
                listener.enterRead_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_option" ):
                listener.exitRead_nos_option(self)




    def read_nos_option(self):

        localctx = TeradataSQLDataTypesParser.Read_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_read_nos_option)
        try:
            self.state = 2161
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2113
                self.match(TeradataSQLDataTypesParser.AUTHORIZATION)
                self.state = 2114
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
                if la_ == 1:
                    self.state = 2115
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 2116
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 2119
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2121
                self.match(TeradataSQLDataTypesParser.BUFFERSIZE)
                self.state = 2122
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2123
                localctx.buffer_size = self.char_string_literal()
                self.state = 2124
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2126
                self.match(TeradataSQLDataTypesParser.RETURNTYPE)
                self.state = 2127
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2128
                localctx.return_type = self.char_string_literal()
                self.state = 2129
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1157]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2131
                self.match(TeradataSQLDataTypesParser.SAMPLE_PERC)
                self.state = 2132
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2133
                localctx.row_sampling_value = self.char_string_literal()
                self.state = 2134
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2136
                self.match(TeradataSQLDataTypesParser.STOREDAS)
                self.state = 2137
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2138
                localctx.stored_as = self.char_string_literal()
                self.state = 2139
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1158]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2141
                self.match(TeradataSQLDataTypesParser.FULLSCAN)
                self.state = 2142
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2143
                localctx.fullscan = self.char_string_literal()
                self.state = 2144
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2146
                self.match(TeradataSQLDataTypesParser.MANIFEST)
                self.state = 2147
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2148
                localctx.manifest = self.char_string_literal()
                self.state = 2149
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2151
                self.match(TeradataSQLDataTypesParser.ROWFORMAT)
                self.state = 2152
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2153
                localctx.row_format = self.char_string_literal()
                self.state = 2154
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2156
                self.match(TeradataSQLDataTypesParser.HEADER)
                self.state = 2157
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2158
                localctx.header = self.char_string_literal()
                self.state = 2159
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.naming = None # Char_string_literalContext
            self.manifest_name = None # Char_string_literalContext
            self.manifest_only = None # Char_string_literalContext
            self.overwrite = None # Char_string_literalContext
            self.include_ordering = None # Char_string_literalContext
            self.include_hashby = None # Char_string_literalContext
            self.max_object_size = None # Char_string_literalContext
            self.compression = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLDataTypesParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def STOREDAS(self):
            return self.getToken(TeradataSQLDataTypesParser.STOREDAS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLDataTypesParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLDataTypesParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLDataTypesParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLDataTypesParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLDataTypesParser.COMPRESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_write_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_option" ):
                listener.enterWrite_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_option" ):
                listener.exitWrite_nos_option(self)




    def write_nos_option(self):

        localctx = TeradataSQLDataTypesParser.Write_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_write_nos_option)
        try:
            self.state = 2216
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.match(TeradataSQLDataTypesParser.AUTHORIZATION)
                self.state = 2164
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                if la_ == 1:
                    self.state = 2165
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 2166
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 2169
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2171
                self.match(TeradataSQLDataTypesParser.STOREDAS)
                self.state = 2172
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2173
                localctx.stored_as = self.char_string_literal()
                self.state = 2174
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2176
                self.match(TeradataSQLDataTypesParser.NAMING)
                self.state = 2177
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2178
                localctx.naming = self.char_string_literal()
                self.state = 2179
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2181
                self.match(TeradataSQLDataTypesParser.MANIFESTFILE)
                self.state = 2182
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2183
                localctx.manifest_name = self.char_string_literal()
                self.state = 2184
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2186
                self.match(TeradataSQLDataTypesParser.MANIFESTONLY)
                self.state = 2187
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2188
                localctx.manifest_only = self.char_string_literal()
                self.state = 2189
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2191
                self.match(TeradataSQLDataTypesParser.OVERWRITE)
                self.state = 2192
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2193
                localctx.overwrite = self.char_string_literal()
                self.state = 2194
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2196
                self.match(TeradataSQLDataTypesParser.INCLUDE_ORDERING)
                self.state = 2197
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2198
                localctx.include_ordering = self.char_string_literal()
                self.state = 2199
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1171]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2201
                self.match(TeradataSQLDataTypesParser.INCLUDE_HASHBY)
                self.state = 2202
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2203
                localctx.include_hashby = self.char_string_literal()
                self.state = 2204
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1172]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2206
                self.match(TeradataSQLDataTypesParser.MAXOBJECTSIZE)
                self.state = 2207
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2208
                localctx.max_object_size = self.char_string_literal()
                self.state = 2209
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1173]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2211
                self.match(TeradataSQLDataTypesParser.COMPRESSION)
                self.state = 2212
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2213
                localctx.compression = self.char_string_literal()
                self.state = 2214
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def with_clause_title_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.With_clause_title_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_clause_title_phraseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def with_clause_by_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_clause_by_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = TeradataSQLDataTypesParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2218
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 2219
            self.scalar_expr(0)
            self.state = 2221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 2220
                self.with_clause_title_phrase()


            self.state = 2230
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,265,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2223
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2224
                    self.scalar_expr(0)
                    self.state = 2226
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        self.state = 2225
                        self.with_clause_title_phrase()

             
                self.state = 2232
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,265,self._ctx)

            self.state = 2234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 2233
                self.with_clause_by_phrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_by_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_asc_desc_onlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_clause_by_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_by_phrase" ):
                listener.enterWith_clause_by_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_by_phrase" ):
                listener.exitWith_clause_by_phrase(self)




    def with_clause_by_phrase(self):

        localctx = TeradataSQLDataTypesParser.With_clause_by_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_with_clause_by_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2236
            self.match(TeradataSQLDataTypesParser.BY)
            self.state = 2237
            self.order_by_spec_asc_desc_only()
            self.state = 2242
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,267,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2238
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2239
                    self.order_by_spec_asc_desc_only() 
                self.state = 2244
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,267,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDataTypesParser.TITLE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_clause_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_title_phrase" ):
                listener.enterWith_clause_title_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_title_phrase" ):
                listener.exitWith_clause_title_phrase(self)




    def with_clause_title_phrase(self):

        localctx = TeradataSQLDataTypesParser.With_clause_title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_with_clause_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2246
            self.match(TeradataSQLDataTypesParser.TITLE)
            self.state = 2247
            localctx.title = self.char_string_literal()
            self.state = 2248
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(TeradataSQLDataTypesParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = TeradataSQLDataTypesParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2250
            self.match(TeradataSQLDataTypesParser.WHERE)
            self.state = 2251
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(TeradataSQLDataTypesParser.GROUP, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def group_by_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Group_by_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Group_by_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = TeradataSQLDataTypesParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_group_by_clause)
        try:
            self.state = 2265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2253
                self.match(TeradataSQLDataTypesParser.GROUP)
                self.state = 2254
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 2255
                self.group_by_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2256
                self.match(TeradataSQLDataTypesParser.GROUP)
                self.state = 2257
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 2258
                self.group_by_spec()
                self.state = 2261 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2259
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 2260
                        self.group_by_spec()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2263 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Ordinary_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_group_by_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_spec" ):
                listener.enterGroup_by_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_spec" ):
                listener.exitGroup_by_spec(self)




    def group_by_spec(self):

        localctx = TeradataSQLDataTypesParser.Group_by_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_group_by_spec)
        try:
            self.state = 2271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2267
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2268
                self.rollup_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2269
                self.cube_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2270
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def ordinary_grouping_set_parenthesized(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Ordinary_grouping_set_parenthesizedContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Ordinary_grouping_set_parenthesizedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_ordinary_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set" ):
                listener.enterOrdinary_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set" ):
                listener.exitOrdinary_grouping_set(self)




    def ordinary_grouping_set(self):

        localctx = TeradataSQLDataTypesParser.Ordinary_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_ordinary_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2273
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 2274
                self.ordinary_grouping_set_parenthesized()
                pass


            self.state = 2284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2277
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2280
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                    if la_ == 1:
                        self.state = 2278
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 2279
                        self.ordinary_grouping_set_parenthesized()
                        pass

             
                self.state = 2286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_set_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_ordinary_grouping_set_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set_parenthesized" ):
                listener.enterOrdinary_grouping_set_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set_parenthesized" ):
                listener.exitOrdinary_grouping_set_parenthesized(self)




    def ordinary_grouping_set_parenthesized(self):

        localctx = TeradataSQLDataTypesParser.Ordinary_grouping_set_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_ordinary_grouping_set_parenthesized)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2288
            self.scalar_expr(0)
            self.state = 2291 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2289
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 2290
                self.scalar_expr(0)
                self.state = 2293 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 2295
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = TeradataSQLDataTypesParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2297
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2298
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(TeradataSQLDataTypesParser.ROLLUP, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_rollup_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_option" ):
                listener.enterRollup_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_option" ):
                listener.exitRollup_option(self)




    def rollup_option(self):

        localctx = TeradataSQLDataTypesParser.Rollup_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_rollup_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2300
            self.match(TeradataSQLDataTypesParser.ROLLUP)
            self.state = 2301
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2302
            self.ordinary_grouping_set()
            self.state = 2303
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(TeradataSQLDataTypesParser.CUBE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_cube_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_option" ):
                listener.enterCube_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_option" ):
                listener.exitCube_option(self)




    def cube_option(self):

        localctx = TeradataSQLDataTypesParser.Cube_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_cube_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2305
            self.match(TeradataSQLDataTypesParser.CUBE)
            self.state = 2306
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2307
            self.ordinary_grouping_set()
            self.state = 2308
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(TeradataSQLDataTypesParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(TeradataSQLDataTypesParser.SETS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def grouping_sets_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Grouping_sets_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Grouping_sets_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_grouping_sets_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_option" ):
                listener.enterGrouping_sets_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_option" ):
                listener.exitGrouping_sets_option(self)




    def grouping_sets_option(self):

        localctx = TeradataSQLDataTypesParser.Grouping_sets_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_grouping_sets_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.match(TeradataSQLDataTypesParser.GROUPING)
            self.state = 2311
            self.match(TeradataSQLDataTypesParser.SETS)
            self.state = 2312
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 2313
            self.grouping_sets_spec()
            self.state = 2318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2314
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 2315
                self.grouping_sets_spec()
                self.state = 2320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2321
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Ordinary_grouping_setContext,0)


        def empty_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Empty_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_grouping_sets_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_spec" ):
                listener.enterGrouping_sets_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_spec" ):
                listener.exitGrouping_sets_spec(self)




    def grouping_sets_spec(self):

        localctx = TeradataSQLDataTypesParser.Grouping_sets_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_grouping_sets_spec)
        try:
            self.state = 2328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2323
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2324
                self.empty_grouping_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2325
                self.rollup_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2326
                self.cube_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2327
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(TeradataSQLDataTypesParser.HAVING, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = TeradataSQLDataTypesParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(TeradataSQLDataTypesParser.HAVING)
            self.state = 2331
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualify_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(TeradataSQLDataTypesParser.QUALIFY, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_qualify_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualify_clause" ):
                listener.enterQualify_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualify_clause" ):
                listener.exitQualify_clause(self)




    def qualify_clause(self):

        localctx = TeradataSQLDataTypesParser.Qualify_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_qualify_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self.match(TeradataSQLDataTypesParser.QUALIFY)
            self.state = 2334
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(TeradataSQLDataTypesParser.SAMPLE, 0)

        def sample_fraction_description(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Sample_fraction_descriptionContext,0)


        def sample_count_description(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Sample_count_descriptionContext,0)


        def sample_when_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Sample_when_clauseContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.REPLACEMENT, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLDataTypesParser.RANDOMIZED, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLDataTypesParser.ALLOCATION, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = TeradataSQLDataTypesParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2336
            self.match(TeradataSQLDataTypesParser.SAMPLE)
            self.state = 2339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2337
                self.match(TeradataSQLDataTypesParser.WITH)
                self.state = 2338
                self.match(TeradataSQLDataTypesParser.REPLACEMENT)


            self.state = 2343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==872:
                self.state = 2341
                self.match(TeradataSQLDataTypesParser.RANDOMIZED)
                self.state = 2342
                self.match(TeradataSQLDataTypesParser.ALLOCATION)


            self.state = 2348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1197]:
                self.state = 2345
                self.sample_fraction_description()
                pass
            elif token in [1194]:
                self.state = 2346
                self.sample_count_description()
                pass
            elif token in [470]:
                self.state = 2347
                self.sample_when_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_fraction_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._float_literal = None # Float_literalContext
            self.fraction_description = list() # of Float_literalContexts

        def float_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Float_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Float_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_sample_fraction_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_fraction_description" ):
                listener.enterSample_fraction_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_fraction_description" ):
                listener.exitSample_fraction_description(self)




    def sample_fraction_description(self):

        localctx = TeradataSQLDataTypesParser.Sample_fraction_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_sample_fraction_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            localctx._float_literal = self.float_literal()
            localctx.fraction_description.append(localctx._float_literal)
            self.state = 2355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2351
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2352
                    localctx._float_literal = self.float_literal()
                    localctx.fraction_description.append(localctx._float_literal) 
                self.state = 2357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_count_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.count_description = list() # of Integer_literalContexts

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_sample_count_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_count_description" ):
                listener.enterSample_count_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_count_description" ):
                listener.exitSample_count_description(self)




    def sample_count_description(self):

        localctx = TeradataSQLDataTypesParser.Sample_count_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_sample_count_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            localctx._integer_literal = self.integer_literal()
            localctx.count_description.append(localctx._integer_literal)
            self.state = 2363
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2359
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2360
                    localctx._integer_literal = self.integer_literal()
                    localctx.count_description.append(localctx._integer_literal) 
                self.state = 2365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_when_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLDataTypesParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.WHEN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.THEN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDataTypesParser.ELSE, 0)

        def sample_fraction_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Sample_fraction_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Sample_fraction_descriptionContext,i)


        def sample_count_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Sample_count_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Sample_count_descriptionContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_sample_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_when_clause" ):
                listener.enterSample_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_when_clause" ):
                listener.exitSample_when_clause(self)




    def sample_when_clause(self):

        localctx = TeradataSQLDataTypesParser.Sample_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_sample_when_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2366
                self.match(TeradataSQLDataTypesParser.WHEN)
                self.state = 2367
                self.logical_expr(0)
                self.state = 2368
                self.match(TeradataSQLDataTypesParser.THEN)
                self.state = 2371
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 2369
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 2370
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2375 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 2377
                self.match(TeradataSQLDataTypesParser.ELSE)
                self.state = 2380
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 2378
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 2379
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2384
            self.match(TeradataSQLDataTypesParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expand_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expand_expr = None # Scalar_exprContext
            self.expand_column_alias = None # Alias_nameContext
            self.period_expression = None # Scalar_exprContext

        def EXPAND(self):
            return self.getToken(TeradataSQLDataTypesParser.EXPAND, 0)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDataTypesParser.FOR, 0)

        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_literalContext,0)


        def ANCHOR(self):
            return self.getToken(TeradataSQLDataTypesParser.ANCHOR, 0)

        def anchor_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Anchor_nameContext,0)


        def PERIOD(self):
            return self.getToken(TeradataSQLDataTypesParser.PERIOD, 0)

        def AT(self):
            return self.getToken(TeradataSQLDataTypesParser.AT, 0)

        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Time_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_expand_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpand_on_clause" ):
                listener.enterExpand_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpand_on_clause" ):
                listener.exitExpand_on_clause(self)




    def expand_on_clause(self):

        localctx = TeradataSQLDataTypesParser.Expand_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_expand_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self.match(TeradataSQLDataTypesParser.EXPAND)
            self.state = 2387
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 2388
            localctx.expand_expr = self.scalar_expr(0)
            self.state = 2390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2389
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 2392
            localctx.expand_column_alias = self.alias_name()
            self.state = 2406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.state = 2393
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 2404
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [205]:
                    self.state = 2394
                    self.interval_literal()
                    pass
                elif token in [505]:
                    self.state = 2395
                    self.match(TeradataSQLDataTypesParser.ANCHOR)
                    self.state = 2397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==853:
                        self.state = 2396
                        self.match(TeradataSQLDataTypesParser.PERIOD)


                    self.state = 2399
                    self.anchor_name()
                    self.state = 2402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                    if la_ == 1:
                        self.state = 2400
                        self.match(TeradataSQLDataTypesParser.AT)
                        self.state = 2401
                        self.time_literal()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.state = 2408
                self.match(TeradataSQLDataTypesParser.FOR)
                self.state = 2409
                localctx.period_expression = self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TeradataSQLDataTypesParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2412
            self.match(TeradataSQLDataTypesParser.ORDER)
            self.state = 2413
            self.match(TeradataSQLDataTypesParser.BY)
            self.state = 2414
            self.order_by_spec_full()
            self.state = 2419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2415
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2416
                    self.order_by_spec_full() 
                self.state = 2421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_fullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDataTypesParser.NULLS, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDataTypesParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDataTypesParser.DESC, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLDataTypesParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_order_by_spec_full

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_full" ):
                listener.enterOrder_by_spec_full(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_full" ):
                listener.exitOrder_by_spec_full(self)




    def order_by_spec_full(self):

        localctx = TeradataSQLDataTypesParser.Order_by_spec_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_order_by_spec_full)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2422
            self.scalar_expr(0)
            self.state = 2424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2423
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2426
                self.match(TeradataSQLDataTypesParser.NULLS)
                self.state = 2427
                _la = self._input.LA(1)
                if not(_la==156 or _la==731):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_asc_desc_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def ASC(self):
            return self.getToken(TeradataSQLDataTypesParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDataTypesParser.DESC, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_order_by_spec_asc_desc_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_asc_desc_only" ):
                listener.enterOrder_by_spec_asc_desc_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_asc_desc_only" ):
                listener.exitOrder_by_spec_asc_desc_only(self)




    def order_by_spec_asc_desc_only(self):

        localctx = TeradataSQLDataTypesParser.Order_by_spec_asc_desc_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_order_by_spec_asc_desc_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.scalar_expr(0)
            self.state = 2432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2431
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_check_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLDataTypesParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLDataTypesParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_check_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_check_option" ):
                listener.enterWith_check_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_check_option" ):
                listener.exitWith_check_option(self)




    def with_check_option(self):

        localctx = TeradataSQLDataTypesParser.With_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_with_check_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2434
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 2435
            self.match(TeradataSQLDataTypesParser.CHECK)
            self.state = 2436
            self.match(TeradataSQLDataTypesParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_logical_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PeriodMeetsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def MEETS(self):
            return self.getToken(TeradataSQLDataTypesParser.MEETS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodMeets" ):
                listener.enterPeriodMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodMeets" ):
                listener.exitPeriodMeets(self)


    class PeriodImmediatelySucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDataTypesParser.IMMEDIATELY, 0)
        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDataTypesParser.SUCCEEDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelySucceeds" ):
                listener.enterPeriodImmediatelySucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelySucceeds" ):
                listener.exitPeriodImmediatelySucceeds(self)


    class PeriodEqualsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def EQUALS(self):
            return self.getToken(TeradataSQLDataTypesParser.EQUALS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodEquals" ):
                listener.enterPeriodEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodEquals" ):
                listener.exitPeriodEquals(self)


    class ScalarComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarComparelist" ):
                listener.enterScalarComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarComparelist" ):
                listener.exitScalarComparelist(self)


    class TupleInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.TupleContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDataTypesParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleInSubquery" ):
                listener.enterTupleInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleInSubquery" ):
                listener.exitTupleInSubquery(self)


    class LogicalOrContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,i)

        def OR(self):
            return self.getToken(TeradataSQLDataTypesParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOr" ):
                listener.enterLogicalOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOr" ):
                listener.exitLogicalOr(self)


    class ScalarInScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)
        def IS(self):
            return self.getToken(TeradataSQLDataTypesParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInScalar" ):
                listener.enterScalarInScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInScalar" ):
                listener.exitScalarInScalar(self)


    class ScalarCompareScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarCompareScalar" ):
                listener.enterScalarCompareScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarCompareScalar" ):
                listener.exitScalarCompareScalar(self)


    class LogicalNotContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class TupleComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.TupleContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleComparelist" ):
                listener.enterTupleComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleComparelist" ):
                listener.exitTupleComparelist(self)


    class ScalarInListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)
        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_expr_listContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDataTypesParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInList" ):
                listener.enterScalarInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInList" ):
                listener.exitScalarInList(self)


    class TupleLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.TupleContext,0)

        def LIKE(self):
            return self.getToken(TeradataSQLDataTypesParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDataTypesParser.ESCAPE, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleLikeList" ):
                listener.enterTupleLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleLikeList" ):
                listener.exitTupleLikeList(self)


    class LogicalAndContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,i)

        def AND(self):
            return self.getToken(TeradataSQLDataTypesParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAnd" ):
                listener.enterLogicalAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAnd" ):
                listener.exitLogicalAnd(self)


    class ScalarInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDataTypesParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInSubquery" ):
                listener.enterScalarInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInSubquery" ):
                listener.exitScalarInSubquery(self)


    class PeriodContainsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def CONTAINS(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTAINS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodContains" ):
                listener.enterPeriodContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodContains" ):
                listener.exitPeriodContains(self)


    class PeriodOverlapsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLDataTypesParser.OVERLAPS, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)
        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)
        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodOverlaps" ):
                listener.enterPeriodOverlaps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodOverlaps" ):
                listener.exitPeriodOverlaps(self)


    class BetweenContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDataTypesParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(TeradataSQLDataTypesParser.AND, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class ParenthesizedLogicalExprContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedLogicalExpr" ):
                listener.enterParenthesizedLogicalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedLogicalExpr" ):
                listener.exitParenthesizedLogicalExpr(self)


    class PeriodImmediatelyPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLDataTypesParser.IMMEDIATELY, 0)
        def PRECEDES(self):
            return self.getToken(TeradataSQLDataTypesParser.PRECEDES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelyPrecedes" ):
                listener.enterPeriodImmediatelyPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelyPrecedes" ):
                listener.exitPeriodImmediatelyPrecedes(self)


    class NullCheckContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def IS(self):
            return self.getToken(TeradataSQLDataTypesParser.IS, 0)
        def NULL(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCheck" ):
                listener.enterNullCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCheck" ):
                listener.exitNullCheck(self)


    class PeriodPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def PRECEDES(self):
            return self.getToken(TeradataSQLDataTypesParser.PRECEDES, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodPrecedes" ):
                listener.enterPeriodPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodPrecedes" ):
                listener.exitPeriodPrecedes(self)


    class ExistsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(TeradataSQLDataTypesParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PeriodSucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLDataTypesParser.SUCCEEDS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodSucceeds" ):
                listener.enterPeriodSucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodSucceeds" ):
                listener.exitPeriodSucceeds(self)


    class ScalarLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDataTypesParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLDataTypesParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeList" ):
                listener.enterScalarLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeList" ):
                listener.exitScalarLikeList(self)


    class ScalarLikeScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLDataTypesParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(TeradataSQLDataTypesParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLDataTypesParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeScalar" ):
                listener.enterScalarLikeScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeScalar" ):
                listener.exitScalarLikeScalar(self)



    def logical_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDataTypesParser.Logical_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 306
        self.enterRecursionRule(localctx, 306, self.RULE_logical_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDataTypesParser.ScalarCompareScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2439
                self.scalar_expr(0)
                self.state = 2440
                localctx.op = self.comparison_operator()
                self.state = 2441
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                localctx = TeradataSQLDataTypesParser.ScalarComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2443
                self.scalar_expr(0)
                self.state = 2444
                localctx.op = self.comparison_operator()
                self.state = 2445
                self.quantifier()
                self.state = 2446
                self.elements_list()
                self.state = 2450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2447
                        self.attribute_modification() 
                    self.state = 2452
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,296,self._ctx)

                pass

            elif la_ == 3:
                localctx = TeradataSQLDataTypesParser.TupleComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2453
                self.tuple_()
                self.state = 2454
                localctx.op = self.comparison_operator()
                self.state = 2455
                self.quantifier()
                self.state = 2456
                self.elements_list()
                self.state = 2460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2457
                        self.attribute_modification() 
                    self.state = 2462
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,297,self._ctx)

                pass

            elif la_ == 4:
                localctx = TeradataSQLDataTypesParser.BetweenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2463
                self.scalar_expr(0)
                self.state = 2465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2464
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2467
                self.match(TeradataSQLDataTypesParser.BETWEEN)
                self.state = 2468
                self.scalar_expr(0)
                self.state = 2469
                self.match(TeradataSQLDataTypesParser.AND)
                self.state = 2470
                self.scalar_expr(0)
                pass

            elif la_ == 5:
                localctx = TeradataSQLDataTypesParser.ScalarInListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2472
                self.scalar_expr(0)
                self.state = 2474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2473
                    self.match(TeradataSQLDataTypesParser.IS)


                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2476
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2479
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 2481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 2480
                    self.quantifier()


                self.state = 2483
                self.scalar_expr_list()
                self.state = 2487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2484
                        self.attribute_modification() 
                    self.state = 2489
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

                pass

            elif la_ == 6:
                localctx = TeradataSQLDataTypesParser.ScalarInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2490
                self.scalar_expr(0)
                self.state = 2492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2491
                    self.match(TeradataSQLDataTypesParser.IS)


                self.state = 2495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2494
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2497
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 2498
                    self.quantifier()


                self.state = 2501
                self.subquery()
                self.state = 2505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2502
                        self.attribute_modification() 
                    self.state = 2507
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                pass

            elif la_ == 7:
                localctx = TeradataSQLDataTypesParser.ScalarInScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2508
                self.scalar_expr(0)
                self.state = 2510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2509
                    self.match(TeradataSQLDataTypesParser.IS)


                self.state = 2513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2512
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2515
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 2517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 2516
                    self.quantifier()


                self.state = 2519
                self.scalar_expr(0)
                self.state = 2523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2520
                        self.attribute_modification() 
                    self.state = 2525
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

                pass

            elif la_ == 8:
                localctx = TeradataSQLDataTypesParser.TupleInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2526
                self.tuple_()
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 2527
                    self.match(TeradataSQLDataTypesParser.IS)


                self.state = 2531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2530
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2533
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 2535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 2534
                    self.quantifier()


                self.state = 2537
                self.subquery()
                self.state = 2541
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2538
                        self.attribute_modification() 
                    self.state = 2543
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

                pass

            elif la_ == 9:
                localctx = TeradataSQLDataTypesParser.ScalarLikeScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2544
                self.scalar_expr(0)
                self.state = 2546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2545
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2548
                self.match(TeradataSQLDataTypesParser.LIKE)
                self.state = 2549
                self.scalar_expr(0)
                self.state = 2552
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 2550
                    self.match(TeradataSQLDataTypesParser.ESCAPE)
                    self.state = 2551
                    self.scalar_expr(0)


                pass

            elif la_ == 10:
                localctx = TeradataSQLDataTypesParser.ScalarLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2554
                self.scalar_expr(0)
                self.state = 2556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2555
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2558
                self.match(TeradataSQLDataTypesParser.LIKE)
                self.state = 2559
                self.quantifier()
                self.state = 2560
                self.elements_list()
                self.state = 2564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2561
                        self.attribute_modification() 
                    self.state = 2566
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

                self.state = 2569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 2567
                    self.match(TeradataSQLDataTypesParser.ESCAPE)
                    self.state = 2568
                    self.scalar_expr(0)


                self.state = 2574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2571
                        self.attribute_modification() 
                    self.state = 2576
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

                pass

            elif la_ == 11:
                localctx = TeradataSQLDataTypesParser.TupleLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2577
                self.tuple_()
                self.state = 2579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2578
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2581
                self.match(TeradataSQLDataTypesParser.LIKE)
                self.state = 2582
                self.quantifier()
                self.state = 2583
                self.elements_list()
                self.state = 2587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2584
                        self.attribute_modification() 
                    self.state = 2589
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

                self.state = 2592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2590
                    self.match(TeradataSQLDataTypesParser.ESCAPE)
                    self.state = 2591
                    self.scalar_expr(0)


                self.state = 2597
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,324,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2594
                        self.attribute_modification() 
                    self.state = 2599
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,324,self._ctx)

                pass

            elif la_ == 12:
                localctx = TeradataSQLDataTypesParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2600
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2603
                self.match(TeradataSQLDataTypesParser.EXISTS)
                self.state = 2604
                self.subquery()
                pass

            elif la_ == 13:
                localctx = TeradataSQLDataTypesParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2605
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2606
                self.logical_expr(13)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDataTypesParser.NullCheckContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2607
                self.scalar_expr(0)
                self.state = 2608
                self.match(TeradataSQLDataTypesParser.IS)
                self.state = 2610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2609
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2612
                self.match(TeradataSQLDataTypesParser.NULL)
                pass

            elif la_ == 15:
                localctx = TeradataSQLDataTypesParser.PeriodContainsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2614
                self.scalar_expr(0)
                self.state = 2616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2615
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2618
                self.match(TeradataSQLDataTypesParser.CONTAINS)
                self.state = 2619
                self.scalar_expr(0)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDataTypesParser.PeriodEqualsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2621
                self.scalar_expr(0)
                self.state = 2623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2622
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2625
                self.match(TeradataSQLDataTypesParser.EQUALS)
                self.state = 2626
                self.scalar_expr(0)
                pass

            elif la_ == 17:
                localctx = TeradataSQLDataTypesParser.PeriodMeetsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2628
                self.scalar_expr(0)
                self.state = 2630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2629
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2632
                self.match(TeradataSQLDataTypesParser.MEETS)
                self.state = 2633
                self.scalar_expr(0)
                pass

            elif la_ == 18:
                localctx = TeradataSQLDataTypesParser.PeriodPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2635
                self.scalar_expr(0)
                self.state = 2637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2636
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2639
                self.match(TeradataSQLDataTypesParser.PRECEDES)
                self.state = 2640
                self.scalar_expr(0)
                pass

            elif la_ == 19:
                localctx = TeradataSQLDataTypesParser.PeriodSucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2642
                self.scalar_expr(0)
                self.state = 2644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 2643
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2646
                self.match(TeradataSQLDataTypesParser.SUCCEEDS)
                self.state = 2647
                self.scalar_expr(0)
                pass

            elif la_ == 20:
                localctx = TeradataSQLDataTypesParser.PeriodImmediatelyPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2649
                self.scalar_expr(0)
                self.state = 2650
                self.match(TeradataSQLDataTypesParser.IMMEDIATELY)
                self.state = 2651
                self.match(TeradataSQLDataTypesParser.PRECEDES)
                self.state = 2652
                self.scalar_expr(0)
                pass

            elif la_ == 21:
                localctx = TeradataSQLDataTypesParser.PeriodImmediatelySucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2654
                self.scalar_expr(0)
                self.state = 2655
                self.match(TeradataSQLDataTypesParser.IMMEDIATELY)
                self.state = 2656
                self.match(TeradataSQLDataTypesParser.SUCCEEDS)
                self.state = 2657
                self.scalar_expr(0)
                pass

            elif la_ == 22:
                localctx = TeradataSQLDataTypesParser.PeriodOverlapsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
                if la_ == 1:
                    self.state = 2659
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2660
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 2661
                    self.scalar_expr(0)
                    self.state = 2662
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2663
                    self.scalar_expr(0)
                    self.state = 2664
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 2666
                    self.subquery()
                    pass


                self.state = 2669
                self.match(TeradataSQLDataTypesParser.OVERLAPS)
                self.state = 2678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 2670
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2671
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 2672
                    self.scalar_expr(0)
                    self.state = 2673
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2674
                    self.scalar_expr(0)
                    self.state = 2675
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 2677
                    self.subquery()
                    pass


                pass

            elif la_ == 23:
                localctx = TeradataSQLDataTypesParser.ParenthesizedLogicalExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2680
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2681
                self.logical_expr(0)
                self.state = 2682
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2694
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2692
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDataTypesParser.LogicalAndContext(self, TeradataSQLDataTypesParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 2686
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 2687
                        self.match(TeradataSQLDataTypesParser.AND)
                        self.state = 2688
                        self.logical_expr(13)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDataTypesParser.LogicalOrContext(self, TeradataSQLDataTypesParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 2689
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 2690
                        self.match(TeradataSQLDataTypesParser.OR)
                        self.state = 2691
                        self.logical_expr(12)
                        pass

             
                self.state = 2696
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Scalar_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_scalar_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JsonMetadataContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.storage_format = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def METADATA(self):
            return self.getToken(TeradataSQLDataTypesParser.METADATA, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.STORAGE_SIZE, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMetadata" ):
                listener.enterJsonMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMetadata" ):
                listener.exitJsonMetadata(self)


    class JsonAsBsonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.validation_specification = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ASBSON(self):
            return self.getToken(TeradataSQLDataTypesParser.ASBSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBson" ):
                listener.enterJsonAsBson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBson" ):
                listener.exitJsonAsBson(self)


    class VariantTypeConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDataTypesParser.NEW, 0)
        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.VARIANT_TYPE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.AS)
            else:
                return self.getToken(TeradataSQLDataTypesParser.AS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantTypeConstructor" ):
                listener.enterVariantTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantTypeConstructor" ):
                listener.exitVariantTypeConstructor(self)


    class XMLExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExtract" ):
                listener.enterXMLExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExtract" ):
                listener.exitXMLExtract(self)


    class ArrayComparisonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GT, 0)
        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GE, 0)
        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_LT, 0)
        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_LE, 0)
        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_EQ, 0)
        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_NE, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayComparison" ):
                listener.enterArrayComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayComparison" ):
                listener.exitArrayComparison(self)


    class ArrayGetContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.array_index = None # Scalar_exprContext
            self.other_expr = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GET, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_COMPARE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayGet" ):
                listener.enterArrayGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayGet" ):
                listener.exitArrayGet(self)


    class XMLConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDataTypesParser.NEW, 0)
        def XML(self):
            return self.getToken(TeradataSQLDataTypesParser.XML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLConstructor" ):
                listener.enterXMLConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLConstructor" ):
                listener.exitXMLConstructor(self)


    class UDTMethodInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Method_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTMethodInvocation" ):
                listener.enterUDTMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTMethodInvocation" ):
                listener.exitUDTMethodInvocation(self)


    class JsonExtractLargeValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONEXTRACTLARGEVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractLargeValue" ):
                listener.enterJsonExtractLargeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractLargeValue" ):
                listener.exitJsonExtractLargeValue(self)


    class JsonRecursiveDescendSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.DOT_)
            else:
                return self.getToken(TeradataSQLDataTypesParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COLON)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendSlice" ):
                listener.enterJsonRecursiveDescendSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendSlice" ):
                listener.exitJsonRecursiveDescendSlice(self)


    class FunctionInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_invocation(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Function_invocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)


    class ScalarSubqueryContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSubquery" ):
                listener.enterScalarSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSubquery" ):
                listener.exitScalarSubquery(self)


    class JsonExistValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def EXISTVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXISTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistValue" ):
                listener.enterJsonExistValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistValue" ):
                listener.exitJsonExistValue(self)


    class ModuloContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def MOD(self):
            return self.getToken(TeradataSQLDataTypesParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)


    class JsonExtractValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONEXTRACTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractValue" ):
                listener.enterJsonExtractValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractValue" ):
                listener.exitJsonExtractValue(self)


    class XMLCreateSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATESCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateSchemaBasedXML" ):
                listener.enterXMLCreateSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateSchemaBasedXML" ):
                listener.exitXMLCreateSchemaBasedXML(self)


    class ArrayUpdateContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_UPDATE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdate" ):
                listener.enterArrayUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdate" ):
                listener.exitArrayUpdate(self)


    class JsonExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtract" ):
                listener.enterJsonExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtract" ):
                listener.exitJsonExtract(self)


    class MultDivContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)
        def DIV_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.DIV_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDiv" ):
                listener.enterMultDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDiv" ):
                listener.exitMultDiv(self)


    class PeriodIntersectContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLDataTypesParser.P_INTERSECT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodIntersect" ):
                listener.enterPeriodIntersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodIntersect" ):
                listener.exitPeriodIntersect(self)


    class IntervalExprParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval_expr_parenthesized(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_expr_parenthesizedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExprParenthesized" ):
                listener.enterIntervalExprParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExprParenthesized" ):
                listener.exitIntervalExprParenthesized(self)


    class JsonRecursiveDescendAllArrayElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.DOT_)
            else:
                return self.getToken(TeradataSQLDataTypesParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllArrayElements" ):
                listener.enterJsonRecursiveDescendAllArrayElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllArrayElements" ):
                listener.exitJsonRecursiveDescendAllArrayElements(self)


    class UnaryPlusMinusContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusMinus" ):
                listener.enterUnaryPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusMinus" ):
                listener.exitUnaryPlusMinus(self)


    class ConcatenationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def CONCATENATE(self):
            return self.getToken(TeradataSQLDataTypesParser.CONCATENATE, 0)
        def BROKEN_CONCATENATE(self):
            return self.getToken(TeradataSQLDataTypesParser.BROKEN_CONCATENATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class PeriodDiffContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def LDIFF(self):
            return self.getToken(TeradataSQLDataTypesParser.LDIFF, 0)
        def RDIFF(self):
            return self.getToken(TeradataSQLDataTypesParser.RDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodDiff" ):
                listener.enterPeriodDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodDiff" ):
                listener.exitPeriodDiff(self)


    class ArrayOmethodWithoudArgsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def OCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.OCOUNT, 0)
        def OLIMIT(self):
            return self.getToken(TeradataSQLDataTypesParser.OLIMIT, 0)
        def OFIRST(self):
            return self.getToken(TeradataSQLDataTypesParser.OFIRST, 0)
        def OLAST(self):
            return self.getToken(TeradataSQLDataTypesParser.OLAST, 0)
        def ODELETE(self):
            return self.getToken(TeradataSQLDataTypesParser.ODELETE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithoudArgs" ):
                listener.enterArrayOmethodWithoudArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithoudArgs" ):
                listener.exitArrayOmethodWithoudArgs(self)


    class PartitioningExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Partitioning_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningExpr" ):
                listener.enterPartitioningExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningExpr" ):
                listener.exitPartitioningExpr(self)


    class XMLExistNodeContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def EXISTSNODE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXISTSNODE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExistNode" ):
                listener.enterXMLExistNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExistNode" ):
                listener.exitXMLExistNode(self)


    class JsonRecursiveDescendArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.DOT_)
            else:
                return self.getToken(TeradataSQLDataTypesParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendArrayElementReference" ):
                listener.enterJsonRecursiveDescendArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendArrayElementReference" ):
                listener.exitJsonRecursiveDescendArrayElementReference(self)


    class DataTypeConversionContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def teradata_type_conversion(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Teradata_type_conversionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeConversion" ):
                listener.enterDataTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeConversion" ):
                listener.exitDataTypeConversion(self)


    class JsonRecursiveDescendObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.DOT_)
            else:
                return self.getToken(TeradataSQLDataTypesParser.DOT_, i)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendObjectMember" ):
                listener.enterJsonRecursiveDescendObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendObjectMember" ):
                listener.exitJsonRecursiveDescendObjectMember(self)


    class IntervalExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUS_SIGN, 0)
        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_expr_start_end_phraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)


    class ExponentiationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def EXPONENTIATION(self):
            return self.getToken(TeradataSQLDataTypesParser.EXPONENTIATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)


    class XMLIsSchemaValidatedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLDataTypesParser.ISSCHEMAVALIDATED, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValidated" ):
                listener.enterXMLIsSchemaValidated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValidated" ):
                listener.exitXMLIsSchemaValidated(self)


    class JSONConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.json_data = None # Scalar_exprContext
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDataTypesParser.NEW, 0)
        def JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)
        def LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.LATIN, 0)
        def UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE, 0)
        def BSON(self):
            return self.getToken(TeradataSQLDataTypesParser.BSON, 0)
        def UBJSON(self):
            return self.getToken(TeradataSQLDataTypesParser.UBJSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSONConstructor" ):
                listener.enterJSONConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSONConstructor" ):
                listener.exitJSONConstructor(self)


    class JsonSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COLON)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonSlice" ):
                listener.enterJsonSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonSlice" ):
                listener.exitJsonSlice(self)


    class XMLIsSchemaValidContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.elem_decl = None # Scalar_exprContext
            self.ns = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLDataTypesParser.ISSCHEMAVALID, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValid" ):
                listener.enterXMLIsSchemaValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValid" ):
                listener.exitXMLIsSchemaValid(self)


    class ArrayAggregationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.matching_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_SUM, 0)
        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_AVG, 0)
        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MAX, 0)
        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MIN, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_COUNT_DISTINCT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAggregation" ):
                listener.enterArrayAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAggregation" ):
                listener.exitArrayAggregation(self)


    class ArrayUpdateStrideContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_UPDATE_STRIDE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)

        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdateStride" ):
                listener.enterArrayUpdateStride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdateStride" ):
                listener.exitArrayUpdateStride(self)


    class LiteralExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)


    class ArrayOmethodWithArgContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def OEXISTS(self):
            return self.getToken(TeradataSQLDataTypesParser.OEXISTS, 0)
        def OPRIOR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPRIOR, 0)
        def ONEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.ONEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithArg" ):
                listener.enterArrayOmethodWithArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithArg" ):
                listener.exitArrayOmethodWithArg(self)


    class JsonRecursiveDescendAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.DOT_)
            else:
                return self.getToken(TeradataSQLDataTypesParser.DOT_, i)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllObjectMembers" ):
                listener.enterJsonRecursiveDescendAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllObjectMembers" ):
                listener.exitJsonRecursiveDescendAllObjectMembers(self)


    class XMLCreateNonSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATENONSCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateNonSchemaBasedXML" ):
                listener.enterXMLCreateNonSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateNonSchemaBasedXML" ):
                listener.exitXMLCreateNonSchemaBasedXML(self)


    class VariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableReference" ):
                listener.enterVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableReference" ):
                listener.exitVariableReference(self)


    class AddSubContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSub" ):
                listener.enterAddSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSub" ):
                listener.exitAddSub(self)


    class JsonObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)


    class JsonAllElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllElements" ):
                listener.enterJsonAllElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllElements" ):
                listener.exitJsonAllElements(self)


    class ArrayOextendContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def OEXTEND(self):
            return self.getToken(TeradataSQLDataTypesParser.OEXTEND, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOextend" ):
                listener.enterArrayOextend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOextend" ):
                listener.exitArrayOextend(self)


    class ArrayArithmeticContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_ADD, 0)
        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_SUB, 0)
        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MUL, 0)
        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_DIV, 0)
        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MOD, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayArithmetic" ):
                listener.enterArrayArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayArithmetic" ):
                listener.exitArrayArithmetic(self)


    class UDTConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLDataTypesParser.NEW, 0)
        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Udt_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SysudtlibContext,0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTConstructor" ):
                listener.enterUDTConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTConstructor" ):
                listener.exitUDTConstructor(self)


    class XMLTransformContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.xsl = None # Scalar_exprContext
            self.parammap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTRANSFORM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLTransform" ):
                listener.enterXMLTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLTransform" ):
                listener.exitXMLTransform(self)


    class DateTimeExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.At_timezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeExpr" ):
                listener.enterDateTimeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeExpr" ):
                listener.exitDateTimeExpr(self)


    class ColumnNameContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)


    class ArrayOtrimContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.num_remove = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def OTRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.OTRIM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOtrim" ):
                listener.enterArrayOtrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOtrim" ):
                listener.exitArrayOtrim(self)


    class CursorVariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cursor_variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Cursor_variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorVariableReference" ):
                listener.enterCursorVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorVariableReference" ):
                listener.exitCursorVariableReference(self)


    class ParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized" ):
                listener.enterParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized" ):
                listener.exitParenthesized(self)


    class JsonAsBsonTextContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.ASBSONTEXT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBsonText" ):
                listener.enterJsonAsBsonText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBsonText" ):
                listener.exitJsonAsBsonText(self)


    class AttributeModificationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeModification" ):
                listener.enterAttributeModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeModification" ):
                listener.exitAttributeModification(self)


    class JsonCombineContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.array_or_object = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def COMBINE(self):
            return self.getToken(TeradataSQLDataTypesParser.COMBINE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonCombine" ):
                listener.enterJsonCombine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonCombine" ):
                listener.exitJsonCombine(self)


    class XMLIsDocumentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ISDOCUMENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsDocument" ):
                listener.enterXMLIsDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsDocument" ):
                listener.exitXMLIsDocument(self)


    class MacroParameterReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Macro_parameter_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroParameterReference" ):
                listener.enterMacroParameterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroParameterReference" ):
                listener.exitMacroParameterReference(self)


    class XMLIsContentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def ISCONTENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ISCONTENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsContent" ):
                listener.enterXMLIsContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsContent" ):
                listener.exitXMLIsContent(self)


    class ArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElementReference" ):
                listener.enterArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElementReference" ):
                listener.exitArrayElementReference(self)


    class ArrayCardinalityContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def CARDINALITY(self):
            return self.getToken(TeradataSQLDataTypesParser.CARDINALITY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_CONCAT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCardinality" ):
                listener.enterArrayCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCardinality" ):
                listener.exitArrayCardinality(self)


    class CaseExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)


    class JsonKeycountContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.depth = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def KEYCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.KEYCOUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonKeycount" ):
                listener.enterJsonKeycount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonKeycount" ):
                listener.exitJsonKeycount(self)


    class JsonAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllObjectMembers" ):
                listener.enterJsonAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllObjectMembers" ):
                listener.exitJsonAllObjectMembers(self)



    def scalar_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLDataTypesParser.Scalar_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 308
        self.enterRecursionRule(localctx, 308, self.RULE_scalar_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLDataTypesParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2698
                self.literal()
                pass

            elif la_ == 2:
                localctx = TeradataSQLDataTypesParser.UnaryPlusMinusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2699
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2700
                self.scalar_expr(70)
                pass

            elif la_ == 3:
                localctx = TeradataSQLDataTypesParser.CaseExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2701
                self.case_expr()
                pass

            elif la_ == 4:
                localctx = TeradataSQLDataTypesParser.PartitioningExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2702
                self.partitioning_expr()
                pass

            elif la_ == 5:
                localctx = TeradataSQLDataTypesParser.ColumnNameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2703
                self.column_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLDataTypesParser.IntervalExprParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2704
                self.interval_expr_parenthesized()
                pass

            elif la_ == 7:
                localctx = TeradataSQLDataTypesParser.VariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2705
                self.variable_reference()
                pass

            elif la_ == 8:
                localctx = TeradataSQLDataTypesParser.CursorVariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2706
                self.cursor_variable_reference()
                pass

            elif la_ == 9:
                localctx = TeradataSQLDataTypesParser.MacroParameterReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2707
                self.macro_parameter_reference()
                pass

            elif la_ == 10:
                localctx = TeradataSQLDataTypesParser.UDTConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2708
                self.match(TeradataSQLDataTypesParser.NEW)
                self.state = 2710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
                if la_ == 1:
                    self.state = 2709
                    self.sysudtlib()


                self.state = 2712
                self.udt_name()
                self.state = 2713
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 2714
                    self.scalar_expr(0)
                    self.state = 2719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2715
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 2716
                        self.scalar_expr(0)
                        self.state = 2721
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2724
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                localctx = TeradataSQLDataTypesParser.JSONConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2726
                self.match(TeradataSQLDataTypesParser.NEW)
                self.state = 2727
                self.match(TeradataSQLDataTypesParser.JSON)
                self.state = 2728
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2729
                localctx.json_data = self.scalar_expr(0)
                self.state = 2732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 2730
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2731
                    _la = self._input.LA(1)
                    if not(_la==556 or _la==735 or _la==1010 or _la==1015):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2734
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                localctx = TeradataSQLDataTypesParser.VariantTypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2736
                self.match(TeradataSQLDataTypesParser.NEW)
                self.state = 2737
                self.match(TeradataSQLDataTypesParser.VARIANT_TYPE)
                self.state = 2738
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2739
                self.scalar_expr(0)
                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2740
                        self.match(TeradataSQLDataTypesParser.AS)


                    self.state = 2743
                    self.alias_name()


                self.state = 2756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2746
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 2747
                    self.scalar_expr(0)
                    self.state = 2752
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 2749
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==20:
                            self.state = 2748
                            self.match(TeradataSQLDataTypesParser.AS)


                        self.state = 2751
                        self.alias_name()


                    self.state = 2758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2759
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                localctx = TeradataSQLDataTypesParser.XMLConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2761
                self.match(TeradataSQLDataTypesParser.NEW)
                self.state = 2762
                self.match(TeradataSQLDataTypesParser.XML)
                self.state = 2763
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2764
                self.scalar_expr(0)
                self.state = 2765
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                localctx = TeradataSQLDataTypesParser.FunctionInvocationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2767
                self.function_invocation()
                pass

            elif la_ == 15:
                localctx = TeradataSQLDataTypesParser.ParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2768
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 2769
                self.scalar_expr(0)
                self.state = 2770
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                localctx = TeradataSQLDataTypesParser.ScalarSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2772
                self.subquery()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3180
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3178
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLDataTypesParser.ExponentiationContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2775
                        if not self.precpred(self._ctx, 69):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 69)")
                        self.state = 2776
                        self.match(TeradataSQLDataTypesParser.EXPONENTIATION)
                        self.state = 2777
                        self.scalar_expr(69)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLDataTypesParser.MultDivContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2778
                        if not self.precpred(self._ctx, 68):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 68)")
                        self.state = 2779
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1219 or _la==1220):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2780
                        self.scalar_expr(69)
                        pass

                    elif la_ == 3:
                        localctx = TeradataSQLDataTypesParser.ModuloContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2781
                        if not self.precpred(self._ctx, 67):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 67)")
                        self.state = 2782
                        self.match(TeradataSQLDataTypesParser.MOD)
                        self.state = 2783
                        self.scalar_expr(67)
                        pass

                    elif la_ == 4:
                        localctx = TeradataSQLDataTypesParser.AddSubContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2784
                        if not self.precpred(self._ctx, 66):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 66)")
                        self.state = 2785
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2786
                        self.scalar_expr(67)
                        pass

                    elif la_ == 5:
                        localctx = TeradataSQLDataTypesParser.ConcatenationContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2787
                        if not self.precpred(self._ctx, 65):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 65)")
                        self.state = 2788
                        _la = self._input.LA(1)
                        if not(_la==1217 or _la==1218):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2789
                        self.scalar_expr(66)
                        pass

                    elif la_ == 6:
                        localctx = TeradataSQLDataTypesParser.PeriodIntersectContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2790
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 2791
                        self.match(TeradataSQLDataTypesParser.P_INTERSECT)
                        self.state = 2792
                        self.scalar_expr(58)
                        pass

                    elif la_ == 7:
                        localctx = TeradataSQLDataTypesParser.PeriodDiffContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2793
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 2794
                        _la = self._input.LA(1)
                        if not(_la==736 or _la==876):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2795
                        self.scalar_expr(57)
                        pass

                    elif la_ == 8:
                        localctx = TeradataSQLDataTypesParser.DateTimeExprContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2796
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 2797
                        self.at_timezone()
                        pass

                    elif la_ == 9:
                        localctx = TeradataSQLDataTypesParser.IntervalExprContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2798
                        if not self.precpred(self._ctx, 60):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 60)")
                        self.state = 2799
                        self.match(TeradataSQLDataTypesParser.MINUS_SIGN)
                        self.state = 2800
                        self.scalar_expr(0)
                        self.state = 2801
                        self.interval_expr_start_end_phrase()
                        pass

                    elif la_ == 10:
                        localctx = TeradataSQLDataTypesParser.AttributeModificationContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2803
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 2805 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 2804
                                self.attribute_modification()

                            else:
                                raise NoViableAltException(self)
                            self.state = 2807 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

                        pass

                    elif la_ == 11:
                        localctx = TeradataSQLDataTypesParser.JsonObjectMemberContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2809
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 2810
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2811
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 12:
                        localctx = TeradataSQLDataTypesParser.JsonAllObjectMembersContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2812
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 2813
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2814
                        self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                        pass

                    elif la_ == 13:
                        localctx = TeradataSQLDataTypesParser.JsonAllElementsContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2815
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 2816
                        self.match(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET)
                        self.state = 2817
                        self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                        self.state = 2818
                        self.match(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 14:
                        localctx = TeradataSQLDataTypesParser.JsonSliceContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2819
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 2820
                        self.match(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET)
                        self.state = 2821
                        localctx.from_index = self.integer_literal()
                        self.state = 2822
                        self.match(TeradataSQLDataTypesParser.COLON)
                        self.state = 2823
                        localctx.to_index = self.integer_literal()
                        self.state = 2826
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 2824
                            self.match(TeradataSQLDataTypesParser.COLON)
                            self.state = 2825
                            localctx.step_size = self.integer_literal()


                        self.state = 2828
                        self.match(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = TeradataSQLDataTypesParser.JsonRecursiveDescendObjectMemberContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2830
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 2831
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2832
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2833
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 16:
                        localctx = TeradataSQLDataTypesParser.JsonRecursiveDescendAllObjectMembersContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2834
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 2835
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2836
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2837
                        self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                        pass

                    elif la_ == 17:
                        localctx = TeradataSQLDataTypesParser.JsonRecursiveDescendArrayElementReferenceContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2838
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 2839
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2840
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2841
                        self.match(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET)
                        self.state = 2842
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 2843
                        self.match(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 18:
                        localctx = TeradataSQLDataTypesParser.JsonRecursiveDescendAllArrayElementsContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2845
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 2846
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2847
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2848
                        self.match(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET)
                        self.state = 2849
                        self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                        self.state = 2850
                        self.match(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 19:
                        localctx = TeradataSQLDataTypesParser.JsonRecursiveDescendSliceContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2851
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 2852
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2853
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2854
                        self.match(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET)
                        self.state = 2855
                        localctx.from_index = self.integer_literal()
                        self.state = 2856
                        self.match(TeradataSQLDataTypesParser.COLON)
                        self.state = 2857
                        localctx.to_index = self.integer_literal()
                        self.state = 2860
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 2858
                            self.match(TeradataSQLDataTypesParser.COLON)
                            self.state = 2859
                            localctx.step_size = self.integer_literal()


                        self.state = 2862
                        self.match(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 20:
                        localctx = TeradataSQLDataTypesParser.JsonAsBsonContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2864
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 2865
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2866
                        self.match(TeradataSQLDataTypesParser.ASBSON)
                        self.state = 2867
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2869
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                            self.state = 2868
                            localctx.validation_specification = self.char_string_literal()


                        self.state = 2871
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 21:
                        localctx = TeradataSQLDataTypesParser.JsonAsBsonTextContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2872
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 2873
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2874
                        self.match(TeradataSQLDataTypesParser.ASBSONTEXT)
                        self.state = 2875
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2876
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 22:
                        localctx = TeradataSQLDataTypesParser.JsonCombineContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2877
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 2878
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2879
                        self.match(TeradataSQLDataTypesParser.COMBINE)
                        self.state = 2880
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2881
                        self.scalar_expr(0)
                        self.state = 2884
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 2882
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 2883
                            localctx.array_or_object = self.char_string_literal()


                        self.state = 2886
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 23:
                        localctx = TeradataSQLDataTypesParser.JsonExistValueContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2888
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 2889
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2890
                        self.match(TeradataSQLDataTypesParser.EXISTVALUE)
                        self.state = 2891
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2892
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2893
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 24:
                        localctx = TeradataSQLDataTypesParser.JsonExtractContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2895
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 2896
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2897
                        self.match(TeradataSQLDataTypesParser.JSONEXTRACT)
                        self.state = 2898
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2899
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2900
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 25:
                        localctx = TeradataSQLDataTypesParser.JsonExtractValueContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2902
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 2903
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2904
                        self.match(TeradataSQLDataTypesParser.JSONEXTRACTVALUE)
                        self.state = 2905
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2906
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2907
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 26:
                        localctx = TeradataSQLDataTypesParser.JsonExtractLargeValueContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2909
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 2910
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2911
                        self.match(TeradataSQLDataTypesParser.JSONEXTRACTLARGEVALUE)
                        self.state = 2912
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2913
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 2914
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 27:
                        localctx = TeradataSQLDataTypesParser.JsonKeycountContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2916
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 2917
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2918
                        self.match(TeradataSQLDataTypesParser.KEYCOUNT)
                        self.state = 2919
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2920
                        localctx.depth = self.integer_literal()
                        self.state = 2921
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 28:
                        localctx = TeradataSQLDataTypesParser.JsonMetadataContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2923
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 2924
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2925
                        self.match(TeradataSQLDataTypesParser.METADATA)
                        self.state = 2926
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2927
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 29:
                        localctx = TeradataSQLDataTypesParser.JsonMetadataContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2928
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 2929
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2930
                        self.match(TeradataSQLDataTypesParser.STORAGE_SIZE)
                        self.state = 2931
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2932
                        localctx.storage_format = self.char_string_literal()
                        self.state = 2933
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 30:
                        localctx = TeradataSQLDataTypesParser.XMLCreateSchemaBasedXMLContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2935
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 2936
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2937
                        self.match(TeradataSQLDataTypesParser.CREATESCHEMABASEDXML)
                        self.state = 2938
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2939
                        localctx.schema = self.scalar_expr(0)
                        self.state = 2940
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 31:
                        localctx = TeradataSQLDataTypesParser.XMLCreateNonSchemaBasedXMLContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2942
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2943
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2944
                        self.match(TeradataSQLDataTypesParser.CREATENONSCHEMABASEDXML)
                        self.state = 2945
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2946
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 32:
                        localctx = TeradataSQLDataTypesParser.XMLExistNodeContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2947
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 2948
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2949
                        self.match(TeradataSQLDataTypesParser.EXISTSNODE)
                        self.state = 2950
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2954
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                        if la_ == 1:
                            self.state = 2951
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 2952
                            self.match(TeradataSQLDataTypesParser.COMMA)


                        self.state = 2956
                        localctx.query = self.scalar_expr(0)
                        self.state = 2957
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 2958
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 2959
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 33:
                        localctx = TeradataSQLDataTypesParser.XMLIsContentContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2961
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 2962
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2963
                        self.match(TeradataSQLDataTypesParser.ISCONTENT)
                        self.state = 2964
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2965
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 34:
                        localctx = TeradataSQLDataTypesParser.XMLIsDocumentContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2966
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 2967
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2968
                        self.match(TeradataSQLDataTypesParser.ISDOCUMENT)
                        self.state = 2969
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2970
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 35:
                        localctx = TeradataSQLDataTypesParser.XMLIsSchemaValidContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2971
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 2972
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2973
                        self.match(TeradataSQLDataTypesParser.ISSCHEMAVALID)
                        self.state = 2974
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2975
                        localctx.schema = self.scalar_expr(0)
                        self.state = 2976
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 2977
                        localctx.elem_decl = self.scalar_expr(0)
                        self.state = 2978
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 2979
                        localctx.ns = self.scalar_expr(0)
                        self.state = 2980
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 36:
                        localctx = TeradataSQLDataTypesParser.XMLIsSchemaValidatedContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2982
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 2983
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2984
                        self.match(TeradataSQLDataTypesParser.ISSCHEMAVALIDATED)
                        self.state = 2985
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2986
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 37:
                        localctx = TeradataSQLDataTypesParser.XMLExtractContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 2987
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 2988
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 2989
                        self.match(TeradataSQLDataTypesParser.XMLEXTRACT)
                        self.state = 2990
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 2994
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
                        if la_ == 1:
                            self.state = 2991
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 2992
                            self.match(TeradataSQLDataTypesParser.COMMA)


                        self.state = 2996
                        localctx.query = self.scalar_expr(0)
                        self.state = 2997
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 2998
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 2999
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 38:
                        localctx = TeradataSQLDataTypesParser.XMLTransformContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3001
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 3002
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3003
                        self.match(TeradataSQLDataTypesParser.XMLTRANSFORM)
                        self.state = 3004
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3005
                        localctx.xsl = self.scalar_expr(0)
                        self.state = 3006
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 3007
                        localctx.parammap = self.scalar_expr(0)
                        self.state = 3008
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 39:
                        localctx = TeradataSQLDataTypesParser.ArrayElementReferenceContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3010
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 3011
                        self.match(TeradataSQLDataTypesParser.OPEN_SQ_BRACKET)
                        self.state = 3012
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 3017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 3013
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3014
                            localctx._integer_literal = self.integer_literal()
                            localctx.index_value.append(localctx._integer_literal)
                            self.state = 3019
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 3020
                        self.match(TeradataSQLDataTypesParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 40:
                        localctx = TeradataSQLDataTypesParser.ArrayCardinalityContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3022
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 3023
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3024
                        self.match(TeradataSQLDataTypesParser.CARDINALITY)
                        self.state = 3025
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3027
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3026
                            self.array_scope_reference()


                        self.state = 3029
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 41:
                        localctx = TeradataSQLDataTypesParser.ArrayCardinalityContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3030
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 3031
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3032
                        self.match(TeradataSQLDataTypesParser.ARRAY_CONCAT)
                        self.state = 3033
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3034
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3037
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3035
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3036
                            self.array_scope_reference()


                        self.state = 3039
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 42:
                        localctx = TeradataSQLDataTypesParser.ArrayComparisonContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3041
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 3042
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3043
                        _la = self._input.LA(1)
                        if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3044
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3045
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3048
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3046
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3047
                            self.array_scope_reference()


                        self.state = 3050
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 43:
                        localctx = TeradataSQLDataTypesParser.ArrayArithmeticContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3052
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 3053
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3054
                        _la = self._input.LA(1)
                        if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3055
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3056
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 3059
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3057
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3058
                            self.array_scope_reference()


                        self.state = 3061
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 44:
                        localctx = TeradataSQLDataTypesParser.ArrayAggregationContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3063
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 3064
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3065
                        _la = self._input.LA(1)
                        if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3066
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3068
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3067
                            self.array_scope_reference()


                        self.state = 3070
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 45:
                        localctx = TeradataSQLDataTypesParser.ArrayAggregationContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3071
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 3072
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3073
                        self.match(TeradataSQLDataTypesParser.ARRAY_COUNT_DISTINCT)
                        self.state = 3074
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3080
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3075
                            self.array_scope_reference()
                            self.state = 3078
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 3076
                                self.match(TeradataSQLDataTypesParser.COMMA)
                                self.state = 3077
                                localctx.matching_expr = self.scalar_expr(0)




                        self.state = 3082
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 46:
                        localctx = TeradataSQLDataTypesParser.ArrayGetContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3083
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 3084
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3085
                        self.match(TeradataSQLDataTypesParser.ARRAY_GET)
                        self.state = 3086
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3087
                        localctx.array_index = self.scalar_expr(0)
                        self.state = 3088
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 47:
                        localctx = TeradataSQLDataTypesParser.ArrayGetContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3090
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 3091
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3092
                        self.match(TeradataSQLDataTypesParser.ARRAY_COMPARE)
                        self.state = 3093
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3094
                        localctx.other_expr = self.scalar_expr(0)
                        self.state = 3101
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3095
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3096
                            self.array_scope_reference()
                            self.state = 3099
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 3097
                                self.match(TeradataSQLDataTypesParser.COMMA)
                                self.state = 3098
                                localctx.nulls_equal_flag = self.integer_literal()




                        self.state = 3103
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 48:
                        localctx = TeradataSQLDataTypesParser.ArrayUpdateContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3105
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 3106
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3107
                        self.match(TeradataSQLDataTypesParser.ARRAY_UPDATE)
                        self.state = 3108
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3109
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 3115
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3110
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3113
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                            if la_ == 1:
                                self.state = 3111
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 3112
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 3117
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 49:
                        localctx = TeradataSQLDataTypesParser.ArrayUpdateStrideContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3119
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 3120
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3121
                        self.match(TeradataSQLDataTypesParser.ARRAY_UPDATE_STRIDE)
                        self.state = 3122
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3123
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 3124
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 3125
                        localctx.stride = self.integer_literal()
                        self.state = 3131
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 3126
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3129
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                            if la_ == 1:
                                self.state = 3127
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 3128
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 3133
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 50:
                        localctx = TeradataSQLDataTypesParser.ArrayOmethodWithArgContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3135
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 3136
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3137
                        _la = self._input.LA(1)
                        if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3138
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3139
                        self.scalar_expr(0)
                        self.state = 3140
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 51:
                        localctx = TeradataSQLDataTypesParser.ArrayOmethodWithoudArgsContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3142
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3143
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3144
                        _la = self._input.LA(1)
                        if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 179) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3145
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3146
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 52:
                        localctx = TeradataSQLDataTypesParser.ArrayOextendContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3147
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 3148
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3149
                        self.match(TeradataSQLDataTypesParser.OEXTEND)
                        self.state = 3150
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3151
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 53:
                        localctx = TeradataSQLDataTypesParser.ArrayOtrimContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3152
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3153
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3154
                        self.match(TeradataSQLDataTypesParser.OTRIM)
                        self.state = 3155
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3157
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 3156
                            localctx.num_remove = self.integer_literal()


                        self.state = 3159
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 54:
                        localctx = TeradataSQLDataTypesParser.UDTMethodInvocationContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3160
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3161
                        self.match(TeradataSQLDataTypesParser.DOT_)
                        self.state = 3162
                        self.method_name()
                        self.state = 3163
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3172
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                            self.state = 3164
                            self.scalar_expr(0)
                            self.state = 3169
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1208:
                                self.state = 3165
                                self.match(TeradataSQLDataTypesParser.COMMA)
                                self.state = 3166
                                self.scalar_expr(0)
                                self.state = 3171
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 3174
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                        pass

                    elif la_ == 55:
                        localctx = TeradataSQLDataTypesParser.DataTypeConversionContext(self, TeradataSQLDataTypesParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 3176
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3177
                        self.teradata_type_conversion()
                        pass

             
                self.state = 3182
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def tuple_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Tuple_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Tuple_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = TeradataSQLDataTypesParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3183
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 3184
            self.tuple_attribute()
            self.state = 3187 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3185
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3186
                self.tuple_attribute()
                self.state = 3189 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 3191
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_tuple_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_attribute" ):
                listener.enterTuple_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_attribute" ):
                listener.exitTuple_attribute(self)




    def tuple_attribute(self):

        localctx = TeradataSQLDataTypesParser.Tuple_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_tuple_attribute)
        self._la = 0 # Token type
        try:
            self.state = 3208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3193
                self.scalar_expr(0)
                self.state = 3198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 3195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 3194
                        self.match(TeradataSQLDataTypesParser.AS)


                    self.state = 3197
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3200
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3201
                self.scalar_expr(0)
                self.state = 3203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 3202
                    self.match(TeradataSQLDataTypesParser.AS)


                self.state = 3205
                self.alias_name()
                self.state = 3206
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valued_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Valued_case_exprContext,0)


        def searched_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Searched_case_exprContext,0)


        def coalesce_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Coalesce_exprContext,0)


        def nullif_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nullif_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = TeradataSQLDataTypesParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_case_expr)
        try:
            self.state = 3214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3210
                self.valued_case_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3211
                self.searched_case_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3212
                self.coalesce_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3213
                self.nullif_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valued_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDataTypesParser.CASE, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def END(self):
            return self.getToken(TeradataSQLDataTypesParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.WHEN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.THEN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLDataTypesParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_valued_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValued_case_expr" ):
                listener.enterValued_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValued_case_expr" ):
                listener.exitValued_case_expr(self)




    def valued_case_expr(self):

        localctx = TeradataSQLDataTypesParser.Valued_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_valued_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3216
            self.match(TeradataSQLDataTypesParser.CASE)
            self.state = 3217
            self.scalar_expr(0)
            self.state = 3223 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3218
                self.match(TeradataSQLDataTypesParser.WHEN)
                self.state = 3219
                self.scalar_expr(0)
                self.state = 3220
                self.match(TeradataSQLDataTypesParser.THEN)
                self.state = 3221
                self.scalar_expr(0)
                self.state = 3225 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 3229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3227
                self.match(TeradataSQLDataTypesParser.ELSE)
                self.state = 3228
                self.scalar_expr(0)


            self.state = 3231
            self.match(TeradataSQLDataTypesParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLDataTypesParser.CASE, 0)

        def END(self):
            return self.getToken(TeradataSQLDataTypesParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.WHEN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.THEN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.THEN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def ELSE(self):
            return self.getToken(TeradataSQLDataTypesParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_searched_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_expr" ):
                listener.enterSearched_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_expr" ):
                listener.exitSearched_case_expr(self)




    def searched_case_expr(self):

        localctx = TeradataSQLDataTypesParser.Searched_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_searched_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3233
            self.match(TeradataSQLDataTypesParser.CASE)
            self.state = 3239 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3234
                self.match(TeradataSQLDataTypesParser.WHEN)
                self.state = 3235
                self.logical_expr(0)
                self.state = 3236
                self.match(TeradataSQLDataTypesParser.THEN)
                self.state = 3237
                self.scalar_expr(0)
                self.state = 3241 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 3245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3243
                self.match(TeradataSQLDataTypesParser.ELSE)
                self.state = 3244
                self.scalar_expr(0)


            self.state = 3247
            self.match(TeradataSQLDataTypesParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coalesce_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(TeradataSQLDataTypesParser.COALESCE, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_expr_list_comma_separatedContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_coalesce_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesce_expr" ):
                listener.enterCoalesce_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesce_expr" ):
                listener.exitCoalesce_expr(self)




    def coalesce_expr(self):

        localctx = TeradataSQLDataTypesParser.Coalesce_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_coalesce_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3249
            self.match(TeradataSQLDataTypesParser.COALESCE)
            self.state = 3250
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nullif_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(TeradataSQLDataTypesParser.NULLIF, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_nullif_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullif_expr" ):
                listener.enterNullif_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullif_expr" ):
                listener.exitNullif_expr(self)




    def nullif_expr(self):

        localctx = TeradataSQLDataTypesParser.Nullif_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_nullif_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3252
            self.match(TeradataSQLDataTypesParser.NULLIF)
            self.state = 3253
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 3254
            self.scalar_expr(0)
            self.state = 3255
            self.match(TeradataSQLDataTypesParser.COMMA)
            self.state = 3256
            self.scalar_expr(0)
            self.state = 3257
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_interval_expr_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_base" ):
                listener.enterInterval_expr_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_base" ):
                listener.exitInterval_expr_base(self)




    def interval_expr_base(self):

        localctx = TeradataSQLDataTypesParser.Interval_expr_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_interval_expr_base)
        try:
            self.state = 3269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3259
                self.scalar_expr(0)
                self.state = 3260
                self.match(TeradataSQLDataTypesParser.MINUS_SIGN)
                self.state = 3261
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3263
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3264
                self.scalar_expr(0)
                self.state = 3265
                self.match(TeradataSQLDataTypesParser.MINUS_SIGN)
                self.state = 3266
                self.scalar_expr(0)
                self.state = 3267
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def interval_expr_base(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_expr_baseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_expr_start_end_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_interval_expr_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_parenthesized" ):
                listener.enterInterval_expr_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_parenthesized" ):
                listener.exitInterval_expr_parenthesized(self)




    def interval_expr_parenthesized(self):

        localctx = TeradataSQLDataTypesParser.Interval_expr_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_interval_expr_parenthesized)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3271
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 3272
            self.interval_expr_base()
            self.state = 3273
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 3274
            self.interval_expr_start_end_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_start_end_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_seconds_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR, 0)

        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.MONTH)
            else:
                return self.getToken(TeradataSQLDataTypesParser.MONTH, i)

        def DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY, 0)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.HOUR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.MINUTE)
            else:
                return self.getToken(TeradataSQLDataTypesParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.SECOND)
            else:
                return self.getToken(TeradataSQLDataTypesParser.SECOND, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def TO(self):
            return self.getToken(TeradataSQLDataTypesParser.TO, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_interval_expr_start_end_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_start_end_phrase" ):
                listener.enterInterval_expr_start_end_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_start_end_phrase" ):
                listener.exitInterval_expr_start_end_phrase(self)




    def interval_expr_start_end_phrase(self):

        localctx = TeradataSQLDataTypesParser.Interval_expr_start_end_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_interval_expr_start_end_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3276
            _la = self._input.LA(1)
            if not(_la==106 or _la==185 or _la==248 or _la==258 or _la==368 or _la==478):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
            if la_ == 1:
                self.state = 3277
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3278
                localctx.precision = self.integer_literal()
                self.state = 3281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3279
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3280
                    localctx.fractional_seconds_precision = self.integer_literal()


                self.state = 3283
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 3295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                self.state = 3287
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 3288
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                if la_ == 1:
                    self.state = 3289
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 3290
                    localctx.fractional_seconds_precision = self.integer_literal()
                    self.state = 3291
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Aggregate_functionContext,0)


        def analytic_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Analytic_functionContext,0)


        def arithmetic_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Arithmetic_functionContext,0)


        def array_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_functionContext,0)


        def attribute_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_functionContext,0)


        def byte_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Byte_functionContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Builtin_functionContext,0)


        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Calendar_functionContext,0)


        def comparison_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Comparison_functionContext,0)


        def compression_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Compression_functionContext,0)


        def conversion_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Conversion_functionContext,0)


        def date_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Date_functionContext,0)


        def hash_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Hash_functionContext,0)


        def lob_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Lob_functionContext,0)


        def map_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Map_functionContext,0)


        def nvl_funtion(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Nvl_funtionContext,0)


        def period_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Period_functionContext,0)


        def regexp_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Regexp_functionContext,0)


        def string_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.String_functionContext,0)


        def json_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Json_functionContext,0)


        def xml_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_functionContext,0)


        def other_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Other_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_invocation" ):
                listener.enterFunction_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_invocation" ):
                listener.exitFunction_invocation(self)




    def function_invocation(self):

        localctx = TeradataSQLDataTypesParser.Function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_function_invocation)
        try:
            self.state = 3319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3297
                self.aggregate_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3298
                self.analytic_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3299
                self.arithmetic_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3300
                self.array_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3301
                self.attribute_function()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3302
                self.byte_function()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3303
                self.builtin_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3304
                self.calendar_function()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3305
                self.comparison_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3306
                self.compression_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3307
                self.conversion_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3308
                self.date_function()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3309
                self.hash_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3310
                self.lob_function()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3311
                self.map_function()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3312
                self.nvl_funtion()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3313
                self.period_function()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3314
                self.regexp_function()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3315
                self.string_function()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3316
                self.json_function()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3317
                self.xml_function()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3318
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_aggregate_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ListAggContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDataTypesParser.LISTAGG, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAgg" ):
                listener.enterListAgg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAgg" ):
                listener.exitListAgg(self)


    class AggOneArgContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def AVERAGE(self):
            return self.getToken(TeradataSQLDataTypesParser.AVERAGE, 0)
        def AVG(self):
            return self.getToken(TeradataSQLDataTypesParser.AVG, 0)
        def AVE(self):
            return self.getToken(TeradataSQLDataTypesParser.AVE, 0)
        def KURTOSIS(self):
            return self.getToken(TeradataSQLDataTypesParser.KURTOSIS, 0)
        def MAXIMUM(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXIMUM, 0)
        def MAX(self):
            return self.getToken(TeradataSQLDataTypesParser.MAX, 0)
        def MIN(self):
            return self.getToken(TeradataSQLDataTypesParser.MIN, 0)
        def MINIMUM(self):
            return self.getToken(TeradataSQLDataTypesParser.MINIMUM, 0)
        def SKEW(self):
            return self.getToken(TeradataSQLDataTypesParser.SKEW, 0)
        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDataTypesParser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.STDDEV_SAMP, 0)
        def SUM(self):
            return self.getToken(TeradataSQLDataTypesParser.SUM, 0)
        def VAR_POP(self):
            return self.getToken(TeradataSQLDataTypesParser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.VAR_SAMP, 0)
        def DISTINCT(self):
            return self.getToken(TeradataSQLDataTypesParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDataTypesParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggOneArg" ):
                listener.enterAggOneArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggOneArg" ):
                listener.exitAggOneArg(self)


    class AggTwoArgsContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def CORR(self):
            return self.getToken(TeradataSQLDataTypesParser.CORR, 0)
        def COVAR_POP(self):
            return self.getToken(TeradataSQLDataTypesParser.COVAR_POP, 0)
        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.COVAR_SAMP, 0)
        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_AVGX, 0)
        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_AVGY, 0)
        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_COUNT, 0)
        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_INTERCEPT, 0)
        def REGR_R2(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_R2, 0)
        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SLOPE, 0)
        def REGR_SXX(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SXX, 0)
        def REGR_SXY(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SXY, 0)
        def REGR_SYY(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SYY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggTwoArgs" ):
                listener.enterAggTwoArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggTwoArgs" ):
                listener.exitAggTwoArgs(self)


    class GroupingContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(TeradataSQLDataTypesParser.GROUPING, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping" ):
                listener.enterGrouping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping" ):
                listener.exitGrouping(self)


    class AggCountContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLDataTypesParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.COUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)

        def DISTINCT(self):
            return self.getToken(TeradataSQLDataTypesParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNIQUE, 0)
        def ALL(self):
            return self.getToken(TeradataSQLDataTypesParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggCount" ):
                listener.enterAggCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggCount" ):
                listener.exitAggCount(self)



    def aggregate_function(self):

        localctx = TeradataSQLDataTypesParser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.state = 3356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 213, 238, 239, 244, 246, 380, 396, 397, 403, 461, 462]:
                localctx = TeradataSQLDataTypesParser.AggOneArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3321
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 10838081537) != 0) or ((((_la - 380)) & ~0x3f) == 0 and ((1 << (_la - 380)) & 8585217) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3322
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==121:
                    self.state = 3323
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==121):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3326
                self.scalar_expr(0)
                self.state = 3327
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [80, 84, 85, 327, 328, 329, 330, 331, 332, 333, 334, 335]:
                localctx = TeradataSQLDataTypesParser.AggTwoArgsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3329
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3330
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3331
                self.scalar_expr(0)
                self.state = 3332
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3333
                self.scalar_expr(0)
                self.state = 3334
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [83]:
                localctx = TeradataSQLDataTypesParser.AggCountContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3336
                self.match(TeradataSQLDataTypesParser.COUNT)
                self.state = 3337
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3343
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 3338
                    self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 13, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 121, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 448, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 3340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==121 or _la==448:
                        self.state = 3339
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==121 or _la==448):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3342
                    self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3345
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [175]:
                localctx = TeradataSQLDataTypesParser.GroupingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3346
                self.match(TeradataSQLDataTypesParser.GROUPING)
                self.state = 3347
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3348
                self.scalar_expr(0)
                self.state = 3349
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1081]:
                localctx = TeradataSQLDataTypesParser.ListAggContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3351
                self.match(TeradataSQLDataTypesParser.LISTAGG)
                self.state = 3352
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3353
                self.scalar_expr(0)
                self.state = 3354
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value_expr = None # Scalar_exprContext
            self.offset_value = None # Scalar_exprContext
            self.default_value_expr = None # Scalar_exprContext
            self.width = None # Integer_literalContext
            self.quantile_literal = None # Integer_literalContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_specContext,0)


        def AVERAGE(self):
            return self.getToken(TeradataSQLDataTypesParser.AVERAGE, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDataTypesParser.AVG, 0)

        def AVE(self):
            return self.getToken(TeradataSQLDataTypesParser.AVE, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLDataTypesParser.MAXIMUM, 0)

        def MAX(self):
            return self.getToken(TeradataSQLDataTypesParser.MAX, 0)

        def MIN(self):
            return self.getToken(TeradataSQLDataTypesParser.MIN, 0)

        def MINIMUM(self):
            return self.getToken(TeradataSQLDataTypesParser.MINIMUM, 0)

        def STDDEV_POP(self):
            return self.getToken(TeradataSQLDataTypesParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.STDDEV_SAMP, 0)

        def SUM(self):
            return self.getToken(TeradataSQLDataTypesParser.SUM, 0)

        def VAR_POP(self):
            return self.getToken(TeradataSQLDataTypesParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.VAR_SAMP, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def CORR(self):
            return self.getToken(TeradataSQLDataTypesParser.CORR, 0)

        def COVAR_POP(self):
            return self.getToken(TeradataSQLDataTypesParser.COVAR_POP, 0)

        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.COVAR_SAMP, 0)

        def REGR_AVGX(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_AVGX, 0)

        def REGR_AVGY(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_AVGY, 0)

        def REGR_COUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_COUNT, 0)

        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_INTERCEPT, 0)

        def REGR_R2(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_R2, 0)

        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SLOPE, 0)

        def REGR_SXX(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SXX, 0)

        def REGR_SXY(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SXY, 0)

        def REGR_SYY(self):
            return self.getToken(TeradataSQLDataTypesParser.REGR_SYY, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.COUNT, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def CSUM(self):
            return self.getToken(TeradataSQLDataTypesParser.CSUM, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_asc_desc_onlyContext,i)


        def window_spec_without_rows(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_spec_without_rowsContext,0)


        def CUME_DIST(self):
            return self.getToken(TeradataSQLDataTypesParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLDataTypesParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(TeradataSQLDataTypesParser.PERCENT_RANK, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST_VALUE, 0)

        def ignore_respect_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Ignore_respect_nullsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Ignore_respect_nullsContext,i)


        def LAG(self):
            return self.getToken(TeradataSQLDataTypesParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLDataTypesParser.LEAD, 0)

        def MAVG(self):
            return self.getToken(TeradataSQLDataTypesParser.MAVG, 0)

        def MDIFF(self):
            return self.getToken(TeradataSQLDataTypesParser.MDIFF, 0)

        def MSUM(self):
            return self.getToken(TeradataSQLDataTypesParser.MSUM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def MEDIAN(self):
            return self.getToken(TeradataSQLDataTypesParser.MEDIAN, 0)

        def MLINREG(self):
            return self.getToken(TeradataSQLDataTypesParser.MLINREG, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLDataTypesParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLDataTypesParser.GROUP, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_fullContext,i)


        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLDataTypesParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLDataTypesParser.PERCENTILE_DISC, 0)

        def QUANTILE(self):
            return self.getToken(TeradataSQLDataTypesParser.QUANTILE, 0)

        def RANK(self):
            return self.getToken(TeradataSQLDataTypesParser.RANK, 0)

        def window_spec_with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_spec_with_tiesContext,0)


        def ROW_NUMBER(self):
            return self.getToken(TeradataSQLDataTypesParser.ROW_NUMBER, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLDataTypesParser.LISTAGG, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_analytic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_function" ):
                listener.enterAnalytic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_function" ):
                listener.exitAnalytic_function(self)




    def analytic_function(self):

        localctx = TeradataSQLDataTypesParser.Analytic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_analytic_function)
        self._la = 0 # Token type
        try:
            self.state = 3507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3358
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 323) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & 131) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3359
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3360
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3361
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3362
                self.window_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3364
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3365
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3366
                self.scalar_expr(0)
                self.state = 3367
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3368
                self.scalar_expr(0)
                self.state = 3369
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3370
                self.window_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3372
                self.match(TeradataSQLDataTypesParser.COUNT)
                self.state = 3373
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3376
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 3374
                    self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 3375
                    localctx.value_expr = self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3378
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3379
                self.window_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3380
                self.match(TeradataSQLDataTypesParser.CSUM)
                self.state = 3381
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3382
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3385 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3383
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3384
                    self.order_by_spec_asc_desc_only()
                    self.state = 3387 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 3389
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3391
                _la = self._input.LA(1)
                if not(_la==301 or _la==603 or _la==630):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3392
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3393
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3394
                self.window_spec_without_rows()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3395
                _la = self._input.LA(1)
                if not(_la==673 or _la==734):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3396
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3397
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 3398
                    self.ignore_respect_nulls()


                self.state = 3401
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3402
                self.window_spec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3404
                _la = self._input.LA(1)
                if not(_la==730 or _la==737):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3405
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3406
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 3407
                    self.ignore_respect_nulls()


                self.state = 3416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3410
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3411
                    localctx.offset_value = self.scalar_expr(0)
                    self.state = 3414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 3412
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 3413
                        localctx.default_value_expr = self.scalar_expr(0)




                self.state = 3418
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 3419
                    self.ignore_respect_nulls()


                self.state = 3422
                self.window_spec_without_rows()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3424
                _la = self._input.LA(1)
                if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 8388625) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3425
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3426
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3427
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3428
                localctx.width = self.integer_literal()
                self.state = 3431 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3429
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3430
                    self.order_by_spec_asc_desc_only()
                    self.state = 3433 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 3435
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3437
                self.match(TeradataSQLDataTypesParser.MEDIAN)
                self.state = 3438
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3439
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3440
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3442
                self.match(TeradataSQLDataTypesParser.MLINREG)
                self.state = 3443
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3444
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3445
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3446
                localctx.width = self.integer_literal()
                self.state = 3447
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3448
                self.order_by_spec_asc_desc_only()
                self.state = 3449
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3451
                _la = self._input.LA(1)
                if not(_la==851 or _la==852):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3452
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3453
                localctx.value_expr = self.scalar_expr(0)
                self.state = 3454
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3455
                self.match(TeradataSQLDataTypesParser.WITHIN)
                self.state = 3456
                self.match(TeradataSQLDataTypesParser.GROUP)
                self.state = 3457
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3458
                self.match(TeradataSQLDataTypesParser.ORDER)
                self.state = 3459
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 3460
                self.order_by_spec_full()
                self.state = 3465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3461
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3462
                    self.order_by_spec_full()
                    self.state = 3467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3468
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3470
                self.match(TeradataSQLDataTypesParser.QUANTILE)
                self.state = 3471
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3472
                localctx.quantile_literal = self.integer_literal()
                self.state = 3475 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3473
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3474
                    self.order_by_spec_asc_desc_only()
                    self.state = 3477 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 3479
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3481
                self.match(TeradataSQLDataTypesParser.RANK)
                self.state = 3482
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3483
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3484
                self.window_spec_with_ties()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3485
                self.match(TeradataSQLDataTypesParser.RANK)
                self.state = 3486
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3487
                self.order_by_spec_asc_desc_only()
                self.state = 3492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3488
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3489
                    self.order_by_spec_asc_desc_only()
                    self.state = 3494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3495
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3497
                self.match(TeradataSQLDataTypesParser.ROW_NUMBER)
                self.state = 3498
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3499
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3500
                self.window_spec_without_rows()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3501
                self.match(TeradataSQLDataTypesParser.LISTAGG)
                self.state = 3502
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3503
                self.scalar_expr(0)
                self.state = 3504
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 3505
                self.window_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def ABS(self):
            return self.getToken(TeradataSQLDataTypesParser.ABS, 0)

        def DEGREES(self):
            return self.getToken(TeradataSQLDataTypesParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(TeradataSQLDataTypesParser.RADIANS, 0)

        def EXP(self):
            return self.getToken(TeradataSQLDataTypesParser.EXP, 0)

        def SQRT(self):
            return self.getToken(TeradataSQLDataTypesParser.SQRT, 0)

        def COSH(self):
            return self.getToken(TeradataSQLDataTypesParser.COSH, 0)

        def SINH(self):
            return self.getToken(TeradataSQLDataTypesParser.SINH, 0)

        def TANH(self):
            return self.getToken(TeradataSQLDataTypesParser.TANH, 0)

        def ACOSH(self):
            return self.getToken(TeradataSQLDataTypesParser.ACOSH, 0)

        def ASINH(self):
            return self.getToken(TeradataSQLDataTypesParser.ASINH, 0)

        def ATANH(self):
            return self.getToken(TeradataSQLDataTypesParser.ATANH, 0)

        def LN(self):
            return self.getToken(TeradataSQLDataTypesParser.LN, 0)

        def LOG(self):
            return self.getToken(TeradataSQLDataTypesParser.LOG, 0)

        def NULLIFZERO(self):
            return self.getToken(TeradataSQLDataTypesParser.NULLIFZERO, 0)

        def ZEROIFNULL(self):
            return self.getToken(TeradataSQLDataTypesParser.ZEROIFNULL, 0)

        def COS(self):
            return self.getToken(TeradataSQLDataTypesParser.COS, 0)

        def SIN(self):
            return self.getToken(TeradataSQLDataTypesParser.SIN, 0)

        def TAN(self):
            return self.getToken(TeradataSQLDataTypesParser.TAN, 0)

        def ACOS(self):
            return self.getToken(TeradataSQLDataTypesParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(TeradataSQLDataTypesParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(TeradataSQLDataTypesParser.ATAN, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLDataTypesParser.CEILING, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLDataTypesParser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLDataTypesParser.FLOOR, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.SIGN, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def MOD(self):
            return self.getToken(TeradataSQLDataTypesParser.MOD, 0)

        def RANDOM(self):
            return self.getToken(TeradataSQLDataTypesParser.RANDOM, 0)

        def ATAN2(self):
            return self.getToken(TeradataSQLDataTypesParser.ATAN2, 0)

        def POWER(self):
            return self.getToken(TeradataSQLDataTypesParser.POWER, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SyslibContext,0)


        def ROUND(self):
            return self.getToken(TeradataSQLDataTypesParser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLDataTypesParser.TRUNC, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLDataTypesParser.WIDTH, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLDataTypesParser.BUCKET, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_arithmetic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_function" ):
                listener.enterArithmetic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_function" ):
                listener.exitArithmetic_function(self)




    def arithmetic_function(self):

        localctx = TeradataSQLDataTypesParser.Arithmetic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_arithmetic_function)
        self._la = 0 # Token type
        try:
            self.state = 3563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3509
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 180355272) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4294967299) != 0) or _la==147 or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & 18014398509482049) != 0) or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & 3458764513820540929) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 393217) != 0) or _la==479):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3510
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3511
                self.scalar_expr(0)
                self.state = 3512
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3514
                    self.td_sysfnlib()


                self.state = 3517
                _la = self._input.LA(1)
                if not(_la==565 or _la==566 or _la==674 or _la==926):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3518
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3519
                self.scalar_expr(0)
                self.state = 3520
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3522
                _la = self._input.LA(1)
                if not(_la==26 or _la==251 or _la==319):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3523
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3524
                self.scalar_expr(0)
                self.state = 3525
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3526
                self.scalar_expr(0)
                self.state = 3527
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 3529
                    self.syslib()


                self.state = 3532
                self.match(TeradataSQLDataTypesParser.POWER)
                self.state = 3533
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3534
                self.scalar_expr(0)
                self.state = 3535
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3536
                self.scalar_expr(0)
                self.state = 3537
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3539
                    self.td_sysfnlib()


                self.state = 3542
                _la = self._input.LA(1)
                if not(_la==894 or _la==1006):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3543
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3544
                self.scalar_expr(0)
                self.state = 3547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3545
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3546
                    self.scalar_expr(0)


                self.state = 3549
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3551
                self.match(TeradataSQLDataTypesParser.WIDTH)
                self.state = 3552
                self.match(TeradataSQLDataTypesParser.BUCKET)
                self.state = 3553
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3554
                self.scalar_expr(0)
                self.state = 3555
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3556
                self.scalar_expr(0)
                self.state = 3557
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3558
                self.scalar_expr(0)
                self.state = 3559
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3560
                self.scalar_expr(0)
                self.state = 3561
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element_value_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext
            self.array_expr_1 = None # Scalar_exprContext
            self.array_expr_2 = None # Scalar_exprContext
            self.matching_expr = None # Scalar_exprContext
            self.array_index = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.index_value_or_bound = None # Scalar_exprContext
            self.num_spaces = None # Scalar_exprContext
            self.num_elements = None # Scalar_exprContext

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_AGG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def ASC(self):
            return self.getToken(TeradataSQLDataTypesParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLDataTypesParser.DESC, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLDataTypesParser.CARDINALITY, 0)

        def array_scope_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Array_scope_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Array_scope_referenceContext,i)


        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_CONCAT, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GT, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_LT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_LE, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_EQ, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_NE, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_ADD, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_SUB, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MUL, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_DIV, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MOD, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_SUM, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_AVG, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_MIN, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_GET, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_COMPARE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_UPDATE_STRIDE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLDataTypesParser.OEXISTS, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPRIOR, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.ONEXT, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.OCOUNT, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLDataTypesParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLDataTypesParser.OLAST, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLDataTypesParser.ODELETE, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLDataTypesParser.OEXTEND, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.OTRIM, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_array_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_function" ):
                listener.enterArray_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_function" ):
                listener.exitArray_function(self)




    def array_function(self):

        localctx = TeradataSQLDataTypesParser.Array_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_array_function)
        self._la = 0 # Token type
        try:
            self.state = 3778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3565
                    self.td_sysfnlib()


                self.state = 3568
                self.match(TeradataSQLDataTypesParser.ARRAY_AGG)
                self.state = 3569
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3570
                localctx.element_value_expr = self.scalar_expr(0)
                self.state = 3577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 3571
                    self.match(TeradataSQLDataTypesParser.ORDER)
                    self.state = 3572
                    self.match(TeradataSQLDataTypesParser.BY)
                    self.state = 3573
                    self.scalar_expr(0)
                    self.state = 3575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21 or _la==116:
                        self.state = 3574
                        _la = self._input.LA(1)
                        if not(_la==21 or _la==116):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 3579
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3580
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3581
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3583
                self.match(TeradataSQLDataTypesParser.CARDINALITY)
                self.state = 3584
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3585
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3586
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3587
                    self.array_scope_reference()
                    self.state = 3592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3593
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3595
                self.match(TeradataSQLDataTypesParser.ARRAY_CONCAT)
                self.state = 3596
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3597
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 3598
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3599
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 3604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3600
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3601
                    self.array_scope_reference()
                    self.state = 3606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3607
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3609
                _la = self._input.LA(1)
                if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3610
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3611
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 3612
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3613
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 3618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3614
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3615
                    self.array_scope_reference()
                    self.state = 3620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3621
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3623
                _la = self._input.LA(1)
                if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3624
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3625
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 3626
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3627
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 3632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3628
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3629
                    self.array_scope_reference()
                    self.state = 3634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3635
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3637
                _la = self._input.LA(1)
                if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3638
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3639
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3640
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3641
                    self.array_scope_reference()
                    self.state = 3646
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3647
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3649
                self.match(TeradataSQLDataTypesParser.ARRAY_COUNT_DISTINCT)
                self.state = 3650
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3651
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
                if la_ == 1:
                    self.state = 3656
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,418,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3652
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3653
                            self.array_scope_reference() 
                        self.state = 3658
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,418,self._ctx)

                    self.state = 3659
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3660
                    localctx.matching_expr = self.scalar_expr(0)

                elif la_ == 2:
                    self.state = 3663 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3661
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 3662
                        self.array_scope_reference()
                        self.state = 3665 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break



                self.state = 3669
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3671
                self.match(TeradataSQLDataTypesParser.ARRAY_GET)
                self.state = 3672
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3673
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3674
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3675
                localctx.array_index = self.scalar_expr(0)
                self.state = 3676
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3678
                self.match(TeradataSQLDataTypesParser.ARRAY_COMPARE)
                self.state = 3679
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3680
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 3681
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3682
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 3692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3685 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3683
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 3684
                            self.array_scope_reference()

                        else:
                            raise NoViableAltException(self)
                        self.state = 3687 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

                    self.state = 3689
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3690
                    localctx.nulls_equal_flag = self.integer_literal()


                self.state = 3694
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3696
                self.match(TeradataSQLDataTypesParser.ARRAY_UPDATE)
                self.state = 3697
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3698
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3699
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3700
                localctx.new_value = self.scalar_expr(0)
                self.state = 3709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 3703 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3701
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 3702
                        self.array_scope_reference()
                        self.state = 3705 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 3707
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3708
                    localctx.array_index = self.scalar_expr(0)


                self.state = 3711
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3713
                self.match(TeradataSQLDataTypesParser.ARRAY_UPDATE_STRIDE)
                self.state = 3714
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3715
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3716
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3717
                localctx.new_value = self.scalar_expr(0)
                self.state = 3718
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3719
                localctx.stride = self.integer_literal()
                self.state = 3728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 3722 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3720
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 3721
                        self.array_scope_reference()
                        self.state = 3724 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 3726
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3727
                    localctx.array_index = self.scalar_expr(0)


                self.state = 3730
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3732
                    self.td_sysfnlib()


                self.state = 3735
                _la = self._input.LA(1)
                if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3736
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3737
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3738
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3739
                localctx.index_value_or_bound = self.scalar_expr(0)
                self.state = 3740
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3742
                    self.td_sysfnlib()


                self.state = 3745
                _la = self._input.LA(1)
                if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 51) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3746
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3747
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3748
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3750
                    self.td_sysfnlib()


                self.state = 3753
                self.match(TeradataSQLDataTypesParser.OEXTEND)
                self.state = 3754
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3755
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3756
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3757
                    localctx.num_spaces = self.scalar_expr(0)
                    self.state = 3760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 3758
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 3759
                        localctx.index_value_or_bound = self.scalar_expr(0)




                self.state = 3764
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3766
                    self.td_sysfnlib()


                self.state = 3769
                self.match(TeradataSQLDataTypesParser.OTRIM)
                self.state = 3770
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3771
                localctx.array_expr = self.scalar_expr(0)
                self.state = 3774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3772
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3773
                    localctx.num_elements = self.scalar_expr(0)


                self.state = 3776
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.character_set_name = None # LiteralContext

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.BIT_LENGTH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LiteralContext,0)


        def BYTE(self):
            return self.getToken(TeradataSQLDataTypesParser.BYTE, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLDataTypesParser.BYTES, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTER_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR, 0)

        def CHARS(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARS, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTER, 0)

        def CHARACTERS(self):
            return self.getToken(TeradataSQLDataTypesParser.CHARACTERS, 0)

        def MCHARACTERS(self):
            return self.getToken(TeradataSQLDataTypesParser.MCHARACTERS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLDataTypesParser.DEFAULT, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def FORMAT(self):
            return self.getToken(TeradataSQLDataTypesParser.FORMAT, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLDataTypesParser.TITLE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.TYPE, 0)

        def OCTET_LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.OCTET_LENGTH, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_attribute_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_function" ):
                listener.enterAttribute_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_function" ):
                listener.exitAttribute_function(self)




    def attribute_function(self):

        localctx = TeradataSQLDataTypesParser.Attribute_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_attribute_function)
        self._la = 0 # Token type
        try:
            self.state = 3820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [546]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3780
                self.match(TeradataSQLDataTypesParser.BIT_LENGTH)
                self.state = 3781
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3782
                self.scalar_expr(0)
                self.state = 3785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3783
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3784
                    localctx.character_set_name = self.literal()


                self.state = 3787
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [43, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3789
                _la = self._input.LA(1)
                if not(_la==43 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3790
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3791
                self.scalar_expr(0)
                self.state = 3792
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [52, 53, 55, 56, 57, 58, 240]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3794
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 553942754166571008) != 0) or _la==240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3795
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3796
                self.scalar_expr(0)
                self.state = 3797
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3799
                self.match(TeradataSQLDataTypesParser.DEFAULT)
                self.state = 3804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
                if la_ == 1:
                    self.state = 3800
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 3801
                    self.column_name()
                    self.state = 3802
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


                pass
            elif token in [161, 425, 437]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3806
                _la = self._input.LA(1)
                if not(_la==161 or _la==425 or _la==437):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3807
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3808
                self.scalar_expr(0)
                self.state = 3809
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3811
                self.match(TeradataSQLDataTypesParser.OCTET_LENGTH)
                self.state = 3812
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3813
                self.scalar_expr(0)
                self.state = 3816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3814
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3815
                    localctx.character_set_name = self.literal()


                self.state = 3818
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Byte_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITNOT(self):
            return self.getToken(TeradataSQLDataTypesParser.BITNOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def BITAND(self):
            return self.getToken(TeradataSQLDataTypesParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLDataTypesParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLDataTypesParser.BITXOR, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLDataTypesParser.GETBIT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLDataTypesParser.ROTATERIGHT, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLDataTypesParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLDataTypesParser.SHIFTRIGHT, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLDataTypesParser.COUNTSET, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLDataTypesParser.SETBIT, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.SUBBITSTR, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_BYTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_byte_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByte_function" ):
                listener.enterByte_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByte_function" ):
                listener.exitByte_function(self)




    def byte_function(self):

        localctx = TeradataSQLDataTypesParser.Byte_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_byte_function)
        self._la = 0 # Token type
        try:
            self.state = 3886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3822
                    self.td_sysfnlib()


                self.state = 3825
                self.match(TeradataSQLDataTypesParser.BITNOT)
                self.state = 3826
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3827
                self.scalar_expr(0)
                self.state = 3828
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3830
                    self.td_sysfnlib()


                self.state = 3833
                _la = self._input.LA(1)
                if not(((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 13) != 0) or _la==682 or ((((_la - 892)) & ~0x3f) == 0 and ((1 << (_la - 892)) & 12884901891) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3834
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3835
                self.scalar_expr(0)
                self.state = 3836
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3837
                self.scalar_expr(0)
                self.state = 3838
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3840
                    self.td_sysfnlib()


                self.state = 3843
                self.match(TeradataSQLDataTypesParser.COUNTSET)
                self.state = 3844
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3845
                self.scalar_expr(0)
                self.state = 3848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3846
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3847
                    self.scalar_expr(0)


                self.state = 3850
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3852
                    self.td_sysfnlib()


                self.state = 3855
                self.match(TeradataSQLDataTypesParser.SETBIT)
                self.state = 3856
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3857
                self.scalar_expr(0)
                self.state = 3858
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3859
                self.scalar_expr(0)
                self.state = 3862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3860
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3861
                    self.scalar_expr(0)


                self.state = 3864
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3866
                    self.td_sysfnlib()


                self.state = 3869
                self.match(TeradataSQLDataTypesParser.SUBBITSTR)
                self.state = 3870
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3871
                self.scalar_expr(0)
                self.state = 3872
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3873
                self.scalar_expr(0)
                self.state = 3874
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3875
                self.scalar_expr(0)
                self.state = 3876
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3878
                    self.td_sysfnlib()


                self.state = 3881
                self.match(TeradataSQLDataTypesParser.TO_BYTE)
                self.state = 3882
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3883
                self.scalar_expr(0)
                self.state = 3884
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(TeradataSQLDataTypesParser.ACCOUNT, 0)

        def CURRENT_DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.CURRENT_DATE, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLDataTypesParser.CURDATE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.At_timezoneContext,0)


        def CURRENT_ROLE(self):
            return self.getToken(TeradataSQLDataTypesParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.CURRENT_TIME, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLDataTypesParser.CURTIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Type_precisionContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(TeradataSQLDataTypesParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATE, 0)

        def NOW(self):
            return self.getToken(TeradataSQLDataTypesParser.NOW, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLDataTypesParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLDataTypesParser.ROLE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLDataTypesParser.SESSION, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.TEMPORAL_TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME, 0)

        def USER(self):
            return self.getToken(TeradataSQLDataTypesParser.USER, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_function" ):
                listener.enterBuiltin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_function" ):
                listener.exitBuiltin_function(self)




    def builtin_function(self):

        localctx = TeradataSQLDataTypesParser.Builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_builtin_function)
        try:
            self.state = 3944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3888
                self.match(TeradataSQLDataTypesParser.ACCOUNT)
                pass
            elif token in [94, 604]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3897
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [94]:
                    self.state = 3889
                    self.match(TeradataSQLDataTypesParser.CURRENT_DATE)
                    self.state = 3892
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
                    if la_ == 1:
                        self.state = 3890
                        self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                        self.state = 3891
                        self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


                    pass
                elif token in [604]:
                    self.state = 3894
                    self.match(TeradataSQLDataTypesParser.CURDATE)
                    self.state = 3895
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 3896
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3900
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                if la_ == 1:
                    self.state = 3899
                    self.at_timezone()


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3902
                self.match(TeradataSQLDataTypesParser.CURRENT_ROLE)
                pass
            elif token in [96, 605]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3910
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 3903
                    self.match(TeradataSQLDataTypesParser.CURRENT_TIME)
                    self.state = 3905
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                    if la_ == 1:
                        self.state = 3904
                        self.type_precision()


                    pass
                elif token in [605]:
                    self.state = 3907
                    self.match(TeradataSQLDataTypesParser.CURTIME)
                    self.state = 3908
                    self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                    self.state = 3909
                    self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 3912
                    self.at_timezone()


                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3915
                self.match(TeradataSQLDataTypesParser.CURRENT_TIMESTAMP)
                self.state = 3917
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 3916
                    self.type_precision()


                self.state = 3920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 3919
                    self.at_timezone()


                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3922
                self.match(TeradataSQLDataTypesParser.CURRENT_USER)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3923
                self.match(TeradataSQLDataTypesParser.DATABASE)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3924
                self.match(TeradataSQLDataTypesParser.DATE)
                self.state = 3926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
                if la_ == 1:
                    self.state = 3925
                    self.at_timezone()


                pass
            elif token in [803]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3928
                self.match(TeradataSQLDataTypesParser.NOW)
                self.state = 3929
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3930
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3931
                self.match(TeradataSQLDataTypesParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3932
                self.match(TeradataSQLDataTypesParser.ROLE)
                pass
            elif token in [371]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3933
                self.match(TeradataSQLDataTypesParser.SESSION)
                pass
            elif token in [980]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3934
                self.match(TeradataSQLDataTypesParser.TEMPORAL_DATE)
                pass
            elif token in [981]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3935
                self.match(TeradataSQLDataTypesParser.TEMPORAL_TIMESTAMP)
                self.state = 3937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 3936
                    self.type_precision()


                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3939
                self.match(TeradataSQLDataTypesParser.TIME)
                self.state = 3941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 3940
                    self.at_timezone()


                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3943
                self.match(TeradataSQLDataTypesParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calendar_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.calendar_for_session = None # Token
            self.calendar_name = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_DAY_OF_YEAR, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_QUARTER_OF_YEAR, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_YEAR_OF_CALENDAR, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SyslibContext,0)


        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYOCCURRENCE_OF_MONTH, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHNUMBER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.QUARTERNUMBER_OF_YEAR, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEKNUMBER_OF_YEAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLDataTypesParser.YEARNUMBER_OF_CALENDAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_calendar_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalendar_function" ):
                listener.enterCalendar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalendar_function" ):
                listener.exitCalendar_function(self)




    def calendar_function(self):

        localctx = TeradataSQLDataTypesParser.Calendar_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_calendar_function)
        self._la = 0 # Token type
        try:
            self.state = 3969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [957, 958, 959, 960, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 1088]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 3946
                    self.syslib()


                self.state = 3949
                _la = self._input.LA(1)
                if not(((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & 1031695) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3950
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3951
                self.scalar_expr(0)
                self.state = 3952
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [612, 613, 614, 615, 616, 783, 784, 785, 867, 868, 1033, 1034, 1035, 1036, 1064, 1091]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3954
                    self.td_sysfnlib()


                self.state = 3957
                _la = self._input.LA(1)
                if not(((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & 31) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0) or _la==867 or _la==868 or ((((_la - 1033)) & ~0x3f) == 0 and ((1 << (_la - 1033)) & 2147483663) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3958
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3959
                self.scalar_expr(0)
                self.state = 3961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 3960
                    self.match(TeradataSQLDataTypesParser.COMMA)


                self.state = 3965
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [274]:
                    self.state = 3963
                    localctx.calendar_for_session = self.match(TeradataSQLDataTypesParser.NULL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 3964
                    localctx.calendar_name = self.char_string_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 3967
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.search_result = None # Scalar_exprContext
            self.default_result = None # Scalar_exprContext

        def DECODE(self):
            return self.getToken(TeradataSQLDataTypesParser.DECODE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def GREATEST(self):
            return self.getToken(TeradataSQLDataTypesParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLDataTypesParser.LEAST, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_comparison_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_function" ):
                listener.enterComparison_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_function" ):
                listener.exitComparison_function(self)




    def comparison_function(self):

        localctx = TeradataSQLDataTypesParser.Comparison_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_comparison_function)
        self._la = 0 # Token type
        try:
            self.state = 3999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3971
                    self.td_sysfnlib()


                self.state = 3974
                self.match(TeradataSQLDataTypesParser.DECODE)
                self.state = 3975
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3976
                localctx.expr = self.scalar_expr(0)
                self.state = 3977
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3978
                localctx.search_result = self.scalar_expr(0)

                self.state = 3979
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 3980
                localctx.search_result = self.scalar_expr(0)
                self.state = 3982
                localctx.default_result = self.scalar_expr(0)
                self.state = 3983
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 3985
                    self.td_sysfnlib()


                self.state = 3988
                _la = self._input.LA(1)
                if not(_la==689 or _la==738):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3989
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 3990
                self.scalar_expr(0)
                self.state = 3993 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3991
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 3992
                    self.scalar_expr(0)
                    self.state = 3995 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 3997
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compression_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLDataTypesParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLDataTypesParser.CAMSET_L, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLDataTypesParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLDataTypesParser.DECAMSET_L, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_DECOMPRESS, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLDataTypesParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLDataTypesParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLDataTypesParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLDataTypesParser.LZDECOMP_L, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_LZ_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLDataTypesParser.TS_DECOMPRESS, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLDataTypesParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.TRANSUTF8TOUNICODE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_compression_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression_function" ):
                listener.enterCompression_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression_function" ):
                listener.exitCompression_function(self)




    def compression_function(self):

        localctx = TeradataSQLDataTypesParser.Compression_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_compression_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 4001
                self.td_sysfnlib()


            self.state = 4004
            _la = self._input.LA(1)
            if not(((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & 1729382256910270467) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & 15) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & 1649267441667) != 0) or ((((_la - 1141)) & ~0x3f) == 0 and ((1 << (_la - 1141)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4005
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 4006
            self.scalar_expr(0)
            self.state = 4007
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.in_encoding = None # Char_string_literalContext
            self.out_encoding = None # Char_string_literalContext
            self.string_expr = None # Scalar_exprContext
            self.format_arg = None # Char_string_literalContext
            self.nls_param = None # Char_string_literalContext
            self.numeric_value = None # Scalar_exprContext
            self.interval_unit = None # Scalar_exprContext

        def CAST(self):
            return self.getToken(TeradataSQLDataTypesParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_type_attributeContext,i)


        def TRYCAST(self):
            return self.getToken(TeradataSQLDataTypesParser.TRYCAST, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_BYTES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def FROM_BYTES(self):
            return self.getToken(TeradataSQLDataTypesParser.FROM_BYTES, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_NUMBER, 0)

        def NULL(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_DATE, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_YMINTERVAL, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.TO_DSINTERVAL, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.NUMTOYMINTERVAL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_conversion_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_function" ):
                listener.enterConversion_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_function" ):
                listener.exitConversion_function(self)




    def conversion_function(self):

        localctx = TeradataSQLDataTypesParser.Conversion_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_conversion_function)
        self._la = 0 # Token type
        try:
            self.state = 4140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,490,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4009
                self.match(TeradataSQLDataTypesParser.CAST)
                self.state = 4010
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4011
                localctx.expr = self.scalar_expr(0)
                self.state = 4012
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 4025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
                if la_ == 1:
                    self.state = 4013
                    self.data_type()
                    self.state = 4017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                        self.state = 4014
                        self.data_type_attribute()
                        self.state = 4019
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 4021 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4020
                        self.data_type_attribute()
                        self.state = 4023 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211):
                            break

                    pass


                self.state = 4027
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4029
                self.match(TeradataSQLDataTypesParser.TRYCAST)
                self.state = 4030
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4031
                localctx.in_string = self.scalar_expr(0)
                self.state = 4032
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 4033
                self.data_type()
                self.state = 4034
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4036
                    self.td_sysfnlib()


                self.state = 4039
                self.match(TeradataSQLDataTypesParser.TO_BYTES)
                self.state = 4040
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4041
                localctx.in_string = self.scalar_expr(0)
                self.state = 4042
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4043
                localctx.in_encoding = self.char_string_literal()
                self.state = 4044
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4046
                    self.td_sysfnlib()


                self.state = 4049
                self.match(TeradataSQLDataTypesParser.FROM_BYTES)
                self.state = 4050
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4051
                localctx.in_string = self.scalar_expr(0)
                self.state = 4052
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4053
                localctx.out_encoding = self.char_string_literal()
                self.state = 4054
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4056
                    self.td_sysfnlib()


                self.state = 4059
                self.match(TeradataSQLDataTypesParser.TO_NUMBER)
                self.state = 4060
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4061
                localctx.string_expr = self.scalar_expr(0)
                self.state = 4071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4062
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4063
                    localctx.format_arg = self.char_string_literal()
                    self.state = 4069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4064
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 4067
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 4065
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 4066
                            self.match(TeradataSQLDataTypesParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 4073
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4075
                    self.td_sysfnlib()


                self.state = 4078
                self.match(TeradataSQLDataTypesParser.TO_CHAR)
                self.state = 4079
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4080
                localctx.expr = self.scalar_expr(0)
                self.state = 4090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4081
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4082
                    localctx.format_arg = self.char_string_literal()
                    self.state = 4088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4083
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 4086
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 4084
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 4085
                            self.match(TeradataSQLDataTypesParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 4092
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4094
                    self.td_sysfnlib()


                self.state = 4097
                self.match(TeradataSQLDataTypesParser.TO_DATE)
                self.state = 4098
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4099
                localctx.in_string = self.scalar_expr(0)
                self.state = 4100
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4103
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 4101
                    localctx.format_arg = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 4102
                    self.match(TeradataSQLDataTypesParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4105
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4107
                    self.td_sysfnlib()


                self.state = 4110
                _la = self._input.LA(1)
                if not(_la==997 or _la==998):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4111
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4112
                localctx.expr = self.scalar_expr(0)
                self.state = 4118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4113
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4116
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1069, 1070, 1071, 1072, 1203]:
                        self.state = 4114
                        localctx.format_arg = self.char_string_literal()
                        pass
                    elif token in [274]:
                        self.state = 4115
                        self.match(TeradataSQLDataTypesParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4120
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4122
                    self.td_sysfnlib()


                self.state = 4125
                _la = self._input.LA(1)
                if not(_la==995 or _la==999):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4126
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4127
                self.scalar_expr(0)
                self.state = 4128
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4130
                    self.td_sysfnlib()


                self.state = 4133
                _la = self._input.LA(1)
                if not(_la==808 or _la==809):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4134
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4135
                localctx.numeric_value = self.scalar_expr(0)
                self.state = 4136
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4137
                localctx.interval_unit = self.scalar_expr(0)
                self.state = 4138
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.day_value = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLDataTypesParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLDataTypesParser.WEEK, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLDataTypesParser.DAYOFMONTH, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLDataTypesParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLDataTypesParser.SECOND, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST_DAY, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def NEXT_DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.NEXT_DAY, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLDataTypesParser.MONTHS_BETWEEN, 0)

        def ADD_MONTHS(self):
            return self.getToken(TeradataSQLDataTypesParser.ADD_MONTHS, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLDataTypesParser.OADD_MONTHS, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLDataTypesParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDataTypesParser.FROM, 0)

        def DAY(self):
            return self.getToken(TeradataSQLDataTypesParser.DAY, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(TeradataSQLDataTypesParser.TIMEZONE_MINUTE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_date_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_function" ):
                listener.enterDate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_function" ):
                listener.exitDate_function(self)




    def date_function(self):

        localctx = TeradataSQLDataTypesParser.Date_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_date_function)
        self._la = 0 # Token type
        try:
            self.state = 4192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,495,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4142
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368 or _la==478 or _la==1076 or _la==1099):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4143
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4144
                self.scalar_expr(0)
                self.state = 4145
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4147
                    self.td_sysfnlib()


                self.state = 4150
                self.match(TeradataSQLDataTypesParser.LAST_DAY)
                self.state = 4151
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4152
                self.scalar_expr(0)
                self.state = 4153
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4155
                    self.td_sysfnlib()


                self.state = 4158
                self.match(TeradataSQLDataTypesParser.NEXT_DAY)
                self.state = 4159
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4160
                self.scalar_expr(0)
                self.state = 4161
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4162
                localctx.day_value = self.char_string_literal()
                self.state = 4163
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4165
                    self.td_sysfnlib()


                self.state = 4168
                self.match(TeradataSQLDataTypesParser.MONTHS_BETWEEN)
                self.state = 4169
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4170
                self.scalar_expr(0)
                self.state = 4171
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4172
                self.scalar_expr(0)
                self.state = 4173
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4175
                    self.td_sysfnlib()


                self.state = 4178
                _la = self._input.LA(1)
                if not(_la==9 or _la==814):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4179
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4180
                self.scalar_expr(0)
                self.state = 4181
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4182
                self.scalar_expr(0)
                self.state = 4183
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4185
                self.match(TeradataSQLDataTypesParser.EXTRACT)
                self.state = 4186
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4187
                _la = self._input.LA(1)
                if not(_la==106 or _la==185 or _la==248 or _la==258 or ((((_la - 368)) & ~0x3f) == 0 and ((1 << (_la - 368)) & 108086391056891905) != 0) or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4188
                self.match(TeradataSQLDataTypesParser.FROM)
                self.state = 4189
                self.scalar_expr(0)
                self.state = 4190
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def HASHAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.HASHAMP, 0)

        def HASHBAKAMP(self):
            return self.getToken(TeradataSQLDataTypesParser.HASHBAKAMP, 0)

        def hash_bucket_number_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Hash_bucket_number_exprContext,0)


        def HASHBUCKET(self):
            return self.getToken(TeradataSQLDataTypesParser.HASHBUCKET, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def HASHROW(self):
            return self.getToken(TeradataSQLDataTypesParser.HASHROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_hash_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_function" ):
                listener.enterHash_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_function" ):
                listener.exitHash_function(self)




    def hash_function(self):

        localctx = TeradataSQLDataTypesParser.Hash_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_hash_function)
        self._la = 0 # Token type
        try:
            self.state = 4222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,497,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4194
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4195
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4196
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4197
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4198
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4199
                self.hash_bucket_number_expr()
                self.state = 4200
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4202
                self.match(TeradataSQLDataTypesParser.HASHBUCKET)
                self.state = 4203
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4204
                self.scalar_expr(0)
                self.state = 4205
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4207
                self.match(TeradataSQLDataTypesParser.HASHROW)
                self.state = 4208
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4209
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4210
                self.match(TeradataSQLDataTypesParser.HASHROW)
                self.state = 4211
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4212
                self.scalar_expr(0)
                self.state = 4217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4213
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4214
                    self.scalar_expr(0)
                    self.state = 4219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4220
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLDataTypesParser.EMPTY_CLOB, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_lob_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_function" ):
                listener.enterLob_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_function" ):
                listener.exitLob_function(self)




    def lob_function(self):

        localctx = TeradataSQLDataTypesParser.Lob_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_lob_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 4224
                self.td_sysfnlib()


            self.state = 4227
            _la = self._input.LA(1)
            if not(_la==650 or _la==651):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4228
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 4229
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name_string = None # Char_string_literalContext
            self.database_name_string = None # Char_string_literalContext
            self.object_name_string = None # Char_string_literalContext
            self.object_kind_string = None # Char_string_literalContext
            self.map_slot_string = None # Char_string_literalContext
            self.number_of_primary_amps_string = None # Char_string_literalContext
            self.colocation_name_string = None # Char_string_literalContext

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTIGUOUSMAPAMPS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SyslibContext,0)


        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLDataTypesParser.SPARSEMAPAMPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLDataTypesParser.SPARSETABLEAMPS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_map_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_function" ):
                listener.enterMap_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_function" ):
                listener.exitMap_function(self)




    def map_function(self):

        localctx = TeradataSQLDataTypesParser.Map_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_map_function)
        self._la = 0 # Token type
        try:
            self.state = 4267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 4231
                    self.syslib()


                self.state = 4234
                self.match(TeradataSQLDataTypesParser.CONTIGUOUSMAPAMPS)
                self.state = 4235
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4236
                localctx.map_name_string = self.char_string_literal()
                self.state = 4237
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 4239
                    self.syslib()


                self.state = 4242
                self.match(TeradataSQLDataTypesParser.SPARSEMAPAMPS)
                self.state = 4243
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4244
                localctx.database_name_string = self.char_string_literal()
                self.state = 4245
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4246
                localctx.object_name_string = self.char_string_literal()
                self.state = 4247
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4248
                localctx.object_kind_string = self.char_string_literal()
                self.state = 4249
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4250
                localctx.map_slot_string = self.char_string_literal()
                self.state = 4251
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4252
                localctx.number_of_primary_amps_string = self.char_string_literal()
                self.state = 4253
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4254
                localctx.colocation_name_string = self.char_string_literal()
                self.state = 4255
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 4257
                    self.syslib()


                self.state = 4260
                self.match(TeradataSQLDataTypesParser.SPARSETABLEAMPS)
                self.state = 4261
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4262
                localctx.database_name_string = self.char_string_literal()
                self.state = 4263
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4264
                localctx.object_name_string = self.char_string_literal()
                self.state = 4265
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nvl_funtionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NVL(self):
            return self.getToken(TeradataSQLDataTypesParser.NVL, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def NVL2(self):
            return self.getToken(TeradataSQLDataTypesParser.NVL2, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_nvl_funtion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvl_funtion" ):
                listener.enterNvl_funtion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvl_funtion" ):
                listener.exitNvl_funtion(self)




    def nvl_funtion(self):

        localctx = TeradataSQLDataTypesParser.Nvl_funtionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_nvl_funtion)
        self._la = 0 # Token type
        try:
            self.state = 4291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4269
                    self.td_sysfnlib()


                self.state = 4272
                self.match(TeradataSQLDataTypesParser.NVL)
                self.state = 4273
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4274
                self.scalar_expr(0)
                self.state = 4275
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4276
                self.scalar_expr(0)
                self.state = 4277
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4279
                    self.td_sysfnlib()


                self.state = 4282
                self.match(TeradataSQLDataTypesParser.NVL2)
                self.state = 4283
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4284
                self.scalar_expr(0)
                self.state = 4285
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4286
                self.scalar_expr(0)
                self.state = 4287
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4288
                self.scalar_expr(0)
                self.state = 4289
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLDataTypesParser.BEGIN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def END(self):
            return self.getToken(TeradataSQLDataTypesParser.END, 0)

        def IS(self):
            return self.getToken(TeradataSQLDataTypesParser.IS, 0)

        def UNTIL_CHANGED(self):
            return self.getToken(TeradataSQLDataTypesParser.UNTIL_CHANGED, 0)

        def UNTIL_CLOSED(self):
            return self.getToken(TeradataSQLDataTypesParser.UNTIL_CLOSED, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLDataTypesParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Interval_period_specContext,0)


        def LAST(self):
            return self.getToken(TeradataSQLDataTypesParser.LAST, 0)

        def NEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLDataTypesParser.PRIOR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_period_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_function" ):
                listener.enterPeriod_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_function" ):
                listener.exitPeriod_function(self)




    def period_function(self):

        localctx = TeradataSQLDataTypesParser.Period_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_period_function)
        self._la = 0 # Token type
        try:
            self.state = 4334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4293
                self.match(TeradataSQLDataTypesParser.BEGIN)
                self.state = 4294
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4295
                self.scalar_expr(0)
                self.state = 4296
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4298
                self.match(TeradataSQLDataTypesParser.END)
                self.state = 4299
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4300
                self.scalar_expr(0)
                self.state = 4301
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4303
                self.match(TeradataSQLDataTypesParser.END)
                self.state = 4304
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4305
                self.scalar_expr(0)
                self.state = 4306
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4307
                self.match(TeradataSQLDataTypesParser.IS)
                self.state = 4309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 4308
                    self.match(TeradataSQLDataTypesParser.NOT)


                self.state = 4311
                _la = self._input.LA(1)
                if not(_la==450 or _la==451):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4313
                self.match(TeradataSQLDataTypesParser.INTERVAL)
                self.state = 4314
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4315
                self.scalar_expr(0)
                self.state = 4316
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4317
                self.interval_period_spec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4319
                self.match(TeradataSQLDataTypesParser.LAST)
                self.state = 4320
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4321
                self.scalar_expr(0)
                self.state = 4322
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4324
                self.match(TeradataSQLDataTypesParser.NEXT)
                self.state = 4325
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4326
                self.scalar_expr(0)
                self.state = 4327
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4329
                self.match(TeradataSQLDataTypesParser.PRIOR)
                self.state = 4330
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4331
                self.scalar_expr(0)
                self.state = 4332
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regexp_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_string = None # Scalar_exprContext
            self.regexp_string = None # Scalar_exprContext
            self.position_arg = None # Scalar_exprContext
            self.occurrence_arg = None # Scalar_exprContext
            self.match_arg = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.return_opt = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_SUBSTR, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_REPLACE, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_INSTR, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_SIMILAR, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.REGEXP_SPLIT_TO_TABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_regexp_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexp_function" ):
                listener.enterRegexp_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexp_function" ):
                listener.exitRegexp_function(self)




    def regexp_function(self):

        localctx = TeradataSQLDataTypesParser.Regexp_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_regexp_function)
        self._la = 0 # Token type
        try:
            self.state = 4425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4336
                    self.td_sysfnlib()


                self.state = 4339
                self.match(TeradataSQLDataTypesParser.REGEXP_SUBSTR)
                self.state = 4340
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4341
                localctx.source_string = self.scalar_expr(0)
                self.state = 4342
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4343
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 4351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4344
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4345
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 4346
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4347
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 4348
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4349
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 4353
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4355
                    self.td_sysfnlib()


                self.state = 4358
                self.match(TeradataSQLDataTypesParser.REGEXP_REPLACE)
                self.state = 4359
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4360
                localctx.source_string = self.scalar_expr(0)
                self.state = 4361
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4362
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 4372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4363
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4364
                    localctx.replace_string = self.scalar_expr(0)
                    self.state = 4365
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4366
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 4367
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4368
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 4369
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4370
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 4374
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4376
                    self.td_sysfnlib()


                self.state = 4379
                self.match(TeradataSQLDataTypesParser.REGEXP_INSTR)
                self.state = 4380
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4381
                localctx.source_string = self.scalar_expr(0)
                self.state = 4382
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4383
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 4393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4384
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4385
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 4386
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4387
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 4388
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4389
                    localctx.return_opt = self.scalar_expr(0)
                    self.state = 4390
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4391
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 4395
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4397
                    self.td_sysfnlib()


                self.state = 4400
                self.match(TeradataSQLDataTypesParser.REGEXP_SIMILAR)
                self.state = 4401
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4402
                localctx.source_string = self.scalar_expr(0)
                self.state = 4403
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4404
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 4407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4405
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4406
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 4409
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4411
                    self.td_sysfnlib()


                self.state = 4414
                self.match(TeradataSQLDataTypesParser.REGEXP_SPLIT_TO_TABLE)
                self.state = 4415
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4416
                localctx.in_k = self.scalar_expr(0)
                self.state = 4417
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4418
                localctx.source_string = self.scalar_expr(0)
                self.state = 4419
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4420
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 4421
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4422
                localctx.match_arg = self.scalar_expr(0)
                self.state = 4423
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.delim_string_value = None # Char_string_literalContext
            self.quote_string_value = None # Char_string_literalContext
            self.data_string_value = None # Scalar_exprContext
            self.ci = None # Integer_literalContext
            self.cd = None # Integer_literalContext
            self.cs = None # Integer_literalContext
            self.ct = None # Integer_literalContext
            self.source_string = None # Scalar_exprContext
            self.search_string = None # Scalar_exprContext
            self.position = None # Scalar_exprContext
            self.occurrence = None # Scalar_exprContext
            self.length = None # Scalar_exprContext
            self.fill_string = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.name_to_search = None # Scalar_exprContext
            self.name_delimiters = None # Scalar_exprContext
            self.value_delimiters = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.from_string = None # Scalar_exprContext
            self.to_string = None # Scalar_exprContext
            self.delimiter = None # Scalar_exprContext
            self.token_num = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext
            self.delimiters = None # Scalar_exprContext
            self.out_k = None # Column_specContext
            self.out_token_num = None # Column_specContext
            self.out_token = None # Column_specContext
            self.string_expr = None # Scalar_exprContext
            self.trim_expr = None # Scalar_exprContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, i)

        def ASCII(self):
            return self.getToken(TeradataSQLDataTypesParser.ASCII, 0)

        def CHR(self):
            return self.getToken(TeradataSQLDataTypesParser.CHR, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLDataTypesParser.INITCAP, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLDataTypesParser.LENGTH, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLDataTypesParser.REVERSE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def CHAR2HEXINT(self):
            return self.getToken(TeradataSQLDataTypesParser.CHAR2HEXINT, 0)

        def SOUNDEX(self):
            return self.getToken(TeradataSQLDataTypesParser.SOUNDEX, 0)

        def STRING_CS(self):
            return self.getToken(TeradataSQLDataTypesParser.STRING_CS, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLDataTypesParser.VARGRAPHIC, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLDataTypesParser.CONCAT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def CSV(self):
            return self.getToken(TeradataSQLDataTypesParser.CSV, 0)

        def NEW(self):
            return self.getToken(TeradataSQLDataTypesParser.NEW, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLDataTypesParser.VARIANT, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLDataTypesParser.TYPE, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def CSVLD(self):
            return self.getToken(TeradataSQLDataTypesParser.CSVLD, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLDataTypesParser.EDITDISTANCE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def INDEX(self):
            return self.getToken(TeradataSQLDataTypesParser.INDEX, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLDataTypesParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLDataTypesParser.RIGHT, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(TeradataSQLDataTypesParser.LOWER, 0)

        def UPPER(self):
            return self.getToken(TeradataSQLDataTypesParser.UPPER, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLDataTypesParser.UCASE, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLDataTypesParser.LPAD, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLDataTypesParser.RPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.RTRIM, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLDataTypesParser.NGRAM, 0)

        def NVP(self):
            return self.getToken(TeradataSQLDataTypesParser.NVP, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLDataTypesParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLDataTypesParser.OTRANSLATE, 0)

        def POSITION(self):
            return self.getToken(TeradataSQLDataTypesParser.POSITION, 0)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLDataTypesParser.STRTOK, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.STRTOK_SPLIT_TO_TABLE, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNS, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_specContext,i)


        def SUBSTRING(self):
            return self.getToken(TeradataSQLDataTypesParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(TeradataSQLDataTypesParser.FROM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDataTypesParser.FOR, 0)

        def SUBSTR(self):
            return self.getToken(TeradataSQLDataTypesParser.SUBSTR, 0)

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def translation_mapping(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Translation_mappingContext,0)


        def TRANSLATE(self):
            return self.getToken(TeradataSQLDataTypesParser.TRANSLATE, 0)

        def TRANSLATE_CHK(self):
            return self.getToken(TeradataSQLDataTypesParser.TRANSLATE_CHK, 0)

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLDataTypesParser.ERROR, 0)

        def TRIM(self):
            return self.getToken(TeradataSQLDataTypesParser.TRIM, 0)

        def BOTH(self):
            return self.getToken(TeradataSQLDataTypesParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(TeradataSQLDataTypesParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(TeradataSQLDataTypesParser.LEADING, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = TeradataSQLDataTypesParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 4740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,552,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4427
                    self.td_sysfnlib()


                self.state = 4430
                _la = self._input.LA(1)
                if not(_la==535 or _la==572 or _la==708 or _la==739 or _la==1084):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4431
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4432
                self.scalar_expr(0)
                self.state = 4433
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4435
                _la = self._input.LA(1)
                if not(_la==54 or _la==383 or _la==399 or _la==465):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4436
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4437
                self.scalar_expr(0)
                self.state = 4438
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4440
                self.match(TeradataSQLDataTypesParser.CONCAT)
                self.state = 4441
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4442
                self.scalar_expr(0)
                self.state = 4443
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4444
                self.scalar_expr(0)
                self.state = 4449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4445
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4446
                    self.scalar_expr(0)
                    self.state = 4451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4452
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4454
                    self.td_sysfnlib()


                self.state = 4457
                self.match(TeradataSQLDataTypesParser.CSV)
                self.state = 4458
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4459
                self.match(TeradataSQLDataTypesParser.NEW)
                self.state = 4460
                self.match(TeradataSQLDataTypesParser.VARIANT)
                self.state = 4461
                self.match(TeradataSQLDataTypesParser.TYPE)
                self.state = 4462
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4463
                self.scalar_expr(0)
                self.state = 4468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4464
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4465
                    self.scalar_expr(0)
                    self.state = 4470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4471
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4472
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4473
                localctx.delim_string_value = self.char_string_literal()
                self.state = 4474
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4475
                localctx.quote_string_value = self.char_string_literal()
                self.state = 4476
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4478
                    self.td_sysfnlib()


                self.state = 4481
                self.match(TeradataSQLDataTypesParser.CSVLD)
                self.state = 4482
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4483
                localctx.data_string_value = self.scalar_expr(0)
                self.state = 4484
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4485
                localctx.delim_string_value = self.char_string_literal()
                self.state = 4486
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4487
                localctx.quote_string_value = self.char_string_literal()
                self.state = 4488
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4490
                    self.td_sysfnlib()


                self.state = 4493
                self.match(TeradataSQLDataTypesParser.EDITDISTANCE)
                self.state = 4494
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4495
                self.scalar_expr(0)
                self.state = 4496
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4497
                self.scalar_expr(0)
                self.state = 4507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4498
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4499
                    localctx.ci = self.integer_literal()
                    self.state = 4500
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4501
                    localctx.cd = self.integer_literal()
                    self.state = 4502
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4503
                    localctx.cs = self.integer_literal()
                    self.state = 4504
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4505
                    localctx.ct = self.integer_literal()


                self.state = 4509
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4511
                self.match(TeradataSQLDataTypesParser.INDEX)
                self.state = 4512
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4513
                self.scalar_expr(0)
                self.state = 4514
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4515
                self.scalar_expr(0)
                self.state = 4516
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4518
                    self.td_sysfnlib()


                self.state = 4521
                self.match(TeradataSQLDataTypesParser.INSTR)
                self.state = 4522
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4523
                localctx.source_string = self.scalar_expr(0)
                self.state = 4524
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4525
                localctx.search_string = self.scalar_expr(0)
                self.state = 4532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4526
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4527
                    localctx.position = self.scalar_expr(0)
                    self.state = 4530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4528
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 4529
                        localctx.occurrence = self.scalar_expr(0)




                self.state = 4534
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4536
                    self.td_sysfnlib()


                self.state = 4539
                _la = self._input.LA(1)
                if not(_la==219 or _la==355):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4540
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4541
                localctx.source_string = self.scalar_expr(0)
                self.state = 4542
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4543
                localctx.length = self.scalar_expr(0)
                self.state = 4544
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4546
                self.match(TeradataSQLDataTypesParser.LOCATE)
                self.state = 4547
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4548
                self.scalar_expr(0)
                self.state = 4549
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4550
                self.scalar_expr(0)
                self.state = 4553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4551
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4552
                    self.scalar_expr(0)


                self.state = 4555
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4557
                _la = self._input.LA(1)
                if not(_la==233 or _la==454 or _la==1011):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4558
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4559
                self.scalar_expr(0)
                self.state = 4560
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4562
                    self.td_sysfnlib()


                self.state = 4565
                _la = self._input.LA(1)
                if not(_la==746 or _la==898):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4566
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4567
                localctx.source_string = self.scalar_expr(0)
                self.state = 4568
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4569
                localctx.length = self.scalar_expr(0)
                self.state = 4572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4570
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4571
                    localctx.fill_string = self.scalar_expr(0)


                self.state = 4574
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 4577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4576
                    self.td_sysfnlib()


                self.state = 4579
                _la = self._input.LA(1)
                if not(_la==747 or _la==899):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4580
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4581
                self.scalar_expr(0)
                self.state = 4584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4582
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4583
                    self.scalar_expr(0)


                self.state = 4586
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 4589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4588
                    self.td_sysfnlib()


                self.state = 4591
                self.match(TeradataSQLDataTypesParser.NGRAM)
                self.state = 4592
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4593
                self.scalar_expr(0)
                self.state = 4594
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4595
                self.scalar_expr(0)
                self.state = 4596
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4597
                localctx.length = self.scalar_expr(0)
                self.state = 4600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4598
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4599
                    localctx.position = self.scalar_expr(0)


                self.state = 4602
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 4605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4604
                    self.td_sysfnlib()


                self.state = 4607
                self.match(TeradataSQLDataTypesParser.NVP)
                self.state = 4608
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4609
                localctx.in_string = self.scalar_expr(0)
                self.state = 4610
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4611
                localctx.name_to_search = self.scalar_expr(0)
                self.state = 4622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4612
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4613
                    localctx.name_delimiters = self.scalar_expr(0)
                    self.state = 4620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4614
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 4615
                        localctx.value_delimiters = self.scalar_expr(0)
                        self.state = 4618
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 4616
                            self.match(TeradataSQLDataTypesParser.COMMA)
                            self.state = 4617
                            localctx.occurrence = self.scalar_expr(0)






                self.state = 4624
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 4627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4626
                    self.td_sysfnlib()


                self.state = 4629
                self.match(TeradataSQLDataTypesParser.OREPLACE)
                self.state = 4630
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4631
                localctx.source_string = self.scalar_expr(0)
                self.state = 4632
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4633
                localctx.search_string = self.scalar_expr(0)
                self.state = 4636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4634
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4635
                    localctx.replace_string = self.scalar_expr(0)


                self.state = 4638
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 4641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4640
                    self.td_sysfnlib()


                self.state = 4643
                self.match(TeradataSQLDataTypesParser.OTRANSLATE)
                self.state = 4644
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4645
                localctx.source_string = self.scalar_expr(0)
                self.state = 4646
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4647
                localctx.from_string = self.scalar_expr(0)
                self.state = 4648
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4649
                localctx.to_string = self.scalar_expr(0)
                self.state = 4650
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 4652
                self.match(TeradataSQLDataTypesParser.POSITION)
                self.state = 4653
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4654
                self.scalar_expr(0)
                self.state = 4655
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 4656
                self.scalar_expr(0)
                self.state = 4657
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 4660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4659
                    self.td_sysfnlib()


                self.state = 4662
                self.match(TeradataSQLDataTypesParser.STRTOK)
                self.state = 4663
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4664
                localctx.in_string = self.scalar_expr(0)
                self.state = 4671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4665
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4666
                    localctx.delimiter = self.scalar_expr(0)
                    self.state = 4669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4667
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 4668
                        localctx.token_num = self.scalar_expr(0)




                self.state = 4673
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 4676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4675
                    self.td_sysfnlib()


                self.state = 4678
                self.match(TeradataSQLDataTypesParser.STRTOK_SPLIT_TO_TABLE)
                self.state = 4679
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4680
                localctx.in_k = self.scalar_expr(0)
                self.state = 4681
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4682
                localctx.in_string = self.scalar_expr(0)
                self.state = 4683
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4684
                localctx.delimiters = self.scalar_expr(0)
                self.state = 4685
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4686
                self.match(TeradataSQLDataTypesParser.RETURNS)
                self.state = 4687
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4688
                localctx.out_k = self.column_spec()
                self.state = 4689
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4690
                localctx.out_token_num = self.column_spec()
                self.state = 4691
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4692
                localctx.out_token = self.column_spec()
                self.state = 4693
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 4695
                self.match(TeradataSQLDataTypesParser.SUBSTRING)
                self.state = 4696
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4697
                self.scalar_expr(0)
                self.state = 4698
                self.match(TeradataSQLDataTypesParser.FROM)
                self.state = 4699
                self.scalar_expr(0)
                self.state = 4702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 4700
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4701
                    self.scalar_expr(0)


                self.state = 4704
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 4706
                _la = self._input.LA(1)
                if not(_la==401 or _la==402):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4707
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4708
                self.scalar_expr(0)
                self.state = 4709
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4710
                self.scalar_expr(0)
                self.state = 4713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 4711
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4712
                    self.scalar_expr(0)


                self.state = 4715
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 4717
                _la = self._input.LA(1)
                if not(_la==433 or _la==434):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4718
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4719
                localctx.string_expr = self.scalar_expr(0)
                self.state = 4720
                self.match(TeradataSQLDataTypesParser.USING)
                self.state = 4721
                self.translation_mapping()
                self.state = 4724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4722
                    self.match(TeradataSQLDataTypesParser.WITH)
                    self.state = 4723
                    self.match(TeradataSQLDataTypesParser.ERROR)


                self.state = 4726
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 4728
                self.match(TeradataSQLDataTypesParser.TRIM)
                self.state = 4729
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39 or _la==217 or _la==429:
                    self.state = 4730
                    _la = self._input.LA(1)
                    if not(_la==39 or _la==217 or _la==429):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 4731
                        localctx.trim_expr = self.scalar_expr(0)


                    self.state = 4734
                    self.match(TeradataSQLDataTypesParser.FROM)


                self.state = 4737
                localctx.string_expr = self.scalar_expr(0)
                self.state = 4738
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_expr = None # Scalar_exprContext
            self.bson_data = None # Scalar_exprContext
            self.check_type = None # Char_string_literalContext
            self.geom_expr = None # Scalar_exprContext
            self.precision = None # Integer_literalContext
            self.geojson_expr = None # Scalar_exprContext
            self.asrid = None # Integer_literalContext
            self.json_string = None # Scalar_exprContext
            self.json_object = None # Scalar_exprContext
            self.json_path = None # Scalar_exprContext
            self.nvp_string = None # Scalar_exprContext
            self.name_delimiters = None # Char_string_literalContext
            self.value_delimiters = None # Char_string_literalContext
            self.ignore_characters = None # Char_string_literalContext

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.ARRAY_TO_JSON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Returns_clauseContext,0)


        def BSON_CHECK(self):
            return self.getToken(TeradataSQLDataTypesParser.BSON_CHECK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATASIZE, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLDataTypesParser.GEOJSONFROMGEOM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLDataTypesParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONGETVALUE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def JSONMETADATA(self):
            return self.getToken(TeradataSQLDataTypesParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLDataTypesParser.NVP2JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_AGG, 0)

        def json_param_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Json_param_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Json_param_specContext,i)


        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLDataTypesParser.JSON_COMPOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_json_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_function" ):
                listener.enterJson_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_function" ):
                listener.exitJson_function(self)




    def json_function(self):

        localctx = TeradataSQLDataTypesParser.Json_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_json_function)
        self._la = 0 # Token type
        try:
            self.state = 4864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4742
                    self.td_sysfnlib()


                self.state = 4745
                self.match(TeradataSQLDataTypesParser.ARRAY_TO_JSON)
                self.state = 4746
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4747
                localctx.array_expr = self.scalar_expr(0)
                self.state = 4748
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
                if la_ == 1:
                    self.state = 4749
                    self.returns_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4752
                    self.td_sysfnlib()


                self.state = 4755
                self.match(TeradataSQLDataTypesParser.BSON_CHECK)
                self.state = 4756
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4757
                localctx.bson_data = self.scalar_expr(0)
                self.state = 4760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4758
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4759
                    localctx.check_type = self.char_string_literal()


                self.state = 4762
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4764
                    self.td_sysfnlib()


                self.state = 4767
                self.match(TeradataSQLDataTypesParser.DATASIZE)
                self.state = 4768
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4769
                self.scalar_expr(0)
                self.state = 4770
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4772
                    self.td_sysfnlib()


                self.state = 4775
                self.match(TeradataSQLDataTypesParser.GEOJSONFROMGEOM)
                self.state = 4776
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4777
                localctx.geom_expr = self.scalar_expr(0)
                self.state = 4780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4778
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4779
                    localctx.precision = self.integer_literal()


                self.state = 4782
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
                if la_ == 1:
                    self.state = 4783
                    self.returns_clause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4786
                    self.td_sysfnlib()


                self.state = 4789
                self.match(TeradataSQLDataTypesParser.GEOMFROMGEOJSON)
                self.state = 4790
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4791
                localctx.geojson_expr = self.scalar_expr(0)
                self.state = 4792
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4793
                localctx.asrid = self.integer_literal()
                self.state = 4794
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4796
                    self.td_sysfnlib()


                self.state = 4799
                self.match(TeradataSQLDataTypesParser.JSON_CHECK)
                self.state = 4800
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4801
                localctx.json_string = self.scalar_expr(0)
                self.state = 4802
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4804
                self.match(TeradataSQLDataTypesParser.JSONGETVALUE)
                self.state = 4805
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4806
                localctx.json_object = self.scalar_expr(0)
                self.state = 4807
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 4808
                localctx.json_path = self.scalar_expr(0)
                self.state = 4809
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 4810
                self.data_type()
                self.state = 4811
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4813
                self.match(TeradataSQLDataTypesParser.JSONMETADATA)
                self.state = 4814
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4815
                localctx.json_object = self.scalar_expr(0)
                self.state = 4816
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4818
                    self.td_sysfnlib()


                self.state = 4821
                self.match(TeradataSQLDataTypesParser.NVP2JSON)
                self.state = 4822
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4823
                localctx.nvp_string = self.scalar_expr(0)
                self.state = 4832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4824
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4825
                    localctx.name_delimiters = self.char_string_literal()
                    self.state = 4826
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4827
                    localctx.value_delimiters = self.char_string_literal()
                    self.state = 4830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4828
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 4829
                        localctx.ignore_characters = self.char_string_literal()




                self.state = 4834
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4836
                self.match(TeradataSQLDataTypesParser.JSON_AGG)
                self.state = 4837
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4838
                self.json_param_spec()
                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4839
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4840
                    self.json_param_spec()
                    self.state = 4845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4846
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,567,self._ctx)
                if la_ == 1:
                    self.state = 4847
                    self.returns_clause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4850
                self.match(TeradataSQLDataTypesParser.JSON_COMPOSE)
                self.state = 4851
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4852
                self.json_param_spec()
                self.state = 4857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4853
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4854
                    self.json_param_spec()
                    self.state = 4859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4860
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 4862
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,569,self._ctx)
                if la_ == 1:
                    self.state = 4861
                    self.returns_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_data = None # Scalar_exprContext
            self.xquery_expr = None # Char_string_literalContext
            self.xml_value_exp = None # Scalar_exprContext
            self.xml_value_expr = None # Scalar_exprContext
            self.xml_comment = None # Scalar_exprContext
            self.xml_text = None # Scalar_exprContext
            self.xml_schema = None # Scalar_exprContext
            self.xml_uri = None # Char_string_literalContext
            self.xml_valid_element_name = None # Scalar_exprContext
            self.doc_id = None # Scalar_exprContext
            self.source_doc = None # Scalar_exprContext
            self.split_size = None # Scalar_exprContext
            self.split_path = None # Scalar_exprContext
            self._scalar_expr = None # Scalar_exprContext
            self.replication_list = list() # of Scalar_exprContexts
            self.query_string = None # Scalar_exprContext
            self.xslt = None # Scalar_exprContext
            self.xml_string = None # Scalar_exprContext
            self.result_code = None # Scalar_exprContext
            self.document_grouping_spec = None # Scalar_exprContext

        def CREATEXML(self):
            return self.getToken(TeradataSQLDataTypesParser.CREATEXML, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATASIZE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysfnlibContext,0)


        def XMLQUERY(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLQUERY, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_query_argumentContext,0)


        def xml_returning_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_returning_specContext,0)


        def xml_query_on_empty(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_query_on_emptyContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLSERIALIZE, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTENT, 0)

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def xml_encoding(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_encodingContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def BOM(self):
            return self.getToken(TeradataSQLDataTypesParser.BOM, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLDataTypesParser.VERSION, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLDECLARATION, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.NO)
            else:
                return self.getToken(TeradataSQLDataTypesParser.NO, i)

        def INDENT(self):
            return self.getToken(TeradataSQLDataTypesParser.INDENT, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCLUDING, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLDataTypesParser.SIZE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLELEMENT, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.NAME, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_namespace_declarationContext,0)


        def xml_attribute_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_attribute_declarationContext,0)


        def xml_value_declaration(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_value_declarationContext,0)


        def XMLFOREST(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLFOREST, 0)

        def xml_forest_element_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Xml_forest_element_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_forest_element_specContext,i)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_content_option_specContext,0)


        def XMLCONCAT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLCONCAT, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLCOMMENT, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPI, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLTEXT, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPARSE, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLDataTypesParser.WHITESPACE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLDataTypesParser.PRESERVE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLDataTypesParser.STRIP, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLVALIDATE, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLDataTypesParser.ACCORDING, 0)

        def TO(self):
            return self.getToken(TeradataSQLDataTypesParser.TO, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLSCHEMA, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.VALUE, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDataTypesParser.SEQUENCE, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLDataTypesParser.NAMESPACE, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ELEMENT, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLAGG, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_fullContext,i)


        def XMLSPLIT(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLSPLIT, 0)

        def td_sysxml(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Td_sysxmlContext,0)


        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLPUBLISH_STREAM, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_function" ):
                listener.enterXml_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_function" ):
                listener.exitXml_function(self)




    def xml_function(self):

        localctx = TeradataSQLDataTypesParser.Xml_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_xml_function)
        self._la = 0 # Token type
        try:
            self.state = 5113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,604,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4866
                self.match(TeradataSQLDataTypesParser.CREATEXML)
                self.state = 4867
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4868
                localctx.xml_data = self.scalar_expr(0)
                self.state = 4869
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 4871
                    self.td_sysfnlib()


                self.state = 4874
                self.match(TeradataSQLDataTypesParser.DATASIZE)
                self.state = 4875
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4876
                self.scalar_expr(0)
                self.state = 4877
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4879
                self.match(TeradataSQLDataTypesParser.XMLQUERY)
                self.state = 4880
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4881
                localctx.xquery_expr = self.char_string_literal()
                self.state = 4883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==845:
                    self.state = 4882
                    self.xml_query_argument()


                self.state = 4886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4885
                    self.xml_returning_spec()


                self.state = 4889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==649:
                    self.state = 4888
                    self.xml_query_on_empty()


                self.state = 4891
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4893
                self.match(TeradataSQLDataTypesParser.XMLSERIALIZE)
                self.state = 4894
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4895
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4896
                localctx.xml_value_exp = self.scalar_expr(0)
                self.state = 4899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4897
                    self.match(TeradataSQLDataTypesParser.AS)
                    self.state = 4898
                    self.data_type()


                self.state = 4902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==653:
                    self.state = 4901
                    self.xml_encoding()


                self.state = 4909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4904
                    self.match(TeradataSQLDataTypesParser.WITH)
                    self.state = 4906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4905
                        self.match(TeradataSQLDataTypesParser.NO)


                    self.state = 4908
                    self.match(TeradataSQLDataTypesParser.BOM)


                self.state = 4913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1023:
                    self.state = 4911
                    self.match(TeradataSQLDataTypesParser.VERSION)
                    self.state = 4912
                    self.char_string_literal()


                self.state = 4917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==661 or _la==701:
                    self.state = 4915
                    _la = self._input.LA(1)
                    if not(_la==661 or _la==701):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4916
                    self.match(TeradataSQLDataTypesParser.XMLDECLARATION)


                self.state = 4925
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 4919
                    self.match(TeradataSQLDataTypesParser.NO)
                    self.state = 4920
                    self.match(TeradataSQLDataTypesParser.INDENT)
                    pass
                elif token in [704]:
                    self.state = 4921
                    self.match(TeradataSQLDataTypesParser.INDENT)

                    self.state = 4922
                    self.match(TeradataSQLDataTypesParser.SIZE)
                    self.state = 4923
                    self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                    self.state = 4924
                    self.integer_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 4927
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4929
                self.match(TeradataSQLDataTypesParser.XMLDOCUMENT)
                self.state = 4930
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4931
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 4933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4932
                    self.xml_returning_spec()


                self.state = 4935
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4937
                self.match(TeradataSQLDataTypesParser.XMLELEMENT)
                self.state = 4938
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4939
                self.match(TeradataSQLDataTypesParser.NAME)
                self.state = 4940
                self.column_name()
                self.state = 4943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
                if la_ == 1:
                    self.state = 4941
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4942
                    self.xml_namespace_declaration()


                self.state = 4947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
                if la_ == 1:
                    self.state = 4945
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4946
                    self.xml_attribute_declaration()


                self.state = 4951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4949
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4950
                    self.xml_value_declaration()


                self.state = 4954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4953
                    self.xml_returning_spec()


                self.state = 4956
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4958
                self.match(TeradataSQLDataTypesParser.XMLFOREST)
                self.state = 4959
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4961
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
                if la_ == 1:
                    self.state = 4960
                    self.xml_namespace_declaration()


                self.state = 4971
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,589,self._ctx)
                if la_ == 1:
                    self.state = 4963
                    self.xml_forest_element_spec()
                    self.state = 4968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4964
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 4965
                        self.xml_forest_element_spec()
                        self.state = 4970
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==289:
                    self.state = 4973
                    self.xml_content_option_spec()


                self.state = 4977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4976
                    self.xml_returning_spec()


                self.state = 4979
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4980
                self.match(TeradataSQLDataTypesParser.XMLCONCAT)
                self.state = 4981
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4982
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 4987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4983
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 4984
                    localctx.xml_value_expr = self.scalar_expr(0)
                    self.state = 4989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4990
                    self.xml_returning_spec()


                self.state = 4993
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4995
                self.match(TeradataSQLDataTypesParser.XMLCOMMENT)
                self.state = 4996
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 4997
                localctx.xml_comment = self.scalar_expr(0)
                self.state = 4999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 4998
                    self.xml_returning_spec()


                self.state = 5001
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5003
                self.match(TeradataSQLDataTypesParser.XMLPI)
                self.state = 5004
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5005
                self.match(TeradataSQLDataTypesParser.NAME)
                self.state = 5006
                self.column_name()
                self.state = 5009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5007
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5008
                    self.scalar_expr(0)


                self.state = 5012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5011
                    self.xml_returning_spec()


                self.state = 5014
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5016
                self.match(TeradataSQLDataTypesParser.XMLTEXT)
                self.state = 5017
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5018
                localctx.xml_text = self.scalar_expr(0)
                self.state = 5020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5019
                    self.xml_returning_spec()


                self.state = 5022
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5024
                self.match(TeradataSQLDataTypesParser.XMLPARSE)
                self.state = 5025
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5026
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5027
                self.scalar_expr(0)
                self.state = 5028
                _la = self._input.LA(1)
                if not(_la==307 or _la==942):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5029
                self.match(TeradataSQLDataTypesParser.WHITESPACE)
                self.state = 5030
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5032
                self.match(TeradataSQLDataTypesParser.XMLVALIDATE)
                self.state = 5033
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5034
                _la = self._input.LA(1)
                if not(_la==593 or _la==636 or _la==914):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5035
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5036
                self.match(TeradataSQLDataTypesParser.ACCORDING)
                self.state = 5037
                self.match(TeradataSQLDataTypesParser.TO)
                self.state = 5038
                self.match(TeradataSQLDataTypesParser.XMLSCHEMA)
                self.state = 5039
                self.match(TeradataSQLDataTypesParser.VALUE)
                self.state = 5040
                localctx.xml_schema = self.scalar_expr(0)
                self.state = 5045
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [790]:
                    self.state = 5041
                    self.match(TeradataSQLDataTypesParser.NAMESPACE)
                    self.state = 5042
                    localctx.xml_uri = self.char_string_literal()
                    pass
                elif token in [268]:
                    self.state = 5043
                    self.match(TeradataSQLDataTypesParser.NO)
                    self.state = 5044
                    self.match(TeradataSQLDataTypesParser.NAMESPACE)
                    pass
                elif token in [646, 1214]:
                    pass
                else:
                    pass
                self.state = 5049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==646:
                    self.state = 5047
                    self.match(TeradataSQLDataTypesParser.ELEMENT)
                    self.state = 5048
                    localctx.xml_valid_element_name = self.scalar_expr(0)


                self.state = 5051
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5053
                self.match(TeradataSQLDataTypesParser.XMLAGG)
                self.state = 5054
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5055
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 5066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 5056
                    self.match(TeradataSQLDataTypesParser.ORDER)
                    self.state = 5057
                    self.match(TeradataSQLDataTypesParser.BY)
                    self.state = 5058
                    self.order_by_spec_full()
                    self.state = 5063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 5059
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 5060
                        self.order_by_spec_full()
                        self.state = 5065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 5068
                    self.xml_returning_spec()


                self.state = 5071
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5073
                self.match(TeradataSQLDataTypesParser.XMLSPLIT)
                self.state = 5074
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5075
                localctx.doc_id = self.scalar_expr(0)
                self.state = 5076
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5077
                localctx.source_doc = self.scalar_expr(0)
                self.state = 5078
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5079
                localctx.split_size = self.scalar_expr(0)
                self.state = 5080
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5081
                localctx.split_path = self.scalar_expr(0)
                self.state = 5086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5082
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5083
                    localctx._scalar_expr = self.scalar_expr(0)
                    localctx.replication_list.append(localctx._scalar_expr)
                    self.state = 5088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5089
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5091
                self.td_sysxml()
                self.state = 5092
                self.match(TeradataSQLDataTypesParser.XMLPUBLISH)
                self.state = 5093
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5094
                localctx.query_string = self.scalar_expr(0)
                self.state = 5095
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5096
                localctx.xslt = self.scalar_expr(0)
                self.state = 5097
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5098
                localctx.xml_string = self.scalar_expr(0)
                self.state = 5099
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5100
                localctx.result_code = self.scalar_expr(0)
                self.state = 5101
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5103
                self.td_sysxml()
                self.state = 5104
                self.match(TeradataSQLDataTypesParser.XMLPUBLISH_STREAM)
                self.state = 5105
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5106
                localctx.query_string = self.scalar_expr(0)
                self.state = 5107
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5108
                localctx.xslt = self.scalar_expr(0)
                self.state = 5109
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5110
                localctx.document_grouping_spec = self.scalar_expr(0)
                self.state = 5111
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Returns_clauseContext,0)


        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = TeradataSQLDataTypesParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 5137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5115
                self.function_name()
                self.state = 5116
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5117
                self.scalar_expr(0)
                self.state = 5122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5118
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5119
                    self.scalar_expr(0)
                    self.state = 5124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5125
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 5128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
                if la_ == 1:
                    self.state = 5126
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 5127
                    self.window_spec()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5130
                self.function_name()
                self.state = 5131
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5132
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                self.state = 5135
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,607,self._ctx)
                if la_ == 1:
                    self.state = 5133
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 5134
                    self.window_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_N(self):
            return self.getToken(TeradataSQLDataTypesParser.CASE_N, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def case_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Case_specContext,0)


        def RANGE_N(self):
            return self.getToken(TeradataSQLDataTypesParser.RANGE_N, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def BETWEEN(self):
            return self.getToken(TeradataSQLDataTypesParser.BETWEEN, 0)

        def range_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Range_exprContext,0)


        def range_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Range_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_partitioning_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_expr" ):
                listener.enterPartitioning_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_expr" ):
                listener.exitPartitioning_expr(self)




    def partitioning_expr(self):

        localctx = TeradataSQLDataTypesParser.Partitioning_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_partitioning_expr)
        self._la = 0 # Token type
        try:
            self.state = 5166
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5139
                self.match(TeradataSQLDataTypesParser.CASE_N)
                self.state = 5140
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5141
                self.logical_expr(0)
                self.state = 5146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,609,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5142
                        self.match(TeradataSQLDataTypesParser.COMMA)
                        self.state = 5143
                        self.logical_expr(0) 
                    self.state = 5148
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,609,self._ctx)

                self.state = 5151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5149
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5150
                    self.case_spec()


                self.state = 5153
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5155
                self.match(TeradataSQLDataTypesParser.RANGE_N)
                self.state = 5156
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5157
                self.scalar_expr(0)
                self.state = 5158
                self.match(TeradataSQLDataTypesParser.BETWEEN)
                self.state = 5159
                self.range_expr()
                self.state = 5162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 5160
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5161
                    self.range_spec()


                self.state = 5164
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysfnlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_SYSFNLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_td_sysfnlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysfnlib" ):
                listener.enterTd_sysfnlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysfnlib" ):
                listener.exitTd_sysfnlib(self)




    def td_sysfnlib(self):

        localctx = TeradataSQLDataTypesParser.Td_sysfnlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_td_sysfnlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5168
            self.match(TeradataSQLDataTypesParser.TD_SYSFNLIB)
            self.state = 5169
            self.match(TeradataSQLDataTypesParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysxmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_SYSXML, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_td_sysxml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysxml" ):
                listener.enterTd_sysxml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysxml" ):
                listener.exitTd_sysxml(self)




    def td_sysxml(self):

        localctx = TeradataSQLDataTypesParser.Td_sysxmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_td_sysxml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5171
            self.match(TeradataSQLDataTypesParser.TD_SYSXML)
            self.state = 5172
            self.match(TeradataSQLDataTypesParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyslibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSLIB(self):
            return self.getToken(TeradataSQLDataTypesParser.SYSLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_syslib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyslib" ):
                listener.enterSyslib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyslib" ):
                listener.exitSyslib(self)




    def syslib(self):

        localctx = TeradataSQLDataTypesParser.SyslibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_syslib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5174
            self.match(TeradataSQLDataTypesParser.SYSLIB)
            self.state = 5175
            self.match(TeradataSQLDataTypesParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_server_dbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLDataTypesParser.TD_SERVER_DB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_td_server_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_server_db" ):
                listener.enterTd_server_db(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_server_db" ):
                listener.exitTd_server_db(self)




    def td_server_db(self):

        localctx = TeradataSQLDataTypesParser.Td_server_dbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_td_server_db)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5177
            self.match(TeradataSQLDataTypesParser.TD_SERVER_DB)
            self.state = 5178
            self.match(TeradataSQLDataTypesParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Translation_mappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLDataTypesParser.UNICODE_TO_LOCALE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_translation_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation_mapping" ):
                listener.enterTranslation_mapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation_mapping" ):
                listener.exitTranslation_mapping(self)




    def translation_mapping(self):

        localctx = TeradataSQLDataTypesParser.Translation_mappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_translation_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5180
            _la = self._input.LA(1)
            if not(((((_la - 1104)) & ~0x3f) == 0 and ((1 << (_la - 1104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def attribute_modification_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Attribute_modification_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Attribute_modification_optionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_attribute_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification" ):
                listener.enterAttribute_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification" ):
                listener.exitAttribute_modification(self)




    def attribute_modification(self):

        localctx = TeradataSQLDataTypesParser.Attribute_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_attribute_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5182
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5183
            self.attribute_modification_option()
            self.state = 5188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5184
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5185
                self.attribute_modification_option()
                self.state = 5190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5191
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def STYLE(self):
            return self.getToken(TeradataSQLDataTypesParser.STYLE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_clause" ):
                listener.enterReturns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_clause" ):
                listener.exitReturns_clause(self)




    def returns_clause(self):

        localctx = TeradataSQLDataTypesParser.Returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_returns_clause)
        try:
            self.state = 5198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,614,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5193
                self.match(TeradataSQLDataTypesParser.RETURNS)
                self.state = 5194
                self.data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5195
                self.match(TeradataSQLDataTypesParser.RETURNS)
                self.state = 5196
                self.match(TeradataSQLDataTypesParser.STYLE)
                self.state = 5197
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modification_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def teradata_type_conversion_data_attribute(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Teradata_type_conversion_data_attributeContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Casespecific_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_phraseContext,0)


        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Uppercase_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_attribute_modification_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification_option" ):
                listener.enterAttribute_modification_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification_option" ):
                listener.exitAttribute_modification_option(self)




    def attribute_modification_option(self):

        localctx = TeradataSQLDataTypesParser.Attribute_modification_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_attribute_modification_option)
        try:
            self.state = 5204
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 262, 425]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5200
                self.teradata_type_conversion_data_attribute()
                pass
            elif token in [49, 88, 272, 1211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5201
                self.casespecific_phrase()
                pass
            elif token in [52, 55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5202
                self.character_set_phrase()
                pass
            elif token in [438, 455]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5203
                self.uppercase_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def teradata_type_conversion_data_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Teradata_type_conversion_data_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Teradata_type_conversion_data_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def character_set_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Character_set_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Character_set_phraseContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_teradata_type_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion" ):
                listener.enterTeradata_type_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion" ):
                listener.exitTeradata_type_conversion(self)




    def teradata_type_conversion(self):

        localctx = TeradataSQLDataTypesParser.Teradata_type_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_teradata_type_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5206
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==262 or _la==425:
                self.state = 5207
                self.teradata_type_conversion_data_attribute()
                self.state = 5208
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5215
            self.data_type()
            self.state = 5223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5216
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5219
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161, 262, 425]:
                    self.state = 5217
                    self.teradata_type_conversion_data_attribute()
                    pass
                elif token in [52, 55]:
                    self.state = 5218
                    self.character_set_phrase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5226
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversion_data_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Format_phraseContext,0)


        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_teradata_type_conversion_data_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion_data_attribute" ):
                listener.enterTeradata_type_conversion_data_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion_data_attribute" ):
                listener.exitTeradata_type_conversion_data_attribute(self)




    def teradata_type_conversion_data_attribute(self):

        localctx = TeradataSQLDataTypesParser.Teradata_type_conversion_data_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_teradata_type_conversion_data_attribute)
        try:
            self.state = 5231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5228
                self.format_phrase()
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5229
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5230
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDataTypesParser.NO, 0)

        def CASE(self):
            return self.getToken(TeradataSQLDataTypesParser.CASE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDataTypesParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDataTypesParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_case_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_spec" ):
                listener.enterCase_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_spec" ):
                listener.exitCase_spec(self)




    def case_spec(self):

        localctx = TeradataSQLDataTypesParser.Case_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_case_spec)
        self._la = 0 # Token type
        try:
            self.state = 5240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5233
                self.match(TeradataSQLDataTypesParser.NO)
                self.state = 5234
                self.match(TeradataSQLDataTypesParser.CASE)
                self.state = 5237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 5235
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5236
                    self.match(TeradataSQLDataTypesParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5239
                self.match(TeradataSQLDataTypesParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Range_expr_1Context,0)


        def range_expr_2(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Range_expr_2Context,0)


        def range_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Range_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr" ):
                listener.enterRange_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr" ):
                listener.exitRange_expr(self)




    def range_expr(self):

        localctx = TeradataSQLDataTypesParser.Range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_range_expr)
        try:
            self.state = 5245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5242
                self.range_expr_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5243
                self.range_expr_2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5244
                self.range_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Range_expr_1Context,0)


        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Range_expr_3Context,i)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDataTypesParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_range_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_list" ):
                listener.enterRange_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_list" ):
                listener.exitRange_list(self)




    def range_list(self):

        localctx = TeradataSQLDataTypesParser.Range_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_range_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 5247
                self.range_expr_3()
                pass
            elif token in [1219]:
                self.state = 5248
                self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                self.state = 5251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 5249
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5250
                    self.scalar_expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 5259
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,625,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5255
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5256
                    self.range_expr_3() 
                self.state = 5261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,625,self._ctx)

            self.state = 5262
            self.match(TeradataSQLDataTypesParser.COMMA)
            self.state = 5263
            self.range_expr_1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDataTypesParser.AND, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDataTypesParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_range_expr_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_1" ):
                listener.enterRange_expr_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_1" ):
                listener.exitRange_expr_1(self)




    def range_expr_1(self):

        localctx = TeradataSQLDataTypesParser.Range_expr_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_range_expr_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5265
            self.scalar_expr(0)
            self.state = 5266
            self.match(TeradataSQLDataTypesParser.AND)
            self.state = 5269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 5267
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 5268
                self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 5271
                self.match(TeradataSQLDataTypesParser.EACH)
                self.state = 5272
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.MUL_SIGN, i)

        def AND(self):
            return self.getToken(TeradataSQLDataTypesParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_range_expr_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_2" ):
                listener.enterRange_expr_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_2" ):
                listener.exitRange_expr_2(self)




    def range_expr_2(self):

        localctx = TeradataSQLDataTypesParser.Range_expr_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_range_expr_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5275
            self.match(TeradataSQLDataTypesParser.MUL_SIGN)
            self.state = 5276
            self.match(TeradataSQLDataTypesParser.AND)
            self.state = 5279
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 5277
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 5278
                self.match(TeradataSQLDataTypesParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLDataTypesParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLDataTypesParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_range_expr_3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_3" ):
                listener.enterRange_expr_3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_3" ):
                listener.exitRange_expr_3(self)




    def range_expr_3(self):

        localctx = TeradataSQLDataTypesParser.Range_expr_3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_range_expr_3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5281
            self.scalar_expr(0)

            self.state = 5282
            self.match(TeradataSQLDataTypesParser.AND)
            self.state = 5283
            self.scalar_expr(0)
            self.state = 5287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 5285
                self.match(TeradataSQLDataTypesParser.EACH)
                self.state = 5286
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLDataTypesParser.NO, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLDataTypesParser.RANGE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLDataTypesParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLDataTypesParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_range_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_spec" ):
                listener.enterRange_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_spec" ):
                listener.exitRange_spec(self)




    def range_spec(self):

        localctx = TeradataSQLDataTypesParser.Range_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_range_spec)
        self._la = 0 # Token type
        try:
            self.state = 5296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5289
                self.match(TeradataSQLDataTypesParser.NO)
                self.state = 5290
                self.match(TeradataSQLDataTypesParser.RANGE)
                self.state = 5293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 5291
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5292
                    self.match(TeradataSQLDataTypesParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5295
                self.match(TeradataSQLDataTypesParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_bucket_number_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sparcemap_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext
            self.contiguousmap_name = None # Char_string_literalContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def MAP(self):
            return self.getToken(TeradataSQLDataTypesParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLDataTypesParser.EQUALS_SIGN, i)

        def COLOCATE(self):
            return self.getToken(TeradataSQLDataTypesParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_hash_bucket_number_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_bucket_number_expr" ):
                listener.enterHash_bucket_number_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_bucket_number_expr" ):
                listener.exitHash_bucket_number_expr(self)




    def hash_bucket_number_expr(self):

        localctx = TeradataSQLDataTypesParser.Hash_bucket_number_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_hash_bucket_number_expr)
        self._la = 0 # Token type
        try:
            self.state = 5317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,633,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5298
                self.scalar_expr(0)
                self.state = 5307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 5299
                    self.match(TeradataSQLDataTypesParser.MAP)
                    self.state = 5300
                    self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                    self.state = 5301
                    localctx.sparcemap_name = self.char_string_literal()
                    self.state = 5302
                    self.match(TeradataSQLDataTypesParser.COLOCATE)
                    self.state = 5303
                    self.match(TeradataSQLDataTypesParser.USING)
                    self.state = 5304
                    self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                    self.state = 5305
                    localctx.colocation_name = self.char_string_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5309
                self.scalar_expr(0)
                self.state = 5310
                self.match(TeradataSQLDataTypesParser.MAP)
                self.state = 5311
                self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                self.state = 5312
                localctx.contiguousmap_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5314
                self.match(TeradataSQLDataTypesParser.MAP)
                self.state = 5315
                self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                self.state = 5316
                localctx.contiguousmap_name = self.char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDataTypesParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_partition_byContext,0)


        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_order_byContext,0)


        def window_rows(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_rowsContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_window_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec" ):
                listener.enterWindow_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec" ):
                listener.exitWindow_spec(self)




    def window_spec(self):

        localctx = TeradataSQLDataTypesParser.Window_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_window_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5319
            self.match(TeradataSQLDataTypesParser.OVER)
            self.state = 5320
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 5321
                self.window_partition_by()


            self.state = 5325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 5324
                self.window_order_by()


            self.state = 5328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==364:
                self.state = 5327
                self.window_rows()


            self.state = 5330
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_without_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDataTypesParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_partition_byContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_window_spec_without_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_without_rows" ):
                listener.enterWindow_spec_without_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_without_rows" ):
                listener.exitWindow_spec_without_rows(self)




    def window_spec_without_rows(self):

        localctx = TeradataSQLDataTypesParser.Window_spec_without_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_window_spec_without_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5332
            self.match(TeradataSQLDataTypesParser.OVER)
            self.state = 5333
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 5334
                self.window_partition_by()


            self.state = 5337
            self.window_order_by()
            self.state = 5338
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_with_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLDataTypesParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Window_partition_byContext,0)


        def with_ties(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_tiesContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_window_spec_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_with_ties" ):
                listener.enterWindow_spec_with_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_with_ties" ):
                listener.exitWindow_spec_with_ties(self)




    def window_spec_with_ties(self):

        localctx = TeradataSQLDataTypesParser.Window_spec_with_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_window_spec_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5340
            self.match(TeradataSQLDataTypesParser.OVER)
            self.state = 5341
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 5342
                self.window_partition_by()


            self.state = 5345
            self.window_order_by()
            self.state = 5347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 5346
                self.with_ties()


            self.state = 5349
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(TeradataSQLDataTypesParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_window_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_partition_by" ):
                listener.enterWindow_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_partition_by" ):
                listener.exitWindow_partition_by(self)




    def window_partition_by(self):

        localctx = TeradataSQLDataTypesParser.Window_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_window_partition_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5351
            self.match(TeradataSQLDataTypesParser.PARTITION)
            self.state = 5352
            self.match(TeradataSQLDataTypesParser.BY)
            self.state = 5353
            self.scalar_expr(0)
            self.state = 5358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5354
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5355
                self.scalar_expr(0)
                self.state = 5360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLDataTypesParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def RESET(self):
            return self.getToken(TeradataSQLDataTypesParser.RESET, 0)

        def WHEN(self):
            return self.getToken(TeradataSQLDataTypesParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_window_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_order_by" ):
                listener.enterWindow_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_order_by" ):
                listener.exitWindow_order_by(self)




    def window_order_by(self):

        localctx = TeradataSQLDataTypesParser.Window_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_window_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5361
            self.match(TeradataSQLDataTypesParser.ORDER)
            self.state = 5362
            self.match(TeradataSQLDataTypesParser.BY)
            self.state = 5363
            self.order_by_spec_full()
            self.state = 5368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5364
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5365
                self.order_by_spec_full()
                self.state = 5370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==884:
                self.state = 5371
                self.match(TeradataSQLDataTypesParser.RESET)
                self.state = 5372
                self.match(TeradataSQLDataTypesParser.WHEN)
                self.state = 5373
                self.logical_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(TeradataSQLDataTypesParser.ROWS, 0)

        def UNBOUNDED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.UNBOUNDED)
            else:
                return self.getToken(TeradataSQLDataTypesParser.UNBOUNDED, i)

        def PRECEDING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.PRECEDING)
            else:
                return self.getToken(TeradataSQLDataTypesParser.PRECEDING, i)

        def number_of_rows(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Number_of_rowsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Number_of_rowsContext,i)


        def CURRENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.CURRENT)
            else:
                return self.getToken(TeradataSQLDataTypesParser.CURRENT, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.ROW)
            else:
                return self.getToken(TeradataSQLDataTypesParser.ROW, i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLDataTypesParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TeradataSQLDataTypesParser.AND, 0)

        def FOLLOWING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.FOLLOWING)
            else:
                return self.getToken(TeradataSQLDataTypesParser.FOLLOWING, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_window_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_rows" ):
                listener.enterWindow_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_rows" ):
                listener.exitWindow_rows(self)




    def window_rows(self):

        localctx = TeradataSQLDataTypesParser.Window_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_window_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5376
            self.match(TeradataSQLDataTypesParser.ROWS)
            self.state = 5461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1013]:
                self.state = 5377
                self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                self.state = 5378
                self.match(TeradataSQLDataTypesParser.PRECEDING)
                pass
            elif token in [1194]:
                self.state = 5379
                self.number_of_rows()
                self.state = 5380
                self.match(TeradataSQLDataTypesParser.PRECEDING)
                pass
            elif token in [93]:
                self.state = 5382
                self.match(TeradataSQLDataTypesParser.CURRENT)
                self.state = 5383
                self.match(TeradataSQLDataTypesParser.ROW)
                pass
            elif token in [35]:
                self.state = 5384
                self.match(TeradataSQLDataTypesParser.BETWEEN)
                self.state = 5459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
                if la_ == 1:
                    self.state = 5385
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5386
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5387
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5388
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5389
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass

                elif la_ == 2:
                    self.state = 5390
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5391
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5392
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5393
                    self.number_of_rows()
                    self.state = 5394
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    pass

                elif la_ == 3:
                    self.state = 5396
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5397
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5398
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5399
                    self.match(TeradataSQLDataTypesParser.CURRENT)
                    self.state = 5400
                    self.match(TeradataSQLDataTypesParser.ROW)
                    pass

                elif la_ == 4:
                    self.state = 5401
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5402
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5403
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5404
                    self.number_of_rows()
                    self.state = 5405
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass

                elif la_ == 5:
                    self.state = 5407
                    self.number_of_rows()
                    self.state = 5408
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5409
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5410
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5411
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass

                elif la_ == 6:
                    self.state = 5413
                    self.number_of_rows()
                    self.state = 5414
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5415
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5416
                    self.number_of_rows()
                    self.state = 5417
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    pass

                elif la_ == 7:
                    self.state = 5419
                    self.number_of_rows()
                    self.state = 5420
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5421
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5422
                    self.match(TeradataSQLDataTypesParser.CURRENT)
                    self.state = 5423
                    self.match(TeradataSQLDataTypesParser.ROW)
                    pass

                elif la_ == 8:
                    self.state = 5425
                    self.number_of_rows()
                    self.state = 5426
                    self.match(TeradataSQLDataTypesParser.PRECEDING)
                    self.state = 5427
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5428
                    self.number_of_rows()
                    self.state = 5429
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass

                elif la_ == 9:
                    self.state = 5431
                    self.match(TeradataSQLDataTypesParser.CURRENT)
                    self.state = 5432
                    self.match(TeradataSQLDataTypesParser.ROW)
                    self.state = 5433
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5434
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5435
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass

                elif la_ == 10:
                    self.state = 5436
                    self.match(TeradataSQLDataTypesParser.CURRENT)
                    self.state = 5437
                    self.match(TeradataSQLDataTypesParser.ROW)
                    self.state = 5438
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5439
                    self.match(TeradataSQLDataTypesParser.CURRENT)
                    self.state = 5440
                    self.match(TeradataSQLDataTypesParser.ROW)
                    pass

                elif la_ == 11:
                    self.state = 5441
                    self.match(TeradataSQLDataTypesParser.CURRENT)
                    self.state = 5442
                    self.match(TeradataSQLDataTypesParser.ROW)
                    self.state = 5443
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5444
                    self.number_of_rows()
                    self.state = 5445
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass

                elif la_ == 12:
                    self.state = 5447
                    self.number_of_rows()
                    self.state = 5448
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    self.state = 5449
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5450
                    self.match(TeradataSQLDataTypesParser.UNBOUNDED)
                    self.state = 5451
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass

                elif la_ == 13:
                    self.state = 5453
                    self.number_of_rows()
                    self.state = 5454
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    self.state = 5455
                    self.match(TeradataSQLDataTypesParser.AND)
                    self.state = 5456
                    self.number_of_rows()
                    self.state = 5457
                    self.match(TeradataSQLDataTypesParser.FOLLOWING)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_param_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Format_phraseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_json_param_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_param_spec" ):
                listener.enterJson_param_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_param_spec" ):
                listener.exitJson_param_spec(self)




    def json_param_spec(self):

        localctx = TeradataSQLDataTypesParser.Json_param_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_json_param_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5463
            localctx.param = self.scalar_expr(0)
            self.state = 5468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 5464
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5465
                self.format_phrase()
                self.state = 5466
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)


            self.state = 5472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5470
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 5471
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_context_item = None # Column_nameContext

        def PASSING(self):
            return self.getToken(TeradataSQLDataTypesParser.PASSING, 0)

        def xml_query_variable_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Xml_query_variable_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_query_variable_specContext,i)


        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLDataTypesParser.VALUE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_query_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_argument" ):
                listener.enterXml_query_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_argument" ):
                listener.exitXml_query_argument(self)




    def xml_query_argument(self):

        localctx = TeradataSQLDataTypesParser.Xml_query_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_xml_query_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5474
            self.match(TeradataSQLDataTypesParser.PASSING)
            self.state = 5477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 5475
                self.match(TeradataSQLDataTypesParser.BY)
                self.state = 5476
                self.match(TeradataSQLDataTypesParser.VALUE)


            self.state = 5488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,649,self._ctx)
            if la_ == 1:
                self.state = 5479
                localctx.xml_query_context_item = self.column_name()
                pass

            elif la_ == 2:
                self.state = 5480
                self.xml_query_variable_spec()
                self.state = 5485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5481
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5482
                    self.xml_query_variable_spec()
                    self.state = 5487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_variable_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_variable = None # Column_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Variable_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_query_variable_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_variable_spec" ):
                listener.enterXml_query_variable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_variable_spec" ):
                listener.exitXml_query_variable_spec(self)




    def xml_query_variable_spec(self):

        localctx = TeradataSQLDataTypesParser.Xml_query_variable_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_xml_query_variable_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5490
            localctx.xml_query_variable = self.column_name()
            self.state = 5491
            self.match(TeradataSQLDataTypesParser.AS)
            self.state = 5492
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLATTRIBUTES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def xml_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Xml_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_declaration" ):
                listener.enterXml_attribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_declaration" ):
                listener.exitXml_attribute_declaration(self)




    def xml_attribute_declaration(self):

        localctx = TeradataSQLDataTypesParser.Xml_attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_xml_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5494
            self.match(TeradataSQLDataTypesParser.XMLATTRIBUTES)
            self.state = 5495
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5496
            self.xml_attribute_spec()
            self.state = 5501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5497
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5498
                self.xml_attribute_spec()
                self.state = 5503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5504
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_attribute_value = None # Column_nameContext
            self.xml_attribute_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_spec" ):
                listener.enterXml_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_spec" ):
                listener.exitXml_attribute_spec(self)




    def xml_attribute_spec(self):

        localctx = TeradataSQLDataTypesParser.Xml_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_xml_attribute_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5506
            localctx.xml_attribute_value = self.column_name()
            self.state = 5509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5507
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 5508
                localctx.xml_attribute_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_forest_element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_forest_element_value = None # Column_nameContext
            self.xml_forest_element_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_forest_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_forest_element_spec" ):
                listener.enterXml_forest_element_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_forest_element_spec" ):
                listener.exitXml_forest_element_spec(self)




    def xml_forest_element_spec(self):

        localctx = TeradataSQLDataTypesParser.Xml_forest_element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_xml_forest_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5511
            localctx.xml_forest_element_value = self.column_name()
            self.state = 5514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5512
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 5513
                localctx.xml_forest_element_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_value_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_value_expr = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_content_option_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_value_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_value_declaration" ):
                listener.enterXml_value_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_value_declaration" ):
                listener.exitXml_value_declaration(self)




    def xml_value_declaration(self):

        localctx = TeradataSQLDataTypesParser.Xml_value_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_xml_value_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5516
            localctx.xml_value_expr = self.scalar_expr(0)
            self.state = 5518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 5517
                self.xml_content_option_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLDataTypesParser.XMLNAMESPACES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def xml_namespace_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Xml_namespace_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_namespace_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_declaration" ):
                listener.enterXml_namespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_declaration" ):
                listener.exitXml_namespace_declaration(self)




    def xml_namespace_declaration(self):

        localctx = TeradataSQLDataTypesParser.Xml_namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_xml_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5520
            self.match(TeradataSQLDataTypesParser.XMLNAMESPACES)
            self.state = 5521
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5522
            self.xml_namespace_spec()
            self.state = 5527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5523
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5524
                self.xml_namespace_spec()
                self.state = 5529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5530
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Char_string_literalContext
            self.xml_namespace_prefix = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDataTypesParser.DEFAULT, 0)

        def NO(self):
            return self.getToken(TeradataSQLDataTypesParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_namespace_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_spec" ):
                listener.enterXml_namespace_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_spec" ):
                listener.exitXml_namespace_spec(self)




    def xml_namespace_spec(self):

        localctx = TeradataSQLDataTypesParser.Xml_namespace_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_xml_namespace_spec)
        try:
            self.state = 5540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5532
                localctx.xml_namespace_uri = self.char_string_literal()
                self.state = 5533
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 5534
                localctx.xml_namespace_prefix = self.alias_name()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5536
                self.match(TeradataSQLDataTypesParser.DEFAULT)
                self.state = 5537
                localctx.xml_namespace_uri = self.char_string_literal()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5538
                self.match(TeradataSQLDataTypesParser.NO)
                self.state = 5539
                self.match(TeradataSQLDataTypesParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_columns_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(TeradataSQLDataTypesParser.COLUMNS, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,i)


        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.FOR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.FOR, i)

        def ORDINALITY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.ORDINALITY)
            else:
                return self.getToken(TeradataSQLDataTypesParser.ORDINALITY, i)

        def xml_regular_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Xml_regular_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Xml_regular_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_columns_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_columns_spec" ):
                listener.enterXml_columns_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_columns_spec" ):
                listener.exitXml_columns_spec(self)




    def xml_columns_spec(self):

        localctx = TeradataSQLDataTypesParser.Xml_columns_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_xml_columns_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5542
            self.match(TeradataSQLDataTypesParser.COLUMNS)
            self.state = 5548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
            if la_ == 1:
                self.state = 5543
                self.column_name()
                self.state = 5544
                self.match(TeradataSQLDataTypesParser.FOR)
                self.state = 5545
                self.match(TeradataSQLDataTypesParser.ORDINALITY)
                pass

            elif la_ == 2:
                self.state = 5547
                self.xml_regular_column_definition()
                pass


            self.state = 5560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5550
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
                if la_ == 1:
                    self.state = 5551
                    self.column_name()
                    self.state = 5552
                    self.match(TeradataSQLDataTypesParser.FOR)
                    self.state = 5553
                    self.match(TeradataSQLDataTypesParser.ORDINALITY)
                    pass

                elif la_ == 2:
                    self.state = 5555
                    self.xml_regular_column_definition()
                    pass


                self.state = 5562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_regular_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def PATH(self):
            return self.getToken(TeradataSQLDataTypesParser.PATH, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLDataTypesParser.DEFAULT, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LiteralContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_regular_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_regular_column_definition" ):
                listener.enterXml_regular_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_regular_column_definition" ):
                listener.exitXml_regular_column_definition(self)




    def xml_regular_column_definition(self):

        localctx = TeradataSQLDataTypesParser.Xml_regular_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_xml_regular_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5563
            localctx.name = self.unqualified_name()
            self.state = 5564
            self.data_type()
            self.state = 5567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1082:
                self.state = 5565
                self.match(TeradataSQLDataTypesParser.PATH)
                self.state = 5566
                self.char_string_literal()


            self.state = 5571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5569
                self.match(TeradataSQLDataTypesParser.DEFAULT)
                self.state = 5570
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_encoding_name = None # Char_string_literalContext

        def ENCODING(self):
            return self.getToken(TeradataSQLDataTypesParser.ENCODING, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_encoding" ):
                listener.enterXml_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_encoding" ):
                listener.exitXml_encoding(self)




    def xml_encoding(self):

        localctx = TeradataSQLDataTypesParser.Xml_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_xml_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5573
            self.match(TeradataSQLDataTypesParser.ENCODING)
            self.state = 5574
            localctx.xml_encoding_name = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_on_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.EMPTY)
            else:
                return self.getToken(TeradataSQLDataTypesParser.EMPTY, i)

        def NULL(self):
            return self.getToken(TeradataSQLDataTypesParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_query_on_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_on_empty" ):
                listener.enterXml_query_on_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_on_empty" ):
                listener.exitXml_query_on_empty(self)




    def xml_query_on_empty(self):

        localctx = TeradataSQLDataTypesParser.Xml_query_on_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_xml_query_on_empty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5576
            _la = self._input.LA(1)
            if not(_la==274 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5577
            self.match(TeradataSQLDataTypesParser.ON)
            self.state = 5578
            self.match(TeradataSQLDataTypesParser.EMPTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_returning_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(TeradataSQLDataTypesParser.RETURNING, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTENT, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLDataTypesParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_returning_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_returning_spec" ):
                listener.enterXml_returning_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_returning_spec" ):
                listener.exitXml_returning_spec(self)




    def xml_returning_spec(self):

        localctx = TeradataSQLDataTypesParser.Xml_returning_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_xml_returning_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5580
            self.match(TeradataSQLDataTypesParser.RETURNING)
            self.state = 5581
            _la = self._input.LA(1)
            if not(_la==593 or _la==914):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_content_option_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TeradataSQLDataTypesParser.OPTION, 0)

        def ON(self):
            return self.getToken(TeradataSQLDataTypesParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.NULL)
            else:
                return self.getToken(TeradataSQLDataTypesParser.NULL, i)

        def NIL(self):
            return self.getToken(TeradataSQLDataTypesParser.NIL, 0)

        def NO(self):
            return self.getToken(TeradataSQLDataTypesParser.NO, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLDataTypesParser.CONTENT, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLDataTypesParser.EMPTY, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLDataTypesParser.ABSENT, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_xml_content_option_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content_option_spec" ):
                listener.enterXml_content_option_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content_option_spec" ):
                listener.exitXml_content_option_spec(self)




    def xml_content_option_spec(self):

        localctx = TeradataSQLDataTypesParser.Xml_content_option_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_xml_content_option_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5583
            self.match(TeradataSQLDataTypesParser.OPTION)
            self.state = 5591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
            if la_ == 1:
                self.state = 5584
                _la = self._input.LA(1)
                if not(_la==274 or _la==489 or _la==649 or _la==794):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5585
                self.match(TeradataSQLDataTypesParser.ON)
                self.state = 5586
                self.match(TeradataSQLDataTypesParser.NULL)
                pass

            elif la_ == 2:
                self.state = 5587
                self.match(TeradataSQLDataTypesParser.NIL)
                self.state = 5588
                self.match(TeradataSQLDataTypesParser.ON)
                self.state = 5589
                self.match(TeradataSQLDataTypesParser.NO)
                self.state = 5590
                self.match(TeradataSQLDataTypesParser.CONTENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_respect_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(TeradataSQLDataTypesParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLDataTypesParser.IGNORE, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLDataTypesParser.RESPECT, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_ignore_respect_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_respect_nulls" ):
                listener.enterIgnore_respect_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_respect_nulls" ):
                listener.exitIgnore_respect_nulls(self)




    def ignore_respect_nulls(self):

        localctx = TeradataSQLDataTypesParser.Ignore_respect_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_ignore_respect_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5593
            _la = self._input.LA(1)
            if not(_la==697 or _la==885):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5594
            self.match(TeradataSQLDataTypesParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_of_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_number_of_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_of_rows" ):
                listener.enterNumber_of_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_of_rows" ):
                listener.exitNumber_of_rows(self)




    def number_of_rows(self):

        localctx = TeradataSQLDataTypesParser.Number_of_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_number_of_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5596
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLDataTypesParser.TIES, 0)

        def LOW(self):
            return self.getToken(TeradataSQLDataTypesParser.LOW, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLDataTypesParser.HIGH, 0)

        def AVG(self):
            return self.getToken(TeradataSQLDataTypesParser.AVG, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLDataTypesParser.DENSE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_ties" ):
                listener.enterWith_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_ties" ):
                listener.exitWith_ties(self)




    def with_ties(self):

        localctx = TeradataSQLDataTypesParser.With_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5598
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 5599
            self.match(TeradataSQLDataTypesParser.TIES)
            self.state = 5600
            _la = self._input.LA(1)
            if not(_la==32 or _la==629 or _la==690 or _la==745):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(TeradataSQLDataTypesParser.PIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Pivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def pivot_with_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Pivot_with_phraseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot" ):
                listener.enterPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot" ):
                listener.exitPivot(self)




    def pivot(self):

        localctx = TeradataSQLDataTypesParser.PivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_pivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5602
            self.match(TeradataSQLDataTypesParser.PIVOT)
            self.state = 5603
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5604
            self.pivot_spec()
            self.state = 5605
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 5607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 5606
                self.pivot_with_phrase()


            self.state = 5610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5609
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 5612
            self.alias_name()
            self.state = 5614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,664,self._ctx)
            if la_ == 1:
                self.state = 5613
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_agg_func_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Pivot_agg_func_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Pivot_agg_func_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDataTypesParser.FOR, 0)

        def pivot_for_phrase(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Pivot_for_phraseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_spec" ):
                listener.enterPivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_spec" ):
                listener.exitPivot_spec(self)




    def pivot_spec(self):

        localctx = TeradataSQLDataTypesParser.Pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_pivot_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5616
            self.pivot_agg_func_spec()
            self.state = 5621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5617
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5618
                self.pivot_agg_func_spec()
                self.state = 5623
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5624
            self.match(TeradataSQLDataTypesParser.FOR)
            self.state = 5625
            self.pivot_for_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def pivot_with_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Pivot_with_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Pivot_with_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot_with_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_phrase" ):
                listener.enterPivot_with_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_phrase" ):
                listener.exitPivot_with_phrase(self)




    def pivot_with_phrase(self):

        localctx = TeradataSQLDataTypesParser.Pivot_with_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_pivot_with_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5627
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 5628
            self.pivot_with_spec()
            self.state = 5633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5629
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5630
                self.pivot_with_spec()
                self.state = 5635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_agg_func_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot_agg_func_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_agg_func_spec" ):
                listener.enterPivot_agg_func_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_agg_func_spec" ):
                listener.exitPivot_agg_func_spec(self)




    def pivot_agg_func_spec(self):

        localctx = TeradataSQLDataTypesParser.Pivot_agg_func_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_pivot_agg_func_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5636
            self.aggregate_function()
            self.state = 5641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 5638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5637
                    self.match(TeradataSQLDataTypesParser.AS)


                self.state = 5640
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def pivot_expr_spec_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Pivot_expr_spec_scalarContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Pivot_expr_spec_scalarContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def pivot_expr_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Pivot_expr_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Pivot_expr_spec_listContext,i)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot_for_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_phrase" ):
                listener.enterPivot_for_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_phrase" ):
                listener.exitPivot_for_phrase(self)




    def pivot_for_phrase(self):

        localctx = TeradataSQLDataTypesParser.Pivot_for_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_pivot_for_phrase)
        self._la = 0 # Token type
        try:
            self.state = 5686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,672,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5643
                self.column_name()
                self.state = 5644
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 5645
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5646
                self.pivot_expr_spec_scalar()
                self.state = 5651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5647
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5648
                    self.pivot_expr_spec_scalar()
                    self.state = 5653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5654
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5656
                self.column_list()
                self.state = 5657
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 5658
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5659
                self.pivot_expr_spec_scalar()
                self.state = 5664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5660
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5661
                    self.pivot_expr_spec_scalar()
                    self.state = 5666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5667
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5669
                self.column_list()
                self.state = 5670
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 5671
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5672
                self.pivot_expr_spec_list()
                self.state = 5677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5673
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5674
                    self.pivot_expr_spec_list()
                    self.state = 5679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5680
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5682
                self.column_name()
                self.state = 5683
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 5684
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot_with_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_spec" ):
                listener.enterPivot_with_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_spec" ):
                listener.exitPivot_with_spec(self)




    def pivot_with_spec(self):

        localctx = TeradataSQLDataTypesParser.Pivot_with_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_pivot_with_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5688
            self.aggregate_function()
            self.state = 5690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5689
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 5692
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot_expr_spec_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_scalar" ):
                listener.enterPivot_expr_spec_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_scalar" ):
                listener.exitPivot_expr_spec_scalar(self)




    def pivot_expr_spec_scalar(self):

        localctx = TeradataSQLDataTypesParser.Pivot_expr_spec_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_pivot_expr_spec_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5694
            self.scalar_expr(0)
            self.state = 5699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 5696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5695
                    self.match(TeradataSQLDataTypesParser.AS)


                self.state = 5698
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_expr_list_comma_separatedContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_pivot_expr_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_list" ):
                listener.enterPivot_expr_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_list" ):
                listener.exitPivot_expr_spec_list(self)




    def pivot_expr_spec_list(self):

        localctx = TeradataSQLDataTypesParser.Pivot_expr_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_pivot_expr_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5701
            self.scalar_expr_list_comma_separated()
            self.state = 5703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5702
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 5705
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(TeradataSQLDataTypesParser.UNPIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unpivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLDataTypesParser.NULLS, 0)

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def INCLUDE(self):
            return self.getToken(TeradataSQLDataTypesParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot" ):
                listener.enterUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot" ):
                listener.exitUnpivot(self)




    def unpivot(self):

        localctx = TeradataSQLDataTypesParser.UnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_unpivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5707
            self.match(TeradataSQLDataTypesParser.UNPIVOT)
            self.state = 5710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==660 or _la==700:
                self.state = 5708
                _la = self._input.LA(1)
                if not(_la==660 or _la==700):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5709
                self.match(TeradataSQLDataTypesParser.NULLS)


            self.state = 5712
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5713
            self.unpivot_spec()
            self.state = 5714
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
            self.state = 5716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5715
                self.match(TeradataSQLDataTypesParser.AS)


            self.state = 5718
            self.alias_name()
            self.state = 5720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,679,self._ctx)
            if la_ == 1:
                self.state = 5719
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLDataTypesParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def unpivot_column_name_spec_single(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Unpivot_column_name_spec_singleContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unpivot_column_name_spec_singleContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def unpivot_column_name_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Unpivot_column_name_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unpivot_column_name_spec_listContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_spec" ):
                listener.enterUnpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_spec" ):
                listener.exitUnpivot_spec(self)




    def unpivot_spec(self):

        localctx = TeradataSQLDataTypesParser.Unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_unpivot_spec)
        self._la = 0 # Token type
        try:
            self.state = 5752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [363, 366, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5722
                self.column_name()
                self.state = 5723
                self.match(TeradataSQLDataTypesParser.FOR)
                self.state = 5724
                self.column_name()
                self.state = 5725
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 5726
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5727
                self.unpivot_column_name_spec_single()
                self.state = 5732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5728
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5729
                    self.unpivot_column_name_spec_single()
                    self.state = 5734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5735
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5737
                self.column_list()
                self.state = 5738
                self.match(TeradataSQLDataTypesParser.FOR)
                self.state = 5739
                self.column_name()
                self.state = 5740
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 5741
                self.match(TeradataSQLDataTypesParser.OPEN_PAR)
                self.state = 5742
                self.unpivot_column_name_spec_list()
                self.state = 5747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5743
                    self.match(TeradataSQLDataTypesParser.COMMA)
                    self.state = 5744
                    self.unpivot_column_name_spec_list()
                    self.state = 5749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5750
                self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unpivot_column_name_spec_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_single" ):
                listener.enterUnpivot_column_name_spec_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_single" ):
                listener.exitUnpivot_column_name_spec_single(self)




    def unpivot_column_name_spec_single(self):

        localctx = TeradataSQLDataTypesParser.Unpivot_column_name_spec_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_unpivot_column_name_spec_single)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5754
            self.column_name()
            self.state = 5759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 5756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5755
                    self.match(TeradataSQLDataTypesParser.AS)


                self.state = 5758
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_unpivot_column_name_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_list" ):
                listener.enterUnpivot_column_name_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_list" ):
                listener.exitUnpivot_column_name_spec_list(self)




    def unpivot_column_name_spec_list(self):

        localctx = TeradataSQLDataTypesParser.Unpivot_column_name_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_unpivot_column_name_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5761
            self.column_list()
            self.state = 5766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 5763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5762
                    self.match(TeradataSQLDataTypesParser.AS)


                self.state = 5765
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_timezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(TeradataSQLDataTypesParser.AT, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCAL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLDataTypesParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLDataTypesParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_at_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_timezone" ):
                listener.enterAt_timezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_timezone" ):
                listener.exitAt_timezone(self)




    def at_timezone(self):

        localctx = TeradataSQLDataTypesParser.At_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_at_timezone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5768
            self.match(TeradataSQLDataTypesParser.AT)
            self.state = 5775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.state = 5769
                self.match(TeradataSQLDataTypesParser.LOCAL)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 5772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,687,self._ctx)
                if la_ == 1:
                    self.state = 5770
                    self.match(TeradataSQLDataTypesParser.TIME)
                    self.state = 5771
                    self.match(TeradataSQLDataTypesParser.ZONE)


                self.state = 5774
                self.scalar_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elements_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_expr_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_elements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElements_list" ):
                listener.enterElements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElements_list" ):
                listener.exitElements_list(self)




    def elements_list(self):

        localctx = TeradataSQLDataTypesParser.Elements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_elements_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
            if la_ == 1:
                self.state = 5777
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 5778
                self.scalar_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.OR)
            else:
                return self.getToken(TeradataSQLDataTypesParser.OR, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_scalar_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list" ):
                listener.enterScalar_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list" ):
                listener.exitScalar_expr_list(self)




    def scalar_expr_list(self):

        localctx = TeradataSQLDataTypesParser.Scalar_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_scalar_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5781
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5782
            self.scalar_expr(0)
            self.state = 5787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290 or _la==1208:
                self.state = 5783
                _la = self._input.LA(1)
                if not(_la==290 or _la==1208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5784
                self.scalar_expr(0)
                self.state = 5789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5790
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_list_comma_separatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_scalar_expr_list_comma_separated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list_comma_separated" ):
                listener.enterScalar_expr_list_comma_separated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list_comma_separated" ):
                listener.exitScalar_expr_list_comma_separated(self)




    def scalar_expr_list_comma_separated(self):

        localctx = TeradataSQLDataTypesParser.Scalar_expr_list_comma_separatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_scalar_expr_list_comma_separated)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5792
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5793
            self.scalar_expr(0)
            self.state = 5798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5794
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5795
                self.scalar_expr(0)
                self.state = 5800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5801
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = TeradataSQLDataTypesParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5803
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5804
            self.column_name()
            self.state = 5809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5805
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5806
                self.column_name()
                self.state = 5811
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5812
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TeradataSQLDataTypesParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5814
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 5815
                self.with_request_modifier()


            self.state = 5818
            self.query_expr(0)
            self.state = 5819
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = TeradataSQLDataTypesParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5821
            localctx.name = self.unqualified_name()
            self.state = 5822
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TeradataSQLDataTypesParser.COLON, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = TeradataSQLDataTypesParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5824
            self.match(TeradataSQLDataTypesParser.COLON)
            self.state = 5825
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_reference = None # Variable_referenceContext
            self.name = None # Unqualified_nameContext

        def DOT_(self):
            return self.getToken(TeradataSQLDataTypesParser.DOT_, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Variable_referenceContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_cursor_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_variable_reference" ):
                listener.enterCursor_variable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_variable_reference" ):
                listener.exitCursor_variable_reference(self)




    def cursor_variable_reference(self):

        localctx = TeradataSQLDataTypesParser.Cursor_variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_cursor_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5827
            localctx.cursor_reference = self.variable_reference()
            self.state = 5828
            self.match(TeradataSQLDataTypesParser.DOT_)
            self.state = 5829
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameter_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Parameter_nameContext,0)


        def COLON(self):
            return self.getToken(TeradataSQLDataTypesParser.COLON, 0)

        def AT_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.AT_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_macro_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter_reference" ):
                listener.enterMacro_parameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter_reference" ):
                listener.exitMacro_parameter_reference(self)




    def macro_parameter_reference(self):

        localctx = TeradataSQLDataTypesParser.Macro_parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_macro_parameter_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5831
            _la = self._input.LA(1)
            if not(_la==1207 or _la==1210):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5832
            self.parameter_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_scope_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_lower_bounds = None # Integer_literalContext
            self.array_upper_bounds = None # Integer_literalContext

        def COMMA(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_array_scope_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_scope_reference" ):
                listener.enterArray_scope_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_scope_reference" ):
                listener.exitArray_scope_reference(self)




    def array_scope_reference(self):

        localctx = TeradataSQLDataTypesParser.Array_scope_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_array_scope_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5834
            localctx.array_lower_bounds = self.integer_literal()
            self.state = 5835
            self.match(TeradataSQLDataTypesParser.COMMA)
            self.state = 5836
            localctx.array_upper_bounds = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.EQUALS_SIGN, 0)

        def EQ(self):
            return self.getToken(TeradataSQLDataTypesParser.EQ, 0)

        def NOT_EQUALS_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT_EQUALS_SIGN, 0)

        def NOT_EQUALS_SIGN_TD(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT_EQUALS_SIGN_TD, 0)

        def NE(self):
            return self.getToken(TeradataSQLDataTypesParser.NE, 0)

        def NOT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOT, 0)

        def LT_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.LT_SIGN, 0)

        def GT_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.GT_SIGN, 0)

        def LT(self):
            return self.getToken(TeradataSQLDataTypesParser.LT, 0)

        def LE_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.LE_SIGN, 0)

        def LE(self):
            return self.getToken(TeradataSQLDataTypesParser.LE, 0)

        def GT(self):
            return self.getToken(TeradataSQLDataTypesParser.GT, 0)

        def GE_SIGN(self):
            return self.getToken(TeradataSQLDataTypesParser.GE_SIGN, 0)

        def GE(self):
            return self.getToken(TeradataSQLDataTypesParser.GE, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TeradataSQLDataTypesParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_comparison_operator)
        try:
            self.state = 5855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,694,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5838
                self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5839
                self.match(TeradataSQLDataTypesParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5840
                self.match(TeradataSQLDataTypesParser.NOT_EQUALS_SIGN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5841
                self.match(TeradataSQLDataTypesParser.NOT_EQUALS_SIGN_TD)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5842
                self.match(TeradataSQLDataTypesParser.NE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5843
                self.match(TeradataSQLDataTypesParser.NOT)
                self.state = 5844
                self.match(TeradataSQLDataTypesParser.EQUALS_SIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5845
                self.match(TeradataSQLDataTypesParser.LT_SIGN)
                self.state = 5846
                self.match(TeradataSQLDataTypesParser.GT_SIGN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5847
                self.match(TeradataSQLDataTypesParser.LT_SIGN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5848
                self.match(TeradataSQLDataTypesParser.LT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5849
                self.match(TeradataSQLDataTypesParser.LE_SIGN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5850
                self.match(TeradataSQLDataTypesParser.LE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5851
                self.match(TeradataSQLDataTypesParser.GT_SIGN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5852
                self.match(TeradataSQLDataTypesParser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5853
                self.match(TeradataSQLDataTypesParser.GE_SIGN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5854
                self.match(TeradataSQLDataTypesParser.GE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLDataTypesParser.ALL, 0)

        def ANY(self):
            return self.getToken(TeradataSQLDataTypesParser.ANY, 0)

        def SOME(self):
            return self.getToken(TeradataSQLDataTypesParser.SOME, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)




    def quantifier(self):

        localctx = TeradataSQLDataTypesParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5857
            _la = self._input.LA(1)
            if not(_la==13 or _la==18 or _la==382):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.With_request_modifierContext,0)


        def using_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Using_request_modifierContext,0)


        def explain_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Explain_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequest_modifier" ):
                listener.enterRequest_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequest_modifier" ):
                listener.exitRequest_modifier(self)




    def request_modifier(self):

        localctx = TeradataSQLDataTypesParser.Request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_request_modifier)
        try:
            self.state = 5863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5859
                self.locking_request_modifier()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5860
                self.with_request_modifier()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5861
                self.using_request_modifier()
                pass
            elif token in [128, 150, 938]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5862
                self.explain_request_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Locking_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Locking_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_locking_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_request_modifier" ):
                listener.enterLocking_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_request_modifier" ):
                listener.exitLocking_request_modifier(self)




    def locking_request_modifier(self):

        localctx = TeradataSQLDataTypesParser.Locking_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_locking_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5866 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5865
                self.locking_spec()
                self.state = 5868 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==226 or _la==227):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def lock_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Lock_typeContext,0)


        def LOCKING(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCKING, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCK, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Database_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Table_nameContext,0)


        def ROW(self):
            return self.getToken(TeradataSQLDataTypesParser.ROW, 0)

        def MODE(self):
            return self.getToken(TeradataSQLDataTypesParser.MODE, 0)

        def NOWAIT(self):
            return self.getToken(TeradataSQLDataTypesParser.NOWAIT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLDataTypesParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLDataTypesParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLDataTypesParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLDataTypesParser.VIEW, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_locking_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_spec" ):
                listener.enterLocking_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_spec" ):
                listener.exitLocking_spec(self)




    def locking_spec(self):

        localctx = TeradataSQLDataTypesParser.Locking_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_locking_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5870
            _la = self._input.LA(1)
            if not(_la==226 or _la==227):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
            if la_ == 1:
                self.state = 5872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 5871
                    self.match(TeradataSQLDataTypesParser.DATABASE)


                self.state = 5874
                self.database_name()
                pass

            elif la_ == 2:
                self.state = 5876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 5875
                    self.match(TeradataSQLDataTypesParser.TABLE)


                self.state = 5878
                self.table_name()
                pass

            elif la_ == 3:
                self.state = 5880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==468:
                    self.state = 5879
                    self.match(TeradataSQLDataTypesParser.VIEW)


                self.state = 5882
                localctx.view_name = self.table_name()
                pass

            elif la_ == 4:
                self.state = 5883
                self.match(TeradataSQLDataTypesParser.ROW)
                pass


            self.state = 5887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==190:
                self.state = 5886
                _la = self._input.LA(1)
                if not(_la==159 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5889
            self.lock_type()
            self.state = 5891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 5890
                self.match(TeradataSQLDataTypesParser.MODE)


            self.state = 5894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 5893
                self.match(TeradataSQLDataTypesParser.NOWAIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(TeradataSQLDataTypesParser.ACCESS, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCL, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLDataTypesParser.EXCLUSIVE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLDataTypesParser.SHARE, 0)

        def READ(self):
            return self.getToken(TeradataSQLDataTypesParser.READ, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLDataTypesParser.OVERRIDE, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLDataTypesParser.WRITE, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLDataTypesParser.CHECKSUM, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLDataTypesParser.LOAD, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLDataTypesParser.COMMITTED, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = TeradataSQLDataTypesParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 5907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [490]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5896
                self.match(TeradataSQLDataTypesParser.ACCESS)
                pass
            elif token in [659, 662]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5897
                _la = self._input.LA(1)
                if not(_la==659 or _la==662):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [923]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5898
                self.match(TeradataSQLDataTypesParser.SHARE)
                pass
            elif token in [877]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5899
                self.match(TeradataSQLDataTypesParser.READ)
                self.state = 5901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 5900
                    self.match(TeradataSQLDataTypesParser.OVERRIDE)


                pass
            elif token in [1041]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5903
                self.match(TeradataSQLDataTypesParser.WRITE)
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5904
                self.match(TeradataSQLDataTypesParser.CHECKSUM)
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5905
                self.match(TeradataSQLDataTypesParser.LOAD)
                self.state = 5906
                self.match(TeradataSQLDataTypesParser.COMMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLDataTypesParser.WITH, 0)

        def cte_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Cte_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Cte_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_with_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_request_modifier" ):
                listener.enterWith_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_request_modifier" ):
                listener.exitWith_request_modifier(self)




    def with_request_modifier(self):

        localctx = TeradataSQLDataTypesParser.With_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_with_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5909
            self.match(TeradataSQLDataTypesParser.WITH)
            self.state = 5910
            self.cte_spec()
            self.state = 5915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5911
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5912
                self.cte_spec()
                self.state = 5917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Regular_cte_specContext,0)


        def recursive_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Recursive_cte_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_spec" ):
                listener.enterCte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_spec" ):
                listener.exitCte_spec(self)




    def cte_spec(self):

        localctx = TeradataSQLDataTypesParser.Cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_cte_spec)
        try:
            self.state = 5920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5918
                self.regular_cte_spec()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5919
                self.recursive_cte_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_regular_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_cte_spec" ):
                listener.enterRegular_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_cte_spec" ):
                listener.exitRegular_cte_spec(self)




    def regular_cte_spec(self):

        localctx = TeradataSQLDataTypesParser.Regular_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_regular_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5922
            localctx.query_name = self.alias_name()
            self.state = 5924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 5923
                self.column_list()


            self.state = 5926
            self.match(TeradataSQLDataTypesParser.AS)
            self.state = 5927
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def RECURSIVE(self):
            return self.getToken(TeradataSQLDataTypesParser.RECURSIVE, 0)

        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Column_listContext,0)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.UNION)
            else:
                return self.getToken(TeradataSQLDataTypesParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.ALL)
            else:
                return self.getToken(TeradataSQLDataTypesParser.ALL, i)

        def query_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Query_termContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Query_termContext,i)


        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_recursive_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte_spec" ):
                listener.enterRecursive_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte_spec" ):
                listener.exitRecursive_cte_spec(self)




    def recursive_cte_spec(self):

        localctx = TeradataSQLDataTypesParser.Recursive_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_recursive_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5929
            self.match(TeradataSQLDataTypesParser.RECURSIVE)
            self.state = 5930
            localctx.query_name = self.alias_name()
            self.state = 5932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 5931
                self.column_list()


            self.state = 5934
            self.match(TeradataSQLDataTypesParser.AS)
            self.state = 5935
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5936
            self.query_expr(0)
            self.state = 5940 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5937
                self.match(TeradataSQLDataTypesParser.UNION)
                self.state = 5938
                self.match(TeradataSQLDataTypesParser.ALL)
                self.state = 5939
                self.query_term()
                self.state = 5942 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==447):
                    break

            self.state = 5944
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLDataTypesParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.OPEN_PAR, 0)

        def using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Using_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLDataTypesParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLDataTypesParser.COMMA)
            else:
                return self.getToken(TeradataSQLDataTypesParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_using_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_request_modifier" ):
                listener.enterUsing_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_request_modifier" ):
                listener.exitUsing_request_modifier(self)




    def using_request_modifier(self):

        localctx = TeradataSQLDataTypesParser.Using_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_using_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5946
            self.match(TeradataSQLDataTypesParser.USING)
            self.state = 5947
            self.match(TeradataSQLDataTypesParser.OPEN_PAR)
            self.state = 5948
            self.using_spec()
            self.state = 5953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5949
                self.match(TeradataSQLDataTypesParser.COMMA)
                self.state = 5950
                self.using_spec()
                self.state = 5955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5956
            self.match(TeradataSQLDataTypesParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Variable_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLDataTypesParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLDataTypesParser.Data_type_attributeContext,i)


        def AS(self):
            return self.getToken(TeradataSQLDataTypesParser.AS, 0)

        def DEFERRED(self):
            return self.getToken(TeradataSQLDataTypesParser.DEFERRED, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLDataTypesParser.LOCATOR, 0)

        def BY(self):
            return self.getToken(TeradataSQLDataTypesParser.BY, 0)

        def NAME(self):
            return self.getToken(TeradataSQLDataTypesParser.NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_spec" ):
                listener.enterUsing_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_spec" ):
                listener.exitUsing_spec(self)




    def using_spec(self):

        localctx = TeradataSQLDataTypesParser.Using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_using_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5958
            self.variable_name()
            self.state = 5959
            self.data_type()
            self.state = 5963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 5960
                self.data_type_attribute()
                self.state = 5965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5966
                self.match(TeradataSQLDataTypesParser.AS)
                self.state = 5973
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 5967
                    self.match(TeradataSQLDataTypesParser.DEFERRED)
                    self.state = 5970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 5968
                        self.match(TeradataSQLDataTypesParser.BY)
                        self.state = 5969
                        self.match(TeradataSQLDataTypesParser.NAME)


                    pass
                elif token in [225]:
                    self.state = 5972
                    self.match(TeradataSQLDataTypesParser.LOCATOR)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(TeradataSQLDataTypesParser.EXPLAIN, 0)

        def IN(self):
            return self.getToken(TeradataSQLDataTypesParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLDataTypesParser.XML, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLDataTypesParser.STATIC, 0)

        def DYNAMIC(self):
            return self.getToken(TeradataSQLDataTypesParser.DYNAMIC, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLDataTypesParser.NODDLTEXT, 0)

        def getRuleIndex(self):
            return TeradataSQLDataTypesParser.RULE_explain_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_request_modifier" ):
                listener.enterExplain_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_request_modifier" ):
                listener.exitExplain_request_modifier(self)




    def explain_request_modifier(self):

        localctx = TeradataSQLDataTypesParser.Explain_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_explain_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==938:
                self.state = 5977
                _la = self._input.LA(1)
                if not(_la==128 or _la==938):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5980
            self.match(TeradataSQLDataTypesParser.EXPLAIN)
            self.state = 5986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 5981
                self.match(TeradataSQLDataTypesParser.IN)
                self.state = 5982
                self.match(TeradataSQLDataTypesParser.XML)
                self.state = 5984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 5983
                    self.match(TeradataSQLDataTypesParser.NODDLTEXT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[73] = self.query_expr_sempred
        self._predicates[153] = self.logical_expr_sempred
        self._predicates[154] = self.scalar_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def query_expr_sempred(self, localctx:Query_exprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def logical_expr_sempred(self, localctx:Logical_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 11)
         

    def scalar_expr_sempred(self, localctx:Scalar_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 69)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 68)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 67)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 66)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 65)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 60)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 51:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 53:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 55:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 56:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 57:
                return self.precpred(self._ctx, 4)
         




